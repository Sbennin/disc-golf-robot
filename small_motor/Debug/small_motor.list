
small_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006690  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080067d0  080067d0  000167d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006934  08006934  00016934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800693c  0800693c  0001693c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000005c  20000008  08006944  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000057c  20000064  080069a0  00020064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005e0  080069a0  000205e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018c33  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002f21  00000000  00000000  00038d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001a80  00000000  00000000  0003bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001471  00000000  00000000  0003d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022f47  00000000  00000000  0003eb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018507  00000000  00000000  00061a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e37ce  00000000  00000000  00079f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007748  00000000  00000000  0015d740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  00164e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	080067b8 	.word	0x080067b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	080067b8 	.word	0x080067b8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2uiz>:
 80009bc:	004a      	lsls	r2, r1, #1
 80009be:	d211      	bcs.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d211      	bcs.n	80009ea <__aeabi_d2uiz+0x2e>
 80009c6:	d50d      	bpl.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d40e      	bmi.n	80009f0 <__aeabi_d2uiz+0x34>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	fa23 f002 	lsr.w	r0, r3, r2
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d102      	bne.n	80009f6 <__aeabi_d2uiz+0x3a>
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	4770      	bx	lr
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	4770      	bx	lr

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b970 	b.w	8000cf4 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9e08      	ldr	r6, [sp, #32]
 8000a32:	460d      	mov	r5, r1
 8000a34:	4604      	mov	r4, r0
 8000a36:	460f      	mov	r7, r1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d14a      	bne.n	8000ad2 <__udivmoddi4+0xa6>
 8000a3c:	428a      	cmp	r2, r1
 8000a3e:	4694      	mov	ip, r2
 8000a40:	d965      	bls.n	8000b0e <__udivmoddi4+0xe2>
 8000a42:	fab2 f382 	clz	r3, r2
 8000a46:	b143      	cbz	r3, 8000a5a <__udivmoddi4+0x2e>
 8000a48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a4c:	f1c3 0220 	rsb	r2, r3, #32
 8000a50:	409f      	lsls	r7, r3
 8000a52:	fa20 f202 	lsr.w	r2, r0, r2
 8000a56:	4317      	orrs	r7, r2
 8000a58:	409c      	lsls	r4, r3
 8000a5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a5e:	fa1f f58c 	uxth.w	r5, ip
 8000a62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a66:	0c22      	lsrs	r2, r4, #16
 8000a68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a70:	fb01 f005 	mul.w	r0, r1, r5
 8000a74:	4290      	cmp	r0, r2
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x62>
 8000a78:	eb1c 0202 	adds.w	r2, ip, r2
 8000a7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a80:	f080 811c 	bcs.w	8000cbc <__udivmoddi4+0x290>
 8000a84:	4290      	cmp	r0, r2
 8000a86:	f240 8119 	bls.w	8000cbc <__udivmoddi4+0x290>
 8000a8a:	3902      	subs	r1, #2
 8000a8c:	4462      	add	r2, ip
 8000a8e:	1a12      	subs	r2, r2, r0
 8000a90:	b2a4      	uxth	r4, r4
 8000a92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a9e:	fb00 f505 	mul.w	r5, r0, r5
 8000aa2:	42a5      	cmp	r5, r4
 8000aa4:	d90a      	bls.n	8000abc <__udivmoddi4+0x90>
 8000aa6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aaa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aae:	f080 8107 	bcs.w	8000cc0 <__udivmoddi4+0x294>
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	f240 8104 	bls.w	8000cc0 <__udivmoddi4+0x294>
 8000ab8:	4464      	add	r4, ip
 8000aba:	3802      	subs	r0, #2
 8000abc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac0:	1b64      	subs	r4, r4, r5
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	b11e      	cbz	r6, 8000ace <__udivmoddi4+0xa2>
 8000ac6:	40dc      	lsrs	r4, r3
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e9c6 4300 	strd	r4, r3, [r6]
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d908      	bls.n	8000ae8 <__udivmoddi4+0xbc>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	f000 80ed 	beq.w	8000cb6 <__udivmoddi4+0x28a>
 8000adc:	2100      	movs	r1, #0
 8000ade:	e9c6 0500 	strd	r0, r5, [r6]
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae8:	fab3 f183 	clz	r1, r3
 8000aec:	2900      	cmp	r1, #0
 8000aee:	d149      	bne.n	8000b84 <__udivmoddi4+0x158>
 8000af0:	42ab      	cmp	r3, r5
 8000af2:	d302      	bcc.n	8000afa <__udivmoddi4+0xce>
 8000af4:	4282      	cmp	r2, r0
 8000af6:	f200 80f8 	bhi.w	8000cea <__udivmoddi4+0x2be>
 8000afa:	1a84      	subs	r4, r0, r2
 8000afc:	eb65 0203 	sbc.w	r2, r5, r3
 8000b00:	2001      	movs	r0, #1
 8000b02:	4617      	mov	r7, r2
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d0e2      	beq.n	8000ace <__udivmoddi4+0xa2>
 8000b08:	e9c6 4700 	strd	r4, r7, [r6]
 8000b0c:	e7df      	b.n	8000ace <__udivmoddi4+0xa2>
 8000b0e:	b902      	cbnz	r2, 8000b12 <__udivmoddi4+0xe6>
 8000b10:	deff      	udf	#255	; 0xff
 8000b12:	fab2 f382 	clz	r3, r2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f040 8090 	bne.w	8000c3c <__udivmoddi4+0x210>
 8000b1c:	1a8a      	subs	r2, r1, r2
 8000b1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b22:	fa1f fe8c 	uxth.w	lr, ip
 8000b26:	2101      	movs	r1, #1
 8000b28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b30:	0c22      	lsrs	r2, r4, #16
 8000b32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b36:	fb0e f005 	mul.w	r0, lr, r5
 8000b3a:	4290      	cmp	r0, r2
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x124>
 8000b3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x122>
 8000b48:	4290      	cmp	r0, r2
 8000b4a:	f200 80cb 	bhi.w	8000ce4 <__udivmoddi4+0x2b8>
 8000b4e:	4645      	mov	r5, r8
 8000b50:	1a12      	subs	r2, r2, r0
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b58:	fb07 2210 	mls	r2, r7, r0, r2
 8000b5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b60:	fb0e fe00 	mul.w	lr, lr, r0
 8000b64:	45a6      	cmp	lr, r4
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0x14e>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b70:	d202      	bcs.n	8000b78 <__udivmoddi4+0x14c>
 8000b72:	45a6      	cmp	lr, r4
 8000b74:	f200 80bb 	bhi.w	8000cee <__udivmoddi4+0x2c2>
 8000b78:	4610      	mov	r0, r2
 8000b7a:	eba4 040e 	sub.w	r4, r4, lr
 8000b7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b82:	e79f      	b.n	8000ac4 <__udivmoddi4+0x98>
 8000b84:	f1c1 0720 	rsb	r7, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b92:	fa05 f401 	lsl.w	r4, r5, r1
 8000b96:	fa20 f307 	lsr.w	r3, r0, r7
 8000b9a:	40fd      	lsrs	r5, r7
 8000b9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba0:	4323      	orrs	r3, r4
 8000ba2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ba6:	fa1f fe8c 	uxth.w	lr, ip
 8000baa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bae:	0c1c      	lsrs	r4, r3, #16
 8000bb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb8:	42a5      	cmp	r5, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000bc2:	d90b      	bls.n	8000bdc <__udivmoddi4+0x1b0>
 8000bc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bcc:	f080 8088 	bcs.w	8000ce0 <__udivmoddi4+0x2b4>
 8000bd0:	42a5      	cmp	r5, r4
 8000bd2:	f240 8085 	bls.w	8000ce0 <__udivmoddi4+0x2b4>
 8000bd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bda:	4464      	add	r4, ip
 8000bdc:	1b64      	subs	r4, r4, r5
 8000bde:	b29d      	uxth	r5, r3
 8000be0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000be4:	fb09 4413 	mls	r4, r9, r3, r4
 8000be8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf0:	45a6      	cmp	lr, r4
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x1da>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bfc:	d26c      	bcs.n	8000cd8 <__udivmoddi4+0x2ac>
 8000bfe:	45a6      	cmp	lr, r4
 8000c00:	d96a      	bls.n	8000cd8 <__udivmoddi4+0x2ac>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	4464      	add	r4, ip
 8000c06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c0e:	eba4 040e 	sub.w	r4, r4, lr
 8000c12:	42ac      	cmp	r4, r5
 8000c14:	46c8      	mov	r8, r9
 8000c16:	46ae      	mov	lr, r5
 8000c18:	d356      	bcc.n	8000cc8 <__udivmoddi4+0x29c>
 8000c1a:	d053      	beq.n	8000cc4 <__udivmoddi4+0x298>
 8000c1c:	b156      	cbz	r6, 8000c34 <__udivmoddi4+0x208>
 8000c1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c22:	eb64 040e 	sbc.w	r4, r4, lr
 8000c26:	fa04 f707 	lsl.w	r7, r4, r7
 8000c2a:	40ca      	lsrs	r2, r1
 8000c2c:	40cc      	lsrs	r4, r1
 8000c2e:	4317      	orrs	r7, r2
 8000c30:	e9c6 7400 	strd	r7, r4, [r6]
 8000c34:	4618      	mov	r0, r3
 8000c36:	2100      	movs	r1, #0
 8000c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3c:	f1c3 0120 	rsb	r1, r3, #32
 8000c40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c44:	fa20 f201 	lsr.w	r2, r0, r1
 8000c48:	fa25 f101 	lsr.w	r1, r5, r1
 8000c4c:	409d      	lsls	r5, r3
 8000c4e:	432a      	orrs	r2, r5
 8000c50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c60:	0c11      	lsrs	r1, r2, #16
 8000c62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c66:	fb00 f50e 	mul.w	r5, r0, lr
 8000c6a:	428d      	cmp	r5, r1
 8000c6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x258>
 8000c72:	eb1c 0101 	adds.w	r1, ip, r1
 8000c76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c7a:	d22f      	bcs.n	8000cdc <__udivmoddi4+0x2b0>
 8000c7c:	428d      	cmp	r5, r1
 8000c7e:	d92d      	bls.n	8000cdc <__udivmoddi4+0x2b0>
 8000c80:	3802      	subs	r0, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1b49      	subs	r1, r1, r5
 8000c86:	b292      	uxth	r2, r2
 8000c88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c94:	fb05 f10e 	mul.w	r1, r5, lr
 8000c98:	4291      	cmp	r1, r2
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x282>
 8000c9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca4:	d216      	bcs.n	8000cd4 <__udivmoddi4+0x2a8>
 8000ca6:	4291      	cmp	r1, r2
 8000ca8:	d914      	bls.n	8000cd4 <__udivmoddi4+0x2a8>
 8000caa:	3d02      	subs	r5, #2
 8000cac:	4462      	add	r2, ip
 8000cae:	1a52      	subs	r2, r2, r1
 8000cb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cb4:	e738      	b.n	8000b28 <__udivmoddi4+0xfc>
 8000cb6:	4631      	mov	r1, r6
 8000cb8:	4630      	mov	r0, r6
 8000cba:	e708      	b.n	8000ace <__udivmoddi4+0xa2>
 8000cbc:	4639      	mov	r1, r7
 8000cbe:	e6e6      	b.n	8000a8e <__udivmoddi4+0x62>
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	e6fb      	b.n	8000abc <__udivmoddi4+0x90>
 8000cc4:	4548      	cmp	r0, r9
 8000cc6:	d2a9      	bcs.n	8000c1c <__udivmoddi4+0x1f0>
 8000cc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ccc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	e7a3      	b.n	8000c1c <__udivmoddi4+0x1f0>
 8000cd4:	4645      	mov	r5, r8
 8000cd6:	e7ea      	b.n	8000cae <__udivmoddi4+0x282>
 8000cd8:	462b      	mov	r3, r5
 8000cda:	e794      	b.n	8000c06 <__udivmoddi4+0x1da>
 8000cdc:	4640      	mov	r0, r8
 8000cde:	e7d1      	b.n	8000c84 <__udivmoddi4+0x258>
 8000ce0:	46d0      	mov	r8, sl
 8000ce2:	e77b      	b.n	8000bdc <__udivmoddi4+0x1b0>
 8000ce4:	3d02      	subs	r5, #2
 8000ce6:	4462      	add	r2, ip
 8000ce8:	e732      	b.n	8000b50 <__udivmoddi4+0x124>
 8000cea:	4608      	mov	r0, r1
 8000cec:	e70a      	b.n	8000b04 <__udivmoddi4+0xd8>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	e742      	b.n	8000b7a <__udivmoddi4+0x14e>

08000cf4 <__aeabi_idiv0>:
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d08:	f023 0218 	bic.w	r2, r3, #24
 8000d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d48:	68fb      	ldr	r3, [r7, #12]
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b092      	sub	sp, #72	; 0x48
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5e:	f000 fffd 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d62:	f000 f8a7 	bl	8000eb4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d66:	f000 f91b 	bl	8000fa0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6a:	f000 fa77 	bl	800125c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d6e:	f000 fa01 	bl	8001174 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000d72:	f000 fa4b 	bl	800120c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000d76:	f000 f931 	bl	8000fdc <MX_TIM2_Init>
  MX_TIM16_Init();
 8000d7a:	f000 f983 	bl	8001084 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4844      	ldr	r0, [pc, #272]	; (8000e94 <main+0x13c>)
 8000d82:	f003 fad7 	bl	8004334 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //really just channel 1 and 2 because that is what the encoder uses
 8000d86:	213c      	movs	r1, #60	; 0x3c
 8000d88:	4843      	ldr	r0, [pc, #268]	; (8000e98 <main+0x140>)
 8000d8a:	f003 fc53 	bl	8004634 <HAL_TIM_Encoder_Start>
  Rot_CW_PWM(0);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 faf0 	bl	8001374 <Rot_CW_PWM>
  Stop_Motor();
 8000d94:	f000 fb24 	bl	80013e0 <Stop_Motor>
  state = 0;
 8000d98:	4b40      	ldr	r3, [pc, #256]	; (8000e9c <main+0x144>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
  state_changed = 0;
 8000d9e:	4b40      	ldr	r3, [pc, #256]	; (8000ea0 <main+0x148>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (state == 0){ //stopped //fast
 8000da4:	4b3d      	ldr	r3, [pc, #244]	; (8000e9c <main+0x144>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d10f      	bne.n	8000dcc <main+0x74>
		  if (state_changed == 1)
 8000dac:	4b3c      	ldr	r3, [pc, #240]	; (8000ea0 <main+0x148>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d104      	bne.n	8000dbe <main+0x66>
		  {
			  Stop_Motor();
 8000db4:	f000 fb14 	bl	80013e0 <Stop_Motor>
			  state_changed = 0;
 8000db8:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <main+0x148>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
		  }
		  Blue_On();
 8000dbe:	f000 fd27 	bl	8001810 <Blue_On>
		  Green_Off();
 8000dc2:	f000 fd19 	bl	80017f8 <Green_Off>
		  Red_Off();
 8000dc6:	f000 fcff 	bl	80017c8 <Red_Off>
 8000dca:	e7eb      	b.n	8000da4 <main+0x4c>

		  //Update_PWM(100);
	  }
	  else if (state == 1){ //CW //faster
 8000dcc:	4b33      	ldr	r3, [pc, #204]	; (8000e9c <main+0x144>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d125      	bne.n	8000e20 <main+0xc8>
		  if (state_changed == 1)
 8000dd4:	4b32      	ldr	r3, [pc, #200]	; (8000ea0 <main+0x148>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d11a      	bne.n	8000e12 <main+0xba>
		  {
			  Set_CW();
 8000ddc:	f000 fad8 	bl	8001390 <Set_CW>
			  state_changed = 0;
 8000de0:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <main+0x148>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]

			  //Update_PWM(50);
			  Set_Speed(800);
 8000de6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000dea:	f000 fbf7 	bl	80015dc <Set_Speed>
			  uint8_t done[] = "Done\r\n";
 8000dee:	4a2d      	ldr	r2, [pc, #180]	; (8000ea4 <main+0x14c>)
 8000df0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df8:	6018      	str	r0, [r3, #0]
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	8019      	strh	r1, [r3, #0]
 8000dfe:	3302      	adds	r3, #2
 8000e00:	0c0a      	lsrs	r2, r1, #16
 8000e02:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1,done, sizeof(done),10);
 8000e04:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000e08:	230a      	movs	r3, #10
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	4826      	ldr	r0, [pc, #152]	; (8000ea8 <main+0x150>)
 8000e0e:	f004 fa1d 	bl	800524c <HAL_UART_Transmit>
		  }
		  Blue_Off();
 8000e12:	f000 fd09 	bl	8001828 <Blue_Off>
		  Green_On();
 8000e16:	f000 fce3 	bl	80017e0 <Green_On>
		  Red_Off();
 8000e1a:	f000 fcd5 	bl	80017c8 <Red_Off>
 8000e1e:	e7c1      	b.n	8000da4 <main+0x4c>

		  //Update_PWM(100);
	  }
	  else if (state == 2){//CCW //slower
 8000e20:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <main+0x144>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d131      	bne.n	8000e8c <main+0x134>
		  if (state_changed == 1)
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <main+0x148>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d126      	bne.n	8000e7e <main+0x126>
		  {
			  //Set_CCW();
			  state_changed = 0;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <main+0x148>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]

			  uint16_t speed = Get_Speed();
 8000e36:	f000 fada 	bl	80013ee <Get_Speed>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			  char Test[50];
			  int size = sprintf(Test, "%d", speed);
 8000e40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000e44:	463b      	mov	r3, r7
 8000e46:	4919      	ldr	r1, [pc, #100]	; (8000eac <main+0x154>)
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f005 f811 	bl	8005e70 <siprintf>
 8000e4e:	6438      	str	r0, [r7, #64]	; 0x40
			  HAL_UART_Transmit(&huart1,(uint8_t*)Test, size,10);
 8000e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4639      	mov	r1, r7
 8000e56:	230a      	movs	r3, #10
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <main+0x150>)
 8000e5a:	f004 f9f7 	bl	800524c <HAL_UART_Transmit>
			  uint8_t new_line[] = "\r\n";
 8000e5e:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <main+0x158>)
 8000e60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	4611      	mov	r1, r2
 8000e68:	8019      	strh	r1, [r3, #0]
 8000e6a:	3302      	adds	r3, #2
 8000e6c:	0c12      	lsrs	r2, r2, #16
 8000e6e:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart1,new_line, sizeof(new_line),10);
 8000e70:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000e74:	230a      	movs	r3, #10
 8000e76:	2203      	movs	r2, #3
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <main+0x150>)
 8000e7a:	f004 f9e7 	bl	800524c <HAL_UART_Transmit>

			  //Update_PWM(100);
		  }

		  Blue_Off();
 8000e7e:	f000 fcd3 	bl	8001828 <Blue_Off>
		  Green_Off();
 8000e82:	f000 fcb9 	bl	80017f8 <Green_Off>
		  Red_On();
 8000e86:	f000 fc93 	bl	80017b0 <Red_On>
 8000e8a:	e78b      	b.n	8000da4 <main+0x4c>
		  Red_On();
		  Update_PWM(40);*/

	  }
	  else{
		  state = 0;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <main+0x144>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
	  if (state == 0){ //stopped //fast
 8000e92:	e787      	b.n	8000da4 <main+0x4c>
 8000e94:	200000cc 	.word	0x200000cc
 8000e98:	20000080 	.word	0x20000080
 8000e9c:	20000488 	.word	0x20000488
 8000ea0:	2000048c 	.word	0x2000048c
 8000ea4:	080067d4 	.word	0x080067d4
 8000ea8:	20000118 	.word	0x20000118
 8000eac:	080067d0 	.word	0x080067d0
 8000eb0:	080067dc 	.word	0x080067dc

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b09a      	sub	sp, #104	; 0x68
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	2248      	movs	r2, #72	; 0x48
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f004 fff4 	bl	8005eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ee8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	f023 0303 	bic.w	r3, r3, #3
 8000ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000efe:	f001 fb7f 	bl	8002600 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fef8 	bl	8000cf8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f08:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <SystemClock_Config+0xe8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f10:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <SystemClock_Config+0xe8>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <SystemClock_Config+0xe8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000f24:	2327      	movs	r3, #39	; 0x27
 8000f26:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3c:	2340      	movs	r3, #64	; 0x40
 8000f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f44:	2360      	movs	r3, #96	; 0x60
 8000f46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 fee9 	bl	8002d28 <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f5c:	f000 fc9d 	bl	800189a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f60:	236f      	movs	r3, #111	; 0x6f
 8000f62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f64:	2302      	movs	r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 fa45 	bl	8003410 <HAL_RCC_ClockConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000f8c:	f000 fc85 	bl	800189a <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f90:	f003 f800 	bl	8003f94 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f94:	bf00      	nop
 8000f96:	3768      	adds	r7, #104	; 0x68
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	58000400 	.word	0x58000400

08000fa0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	; 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2250      	movs	r2, #80	; 0x50
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f004 ff7f 	bl	8005eb0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fe70 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000fce:	f000 fc64 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000fd2:	bf00      	nop
 8000fd4:	3750      	adds	r7, #80	; 0x50
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2224      	movs	r2, #36	; 0x24
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f004 ff60 	bl	8005eb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_TIM2_Init+0xa4>)
 8000ffc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001000:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_TIM2_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_TIM2_Init+0xa4>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM2_Init+0xa4>)
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM2_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_TIM2_Init+0xa4>)
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001022:	2303      	movs	r3, #3
 8001024:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800103a:	2301      	movs	r3, #1
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4619      	mov	r1, r3
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <MX_TIM2_Init+0xa4>)
 800104e:	f003 fa4b 	bl	80044e8 <HAL_TIM_Encoder_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001058:	f000 fc1f 	bl	800189a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_TIM2_Init+0xa4>)
 800106a:	f003 ff99 	bl	8004fa0 <HAL_TIMEx_MasterConfigSynchronization>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001074:	f000 fc11 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	3730      	adds	r7, #48	; 0x30
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000080 	.word	0x20000080

08001084 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	; 0x50
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2234      	movs	r2, #52	; 0x34
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 ff03 	bl	8005eb0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <MX_TIM16_Init+0xe8>)
 80010ac:	4a30      	ldr	r2, [pc, #192]	; (8001170 <MX_TIM16_Init+0xec>)
 80010ae:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80010b0:	4b2e      	ldr	r3, [pc, #184]	; (800116c <MX_TIM16_Init+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b2d      	ldr	r3, [pc, #180]	; (800116c <MX_TIM16_Init+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <MX_TIM16_Init+0xe8>)
 80010be:	22ff      	movs	r2, #255	; 0xff
 80010c0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_TIM16_Init+0xe8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <MX_TIM16_Init+0xe8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <MX_TIM16_Init+0xe8>)
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80010d4:	4825      	ldr	r0, [pc, #148]	; (800116c <MX_TIM16_Init+0xe8>)
 80010d6:	f003 f874 	bl	80041c2 <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80010e0:	f000 fbdb 	bl	800189a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80010e4:	4821      	ldr	r0, [pc, #132]	; (800116c <MX_TIM16_Init+0xe8>)
 80010e6:	f003 f8c3 	bl	8004270 <HAL_TIM_PWM_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80010f0:	f000 fbd3 	bl	800189a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f4:	2360      	movs	r3, #96	; 0x60
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010fc:	2300      	movs	r3, #0
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001100:	2300      	movs	r3, #0
 8001102:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001114:	2200      	movs	r2, #0
 8001116:	4619      	mov	r1, r3
 8001118:	4814      	ldr	r0, [pc, #80]	; (800116c <MX_TIM16_Init+0xe8>)
 800111a:	f003 fb19 	bl	8004750 <HAL_TIM_PWM_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8001124:	f000 fbb9 	bl	800189a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	4619      	mov	r1, r3
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <MX_TIM16_Init+0xe8>)
 8001150:	f003 ff86 	bl	8005060 <HAL_TIMEx_ConfigBreakDeadTime>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800115a:	f000 fb9e 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <MX_TIM16_Init+0xe8>)
 8001160:	f000 fc32 	bl	80019c8 <HAL_TIM_MspPostInit>

}
 8001164:	bf00      	nop
 8001166:	3750      	adds	r7, #80	; 0x50
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000cc 	.word	0x200000cc
 8001170:	40014400 	.word	0x40014400

08001174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <MX_USART1_UART_Init+0x90>)
 800117a:	4a23      	ldr	r2, [pc, #140]	; (8001208 <MX_USART1_UART_Init+0x94>)
 800117c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_USART1_UART_Init+0x90>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_USART1_UART_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_USART1_UART_Init+0x90>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_USART1_UART_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <MX_USART1_UART_Init+0x90>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_USART1_UART_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_USART1_UART_Init+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_USART1_UART_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_USART1_UART_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_USART1_UART_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011bc:	4811      	ldr	r0, [pc, #68]	; (8001204 <MX_USART1_UART_Init+0x90>)
 80011be:	f003 fff5 	bl	80051ac <HAL_UART_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011c8:	f000 fb67 	bl	800189a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011cc:	2100      	movs	r1, #0
 80011ce:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_USART1_UART_Init+0x90>)
 80011d0:	f004 fd4a 	bl	8005c68 <HAL_UARTEx_SetTxFifoThreshold>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011da:	f000 fb5e 	bl	800189a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011de:	2100      	movs	r1, #0
 80011e0:	4808      	ldr	r0, [pc, #32]	; (8001204 <MX_USART1_UART_Init+0x90>)
 80011e2:	f004 fd7f 	bl	8005ce4 <HAL_UARTEx_SetRxFifoThreshold>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011ec:	f000 fb55 	bl	800189a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <MX_USART1_UART_Init+0x90>)
 80011f2:	f004 fd00 	bl	8005bf6 <HAL_UARTEx_DisableFifoMode>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011fc:	f000 fb4d 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000118 	.word	0x20000118
 8001208:	40013800 	.word	0x40013800

0800120c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_USB_PCD_Init+0x48>)
 8001212:	4a11      	ldr	r2, [pc, #68]	; (8001258 <MX_USB_PCD_Init+0x4c>)
 8001214:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_USB_PCD_Init+0x48>)
 8001218:	2208      	movs	r2, #8
 800121a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <MX_USB_PCD_Init+0x48>)
 800121e:	2202      	movs	r2, #2
 8001220:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_USB_PCD_Init+0x48>)
 8001224:	2202      	movs	r2, #2
 8001226:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <MX_USB_PCD_Init+0x48>)
 800122a:	2200      	movs	r2, #0
 800122c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_USB_PCD_Init+0x48>)
 8001230:	2200      	movs	r2, #0
 8001232:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <MX_USB_PCD_Init+0x48>)
 8001236:	2200      	movs	r2, #0
 8001238:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_USB_PCD_Init+0x48>)
 800123c:	2200      	movs	r2, #0
 800123e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <MX_USB_PCD_Init+0x48>)
 8001242:	f001 f8e5 	bl	8002410 <HAL_PCD_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800124c:	f000 fb25 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200001ac 	.word	0x200001ac
 8001258:	40006800 	.word	0x40006800

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	2004      	movs	r0, #4
 8001272:	f7ff fd57 	bl	8000d24 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2001      	movs	r0, #1
 8001278:	f7ff fd54 	bl	8000d24 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	2002      	movs	r0, #2
 800127e:	f7ff fd51 	bl	8000d24 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	2008      	movs	r0, #8
 8001284:	f7ff fd4e 	bl	8000d24 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f001 f88d 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2123      	movs	r1, #35	; 0x23
 800129a:	4833      	ldr	r0, [pc, #204]	; (8001368 <MX_GPIO_Init+0x10c>)
 800129c:	f001 f888 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a6:	4831      	ldr	r0, [pc, #196]	; (800136c <MX_GPIO_Init+0x110>)
 80012a8:	f001 f882 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80012ac:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80012b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f000 ff03 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ca:	2310      	movs	r3, #16
 80012cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	4823      	ldr	r0, [pc, #140]	; (800136c <MX_GPIO_Init+0x110>)
 80012de:	f000 fef7 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80012e2:	2323      	movs	r3, #35	; 0x23
 80012e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	481c      	ldr	r0, [pc, #112]	; (8001368 <MX_GPIO_Init+0x10c>)
 80012f8:	f000 feea 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001300:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4816      	ldr	r0, [pc, #88]	; (800136c <MX_GPIO_Init+0x110>)
 8001314:	f000 fedc 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001318:	2303      	movs	r3, #3
 800131a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800131c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001320:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001322:	2301      	movs	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4811      	ldr	r0, [pc, #68]	; (8001370 <MX_GPIO_Init+0x114>)
 800132c:	f000 fed0 	bl	80020d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	2006      	movs	r0, #6
 8001336:	f000 fe96 	bl	8002066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800133a:	2006      	movs	r0, #6
 800133c:	f000 fead 	bl	800209a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2007      	movs	r0, #7
 8001346:	f000 fe8e 	bl	8002066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800134a:	2007      	movs	r0, #7
 800134c:	f000 fea5 	bl	800209a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	200a      	movs	r0, #10
 8001356:	f000 fe86 	bl	8002066 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800135a:	200a      	movs	r0, #10
 800135c:	f000 fe9d 	bl	800209a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001360:	bf00      	nop
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	48000400 	.word	0x48000400
 800136c:	48000800 	.word	0x48000800
 8001370:	48000c00 	.word	0x48000c00

08001374 <Rot_CW_PWM>:

/* USER CODE BEGIN 4 */
void Rot_CW_PWM(uint32_t duty) //facing motor end
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	Set_CW();
 800137c:	f000 f808 	bl	8001390 <Set_CW>
	Update_PWM(duty);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f9e9 	bl	8001758 <Update_PWM>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <Set_CW>:
	Update_PWM(duty);

}

void Set_CW()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f001 f807 	bl	80023b0 <HAL_GPIO_WritePin>

	Update_PWM(0);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 f9d8 	bl	8001758 <Update_PWM>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f000 fffd 	bl	80023b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <Set_CW+0x4c>)
 80013be:	f000 fff7 	bl	80023b0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f000 fff0 	bl	80023b0 <HAL_GPIO_WritePin>
	HAL_Delay(500); //so motor doesn't jerk
 80013d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013d4:	f000 fd48 	bl	8001e68 <HAL_Delay>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	48000800 	.word	0x48000800

080013e0 <Stop_Motor>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	HAL_Delay(500);
}

void Stop_Motor()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	Update_PWM(0);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 f9b7 	bl	8001758 <Update_PWM>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}

080013ee <Get_Speed>:

uint16_t Get_Speed() // does not look at direction
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b084      	sub	sp, #16
 80013f2:	af00      	add	r7, sp, #0
	uint32_t total = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
	uint16_t avg = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	80fb      	strh	r3, [r7, #6]
	uint8_t readings = 3;
 80013fc:	2303      	movs	r3, #3
 80013fe:	717b      	strb	r3, [r7, #5]
	for (int i = 0; i < readings; i++)
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	e00c      	b.n	8001420 <Get_Speed+0x32>
	{
		total += Read_Speed();
 8001406:	f000 f81b 	bl	8001440 <Read_Speed>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4413      	add	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
		HAL_Delay(2); //Offset
 8001414:	2002      	movs	r0, #2
 8001416:	f000 fd27 	bl	8001e68 <HAL_Delay>
	for (int i = 0; i < readings; i++)
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	3301      	adds	r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	797b      	ldrb	r3, [r7, #5]
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	429a      	cmp	r2, r3
 8001426:	dbee      	blt.n	8001406 <Get_Speed+0x18>
	}

	avg = total/readings;
 8001428:	797b      	ldrb	r3, [r7, #5]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	80fb      	strh	r3, [r7, #6]
	return avg;
 8001432:	88fb      	ldrh	r3, [r7, #6]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	0000      	movs	r0, r0
	...

08001440 <Read_Speed>:

uint16_t Read_Speed() //rpm
{
 8001440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
	//return 5;
	//TIM1->CR1 = 1;
	//uint8_t Test[] = "Starting speed reading\r\n";
	//HAL_UART_Transmit(&huart1,Test, sizeof(Test),10);

	uint32_t period = 50;
 8001448:	2332      	movs	r3, #50	; 0x32
 800144a:	613b      	str	r3, [r7, #16]
	uint16_t speed = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	82fb      	strh	r3, [r7, #22]
	uint32_t start_counter = __HAL_TIM_GET_COUNTER(&htim2);
 8001450:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <Read_Speed+0x188>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	60fb      	str	r3, [r7, #12]

	//char Test3[50];
	//int size3 = sprintf(Test3, "start counter= %lu\r\n", start_counter);
	//HAL_UART_Transmit(&huart1,(uint8_t*)Test3, size3,10);

	HAL_Delay(period);
 8001458:	6938      	ldr	r0, [r7, #16]
 800145a:	f000 fd05 	bl	8001e68 <HAL_Delay>
	uint32_t end_counter = __HAL_TIM_GET_COUNTER(&htim2);
 800145e:	4b5a      	ldr	r3, [pc, #360]	; (80015c8 <Read_Speed+0x188>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	60bb      	str	r3, [r7, #8]

	//char Test2[50];
	//int size2 = sprintf(Test2, "end counter=   %lu\r\n", end_counter);
	//HAL_UART_Transmit(&huart1,(uint8_t*)Test2, size2,10);

	if (start_counter == end_counter)
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	429a      	cmp	r2, r3
 800146c:	d102      	bne.n	8001474 <Read_Speed+0x34>
	{
		speed = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	82fb      	strh	r3, [r7, #22]
 8001472:	e09d      	b.n	80015b0 <Read_Speed+0x170>
	}
	else if (start_counter > end_counter)
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	429a      	cmp	r2, r3
 800147a:	d944      	bls.n	8001506 <Read_Speed+0xc6>
	{
		speed = (start_counter - end_counter)*(1000.0/period)*60.0/4/PPR/GEAR_RATIO;
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f80e 	bl	80004a4 <__aeabi_ui2d>
 8001488:	4604      	mov	r4, r0
 800148a:	460d      	mov	r5, r1
 800148c:	6938      	ldr	r0, [r7, #16]
 800148e:	f7ff f809 	bl	80004a4 <__aeabi_ui2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	f04f 0000 	mov.w	r0, #0
 800149a:	494c      	ldr	r1, [pc, #304]	; (80015cc <Read_Speed+0x18c>)
 800149c:	f7ff f9a6 	bl	80007ec <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4620      	mov	r0, r4
 80014a6:	4629      	mov	r1, r5
 80014a8:	f7ff f876 	bl	8000598 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4b45      	ldr	r3, [pc, #276]	; (80015d0 <Read_Speed+0x190>)
 80014ba:	f7ff f86d 	bl	8000598 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b42      	ldr	r3, [pc, #264]	; (80015d4 <Read_Speed+0x194>)
 80014cc:	f7ff f98e 	bl	80007ec <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4b3e      	ldr	r3, [pc, #248]	; (80015d8 <Read_Speed+0x198>)
 80014de:	f7ff f985 	bl	80007ec <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	a335      	add	r3, pc, #212	; (adr r3, 80015c0 <Read_Speed+0x180>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f97c 	bl	80007ec <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fa5e 	bl	80009bc <__aeabi_d2uiz>
 8001500:	4603      	mov	r3, r0
 8001502:	82fb      	strh	r3, [r7, #22]
 8001504:	e054      	b.n	80015b0 <Read_Speed+0x170>
	}
	else //overflow occurred
	{
		speed = (4294967295 - end_counter + start_counter)*(1000.0/period)*60.0/4/PPR/GEAR_RATIO;
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2200      	movs	r2, #0
 800150a:	469a      	mov	sl, r3
 800150c:	4693      	mov	fp, r2
 800150e:	2300      	movs	r3, #0
 8001510:	f1da 34ff 	rsbs	r4, sl, #4294967295
 8001514:	eb63 050b 	sbc.w	r5, r3, fp
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	4698      	mov	r8, r3
 800151e:	4691      	mov	r9, r2
 8001520:	eb14 0308 	adds.w	r3, r4, r8
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	eb45 0309 	adc.w	r3, r5, r9
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001530:	f7ff f804 	bl	800053c <__aeabi_l2d>
 8001534:	4604      	mov	r4, r0
 8001536:	460d      	mov	r5, r1
 8001538:	6938      	ldr	r0, [r7, #16]
 800153a:	f7fe ffb3 	bl	80004a4 <__aeabi_ui2d>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	f04f 0000 	mov.w	r0, #0
 8001546:	4921      	ldr	r1, [pc, #132]	; (80015cc <Read_Speed+0x18c>)
 8001548:	f7ff f950 	bl	80007ec <__aeabi_ddiv>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7ff f820 	bl	8000598 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <Read_Speed+0x190>)
 8001566:	f7ff f817 	bl	8000598 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <Read_Speed+0x194>)
 8001578:	f7ff f938 	bl	80007ec <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <Read_Speed+0x198>)
 800158a:	f7ff f92f 	bl	80007ec <__aeabi_ddiv>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	a30a      	add	r3, pc, #40	; (adr r3, 80015c0 <Read_Speed+0x180>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff f926 	bl	80007ec <__aeabi_ddiv>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fa08 	bl	80009bc <__aeabi_d2uiz>
 80015ac:	4603      	mov	r3, r0
 80015ae:	82fb      	strh	r3, [r7, #22]
	}
	return speed;
 80015b0:	8afb      	ldrh	r3, [r7, #22]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015bc:	f3af 8000 	nop.w
 80015c0:	9999999a 	.word	0x9999999a
 80015c4:	400d9999 	.word	0x400d9999
 80015c8:	20000080 	.word	0x20000080
 80015cc:	408f4000 	.word	0x408f4000
 80015d0:	404e0000 	.word	0x404e0000
 80015d4:	40100000 	.word	0x40100000
 80015d8:	401c0000 	.word	0x401c0000

080015dc <Set_Speed>:

void Set_Speed(uint32_t goal)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0aa      	sub	sp, #168	; 0xa8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	float Kp = 0.03;
 80015e4:	4b57      	ldr	r3, [pc, #348]	; (8001744 <Set_Speed+0x168>)
 80015e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float Ki = 0.04;
 80015ea:	4b57      	ldr	r3, [pc, #348]	; (8001748 <Set_Speed+0x16c>)
 80015ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	int period = 100;
 80015f0:	2364      	movs	r3, #100	; 0x64
 80015f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int stable = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	int stable_threshold = 5;
 80015fc:	2305      	movs	r3, #5
 80015fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int failures = 0; //to check if it never converges
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int failure_threshold = 50;
 8001608:	2332      	movs	r3, #50	; 0x32
 800160a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	int I = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	do
	{
		int current = Get_Speed();
 8001614:	f7ff feeb 	bl	80013ee <Get_Speed>
 8001618:	4603      	mov	r3, r0
 800161a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		  char Test[50];
		  int size = sprintf(Test, "cur speed: %d\r\nfailures: %d\r\n", current, failures);
 800161e:	f107 0008 	add.w	r0, r7, #8
 8001622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001626:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800162a:	4948      	ldr	r1, [pc, #288]	; (800174c <Set_Speed+0x170>)
 800162c:	f004 fc20 	bl	8005e70 <siprintf>
 8001630:	67f8      	str	r0, [r7, #124]	; 0x7c
		  HAL_UART_Transmit(&huart1,(uint8_t*)Test, size,10);
 8001632:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001634:	b29a      	uxth	r2, r3
 8001636:	f107 0108 	add.w	r1, r7, #8
 800163a:	230a      	movs	r3, #10
 800163c:	4844      	ldr	r0, [pc, #272]	; (8001750 <Set_Speed+0x174>)
 800163e:	f003 fe05 	bl	800524c <HAL_UART_Transmit>

		int error = goal - current;
 8001642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	67bb      	str	r3, [r7, #120]	; 0x78

		int P = error*Kp;
 800164c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001656:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800165a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001662:	ee17 3a90 	vmov	r3, s15
 8001666:	677b      	str	r3, [r7, #116]	; 0x74
		I = I + error*Ki;
 8001668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800167e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800168e:	ee17 3a90 	vmov	r3, s15
 8001692:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		int duty = P + I;
 8001696:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800169c:	4413      	add	r3, r2
 800169e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		char Test2[50];
				  int size2 = sprintf(Test2, "duty: %d\r\n", duty);
 80016a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80016aa:	492a      	ldr	r1, [pc, #168]	; (8001754 <Set_Speed+0x178>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f004 fbdf 	bl	8005e70 <siprintf>
 80016b2:	6738      	str	r0, [r7, #112]	; 0x70
				  HAL_UART_Transmit(&huart1,(uint8_t*)Test2, size2,10);
 80016b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80016bc:	230a      	movs	r3, #10
 80016be:	4824      	ldr	r0, [pc, #144]	; (8001750 <Set_Speed+0x174>)
 80016c0:	f003 fdc4 	bl	800524c <HAL_UART_Transmit>

		if (duty < 0)
 80016c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da03      	bge.n	80016d4 <Set_Speed+0xf8>
		{
			duty = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016d2:	e006      	b.n	80016e2 <Set_Speed+0x106>
		}
		else if (duty > 100)
 80016d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016d8:	2b64      	cmp	r3, #100	; 0x64
 80016da:	dd02      	ble.n	80016e2 <Set_Speed+0x106>
		{
			duty = 100;
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		}

		Update_PWM(duty);
 80016e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f836 	bl	8001758 <Update_PWM>
		HAL_Delay(period);
 80016ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fbb9 	bl	8001e68 <HAL_Delay>
		if (error < 10 && error > -10)
 80016f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016f8:	2b09      	cmp	r3, #9
 80016fa:	dc09      	bgt.n	8001710 <Set_Speed+0x134>
 80016fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016fe:	f113 0f09 	cmn.w	r3, #9
 8001702:	db05      	blt.n	8001710 <Set_Speed+0x134>
		{
			stable++;
 8001704:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001708:	3301      	adds	r3, #1
 800170a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800170e:	e002      	b.n	8001716 <Set_Speed+0x13a>
		}
		else
		{
			stable = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}
		failures++;
 8001716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800171a:	3301      	adds	r3, #1
 800171c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	} while(stable < stable_threshold && failures < failure_threshold);
 8001720:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001724:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001728:	429a      	cmp	r2, r3
 800172a:	da06      	bge.n	800173a <Set_Speed+0x15e>
 800172c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001730:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001734:	429a      	cmp	r2, r3
 8001736:	f6ff af6d 	blt.w	8001614 <Set_Speed+0x38>
}
 800173a:	bf00      	nop
 800173c:	37a8      	adds	r7, #168	; 0xa8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	3cf5c28f 	.word	0x3cf5c28f
 8001748:	3d23d70a 	.word	0x3d23d70a
 800174c:	080067e0 	.word	0x080067e0
 8001750:	20000118 	.word	0x20000118
 8001754:	08006800 	.word	0x08006800

08001758 <Update_PWM>:

void Update_PWM(uint32_t duty)
{
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	uint32_t CCR = (TIM16->ARR)*(duty/100.0);
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <Update_PWM+0x50>)
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe fe9d 	bl	80004a4 <__aeabi_ui2d>
 800176a:	4604      	mov	r4, r0
 800176c:	460d      	mov	r5, r1
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7fe fe98 	bl	80004a4 <__aeabi_ui2d>
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <Update_PWM+0x54>)
 800177a:	f7ff f837 	bl	80007ec <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff07 	bl	8000598 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f913 	bl	80009bc <__aeabi_d2uiz>
 8001796:	4603      	mov	r3, r0
 8001798:	60fb      	str	r3, [r7, #12]
	//__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, CCR);
	TIM16->CCR1 = CCR;
 800179a:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <Update_PWM+0x50>)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6353      	str	r3, [r2, #52]	; 0x34
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}
 80017a8:	40014400 	.word	0x40014400
 80017ac:	40590000 	.word	0x40590000

080017b0 <Red_On>:

void Red_On()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	2102      	movs	r1, #2
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <Red_On+0x14>)
 80017ba:	f000 fdf9 	bl	80023b0 <HAL_GPIO_WritePin>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	48000400 	.word	0x48000400

080017c8 <Red_Off>:

void Red_Off()
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2102      	movs	r1, #2
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <Red_Off+0x14>)
 80017d2:	f000 fded 	bl	80023b0 <HAL_GPIO_WritePin>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	48000400 	.word	0x48000400

080017e0 <Green_On>:

void Green_On()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2101      	movs	r1, #1
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <Green_On+0x14>)
 80017ea:	f000 fde1 	bl	80023b0 <HAL_GPIO_WritePin>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	48000400 	.word	0x48000400

080017f8 <Green_Off>:

void Green_Off()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2101      	movs	r1, #1
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <Green_Off+0x14>)
 8001802:	f000 fdd5 	bl	80023b0 <HAL_GPIO_WritePin>
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	48000400 	.word	0x48000400

08001810 <Blue_On>:

void Blue_On()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001814:	2201      	movs	r2, #1
 8001816:	2120      	movs	r1, #32
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <Blue_On+0x14>)
 800181a:	f000 fdc9 	bl	80023b0 <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	48000400 	.word	0x48000400

08001828 <Blue_Off>:

void Blue_Off()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	2120      	movs	r1, #32
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <Blue_Off+0x14>)
 8001832:	f000 fdbd 	bl	80023b0 <HAL_GPIO_WritePin>
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	48000400 	.word	0x48000400

08001840 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == B1_Pin){state = 0;}      //10
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	2b10      	cmp	r3, #16
 800184e:	d103      	bne.n	8001858 <HAL_GPIO_EXTI_Callback+0x18>
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_GPIO_EXTI_Callback+0x44>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e00c      	b.n	8001872 <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_PIN == B2_Pin){state = 1;} //1
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d103      	bne.n	8001866 <HAL_GPIO_EXTI_Callback+0x26>
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_GPIO_EXTI_Callback+0x44>)
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e005      	b.n	8001872 <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_PIN == B3_Pin){state = 2;} //2
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d102      	bne.n	8001872 <HAL_GPIO_EXTI_Callback+0x32>
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_GPIO_EXTI_Callback+0x44>)
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
	state_changed = 1;
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_GPIO_EXTI_Callback+0x48>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	20000488 	.word	0x20000488
 8001888:	2000048c 	.word	0x2000048c

0800188c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189e:	b672      	cpsid	i
}
 80018a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <Error_Handler+0x8>

080018a4 <LL_AHB2_GRP1_EnableClock>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018c8:	68fb      	ldr	r3, [r7, #12]
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4013      	ands	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001914:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001916:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4313      	orrs	r3, r2
 800191e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800192c:	68fb      	ldr	r3, [r7, #12]
}
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001968:	d116      	bne.n	8001998 <HAL_TIM_Encoder_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196a:	2001      	movs	r0, #1
 800196c:	f7ff ffb3 	bl	80018d6 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	2001      	movs	r0, #1
 8001972:	f7ff ff97 	bl	80018a4 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001976:	2303      	movs	r3, #3
 8001978:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001986:	2301      	movs	r3, #1
 8001988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f000 fb9c 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001998:	bf00      	nop
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <HAL_TIM_Base_MspInit+0x24>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d103      	bne.n	80019ba <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80019b6:	f7ff ffa7 	bl	8001908 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40014400 	.word	0x40014400

080019c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <HAL_TIM_MspPostInit+0x54>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d113      	bne.n	8001a12 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff ff5a 	bl	80018a4 <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019f0:	2340      	movs	r3, #64	; 0x40
 80019f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001a00:	230e      	movs	r3, #14
 8001a02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0e:	f000 fb5f 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40014400 	.word	0x40014400

08001a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b09c      	sub	sp, #112	; 0x70
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	2250      	movs	r2, #80	; 0x50
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f004 fa35 	bl	8005eb0 <memset>
  if(huart->Instance==USART1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a16      	ldr	r2, [pc, #88]	; (8001aa4 <HAL_UART_MspInit+0x84>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d124      	bne.n	8001a9a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 f923 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a68:	f7ff ff17 	bl	800189a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a70:	f7ff ff4a 	bl	8001908 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	2002      	movs	r0, #2
 8001a76:	f7ff ff15 	bl	80018a4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a7a:	23c0      	movs	r3, #192	; 0xc0
 8001a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001a92:	4619      	mov	r1, r3
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <HAL_UART_MspInit+0x88>)
 8001a96:	f000 fb1b 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3770      	adds	r7, #112	; 0x70
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	48000400 	.word	0x48000400

08001aac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b09c      	sub	sp, #112	; 0x70
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2250      	movs	r2, #80	; 0x50
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f004 f9ef 	bl	8005eb0 <memset>
  if(hpcd->Instance==USB)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_PCD_MspInit+0xa8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d136      	bne.n	8001b4a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001ae2:	2318      	movs	r3, #24
 8001ae4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001af0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001af2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001af6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001afc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001afe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 f8cd 	bl	8003ca8 <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001b14:	f7ff fec1 	bl	800189a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f7ff fec3 	bl	80018a4 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b22:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001b30:	230a      	movs	r3, #10
 8001b32:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3e:	f000 fac7 	bl	80020d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b42:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001b46:	f7ff fec6 	bl	80018d6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3770      	adds	r7, #112	; 0x70
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40006800 	.word	0x40006800

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b5c:	e7fe      	b.n	8001b5c <NMI_Handler+0x4>

08001b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 f934 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f000 fc15 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f000 fc0e 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001bcc:	2010      	movs	r0, #16
 8001bce:	f000 fc07 	bl	80023e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	; (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f004 f95a 	bl	8005ec0 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20030000 	.word	0x20030000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	20000490 	.word	0x20000490
 8001c40:	200005e0 	.word	0x200005e0

08001c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <SystemInit+0x98>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4e:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <SystemInit+0x98>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001c70:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <SystemInit+0x9c>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8e:	f023 0305 	bic.w	r3, r3, #5
 8001c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <SystemInit+0xa0>)
 8001cb0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <SystemInit+0xa0>)
 8001cb8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00
 8001ce0:	faf6fefb 	.word	0xfaf6fefb
 8001ce4:	22041000 	.word	0x22041000

08001ce8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ce8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cec:	3304      	adds	r3, #4

08001cee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001cf2:	d3f9      	bcc.n	8001ce8 <CopyDataInit>
  bx lr
 8001cf4:	4770      	bx	lr

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001cf6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001cf8:	3004      	adds	r0, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001cfa:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>
  bx lr
 8001cfe:	4770      	bx	lr

08001d00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d04:	f7ff ff9e 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <LoopForever+0x6>)
 8001d0a:	490c      	ldr	r1, [pc, #48]	; (8001d3c <LoopForever+0xa>)
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <LoopForever+0xe>)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f7ff ffed 	bl	8001cee <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d14:	480b      	ldr	r0, [pc, #44]	; (8001d44 <LoopForever+0x12>)
 8001d16:	490c      	ldr	r1, [pc, #48]	; (8001d48 <LoopForever+0x16>)
 8001d18:	4a0c      	ldr	r2, [pc, #48]	; (8001d4c <LoopForever+0x1a>)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f7ff ffe7 	bl	8001cee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <LoopForever+0x1e>)
 8001d22:	490c      	ldr	r1, [pc, #48]	; (8001d54 <LoopForever+0x22>)
 8001d24:	2300      	movs	r3, #0
 8001d26:	f7ff ffe8 	bl	8001cfa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d2a:	f004 f8cf 	bl	8005ecc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d2e:	f7ff f813 	bl	8000d58 <main>

08001d32 <LoopForever>:

LoopForever:
  b LoopForever
 8001d32:	e7fe      	b.n	8001d32 <LoopForever>
  ldr   r0, =_estack
 8001d34:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20000064 	.word	0x20000064
 8001d40:	08006944 	.word	0x08006944
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d44:	20030000 	.word	0x20030000
 8001d48:	20030000 	.word	0x20030000
 8001d4c:	080069a0 	.word	0x080069a0
  INIT_BSS _sbss, _ebss
 8001d50:	20000064 	.word	0x20000064
 8001d54:	200005e0 	.word	0x200005e0

08001d58 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_Init+0x3c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <HAL_Init+0x3c>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d72:	2003      	movs	r0, #3
 8001d74:	f000 f96c 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f000 f80f 	bl	8001d9c <HAL_InitTick>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	e001      	b.n	8001d8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d8a:	f7ff fdd6 	bl	800193a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	58004000 	.word	0x58004000

08001d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_InitTick+0x6c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d024      	beq.n	8001dfa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001db0:	f001 fcda 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_InitTick+0x6c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f974 	bl	80020b6 <HAL_SYSTICK_Config>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	d809      	bhi.n	8001dee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	f04f 30ff 	mov.w	r0, #4294967295
 8001de2:	f000 f940 	bl	8002066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_InitTick+0x70>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e007      	b.n	8001dfe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e004      	b.n	8001dfe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e001      	b.n	8001dfe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	2000000c 	.word	0x2000000c

08001e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000010 	.word	0x20000010
 8001e34:	20000494 	.word	0x20000494

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000494 	.word	0x20000494

08001e50 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_GetTickPrio+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	2000000c 	.word	0x2000000c

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff ffe2 	bl	8001e38 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffd2 	bl	8001e38 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000010 	.word	0x20000010

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <__NVIC_EnableIRQ+0x38>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	; (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f7ff ff8e 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	; (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff29 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff40 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff90 	bl	8001fa4 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5f 	bl	8001f50 <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff33 	bl	8001f14 <__NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa4 	bl	800200c <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	e14c      	b.n	800237a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 813e 	beq.w	8002374 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d005      	beq.n	8002110 <HAL_GPIO_Init+0x40>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d130      	bne.n	8002172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002146:	2201      	movs	r2, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	f003 0201 	and.w	r2, r3, #1
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b03      	cmp	r3, #3
 800217c:	d017      	beq.n	80021ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d123      	bne.n	8002202 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	08da      	lsrs	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3208      	adds	r2, #8
 80021fc:	6939      	ldr	r1, [r7, #16]
 80021fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	2203      	movs	r2, #3
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0203 	and.w	r2, r3, #3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8098 	beq.w	8002374 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002244:	4a54      	ldr	r2, [pc, #336]	; (8002398 <HAL_GPIO_Init+0x2c8>)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800226e:	d019      	beq.n	80022a4 <HAL_GPIO_Init+0x1d4>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a4a      	ldr	r2, [pc, #296]	; (800239c <HAL_GPIO_Init+0x2cc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d013      	beq.n	80022a0 <HAL_GPIO_Init+0x1d0>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a49      	ldr	r2, [pc, #292]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00d      	beq.n	800229c <HAL_GPIO_Init+0x1cc>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a48      	ldr	r2, [pc, #288]	; (80023a4 <HAL_GPIO_Init+0x2d4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d007      	beq.n	8002298 <HAL_GPIO_Init+0x1c8>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a47      	ldr	r2, [pc, #284]	; (80023a8 <HAL_GPIO_Init+0x2d8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d101      	bne.n	8002294 <HAL_GPIO_Init+0x1c4>
 8002290:	2304      	movs	r3, #4
 8002292:	e008      	b.n	80022a6 <HAL_GPIO_Init+0x1d6>
 8002294:	2307      	movs	r3, #7
 8002296:	e006      	b.n	80022a6 <HAL_GPIO_Init+0x1d6>
 8002298:	2303      	movs	r3, #3
 800229a:	e004      	b.n	80022a6 <HAL_GPIO_Init+0x1d6>
 800229c:	2302      	movs	r3, #2
 800229e:	e002      	b.n	80022a6 <HAL_GPIO_Init+0x1d6>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_GPIO_Init+0x1d6>
 80022a4:	2300      	movs	r3, #0
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	f002 0203 	and.w	r2, r2, #3
 80022ac:	0092      	lsls	r2, r2, #2
 80022ae:	4093      	lsls	r3, r2
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022b6:	4938      	ldr	r1, [pc, #224]	; (8002398 <HAL_GPIO_Init+0x2c8>)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022c4:	4b39      	ldr	r3, [pc, #228]	; (80023ac <HAL_GPIO_Init+0x2dc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022e8:	4a30      	ldr	r2, [pc, #192]	; (80023ac <HAL_GPIO_Init+0x2dc>)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022ee:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <HAL_GPIO_Init+0x2dc>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	4013      	ands	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002312:	4a26      	ldr	r2, [pc, #152]	; (80023ac <HAL_GPIO_Init+0x2dc>)
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002318:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_GPIO_Init+0x2dc>)
 800231a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800233e:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_GPIO_Init+0x2dc>)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_GPIO_Init+0x2dc>)
 8002348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800236c:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <HAL_GPIO_Init+0x2dc>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3301      	adds	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	f47f aeab 	bne.w	80020e0 <HAL_GPIO_Init+0x10>
  }
}
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40010000 	.word	0x40010000
 800239c:	48000400 	.word	0x48000400
 80023a0:	48000800 	.word	0x48000800
 80023a4:	48000c00 	.word	0x48000c00
 80023a8:	48001000 	.word	0x48001000
 80023ac:	58000800 	.word	0x58000800

080023b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fa1e 	bl	8001840 <HAL_GPIO_EXTI_Callback>
  }
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	58000800 	.word	0x58000800

08002410 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0c0      	b.n	80025a4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fb38 	bl	8001aac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2203      	movs	r2, #3
 8002440:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f003 fcd7 	bl	8005dfc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	e03e      	b.n	80024d2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	440b      	add	r3, r1
 8002462:	3311      	adds	r3, #17
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	440b      	add	r3, r1
 8002476:	3310      	adds	r3, #16
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	3313      	adds	r3, #19
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	440b      	add	r3, r1
 800249e:	3320      	adds	r3, #32
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	3324      	adds	r3, #36	; 0x24
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	3301      	adds	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3bb      	bcc.n	8002454 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	e044      	b.n	800256c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	f203 1351 	addw	r3, r3, #337	; 0x151
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	440b      	add	r3, r1
 8002506:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	440b      	add	r3, r1
 800251c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	440b      	add	r3, r1
 8002532:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	440b      	add	r3, r1
 800255e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	3301      	adds	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	791b      	ldrb	r3, [r3, #4]
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	429a      	cmp	r2, r3
 8002574:	d3b5      	bcc.n	80024e2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002582:	f003 fc56 	bl	8005e32 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7a9b      	ldrb	r3, [r3, #10]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d102      	bne.n	80025a2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f805 	bl	80025ac <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f043 0302 	orr.w	r3, r3, #2
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800260a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260e:	6013      	str	r3, [r2, #0]
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	58000400 	.word	0x58000400

08002620 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <HAL_PWREx_GetVoltageRange+0x18>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	58000400 	.word	0x58000400

0800263c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800264e:	d101      	bne.n	8002654 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_RCC_HSE_Enable>:
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <LL_RCC_HSE_Disable>:
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800268c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002690:	6013      	str	r3, [r2, #0]
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_RCC_HSE_IsReady>:
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026ae:	d101      	bne.n	80026b4 <LL_RCC_HSE_IsReady+0x18>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <LL_RCC_HSE_IsReady+0x1a>
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_RCC_HSI_Enable>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <LL_RCC_HSI_Disable>:
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80026e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_RCC_HSI_IsReady>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800270e:	d101      	bne.n	8002714 <LL_RCC_HSI_IsReady+0x18>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <LL_RCC_HSI_IsReady+0x1a>
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	061b      	lsls	r3, r3, #24
 8002736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_RCC_HSI48_Enable>:
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800274e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_RCC_HSI48_Disable>:
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002774:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002778:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_RCC_HSI48_IsReady>:
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d101      	bne.n	80027a6 <LL_RCC_HSI48_IsReady+0x18>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_RCC_HSI48_IsReady+0x1a>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_LSE_Enable>:
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_RCC_LSE_Disable>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <LL_RCC_LSE_EnableBypass>:
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_RCC_LSE_DisableBypass>:
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800281c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800283e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b02      	cmp	r3, #2
 800284c:	d101      	bne.n	8002852 <LL_RCC_LSE_IsReady+0x18>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <LL_RCC_LSE_IsReady+0x1a>
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800286a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002876:	bf00      	nop
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800288c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d101      	bne.n	80028ba <LL_RCC_LSI1_IsReady+0x18>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <LL_RCC_LSI1_IsReady+0x1a>
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f8:	f023 0304 	bic.w	r3, r3, #4
 80028fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b08      	cmp	r3, #8
 800291c:	d101      	bne.n	8002922 <LL_RCC_LSI2_IsReady+0x18>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <LL_RCC_LSI2_IsReady+0x1a>
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	6013      	str	r3, [r2, #0]
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d101      	bne.n	80029ae <LL_RCC_MSI_IsReady+0x16>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_RCC_MSI_IsReady+0x18>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2bb0      	cmp	r3, #176	; 0xb0
 80029f8:	d901      	bls.n	80029fe <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80029fa:	23b0      	movs	r3, #176	; 0xb0
 80029fc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80029fe:	687b      	ldr	r3, [r7, #4]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 0203 	bic.w	r2, r3, #3
 8002a48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002aae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ada:	f023 020f 	bic.w	r2, r3, #15
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bdc:	6013      	str	r3, [r2, #0]
}
 8002bde:	bf00      	nop
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bfa:	d101      	bne.n	8002c00 <LL_RCC_PLL_IsReady+0x18>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <LL_RCC_PLL_IsReady+0x1a>
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0303 	and.w	r3, r3, #3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c80:	d101      	bne.n	8002c86 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ca6:	d101      	bne.n	8002cac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d101      	bne.n	8002cd2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cf0:	d101      	bne.n	8002cf6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d14:	d101      	bne.n	8002d1a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b08d      	sub	sp, #52	; 0x34
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e363      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 808d 	beq.w	8002e62 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d48:	f7ff fe89 	bl	8002a5e <LL_RCC_GetSysClkSource>
 8002d4c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d4e:	f7ff ff82 	bl	8002c56 <LL_RCC_PLL_GetMainSource>
 8002d52:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_RCC_OscConfig+0x3e>
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d147      	bne.n	8002df0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d144      	bne.n	8002df0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e347      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002d76:	f7ff fe34 	bl	80029e2 <LL_RCC_MSI_GetRange>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	429c      	cmp	r4, r3
 8002d7e:	d914      	bls.n	8002daa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fd2f 	bl	80037e8 <RCC_SetFlashLatencyFromMSIRange>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e336      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fe0e 	bl	80029ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fe32 	bl	8002a0c <LL_RCC_MSI_SetCalibTrimming>
 8002da8:	e013      	b.n	8002dd2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fe03 	bl	80029ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fe27 	bl	8002a0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fd10 	bl	80037e8 <RCC_SetFlashLatencyFromMSIRange>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e317      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002dd2:	f000 fcc9 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4aa4      	ldr	r2, [pc, #656]	; (800306c <HAL_RCC_OscConfig+0x344>)
 8002dda:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ddc:	4ba4      	ldr	r3, [pc, #656]	; (8003070 <HAL_RCC_OscConfig+0x348>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe ffdb 	bl	8001d9c <HAL_InitTick>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d039      	beq.n	8002e60 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e308      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01e      	beq.n	8002e36 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002df8:	f7ff fdb0 	bl	800295c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dfc:	f7ff f81c 	bl	8001e38 <HAL_GetTick>
 8002e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e04:	f7ff f818 	bl	8001e38 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e2f5      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e16:	f7ff fdbf 	bl	8002998 <LL_RCC_MSI_IsReady>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f1      	beq.n	8002e04 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fdc8 	bl	80029ba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fdec 	bl	8002a0c <LL_RCC_MSI_SetCalibTrimming>
 8002e34:	e015      	b.n	8002e62 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e36:	f7ff fda0 	bl	800297a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fffd 	bl	8001e38 <HAL_GetTick>
 8002e3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e42:	f7fe fff9 	bl	8001e38 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e2d6      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e54:	f7ff fda0 	bl	8002998 <LL_RCC_MSI_IsReady>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f1      	bne.n	8002e42 <HAL_RCC_OscConfig+0x11a>
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e60:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d047      	beq.n	8002efe <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e6e:	f7ff fdf6 	bl	8002a5e <LL_RCC_GetSysClkSource>
 8002e72:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e74:	f7ff feef 	bl	8002c56 <LL_RCC_PLL_GetMainSource>
 8002e78:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_OscConfig+0x164>
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d108      	bne.n	8002e98 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d134      	bne.n	8002efe <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e2b4      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x180>
 8002ea2:	f7ff fbdd 	bl	8002660 <LL_RCC_HSE_Enable>
 8002ea6:	e001      	b.n	8002eac <HAL_RCC_OscConfig+0x184>
 8002ea8:	f7ff fbe9 	bl	800267e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d012      	beq.n	8002eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe ffc0 	bl	8001e38 <HAL_GetTick>
 8002eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7fe ffbc 	bl	8001e38 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e299      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ece:	f7ff fbe5 	bl	800269c <LL_RCC_HSE_IsReady>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f1      	beq.n	8002ebc <HAL_RCC_OscConfig+0x194>
 8002ed8:	e011      	b.n	8002efe <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fe ffad 	bl	8001e38 <HAL_GetTick>
 8002ede:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee2:	f7fe ffa9 	bl	8001e38 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b64      	cmp	r3, #100	; 0x64
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e286      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ef4:	f7ff fbd2 	bl	800269c <LL_RCC_HSE_IsReady>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f1      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d04c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f0a:	f7ff fda8 	bl	8002a5e <LL_RCC_GetSysClkSource>
 8002f0e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f10:	f7ff fea1 	bl	8002c56 <LL_RCC_PLL_GetMainSource>
 8002f14:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_OscConfig+0x200>
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d10e      	bne.n	8002f40 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e266      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fbf1 	bl	8002720 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f3e:	e031      	b.n	8002fa4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d019      	beq.n	8002f7c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f48:	f7ff fbba 	bl	80026c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe ff74 	bl	8001e38 <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f54:	f7fe ff70 	bl	8001e38 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e24d      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f66:	f7ff fbc9 	bl	80026fc <LL_RCC_HSI_IsReady>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f1      	beq.n	8002f54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fbd3 	bl	8002720 <LL_RCC_HSI_SetCalibTrimming>
 8002f7a:	e013      	b.n	8002fa4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7c:	f7ff fbaf 	bl	80026de <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe ff5a 	bl	8001e38 <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f88:	f7fe ff56 	bl	8001e38 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e233      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f9a:	f7ff fbaf 	bl	80026fc <LL_RCC_HSI_IsReady>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f1      	bne.n	8002f88 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d106      	bne.n	8002fbe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80a3 	beq.w	8003104 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d076      	beq.n	80030b4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d046      	beq.n	8003060 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002fd2:	f7ff fc66 	bl	80028a2 <LL_RCC_LSI1_IsReady>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d113      	bne.n	8003004 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002fdc:	f7ff fc3f 	bl	800285e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fe0:	f7fe ff2a 	bl	8001e38 <HAL_GetTick>
 8002fe4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002fe8:	f7fe ff26 	bl	8001e38 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e203      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002ffa:	f7ff fc52 	bl	80028a2 <LL_RCC_LSI1_IsReady>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f1      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003004:	f7ff fc5f 	bl	80028c6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe ff16 	bl	8001e38 <HAL_GetTick>
 800300c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003010:	f7fe ff12 	bl	8001e38 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b03      	cmp	r3, #3
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1ef      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003022:	f7ff fc72 	bl	800290a <LL_RCC_LSI2_IsReady>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f1      	beq.n	8003010 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fc7c 	bl	800292e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003036:	f7ff fc23 	bl	8002880 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe fefd 	bl	8001e38 <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003042:	f7fe fef9 	bl	8001e38 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e1d6      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003054:	f7ff fc25 	bl	80028a2 <LL_RCC_LSI1_IsReady>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f1      	bne.n	8003042 <HAL_RCC_OscConfig+0x31a>
 800305e:	e051      	b.n	8003104 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003060:	f7ff fbfd 	bl	800285e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fee8 	bl	8001e38 <HAL_GetTick>
 8003068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800306a:	e00c      	b.n	8003086 <HAL_RCC_OscConfig+0x35e>
 800306c:	20000008 	.word	0x20000008
 8003070:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003074:	f7fe fee0 	bl	8001e38 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1bd      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003086:	f7ff fc0c 	bl	80028a2 <LL_RCC_LSI1_IsReady>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f1      	beq.n	8003074 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003090:	f7ff fc2a 	bl	80028e8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003096:	f7fe fecf 	bl	8001e38 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1ac      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030a8:	f7ff fc2f 	bl	800290a <LL_RCC_LSI2_IsReady>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f1      	bne.n	8003096 <HAL_RCC_OscConfig+0x36e>
 80030b2:	e027      	b.n	8003104 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80030b4:	f7ff fc18 	bl	80028e8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7fe febe 	bl	8001e38 <HAL_GetTick>
 80030bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030c0:	f7fe feba 	bl	8001e38 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e197      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80030d2:	f7ff fc1a 	bl	800290a <LL_RCC_LSI2_IsReady>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f1      	bne.n	80030c0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80030dc:	f7ff fbd0 	bl	8002880 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fe feaa 	bl	8001e38 <HAL_GetTick>
 80030e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80030e8:	f7fe fea6 	bl	8001e38 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e183      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80030fa:	f7ff fbd2 	bl	80028a2 <LL_RCC_LSI1_IsReady>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f1      	bne.n	80030e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d05b      	beq.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003110:	4ba7      	ldr	r3, [pc, #668]	; (80033b0 <HAL_RCC_OscConfig+0x688>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d114      	bne.n	8003146 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800311c:	f7ff fa70 	bl	8002600 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003120:	f7fe fe8a 	bl	8001e38 <HAL_GetTick>
 8003124:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003128:	f7fe fe86 	bl	8001e38 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e163      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800313a:	4b9d      	ldr	r3, [pc, #628]	; (80033b0 <HAL_RCC_OscConfig+0x688>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d102      	bne.n	8003154 <HAL_RCC_OscConfig+0x42c>
 800314e:	f7ff fb30 	bl	80027b2 <LL_RCC_LSE_Enable>
 8003152:	e00c      	b.n	800316e <HAL_RCC_OscConfig+0x446>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b05      	cmp	r3, #5
 800315a:	d104      	bne.n	8003166 <HAL_RCC_OscConfig+0x43e>
 800315c:	f7ff fb4b 	bl	80027f6 <LL_RCC_LSE_EnableBypass>
 8003160:	f7ff fb27 	bl	80027b2 <LL_RCC_LSE_Enable>
 8003164:	e003      	b.n	800316e <HAL_RCC_OscConfig+0x446>
 8003166:	f7ff fb35 	bl	80027d4 <LL_RCC_LSE_Disable>
 800316a:	f7ff fb55 	bl	8002818 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d014      	beq.n	80031a0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fe fe5f 	bl	8001e38 <HAL_GetTick>
 800317a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe fe5b 	bl	8001e38 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e136      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003194:	f7ff fb51 	bl	800283a <LL_RCC_LSE_IsReady>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0ef      	beq.n	800317e <HAL_RCC_OscConfig+0x456>
 800319e:	e013      	b.n	80031c8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fe fe4a 	bl	8001e38 <HAL_GetTick>
 80031a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80031a6:	e00a      	b.n	80031be <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7fe fe46 	bl	8001e38 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e121      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80031be:	f7ff fb3c 	bl	800283a <LL_RCC_LSE_IsReady>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ef      	bne.n	80031a8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d02c      	beq.n	800322e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d014      	beq.n	8003206 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031dc:	f7ff fab5 	bl	800274a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fe fe2a 	bl	8001e38 <HAL_GetTick>
 80031e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e8:	f7fe fe26 	bl	8001e38 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e103      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80031fa:	f7ff fac8 	bl	800278e <LL_RCC_HSI48_IsReady>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f1      	beq.n	80031e8 <HAL_RCC_OscConfig+0x4c0>
 8003204:	e013      	b.n	800322e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003206:	f7ff fab1 	bl	800276c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320a:	f7fe fe15 	bl	8001e38 <HAL_GetTick>
 800320e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003212:	f7fe fe11 	bl	8001e38 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0ee      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003224:	f7ff fab3 	bl	800278e <LL_RCC_HSI48_IsReady>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f1      	bne.n	8003212 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 80e4 	beq.w	8003400 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003238:	f7ff fc11 	bl	8002a5e <LL_RCC_GetSysClkSource>
 800323c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	2b02      	cmp	r3, #2
 800324c:	f040 80b4 	bne.w	80033b8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0203 	and.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	429a      	cmp	r2, r3
 800325c:	d123      	bne.n	80032a6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d11c      	bne.n	80032a6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d114      	bne.n	80032a6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d10d      	bne.n	80032a6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d05d      	beq.n	8003362 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b0c      	cmp	r3, #12
 80032aa:	d058      	beq.n	800335e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0a1      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032be:	f7ff fc84 	bl	8002bca <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c2:	f7fe fdb9 	bl	8001e38 <HAL_GetTick>
 80032c6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fe fdb5 	bl	8001e38 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e092      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1ef      	bne.n	80032ca <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	4b30      	ldr	r3, [pc, #192]	; (80033b4 <HAL_RCC_OscConfig+0x68c>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003302:	0212      	lsls	r2, r2, #8
 8003304:	4311      	orrs	r1, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800330a:	4311      	orrs	r1, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003310:	4311      	orrs	r1, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003316:	430a      	orrs	r2, r1
 8003318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800331c:	4313      	orrs	r3, r2
 800331e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003320:	f7ff fc44 	bl	8002bac <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003332:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003334:	f7fe fd80 	bl	8001e38 <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333c:	f7fe fd7c 	bl	8001e38 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e059      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ef      	beq.n	800333c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800335c:	e050      	b.n	8003400 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e04f      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d147      	bne.n	8003400 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003370:	f7ff fc1c 	bl	8002bac <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003382:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003384:	f7fe fd58 	bl	8001e38 <HAL_GetTick>
 8003388:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338c:	f7fe fd54 	bl	8001e38 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e031      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ef      	beq.n	800338c <HAL_RCC_OscConfig+0x664>
 80033ac:	e028      	b.n	8003400 <HAL_RCC_OscConfig+0x6d8>
 80033ae:	bf00      	nop
 80033b0:	58000400 	.word	0x58000400
 80033b4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b0c      	cmp	r3, #12
 80033bc:	d01e      	beq.n	80033fc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	f7ff fc04 	bl	8002bca <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7fe fd39 	bl	8001e38 <HAL_GetTick>
 80033c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ca:	f7fe fd35 	bl	8001e38 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e012      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1ef      	bne.n	80033ca <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_OscConfig+0x6e4>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	60cb      	str	r3, [r1, #12]
 80033fa:	e001      	b.n	8003400 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3734      	adds	r7, #52	; 0x34
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	eefefffc 	.word	0xeefefffc

08003410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e12d      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003424:	4b98      	ldr	r3, [pc, #608]	; (8003688 <HAL_RCC_ClockConfig+0x278>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d91b      	bls.n	800346a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b95      	ldr	r3, [pc, #596]	; (8003688 <HAL_RCC_ClockConfig+0x278>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 0207 	bic.w	r2, r3, #7
 800343a:	4993      	ldr	r1, [pc, #588]	; (8003688 <HAL_RCC_ClockConfig+0x278>)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003442:	f7fe fcf9 	bl	8001e38 <HAL_GetTick>
 8003446:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003448:	e008      	b.n	800345c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800344a:	f7fe fcf5 	bl	8001e38 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e111      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345c:	4b8a      	ldr	r3, [pc, #552]	; (8003688 <HAL_RCC_ClockConfig+0x278>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d1ef      	bne.n	800344a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d016      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fafb 	bl	8002a76 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003480:	f7fe fcda 	bl	8001e38 <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003488:	f7fe fcd6 	bl	8001e38 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e0f2      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800349a:	f7ff fbe8 	bl	8002c6e <LL_RCC_IsActiveFlag_HPRE>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f1      	beq.n	8003488 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d016      	beq.n	80034de <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff faf2 	bl	8002a9e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034ba:	f7fe fcbd 	bl	8001e38 <HAL_GetTick>
 80034be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034c2:	f7fe fcb9 	bl	8001e38 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e0d5      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034d4:	f7ff fbdd 	bl	8002c92 <LL_RCC_IsActiveFlag_C2HPRE>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f1      	beq.n	80034c2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff faeb 	bl	8002aca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034f4:	f7fe fca0 	bl	8001e38 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034fc:	f7fe fc9c 	bl	8001e38 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0b8      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800350e:	f7ff fbd3 	bl	8002cb8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f1      	beq.n	80034fc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d016      	beq.n	8003552 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fae5 	bl	8002af8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800352e:	f7fe fc83 	bl	8001e38 <HAL_GetTick>
 8003532:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003534:	e008      	b.n	8003548 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003536:	f7fe fc7f 	bl	8001e38 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e09b      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003548:	f7ff fbc9 	bl	8002cde <LL_RCC_IsActiveFlag_PPRE1>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f1      	beq.n	8003536 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d017      	beq.n	800358e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fadb 	bl	8002b20 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800356a:	f7fe fc65 	bl	8001e38 <HAL_GetTick>
 800356e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003572:	f7fe fc61 	bl	8001e38 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e07d      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003584:	f7ff fbbd 	bl	8002d02 <LL_RCC_IsActiveFlag_PPRE2>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f1      	beq.n	8003572 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d043      	beq.n	8003622 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d106      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035a2:	f7ff f87b 	bl	800269c <LL_RCC_HSE_IsReady>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d11e      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e067      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d106      	bne.n	80035c6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035b8:	f7ff fb16 	bl	8002be8 <LL_RCC_PLL_IsReady>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d113      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e05c      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035ce:	f7ff f9e3 	bl	8002998 <LL_RCC_MSI_IsReady>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d108      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e051      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80035dc:	f7ff f88e 	bl	80026fc <LL_RCC_HSI_IsReady>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e04a      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fa21 	bl	8002a36 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f4:	f7fe fc20 	bl	8001e38 <HAL_GetTick>
 80035f8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035fc:	f7fe fc1c 	bl	8001e38 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e036      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	f7ff fa24 	bl	8002a5e <LL_RCC_GetSysClkSource>
 8003616:	4602      	mov	r2, r0
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	429a      	cmp	r2, r3
 8003620:	d1ec      	bne.n	80035fc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003622:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_RCC_ClockConfig+0x278>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d21b      	bcs.n	8003668 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003630:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_RCC_ClockConfig+0x278>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 0207 	bic.w	r2, r3, #7
 8003638:	4913      	ldr	r1, [pc, #76]	; (8003688 <HAL_RCC_ClockConfig+0x278>)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003640:	f7fe fbfa 	bl	8001e38 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	e008      	b.n	800365a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003648:	f7fe fbf6 	bl	8001e38 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e012      	b.n	8003680 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_ClockConfig+0x278>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d1ef      	bne.n	8003648 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003668:	f000 f87e 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 800366c:	4603      	mov	r3, r0
 800366e:	4a07      	ldr	r2, [pc, #28]	; (800368c <HAL_RCC_ClockConfig+0x27c>)
 8003670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003672:	f7fe fbed 	bl	8001e50 <HAL_GetTickPrio>
 8003676:	4603      	mov	r3, r0
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe fb8f 	bl	8001d9c <HAL_InitTick>
 800367e:	4603      	mov	r3, r0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	58004000 	.word	0x58004000
 800368c:	20000008 	.word	0x20000008

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003696:	f7ff f9e2 	bl	8002a5e <LL_RCC_GetSysClkSource>
 800369a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80036a2:	f7ff f99e 	bl	80029e2 <LL_RCC_MSI_GetRange>
 80036a6:	4603      	mov	r3, r0
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	4a2b      	ldr	r2, [pc, #172]	; (800375c <HAL_RCC_GetSysClockFreq+0xcc>)
 80036b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e04b      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d102      	bne.n	80036c4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	e045      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d10a      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036ca:	f7fe ffb7 	bl	800263c <LL_RCC_HSE_IsEnabledDiv2>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d102      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80036d4:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e03a      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_GetSysClockFreq+0xd4>)
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e037      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80036e0:	f7ff fab9 	bl	8002c56 <LL_RCC_PLL_GetMainSource>
 80036e4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d003      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x64>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d003      	beq.n	80036fa <HAL_RCC_GetSysClockFreq+0x6a>
 80036f2:	e00d      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80036f4:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036f6:	60bb      	str	r3, [r7, #8]
        break;
 80036f8:	e015      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036fa:	f7fe ff9f 	bl	800263c <LL_RCC_HSE_IsEnabledDiv2>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b01      	cmp	r3, #1
 8003702:	d102      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003704:	4b16      	ldr	r3, [pc, #88]	; (8003760 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003706:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003708:	e00d      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800370a:	4b16      	ldr	r3, [pc, #88]	; (8003764 <HAL_RCC_GetSysClockFreq+0xd4>)
 800370c:	60bb      	str	r3, [r7, #8]
        break;
 800370e:	e00a      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003710:	f7ff f967 	bl	80029e2 <LL_RCC_MSI_GetRange>
 8003714:	4603      	mov	r3, r0
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	4a0f      	ldr	r2, [pc, #60]	; (800375c <HAL_RCC_GetSysClockFreq+0xcc>)
 800371e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003722:	60bb      	str	r3, [r7, #8]
        break;
 8003724:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003726:	f7ff fa71 	bl	8002c0c <LL_RCC_PLL_GetN>
 800372a:	4602      	mov	r2, r0
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	fb03 f402 	mul.w	r4, r3, r2
 8003732:	f7ff fa84 	bl	8002c3e <LL_RCC_PLL_GetDivider>
 8003736:	4603      	mov	r3, r0
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	3301      	adds	r3, #1
 800373c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003740:	f7ff fa71 	bl	8002c26 <LL_RCC_PLL_GetR>
 8003744:	4603      	mov	r3, r0
 8003746:	0f5b      	lsrs	r3, r3, #29
 8003748:	3301      	adds	r3, #1
 800374a:	fbb4 f3f3 	udiv	r3, r4, r3
 800374e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003750:	68fb      	ldr	r3, [r7, #12]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bd90      	pop	{r4, r7, pc}
 800375a:	bf00      	nop
 800375c:	08006898 	.word	0x08006898
 8003760:	00f42400 	.word	0x00f42400
 8003764:	01e84800 	.word	0x01e84800

08003768 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003768:	b598      	push	{r3, r4, r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800376c:	f7ff ff90 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8003770:	4604      	mov	r4, r0
 8003772:	f7ff f9e9 	bl	8002b48 <LL_RCC_GetAHBPrescaler>
 8003776:	4603      	mov	r3, r0
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	4a03      	ldr	r2, [pc, #12]	; (800378c <HAL_RCC_GetHCLKFreq+0x24>)
 8003780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003784:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd98      	pop	{r3, r4, r7, pc}
 800378c:	08006838 	.word	0x08006838

08003790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003790:	b598      	push	{r3, r4, r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003794:	f7ff ffe8 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8003798:	4604      	mov	r4, r0
 800379a:	f7ff f9ef 	bl	8002b7c <LL_RCC_GetAPB1Prescaler>
 800379e:	4603      	mov	r3, r0
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	4a04      	ldr	r2, [pc, #16]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd98      	pop	{r3, r4, r7, pc}
 80037b8:	08006878 	.word	0x08006878

080037bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037bc:	b598      	push	{r3, r4, r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80037c0:	f7ff ffd2 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 80037c4:	4604      	mov	r4, r0
 80037c6:	f7ff f9e5 	bl	8002b94 <LL_RCC_GetAPB2Prescaler>
 80037ca:	4603      	mov	r3, r0
 80037cc:	0adb      	lsrs	r3, r3, #11
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd98      	pop	{r3, r4, r7, pc}
 80037e4:	08006878 	.word	0x08006878

080037e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2bb0      	cmp	r3, #176	; 0xb0
 80037f4:	d903      	bls.n	80037fe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	e007      	b.n	800380e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	4a11      	ldr	r2, [pc, #68]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800380e:	f7ff f9a7 	bl	8002b60 <LL_RCC_GetAHB4Prescaler>
 8003812:	4603      	mov	r3, r0
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800381c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	0c9c      	lsrs	r4, r3, #18
 8003832:	f7fe fef5 	bl	8002620 <HAL_PWREx_GetVoltageRange>
 8003836:	4603      	mov	r3, r0
 8003838:	4619      	mov	r1, r3
 800383a:	4620      	mov	r0, r4
 800383c:	f000 f80c 	bl	8003858 <RCC_SetFlashLatency>
 8003840:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	bd90      	pop	{r4, r7, pc}
 800384a:	bf00      	nop
 800384c:	08006898 	.word	0x08006898
 8003850:	08006838 	.word	0x08006838
 8003854:	431bde83 	.word	0x431bde83

08003858 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b093      	sub	sp, #76	; 0x4c
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003862:	4b37      	ldr	r3, [pc, #220]	; (8003940 <RCC_SetFlashLatency+0xe8>)
 8003864:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003868:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800386a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800386e:	4a35      	ldr	r2, [pc, #212]	; (8003944 <RCC_SetFlashLatency+0xec>)
 8003870:	f107 031c 	add.w	r3, r7, #28
 8003874:	ca07      	ldmia	r2, {r0, r1, r2}
 8003876:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <RCC_SetFlashLatency+0xf0>)
 800387c:	f107 040c 	add.w	r4, r7, #12
 8003880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003882:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003886:	2300      	movs	r3, #0
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003890:	d11a      	bne.n	80038c8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003892:	2300      	movs	r3, #0
 8003894:	643b      	str	r3, [r7, #64]	; 0x40
 8003896:	e013      	b.n	80038c0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	3348      	adds	r3, #72	; 0x48
 800389e:	443b      	add	r3, r7
 80038a0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d807      	bhi.n	80038ba <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	3348      	adds	r3, #72	; 0x48
 80038b0:	443b      	add	r3, r7
 80038b2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80038b6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80038b8:	e020      	b.n	80038fc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038bc:	3301      	adds	r3, #1
 80038be:	643b      	str	r3, [r7, #64]	; 0x40
 80038c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d9e8      	bls.n	8003898 <RCC_SetFlashLatency+0x40>
 80038c6:	e019      	b.n	80038fc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038cc:	e013      	b.n	80038f6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	3348      	adds	r3, #72	; 0x48
 80038d4:	443b      	add	r3, r7
 80038d6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d807      	bhi.n	80038f0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	3348      	adds	r3, #72	; 0x48
 80038e6:	443b      	add	r3, r7
 80038e8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80038ec:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80038ee:	e005      	b.n	80038fc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f2:	3301      	adds	r3, #1
 80038f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d9e8      	bls.n	80038ce <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <RCC_SetFlashLatency+0xf4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 0207 	bic.w	r2, r3, #7
 8003904:	4911      	ldr	r1, [pc, #68]	; (800394c <RCC_SetFlashLatency+0xf4>)
 8003906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003908:	4313      	orrs	r3, r2
 800390a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800390c:	f7fe fa94 	bl	8001e38 <HAL_GetTick>
 8003910:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003912:	e008      	b.n	8003926 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003914:	f7fe fa90 	bl	8001e38 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e007      	b.n	8003936 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <RCC_SetFlashLatency+0xf4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003930:	429a      	cmp	r2, r3
 8003932:	d1ef      	bne.n	8003914 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	374c      	adds	r7, #76	; 0x4c
 800393a:	46bd      	mov	sp, r7
 800393c:	bd90      	pop	{r4, r7, pc}
 800393e:	bf00      	nop
 8003940:	0800680c 	.word	0x0800680c
 8003944:	0800681c 	.word	0x0800681c
 8003948:	08006828 	.word	0x08006828
 800394c:	58004000 	.word	0x58004000

08003950 <LL_RCC_LSE_IsEnabled>:
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <LL_RCC_LSE_IsEnabled+0x18>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <LL_RCC_LSE_IsEnabled+0x1a>
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_RCC_LSE_IsReady>:
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b02      	cmp	r3, #2
 8003986:	d101      	bne.n	800398c <LL_RCC_LSE_IsReady+0x18>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <LL_RCC_LSE_IsReady+0x1a>
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_RCC_MSI_EnablePLLMode>:
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	6013      	str	r3, [r2, #0]
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_SetRFWKPClockSource>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_RCC_SetSMPSClockSource>:
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f023 0203 	bic.w	r2, r3, #3
 80039f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <LL_RCC_SetSMPSPrescaler>:
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_RCC_SetUSARTClockSource>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f023 0203 	bic.w	r2, r3, #3
 8003a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_RCC_SetLPUARTClockSource>:
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_RCC_SetI2CClockSource>:
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_RCC_SetLPTIMClockSource>:
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	43db      	mvns	r3, r3
 8003adc:	401a      	ands	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_RCC_SetSAIClockSource>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_RCC_SetRNGClockSource>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_RCC_SetCLK48ClockSource>:
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_RCC_SetUSBClockSource>:
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ffe3 	bl	8003b50 <LL_RCC_SetCLK48ClockSource>
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <LL_RCC_SetADCClockSource>:
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_RCC_SetRTCClockSource>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_RCC_GetRTCClockSource>:
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_RCC_ForceBackupDomainReset>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_RCC_PLLSAI1_Enable>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c5a:	6013      	str	r3, [r2, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <LL_RCC_PLLSAI1_Disable>:
{
 8003c66:	b480      	push	{r7}
 8003c68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c78:	6013      	str	r3, [r2, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <LL_RCC_PLLSAI1_IsReady>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c96:	d101      	bne.n	8003c9c <LL_RCC_PLLSAI1_IsReady+0x18>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d034      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ccc:	d021      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003cce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cd2:	d81b      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cd8:	d01d      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003cda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cde:	d815      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ce8:	d110      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cfa:	e00d      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 f94d 	bl	8003fa0 <RCCEx_PLLSAI1_ConfigNP>
 8003d06:	4603      	mov	r3, r0
 8003d08:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d0a:	e005      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	77fb      	strb	r3, [r7, #31]
        break;
 8003d10:	e002      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d18:	7ffb      	ldrb	r3, [r7, #31]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fee8 	bl	8003af8 <LL_RCC_SetSAIClockSource>
 8003d28:	e001      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2a:	7ffb      	ldrb	r3, [r7, #31]
 8003d2c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d046      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003d3a:	f7ff ff56 	bl	8003bea <LL_RCC_GetRTCClockSource>
 8003d3e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d03c      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003d4a:	f7fe fc59 	bl	8002600 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ff30 	bl	8003bbe <LL_RCC_SetRTCClockSource>
 8003d5e:	e02e      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d68:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003d6a:	f7ff ff4b 	bl	8003c04 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003d6e:	f7ff ff5a 	bl	8003c26 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003d8a:	f7ff fde1 	bl	8003950 <LL_RCC_LSE_IsEnabled>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d114      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d94:	f7fe f850 	bl	8001e38 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9c:	f7fe f84c 	bl	8001e38 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d902      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	77fb      	strb	r3, [r7, #31]
              break;
 8003db2:	e004      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003db4:	f7ff fdde 	bl	8003974 <LL_RCC_LSE_IsReady>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d1ee      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	77bb      	strb	r3, [r7, #30]
 8003dc2:	e001      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc4:	7ffb      	ldrb	r3, [r7, #31]
 8003dc6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fe2a 	bl	8003a32 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fe35 	bl	8003a5e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fe5d 	bl	8003ac4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fe52 	bl	8003ac4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fe2a 	bl	8003a8a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fe1f 	bl	8003a8a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d022      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff fe8d 	bl	8003b7c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e6a:	d107      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e84:	d10b      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f8e3 	bl	8004056 <RCCEx_PLLSAI1_ConfigNQ>
 8003e90:	4603      	mov	r3, r0
 8003e92:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003e94:	7ffb      	ldrb	r3, [r7, #31]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003e9a:	7ffb      	ldrb	r3, [r7, #31]
 8003e9c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d02b      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ebc:	d003      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d105      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff fe2a 	bl	8003b24 <LL_RCC_SetRNGClockSource>
 8003ed0:	e00a      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	2000      	movs	r0, #0
 8003ede:	f7ff fe21 	bl	8003b24 <LL_RCC_SetRNGClockSource>
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f7ff fe34 	bl	8003b50 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003ef0:	d107      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f00:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d022      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fe3d 	bl	8003b92 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f20:	d107      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f30:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f3a:	d10b      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 f8e3 	bl	800410c <RCCEx_PLLSAI1_ConfigNR>
 8003f46:	4603      	mov	r3, r0
 8003f48:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f4a:	7ffb      	ldrb	r3, [r7, #31]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
 8003f52:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fd26 	bl	80039b6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fd45 	bl	8003a0a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fd2c 	bl	80039e2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003f8a:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003f98:	f7ff fcfe 	bl	8003998 <LL_RCC_MSI_EnablePLLMode>
}
 8003f9c:	bf00      	nop
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003fac:	f7ff fe5b 	bl	8003c66 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fb0:	f7fd ff42 	bl	8001e38 <HAL_GetTick>
 8003fb4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fb6:	e009      	b.n	8003fcc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fb8:	f7fd ff3e 	bl	8001e38 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d902      	bls.n	8003fcc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8003fca:	e004      	b.n	8003fd6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fcc:	f7ff fe5a 	bl	8003c84 <LL_RCC_PLLSAI1_IsReady>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d137      	bne.n	800404c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004006:	4313      	orrs	r3, r2
 8004008:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800400a:	f7ff fe1d 	bl	8003c48 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400e:	f7fd ff13 	bl	8001e38 <HAL_GetTick>
 8004012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004014:	e009      	b.n	800402a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004016:	f7fd ff0f 	bl	8001e38 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d902      	bls.n	800402a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	73fb      	strb	r3, [r7, #15]
        break;
 8004028:	e004      	b.n	8004034 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800402a:	f7ff fe2b 	bl	8003c84 <LL_RCC_PLLSAI1_IsReady>
 800402e:	4603      	mov	r3, r0
 8004030:	2b01      	cmp	r3, #1
 8004032:	d1f0      	bne.n	8004016 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d108      	bne.n	800404c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800403a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004048:	4313      	orrs	r3, r2
 800404a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004062:	f7ff fe00 	bl	8003c66 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004066:	f7fd fee7 	bl	8001e38 <HAL_GetTick>
 800406a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800406c:	e009      	b.n	8004082 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800406e:	f7fd fee3 	bl	8001e38 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d902      	bls.n	8004082 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	73fb      	strb	r3, [r7, #15]
      break;
 8004080:	e004      	b.n	800408c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004082:	f7ff fdff 	bl	8003c84 <LL_RCC_PLLSAI1_IsReady>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d137      	bne.n	8004102 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a6:	4313      	orrs	r3, r2
 80040a8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040bc:	4313      	orrs	r3, r2
 80040be:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80040c0:	f7ff fdc2 	bl	8003c48 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c4:	f7fd feb8 	bl	8001e38 <HAL_GetTick>
 80040c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040ca:	e009      	b.n	80040e0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040cc:	f7fd feb4 	bl	8001e38 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d902      	bls.n	80040e0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	73fb      	strb	r3, [r7, #15]
        break;
 80040de:	e004      	b.n	80040ea <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040e0:	f7ff fdd0 	bl	8003c84 <LL_RCC_PLLSAI1_IsReady>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d1f0      	bne.n	80040cc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d108      	bne.n	8004102 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040fe:	4313      	orrs	r3, r2
 8004100:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004118:	f7ff fda5 	bl	8003c66 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800411c:	f7fd fe8c 	bl	8001e38 <HAL_GetTick>
 8004120:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004122:	e009      	b.n	8004138 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004124:	f7fd fe88 	bl	8001e38 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d902      	bls.n	8004138 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	73fb      	strb	r3, [r7, #15]
      break;
 8004136:	e004      	b.n	8004142 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004138:	f7ff fda4 	bl	8003c84 <LL_RCC_PLLSAI1_IsReady>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d137      	bne.n	80041b8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800415c:	4313      	orrs	r3, r2
 800415e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004172:	4313      	orrs	r3, r2
 8004174:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004176:	f7ff fd67 	bl	8003c48 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417a:	f7fd fe5d 	bl	8001e38 <HAL_GetTick>
 800417e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004180:	e009      	b.n	8004196 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004182:	f7fd fe59 	bl	8001e38 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d902      	bls.n	8004196 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	73fb      	strb	r3, [r7, #15]
        break;
 8004194:	e004      	b.n	80041a0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004196:	f7ff fd75 	bl	8003c84 <LL_RCC_PLLSAI1_IsReady>
 800419a:	4603      	mov	r3, r0
 800419c:	2b01      	cmp	r3, #1
 800419e:	d1f0      	bne.n	8004182 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d108      	bne.n	80041b8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041b4:	4313      	orrs	r3, r2
 80041b6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e049      	b.n	8004268 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d106      	bne.n	80041ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fd fbd9 	bl	80019a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f000 fbb9 	bl	8004978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e049      	b.n	8004316 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f841 	bl	800431e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f000 fb62 	bl	8004978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <HAL_TIM_PWM_Start+0x24>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e03c      	b.n	80043d2 <HAL_TIM_PWM_Start+0x9e>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d109      	bne.n	8004372 <HAL_TIM_PWM_Start+0x3e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e02f      	b.n	80043d2 <HAL_TIM_PWM_Start+0x9e>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d109      	bne.n	800438c <HAL_TIM_PWM_Start+0x58>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e022      	b.n	80043d2 <HAL_TIM_PWM_Start+0x9e>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d109      	bne.n	80043a6 <HAL_TIM_PWM_Start+0x72>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	e015      	b.n	80043d2 <HAL_TIM_PWM_Start+0x9e>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d109      	bne.n	80043c0 <HAL_TIM_PWM_Start+0x8c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	e008      	b.n	80043d2 <HAL_TIM_PWM_Start+0x9e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e079      	b.n	80044ce <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <HAL_TIM_PWM_Start+0xb6>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e8:	e023      	b.n	8004432 <HAL_TIM_PWM_Start+0xfe>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d104      	bne.n	80043fa <HAL_TIM_PWM_Start+0xc6>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f8:	e01b      	b.n	8004432 <HAL_TIM_PWM_Start+0xfe>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d104      	bne.n	800440a <HAL_TIM_PWM_Start+0xd6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004408:	e013      	b.n	8004432 <HAL_TIM_PWM_Start+0xfe>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b0c      	cmp	r3, #12
 800440e:	d104      	bne.n	800441a <HAL_TIM_PWM_Start+0xe6>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004418:	e00b      	b.n	8004432 <HAL_TIM_PWM_Start+0xfe>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b10      	cmp	r3, #16
 800441e:	d104      	bne.n	800442a <HAL_TIM_PWM_Start+0xf6>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004428:	e003      	b.n	8004432 <HAL_TIM_PWM_Start+0xfe>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2201      	movs	r2, #1
 8004438:	6839      	ldr	r1, [r7, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fd8a 	bl	8004f54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a24      	ldr	r2, [pc, #144]	; (80044d8 <HAL_TIM_PWM_Start+0x1a4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d009      	beq.n	800445e <HAL_TIM_PWM_Start+0x12a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a23      	ldr	r2, [pc, #140]	; (80044dc <HAL_TIM_PWM_Start+0x1a8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <HAL_TIM_PWM_Start+0x12a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <HAL_TIM_PWM_Start+0x1ac>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <HAL_TIM_PWM_Start+0x12e>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <HAL_TIM_PWM_Start+0x130>
 8004462:	2300      	movs	r3, #0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d007      	beq.n	8004478 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004476:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a16      	ldr	r2, [pc, #88]	; (80044d8 <HAL_TIM_PWM_Start+0x1a4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_TIM_PWM_Start+0x158>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448a:	d115      	bne.n	80044b8 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <HAL_TIM_PWM_Start+0x1b0>)
 8004494:	4013      	ands	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b06      	cmp	r3, #6
 800449c:	d015      	beq.n	80044ca <HAL_TIM_PWM_Start+0x196>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a4:	d011      	beq.n	80044ca <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0201 	orr.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b6:	e008      	b.n	80044ca <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0201 	orr.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e000      	b.n	80044cc <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40014400 	.word	0x40014400
 80044e0:	40014800 	.word	0x40014800
 80044e4:	00010007 	.word	0x00010007

080044e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e097      	b.n	800462c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7fd fa19 	bl	8001948 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800452c:	f023 0307 	bic.w	r3, r3, #7
 8004530:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3304      	adds	r3, #4
 800453a:	4619      	mov	r1, r3
 800453c:	4610      	mov	r0, r2
 800453e:	f000 fa1b 	bl	8004978 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	4313      	orrs	r3, r2
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004588:	f023 030c 	bic.w	r3, r3, #12
 800458c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	4313      	orrs	r3, r2
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	011a      	lsls	r2, r3, #4
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	031b      	lsls	r3, r3, #12
 80045b8:	4313      	orrs	r3, r2
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	4313      	orrs	r3, r2
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004644:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800464c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004654:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800465c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d110      	bne.n	8004686 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d102      	bne.n	8004670 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800466a:	7b7b      	ldrb	r3, [r7, #13]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d001      	beq.n	8004674 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e069      	b.n	8004748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004684:	e031      	b.n	80046ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b04      	cmp	r3, #4
 800468a:	d110      	bne.n	80046ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800468c:	7bbb      	ldrb	r3, [r7, #14]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d102      	bne.n	8004698 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004692:	7b3b      	ldrb	r3, [r7, #12]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d001      	beq.n	800469c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e055      	b.n	8004748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ac:	e01d      	b.n	80046ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d108      	bne.n	80046c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046b4:	7bbb      	ldrb	r3, [r7, #14]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d105      	bne.n	80046c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ba:	7b7b      	ldrb	r3, [r7, #13]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d102      	bne.n	80046c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046c0:	7b3b      	ldrb	r3, [r7, #12]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d001      	beq.n	80046ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e03e      	b.n	8004748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2202      	movs	r2, #2
 80046d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2202      	movs	r2, #2
 80046e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_TIM_Encoder_Start+0xc4>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d008      	beq.n	8004708 <HAL_TIM_Encoder_Start+0xd4>
 80046f6:	e00f      	b.n	8004718 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2201      	movs	r2, #1
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fc27 	bl	8004f54 <TIM_CCxChannelCmd>
      break;
 8004706:	e016      	b.n	8004736 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2201      	movs	r2, #1
 800470e:	2104      	movs	r1, #4
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fc1f 	bl	8004f54 <TIM_CCxChannelCmd>
      break;
 8004716:	e00e      	b.n	8004736 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2201      	movs	r2, #1
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fc17 	bl	8004f54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2201      	movs	r2, #1
 800472c:	2104      	movs	r1, #4
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fc10 	bl	8004f54 <TIM_CCxChannelCmd>
      break;
 8004734:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800476a:	2302      	movs	r3, #2
 800476c:	e0ff      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b14      	cmp	r3, #20
 800477a:	f200 80f0 	bhi.w	800495e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800477e:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	080047d9 	.word	0x080047d9
 8004788:	0800495f 	.word	0x0800495f
 800478c:	0800495f 	.word	0x0800495f
 8004790:	0800495f 	.word	0x0800495f
 8004794:	08004819 	.word	0x08004819
 8004798:	0800495f 	.word	0x0800495f
 800479c:	0800495f 	.word	0x0800495f
 80047a0:	0800495f 	.word	0x0800495f
 80047a4:	0800485b 	.word	0x0800485b
 80047a8:	0800495f 	.word	0x0800495f
 80047ac:	0800495f 	.word	0x0800495f
 80047b0:	0800495f 	.word	0x0800495f
 80047b4:	0800489b 	.word	0x0800489b
 80047b8:	0800495f 	.word	0x0800495f
 80047bc:	0800495f 	.word	0x0800495f
 80047c0:	0800495f 	.word	0x0800495f
 80047c4:	080048dd 	.word	0x080048dd
 80047c8:	0800495f 	.word	0x0800495f
 80047cc:	0800495f 	.word	0x0800495f
 80047d0:	0800495f 	.word	0x0800495f
 80047d4:	0800491d 	.word	0x0800491d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f93a 	bl	8004a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0208 	orr.w	r2, r2, #8
 80047f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0204 	bic.w	r2, r2, #4
 8004802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6999      	ldr	r1, [r3, #24]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	619a      	str	r2, [r3, #24]
      break;
 8004816:	e0a5      	b.n	8004964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f996 	bl	8004b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6999      	ldr	r1, [r3, #24]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	021a      	lsls	r2, r3, #8
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	619a      	str	r2, [r3, #24]
      break;
 8004858:	e084      	b.n	8004964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f9ef 	bl	8004c44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69da      	ldr	r2, [r3, #28]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0208 	orr.w	r2, r2, #8
 8004874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0204 	bic.w	r2, r2, #4
 8004884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69d9      	ldr	r1, [r3, #28]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	61da      	str	r2, [r3, #28]
      break;
 8004898:	e064      	b.n	8004964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fa47 	bl	8004d34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69da      	ldr	r2, [r3, #28]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69d9      	ldr	r1, [r3, #28]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	021a      	lsls	r2, r3, #8
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	61da      	str	r2, [r3, #28]
      break;
 80048da:	e043      	b.n	8004964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fa84 	bl	8004df0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0208 	orr.w	r2, r2, #8
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0204 	bic.w	r2, r2, #4
 8004906:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800491a:	e023      	b.n	8004964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fabc 	bl	8004ea0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004936:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004946:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	021a      	lsls	r2, r3, #8
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800495c:	e002      	b.n	8004964 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	75fb      	strb	r3, [r7, #23]
      break;
 8004962:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop

08004978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a30      	ldr	r2, [pc, #192]	; (8004a4c <TIM_Base_SetConfig+0xd4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_Base_SetConfig+0x20>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004996:	d108      	bne.n	80049aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a27      	ldr	r2, [pc, #156]	; (8004a4c <TIM_Base_SetConfig+0xd4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00b      	beq.n	80049ca <TIM_Base_SetConfig+0x52>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b8:	d007      	beq.n	80049ca <TIM_Base_SetConfig+0x52>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a24      	ldr	r2, [pc, #144]	; (8004a50 <TIM_Base_SetConfig+0xd8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d003      	beq.n	80049ca <TIM_Base_SetConfig+0x52>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a23      	ldr	r2, [pc, #140]	; (8004a54 <TIM_Base_SetConfig+0xdc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d108      	bne.n	80049dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <TIM_Base_SetConfig+0xd4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d007      	beq.n	8004a18 <TIM_Base_SetConfig+0xa0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a11      	ldr	r2, [pc, #68]	; (8004a50 <TIM_Base_SetConfig+0xd8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_Base_SetConfig+0xa0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a10      	ldr	r2, [pc, #64]	; (8004a54 <TIM_Base_SetConfig+0xdc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d103      	bne.n	8004a20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d105      	bne.n	8004a3e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f023 0201 	bic.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	611a      	str	r2, [r3, #16]
  }
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800

08004a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f023 0201 	bic.w	r2, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f023 0302 	bic.w	r3, r3, #2
 8004aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a24      	ldr	r2, [pc, #144]	; (8004b44 <TIM_OC1_SetConfig+0xec>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d007      	beq.n	8004ac8 <TIM_OC1_SetConfig+0x70>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a23      	ldr	r2, [pc, #140]	; (8004b48 <TIM_OC1_SetConfig+0xf0>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d003      	beq.n	8004ac8 <TIM_OC1_SetConfig+0x70>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a22      	ldr	r2, [pc, #136]	; (8004b4c <TIM_OC1_SetConfig+0xf4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d10c      	bne.n	8004ae2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f023 0308 	bic.w	r3, r3, #8
 8004ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f023 0304 	bic.w	r3, r3, #4
 8004ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <TIM_OC1_SetConfig+0xec>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d007      	beq.n	8004afa <TIM_OC1_SetConfig+0xa2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <TIM_OC1_SetConfig+0xf4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d003      	beq.n	8004afa <TIM_OC1_SetConfig+0xa2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <TIM_OC1_SetConfig+0xf0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d111      	bne.n	8004b1e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	621a      	str	r2, [r3, #32]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40014800 	.word	0x40014800
 8004b4c:	40014400 	.word	0x40014400

08004b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f023 0210 	bic.w	r2, r3, #16
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	021b      	lsls	r3, r3, #8
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0320 	bic.w	r3, r3, #32
 8004b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a22      	ldr	r2, [pc, #136]	; (8004c38 <TIM_OC2_SetConfig+0xe8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d10d      	bne.n	8004bd0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a19      	ldr	r2, [pc, #100]	; (8004c38 <TIM_OC2_SetConfig+0xe8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_OC2_SetConfig+0x98>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <TIM_OC2_SetConfig+0xec>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_OC2_SetConfig+0x98>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <TIM_OC2_SetConfig+0xf0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d113      	bne.n	8004c10 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	40012c00 	.word	0x40012c00
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800

08004c44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0303 	bic.w	r3, r3, #3
 8004c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a21      	ldr	r2, [pc, #132]	; (8004d28 <TIM_OC3_SetConfig+0xe4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d10d      	bne.n	8004cc2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	; (8004d28 <TIM_OC3_SetConfig+0xe4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <TIM_OC3_SetConfig+0x96>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <TIM_OC3_SetConfig+0xe8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <TIM_OC3_SetConfig+0x96>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a16      	ldr	r2, [pc, #88]	; (8004d30 <TIM_OC3_SetConfig+0xec>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d113      	bne.n	8004d02 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	621a      	str	r2, [r3, #32]
}
 8004d1c:	bf00      	nop
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40014800 	.word	0x40014800

08004d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	031b      	lsls	r3, r3, #12
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a14      	ldr	r2, [pc, #80]	; (8004de4 <TIM_OC4_SetConfig+0xb0>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <TIM_OC4_SetConfig+0x74>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <TIM_OC4_SetConfig+0xb4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_OC4_SetConfig+0x74>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a12      	ldr	r2, [pc, #72]	; (8004dec <TIM_OC4_SetConfig+0xb8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d109      	bne.n	8004dbc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	019b      	lsls	r3, r3, #6
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	621a      	str	r2, [r3, #32]
}
 8004dd6:	bf00      	nop
 8004dd8:	371c      	adds	r7, #28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40012c00 	.word	0x40012c00
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800

08004df0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <TIM_OC5_SetConfig+0xa4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d007      	beq.n	8004e5a <TIM_OC5_SetConfig+0x6a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a12      	ldr	r2, [pc, #72]	; (8004e98 <TIM_OC5_SetConfig+0xa8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_OC5_SetConfig+0x6a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <TIM_OC5_SetConfig+0xac>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d109      	bne.n	8004e6e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40014400 	.word	0x40014400
 8004e9c:	40014800 	.word	0x40014800

08004ea0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	021b      	lsls	r3, r3, #8
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	051b      	lsls	r3, r3, #20
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <TIM_OC6_SetConfig+0xa8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d007      	beq.n	8004f0c <TIM_OC6_SetConfig+0x6c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <TIM_OC6_SetConfig+0xac>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_OC6_SetConfig+0x6c>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <TIM_OC6_SetConfig+0xb0>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d109      	bne.n	8004f20 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	029b      	lsls	r3, r3, #10
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40014400 	.word	0x40014400
 8004f50:	40014800 	.word	0x40014800

08004f54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 031f 	and.w	r3, r3, #31
 8004f66:	2201      	movs	r2, #1
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a1a      	ldr	r2, [r3, #32]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	401a      	ands	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1a      	ldr	r2, [r3, #32]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	621a      	str	r2, [r3, #32]
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e04a      	b.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1f      	ldr	r2, [pc, #124]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d108      	bne.n	8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fe8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a12      	ldr	r2, [pc, #72]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005020:	d10c      	bne.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005028:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	4313      	orrs	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40012c00 	.word	0x40012c00

08005060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005078:	2302      	movs	r3, #2
 800507a:	e06e      	b.n	800515a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	4313      	orrs	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	041b      	lsls	r3, r3, #16
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a17      	ldr	r2, [pc, #92]	; (8005168 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d11c      	bne.n	8005148 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	051b      	lsls	r3, r3, #20
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40012c00 	.word	0x40012c00

0800516c <LL_RCC_GetUSARTClockSource>:
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005178:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4013      	ands	r3, r2
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <LL_RCC_GetLPUARTClockSource>:
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005198:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4013      	ands	r3, r2
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e042      	b.n	8005244 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7fc fc25 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2224      	movs	r2, #36	; 0x24
 80051da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fade 	bl	80057b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f8b3 	bl	8005368 <UART_SetConfig>
 8005202:	4603      	mov	r3, r0
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e01b      	b.n	8005244 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800521a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800522a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fb5d 	bl	80058fc <UART_CheckIdleState>
 8005242:	4603      	mov	r3, r0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	2b20      	cmp	r3, #32
 8005264:	d17b      	bne.n	800535e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d002      	beq.n	8005272 <HAL_UART_Transmit+0x26>
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e074      	b.n	8005360 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2221      	movs	r2, #33	; 0x21
 8005282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005286:	f7fc fdd7 	bl	8001e38 <HAL_GetTick>
 800528a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	88fa      	ldrh	r2, [r7, #6]
 8005298:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a4:	d108      	bne.n	80052b8 <HAL_UART_Transmit+0x6c>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d104      	bne.n	80052b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	e003      	b.n	80052c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052c0:	e030      	b.n	8005324 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2180      	movs	r1, #128	; 0x80
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fbbf 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e03d      	b.n	8005360 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10b      	bne.n	8005302 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	3302      	adds	r3, #2
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	e007      	b.n	8005312 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	781a      	ldrb	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	3301      	adds	r3, #1
 8005310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1c8      	bne.n	80052c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2200      	movs	r2, #0
 8005338:	2140      	movs	r1, #64	; 0x40
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 fb88 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e006      	b.n	8005360 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	e000      	b.n	8005360 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800535e:	2302      	movs	r3, #2
  }
}
 8005360:	4618      	mov	r0, r3
 8005362:	3720      	adds	r7, #32
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800536c:	b08c      	sub	sp, #48	; 0x30
 800536e:	af00      	add	r7, sp, #0
 8005370:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	431a      	orrs	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	431a      	orrs	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	4313      	orrs	r3, r2
 800538e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4baf      	ldr	r3, [pc, #700]	; (8005654 <UART_SetConfig+0x2ec>)
 8005398:	4013      	ands	r3, r2
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a0:	430b      	orrs	r3, r1
 80053a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4aa4      	ldr	r2, [pc, #656]	; (8005658 <UART_SetConfig+0x2f0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053d0:	4313      	orrs	r3, r2
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80053de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	f023 010f 	bic.w	r1, r3, #15
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a95      	ldr	r2, [pc, #596]	; (800565c <UART_SetConfig+0x2f4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d125      	bne.n	8005458 <UART_SetConfig+0xf0>
 800540c:	2003      	movs	r0, #3
 800540e:	f7ff fead 	bl	800516c <LL_RCC_GetUSARTClockSource>
 8005412:	4603      	mov	r3, r0
 8005414:	2b03      	cmp	r3, #3
 8005416:	d81b      	bhi.n	8005450 <UART_SetConfig+0xe8>
 8005418:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0xb8>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005431 	.word	0x08005431
 8005424:	08005441 	.word	0x08005441
 8005428:	08005439 	.word	0x08005439
 800542c:	08005449 	.word	0x08005449
 8005430:	2301      	movs	r3, #1
 8005432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005436:	e042      	b.n	80054be <UART_SetConfig+0x156>
 8005438:	2302      	movs	r3, #2
 800543a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800543e:	e03e      	b.n	80054be <UART_SetConfig+0x156>
 8005440:	2304      	movs	r3, #4
 8005442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005446:	e03a      	b.n	80054be <UART_SetConfig+0x156>
 8005448:	2308      	movs	r3, #8
 800544a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800544e:	e036      	b.n	80054be <UART_SetConfig+0x156>
 8005450:	2310      	movs	r3, #16
 8005452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005456:	e032      	b.n	80054be <UART_SetConfig+0x156>
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a7e      	ldr	r2, [pc, #504]	; (8005658 <UART_SetConfig+0x2f0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d12a      	bne.n	80054b8 <UART_SetConfig+0x150>
 8005462:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005466:	f7ff fe91 	bl	800518c <LL_RCC_GetLPUARTClockSource>
 800546a:	4603      	mov	r3, r0
 800546c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005470:	d01a      	beq.n	80054a8 <UART_SetConfig+0x140>
 8005472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005476:	d81b      	bhi.n	80054b0 <UART_SetConfig+0x148>
 8005478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547c:	d00c      	beq.n	8005498 <UART_SetConfig+0x130>
 800547e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005482:	d815      	bhi.n	80054b0 <UART_SetConfig+0x148>
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <UART_SetConfig+0x128>
 8005488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548c:	d008      	beq.n	80054a0 <UART_SetConfig+0x138>
 800548e:	e00f      	b.n	80054b0 <UART_SetConfig+0x148>
 8005490:	2300      	movs	r3, #0
 8005492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005496:	e012      	b.n	80054be <UART_SetConfig+0x156>
 8005498:	2302      	movs	r3, #2
 800549a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549e:	e00e      	b.n	80054be <UART_SetConfig+0x156>
 80054a0:	2304      	movs	r3, #4
 80054a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a6:	e00a      	b.n	80054be <UART_SetConfig+0x156>
 80054a8:	2308      	movs	r3, #8
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ae:	e006      	b.n	80054be <UART_SetConfig+0x156>
 80054b0:	2310      	movs	r3, #16
 80054b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b6:	e002      	b.n	80054be <UART_SetConfig+0x156>
 80054b8:	2310      	movs	r3, #16
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a65      	ldr	r2, [pc, #404]	; (8005658 <UART_SetConfig+0x2f0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	f040 8097 	bne.w	80055f8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d823      	bhi.n	800551a <UART_SetConfig+0x1b2>
 80054d2:	a201      	add	r2, pc, #4	; (adr r2, 80054d8 <UART_SetConfig+0x170>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	0800551b 	.word	0x0800551b
 80054e0:	08005505 	.word	0x08005505
 80054e4:	0800551b 	.word	0x0800551b
 80054e8:	0800550b 	.word	0x0800550b
 80054ec:	0800551b 	.word	0x0800551b
 80054f0:	0800551b 	.word	0x0800551b
 80054f4:	0800551b 	.word	0x0800551b
 80054f8:	08005513 	.word	0x08005513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054fc:	f7fe f948 	bl	8003790 <HAL_RCC_GetPCLK1Freq>
 8005500:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005502:	e010      	b.n	8005526 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005504:	4b56      	ldr	r3, [pc, #344]	; (8005660 <UART_SetConfig+0x2f8>)
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005508:	e00d      	b.n	8005526 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800550a:	f7fe f8c1 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 800550e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005510:	e009      	b.n	8005526 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005518:	e005      	b.n	8005526 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005524:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 812b 	beq.w	8005784 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	4a4c      	ldr	r2, [pc, #304]	; (8005664 <UART_SetConfig+0x2fc>)
 8005534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005538:	461a      	mov	r2, r3
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005540:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	4413      	add	r3, r2
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	429a      	cmp	r2, r3
 8005550:	d305      	bcc.n	800555e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	429a      	cmp	r2, r3
 800555c:	d903      	bls.n	8005566 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005564:	e10e      	b.n	8005784 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	2200      	movs	r2, #0
 800556a:	60bb      	str	r3, [r7, #8]
 800556c:	60fa      	str	r2, [r7, #12]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	4a3c      	ldr	r2, [pc, #240]	; (8005664 <UART_SetConfig+0x2fc>)
 8005574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005578:	b29b      	uxth	r3, r3
 800557a:	2200      	movs	r2, #0
 800557c:	603b      	str	r3, [r7, #0]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005584:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005588:	f7fb fa38 	bl	80009fc <__aeabi_uldivmod>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	020b      	lsls	r3, r1, #8
 800559e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055a2:	0202      	lsls	r2, r0, #8
 80055a4:	6979      	ldr	r1, [r7, #20]
 80055a6:	6849      	ldr	r1, [r1, #4]
 80055a8:	0849      	lsrs	r1, r1, #1
 80055aa:	2000      	movs	r0, #0
 80055ac:	460c      	mov	r4, r1
 80055ae:	4605      	mov	r5, r0
 80055b0:	eb12 0804 	adds.w	r8, r2, r4
 80055b4:	eb43 0905 	adc.w	r9, r3, r5
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	469a      	mov	sl, r3
 80055c0:	4693      	mov	fp, r2
 80055c2:	4652      	mov	r2, sl
 80055c4:	465b      	mov	r3, fp
 80055c6:	4640      	mov	r0, r8
 80055c8:	4649      	mov	r1, r9
 80055ca:	f7fb fa17 	bl	80009fc <__aeabi_uldivmod>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4613      	mov	r3, r2
 80055d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055dc:	d308      	bcc.n	80055f0 <UART_SetConfig+0x288>
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e4:	d204      	bcs.n	80055f0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6a3a      	ldr	r2, [r7, #32]
 80055ec:	60da      	str	r2, [r3, #12]
 80055ee:	e0c9      	b.n	8005784 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055f6:	e0c5      	b.n	8005784 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005600:	d16d      	bne.n	80056de <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005606:	3b01      	subs	r3, #1
 8005608:	2b07      	cmp	r3, #7
 800560a:	d82d      	bhi.n	8005668 <UART_SetConfig+0x300>
 800560c:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <UART_SetConfig+0x2ac>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005635 	.word	0x08005635
 8005618:	0800563d 	.word	0x0800563d
 800561c:	08005669 	.word	0x08005669
 8005620:	08005643 	.word	0x08005643
 8005624:	08005669 	.word	0x08005669
 8005628:	08005669 	.word	0x08005669
 800562c:	08005669 	.word	0x08005669
 8005630:	0800564b 	.word	0x0800564b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005634:	f7fe f8c2 	bl	80037bc <HAL_RCC_GetPCLK2Freq>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800563a:	e01b      	b.n	8005674 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800563c:	4b08      	ldr	r3, [pc, #32]	; (8005660 <UART_SetConfig+0x2f8>)
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005640:	e018      	b.n	8005674 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005642:	f7fe f825 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8005646:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005648:	e014      	b.n	8005674 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005650:	e010      	b.n	8005674 <UART_SetConfig+0x30c>
 8005652:	bf00      	nop
 8005654:	cfff69f3 	.word	0xcfff69f3
 8005658:	40008000 	.word	0x40008000
 800565c:	40013800 	.word	0x40013800
 8005660:	00f42400 	.word	0x00f42400
 8005664:	080068d8 	.word	0x080068d8
      default:
        pclk = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005672:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8084 	beq.w	8005784 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	4a4b      	ldr	r2, [pc, #300]	; (80057b0 <UART_SetConfig+0x448>)
 8005682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005686:	461a      	mov	r2, r3
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	fbb3 f3f2 	udiv	r3, r3, r2
 800568e:	005a      	lsls	r2, r3, #1
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	085b      	lsrs	r3, r3, #1
 8005696:	441a      	add	r2, r3
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	2b0f      	cmp	r3, #15
 80056a6:	d916      	bls.n	80056d6 <UART_SetConfig+0x36e>
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ae:	d212      	bcs.n	80056d6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f023 030f 	bic.w	r3, r3, #15
 80056b8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	085b      	lsrs	r3, r3, #1
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	8bfb      	ldrh	r3, [r7, #30]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	8bfa      	ldrh	r2, [r7, #30]
 80056d2:	60da      	str	r2, [r3, #12]
 80056d4:	e056      	b.n	8005784 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056dc:	e052      	b.n	8005784 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056e2:	3b01      	subs	r3, #1
 80056e4:	2b07      	cmp	r3, #7
 80056e6:	d822      	bhi.n	800572e <UART_SetConfig+0x3c6>
 80056e8:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <UART_SetConfig+0x388>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	08005711 	.word	0x08005711
 80056f4:	08005719 	.word	0x08005719
 80056f8:	0800572f 	.word	0x0800572f
 80056fc:	0800571f 	.word	0x0800571f
 8005700:	0800572f 	.word	0x0800572f
 8005704:	0800572f 	.word	0x0800572f
 8005708:	0800572f 	.word	0x0800572f
 800570c:	08005727 	.word	0x08005727
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005710:	f7fe f854 	bl	80037bc <HAL_RCC_GetPCLK2Freq>
 8005714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005716:	e010      	b.n	800573a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005718:	4b26      	ldr	r3, [pc, #152]	; (80057b4 <UART_SetConfig+0x44c>)
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800571c:	e00d      	b.n	800573a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571e:	f7fd ffb7 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8005722:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005724:	e009      	b.n	800573a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800572c:	e005      	b.n	800573a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005738:	bf00      	nop
    }

    if (pclk != 0U)
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d021      	beq.n	8005784 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <UART_SetConfig+0x448>)
 8005746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800574a:	461a      	mov	r2, r3
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	441a      	add	r2, r3
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	2b0f      	cmp	r3, #15
 8005768:	d909      	bls.n	800577e <UART_SetConfig+0x416>
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005770:	d205      	bcs.n	800577e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	b29a      	uxth	r2, r3
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60da      	str	r2, [r3, #12]
 800577c:	e002      	b.n	8005784 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2201      	movs	r2, #1
 8005788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2201      	movs	r2, #1
 8005790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2200      	movs	r2, #0
 8005798:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2200      	movs	r2, #0
 800579e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80057a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3730      	adds	r7, #48	; 0x30
 80057a8:	46bd      	mov	sp, r7
 80057aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ae:	bf00      	nop
 80057b0:	080068d8 	.word	0x080068d8
 80057b4:	00f42400 	.word	0x00f42400

080057b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01a      	beq.n	80058ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058b6:	d10a      	bne.n	80058ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b098      	sub	sp, #96	; 0x60
 8005900:	af02      	add	r7, sp, #8
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800590c:	f7fc fa94 	bl	8001e38 <HAL_GetTick>
 8005910:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b08      	cmp	r3, #8
 800591e:	d12f      	bne.n	8005980 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005928:	2200      	movs	r2, #0
 800592a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f88e 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d022      	beq.n	8005980 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800594e:	653b      	str	r3, [r7, #80]	; 0x50
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005958:	647b      	str	r3, [r7, #68]	; 0x44
 800595a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800595e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e6      	bne.n	800593a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e063      	b.n	8005a48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b04      	cmp	r3, #4
 800598c:	d149      	bne.n	8005a22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800598e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005996:	2200      	movs	r2, #0
 8005998:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f857 	bl	8005a50 <UART_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d03c      	beq.n	8005a22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	e853 3f00 	ldrex	r3, [r3]
 80059b4:	623b      	str	r3, [r7, #32]
   return(result);
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30
 80059c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1e6      	bne.n	80059a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3308      	adds	r3, #8
 80059f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059fa:	61fa      	str	r2, [r7, #28]
 80059fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	69b9      	ldr	r1, [r7, #24]
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	617b      	str	r3, [r7, #20]
   return(result);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e5      	bne.n	80059da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e012      	b.n	8005a48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3758      	adds	r7, #88	; 0x58
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a60:	e04f      	b.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d04b      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6a:	f7fc f9e5 	bl	8001e38 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e04e      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d037      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b80      	cmp	r3, #128	; 0x80
 8005a96:	d034      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d031      	beq.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d110      	bne.n	8005ace <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f838 	bl	8005b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2208      	movs	r2, #8
 8005abe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e029      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005adc:	d111      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f81e 	bl	8005b2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e00f      	b.n	8005b22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d0a0      	beq.n	8005a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b095      	sub	sp, #84	; 0x54
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b50:	643b      	str	r3, [r7, #64]	; 0x40
 8005b52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e6      	bne.n	8005b32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b7a:	f023 0301 	bic.w	r3, r3, #1
 8005b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3308      	adds	r3, #8
 8005b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e3      	bne.n	8005b64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d118      	bne.n	8005bd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f023 0310 	bic.w	r3, r3, #16
 8005bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e6      	bne.n	8005ba4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005bea:	bf00      	nop
 8005bec:	3754      	adds	r7, #84	; 0x54
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_UARTEx_DisableFifoMode+0x16>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e027      	b.n	8005c5c <HAL_UARTEx_DisableFifoMode+0x66>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2224      	movs	r2, #36	; 0x24
 8005c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0201 	bic.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e02d      	b.n	8005cdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2224      	movs	r2, #36	; 0x24
 8005c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f84f 	bl	8005d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e02d      	b.n	8005d58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2224      	movs	r2, #36	; 0x24
 8005d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f811 	bl	8005d60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d108      	bne.n	8005d82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d80:	e031      	b.n	8005de6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d82:	2308      	movs	r3, #8
 8005d84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d86:	2308      	movs	r3, #8
 8005d88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	0e5b      	lsrs	r3, r3, #25
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	0f5b      	lsrs	r3, r3, #29
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005daa:	7bbb      	ldrb	r3, [r7, #14]
 8005dac:	7b3a      	ldrb	r2, [r7, #12]
 8005dae:	4911      	ldr	r1, [pc, #68]	; (8005df4 <UARTEx_SetNbDataToProcess+0x94>)
 8005db0:	5c8a      	ldrb	r2, [r1, r2]
 8005db2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005db6:	7b3a      	ldrb	r2, [r7, #12]
 8005db8:	490f      	ldr	r1, [pc, #60]	; (8005df8 <UARTEx_SetNbDataToProcess+0x98>)
 8005dba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	7b7a      	ldrb	r2, [r7, #13]
 8005dcc:	4909      	ldr	r1, [pc, #36]	; (8005df4 <UARTEx_SetNbDataToProcess+0x94>)
 8005dce:	5c8a      	ldrb	r2, [r1, r2]
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005dd4:	7b7a      	ldrb	r2, [r7, #13]
 8005dd6:	4908      	ldr	r1, [pc, #32]	; (8005df8 <UARTEx_SetNbDataToProcess+0x98>)
 8005dd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dda:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	080068f0 	.word	0x080068f0
 8005df8:	080068f8 	.word	0x080068f8

08005dfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e04:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005e08:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	43db      	mvns	r3, r3
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	1d3b      	adds	r3, r7, #4
 8005e3c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <siprintf>:
 8005e70:	b40e      	push	{r1, r2, r3}
 8005e72:	b500      	push	{lr}
 8005e74:	b09c      	sub	sp, #112	; 0x70
 8005e76:	ab1d      	add	r3, sp, #116	; 0x74
 8005e78:	9002      	str	r0, [sp, #8]
 8005e7a:	9006      	str	r0, [sp, #24]
 8005e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e80:	4809      	ldr	r0, [pc, #36]	; (8005ea8 <siprintf+0x38>)
 8005e82:	9107      	str	r1, [sp, #28]
 8005e84:	9104      	str	r1, [sp, #16]
 8005e86:	4909      	ldr	r1, [pc, #36]	; (8005eac <siprintf+0x3c>)
 8005e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e8c:	9105      	str	r1, [sp, #20]
 8005e8e:	6800      	ldr	r0, [r0, #0]
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	a902      	add	r1, sp, #8
 8005e94:	f000 f992 	bl	80061bc <_svfiprintf_r>
 8005e98:	9b02      	ldr	r3, [sp, #8]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	b01c      	add	sp, #112	; 0x70
 8005ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ea4:	b003      	add	sp, #12
 8005ea6:	4770      	bx	lr
 8005ea8:	20000060 	.word	0x20000060
 8005eac:	ffff0208 	.word	0xffff0208

08005eb0 <memset>:
 8005eb0:	4402      	add	r2, r0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d100      	bne.n	8005eba <memset+0xa>
 8005eb8:	4770      	bx	lr
 8005eba:	f803 1b01 	strb.w	r1, [r3], #1
 8005ebe:	e7f9      	b.n	8005eb4 <memset+0x4>

08005ec0 <__errno>:
 8005ec0:	4b01      	ldr	r3, [pc, #4]	; (8005ec8 <__errno+0x8>)
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	20000060 	.word	0x20000060

08005ecc <__libc_init_array>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4d0d      	ldr	r5, [pc, #52]	; (8005f04 <__libc_init_array+0x38>)
 8005ed0:	4c0d      	ldr	r4, [pc, #52]	; (8005f08 <__libc_init_array+0x3c>)
 8005ed2:	1b64      	subs	r4, r4, r5
 8005ed4:	10a4      	asrs	r4, r4, #2
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	42a6      	cmp	r6, r4
 8005eda:	d109      	bne.n	8005ef0 <__libc_init_array+0x24>
 8005edc:	4d0b      	ldr	r5, [pc, #44]	; (8005f0c <__libc_init_array+0x40>)
 8005ede:	4c0c      	ldr	r4, [pc, #48]	; (8005f10 <__libc_init_array+0x44>)
 8005ee0:	f000 fc6a 	bl	80067b8 <_init>
 8005ee4:	1b64      	subs	r4, r4, r5
 8005ee6:	10a4      	asrs	r4, r4, #2
 8005ee8:	2600      	movs	r6, #0
 8005eea:	42a6      	cmp	r6, r4
 8005eec:	d105      	bne.n	8005efa <__libc_init_array+0x2e>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef4:	4798      	blx	r3
 8005ef6:	3601      	adds	r6, #1
 8005ef8:	e7ee      	b.n	8005ed8 <__libc_init_array+0xc>
 8005efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efe:	4798      	blx	r3
 8005f00:	3601      	adds	r6, #1
 8005f02:	e7f2      	b.n	8005eea <__libc_init_array+0x1e>
 8005f04:	0800693c 	.word	0x0800693c
 8005f08:	0800693c 	.word	0x0800693c
 8005f0c:	0800693c 	.word	0x0800693c
 8005f10:	08006940 	.word	0x08006940

08005f14 <__retarget_lock_acquire_recursive>:
 8005f14:	4770      	bx	lr

08005f16 <__retarget_lock_release_recursive>:
 8005f16:	4770      	bx	lr

08005f18 <_free_r>:
 8005f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f1a:	2900      	cmp	r1, #0
 8005f1c:	d044      	beq.n	8005fa8 <_free_r+0x90>
 8005f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f22:	9001      	str	r0, [sp, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f1a1 0404 	sub.w	r4, r1, #4
 8005f2a:	bfb8      	it	lt
 8005f2c:	18e4      	addlt	r4, r4, r3
 8005f2e:	f000 f8df 	bl	80060f0 <__malloc_lock>
 8005f32:	4a1e      	ldr	r2, [pc, #120]	; (8005fac <_free_r+0x94>)
 8005f34:	9801      	ldr	r0, [sp, #4]
 8005f36:	6813      	ldr	r3, [r2, #0]
 8005f38:	b933      	cbnz	r3, 8005f48 <_free_r+0x30>
 8005f3a:	6063      	str	r3, [r4, #4]
 8005f3c:	6014      	str	r4, [r2, #0]
 8005f3e:	b003      	add	sp, #12
 8005f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f44:	f000 b8da 	b.w	80060fc <__malloc_unlock>
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	d908      	bls.n	8005f5e <_free_r+0x46>
 8005f4c:	6825      	ldr	r5, [r4, #0]
 8005f4e:	1961      	adds	r1, r4, r5
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf01      	itttt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	1949      	addeq	r1, r1, r5
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	e7ed      	b.n	8005f3a <_free_r+0x22>
 8005f5e:	461a      	mov	r2, r3
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	b10b      	cbz	r3, 8005f68 <_free_r+0x50>
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d9fa      	bls.n	8005f5e <_free_r+0x46>
 8005f68:	6811      	ldr	r1, [r2, #0]
 8005f6a:	1855      	adds	r5, r2, r1
 8005f6c:	42a5      	cmp	r5, r4
 8005f6e:	d10b      	bne.n	8005f88 <_free_r+0x70>
 8005f70:	6824      	ldr	r4, [r4, #0]
 8005f72:	4421      	add	r1, r4
 8005f74:	1854      	adds	r4, r2, r1
 8005f76:	42a3      	cmp	r3, r4
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	d1e0      	bne.n	8005f3e <_free_r+0x26>
 8005f7c:	681c      	ldr	r4, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	6053      	str	r3, [r2, #4]
 8005f82:	440c      	add	r4, r1
 8005f84:	6014      	str	r4, [r2, #0]
 8005f86:	e7da      	b.n	8005f3e <_free_r+0x26>
 8005f88:	d902      	bls.n	8005f90 <_free_r+0x78>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	6003      	str	r3, [r0, #0]
 8005f8e:	e7d6      	b.n	8005f3e <_free_r+0x26>
 8005f90:	6825      	ldr	r5, [r4, #0]
 8005f92:	1961      	adds	r1, r4, r5
 8005f94:	428b      	cmp	r3, r1
 8005f96:	bf04      	itt	eq
 8005f98:	6819      	ldreq	r1, [r3, #0]
 8005f9a:	685b      	ldreq	r3, [r3, #4]
 8005f9c:	6063      	str	r3, [r4, #4]
 8005f9e:	bf04      	itt	eq
 8005fa0:	1949      	addeq	r1, r1, r5
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	6054      	str	r4, [r2, #4]
 8005fa6:	e7ca      	b.n	8005f3e <_free_r+0x26>
 8005fa8:	b003      	add	sp, #12
 8005faa:	bd30      	pop	{r4, r5, pc}
 8005fac:	200005d8 	.word	0x200005d8

08005fb0 <sbrk_aligned>:
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	4e0e      	ldr	r6, [pc, #56]	; (8005fec <sbrk_aligned+0x3c>)
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	6831      	ldr	r1, [r6, #0]
 8005fb8:	4605      	mov	r5, r0
 8005fba:	b911      	cbnz	r1, 8005fc2 <sbrk_aligned+0x12>
 8005fbc:	f000 fba6 	bl	800670c <_sbrk_r>
 8005fc0:	6030      	str	r0, [r6, #0]
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 fba1 	bl	800670c <_sbrk_r>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d00a      	beq.n	8005fe4 <sbrk_aligned+0x34>
 8005fce:	1cc4      	adds	r4, r0, #3
 8005fd0:	f024 0403 	bic.w	r4, r4, #3
 8005fd4:	42a0      	cmp	r0, r4
 8005fd6:	d007      	beq.n	8005fe8 <sbrk_aligned+0x38>
 8005fd8:	1a21      	subs	r1, r4, r0
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 fb96 	bl	800670c <_sbrk_r>
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d101      	bne.n	8005fe8 <sbrk_aligned+0x38>
 8005fe4:	f04f 34ff 	mov.w	r4, #4294967295
 8005fe8:	4620      	mov	r0, r4
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	200005dc 	.word	0x200005dc

08005ff0 <_malloc_r>:
 8005ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ff4:	1ccd      	adds	r5, r1, #3
 8005ff6:	f025 0503 	bic.w	r5, r5, #3
 8005ffa:	3508      	adds	r5, #8
 8005ffc:	2d0c      	cmp	r5, #12
 8005ffe:	bf38      	it	cc
 8006000:	250c      	movcc	r5, #12
 8006002:	2d00      	cmp	r5, #0
 8006004:	4607      	mov	r7, r0
 8006006:	db01      	blt.n	800600c <_malloc_r+0x1c>
 8006008:	42a9      	cmp	r1, r5
 800600a:	d905      	bls.n	8006018 <_malloc_r+0x28>
 800600c:	230c      	movs	r3, #12
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	2600      	movs	r6, #0
 8006012:	4630      	mov	r0, r6
 8006014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006018:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060ec <_malloc_r+0xfc>
 800601c:	f000 f868 	bl	80060f0 <__malloc_lock>
 8006020:	f8d8 3000 	ldr.w	r3, [r8]
 8006024:	461c      	mov	r4, r3
 8006026:	bb5c      	cbnz	r4, 8006080 <_malloc_r+0x90>
 8006028:	4629      	mov	r1, r5
 800602a:	4638      	mov	r0, r7
 800602c:	f7ff ffc0 	bl	8005fb0 <sbrk_aligned>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	4604      	mov	r4, r0
 8006034:	d155      	bne.n	80060e2 <_malloc_r+0xf2>
 8006036:	f8d8 4000 	ldr.w	r4, [r8]
 800603a:	4626      	mov	r6, r4
 800603c:	2e00      	cmp	r6, #0
 800603e:	d145      	bne.n	80060cc <_malloc_r+0xdc>
 8006040:	2c00      	cmp	r4, #0
 8006042:	d048      	beq.n	80060d6 <_malloc_r+0xe6>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	4631      	mov	r1, r6
 8006048:	4638      	mov	r0, r7
 800604a:	eb04 0903 	add.w	r9, r4, r3
 800604e:	f000 fb5d 	bl	800670c <_sbrk_r>
 8006052:	4581      	cmp	r9, r0
 8006054:	d13f      	bne.n	80060d6 <_malloc_r+0xe6>
 8006056:	6821      	ldr	r1, [r4, #0]
 8006058:	1a6d      	subs	r5, r5, r1
 800605a:	4629      	mov	r1, r5
 800605c:	4638      	mov	r0, r7
 800605e:	f7ff ffa7 	bl	8005fb0 <sbrk_aligned>
 8006062:	3001      	adds	r0, #1
 8006064:	d037      	beq.n	80060d6 <_malloc_r+0xe6>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	442b      	add	r3, r5
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	f8d8 3000 	ldr.w	r3, [r8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d038      	beq.n	80060e6 <_malloc_r+0xf6>
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	42a2      	cmp	r2, r4
 8006078:	d12b      	bne.n	80060d2 <_malloc_r+0xe2>
 800607a:	2200      	movs	r2, #0
 800607c:	605a      	str	r2, [r3, #4]
 800607e:	e00f      	b.n	80060a0 <_malloc_r+0xb0>
 8006080:	6822      	ldr	r2, [r4, #0]
 8006082:	1b52      	subs	r2, r2, r5
 8006084:	d41f      	bmi.n	80060c6 <_malloc_r+0xd6>
 8006086:	2a0b      	cmp	r2, #11
 8006088:	d917      	bls.n	80060ba <_malloc_r+0xca>
 800608a:	1961      	adds	r1, r4, r5
 800608c:	42a3      	cmp	r3, r4
 800608e:	6025      	str	r5, [r4, #0]
 8006090:	bf18      	it	ne
 8006092:	6059      	strne	r1, [r3, #4]
 8006094:	6863      	ldr	r3, [r4, #4]
 8006096:	bf08      	it	eq
 8006098:	f8c8 1000 	streq.w	r1, [r8]
 800609c:	5162      	str	r2, [r4, r5]
 800609e:	604b      	str	r3, [r1, #4]
 80060a0:	4638      	mov	r0, r7
 80060a2:	f104 060b 	add.w	r6, r4, #11
 80060a6:	f000 f829 	bl	80060fc <__malloc_unlock>
 80060aa:	f026 0607 	bic.w	r6, r6, #7
 80060ae:	1d23      	adds	r3, r4, #4
 80060b0:	1af2      	subs	r2, r6, r3
 80060b2:	d0ae      	beq.n	8006012 <_malloc_r+0x22>
 80060b4:	1b9b      	subs	r3, r3, r6
 80060b6:	50a3      	str	r3, [r4, r2]
 80060b8:	e7ab      	b.n	8006012 <_malloc_r+0x22>
 80060ba:	42a3      	cmp	r3, r4
 80060bc:	6862      	ldr	r2, [r4, #4]
 80060be:	d1dd      	bne.n	800607c <_malloc_r+0x8c>
 80060c0:	f8c8 2000 	str.w	r2, [r8]
 80060c4:	e7ec      	b.n	80060a0 <_malloc_r+0xb0>
 80060c6:	4623      	mov	r3, r4
 80060c8:	6864      	ldr	r4, [r4, #4]
 80060ca:	e7ac      	b.n	8006026 <_malloc_r+0x36>
 80060cc:	4634      	mov	r4, r6
 80060ce:	6876      	ldr	r6, [r6, #4]
 80060d0:	e7b4      	b.n	800603c <_malloc_r+0x4c>
 80060d2:	4613      	mov	r3, r2
 80060d4:	e7cc      	b.n	8006070 <_malloc_r+0x80>
 80060d6:	230c      	movs	r3, #12
 80060d8:	603b      	str	r3, [r7, #0]
 80060da:	4638      	mov	r0, r7
 80060dc:	f000 f80e 	bl	80060fc <__malloc_unlock>
 80060e0:	e797      	b.n	8006012 <_malloc_r+0x22>
 80060e2:	6025      	str	r5, [r4, #0]
 80060e4:	e7dc      	b.n	80060a0 <_malloc_r+0xb0>
 80060e6:	605b      	str	r3, [r3, #4]
 80060e8:	deff      	udf	#255	; 0xff
 80060ea:	bf00      	nop
 80060ec:	200005d8 	.word	0x200005d8

080060f0 <__malloc_lock>:
 80060f0:	4801      	ldr	r0, [pc, #4]	; (80060f8 <__malloc_lock+0x8>)
 80060f2:	f7ff bf0f 	b.w	8005f14 <__retarget_lock_acquire_recursive>
 80060f6:	bf00      	nop
 80060f8:	200005d4 	.word	0x200005d4

080060fc <__malloc_unlock>:
 80060fc:	4801      	ldr	r0, [pc, #4]	; (8006104 <__malloc_unlock+0x8>)
 80060fe:	f7ff bf0a 	b.w	8005f16 <__retarget_lock_release_recursive>
 8006102:	bf00      	nop
 8006104:	200005d4 	.word	0x200005d4

08006108 <__ssputs_r>:
 8006108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	688e      	ldr	r6, [r1, #8]
 800610e:	461f      	mov	r7, r3
 8006110:	42be      	cmp	r6, r7
 8006112:	680b      	ldr	r3, [r1, #0]
 8006114:	4682      	mov	sl, r0
 8006116:	460c      	mov	r4, r1
 8006118:	4690      	mov	r8, r2
 800611a:	d82c      	bhi.n	8006176 <__ssputs_r+0x6e>
 800611c:	898a      	ldrh	r2, [r1, #12]
 800611e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006122:	d026      	beq.n	8006172 <__ssputs_r+0x6a>
 8006124:	6965      	ldr	r5, [r4, #20]
 8006126:	6909      	ldr	r1, [r1, #16]
 8006128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800612c:	eba3 0901 	sub.w	r9, r3, r1
 8006130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006134:	1c7b      	adds	r3, r7, #1
 8006136:	444b      	add	r3, r9
 8006138:	106d      	asrs	r5, r5, #1
 800613a:	429d      	cmp	r5, r3
 800613c:	bf38      	it	cc
 800613e:	461d      	movcc	r5, r3
 8006140:	0553      	lsls	r3, r2, #21
 8006142:	d527      	bpl.n	8006194 <__ssputs_r+0x8c>
 8006144:	4629      	mov	r1, r5
 8006146:	f7ff ff53 	bl	8005ff0 <_malloc_r>
 800614a:	4606      	mov	r6, r0
 800614c:	b360      	cbz	r0, 80061a8 <__ssputs_r+0xa0>
 800614e:	6921      	ldr	r1, [r4, #16]
 8006150:	464a      	mov	r2, r9
 8006152:	f000 faeb 	bl	800672c <memcpy>
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800615c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006160:	81a3      	strh	r3, [r4, #12]
 8006162:	6126      	str	r6, [r4, #16]
 8006164:	6165      	str	r5, [r4, #20]
 8006166:	444e      	add	r6, r9
 8006168:	eba5 0509 	sub.w	r5, r5, r9
 800616c:	6026      	str	r6, [r4, #0]
 800616e:	60a5      	str	r5, [r4, #8]
 8006170:	463e      	mov	r6, r7
 8006172:	42be      	cmp	r6, r7
 8006174:	d900      	bls.n	8006178 <__ssputs_r+0x70>
 8006176:	463e      	mov	r6, r7
 8006178:	6820      	ldr	r0, [r4, #0]
 800617a:	4632      	mov	r2, r6
 800617c:	4641      	mov	r1, r8
 800617e:	f000 faab 	bl	80066d8 <memmove>
 8006182:	68a3      	ldr	r3, [r4, #8]
 8006184:	1b9b      	subs	r3, r3, r6
 8006186:	60a3      	str	r3, [r4, #8]
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	4433      	add	r3, r6
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	2000      	movs	r0, #0
 8006190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006194:	462a      	mov	r2, r5
 8006196:	f000 fad7 	bl	8006748 <_realloc_r>
 800619a:	4606      	mov	r6, r0
 800619c:	2800      	cmp	r0, #0
 800619e:	d1e0      	bne.n	8006162 <__ssputs_r+0x5a>
 80061a0:	6921      	ldr	r1, [r4, #16]
 80061a2:	4650      	mov	r0, sl
 80061a4:	f7ff feb8 	bl	8005f18 <_free_r>
 80061a8:	230c      	movs	r3, #12
 80061aa:	f8ca 3000 	str.w	r3, [sl]
 80061ae:	89a3      	ldrh	r3, [r4, #12]
 80061b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b4:	81a3      	strh	r3, [r4, #12]
 80061b6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ba:	e7e9      	b.n	8006190 <__ssputs_r+0x88>

080061bc <_svfiprintf_r>:
 80061bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c0:	4698      	mov	r8, r3
 80061c2:	898b      	ldrh	r3, [r1, #12]
 80061c4:	061b      	lsls	r3, r3, #24
 80061c6:	b09d      	sub	sp, #116	; 0x74
 80061c8:	4607      	mov	r7, r0
 80061ca:	460d      	mov	r5, r1
 80061cc:	4614      	mov	r4, r2
 80061ce:	d50e      	bpl.n	80061ee <_svfiprintf_r+0x32>
 80061d0:	690b      	ldr	r3, [r1, #16]
 80061d2:	b963      	cbnz	r3, 80061ee <_svfiprintf_r+0x32>
 80061d4:	2140      	movs	r1, #64	; 0x40
 80061d6:	f7ff ff0b 	bl	8005ff0 <_malloc_r>
 80061da:	6028      	str	r0, [r5, #0]
 80061dc:	6128      	str	r0, [r5, #16]
 80061de:	b920      	cbnz	r0, 80061ea <_svfiprintf_r+0x2e>
 80061e0:	230c      	movs	r3, #12
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	f04f 30ff 	mov.w	r0, #4294967295
 80061e8:	e0d0      	b.n	800638c <_svfiprintf_r+0x1d0>
 80061ea:	2340      	movs	r3, #64	; 0x40
 80061ec:	616b      	str	r3, [r5, #20]
 80061ee:	2300      	movs	r3, #0
 80061f0:	9309      	str	r3, [sp, #36]	; 0x24
 80061f2:	2320      	movs	r3, #32
 80061f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80061fc:	2330      	movs	r3, #48	; 0x30
 80061fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80063a4 <_svfiprintf_r+0x1e8>
 8006202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006206:	f04f 0901 	mov.w	r9, #1
 800620a:	4623      	mov	r3, r4
 800620c:	469a      	mov	sl, r3
 800620e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006212:	b10a      	cbz	r2, 8006218 <_svfiprintf_r+0x5c>
 8006214:	2a25      	cmp	r2, #37	; 0x25
 8006216:	d1f9      	bne.n	800620c <_svfiprintf_r+0x50>
 8006218:	ebba 0b04 	subs.w	fp, sl, r4
 800621c:	d00b      	beq.n	8006236 <_svfiprintf_r+0x7a>
 800621e:	465b      	mov	r3, fp
 8006220:	4622      	mov	r2, r4
 8006222:	4629      	mov	r1, r5
 8006224:	4638      	mov	r0, r7
 8006226:	f7ff ff6f 	bl	8006108 <__ssputs_r>
 800622a:	3001      	adds	r0, #1
 800622c:	f000 80a9 	beq.w	8006382 <_svfiprintf_r+0x1c6>
 8006230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006232:	445a      	add	r2, fp
 8006234:	9209      	str	r2, [sp, #36]	; 0x24
 8006236:	f89a 3000 	ldrb.w	r3, [sl]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 80a1 	beq.w	8006382 <_svfiprintf_r+0x1c6>
 8006240:	2300      	movs	r3, #0
 8006242:	f04f 32ff 	mov.w	r2, #4294967295
 8006246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800624a:	f10a 0a01 	add.w	sl, sl, #1
 800624e:	9304      	str	r3, [sp, #16]
 8006250:	9307      	str	r3, [sp, #28]
 8006252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006256:	931a      	str	r3, [sp, #104]	; 0x68
 8006258:	4654      	mov	r4, sl
 800625a:	2205      	movs	r2, #5
 800625c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006260:	4850      	ldr	r0, [pc, #320]	; (80063a4 <_svfiprintf_r+0x1e8>)
 8006262:	f7f9 ff8d 	bl	8000180 <memchr>
 8006266:	9a04      	ldr	r2, [sp, #16]
 8006268:	b9d8      	cbnz	r0, 80062a2 <_svfiprintf_r+0xe6>
 800626a:	06d0      	lsls	r0, r2, #27
 800626c:	bf44      	itt	mi
 800626e:	2320      	movmi	r3, #32
 8006270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006274:	0711      	lsls	r1, r2, #28
 8006276:	bf44      	itt	mi
 8006278:	232b      	movmi	r3, #43	; 0x2b
 800627a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800627e:	f89a 3000 	ldrb.w	r3, [sl]
 8006282:	2b2a      	cmp	r3, #42	; 0x2a
 8006284:	d015      	beq.n	80062b2 <_svfiprintf_r+0xf6>
 8006286:	9a07      	ldr	r2, [sp, #28]
 8006288:	4654      	mov	r4, sl
 800628a:	2000      	movs	r0, #0
 800628c:	f04f 0c0a 	mov.w	ip, #10
 8006290:	4621      	mov	r1, r4
 8006292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006296:	3b30      	subs	r3, #48	; 0x30
 8006298:	2b09      	cmp	r3, #9
 800629a:	d94d      	bls.n	8006338 <_svfiprintf_r+0x17c>
 800629c:	b1b0      	cbz	r0, 80062cc <_svfiprintf_r+0x110>
 800629e:	9207      	str	r2, [sp, #28]
 80062a0:	e014      	b.n	80062cc <_svfiprintf_r+0x110>
 80062a2:	eba0 0308 	sub.w	r3, r0, r8
 80062a6:	fa09 f303 	lsl.w	r3, r9, r3
 80062aa:	4313      	orrs	r3, r2
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	46a2      	mov	sl, r4
 80062b0:	e7d2      	b.n	8006258 <_svfiprintf_r+0x9c>
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	1d19      	adds	r1, r3, #4
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	9103      	str	r1, [sp, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	bfbb      	ittet	lt
 80062be:	425b      	neglt	r3, r3
 80062c0:	f042 0202 	orrlt.w	r2, r2, #2
 80062c4:	9307      	strge	r3, [sp, #28]
 80062c6:	9307      	strlt	r3, [sp, #28]
 80062c8:	bfb8      	it	lt
 80062ca:	9204      	strlt	r2, [sp, #16]
 80062cc:	7823      	ldrb	r3, [r4, #0]
 80062ce:	2b2e      	cmp	r3, #46	; 0x2e
 80062d0:	d10c      	bne.n	80062ec <_svfiprintf_r+0x130>
 80062d2:	7863      	ldrb	r3, [r4, #1]
 80062d4:	2b2a      	cmp	r3, #42	; 0x2a
 80062d6:	d134      	bne.n	8006342 <_svfiprintf_r+0x186>
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	1d1a      	adds	r2, r3, #4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	9203      	str	r2, [sp, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	bfb8      	it	lt
 80062e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80062e8:	3402      	adds	r4, #2
 80062ea:	9305      	str	r3, [sp, #20]
 80062ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80063b4 <_svfiprintf_r+0x1f8>
 80062f0:	7821      	ldrb	r1, [r4, #0]
 80062f2:	2203      	movs	r2, #3
 80062f4:	4650      	mov	r0, sl
 80062f6:	f7f9 ff43 	bl	8000180 <memchr>
 80062fa:	b138      	cbz	r0, 800630c <_svfiprintf_r+0x150>
 80062fc:	9b04      	ldr	r3, [sp, #16]
 80062fe:	eba0 000a 	sub.w	r0, r0, sl
 8006302:	2240      	movs	r2, #64	; 0x40
 8006304:	4082      	lsls	r2, r0
 8006306:	4313      	orrs	r3, r2
 8006308:	3401      	adds	r4, #1
 800630a:	9304      	str	r3, [sp, #16]
 800630c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006310:	4825      	ldr	r0, [pc, #148]	; (80063a8 <_svfiprintf_r+0x1ec>)
 8006312:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006316:	2206      	movs	r2, #6
 8006318:	f7f9 ff32 	bl	8000180 <memchr>
 800631c:	2800      	cmp	r0, #0
 800631e:	d038      	beq.n	8006392 <_svfiprintf_r+0x1d6>
 8006320:	4b22      	ldr	r3, [pc, #136]	; (80063ac <_svfiprintf_r+0x1f0>)
 8006322:	bb1b      	cbnz	r3, 800636c <_svfiprintf_r+0x1b0>
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	3307      	adds	r3, #7
 8006328:	f023 0307 	bic.w	r3, r3, #7
 800632c:	3308      	adds	r3, #8
 800632e:	9303      	str	r3, [sp, #12]
 8006330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006332:	4433      	add	r3, r6
 8006334:	9309      	str	r3, [sp, #36]	; 0x24
 8006336:	e768      	b.n	800620a <_svfiprintf_r+0x4e>
 8006338:	fb0c 3202 	mla	r2, ip, r2, r3
 800633c:	460c      	mov	r4, r1
 800633e:	2001      	movs	r0, #1
 8006340:	e7a6      	b.n	8006290 <_svfiprintf_r+0xd4>
 8006342:	2300      	movs	r3, #0
 8006344:	3401      	adds	r4, #1
 8006346:	9305      	str	r3, [sp, #20]
 8006348:	4619      	mov	r1, r3
 800634a:	f04f 0c0a 	mov.w	ip, #10
 800634e:	4620      	mov	r0, r4
 8006350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006354:	3a30      	subs	r2, #48	; 0x30
 8006356:	2a09      	cmp	r2, #9
 8006358:	d903      	bls.n	8006362 <_svfiprintf_r+0x1a6>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0c6      	beq.n	80062ec <_svfiprintf_r+0x130>
 800635e:	9105      	str	r1, [sp, #20]
 8006360:	e7c4      	b.n	80062ec <_svfiprintf_r+0x130>
 8006362:	fb0c 2101 	mla	r1, ip, r1, r2
 8006366:	4604      	mov	r4, r0
 8006368:	2301      	movs	r3, #1
 800636a:	e7f0      	b.n	800634e <_svfiprintf_r+0x192>
 800636c:	ab03      	add	r3, sp, #12
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	462a      	mov	r2, r5
 8006372:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <_svfiprintf_r+0x1f4>)
 8006374:	a904      	add	r1, sp, #16
 8006376:	4638      	mov	r0, r7
 8006378:	f3af 8000 	nop.w
 800637c:	1c42      	adds	r2, r0, #1
 800637e:	4606      	mov	r6, r0
 8006380:	d1d6      	bne.n	8006330 <_svfiprintf_r+0x174>
 8006382:	89ab      	ldrh	r3, [r5, #12]
 8006384:	065b      	lsls	r3, r3, #25
 8006386:	f53f af2d 	bmi.w	80061e4 <_svfiprintf_r+0x28>
 800638a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800638c:	b01d      	add	sp, #116	; 0x74
 800638e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006392:	ab03      	add	r3, sp, #12
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	462a      	mov	r2, r5
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <_svfiprintf_r+0x1f4>)
 800639a:	a904      	add	r1, sp, #16
 800639c:	4638      	mov	r0, r7
 800639e:	f000 f879 	bl	8006494 <_printf_i>
 80063a2:	e7eb      	b.n	800637c <_svfiprintf_r+0x1c0>
 80063a4:	08006900 	.word	0x08006900
 80063a8:	0800690a 	.word	0x0800690a
 80063ac:	00000000 	.word	0x00000000
 80063b0:	08006109 	.word	0x08006109
 80063b4:	08006906 	.word	0x08006906

080063b8 <_printf_common>:
 80063b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063bc:	4616      	mov	r6, r2
 80063be:	4699      	mov	r9, r3
 80063c0:	688a      	ldr	r2, [r1, #8]
 80063c2:	690b      	ldr	r3, [r1, #16]
 80063c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	bfb8      	it	lt
 80063cc:	4613      	movlt	r3, r2
 80063ce:	6033      	str	r3, [r6, #0]
 80063d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d4:	4607      	mov	r7, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	b10a      	cbz	r2, 80063de <_printf_common+0x26>
 80063da:	3301      	adds	r3, #1
 80063dc:	6033      	str	r3, [r6, #0]
 80063de:	6823      	ldr	r3, [r4, #0]
 80063e0:	0699      	lsls	r1, r3, #26
 80063e2:	bf42      	ittt	mi
 80063e4:	6833      	ldrmi	r3, [r6, #0]
 80063e6:	3302      	addmi	r3, #2
 80063e8:	6033      	strmi	r3, [r6, #0]
 80063ea:	6825      	ldr	r5, [r4, #0]
 80063ec:	f015 0506 	ands.w	r5, r5, #6
 80063f0:	d106      	bne.n	8006400 <_printf_common+0x48>
 80063f2:	f104 0a19 	add.w	sl, r4, #25
 80063f6:	68e3      	ldr	r3, [r4, #12]
 80063f8:	6832      	ldr	r2, [r6, #0]
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	42ab      	cmp	r3, r5
 80063fe:	dc26      	bgt.n	800644e <_printf_common+0x96>
 8006400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006404:	1e13      	subs	r3, r2, #0
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	bf18      	it	ne
 800640a:	2301      	movne	r3, #1
 800640c:	0692      	lsls	r2, r2, #26
 800640e:	d42b      	bmi.n	8006468 <_printf_common+0xb0>
 8006410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006414:	4649      	mov	r1, r9
 8006416:	4638      	mov	r0, r7
 8006418:	47c0      	blx	r8
 800641a:	3001      	adds	r0, #1
 800641c:	d01e      	beq.n	800645c <_printf_common+0xa4>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	6922      	ldr	r2, [r4, #16]
 8006422:	f003 0306 	and.w	r3, r3, #6
 8006426:	2b04      	cmp	r3, #4
 8006428:	bf02      	ittt	eq
 800642a:	68e5      	ldreq	r5, [r4, #12]
 800642c:	6833      	ldreq	r3, [r6, #0]
 800642e:	1aed      	subeq	r5, r5, r3
 8006430:	68a3      	ldr	r3, [r4, #8]
 8006432:	bf0c      	ite	eq
 8006434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006438:	2500      	movne	r5, #0
 800643a:	4293      	cmp	r3, r2
 800643c:	bfc4      	itt	gt
 800643e:	1a9b      	subgt	r3, r3, r2
 8006440:	18ed      	addgt	r5, r5, r3
 8006442:	2600      	movs	r6, #0
 8006444:	341a      	adds	r4, #26
 8006446:	42b5      	cmp	r5, r6
 8006448:	d11a      	bne.n	8006480 <_printf_common+0xc8>
 800644a:	2000      	movs	r0, #0
 800644c:	e008      	b.n	8006460 <_printf_common+0xa8>
 800644e:	2301      	movs	r3, #1
 8006450:	4652      	mov	r2, sl
 8006452:	4649      	mov	r1, r9
 8006454:	4638      	mov	r0, r7
 8006456:	47c0      	blx	r8
 8006458:	3001      	adds	r0, #1
 800645a:	d103      	bne.n	8006464 <_printf_common+0xac>
 800645c:	f04f 30ff 	mov.w	r0, #4294967295
 8006460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006464:	3501      	adds	r5, #1
 8006466:	e7c6      	b.n	80063f6 <_printf_common+0x3e>
 8006468:	18e1      	adds	r1, r4, r3
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	2030      	movs	r0, #48	; 0x30
 800646e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006472:	4422      	add	r2, r4
 8006474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800647c:	3302      	adds	r3, #2
 800647e:	e7c7      	b.n	8006410 <_printf_common+0x58>
 8006480:	2301      	movs	r3, #1
 8006482:	4622      	mov	r2, r4
 8006484:	4649      	mov	r1, r9
 8006486:	4638      	mov	r0, r7
 8006488:	47c0      	blx	r8
 800648a:	3001      	adds	r0, #1
 800648c:	d0e6      	beq.n	800645c <_printf_common+0xa4>
 800648e:	3601      	adds	r6, #1
 8006490:	e7d9      	b.n	8006446 <_printf_common+0x8e>
	...

08006494 <_printf_i>:
 8006494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006498:	7e0f      	ldrb	r7, [r1, #24]
 800649a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800649c:	2f78      	cmp	r7, #120	; 0x78
 800649e:	4691      	mov	r9, r2
 80064a0:	4680      	mov	r8, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	469a      	mov	sl, r3
 80064a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064aa:	d807      	bhi.n	80064bc <_printf_i+0x28>
 80064ac:	2f62      	cmp	r7, #98	; 0x62
 80064ae:	d80a      	bhi.n	80064c6 <_printf_i+0x32>
 80064b0:	2f00      	cmp	r7, #0
 80064b2:	f000 80d4 	beq.w	800665e <_printf_i+0x1ca>
 80064b6:	2f58      	cmp	r7, #88	; 0x58
 80064b8:	f000 80c0 	beq.w	800663c <_printf_i+0x1a8>
 80064bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064c4:	e03a      	b.n	800653c <_printf_i+0xa8>
 80064c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ca:	2b15      	cmp	r3, #21
 80064cc:	d8f6      	bhi.n	80064bc <_printf_i+0x28>
 80064ce:	a101      	add	r1, pc, #4	; (adr r1, 80064d4 <_printf_i+0x40>)
 80064d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064d4:	0800652d 	.word	0x0800652d
 80064d8:	08006541 	.word	0x08006541
 80064dc:	080064bd 	.word	0x080064bd
 80064e0:	080064bd 	.word	0x080064bd
 80064e4:	080064bd 	.word	0x080064bd
 80064e8:	080064bd 	.word	0x080064bd
 80064ec:	08006541 	.word	0x08006541
 80064f0:	080064bd 	.word	0x080064bd
 80064f4:	080064bd 	.word	0x080064bd
 80064f8:	080064bd 	.word	0x080064bd
 80064fc:	080064bd 	.word	0x080064bd
 8006500:	08006645 	.word	0x08006645
 8006504:	0800656d 	.word	0x0800656d
 8006508:	080065ff 	.word	0x080065ff
 800650c:	080064bd 	.word	0x080064bd
 8006510:	080064bd 	.word	0x080064bd
 8006514:	08006667 	.word	0x08006667
 8006518:	080064bd 	.word	0x080064bd
 800651c:	0800656d 	.word	0x0800656d
 8006520:	080064bd 	.word	0x080064bd
 8006524:	080064bd 	.word	0x080064bd
 8006528:	08006607 	.word	0x08006607
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	1d1a      	adds	r2, r3, #4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	602a      	str	r2, [r5, #0]
 8006534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800653c:	2301      	movs	r3, #1
 800653e:	e09f      	b.n	8006680 <_printf_i+0x1ec>
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	682b      	ldr	r3, [r5, #0]
 8006544:	0607      	lsls	r7, r0, #24
 8006546:	f103 0104 	add.w	r1, r3, #4
 800654a:	6029      	str	r1, [r5, #0]
 800654c:	d501      	bpl.n	8006552 <_printf_i+0xbe>
 800654e:	681e      	ldr	r6, [r3, #0]
 8006550:	e003      	b.n	800655a <_printf_i+0xc6>
 8006552:	0646      	lsls	r6, r0, #25
 8006554:	d5fb      	bpl.n	800654e <_printf_i+0xba>
 8006556:	f9b3 6000 	ldrsh.w	r6, [r3]
 800655a:	2e00      	cmp	r6, #0
 800655c:	da03      	bge.n	8006566 <_printf_i+0xd2>
 800655e:	232d      	movs	r3, #45	; 0x2d
 8006560:	4276      	negs	r6, r6
 8006562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006566:	485a      	ldr	r0, [pc, #360]	; (80066d0 <_printf_i+0x23c>)
 8006568:	230a      	movs	r3, #10
 800656a:	e012      	b.n	8006592 <_printf_i+0xfe>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	6820      	ldr	r0, [r4, #0]
 8006570:	1d19      	adds	r1, r3, #4
 8006572:	6029      	str	r1, [r5, #0]
 8006574:	0605      	lsls	r5, r0, #24
 8006576:	d501      	bpl.n	800657c <_printf_i+0xe8>
 8006578:	681e      	ldr	r6, [r3, #0]
 800657a:	e002      	b.n	8006582 <_printf_i+0xee>
 800657c:	0641      	lsls	r1, r0, #25
 800657e:	d5fb      	bpl.n	8006578 <_printf_i+0xe4>
 8006580:	881e      	ldrh	r6, [r3, #0]
 8006582:	4853      	ldr	r0, [pc, #332]	; (80066d0 <_printf_i+0x23c>)
 8006584:	2f6f      	cmp	r7, #111	; 0x6f
 8006586:	bf0c      	ite	eq
 8006588:	2308      	moveq	r3, #8
 800658a:	230a      	movne	r3, #10
 800658c:	2100      	movs	r1, #0
 800658e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006592:	6865      	ldr	r5, [r4, #4]
 8006594:	60a5      	str	r5, [r4, #8]
 8006596:	2d00      	cmp	r5, #0
 8006598:	bfa2      	ittt	ge
 800659a:	6821      	ldrge	r1, [r4, #0]
 800659c:	f021 0104 	bicge.w	r1, r1, #4
 80065a0:	6021      	strge	r1, [r4, #0]
 80065a2:	b90e      	cbnz	r6, 80065a8 <_printf_i+0x114>
 80065a4:	2d00      	cmp	r5, #0
 80065a6:	d04b      	beq.n	8006640 <_printf_i+0x1ac>
 80065a8:	4615      	mov	r5, r2
 80065aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80065ae:	fb03 6711 	mls	r7, r3, r1, r6
 80065b2:	5dc7      	ldrb	r7, [r0, r7]
 80065b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065b8:	4637      	mov	r7, r6
 80065ba:	42bb      	cmp	r3, r7
 80065bc:	460e      	mov	r6, r1
 80065be:	d9f4      	bls.n	80065aa <_printf_i+0x116>
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d10b      	bne.n	80065dc <_printf_i+0x148>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	07de      	lsls	r6, r3, #31
 80065c8:	d508      	bpl.n	80065dc <_printf_i+0x148>
 80065ca:	6923      	ldr	r3, [r4, #16]
 80065cc:	6861      	ldr	r1, [r4, #4]
 80065ce:	4299      	cmp	r1, r3
 80065d0:	bfde      	ittt	le
 80065d2:	2330      	movle	r3, #48	; 0x30
 80065d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065dc:	1b52      	subs	r2, r2, r5
 80065de:	6122      	str	r2, [r4, #16]
 80065e0:	f8cd a000 	str.w	sl, [sp]
 80065e4:	464b      	mov	r3, r9
 80065e6:	aa03      	add	r2, sp, #12
 80065e8:	4621      	mov	r1, r4
 80065ea:	4640      	mov	r0, r8
 80065ec:	f7ff fee4 	bl	80063b8 <_printf_common>
 80065f0:	3001      	adds	r0, #1
 80065f2:	d14a      	bne.n	800668a <_printf_i+0x1f6>
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295
 80065f8:	b004      	add	sp, #16
 80065fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	f043 0320 	orr.w	r3, r3, #32
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	4833      	ldr	r0, [pc, #204]	; (80066d4 <_printf_i+0x240>)
 8006608:	2778      	movs	r7, #120	; 0x78
 800660a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	6829      	ldr	r1, [r5, #0]
 8006612:	061f      	lsls	r7, r3, #24
 8006614:	f851 6b04 	ldr.w	r6, [r1], #4
 8006618:	d402      	bmi.n	8006620 <_printf_i+0x18c>
 800661a:	065f      	lsls	r7, r3, #25
 800661c:	bf48      	it	mi
 800661e:	b2b6      	uxthmi	r6, r6
 8006620:	07df      	lsls	r7, r3, #31
 8006622:	bf48      	it	mi
 8006624:	f043 0320 	orrmi.w	r3, r3, #32
 8006628:	6029      	str	r1, [r5, #0]
 800662a:	bf48      	it	mi
 800662c:	6023      	strmi	r3, [r4, #0]
 800662e:	b91e      	cbnz	r6, 8006638 <_printf_i+0x1a4>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	f023 0320 	bic.w	r3, r3, #32
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	2310      	movs	r3, #16
 800663a:	e7a7      	b.n	800658c <_printf_i+0xf8>
 800663c:	4824      	ldr	r0, [pc, #144]	; (80066d0 <_printf_i+0x23c>)
 800663e:	e7e4      	b.n	800660a <_printf_i+0x176>
 8006640:	4615      	mov	r5, r2
 8006642:	e7bd      	b.n	80065c0 <_printf_i+0x12c>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	6826      	ldr	r6, [r4, #0]
 8006648:	6961      	ldr	r1, [r4, #20]
 800664a:	1d18      	adds	r0, r3, #4
 800664c:	6028      	str	r0, [r5, #0]
 800664e:	0635      	lsls	r5, r6, #24
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	d501      	bpl.n	8006658 <_printf_i+0x1c4>
 8006654:	6019      	str	r1, [r3, #0]
 8006656:	e002      	b.n	800665e <_printf_i+0x1ca>
 8006658:	0670      	lsls	r0, r6, #25
 800665a:	d5fb      	bpl.n	8006654 <_printf_i+0x1c0>
 800665c:	8019      	strh	r1, [r3, #0]
 800665e:	2300      	movs	r3, #0
 8006660:	6123      	str	r3, [r4, #16]
 8006662:	4615      	mov	r5, r2
 8006664:	e7bc      	b.n	80065e0 <_printf_i+0x14c>
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	1d1a      	adds	r2, r3, #4
 800666a:	602a      	str	r2, [r5, #0]
 800666c:	681d      	ldr	r5, [r3, #0]
 800666e:	6862      	ldr	r2, [r4, #4]
 8006670:	2100      	movs	r1, #0
 8006672:	4628      	mov	r0, r5
 8006674:	f7f9 fd84 	bl	8000180 <memchr>
 8006678:	b108      	cbz	r0, 800667e <_printf_i+0x1ea>
 800667a:	1b40      	subs	r0, r0, r5
 800667c:	6060      	str	r0, [r4, #4]
 800667e:	6863      	ldr	r3, [r4, #4]
 8006680:	6123      	str	r3, [r4, #16]
 8006682:	2300      	movs	r3, #0
 8006684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006688:	e7aa      	b.n	80065e0 <_printf_i+0x14c>
 800668a:	6923      	ldr	r3, [r4, #16]
 800668c:	462a      	mov	r2, r5
 800668e:	4649      	mov	r1, r9
 8006690:	4640      	mov	r0, r8
 8006692:	47d0      	blx	sl
 8006694:	3001      	adds	r0, #1
 8006696:	d0ad      	beq.n	80065f4 <_printf_i+0x160>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	079b      	lsls	r3, r3, #30
 800669c:	d413      	bmi.n	80066c6 <_printf_i+0x232>
 800669e:	68e0      	ldr	r0, [r4, #12]
 80066a0:	9b03      	ldr	r3, [sp, #12]
 80066a2:	4298      	cmp	r0, r3
 80066a4:	bfb8      	it	lt
 80066a6:	4618      	movlt	r0, r3
 80066a8:	e7a6      	b.n	80065f8 <_printf_i+0x164>
 80066aa:	2301      	movs	r3, #1
 80066ac:	4632      	mov	r2, r6
 80066ae:	4649      	mov	r1, r9
 80066b0:	4640      	mov	r0, r8
 80066b2:	47d0      	blx	sl
 80066b4:	3001      	adds	r0, #1
 80066b6:	d09d      	beq.n	80065f4 <_printf_i+0x160>
 80066b8:	3501      	adds	r5, #1
 80066ba:	68e3      	ldr	r3, [r4, #12]
 80066bc:	9903      	ldr	r1, [sp, #12]
 80066be:	1a5b      	subs	r3, r3, r1
 80066c0:	42ab      	cmp	r3, r5
 80066c2:	dcf2      	bgt.n	80066aa <_printf_i+0x216>
 80066c4:	e7eb      	b.n	800669e <_printf_i+0x20a>
 80066c6:	2500      	movs	r5, #0
 80066c8:	f104 0619 	add.w	r6, r4, #25
 80066cc:	e7f5      	b.n	80066ba <_printf_i+0x226>
 80066ce:	bf00      	nop
 80066d0:	08006911 	.word	0x08006911
 80066d4:	08006922 	.word	0x08006922

080066d8 <memmove>:
 80066d8:	4288      	cmp	r0, r1
 80066da:	b510      	push	{r4, lr}
 80066dc:	eb01 0402 	add.w	r4, r1, r2
 80066e0:	d902      	bls.n	80066e8 <memmove+0x10>
 80066e2:	4284      	cmp	r4, r0
 80066e4:	4623      	mov	r3, r4
 80066e6:	d807      	bhi.n	80066f8 <memmove+0x20>
 80066e8:	1e43      	subs	r3, r0, #1
 80066ea:	42a1      	cmp	r1, r4
 80066ec:	d008      	beq.n	8006700 <memmove+0x28>
 80066ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066f6:	e7f8      	b.n	80066ea <memmove+0x12>
 80066f8:	4402      	add	r2, r0
 80066fa:	4601      	mov	r1, r0
 80066fc:	428a      	cmp	r2, r1
 80066fe:	d100      	bne.n	8006702 <memmove+0x2a>
 8006700:	bd10      	pop	{r4, pc}
 8006702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800670a:	e7f7      	b.n	80066fc <memmove+0x24>

0800670c <_sbrk_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4d06      	ldr	r5, [pc, #24]	; (8006728 <_sbrk_r+0x1c>)
 8006710:	2300      	movs	r3, #0
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	602b      	str	r3, [r5, #0]
 8006718:	f7fb fa5e 	bl	8001bd8 <_sbrk>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_sbrk_r+0x1a>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_sbrk_r+0x1a>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	200005d0 	.word	0x200005d0

0800672c <memcpy>:
 800672c:	440a      	add	r2, r1
 800672e:	4291      	cmp	r1, r2
 8006730:	f100 33ff 	add.w	r3, r0, #4294967295
 8006734:	d100      	bne.n	8006738 <memcpy+0xc>
 8006736:	4770      	bx	lr
 8006738:	b510      	push	{r4, lr}
 800673a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800673e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006742:	4291      	cmp	r1, r2
 8006744:	d1f9      	bne.n	800673a <memcpy+0xe>
 8006746:	bd10      	pop	{r4, pc}

08006748 <_realloc_r>:
 8006748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674c:	4680      	mov	r8, r0
 800674e:	4614      	mov	r4, r2
 8006750:	460e      	mov	r6, r1
 8006752:	b921      	cbnz	r1, 800675e <_realloc_r+0x16>
 8006754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006758:	4611      	mov	r1, r2
 800675a:	f7ff bc49 	b.w	8005ff0 <_malloc_r>
 800675e:	b92a      	cbnz	r2, 800676c <_realloc_r+0x24>
 8006760:	f7ff fbda 	bl	8005f18 <_free_r>
 8006764:	4625      	mov	r5, r4
 8006766:	4628      	mov	r0, r5
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676c:	f000 f81b 	bl	80067a6 <_malloc_usable_size_r>
 8006770:	4284      	cmp	r4, r0
 8006772:	4607      	mov	r7, r0
 8006774:	d802      	bhi.n	800677c <_realloc_r+0x34>
 8006776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800677a:	d812      	bhi.n	80067a2 <_realloc_r+0x5a>
 800677c:	4621      	mov	r1, r4
 800677e:	4640      	mov	r0, r8
 8006780:	f7ff fc36 	bl	8005ff0 <_malloc_r>
 8006784:	4605      	mov	r5, r0
 8006786:	2800      	cmp	r0, #0
 8006788:	d0ed      	beq.n	8006766 <_realloc_r+0x1e>
 800678a:	42bc      	cmp	r4, r7
 800678c:	4622      	mov	r2, r4
 800678e:	4631      	mov	r1, r6
 8006790:	bf28      	it	cs
 8006792:	463a      	movcs	r2, r7
 8006794:	f7ff ffca 	bl	800672c <memcpy>
 8006798:	4631      	mov	r1, r6
 800679a:	4640      	mov	r0, r8
 800679c:	f7ff fbbc 	bl	8005f18 <_free_r>
 80067a0:	e7e1      	b.n	8006766 <_realloc_r+0x1e>
 80067a2:	4635      	mov	r5, r6
 80067a4:	e7df      	b.n	8006766 <_realloc_r+0x1e>

080067a6 <_malloc_usable_size_r>:
 80067a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067aa:	1f18      	subs	r0, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bfbc      	itt	lt
 80067b0:	580b      	ldrlt	r3, [r1, r0]
 80067b2:	18c0      	addlt	r0, r0, r3
 80067b4:	4770      	bx	lr
	...

080067b8 <_init>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	bf00      	nop
 80067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067be:	bc08      	pop	{r3}
 80067c0:	469e      	mov	lr, r3
 80067c2:	4770      	bx	lr

080067c4 <_fini>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	bf00      	nop
 80067c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ca:	bc08      	pop	{r3}
 80067cc:	469e      	mov	lr, r3
 80067ce:	4770      	bx	lr
