
Server_Arm_Toolbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0fc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017fc  0800e23c  0800e23c  0001e23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fa38  0800fa38  0001fa38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fa40  0800fa40  0001fa40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fa44  0800fa44  0001fa44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000008  0800fa48  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000094  0800fad4  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000cc  0800fb09  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b0  200000e0  0800fb1a  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001a90  0800fb1a  00021a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800fb1a  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   00035fb9  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000071d3  00000000  00000000  00056a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003090  00000000  00000000  0005dc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002560  00000000  00000000  00060cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002ed8c  00000000  00000000  00063258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00037d3a  00000000  00000000  00091fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00107963  00000000  00000000  000c9d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000d5c4  00000000  00000000  001d1684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000086  00000000  00000000  001dec48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e224 	.word	0x0800e224

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0800e224 	.word	0x0800e224

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b970 	b.w	8000af4 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9e08      	ldr	r6, [sp, #32]
 8000832:	460d      	mov	r5, r1
 8000834:	4604      	mov	r4, r0
 8000836:	460f      	mov	r7, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d14a      	bne.n	80008d2 <__udivmoddi4+0xa6>
 800083c:	428a      	cmp	r2, r1
 800083e:	4694      	mov	ip, r2
 8000840:	d965      	bls.n	800090e <__udivmoddi4+0xe2>
 8000842:	fab2 f382 	clz	r3, r2
 8000846:	b143      	cbz	r3, 800085a <__udivmoddi4+0x2e>
 8000848:	fa02 fc03 	lsl.w	ip, r2, r3
 800084c:	f1c3 0220 	rsb	r2, r3, #32
 8000850:	409f      	lsls	r7, r3
 8000852:	fa20 f202 	lsr.w	r2, r0, r2
 8000856:	4317      	orrs	r7, r2
 8000858:	409c      	lsls	r4, r3
 800085a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800085e:	fa1f f58c 	uxth.w	r5, ip
 8000862:	fbb7 f1fe 	udiv	r1, r7, lr
 8000866:	0c22      	lsrs	r2, r4, #16
 8000868:	fb0e 7711 	mls	r7, lr, r1, r7
 800086c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000870:	fb01 f005 	mul.w	r0, r1, r5
 8000874:	4290      	cmp	r0, r2
 8000876:	d90a      	bls.n	800088e <__udivmoddi4+0x62>
 8000878:	eb1c 0202 	adds.w	r2, ip, r2
 800087c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000880:	f080 811c 	bcs.w	8000abc <__udivmoddi4+0x290>
 8000884:	4290      	cmp	r0, r2
 8000886:	f240 8119 	bls.w	8000abc <__udivmoddi4+0x290>
 800088a:	3902      	subs	r1, #2
 800088c:	4462      	add	r2, ip
 800088e:	1a12      	subs	r2, r2, r0
 8000890:	b2a4      	uxth	r4, r4
 8000892:	fbb2 f0fe 	udiv	r0, r2, lr
 8000896:	fb0e 2210 	mls	r2, lr, r0, r2
 800089a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800089e:	fb00 f505 	mul.w	r5, r0, r5
 80008a2:	42a5      	cmp	r5, r4
 80008a4:	d90a      	bls.n	80008bc <__udivmoddi4+0x90>
 80008a6:	eb1c 0404 	adds.w	r4, ip, r4
 80008aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ae:	f080 8107 	bcs.w	8000ac0 <__udivmoddi4+0x294>
 80008b2:	42a5      	cmp	r5, r4
 80008b4:	f240 8104 	bls.w	8000ac0 <__udivmoddi4+0x294>
 80008b8:	4464      	add	r4, ip
 80008ba:	3802      	subs	r0, #2
 80008bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008c0:	1b64      	subs	r4, r4, r5
 80008c2:	2100      	movs	r1, #0
 80008c4:	b11e      	cbz	r6, 80008ce <__udivmoddi4+0xa2>
 80008c6:	40dc      	lsrs	r4, r3
 80008c8:	2300      	movs	r3, #0
 80008ca:	e9c6 4300 	strd	r4, r3, [r6]
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0xbc>
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	f000 80ed 	beq.w	8000ab6 <__udivmoddi4+0x28a>
 80008dc:	2100      	movs	r1, #0
 80008de:	e9c6 0500 	strd	r0, r5, [r6]
 80008e2:	4608      	mov	r0, r1
 80008e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e8:	fab3 f183 	clz	r1, r3
 80008ec:	2900      	cmp	r1, #0
 80008ee:	d149      	bne.n	8000984 <__udivmoddi4+0x158>
 80008f0:	42ab      	cmp	r3, r5
 80008f2:	d302      	bcc.n	80008fa <__udivmoddi4+0xce>
 80008f4:	4282      	cmp	r2, r0
 80008f6:	f200 80f8 	bhi.w	8000aea <__udivmoddi4+0x2be>
 80008fa:	1a84      	subs	r4, r0, r2
 80008fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000900:	2001      	movs	r0, #1
 8000902:	4617      	mov	r7, r2
 8000904:	2e00      	cmp	r6, #0
 8000906:	d0e2      	beq.n	80008ce <__udivmoddi4+0xa2>
 8000908:	e9c6 4700 	strd	r4, r7, [r6]
 800090c:	e7df      	b.n	80008ce <__udivmoddi4+0xa2>
 800090e:	b902      	cbnz	r2, 8000912 <__udivmoddi4+0xe6>
 8000910:	deff      	udf	#255	; 0xff
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8090 	bne.w	8000a3c <__udivmoddi4+0x210>
 800091c:	1a8a      	subs	r2, r1, r2
 800091e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	2101      	movs	r1, #1
 8000928:	fbb2 f5f7 	udiv	r5, r2, r7
 800092c:	fb07 2015 	mls	r0, r7, r5, r2
 8000930:	0c22      	lsrs	r2, r4, #16
 8000932:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000936:	fb0e f005 	mul.w	r0, lr, r5
 800093a:	4290      	cmp	r0, r2
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x124>
 800093e:	eb1c 0202 	adds.w	r2, ip, r2
 8000942:	f105 38ff 	add.w	r8, r5, #4294967295
 8000946:	d202      	bcs.n	800094e <__udivmoddi4+0x122>
 8000948:	4290      	cmp	r0, r2
 800094a:	f200 80cb 	bhi.w	8000ae4 <__udivmoddi4+0x2b8>
 800094e:	4645      	mov	r5, r8
 8000950:	1a12      	subs	r2, r2, r0
 8000952:	b2a4      	uxth	r4, r4
 8000954:	fbb2 f0f7 	udiv	r0, r2, r7
 8000958:	fb07 2210 	mls	r2, r7, r0, r2
 800095c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000960:	fb0e fe00 	mul.w	lr, lr, r0
 8000964:	45a6      	cmp	lr, r4
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x14e>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000970:	d202      	bcs.n	8000978 <__udivmoddi4+0x14c>
 8000972:	45a6      	cmp	lr, r4
 8000974:	f200 80bb 	bhi.w	8000aee <__udivmoddi4+0x2c2>
 8000978:	4610      	mov	r0, r2
 800097a:	eba4 040e 	sub.w	r4, r4, lr
 800097e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000982:	e79f      	b.n	80008c4 <__udivmoddi4+0x98>
 8000984:	f1c1 0720 	rsb	r7, r1, #32
 8000988:	408b      	lsls	r3, r1
 800098a:	fa22 fc07 	lsr.w	ip, r2, r7
 800098e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000992:	fa05 f401 	lsl.w	r4, r5, r1
 8000996:	fa20 f307 	lsr.w	r3, r0, r7
 800099a:	40fd      	lsrs	r5, r7
 800099c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009a0:	4323      	orrs	r3, r4
 80009a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009a6:	fa1f fe8c 	uxth.w	lr, ip
 80009aa:	fb09 5518 	mls	r5, r9, r8, r5
 80009ae:	0c1c      	lsrs	r4, r3, #16
 80009b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009b4:	fb08 f50e 	mul.w	r5, r8, lr
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	fa02 f201 	lsl.w	r2, r2, r1
 80009be:	fa00 f001 	lsl.w	r0, r0, r1
 80009c2:	d90b      	bls.n	80009dc <__udivmoddi4+0x1b0>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009cc:	f080 8088 	bcs.w	8000ae0 <__udivmoddi4+0x2b4>
 80009d0:	42a5      	cmp	r5, r4
 80009d2:	f240 8085 	bls.w	8000ae0 <__udivmoddi4+0x2b4>
 80009d6:	f1a8 0802 	sub.w	r8, r8, #2
 80009da:	4464      	add	r4, ip
 80009dc:	1b64      	subs	r4, r4, r5
 80009de:	b29d      	uxth	r5, r3
 80009e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009e4:	fb09 4413 	mls	r4, r9, r3, r4
 80009e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80009f0:	45a6      	cmp	lr, r4
 80009f2:	d908      	bls.n	8000a06 <__udivmoddi4+0x1da>
 80009f4:	eb1c 0404 	adds.w	r4, ip, r4
 80009f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80009fc:	d26c      	bcs.n	8000ad8 <__udivmoddi4+0x2ac>
 80009fe:	45a6      	cmp	lr, r4
 8000a00:	d96a      	bls.n	8000ad8 <__udivmoddi4+0x2ac>
 8000a02:	3b02      	subs	r3, #2
 8000a04:	4464      	add	r4, ip
 8000a06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a0e:	eba4 040e 	sub.w	r4, r4, lr
 8000a12:	42ac      	cmp	r4, r5
 8000a14:	46c8      	mov	r8, r9
 8000a16:	46ae      	mov	lr, r5
 8000a18:	d356      	bcc.n	8000ac8 <__udivmoddi4+0x29c>
 8000a1a:	d053      	beq.n	8000ac4 <__udivmoddi4+0x298>
 8000a1c:	b156      	cbz	r6, 8000a34 <__udivmoddi4+0x208>
 8000a1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a22:	eb64 040e 	sbc.w	r4, r4, lr
 8000a26:	fa04 f707 	lsl.w	r7, r4, r7
 8000a2a:	40ca      	lsrs	r2, r1
 8000a2c:	40cc      	lsrs	r4, r1
 8000a2e:	4317      	orrs	r7, r2
 8000a30:	e9c6 7400 	strd	r7, r4, [r6]
 8000a34:	4618      	mov	r0, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3c:	f1c3 0120 	rsb	r1, r3, #32
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	fa20 f201 	lsr.w	r2, r0, r1
 8000a48:	fa25 f101 	lsr.w	r1, r5, r1
 8000a4c:	409d      	lsls	r5, r3
 8000a4e:	432a      	orrs	r2, r5
 8000a50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a60:	0c11      	lsrs	r1, r2, #16
 8000a62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a66:	fb00 f50e 	mul.w	r5, r0, lr
 8000a6a:	428d      	cmp	r5, r1
 8000a6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x258>
 8000a72:	eb1c 0101 	adds.w	r1, ip, r1
 8000a76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a7a:	d22f      	bcs.n	8000adc <__udivmoddi4+0x2b0>
 8000a7c:	428d      	cmp	r5, r1
 8000a7e:	d92d      	bls.n	8000adc <__udivmoddi4+0x2b0>
 8000a80:	3802      	subs	r0, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1b49      	subs	r1, r1, r5
 8000a86:	b292      	uxth	r2, r2
 8000a88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a94:	fb05 f10e 	mul.w	r1, r5, lr
 8000a98:	4291      	cmp	r1, r2
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x282>
 8000a9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aa4:	d216      	bcs.n	8000ad4 <__udivmoddi4+0x2a8>
 8000aa6:	4291      	cmp	r1, r2
 8000aa8:	d914      	bls.n	8000ad4 <__udivmoddi4+0x2a8>
 8000aaa:	3d02      	subs	r5, #2
 8000aac:	4462      	add	r2, ip
 8000aae:	1a52      	subs	r2, r2, r1
 8000ab0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ab4:	e738      	b.n	8000928 <__udivmoddi4+0xfc>
 8000ab6:	4631      	mov	r1, r6
 8000ab8:	4630      	mov	r0, r6
 8000aba:	e708      	b.n	80008ce <__udivmoddi4+0xa2>
 8000abc:	4639      	mov	r1, r7
 8000abe:	e6e6      	b.n	800088e <__udivmoddi4+0x62>
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	e6fb      	b.n	80008bc <__udivmoddi4+0x90>
 8000ac4:	4548      	cmp	r0, r9
 8000ac6:	d2a9      	bcs.n	8000a1c <__udivmoddi4+0x1f0>
 8000ac8:	ebb9 0802 	subs.w	r8, r9, r2
 8000acc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	e7a3      	b.n	8000a1c <__udivmoddi4+0x1f0>
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	e7ea      	b.n	8000aae <__udivmoddi4+0x282>
 8000ad8:	462b      	mov	r3, r5
 8000ada:	e794      	b.n	8000a06 <__udivmoddi4+0x1da>
 8000adc:	4640      	mov	r0, r8
 8000ade:	e7d1      	b.n	8000a84 <__udivmoddi4+0x258>
 8000ae0:	46d0      	mov	r8, sl
 8000ae2:	e77b      	b.n	80009dc <__udivmoddi4+0x1b0>
 8000ae4:	3d02      	subs	r5, #2
 8000ae6:	4462      	add	r2, ip
 8000ae8:	e732      	b.n	8000950 <__udivmoddi4+0x124>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e70a      	b.n	8000904 <__udivmoddi4+0xd8>
 8000aee:	4464      	add	r4, ip
 8000af0:	3802      	subs	r0, #2
 8000af2:	e742      	b.n	800097a <__udivmoddi4+0x14e>

08000af4 <__aeabi_idiv0>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b06:	4905      	ldr	r1, [pc, #20]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	58000800 	.word	0x58000800

08000b20 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b44:	68fb      	ldr	r3, [r7, #12]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b72:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b8e:	f002 fa9b 	bl	80030c8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b92:	f002 fa9f 	bl	80030d4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b96:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b9a:	f7ff ffad 	bl	8000af8 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000b9e:	f009 fd69 	bl	800a674 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000ba2:	f000 f821 	bl	8000be8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000ba6:	f000 f8c1 	bl	8000d2c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000baa:	bf00      	nop
}
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <APPD_EnableCPU2+0x34>)
 8000bb8:	1d3c      	adds	r4, r7, #4
 8000bba:	461d      	mov	r5, r3
 8000bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc4:	c403      	stmia	r4!, {r0, r1}
 8000bc6:	8022      	strh	r2, [r4, #0]
 8000bc8:	3402      	adds	r4, #2
 8000bca:	0c13      	lsrs	r3, r2, #16
 8000bcc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bce:	f009 fc65 	bl	800a49c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f008 fef6 	bl	80099c6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bda:	bf00      	nop
}
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bdb0      	pop	{r4, r5, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	0800e23c 	.word	0x0800e23c

08000be8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	77fb      	strb	r3, [r7, #31]
 8000c0c:	e036      	b.n	8000c7c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c0e:	7ffb      	ldrb	r3, [r7, #31]
 8000c10:	4a43      	ldr	r2, [pc, #268]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	4413      	add	r3, r2
 8000c16:	799b      	ldrb	r3, [r3, #6]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d02c      	beq.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c1c:	7ffb      	ldrb	r3, [r7, #31]
 8000c1e:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c24:	4a3f      	ldr	r2, [pc, #252]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d01b      	beq.n	8000c62 <APPD_SetCPU2GpioConfig+0x7a>
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d821      	bhi.n	8000c74 <APPD_SetCPU2GpioConfig+0x8c>
 8000c30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c34:	d003      	beq.n	8000c3e <APPD_SetCPU2GpioConfig+0x56>
 8000c36:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d009      	beq.n	8000c50 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c3c:	e01a      	b.n	8000c74 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4413      	add	r3, r2
 8000c46:	889a      	ldrh	r2, [r3, #4]
 8000c48:	8bbb      	ldrh	r3, [r7, #28]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	83bb      	strh	r3, [r7, #28]
          break;
 8000c4e:	e012      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c50:	7ffb      	ldrb	r3, [r7, #31]
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	4413      	add	r3, r2
 8000c58:	889a      	ldrh	r2, [r3, #4]
 8000c5a:	8b7b      	ldrh	r3, [r7, #26]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	837b      	strh	r3, [r7, #26]
          break;
 8000c60:	e009      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c62:	7ffb      	ldrb	r3, [r7, #31]
 8000c64:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	4413      	add	r3, r2
 8000c6a:	889a      	ldrh	r2, [r3, #4]
 8000c6c:	8b3b      	ldrh	r3, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	833b      	strh	r3, [r7, #24]
          break;
 8000c72:	e000      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000c74:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c76:	7ffb      	ldrb	r3, [r7, #31]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	77fb      	strb	r3, [r7, #31]
 8000c7c:	7ffb      	ldrb	r3, [r7, #31]
 8000c7e:	2b25      	cmp	r3, #37	; 0x25
 8000c80:	d9c5      	bls.n	8000c0e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c8e:	8bbb      	ldrh	r3, [r7, #28]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d014      	beq.n	8000cbe <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000c94:	8bbb      	ldrh	r3, [r7, #28]
 8000c96:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff41 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff ff57 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f002 fee4 	bl	8003a78 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000cb0:	8bbb      	ldrh	r3, [r7, #28]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f003 f84d 	bl	8003d58 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cbe:	8b7b      	ldrh	r3, [r7, #26]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d012      	beq.n	8000cea <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cc4:	8b7b      	ldrh	r3, [r7, #26]
 8000cc6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f7ff ff29 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f7ff ff3f 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4813      	ldr	r0, [pc, #76]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000cda:	f002 fecd 	bl	8003a78 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cde:	8b7b      	ldrh	r3, [r7, #26]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4810      	ldr	r0, [pc, #64]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000ce6:	f003 f837 	bl	8003d58 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cea:	8b3b      	ldrh	r3, [r7, #24]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000cf0:	8b3b      	ldrh	r3, [r7, #24]
 8000cf2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf4:	2004      	movs	r0, #4
 8000cf6:	f7ff ff13 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000cfa:	2004      	movs	r0, #4
 8000cfc:	f7ff ff29 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d06:	f002 feb7 	bl	8003a78 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d0a:	8b3b      	ldrh	r3, [r7, #24]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d12:	f003 f821 	bl	8003d58 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
}
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	0800f6c4 	.word	0x0800f6c4
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000400 	.word	0x48000400

08000d2c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d30:	bf00      	nop
}
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d3e:	f001 fc6b 	bl	8002618 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d42:	bf00      	nop
}
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d54:	897a      	ldrh	r2, [r7, #10]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68f9      	ldr	r1, [r7, #12]
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f001 f9a6 	bl	80020ac <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d60:	bf00      	nop
}
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d76:	f023 0207 	bic.w	r2, r3, #7
 8000d7a:	4905      	ldr	r1, [pc, #20]	; (8000d90 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	58000400 	.word	0x58000400

08000d94 <LL_EXTI_EnableIT_32_63>:
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000da2:	4905      	ldr	r1, [pc, #20]	; (8000db8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58000800 	.word	0x58000800

08000dbc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dd6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000de2:	4313      	orrs	r3, r2
 8000de4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	cafecafe 	.word	0xcafecafe

08000df8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <LL_DBGMCU_GetDeviceID+0x18>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e0042000 	.word	0xe0042000

08000e3c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <LL_DBGMCU_GetRevisionID+0x18>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0c1b      	lsrs	r3, r3, #16
 8000e46:	b29b      	uxth	r3, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e0042000 	.word	0xe0042000

08000e58 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	22ff      	movs	r2, #255	; 0xff
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	22ca      	movs	r2, #202	; 0xca
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2253      	movs	r2, #83	; 0x53
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f023 0207 	bic.w	r2, r3, #7
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <MX_APPE_Config+0x18>)
 8000ebe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ec2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000ec4:	f000 f826 	bl	8000f14 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000ec8:	f000 f82b 	bl	8000f22 <Config_HSE>

  return;
 8000ecc:	bf00      	nop
}
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	58004000 	.word	0x58004000

08000ed4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000ed8:	f000 f837 	bl	8000f4a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000edc:	f000 f850 	bl	8000f80 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ee0:	4904      	ldr	r1, [pc, #16]	; (8000ef4 <MX_APPE_Init+0x20>)
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fef0 	bl	8001cc8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000ee8:	f7ff fe4f 	bl	8000b8a <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000eec:	f000 f856 	bl	8000f9c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000ef0:	bf00      	nop
}
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200001dc 	.word	0x200001dc

08000ef8 <Init_Smps>:

void Init_Smps(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000efc:	bf00      	nop
}
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <Init_Exti>:

void Init_Exti(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000f0a:	2050      	movs	r0, #80	; 0x50
 8000f0c:	f7ff ff42 	bl	8000d94 <LL_EXTI_EnableIT_32_63>

  return;
 8000f10:	bf00      	nop
}
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000f18:	bf00      	nop
}
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f009 fc21 	bl	800a770 <OTP_Read>
 8000f2e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	799b      	ldrb	r3, [r3, #6]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff3e 	bl	8000dbc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
}
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <System_Init>:

static void System_Init(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  Init_Smps();
 8000f4e:	f7ff ffd3 	bl	8000ef8 <Init_Smps>

  Init_Exti();
 8000f52:	f7ff ffd8 	bl	8000f06 <Init_Exti>

  Init_Rtc();
 8000f56:	f000 f803 	bl	8000f60 <Init_Rtc>

  return;
 8000f5a:	bf00      	nop
}
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <Init_Rtc+0x1c>)
 8000f66:	f7ff ff84 	bl	8000e72 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <Init_Rtc+0x1c>)
 8000f6e:	f7ff ff90 	bl	8000e92 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000f72:	4802      	ldr	r0, [pc, #8]	; (8000f7c <Init_Rtc+0x1c>)
 8000f74:	f7ff ff70 	bl	8000e58 <LL_RTC_EnableWriteProtection>

  return;
 8000f78:	bf00      	nop
}
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40002800 	.word	0x40002800

08000f80 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000f84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f88:	f7ff ff36 	bl	8000df8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000f8c:	f00b fec8 	bl	800cd20 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000f90:	2004      	movs	r0, #4
 8000f92:	f7ff fee9 	bl	8000d68 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000f96:	bf00      	nop
}
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8000fa2:	f009 f8c5 	bl	800a130 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <appe_Tl_Init+0x50>)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2020      	movs	r0, #32
 8000fac:	f00b fff6 	bl	800cf9c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <appe_Tl_Init+0x54>)
 8000fb2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <appe_Tl_Init+0x58>)
 8000fb6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <appe_Tl_Init+0x5c>)
 8000fbe:	f008 ff79 	bl	8009eb4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <appe_Tl_Init+0x60>)
 8000fc4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <appe_Tl_Init+0x64>)
 8000fc8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <appe_Tl_Init+0x68>)
 8000fcc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000fce:	f240 533c 	movw	r3, #1340	; 0x53c
 8000fd2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f009 f9eb 	bl	800a3b4 <TL_MM_Init>

  TL_Enable();
 8000fde:	f009 f8a1 	bl	800a124 <TL_Enable>

  return;
 8000fe2:	bf00      	nop
}
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	08009eed 	.word	0x08009eed
 8000ff0:	20030734 	.word	0x20030734
 8000ff4:	08001009 	.word	0x08001009
 8000ff8:	08001021 	.word	0x08001021
 8000ffc:	2003094c 	.word	0x2003094c
 8001000:	20030840 	.word	0x20030840
 8001004:	200301f8 	.word	0x200301f8

08001008 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001012:	bf00      	nop
}
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	330b      	adds	r3, #11
 800102e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800103a:	2b07      	cmp	r3, #7
 800103c:	f200 80d0 	bhi.w	80011e0 <APPE_SysUserEvtRx+0x1c0>
 8001040:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <APPE_SysUserEvtRx+0x28>)
 8001042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001046:	bf00      	nop
 8001048:	08001069 	.word	0x08001069
 800104c:	080010fb 	.word	0x080010fb
 8001050:	0800111d 	.word	0x0800111d
 8001054:	080011e1 	.word	0x080011e1
 8001058:	08001161 	.word	0x08001161
 800105c:	08001185 	.word	0x08001185
 8001060:	080011a1 	.word	0x080011a1
 8001064:	080011c5 	.word	0x080011c5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4618      	mov	r0, r3
 800106e:	f008 fcd7 	bl	8009a20 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001072:	485e      	ldr	r0, [pc, #376]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 8001074:	f009 fa9e 	bl	800a5b4 <DbgTraceGetFileName>
 8001078:	4601      	mov	r1, r0
 800107a:	f240 136b 	movw	r3, #363	; 0x16b
 800107e:	4a5c      	ldr	r2, [pc, #368]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 8001080:	485c      	ldr	r0, [pc, #368]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 8001082:	f00c f98f 	bl	800d3a4 <iprintf>
 8001086:	7b3b      	ldrb	r3, [r7, #12]
 8001088:	4619      	mov	r1, r3
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	461a      	mov	r2, r3
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	4859      	ldr	r0, [pc, #356]	; (80011f8 <APPE_SysUserEvtRx+0x1d8>)
 8001092:	f00c f987 	bl	800d3a4 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001096:	4855      	ldr	r0, [pc, #340]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 8001098:	f009 fa8c 	bl	800a5b4 <DbgTraceGetFileName>
 800109c:	4601      	mov	r1, r0
 800109e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80010a2:	4a53      	ldr	r2, [pc, #332]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 80010a4:	4853      	ldr	r0, [pc, #332]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 80010a6:	f00c f97d 	bl	800d3a4 <iprintf>
 80010aa:	7c3b      	ldrb	r3, [r7, #16]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4853      	ldr	r0, [pc, #332]	; (80011fc <APPE_SysUserEvtRx+0x1dc>)
 80010b0:	f00c f978 	bl	800d3a4 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80010b4:	484d      	ldr	r0, [pc, #308]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 80010b6:	f009 fa7d 	bl	800a5b4 <DbgTraceGetFileName>
 80010ba:	4601      	mov	r1, r0
 80010bc:	f240 136d 	movw	r3, #365	; 0x16d
 80010c0:	4a4b      	ldr	r2, [pc, #300]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 80010c2:	484c      	ldr	r0, [pc, #304]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 80010c4:	f00c f96e 	bl	800d3a4 <iprintf>
 80010c8:	7dbb      	ldrb	r3, [r7, #22]
 80010ca:	4619      	mov	r1, r3
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	461a      	mov	r2, r3
 80010d0:	7e3b      	ldrb	r3, [r7, #24]
 80010d2:	484b      	ldr	r0, [pc, #300]	; (8001200 <APPE_SysUserEvtRx+0x1e0>)
 80010d4:	f00c f966 	bl	800d3a4 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80010d8:	4844      	ldr	r0, [pc, #272]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 80010da:	f009 fa6b 	bl	800a5b4 <DbgTraceGetFileName>
 80010de:	4601      	mov	r1, r0
 80010e0:	f240 136f 	movw	r3, #367	; 0x16f
 80010e4:	4a42      	ldr	r2, [pc, #264]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 80010e6:	4843      	ldr	r0, [pc, #268]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 80010e8:	f00c f95c 	bl	800d3a4 <iprintf>
 80010ec:	4845      	ldr	r0, [pc, #276]	; (8001204 <APPE_SysUserEvtRx+0x1e4>)
 80010ee:	f00c f959 	bl	800d3a4 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f8e0 	bl	80012b8 <APPE_SysEvtReadyProcessing>
    break;
 80010f8:	e073      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80010fa:	483c      	ldr	r0, [pc, #240]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 80010fc:	f009 fa5a 	bl	800a5b4 <DbgTraceGetFileName>
 8001100:	4601      	mov	r1, r0
 8001102:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8001106:	4a3a      	ldr	r2, [pc, #232]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 8001108:	483a      	ldr	r0, [pc, #232]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 800110a:	f00c f94b 	bl	800d3a4 <iprintf>
 800110e:	483e      	ldr	r0, [pc, #248]	; (8001208 <APPE_SysUserEvtRx+0x1e8>)
 8001110:	f00c f948 	bl	800d3a4 <iprintf>
    APPE_SysEvtError(pPayload);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f885 	bl	8001224 <APPE_SysEvtError>
    break;
 800111a:	e062      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800111c:	4833      	ldr	r0, [pc, #204]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 800111e:	f009 fa49 	bl	800a5b4 <DbgTraceGetFileName>
 8001122:	4601      	mov	r1, r0
 8001124:	f240 1379 	movw	r3, #377	; 0x179
 8001128:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 800112a:	4832      	ldr	r0, [pc, #200]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 800112c:	f00c f93a 	bl	800d3a4 <iprintf>
 8001130:	4836      	ldr	r0, [pc, #216]	; (800120c <APPE_SysUserEvtRx+0x1ec>)
 8001132:	f00c f9a5 	bl	800d480 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001136:	482d      	ldr	r0, [pc, #180]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 8001138:	f009 fa3c 	bl	800a5b4 <DbgTraceGetFileName>
 800113c:	4601      	mov	r1, r0
 800113e:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 8001142:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 8001144:	482b      	ldr	r0, [pc, #172]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 8001146:	f00c f92d 	bl	800d3a4 <iprintf>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3302      	adds	r3, #2
 800114e:	6819      	ldr	r1, [r3, #0]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	3302      	adds	r3, #2
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	461a      	mov	r2, r3
 8001158:	482d      	ldr	r0, [pc, #180]	; (8001210 <APPE_SysUserEvtRx+0x1f0>)
 800115a:	f00c f923 	bl	800d3a4 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800115e:	e040      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001160:	4822      	ldr	r0, [pc, #136]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 8001162:	f009 fa27 	bl	800a5b4 <DbgTraceGetFileName>
 8001166:	4601      	mov	r1, r0
 8001168:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800116c:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 800116e:	4821      	ldr	r0, [pc, #132]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 8001170:	f00c f918 	bl	800d3a4 <iprintf>
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	3302      	adds	r3, #2
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	4825      	ldr	r0, [pc, #148]	; (8001214 <APPE_SysUserEvtRx+0x1f4>)
 800117e:	f00c f911 	bl	800d3a4 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001182:	e02e      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001184:	4819      	ldr	r0, [pc, #100]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 8001186:	f009 fa15 	bl	800a5b4 <DbgTraceGetFileName>
 800118a:	4601      	mov	r1, r0
 800118c:	f240 1385 	movw	r3, #389	; 0x185
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 8001194:	f00c f906 	bl	800d3a4 <iprintf>
 8001198:	481f      	ldr	r0, [pc, #124]	; (8001218 <APPE_SysUserEvtRx+0x1f8>)
 800119a:	f00c f903 	bl	800d3a4 <iprintf>
    break;
 800119e:	e020      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80011a0:	4812      	ldr	r0, [pc, #72]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 80011a2:	f009 fa07 	bl	800a5b4 <DbgTraceGetFileName>
 80011a6:	4601      	mov	r1, r0
 80011a8:	f240 1389 	movw	r3, #393	; 0x189
 80011ac:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 80011b0:	f00c f8f8 	bl	800d3a4 <iprintf>
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3302      	adds	r3, #2
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4817      	ldr	r0, [pc, #92]	; (800121c <APPE_SysUserEvtRx+0x1fc>)
 80011be:	f00c f8f1 	bl	800d3a4 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80011c2:	e00e      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 80011c6:	f009 f9f5 	bl	800a5b4 <DbgTraceGetFileName>
 80011ca:	4601      	mov	r1, r0
 80011cc:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 80011d2:	4808      	ldr	r0, [pc, #32]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 80011d4:	f00c f8e6 	bl	800d3a4 <iprintf>
 80011d8:	4811      	ldr	r0, [pc, #68]	; (8001220 <APPE_SysUserEvtRx+0x200>)
 80011da:	f00c f8e3 	bl	800d3a4 <iprintf>
    break;
 80011de:	e000      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80011e0:	bf00      	nop
  }

  return;
 80011e2:	bf00      	nop
}
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800e258 	.word	0x0800e258
 80011f0:	0800f7f4 	.word	0x0800f7f4
 80011f4:	0800e270 	.word	0x0800e270
 80011f8:	0800e284 	.word	0x0800e284
 80011fc:	0800e2a8 	.word	0x0800e2a8
 8001200:	0800e2c4 	.word	0x0800e2c4
 8001204:	0800e2dc 	.word	0x0800e2dc
 8001208:	0800e2fc 	.word	0x0800e2fc
 800120c:	0800e320 	.word	0x0800e320
 8001210:	0800e370 	.word	0x0800e370
 8001214:	0800e398 	.word	0x0800e398
 8001218:	0800e3d4 	.word	0x0800e3d4
 800121c:	0800e3f8 	.word	0x0800e3f8
 8001220:	0800e434 	.word	0x0800e434

08001224 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	330b      	adds	r3, #11
 8001232:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3302      	adds	r3, #2
 8001238:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800123a:	4819      	ldr	r0, [pc, #100]	; (80012a0 <APPE_SysEvtError+0x7c>)
 800123c:	f009 f9ba 	bl	800a5b4 <DbgTraceGetFileName>
 8001240:	4601      	mov	r1, r0
 8001242:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
 8001246:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <APPE_SysEvtError+0x80>)
 8001248:	4817      	ldr	r0, [pc, #92]	; (80012a8 <APPE_SysEvtError+0x84>)
 800124a:	f00c f8ab 	bl	800d3a4 <iprintf>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	4815      	ldr	r0, [pc, #84]	; (80012ac <APPE_SysEvtError+0x88>)
 8001256:	f00c f8a5 	bl	800d3a4 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10d      	bne.n	800127e <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001262:	480f      	ldr	r0, [pc, #60]	; (80012a0 <APPE_SysEvtError+0x7c>)
 8001264:	f009 f9a6 	bl	800a5b4 <DbgTraceGetFileName>
 8001268:	4601      	mov	r1, r0
 800126a:	f240 13ab 	movw	r3, #427	; 0x1ab
 800126e:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <APPE_SysEvtError+0x80>)
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <APPE_SysEvtError+0x84>)
 8001272:	f00c f897 	bl	800d3a4 <iprintf>
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <APPE_SysEvtError+0x8c>)
 8001278:	f00c f902 	bl	800d480 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800127c:	e00d      	b.n	800129a <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <APPE_SysEvtError+0x7c>)
 8001280:	f009 f998 	bl	800a5b4 <DbgTraceGetFileName>
 8001284:	4601      	mov	r1, r0
 8001286:	f240 13af 	movw	r3, #431	; 0x1af
 800128a:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <APPE_SysEvtError+0x80>)
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <APPE_SysEvtError+0x84>)
 800128e:	f00c f889 	bl	800d3a4 <iprintf>
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <APPE_SysEvtError+0x90>)
 8001294:	f00c f8f4 	bl	800d480 <puts>
  return;
 8001298:	bf00      	nop
}
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800e258 	.word	0x0800e258
 80012a4:	0800f808 	.word	0x0800f808
 80012a8:	0800e270 	.word	0x0800e270
 80012ac:	0800e458 	.word	0x0800e458
 80012b0:	0800e488 	.word	0x0800e488
 80012b4:	0800e4c4 	.word	0x0800e4c4

080012b8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	330b      	adds	r3, #11
 80012dc:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3302      	adds	r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d146      	bne.n	800137a <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80012ec:	4836      	ldr	r0, [pc, #216]	; (80013c8 <APPE_SysEvtReadyProcessing+0x110>)
 80012ee:	f009 f961 	bl	800a5b4 <DbgTraceGetFileName>
 80012f2:	4601      	mov	r1, r0
 80012f4:	f240 13c5 	movw	r3, #453	; 0x1c5
 80012f8:	4a34      	ldr	r2, [pc, #208]	; (80013cc <APPE_SysEvtReadyProcessing+0x114>)
 80012fa:	4835      	ldr	r0, [pc, #212]	; (80013d0 <APPE_SysEvtReadyProcessing+0x118>)
 80012fc:	f00c f852 	bl	800d3a4 <iprintf>
 8001300:	4834      	ldr	r0, [pc, #208]	; (80013d4 <APPE_SysEvtReadyProcessing+0x11c>)
 8001302:	f00c f8bd 	bl	800d480 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001306:	f7ff fc53 	bl	8000bb0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800130a:	230f      	movs	r3, #15
 800130c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800130e:	237f      	movs	r3, #127	; 0x7f
 8001310:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001312:	f7ff fd93 	bl	8000e3c <LL_DBGMCU_GetRevisionID>
 8001316:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001318:	482b      	ldr	r0, [pc, #172]	; (80013c8 <APPE_SysEvtReadyProcessing+0x110>)
 800131a:	f009 f94b 	bl	800a5b4 <DbgTraceGetFileName>
 800131e:	4601      	mov	r1, r0
 8001320:	f240 13dd 	movw	r3, #477	; 0x1dd
 8001324:	4a29      	ldr	r2, [pc, #164]	; (80013cc <APPE_SysEvtReadyProcessing+0x114>)
 8001326:	482a      	ldr	r0, [pc, #168]	; (80013d0 <APPE_SysEvtReadyProcessing+0x118>)
 8001328:	f00c f83c 	bl	800d3a4 <iprintf>
 800132c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800132e:	482a      	ldr	r0, [pc, #168]	; (80013d8 <APPE_SysEvtReadyProcessing+0x120>)
 8001330:	f00c f838 	bl	800d3a4 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	b29b      	uxth	r3, r3
 8001338:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800133a:	f7ff fd71 	bl	8000e20 <LL_DBGMCU_GetDeviceID>
 800133e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001340:	4821      	ldr	r0, [pc, #132]	; (80013c8 <APPE_SysEvtReadyProcessing+0x110>)
 8001342:	f009 f937 	bl	800a5b4 <DbgTraceGetFileName>
 8001346:	4601      	mov	r1, r0
 8001348:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800134c:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <APPE_SysEvtReadyProcessing+0x114>)
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <APPE_SysEvtReadyProcessing+0x118>)
 8001350:	f00c f828 	bl	800d3a4 <iprintf>
 8001354:	6a39      	ldr	r1, [r7, #32]
 8001356:	4821      	ldr	r0, [pc, #132]	; (80013dc <APPE_SysEvtReadyProcessing+0x124>)
 8001358:	f00c f824 	bl	800d3a4 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	b29b      	uxth	r3, r3
 8001360:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	4618      	mov	r0, r3
 8001368:	f008 fb44 	bl	80099f4 <SHCI_C2_Config>

    APP_BLE_Init();
 800136c:	f009 ff0c 	bl	800b188 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001370:	2100      	movs	r1, #0
 8001372:	2001      	movs	r0, #1
 8001374:	f00b fce6 	bl	800cd44 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001378:	e022      	b.n	80013c0 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d110      	bne.n	80013a4 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001382:	4811      	ldr	r0, [pc, #68]	; (80013c8 <APPE_SysEvtReadyProcessing+0x110>)
 8001384:	f009 f916 	bl	800a5b4 <DbgTraceGetFileName>
 8001388:	4601      	mov	r1, r0
 800138a:	f240 13ef 	movw	r3, #495	; 0x1ef
 800138e:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <APPE_SysEvtReadyProcessing+0x114>)
 8001390:	480f      	ldr	r0, [pc, #60]	; (80013d0 <APPE_SysEvtReadyProcessing+0x118>)
 8001392:	f00c f807 	bl	800d3a4 <iprintf>
 8001396:	4812      	ldr	r0, [pc, #72]	; (80013e0 <APPE_SysEvtReadyProcessing+0x128>)
 8001398:	f00c f804 	bl	800d3a4 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
  return;
 80013a2:	e00d      	b.n	80013c0 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <APPE_SysEvtReadyProcessing+0x110>)
 80013a6:	f009 f905 	bl	800a5b4 <DbgTraceGetFileName>
 80013aa:	4601      	mov	r1, r0
 80013ac:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <APPE_SysEvtReadyProcessing+0x114>)
 80013b2:	4807      	ldr	r0, [pc, #28]	; (80013d0 <APPE_SysEvtReadyProcessing+0x118>)
 80013b4:	f00b fff6 	bl	800d3a4 <iprintf>
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <APPE_SysEvtReadyProcessing+0x12c>)
 80013ba:	f00b fff3 	bl	800d3a4 <iprintf>
  return;
 80013be:	bf00      	nop
}
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	0800e258 	.word	0x0800e258
 80013cc:	0800f81c 	.word	0x0800f81c
 80013d0:	0800e270 	.word	0x0800e270
 80013d4:	0800e4fc 	.word	0x0800e4fc
 80013d8:	0800e518 	.word	0x0800e518
 80013dc:	0800e53c 	.word	0x0800e53c
 80013e0:	0800e55c 	.word	0x0800e55c
 80013e4:	0800e590 	.word	0x0800e590

080013e8 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f00b fcd8 	bl	800cda4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80013fc:	bf00      	nop
}
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f00b fcc6 	bl	800cda4 <UTIL_SEQ_Run>
  return;
 8001418:	bf00      	nop
}
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001428:	2100      	movs	r1, #0
 800142a:	2020      	movs	r0, #32
 800142c:	f00b fdd8 	bl	800cfe0 <UTIL_SEQ_SetTask>
  return;
 8001430:	bf00      	nop
}
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001440:	2002      	movs	r0, #2
 8001442:	f00b fe39 	bl	800d0b8 <UTIL_SEQ_SetEvt>
  return;
 8001446:	bf00      	nop
}
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001456:	2002      	movs	r0, #2
 8001458:	f00b fe4e 	bl	800d0f8 <UTIL_SEQ_WaitEvt>
  return;
 800145c:	bf00      	nop
}
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	2b10      	cmp	r3, #16
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_EXTI_Callback+0x1e>
 8001474:	2b10      	cmp	r3, #16
 8001476:	dc0d      	bgt.n	8001494 <HAL_GPIO_EXTI_Callback+0x30>
 8001478:	2b01      	cmp	r3, #1
 800147a:	d005      	beq.n	8001488 <HAL_GPIO_EXTI_Callback+0x24>
 800147c:	2b02      	cmp	r3, #2
 800147e:	d006      	beq.n	800148e <HAL_GPIO_EXTI_Callback+0x2a>
        break;
    case B3_Pin:
        APP_BLE_Key_Button3_Action();
        break;
    default:
      break;
 8001480:	e008      	b.n	8001494 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 8001482:	f00a fd89 	bl	800bf98 <APP_BLE_Key_Button1_Action>
      break;
 8001486:	e006      	b.n	8001496 <HAL_GPIO_EXTI_Callback+0x32>
        APP_BLE_Key_Button2_Action();
 8001488:	f00a fd8c 	bl	800bfa4 <APP_BLE_Key_Button2_Action>
        break;
 800148c:	e003      	b.n	8001496 <HAL_GPIO_EXTI_Callback+0x32>
        APP_BLE_Key_Button3_Action();
 800148e:	f00a fd8f 	bl	800bfb0 <APP_BLE_Key_Button3_Action>
        break;
 8001492:	e000      	b.n	8001496 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001494:	bf00      	nop
  }
  return;
 8001496:	bf00      	nop
}
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <LL_EXTI_EnableIT_0_31>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80014aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80014ae:	4905      	ldr	r1, [pc, #20]	; (80014c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	58000800 	.word	0x58000800

080014c8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4904      	ldr	r1, [pc, #16]	; (80014e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]

}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	58000800 	.word	0x58000800

080014ec <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <ReadRtcSsrValue+0x3c>)
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <ReadRtcSsrValue+0x3c>)
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	b29b      	uxth	r3, r3
 8001500:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001502:	e005      	b.n	8001510 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <ReadRtcSsrValue+0x3c>)
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	b29b      	uxth	r3, r3
 800150e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d1f5      	bne.n	8001504 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001518:	683b      	ldr	r3, [r7, #0]
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40002800 	.word	0x40002800

0800152c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	460a      	mov	r2, r1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	4613      	mov	r3, r2
 800153a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800153c:	79ba      	ldrb	r2, [r7, #6]
 800153e:	491d      	ldr	r1, [pc, #116]	; (80015b4 <LinkTimerAfter+0x88>)
 8001540:	4613      	mov	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	3315      	adds	r3, #21
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	2b06      	cmp	r3, #6
 8001554:	d009      	beq.n	800156a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001556:	7bfa      	ldrb	r2, [r7, #15]
 8001558:	4916      	ldr	r1, [pc, #88]	; (80015b4 <LinkTimerAfter+0x88>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	3314      	adds	r3, #20
 8001566:	79fa      	ldrb	r2, [r7, #7]
 8001568:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	4911      	ldr	r1, [pc, #68]	; (80015b4 <LinkTimerAfter+0x88>)
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3315      	adds	r3, #21
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	490c      	ldr	r1, [pc, #48]	; (80015b4 <LinkTimerAfter+0x88>)
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	3314      	adds	r3, #20
 800158e:	79ba      	ldrb	r2, [r7, #6]
 8001590:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001592:	79ba      	ldrb	r2, [r7, #6]
 8001594:	4907      	ldr	r1, [pc, #28]	; (80015b4 <LinkTimerAfter+0x88>)
 8001596:	4613      	mov	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	3315      	adds	r3, #21
 80015a2:	79fa      	ldrb	r2, [r7, #7]
 80015a4:	701a      	strb	r2, [r3, #0]

  return;
 80015a6:	bf00      	nop
}
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	200000fc 	.word	0x200000fc

080015b8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	460a      	mov	r2, r1
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	4613      	mov	r3, r2
 80015c6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80015c8:	4b29      	ldr	r3, [pc, #164]	; (8001670 <LinkTimerBefore+0xb8>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	79ba      	ldrb	r2, [r7, #6]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d032      	beq.n	800163a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80015d4:	79ba      	ldrb	r2, [r7, #6]
 80015d6:	4927      	ldr	r1, [pc, #156]	; (8001674 <LinkTimerBefore+0xbc>)
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	3314      	adds	r3, #20
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	4922      	ldr	r1, [pc, #136]	; (8001674 <LinkTimerBefore+0xbc>)
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	3315      	adds	r3, #21
 80015f8:	79fa      	ldrb	r2, [r7, #7]
 80015fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	491d      	ldr	r1, [pc, #116]	; (8001674 <LinkTimerBefore+0xbc>)
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	440b      	add	r3, r1
 800160a:	3315      	adds	r3, #21
 800160c:	79ba      	ldrb	r2, [r7, #6]
 800160e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001610:	79fa      	ldrb	r2, [r7, #7]
 8001612:	4918      	ldr	r1, [pc, #96]	; (8001674 <LinkTimerBefore+0xbc>)
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	440b      	add	r3, r1
 800161e:	3314      	adds	r3, #20
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001624:	79ba      	ldrb	r2, [r7, #6]
 8001626:	4913      	ldr	r1, [pc, #76]	; (8001674 <LinkTimerBefore+0xbc>)
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	3314      	adds	r3, #20
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001638:	e014      	b.n	8001664 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	490d      	ldr	r1, [pc, #52]	; (8001674 <LinkTimerBefore+0xbc>)
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	3315      	adds	r3, #21
 800164a:	79ba      	ldrb	r2, [r7, #6]
 800164c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800164e:	79ba      	ldrb	r2, [r7, #6]
 8001650:	4908      	ldr	r1, [pc, #32]	; (8001674 <LinkTimerBefore+0xbc>)
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	3314      	adds	r3, #20
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	701a      	strb	r2, [r3, #0]
  return;
 8001662:	bf00      	nop
}
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2000018c 	.word	0x2000018c
 8001674:	200000fc 	.word	0x200000fc

08001678 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001682:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <linkTimer+0x144>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b06      	cmp	r3, #6
 800168a:	d118      	bne.n	80016be <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800168c:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <linkTimer+0x144>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <linkTimer+0x148>)
 8001694:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001696:	4a49      	ldr	r2, [pc, #292]	; (80017bc <linkTimer+0x144>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800169c:	79fa      	ldrb	r2, [r7, #7]
 800169e:	4949      	ldr	r1, [pc, #292]	; (80017c4 <linkTimer+0x14c>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	3315      	adds	r3, #21
 80016ac:	2206      	movs	r2, #6
 80016ae:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80016b0:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <linkTimer+0x150>)
 80016b2:	f04f 32ff 	mov.w	r2, #4294967295
 80016b6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	81fb      	strh	r3, [r7, #14]
 80016bc:	e078      	b.n	80017b0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80016be:	f000 f909 	bl	80018d4 <ReturnTimeElapsed>
 80016c2:	4603      	mov	r3, r0
 80016c4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80016c6:	79fa      	ldrb	r2, [r7, #7]
 80016c8:	493e      	ldr	r1, [pc, #248]	; (80017c4 <linkTimer+0x14c>)
 80016ca:	4613      	mov	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	3308      	adds	r3, #8
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	89fb      	ldrh	r3, [r7, #14]
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	4419      	add	r1, r3
 80016de:	4839      	ldr	r0, [pc, #228]	; (80017c4 <linkTimer+0x14c>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4403      	add	r3, r0
 80016ea:	3308      	adds	r3, #8
 80016ec:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80016ee:	79fa      	ldrb	r2, [r7, #7]
 80016f0:	4934      	ldr	r1, [pc, #208]	; (80017c4 <linkTimer+0x14c>)
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	3308      	adds	r3, #8
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001702:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <linkTimer+0x144>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	4619      	mov	r1, r3
 800170a:	4a2e      	ldr	r2, [pc, #184]	; (80017c4 <linkTimer+0x14c>)
 800170c:	460b      	mov	r3, r1
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	440b      	add	r3, r1
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4413      	add	r3, r2
 8001716:	3308      	adds	r3, #8
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	429a      	cmp	r2, r3
 800171e:	d337      	bcc.n	8001790 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <linkTimer+0x144>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001726:	7b7a      	ldrb	r2, [r7, #13]
 8001728:	4926      	ldr	r1, [pc, #152]	; (80017c4 <linkTimer+0x14c>)
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	3315      	adds	r3, #21
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800173a:	e013      	b.n	8001764 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800173c:	7b7a      	ldrb	r2, [r7, #13]
 800173e:	4921      	ldr	r1, [pc, #132]	; (80017c4 <linkTimer+0x14c>)
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	3315      	adds	r3, #21
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001750:	7b7a      	ldrb	r2, [r7, #13]
 8001752:	491c      	ldr	r1, [pc, #112]	; (80017c4 <linkTimer+0x14c>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3315      	adds	r3, #21
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001764:	7b3b      	ldrb	r3, [r7, #12]
 8001766:	2b06      	cmp	r3, #6
 8001768:	d00b      	beq.n	8001782 <linkTimer+0x10a>
 800176a:	7b3a      	ldrb	r2, [r7, #12]
 800176c:	4915      	ldr	r1, [pc, #84]	; (80017c4 <linkTimer+0x14c>)
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3308      	adds	r3, #8
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	429a      	cmp	r2, r3
 8001780:	d2dc      	bcs.n	800173c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001782:	7b7a      	ldrb	r2, [r7, #13]
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fecf 	bl	800152c <LinkTimerAfter>
 800178e:	e00f      	b.n	80017b0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <linkTimer+0x144>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff0c 	bl	80015b8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <linkTimer+0x144>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <linkTimer+0x148>)
 80017a8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <linkTimer+0x144>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80017b0:	89fb      	ldrh	r3, [r7, #14]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000018c 	.word	0x2000018c
 80017c0:	2000018d 	.word	0x2000018d
 80017c4:	200000fc 	.word	0x200000fc
 80017c8:	20000190 	.word	0x20000190

080017cc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	460a      	mov	r2, r1
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	4613      	mov	r3, r2
 80017da:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <UnlinkTimer+0xf8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d111      	bne.n	800180c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80017e8:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <UnlinkTimer+0xf8>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <UnlinkTimer+0xfc>)
 80017f0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80017f2:	79fa      	ldrb	r2, [r7, #7]
 80017f4:	4935      	ldr	r1, [pc, #212]	; (80018cc <UnlinkTimer+0x100>)
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	3315      	adds	r3, #21
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <UnlinkTimer+0xf8>)
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e03e      	b.n	800188a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800180c:	79fa      	ldrb	r2, [r7, #7]
 800180e:	492f      	ldr	r1, [pc, #188]	; (80018cc <UnlinkTimer+0x100>)
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	3314      	adds	r3, #20
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001820:	79fa      	ldrb	r2, [r7, #7]
 8001822:	492a      	ldr	r1, [pc, #168]	; (80018cc <UnlinkTimer+0x100>)
 8001824:	4613      	mov	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3315      	adds	r3, #21
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001834:	79f9      	ldrb	r1, [r7, #7]
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	4824      	ldr	r0, [pc, #144]	; (80018cc <UnlinkTimer+0x100>)
 800183a:	460b      	mov	r3, r1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	440b      	add	r3, r1
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4403      	add	r3, r0
 8001844:	3315      	adds	r3, #21
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b2d8      	uxtb	r0, r3
 800184a:	4920      	ldr	r1, [pc, #128]	; (80018cc <UnlinkTimer+0x100>)
 800184c:	4613      	mov	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	3315      	adds	r3, #21
 8001858:	4602      	mov	r2, r0
 800185a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800185c:	7bbb      	ldrb	r3, [r7, #14]
 800185e:	2b06      	cmp	r3, #6
 8001860:	d013      	beq.n	800188a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001862:	79f9      	ldrb	r1, [r7, #7]
 8001864:	7bba      	ldrb	r2, [r7, #14]
 8001866:	4819      	ldr	r0, [pc, #100]	; (80018cc <UnlinkTimer+0x100>)
 8001868:	460b      	mov	r3, r1
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	440b      	add	r3, r1
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4403      	add	r3, r0
 8001872:	3314      	adds	r3, #20
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b2d8      	uxtb	r0, r3
 8001878:	4914      	ldr	r1, [pc, #80]	; (80018cc <UnlinkTimer+0x100>)
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	440b      	add	r3, r1
 8001884:	3314      	adds	r3, #20
 8001886:	4602      	mov	r2, r0
 8001888:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800188a:	79fa      	ldrb	r2, [r7, #7]
 800188c:	490f      	ldr	r1, [pc, #60]	; (80018cc <UnlinkTimer+0x100>)
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	330c      	adds	r3, #12
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <UnlinkTimer+0xf8>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b06      	cmp	r3, #6
 80018a6:	d107      	bne.n	80018b8 <UnlinkTimer+0xec>
 80018a8:	79bb      	ldrb	r3, [r7, #6]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d104      	bne.n	80018b8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <UnlinkTimer+0x104>)
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	601a      	str	r2, [r3, #0]
  }

  return;
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
}
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	2000018c 	.word	0x2000018c
 80018c8:	2000018d 	.word	0x2000018d
 80018cc:	200000fc 	.word	0x200000fc
 80018d0:	20000190 	.word	0x20000190

080018d4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <ReturnTimeElapsed+0x70>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e2:	d026      	beq.n	8001932 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80018e4:	f7ff fe02 	bl	80014ec <ReadRtcSsrValue>
 80018e8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <ReturnTimeElapsed+0x70>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d805      	bhi.n	8001900 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <ReturnTimeElapsed+0x70>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	e00a      	b.n	8001916 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <ReturnTimeElapsed+0x74>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <ReturnTimeElapsed+0x70>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	4413      	add	r3, r2
 8001914:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <ReturnTimeElapsed+0x78>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	fb02 f303 	mul.w	r3, r2, r3
 8001922:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <ReturnTimeElapsed+0x7c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	40d3      	lsrs	r3, r2
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	e001      	b.n	8001936 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	b29b      	uxth	r3, r3
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000190 	.word	0x20000190
 8001948:	20000198 	.word	0x20000198
 800194c:	20000196 	.word	0x20000196
 8001950:	20000195 	.word	0x20000195

08001954 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d108      	bne.n	8001976 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001964:	f7ff fdc2 	bl	80014ec <ReadRtcSsrValue>
 8001968:	4603      	mov	r3, r0
 800196a:	4a21      	ldr	r2, [pc, #132]	; (80019f0 <RestartWakeupCounter+0x9c>)
 800196c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800196e:	2003      	movs	r0, #3
 8001970:	f001 fd33 	bl	80033da <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001974:	e039      	b.n	80019ea <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d803      	bhi.n	8001984 <RestartWakeupCounter+0x30>
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <RestartWakeupCounter+0xa0>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d002      	beq.n	800198a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001984:	88fb      	ldrh	r3, [r7, #6]
 8001986:	3b01      	subs	r3, #1
 8001988:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800198a:	bf00      	nop
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <RestartWakeupCounter+0xa4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f8      	beq.n	800198c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <RestartWakeupCounter+0xa4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <RestartWakeupCounter+0xa4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80019aa:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <RestartWakeupCounter+0xa8>)
 80019ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019b2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80019b4:	2003      	movs	r0, #3
 80019b6:	f001 fd1e 	bl	80033f6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <RestartWakeupCounter+0xac>)
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	0c1b      	lsrs	r3, r3, #16
 80019c0:	041b      	lsls	r3, r3, #16
 80019c2:	88fa      	ldrh	r2, [r7, #6]
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <RestartWakeupCounter+0xac>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019ca:	f7ff fd8f 	bl	80014ec <ReadRtcSsrValue>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <RestartWakeupCounter+0x9c>)
 80019d2:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <RestartWakeupCounter+0xa4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <RestartWakeupCounter+0xa4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019e2:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80019e4:	f3af 8000 	nop.w
  return ;
 80019e8:	bf00      	nop
}
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000190 	.word	0x20000190
 80019f4:	20000195 	.word	0x20000195
 80019f8:	200001dc 	.word	0x200001dc
 80019fc:	58000800 	.word	0x58000800
 8001a00:	40002800 	.word	0x40002800

08001a04 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a0a:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <RescheduleTimerList+0x11c>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a16:	d107      	bne.n	8001a28 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a18:	bf00      	nop
 8001a1a:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <RescheduleTimerList+0x120>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f8      	bne.n	8001a1a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a28:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <RescheduleTimerList+0x120>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <RescheduleTimerList+0x120>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a36:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <RescheduleTimerList+0x124>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	493a      	ldr	r1, [pc, #232]	; (8001b2c <RescheduleTimerList+0x128>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001a52:	f7ff ff3f 	bl	80018d4 <ReturnTimeElapsed>
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d205      	bcs.n	8001a6e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <RescheduleTimerList+0x12c>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	e04d      	b.n	8001b0a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	4a30      	ldr	r2, [pc, #192]	; (8001b34 <RescheduleTimerList+0x130>)
 8001a72:	8812      	ldrh	r2, [r2, #0]
 8001a74:	b292      	uxth	r2, r2
 8001a76:	4413      	add	r3, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d906      	bls.n	8001a8e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <RescheduleTimerList+0x130>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <RescheduleTimerList+0x12c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	e03d      	b.n	8001b0a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <RescheduleTimerList+0x12c>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a9e:	e034      	b.n	8001b0a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	4922      	ldr	r1, [pc, #136]	; (8001b2c <RescheduleTimerList+0x128>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	3308      	adds	r3, #8
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d20a      	bcs.n	8001ace <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	491c      	ldr	r1, [pc, #112]	; (8001b2c <RescheduleTimerList+0x128>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3308      	adds	r3, #8
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e013      	b.n	8001af6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	4916      	ldr	r1, [pc, #88]	; (8001b2c <RescheduleTimerList+0x128>)
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	3308      	adds	r3, #8
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	1ac9      	subs	r1, r1, r3
 8001ae6:	4811      	ldr	r0, [pc, #68]	; (8001b2c <RescheduleTimerList+0x128>)
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4403      	add	r3, r0
 8001af2:	3308      	adds	r3, #8
 8001af4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	490c      	ldr	r1, [pc, #48]	; (8001b2c <RescheduleTimerList+0x128>)
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	3315      	adds	r3, #21
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	2b06      	cmp	r3, #6
 8001b0e:	d1c7      	bne.n	8001aa0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001b10:	89bb      	ldrh	r3, [r7, #12]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff1e 	bl	8001954 <RestartWakeupCounter>

  return ;
 8001b18:	bf00      	nop
}
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40002800 	.word	0x40002800
 8001b24:	200001dc 	.word	0x200001dc
 8001b28:	2000018c 	.word	0x2000018c
 8001b2c:	200000fc 	.word	0x200000fc
 8001b30:	20000194 	.word	0x20000194
 8001b34:	2000019a 	.word	0x2000019a

08001b38 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b42:	617b      	str	r3, [r7, #20]
  return(result);
 8001b44:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b4c:	4b59      	ldr	r3, [pc, #356]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	22ca      	movs	r2, #202	; 0xca
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
 8001b54:	4b57      	ldr	r3, [pc, #348]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2253      	movs	r2, #83	; 0x53
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001b5c:	4b55      	ldr	r3, [pc, #340]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001b6c:	4b52      	ldr	r3, [pc, #328]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001b74:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b78:	4950      	ldr	r1, [pc, #320]	; (8001cbc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	330c      	adds	r3, #12
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d16e      	bne.n	8001c6c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001b8e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b92:	494a      	ldr	r1, [pc, #296]	; (8001cbc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001ba2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ba6:	4945      	ldr	r1, [pc, #276]	; (8001cbc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3310      	adds	r3, #16
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001bb8:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d04c      	beq.n	8001c5c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001bc2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bc6:	493d      	ldr	r1, [pc, #244]	; (8001cbc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	440b      	add	r3, r1
 8001bd2:	330d      	adds	r3, #13
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d124      	bne.n	8001c26 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001be0:	2101      	movs	r1, #1
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fdf2 	bl	80017cc <UnlinkTimer>
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f383 8810 	msr	PRIMASK, r3
}
 8001bf2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001bf4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bf8:	4930      	ldr	r1, [pc, #192]	; (8001cbc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	3304      	adds	r3, #4
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f9b8 	bl	8001f84 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	22ca      	movs	r2, #202	; 0xca
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2253      	movs	r2, #83	; 0x53
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
 8001c24:	e012      	b.n	8001c4c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f383 8810 	msr	PRIMASK, r3
}
 8001c30:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f920 	bl	8001e7c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	22ca      	movs	r2, #202	; 0xca
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2253      	movs	r2, #83	; 0x53
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	4619      	mov	r1, r3
 8001c54:	69b8      	ldr	r0, [r7, #24]
 8001c56:	f000 fa1b 	bl	8002090 <HW_TS_RTC_Int_AppNot>
 8001c5a:	e022      	b.n	8001ca2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001c5c:	f7ff fed2 	bl	8001a04 <RescheduleTimerList>
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f383 8810 	msr	PRIMASK, r3
}
 8001c6a:	e01a      	b.n	8001ca2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c6c:	bf00      	nop
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f8      	beq.n	8001c6e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c8c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001c90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f383 8810 	msr	PRIMASK, r3
}
 8001ca0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	22ff      	movs	r2, #255	; 0xff
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001caa:	bf00      	nop
}
 8001cac:	3728      	adds	r7, #40	; 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200001dc 	.word	0x200001dc
 8001cb8:	2000018c 	.word	0x2000018c
 8001cbc:	200000fc 	.word	0x200000fc
 8001cc0:	20000194 	.word	0x20000194
 8001cc4:	58000800 	.word	0x58000800

08001cc8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cd4:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <HW_TS_Init+0x188>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	22ca      	movs	r2, #202	; 0xca
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
 8001cdc:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <HW_TS_Init+0x188>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2253      	movs	r2, #83	; 0x53
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ce4:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <HW_TS_Init+0x18c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a5a      	ldr	r2, [pc, #360]	; (8001e54 <HW_TS_Init+0x18c>)
 8001cea:	f043 0320 	orr.w	r3, r3, #32
 8001cee:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001cf0:	4b58      	ldr	r3, [pc, #352]	; (8001e54 <HW_TS_Init+0x18c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f1c3 0304 	rsb	r3, r3, #4
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b55      	ldr	r3, [pc, #340]	; (8001e58 <HW_TS_Init+0x190>)
 8001d04:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001d06:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HW_TS_Init+0x18c>)
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d0e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001d12:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	fa92 f2a2 	rbit	r2, r2
 8001d1a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	2a00      	cmp	r2, #0
 8001d24:	d101      	bne.n	8001d2a <HW_TS_Init+0x62>
  {
    return 32U;
 8001d26:	2220      	movs	r2, #32
 8001d28:	e003      	b.n	8001d32 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	fab2 f282 	clz	r2, r2
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	40d3      	lsrs	r3, r2
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b48      	ldr	r3, [pc, #288]	; (8001e5c <HW_TS_Init+0x194>)
 8001d3c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001d3e:	4b45      	ldr	r3, [pc, #276]	; (8001e54 <HW_TS_Init+0x18c>)
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <HW_TS_Init+0x198>)
 8001d50:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001d52:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <HW_TS_Init+0x198>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	4a40      	ldr	r2, [pc, #256]	; (8001e5c <HW_TS_Init+0x194>)
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d64:	4a3c      	ldr	r2, [pc, #240]	; (8001e58 <HW_TS_Init+0x190>)
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	40d3      	lsrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d904      	bls.n	8001d80 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HW_TS_Init+0x19c>)
 8001d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d7c:	801a      	strh	r2, [r3, #0]
 8001d7e:	e003      	b.n	8001d88 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HW_TS_Init+0x19c>)
 8001d86:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d88:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d8c:	f7ff fb9c 	bl	80014c8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d90:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d94:	f7ff fb84 	bl	80014a0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d13d      	bne.n	8001e1a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d9e:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <HW_TS_Init+0x1a0>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001da4:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HW_TS_Init+0x1a4>)
 8001da6:	f04f 32ff 	mov.w	r2, #4294967295
 8001daa:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	77fb      	strb	r3, [r7, #31]
 8001db0:	e00c      	b.n	8001dcc <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001db2:	7ffa      	ldrb	r2, [r7, #31]
 8001db4:	492e      	ldr	r1, [pc, #184]	; (8001e70 <HW_TS_Init+0x1a8>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	330c      	adds	r3, #12
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001dc6:	7ffb      	ldrb	r3, [r7, #31]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	77fb      	strb	r3, [r7, #31]
 8001dcc:	7ffb      	ldrb	r3, [r7, #31]
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d9ef      	bls.n	8001db2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <HW_TS_Init+0x1ac>)
 8001dd4:	2206      	movs	r2, #6
 8001dd6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <HW_TS_Init+0x188>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HW_TS_Init+0x188>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001de6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HW_TS_Init+0x188>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HW_TS_Init+0x188>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001df8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HW_TS_Init+0x1b0>)
 8001dfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e00:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001e02:	2003      	movs	r0, #3
 8001e04:	f001 faf7 	bl	80033f6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HW_TS_Init+0x188>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HW_TS_Init+0x188>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	e009      	b.n	8001e2e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HW_TS_Init+0x188>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f001 fad6 	bl	80033da <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HW_TS_Init+0x188>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	22ff      	movs	r2, #255	; 0xff
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001e36:	2200      	movs	r2, #0
 8001e38:	2103      	movs	r1, #3
 8001e3a:	2003      	movs	r0, #3
 8001e3c:	f001 fa8b 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e40:	2003      	movs	r0, #3
 8001e42:	f001 faa2 	bl	800338a <HAL_NVIC_EnableIRQ>

  return;
 8001e46:	bf00      	nop
}
 8001e48:	3720      	adds	r7, #32
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200001dc 	.word	0x200001dc
 8001e54:	40002800 	.word	0x40002800
 8001e58:	20000195 	.word	0x20000195
 8001e5c:	20000196 	.word	0x20000196
 8001e60:	20000198 	.word	0x20000198
 8001e64:	2000019a 	.word	0x2000019a
 8001e68:	20000194 	.word	0x20000194
 8001e6c:	20000190 	.word	0x20000190
 8001e70:	200000fc 	.word	0x200000fc
 8001e74:	2000018c 	.word	0x2000018c
 8001e78:	58000800 	.word	0x58000800

08001e7c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e86:	f3ef 8310 	mrs	r3, PRIMASK
 8001e8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e94:	2003      	movs	r0, #3
 8001e96:	f001 fa86 	bl	80033a6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e9a:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <HW_TS_Stop+0xf0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	22ca      	movs	r2, #202	; 0xca
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
 8001ea2:	4b32      	ldr	r3, [pc, #200]	; (8001f6c <HW_TS_Stop+0xf0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2253      	movs	r2, #83	; 0x53
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001eaa:	79fa      	ldrb	r2, [r7, #7]
 8001eac:	4930      	ldr	r1, [pc, #192]	; (8001f70 <HW_TS_Stop+0xf4>)
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	330c      	adds	r3, #12
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d142      	bne.n	8001f48 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fc80 	bl	80017cc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HW_TS_Stop+0xf8>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ed2:	7cfb      	ldrb	r3, [r7, #19]
 8001ed4:	2b06      	cmp	r3, #6
 8001ed6:	d12f      	bne.n	8001f38 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HW_TS_Stop+0xfc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee4:	d107      	bne.n	8001ef6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001ee6:	bf00      	nop
 8001ee8:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HW_TS_Stop+0xf0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f8      	bne.n	8001ee8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HW_TS_Stop+0xf0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HW_TS_Stop+0xf0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f04:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f06:	bf00      	nop
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HW_TS_Stop+0xf0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f8      	beq.n	8001f08 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HW_TS_Stop+0xf0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <HW_TS_Stop+0xf0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f26:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HW_TS_Stop+0x100>)
 8001f2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f2e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f30:	2003      	movs	r0, #3
 8001f32:	f001 fa60 	bl	80033f6 <HAL_NVIC_ClearPendingIRQ>
 8001f36:	e007      	b.n	8001f48 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HW_TS_Stop+0x104>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	7cfa      	ldrb	r2, [r7, #19]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001f44:	f7ff fd5e 	bl	8001a04 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HW_TS_Stop+0xf0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	22ff      	movs	r2, #255	; 0xff
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f50:	2003      	movs	r0, #3
 8001f52:	f001 fa1a 	bl	800338a <HAL_NVIC_EnableIRQ>
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	f383 8810 	msr	PRIMASK, r3
}
 8001f60:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f62:	bf00      	nop
}
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200001dc 	.word	0x200001dc
 8001f70:	200000fc 	.word	0x200000fc
 8001f74:	2000018c 	.word	0x2000018c
 8001f78:	40002800 	.word	0x40002800
 8001f7c:	58000800 	.word	0x58000800
 8001f80:	2000018d 	.word	0x2000018d

08001f84 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	493b      	ldr	r1, [pc, #236]	; (8002080 <HW_TS_Start+0xfc>)
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	330c      	adds	r3, #12
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d103      	bne.n	8001fb0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff66 	bl	8001e7c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001fb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fba:	b672      	cpsid	i
}
 8001fbc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f001 f9f1 	bl	80033a6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fc4:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HW_TS_Start+0x100>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	22ca      	movs	r2, #202	; 0xca
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HW_TS_Start+0x100>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2253      	movs	r2, #83	; 0x53
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001fd4:	79fa      	ldrb	r2, [r7, #7]
 8001fd6:	492a      	ldr	r1, [pc, #168]	; (8002080 <HW_TS_Start+0xfc>)
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001fe8:	79fa      	ldrb	r2, [r7, #7]
 8001fea:	4925      	ldr	r1, [pc, #148]	; (8002080 <HW_TS_Start+0xfc>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001ffc:	79fa      	ldrb	r2, [r7, #7]
 8001ffe:	4920      	ldr	r1, [pc, #128]	; (8002080 <HW_TS_Start+0xfc>)
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	3304      	adds	r3, #4
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fb30 	bl	8001678 <linkTimer>
 8002018:	4603      	mov	r3, r0
 800201a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HW_TS_Start+0x104>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HW_TS_Start+0x108>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	7c7a      	ldrb	r2, [r7, #17]
 800202a:	429a      	cmp	r2, r3
 800202c:	d002      	beq.n	8002034 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800202e:	f7ff fce9 	bl	8001a04 <RescheduleTimerList>
 8002032:	e013      	b.n	800205c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002034:	79fa      	ldrb	r2, [r7, #7]
 8002036:	4912      	ldr	r1, [pc, #72]	; (8002080 <HW_TS_Start+0xfc>)
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	3308      	adds	r3, #8
 8002044:	6819      	ldr	r1, [r3, #0]
 8002046:	8a7b      	ldrh	r3, [r7, #18]
 8002048:	79fa      	ldrb	r2, [r7, #7]
 800204a:	1ac9      	subs	r1, r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <HW_TS_Start+0xfc>)
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4403      	add	r3, r0
 8002058:	3308      	adds	r3, #8
 800205a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800205c:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HW_TS_Start+0x100>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	22ff      	movs	r2, #255	; 0xff
 8002062:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002064:	2003      	movs	r0, #3
 8002066:	f001 f990 	bl	800338a <HAL_NVIC_EnableIRQ>
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f383 8810 	msr	PRIMASK, r3
}
 8002074:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002076:	bf00      	nop
}
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200000fc 	.word	0x200000fc
 8002084:	200001dc 	.word	0x200001dc
 8002088:	2000018c 	.word	0x2000018c
 800208c:	2000018d 	.word	0x2000018d

08002090 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	460b      	mov	r3, r1
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4798      	blx	r3

  return;
 80020a2:	bf00      	nop
}
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	4603      	mov	r3, r0
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	4613      	mov	r3, r2
 80020bc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10e      	bne.n	80020ea <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <HW_UART_Transmit_DMA+0x80>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80020d2:	4b17      	ldr	r3, [pc, #92]	; (8002130 <HW_UART_Transmit_DMA+0x84>)
 80020d4:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HW_UART_Transmit_DMA+0x88>)
 80020d6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80020d8:	89bb      	ldrh	r3, [r7, #12]
 80020da:	461a      	mov	r2, r3
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	4814      	ldr	r0, [pc, #80]	; (8002130 <HW_UART_Transmit_DMA+0x84>)
 80020e0:	f004 ffc6 	bl	8007070 <HAL_UART_Transmit_DMA>
 80020e4:	4603      	mov	r3, r0
 80020e6:	75fb      	strb	r3, [r7, #23]
            break;
 80020e8:	e000      	b.n	80020ec <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80020ea:	bf00      	nop
    }

    switch (hal_status)
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d816      	bhi.n	8002120 <HW_UART_Transmit_DMA+0x74>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <HW_UART_Transmit_DMA+0x4c>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002109 	.word	0x08002109
 80020fc:	0800210f 	.word	0x0800210f
 8002100:	08002115 	.word	0x08002115
 8002104:	0800211b 	.word	0x0800211b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002108:	2300      	movs	r3, #0
 800210a:	75bb      	strb	r3, [r7, #22]
            break;
 800210c:	e009      	b.n	8002122 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800210e:	2301      	movs	r3, #1
 8002110:	75bb      	strb	r3, [r7, #22]
            break;
 8002112:	e006      	b.n	8002122 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002114:	2302      	movs	r3, #2
 8002116:	75bb      	strb	r3, [r7, #22]
            break;
 8002118:	e003      	b.n	8002122 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800211a:	2303      	movs	r3, #3
 800211c:	75bb      	strb	r3, [r7, #22]
            break;
 800211e:	e000      	b.n	8002122 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002120:	bf00      	nop
    }

    return hw_status;
 8002122:	7dbb      	ldrb	r3, [r7, #22]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	2000019c 	.word	0x2000019c
 8002130:	20000298 	.word	0x20000298
 8002134:	40013800 	.word	0x40013800

08002138 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_UART_TxCpltCallback+0x34>)
 8002148:	429a      	cmp	r2, r3
 800214a:	d107      	bne.n	800215c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_UART_TxCpltCallback+0x38>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_UART_TxCpltCallback+0x38>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4798      	blx	r3
            }
            break;
 800215a:	e001      	b.n	8002160 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800215c:	bf00      	nop
 800215e:	e000      	b.n	8002162 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002160:	bf00      	nop
    }

    return;
 8002162:	bf00      	nop
}
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40013800 	.word	0x40013800
 8002170:	2000019c 	.word	0x2000019c

08002174 <LL_RCC_LSE_SetDriveCapability>:
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	f023 0218 	bic.w	r2, r3, #24
 8002188:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_AHB1_GRP1_EnableClock>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4013      	ands	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_AHB2_GRP1_EnableClock>:
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4013      	ands	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002208:	f000 fed8 	bl	8002fbc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800220c:	f7fe fe54 	bl	8000eb8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002210:	f000 f818 	bl	8002244 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002214:	f000 f88c 	bl	8002330 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002218:	f000 f8aa 	bl	8002370 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800221c:	f000 fa84 	bl	8002728 <MX_GPIO_Init>
  MX_DMA_Init();
 8002220:	f000 fa70 	bl	8002704 <MX_DMA_Init>
  MX_RTC_Init();
 8002224:	f000 f8c0 	bl	80023a8 <MX_RTC_Init>
  MX_USB_PCD_Init();
 8002228:	f000 fa44 	bl	80026b4 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 800222c:	f000 f8f0 	bl	8002410 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002230:	f000 f99e 	bl	8002570 <MX_TIM2_Init>
  MX_RF_Init();
 8002234:	f000 f8b0 	bl	8002398 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002238:	f7fe fe4c 	bl	8000ed4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800223c:	f7ff f8d4 	bl	80013e8 <MX_APPE_Process>
 8002240:	e7fc      	b.n	800223c <main+0x38>
	...

08002244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b09a      	sub	sp, #104	; 0x68
 8002248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224a:	f107 0320 	add.w	r3, r7, #32
 800224e:	2248      	movs	r2, #72	; 0x48
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f00b f9f4 	bl	800d640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	611a      	str	r2, [r3, #16]
 8002266:	615a      	str	r2, [r3, #20]
 8002268:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002278:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800227a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f023 0303 	bic.w	r3, r3, #3
 8002284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800228e:	f001 ff35 	bl	80040fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002292:	2000      	movs	r0, #0
 8002294:	f7ff ff6e 	bl	8002174 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002298:	4b24      	ldr	r3, [pc, #144]	; (800232c <SystemClock_Config+0xe8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022a0:	4a22      	ldr	r2, [pc, #136]	; (800232c <SystemClock_Config+0xe8>)
 80022a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b20      	ldr	r3, [pc, #128]	; (800232c <SystemClock_Config+0xe8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80022b4:	2327      	movs	r3, #39	; 0x27
 80022b6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022be:	2301      	movs	r3, #1
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022c8:	2301      	movs	r3, #1
 80022ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022cc:	2340      	movs	r3, #64	; 0x40
 80022ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80022d0:	2300      	movs	r3, #0
 80022d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022d4:	2360      	movs	r3, #96	; 0x60
 80022d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022d8:	2300      	movs	r3, #0
 80022da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022dc:	f107 0320 	add.w	r3, r7, #32
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fa9f 	bl	8004824 <HAL_RCC_OscConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80022ec:	f000 faa8 	bl	8002840 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80022f0:	236f      	movs	r3, #111	; 0x6f
 80022f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80022f4:	2302      	movs	r3, #2
 80022f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002304:	2300      	movs	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	2101      	movs	r1, #1
 8002310:	4618      	mov	r0, r3
 8002312:	f002 fdfb 	bl	8004f0c <HAL_RCC_ClockConfig>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800231c:	f000 fa90 	bl	8002840 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002320:	f003 fbb6 	bl	8005a90 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002324:	bf00      	nop
 8002326:	3768      	adds	r7, #104	; 0x68
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	58000400 	.word	0x58000400

08002330 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b094      	sub	sp, #80	; 0x50
 8002334:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002336:	463b      	mov	r3, r7
 8002338:	2250      	movs	r2, #80	; 0x50
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f00b f97f 	bl	800d640 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002342:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002346:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002348:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800234c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800234e:	2302      	movs	r3, #2
 8002350:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002352:	2310      	movs	r3, #16
 8002354:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002356:	463b      	mov	r3, r7
 8002358:	4618      	mov	r0, r3
 800235a:	f003 fa23 	bl	80057a4 <HAL_RCCEx_PeriphCLKConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002364:	f000 fa6c 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002368:	bf00      	nop
 800236a:	3750      	adds	r7, #80	; 0x50
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_IPCC_Init+0x20>)
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <MX_IPCC_Init+0x24>)
 8002378:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_IPCC_Init+0x20>)
 800237c:	f001 fd40 	bl	8003e00 <HAL_IPCC_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002386:	f000 fa5b 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	200001a0 	.word	0x200001a0
 8002394:	58000c00 	.word	0x58000c00

08002398 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <MX_RTC_Init+0x60>)
 80023ae:	4a17      	ldr	r2, [pc, #92]	; (800240c <MX_RTC_Init+0x64>)
 80023b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <MX_RTC_Init+0x60>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <MX_RTC_Init+0x60>)
 80023ba:	220f      	movs	r2, #15
 80023bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <MX_RTC_Init+0x60>)
 80023c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80023c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <MX_RTC_Init+0x60>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <MX_RTC_Init+0x60>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <MX_RTC_Init+0x60>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80023d8:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <MX_RTC_Init+0x60>)
 80023da:	2200      	movs	r2, #0
 80023dc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023de:	480a      	ldr	r0, [pc, #40]	; (8002408 <MX_RTC_Init+0x60>)
 80023e0:	f003 fc6e 	bl	8005cc0 <HAL_RTC_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80023ea:	f000 fa29 	bl	8002840 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	4805      	ldr	r0, [pc, #20]	; (8002408 <MX_RTC_Init+0x60>)
 80023f4:	f003 fd64 	bl	8005ec0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80023fe:	f000 fa1f 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200001dc 	.word	0x200001dc
 800240c:	40002800 	.word	0x40002800

08002410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b09c      	sub	sp, #112	; 0x70
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002416:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002424:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002430:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
 8002440:	615a      	str	r2, [r3, #20]
 8002442:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	2234      	movs	r2, #52	; 0x34
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f00b f8f8 	bl	800d640 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002450:	4b45      	ldr	r3, [pc, #276]	; (8002568 <MX_TIM1_Init+0x158>)
 8002452:	4a46      	ldr	r2, [pc, #280]	; (800256c <MX_TIM1_Init+0x15c>)
 8002454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002456:	4b44      	ldr	r3, [pc, #272]	; (8002568 <MX_TIM1_Init+0x158>)
 8002458:	2200      	movs	r2, #0
 800245a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245c:	4b42      	ldr	r3, [pc, #264]	; (8002568 <MX_TIM1_Init+0x158>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002462:	4b41      	ldr	r3, [pc, #260]	; (8002568 <MX_TIM1_Init+0x158>)
 8002464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002468:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246a:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <MX_TIM1_Init+0x158>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002470:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <MX_TIM1_Init+0x158>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002476:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <MX_TIM1_Init+0x158>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800247c:	483a      	ldr	r0, [pc, #232]	; (8002568 <MX_TIM1_Init+0x158>)
 800247e:	f003 fddb 	bl	8006038 <HAL_TIM_Base_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002488:	f000 f9da 	bl	8002840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002490:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002492:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002496:	4619      	mov	r1, r3
 8002498:	4833      	ldr	r0, [pc, #204]	; (8002568 <MX_TIM1_Init+0x158>)
 800249a:	f004 f83f 	bl	800651c <HAL_TIM_ConfigClockSource>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80024a4:	f000 f9cc 	bl	8002840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024a8:	482f      	ldr	r0, [pc, #188]	; (8002568 <MX_TIM1_Init+0x158>)
 80024aa:	f003 fe1c 	bl	80060e6 <HAL_TIM_PWM_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80024b4:	f000 f9c4 	bl	8002840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c8:	4619      	mov	r1, r3
 80024ca:	4827      	ldr	r0, [pc, #156]	; (8002568 <MX_TIM1_Init+0x158>)
 80024cc:	f004 fc7a 	bl	8006dc4 <HAL_TIMEx_MasterConfigSynchronization>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80024d6:	f000 f9b3 	bl	8002840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024da:	2360      	movs	r3, #96	; 0x60
 80024dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024e2:	2300      	movs	r3, #0
 80024e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024e6:	2300      	movs	r3, #0
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024fa:	2204      	movs	r2, #4
 80024fc:	4619      	mov	r1, r3
 80024fe:	481a      	ldr	r0, [pc, #104]	; (8002568 <MX_TIM1_Init+0x158>)
 8002500:	f003 fef8 	bl	80062f4 <HAL_TIM_PWM_ConfigChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800250a:	f000 f999 	bl	8002840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002526:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002534:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800253e:	2300      	movs	r3, #0
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	4619      	mov	r1, r3
 800254a:	4807      	ldr	r0, [pc, #28]	; (8002568 <MX_TIM1_Init+0x158>)
 800254c:	f004 fc9a 	bl	8006e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8002556:	f000 f973 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800255a:	4803      	ldr	r0, [pc, #12]	; (8002568 <MX_TIM1_Init+0x158>)
 800255c:	f000 fa92 	bl	8002a84 <HAL_TIM_MspPostInit>

}
 8002560:	bf00      	nop
 8002562:	3770      	adds	r7, #112	; 0x70
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000200 	.word	0x20000200
 800256c:	40012c00 	.word	0x40012c00

08002570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08c      	sub	sp, #48	; 0x30
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002576:	f107 030c 	add.w	r3, r7, #12
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f00b f85e 	bl	800d640 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	463b      	mov	r3, r7
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800258e:	4b21      	ldr	r3, [pc, #132]	; (8002614 <MX_TIM2_Init+0xa4>)
 8002590:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002594:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <MX_TIM2_Init+0xa4>)
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <MX_TIM2_Init+0xa4>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <MX_TIM2_Init+0xa4>)
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <MX_TIM2_Init+0xa4>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <MX_TIM2_Init+0xa4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025b6:	2303      	movs	r3, #3
 80025b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025be:	2301      	movs	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025ce:	2301      	movs	r3, #1
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025d2:	2300      	movs	r3, #0
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80025da:	f107 030c 	add.w	r3, r7, #12
 80025de:	4619      	mov	r1, r3
 80025e0:	480c      	ldr	r0, [pc, #48]	; (8002614 <MX_TIM2_Init+0xa4>)
 80025e2:	f003 fde1 	bl	80061a8 <HAL_TIM_Encoder_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80025ec:	f000 f928 	bl	8002840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f0:	2300      	movs	r3, #0
 80025f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f8:	463b      	mov	r3, r7
 80025fa:	4619      	mov	r1, r3
 80025fc:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_TIM2_Init+0xa4>)
 80025fe:	f004 fbe1 	bl	8006dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002608:	f000 f91a 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800260c:	bf00      	nop
 800260e:	3730      	adds	r7, #48	; 0x30
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000024c 	.word	0x2000024c

08002618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800261c:	4b23      	ldr	r3, [pc, #140]	; (80026ac <MX_USART1_UART_Init+0x94>)
 800261e:	4a24      	ldr	r2, [pc, #144]	; (80026b0 <MX_USART1_UART_Init+0x98>)
 8002620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002622:	4b22      	ldr	r3, [pc, #136]	; (80026ac <MX_USART1_UART_Init+0x94>)
 8002624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <MX_USART1_UART_Init+0x94>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <MX_USART1_UART_Init+0x94>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <MX_USART1_UART_Init+0x94>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_USART1_UART_Init+0x94>)
 800263e:	220c      	movs	r2, #12
 8002640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <MX_USART1_UART_Init+0x94>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <MX_USART1_UART_Init+0x94>)
 800264a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800264e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <MX_USART1_UART_Init+0x94>)
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <MX_USART1_UART_Init+0x94>)
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <MX_USART1_UART_Init+0x94>)
 800265e:	2200      	movs	r2, #0
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002662:	4812      	ldr	r0, [pc, #72]	; (80026ac <MX_USART1_UART_Init+0x94>)
 8002664:	f004 fcb4 	bl	8006fd0 <HAL_UART_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800266e:	f000 f8e7 	bl	8002840 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002672:	2100      	movs	r1, #0
 8002674:	480d      	ldr	r0, [pc, #52]	; (80026ac <MX_USART1_UART_Init+0x94>)
 8002676:	f005 fe7a 	bl	800836e <HAL_UARTEx_SetTxFifoThreshold>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002680:	f000 f8de 	bl	8002840 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002684:	2100      	movs	r1, #0
 8002686:	4809      	ldr	r0, [pc, #36]	; (80026ac <MX_USART1_UART_Init+0x94>)
 8002688:	f005 feaf 	bl	80083ea <HAL_UARTEx_SetRxFifoThreshold>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002692:	f000 f8d5 	bl	8002840 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002696:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_USART1_UART_Init+0x94>)
 8002698:	f005 fe30 	bl	80082fc <HAL_UARTEx_DisableFifoMode>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80026a2:	f000 f8cd 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000298 	.word	0x20000298
 80026b0:	40013800 	.word	0x40013800

080026b4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <MX_USB_PCD_Init+0x48>)
 80026ba:	4a11      	ldr	r2, [pc, #68]	; (8002700 <MX_USB_PCD_Init+0x4c>)
 80026bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <MX_USB_PCD_Init+0x48>)
 80026c0:	2208      	movs	r2, #8
 80026c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <MX_USB_PCD_Init+0x48>)
 80026c6:	2202      	movs	r2, #2
 80026c8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <MX_USB_PCD_Init+0x48>)
 80026cc:	2202      	movs	r2, #2
 80026ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <MX_USB_PCD_Init+0x48>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <MX_USB_PCD_Init+0x48>)
 80026d8:	2200      	movs	r2, #0
 80026da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <MX_USB_PCD_Init+0x48>)
 80026de:	2200      	movs	r2, #0
 80026e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80026e2:	4b06      	ldr	r3, [pc, #24]	; (80026fc <MX_USB_PCD_Init+0x48>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80026e8:	4804      	ldr	r0, [pc, #16]	; (80026fc <MX_USB_PCD_Init+0x48>)
 80026ea:	f001 fc0f 	bl	8003f0c <HAL_PCD_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80026f4:	f000 f8a4 	bl	8002840 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	2000038c 	.word	0x2000038c
 8002700:	40006800 	.word	0x40006800

08002704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002708:	2004      	movs	r0, #4
 800270a:	f7ff fd49 	bl	80021a0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800270e:	2001      	movs	r0, #1
 8002710:	f7ff fd46 	bl	80021a0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8002714:	2200      	movs	r2, #0
 8002716:	210f      	movs	r1, #15
 8002718:	200b      	movs	r0, #11
 800271a:	f000 fe1c 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800271e:	200b      	movs	r0, #11
 8002720:	f000 fe33 	bl	800338a <HAL_NVIC_EnableIRQ>

}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}

08002728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800273c:	2004      	movs	r0, #4
 800273e:	f7ff fd48 	bl	80021d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff fd45 	bl	80021d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002748:	2002      	movs	r0, #2
 800274a:	f7ff fd42 	bl	80021d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800274e:	2008      	movs	r0, #8
 8002750:	f7ff fd3f 	bl	80021d2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYS_ENABLE_Pin|DIR_A_Pin, GPIO_PIN_RESET);
 8002754:	2200      	movs	r2, #0
 8002756:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800275a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275e:	f001 fafb 	bl	8003d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_Led_Pin|Red_Led_Pin|Blue_Led_Pin, GPIO_PIN_RESET);
 8002762:	2200      	movs	r2, #0
 8002764:	2123      	movs	r1, #35	; 0x23
 8002766:	4833      	ldr	r0, [pc, #204]	; (8002834 <MX_GPIO_Init+0x10c>)
 8002768:	f001 faf6 	bl	8003d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_B_GPIO_Port, DIR_B_Pin, GPIO_PIN_RESET);
 800276c:	2200      	movs	r2, #0
 800276e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002772:	4831      	ldr	r0, [pc, #196]	; (8002838 <MX_GPIO_Init+0x110>)
 8002774:	f001 faf0 	bl	8003d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SYS_ENABLE_Pin DIR_A_Pin */
  GPIO_InitStruct.Pin = SYS_ENABLE_Pin|DIR_A_Pin;
 8002778:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800277c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277e:	2301      	movs	r3, #1
 8002780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002792:	f001 f971 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002796:	2310      	movs	r3, #16
 8002798:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800279a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800279e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a0:	2301      	movs	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4823      	ldr	r0, [pc, #140]	; (8002838 <MX_GPIO_Init+0x110>)
 80027aa:	f001 f965 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_Led_Pin Red_Led_Pin Blue_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Red_Led_Pin|Blue_Led_Pin;
 80027ae:	2323      	movs	r3, #35	; 0x23
 80027b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ba:	2302      	movs	r3, #2
 80027bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	481c      	ldr	r0, [pc, #112]	; (8002834 <MX_GPIO_Init+0x10c>)
 80027c4:	f001 f958 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_B_Pin */
  GPIO_InitStruct.Pin = DIR_B_Pin;
 80027c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ce:	2301      	movs	r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DIR_B_GPIO_Port, &GPIO_InitStruct);
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4816      	ldr	r0, [pc, #88]	; (8002838 <MX_GPIO_Init+0x110>)
 80027e0:	f001 f94a 	bl	8003a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80027e4:	2303      	movs	r3, #3
 80027e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ee:	2301      	movs	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	4619      	mov	r1, r3
 80027f6:	4811      	ldr	r0, [pc, #68]	; (800283c <MX_GPIO_Init+0x114>)
 80027f8:	f001 f93e 	bl	8003a78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2100      	movs	r1, #0
 8002800:	2006      	movs	r0, #6
 8002802:	f000 fda8 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002806:	2006      	movs	r0, #6
 8002808:	f000 fdbf 	bl	800338a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	2007      	movs	r0, #7
 8002812:	f000 fda0 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002816:	2007      	movs	r0, #7
 8002818:	f000 fdb7 	bl	800338a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800281c:	2200      	movs	r2, #0
 800281e:	2100      	movs	r1, #0
 8002820:	200a      	movs	r0, #10
 8002822:	f000 fd98 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002826:	200a      	movs	r0, #10
 8002828:	f000 fdaf 	bl	800338a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800282c:	bf00      	nop
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	48000400 	.word	0x48000400
 8002838:	48000800 	.word	0x48000800
 800283c:	48000c00 	.word	0x48000c00

08002840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002844:	b672      	cpsid	i
}
 8002846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002848:	e7fe      	b.n	8002848 <Error_Handler+0x8>

0800284a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800284e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002856:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800285e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_AHB2_GRP1_EnableClock>:
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800287a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4313      	orrs	r3, r2
 8002882:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002890:	68fb      	ldr	r3, [r7, #12]
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_AHB3_GRP1_EnableClock>:
{
 800289e:	b480      	push	{r7}
 80028a0:	b085      	sub	sp, #20
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80028b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4013      	ands	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028c2:	68fb      	ldr	r3, [r7, #12]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_APB1_GRP1_EnableClock>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_APB2_GRP1_EnableClock>:
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4313      	orrs	r3, r2
 8002918:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4013      	ands	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002938:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800293c:	f7ff ffaf 	bl	800289e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002940:	2200      	movs	r2, #0
 8002942:	2100      	movs	r1, #0
 8002944:	202e      	movs	r0, #46	; 0x2e
 8002946:	f000 fd06 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800294a:	202e      	movs	r0, #46	; 0x2e
 800294c:	f000 fd1d 	bl	800338a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <HAL_IPCC_MspInit+0x44>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d113      	bne.n	800298e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002966:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800296a:	f7ff ff98 	bl	800289e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	202c      	movs	r0, #44	; 0x2c
 8002974:	f000 fcef 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002978:	202c      	movs	r0, #44	; 0x2c
 800297a:	f000 fd06 	bl	800338a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	202d      	movs	r0, #45	; 0x2d
 8002984:	f000 fce7 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002988:	202d      	movs	r0, #45	; 0x2d
 800298a:	f000 fcfe 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	58000c00 	.word	0x58000c00

0800299c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b096      	sub	sp, #88	; 0x58
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029a4:	f107 0308 	add.w	r3, r7, #8
 80029a8:	2250      	movs	r2, #80	; 0x50
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f00a fe47 	bl	800d640 <memset>
  if(hrtc->Instance==RTC)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <HAL_RTC_MspInit+0x64>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d11d      	bne.n	80029f8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029c0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80029c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029c8:	f107 0308 	add.w	r3, r7, #8
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fee9 	bl	80057a4 <HAL_RCCEx_PeriphCLKConfig>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80029d8:	f7ff ff32 	bl	8002840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029dc:	f7ff ff35 	bl	800284a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80029e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80029e4:	f7ff ff74 	bl	80028d0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2100      	movs	r1, #0
 80029ec:	2003      	movs	r0, #3
 80029ee:	f000 fcb2 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80029f2:	2003      	movs	r0, #3
 80029f4:	f000 fcc9 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80029f8:	bf00      	nop
 80029fa:	3758      	adds	r7, #88	; 0x58
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40002800 	.word	0x40002800

08002a04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <HAL_TIM_Base_MspInit+0x24>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d103      	bne.n	8002a1e <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a16:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a1a:	f7ff ff72 	bl	8002902 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40012c00 	.word	0x40012c00

08002a2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4c:	d116      	bne.n	8002a7c <HAL_TIM_Encoder_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f7ff ff3e 	bl	80028d0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7ff ff09 	bl	800286c <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	4619      	mov	r1, r3
 8002a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a78:	f000 fffe 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a7c:	bf00      	nop
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 030c 	add.w	r3, r7, #12
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0d      	ldr	r2, [pc, #52]	; (8002ad8 <HAL_TIM_MspPostInit+0x54>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d114      	bne.n	8002ad0 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f7ff fee0 	bl	800286c <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_SPEED_Pin;
 8002aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_SPEED_GPIO_Port, &GPIO_InitStruct);
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002acc:	f000 ffd4 	bl	8003a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40012c00 	.word	0x40012c00

08002adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b09c      	sub	sp, #112	; 0x70
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002af4:	f107 030c 	add.w	r3, r7, #12
 8002af8:	2250      	movs	r2, #80	; 0x50
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f00a fd9f 	bl	800d640 <memset>
  if(huart->Instance==USART1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a2e      	ldr	r2, [pc, #184]	; (8002bc0 <HAL_UART_MspInit+0xe4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d155      	bne.n	8002bb8 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f002 fe43 	bl	80057a4 <HAL_RCCEx_PeriphCLKConfig>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b24:	f7ff fe8c 	bl	8002840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b2c:	f7ff fee9 	bl	8002902 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b30:	2002      	movs	r0, #2
 8002b32:	f7ff fe9b 	bl	800286c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002b36:	23c0      	movs	r3, #192	; 0xc0
 8002b38:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b46:	2307      	movs	r3, #7
 8002b48:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b4e:	4619      	mov	r1, r3
 8002b50:	481c      	ldr	r0, [pc, #112]	; (8002bc4 <HAL_UART_MspInit+0xe8>)
 8002b52:	f000 ff91 	bl	8003a78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002b58:	4a1c      	ldr	r2, [pc, #112]	; (8002bcc <HAL_UART_MspInit+0xf0>)
 8002b5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002b5e:	220f      	movs	r2, #15
 8002b60:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b62:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002b64:	2210      	movs	r2, #16
 8002b66:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b68:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b6e:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b74:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b8c:	480e      	ldr	r0, [pc, #56]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002b8e:	f000 fc41 	bl	8003414 <HAL_DMA_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002b98:	f7ff fe52 	bl	8002840 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002ba0:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ba2:	4a09      	ldr	r2, [pc, #36]	; (8002bc8 <HAL_UART_MspInit+0xec>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2100      	movs	r1, #0
 8002bac:	2024      	movs	r0, #36	; 0x24
 8002bae:	f000 fbd2 	bl	8003356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bb2:	2024      	movs	r0, #36	; 0x24
 8002bb4:	f000 fbe9 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bb8:	bf00      	nop
 8002bba:	3770      	adds	r7, #112	; 0x70
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	48000400 	.word	0x48000400
 8002bc8:	2000032c 	.word	0x2000032c
 8002bcc:	40020008 	.word	0x40020008

08002bd0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b09c      	sub	sp, #112	; 0x70
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	2250      	movs	r2, #80	; 0x50
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f00a fd25 	bl	800d640 <memset>
  if(hpcd->Instance==USB)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <HAL_PCD_MspInit+0xa8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d136      	bne.n	8002c6e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c04:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002c06:	2318      	movs	r3, #24
 8002c08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c0e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002c16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002c1a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c20:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002c22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c26:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c28:	f107 030c 	add.w	r3, r7, #12
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f002 fdb9 	bl	80057a4 <HAL_RCCEx_PeriphCLKConfig>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002c38:	f7ff fe02 	bl	8002840 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7ff fe15 	bl	800286c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c42:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c46:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c50:	2300      	movs	r3, #0
 8002c52:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002c54:	230a      	movs	r3, #10
 8002c56:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c62:	f000 ff09 	bl	8003a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002c66:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002c6a:	f7ff fe31 	bl	80028d0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002c6e:	bf00      	nop
 8002c70:	3770      	adds	r7, #112	; 0x70
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40006800 	.word	0x40006800

08002c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c80:	e7fe      	b.n	8002c80 <NMI_Handler+0x4>

08002c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c86:	e7fe      	b.n	8002c86 <HardFault_Handler+0x4>

08002c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <MemManage_Handler+0x4>

08002c8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c92:	e7fe      	b.n	8002c92 <BusFault_Handler+0x4>

08002c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <UsageFault_Handler+0x4>

08002c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc8:	f000 f9d2 	bl	8003070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002cd4:	f7fe ff30 	bl	8001b38 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f001 f851 	bl	8003d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8002cee:	2002      	movs	r0, #2
 8002cf0:	f001 f84a 	bl	8003d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002cfc:	2010      	movs	r0, #16
 8002cfe:	f001 f843 	bl	8003d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <DMA1_Channel1_IRQHandler+0x10>)
 8002d0e:	f000 fd62 	bl	80037d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2000032c 	.word	0x2000032c

08002d1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <USART1_IRQHandler+0x10>)
 8002d22:	f004 fa25 	bl	8007170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000298 	.word	0x20000298

08002d30 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002d34:	f009 feb6 	bl	800caa4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002d40:	f009 fee6 	bl	800cb10 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002d4c:	f001 f834 	bl	8003db8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	e00a      	b.n	8002d7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d66:	f3af 8000 	nop.w
 8002d6a:	4601      	mov	r1, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	60ba      	str	r2, [r7, #8]
 8002d72:	b2ca      	uxtb	r2, r1
 8002d74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	dbf0      	blt.n	8002d66 <_read+0x12>
  }

  return len;
 8002d84:	687b      	ldr	r3, [r7, #4]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002db6:	605a      	str	r2, [r3, #4]
  return 0;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <_isatty>:

int _isatty(int file)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dce:	2301      	movs	r3, #1
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e00:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <_sbrk+0x5c>)
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <_sbrk+0x60>)
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <_sbrk+0x64>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d102      	bne.n	8002e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <_sbrk+0x64>)
 8002e16:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <_sbrk+0x68>)
 8002e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e1a:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <_sbrk+0x64>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4413      	add	r3, r2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d207      	bcs.n	8002e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e28:	f00a fc70 	bl	800d70c <__errno>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	220c      	movs	r2, #12
 8002e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	e009      	b.n	8002e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e38:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <_sbrk+0x64>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <_sbrk+0x64>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <_sbrk+0x64>)
 8002e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20030000 	.word	0x20030000
 8002e58:	00001000 	.word	0x00001000
 8002e5c:	20000668 	.word	0x20000668
 8002e60:	20001a90 	.word	0x20001a90

08002e64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002e68:	4b24      	ldr	r3, [pc, #144]	; (8002efc <SystemInit+0x98>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	4a23      	ldr	r2, [pc, #140]	; (8002efc <SystemInit+0x98>)
 8002e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002e90:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <SystemInit+0x9c>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eae:	f023 0305 	bic.w	r3, r3, #5
 8002eb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <SystemInit+0xa0>)
 8002ed0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <SystemInit+0xa0>)
 8002ed8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eee:	2200      	movs	r2, #0
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed00 	.word	0xe000ed00
 8002f00:	faf6fefb 	.word	0xfaf6fefb
 8002f04:	22041000 	.word	0x22041000

08002f08 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002f08:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f0a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0c:	3304      	adds	r3, #4

08002f0e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f0e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f10:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002f12:	d3f9      	bcc.n	8002f08 <CopyDataInit>
  bx lr
 8002f14:	4770      	bx	lr

08002f16 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002f16:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002f18:	3004      	adds	r0, #4

08002f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002f1a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002f1c:	d3fb      	bcc.n	8002f16 <FillZerobss>
  bx lr
 8002f1e:	4770      	bx	lr

08002f20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f20:	480c      	ldr	r0, [pc, #48]	; (8002f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f22:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f24:	f7ff ff9e 	bl	8002e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002f28:	480b      	ldr	r0, [pc, #44]	; (8002f58 <LoopForever+0x6>)
 8002f2a:	490c      	ldr	r1, [pc, #48]	; (8002f5c <LoopForever+0xa>)
 8002f2c:	4a0c      	ldr	r2, [pc, #48]	; (8002f60 <LoopForever+0xe>)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f7ff ffed 	bl	8002f0e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002f34:	480b      	ldr	r0, [pc, #44]	; (8002f64 <LoopForever+0x12>)
 8002f36:	490c      	ldr	r1, [pc, #48]	; (8002f68 <LoopForever+0x16>)
 8002f38:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <LoopForever+0x1a>)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f7ff ffe7 	bl	8002f0e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002f40:	480b      	ldr	r0, [pc, #44]	; (8002f70 <LoopForever+0x1e>)
 8002f42:	490c      	ldr	r1, [pc, #48]	; (8002f74 <LoopForever+0x22>)
 8002f44:	2300      	movs	r3, #0
 8002f46:	f7ff ffe8 	bl	8002f1a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f4a:	f00a fbe5 	bl	800d718 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002f4e:	f7ff f959 	bl	8002204 <main>

08002f52 <LoopForever>:

LoopForever:
  b LoopForever
 8002f52:	e7fe      	b.n	8002f52 <LoopForever>
  ldr   r0, =_estack
 8002f54:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002f58:	20000008 	.word	0x20000008
 8002f5c:	20000094 	.word	0x20000094
 8002f60:	0800fa48 	.word	0x0800fa48
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002f64:	200301e4 	.word	0x200301e4
 8002f68:	20030a67 	.word	0x20030a67
 8002f6c:	0800fb1a 	.word	0x0800fb1a
  INIT_BSS _sbss, _ebss
 8002f70:	200000e0 	.word	0x200000e0
 8002f74:	20001a90 	.word	0x20001a90

08002f78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f78:	e7fe      	b.n	8002f78 <ADC1_IRQHandler>
	...

08002f7c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6053      	str	r3, [r2, #4]
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e0042000 	.word	0xe0042000

08002f9c <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002fa6:	f043 0302 	orr.w	r3, r3, #2
 8002faa:	6053      	str	r3, [r2, #4]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e0042000 	.word	0xe0042000

08002fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <HAL_Init+0x3c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <HAL_Init+0x3c>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd2:	2003      	movs	r0, #3
 8002fd4:	f000 f9b4 	bl	8003340 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f000 f80f 	bl	8002ffc <HAL_InitTick>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	71fb      	strb	r3, [r7, #7]
 8002fe8:	e001      	b.n	8002fee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fea:	f7ff fca3 	bl	8002934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fee:	79fb      	ldrb	r3, [r7, #7]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	58004000 	.word	0x58004000

08002ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_InitTick+0x6c>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d024      	beq.n	800305a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003010:	f002 f928 	bl	8005264 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <HAL_InitTick+0x6c>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	4619      	mov	r1, r3
 800301c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003020:	fbb3 f3f1 	udiv	r3, r3, r1
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f9ca 	bl	80033c2 <HAL_SYSTICK_Config>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10f      	bne.n	8003054 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b0f      	cmp	r3, #15
 8003038:	d809      	bhi.n	800304e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800303a:	2200      	movs	r2, #0
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	f04f 30ff 	mov.w	r0, #4294967295
 8003042:	f000 f988 	bl	8003356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <HAL_InitTick+0x70>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	e007      	b.n	800305e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
 8003052:	e004      	b.n	800305e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
 8003058:	e001      	b.n	800305e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20000010 	.word	0x20000010
 800306c:	2000000c 	.word	0x2000000c

08003070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_IncTick+0x20>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_IncTick+0x24>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4413      	add	r3, r2
 8003080:	4a04      	ldr	r2, [pc, #16]	; (8003094 <HAL_IncTick+0x24>)
 8003082:	6013      	str	r3, [r2, #0]
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000010 	.word	0x20000010
 8003094:	2000066c 	.word	0x2000066c

08003098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return uwTick;
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <HAL_GetTick+0x14>)
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	2000066c 	.word	0x2000066c

080030b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <HAL_GetTickPrio+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	2000000c 	.word	0x2000000c

080030c8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80030cc:	f7ff ff56 	bl	8002f7c <LL_DBGMCU_EnableDBGSleepMode>
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80030d8:	f7ff ff60 	bl	8002f9c <LL_DBGMCU_EnableDBGStopMode>
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}

080030e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <__NVIC_SetPriorityGrouping+0x44>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030fc:	4013      	ands	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800310c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003112:	4a04      	ldr	r2, [pc, #16]	; (8003124 <__NVIC_SetPriorityGrouping+0x44>)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	60d3      	str	r3, [r2, #12]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <__NVIC_GetPriorityGrouping+0x18>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	f003 0307 	and.w	r3, r3, #7
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	2b00      	cmp	r3, #0
 8003154:	db0b      	blt.n	800316e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	f003 021f 	and.w	r2, r3, #31
 800315c:	4907      	ldr	r1, [pc, #28]	; (800317c <__NVIC_EnableIRQ+0x38>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2001      	movs	r0, #1
 8003166:	fa00 f202 	lsl.w	r2, r0, r2
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000e100 	.word	0xe000e100

08003180 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	2b00      	cmp	r3, #0
 8003190:	db12      	blt.n	80031b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	490a      	ldr	r1, [pc, #40]	; (80031c4 <__NVIC_DisableIRQ+0x44>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2001      	movs	r0, #1
 80031a2:	fa00 f202 	lsl.w	r2, r0, r2
 80031a6:	3320      	adds	r3, #32
 80031a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80031ac:	f3bf 8f4f 	dsb	sy
}
 80031b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031b2:	f3bf 8f6f 	isb	sy
}
 80031b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000e100 	.word	0xe000e100

080031c8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	db0c      	blt.n	80031f4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	4907      	ldr	r1, [pc, #28]	; (8003200 <__NVIC_SetPendingIRQ+0x38>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2001      	movs	r0, #1
 80031ea:	fa00 f202 	lsl.w	r2, r0, r2
 80031ee:	3340      	adds	r3, #64	; 0x40
 80031f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000e100 	.word	0xe000e100

08003204 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	db0c      	blt.n	8003230 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4907      	ldr	r1, [pc, #28]	; (800323c <__NVIC_ClearPendingIRQ+0x38>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2001      	movs	r0, #1
 8003226:	fa00 f202 	lsl.w	r2, r0, r2
 800322a:	3360      	adds	r3, #96	; 0x60
 800322c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000e100 	.word	0xe000e100

08003240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0a      	blt.n	800326a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	490c      	ldr	r1, [pc, #48]	; (800328c <__NVIC_SetPriority+0x4c>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	440b      	add	r3, r1
 8003264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003268:	e00a      	b.n	8003280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4908      	ldr	r1, [pc, #32]	; (8003290 <__NVIC_SetPriority+0x50>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3b04      	subs	r3, #4
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	440b      	add	r3, r1
 800327e:	761a      	strb	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f1c3 0307 	rsb	r3, r3, #7
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	bf28      	it	cs
 80032b2:	2304      	movcs	r3, #4
 80032b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d902      	bls.n	80032c4 <NVIC_EncodePriority+0x30>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3b03      	subs	r3, #3
 80032c2:	e000      	b.n	80032c6 <NVIC_EncodePriority+0x32>
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	401a      	ands	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43d9      	mvns	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	4313      	orrs	r3, r2
         );
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	; 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330c:	d301      	bcc.n	8003312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330e:	2301      	movs	r3, #1
 8003310:	e00f      	b.n	8003332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <SysTick_Config+0x40>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331a:	210f      	movs	r1, #15
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f7ff ff8e 	bl	8003240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <SysTick_Config+0x40>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <SysTick_Config+0x40>)
 800332c:	2207      	movs	r2, #7
 800332e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010

08003340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff fec9 	bl	80030e0 <__NVIC_SetPriorityGrouping>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003364:	f7ff fee0 	bl	8003128 <__NVIC_GetPriorityGrouping>
 8003368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	6978      	ldr	r0, [r7, #20]
 8003370:	f7ff ff90 	bl	8003294 <NVIC_EncodePriority>
 8003374:	4602      	mov	r2, r0
 8003376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff5f 	bl	8003240 <__NVIC_SetPriority>
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fed3 	bl	8003144 <__NVIC_EnableIRQ>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fee3 	bl	8003180 <__NVIC_DisableIRQ>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ff96 	bl	80032fc <SysTick_Config>
 80033d0:	4603      	mov	r3, r0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff feed 	bl	80031c8 <__NVIC_SetPendingIRQ>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fefd 	bl	8003204 <__NVIC_ClearPendingIRQ>
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e08e      	b.n	8003544 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_DMA_Init+0x138>)
 800342e:	429a      	cmp	r2, r3
 8003430:	d80f      	bhi.n	8003452 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	4b45      	ldr	r3, [pc, #276]	; (8003550 <HAL_DMA_Init+0x13c>)
 800343a:	4413      	add	r3, r2
 800343c:	4a45      	ldr	r2, [pc, #276]	; (8003554 <HAL_DMA_Init+0x140>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	091b      	lsrs	r3, r3, #4
 8003444:	009a      	lsls	r2, r3, #2
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a42      	ldr	r2, [pc, #264]	; (8003558 <HAL_DMA_Init+0x144>)
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
 8003450:	e00e      	b.n	8003470 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	4b40      	ldr	r3, [pc, #256]	; (800355c <HAL_DMA_Init+0x148>)
 800345a:	4413      	add	r3, r2
 800345c:	4a3d      	ldr	r2, [pc, #244]	; (8003554 <HAL_DMA_Init+0x140>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	009a      	lsls	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a3c      	ldr	r2, [pc, #240]	; (8003560 <HAL_DMA_Init+0x14c>)
 800346e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003494:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa74 	bl	80039b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034d0:	d102      	bne.n	80034d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80034e4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034ee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d010      	beq.n	800351a <HAL_DMA_Init+0x106>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d80c      	bhi.n	800351a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fa93 	bl	8003a2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	e008      	b.n	800352c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40020407 	.word	0x40020407
 8003550:	bffdfff8 	.word	0xbffdfff8
 8003554:	cccccccd 	.word	0xcccccccd
 8003558:	40020000 	.word	0x40020000
 800355c:	bffdfbf8 	.word	0xbffdfbf8
 8003560:	40020400 	.word	0x40020400

08003564 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_DMA_Start_IT+0x20>
 8003580:	2302      	movs	r3, #2
 8003582:	e066      	b.n	8003652 <HAL_DMA_Start_IT+0xee>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d155      	bne.n	8003644 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f9b9 	bl	8003934 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 020e 	orr.w	r2, r2, #14
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e00f      	b.n	80035fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0204 	bic.w	r2, r2, #4
 80035ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 020a 	orr.w	r2, r2, #10
 80035fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003618:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003630:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e005      	b.n	8003650 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800364c:	2302      	movs	r3, #2
 800364e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003650:	7dfb      	ldrb	r3, [r7, #23]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e04f      	b.n	800370c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d008      	beq.n	800368a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2204      	movs	r2, #4
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e040      	b.n	800370c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 020e 	bic.w	r2, r2, #14
 8003698:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0201 	bic.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f003 021c 	and.w	r2, r3, #28
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	2101      	movs	r1, #1
 80036c8:	fa01 f202 	lsl.w	r2, r1, r2
 80036cc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00c      	beq.n	80036fa <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036f8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d005      	beq.n	800373c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2204      	movs	r2, #4
 8003734:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	e047      	b.n	80037cc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 020e 	bic.w	r2, r2, #14
 800374a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800376a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003770:	f003 021c 	and.w	r2, r3, #28
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f202 	lsl.w	r2, r1, r2
 800377e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003788:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00c      	beq.n	80037ac <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
    }
  }
  return status;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	f003 031c 	and.w	r3, r3, #28
 80037f6:	2204      	movs	r2, #4
 80037f8:	409a      	lsls	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	4013      	ands	r3, r2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d026      	beq.n	8003850 <HAL_DMA_IRQHandler+0x7a>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d021      	beq.n	8003850 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d107      	bne.n	800382a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0204 	bic.w	r2, r2, #4
 8003828:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f003 021c 	and.w	r2, r3, #28
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	2104      	movs	r1, #4
 8003838:	fa01 f202 	lsl.w	r2, r1, r2
 800383c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	2b00      	cmp	r3, #0
 8003844:	d071      	beq.n	800392a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800384e:	e06c      	b.n	800392a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	f003 031c 	and.w	r3, r3, #28
 8003858:	2202      	movs	r2, #2
 800385a:	409a      	lsls	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02e      	beq.n	80038c2 <HAL_DMA_IRQHandler+0xec>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d029      	beq.n	80038c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10b      	bne.n	8003894 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020a 	bic.w	r2, r2, #10
 800388a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	f003 021c 	and.w	r2, r3, #28
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	2102      	movs	r1, #2
 80038a2:	fa01 f202 	lsl.w	r2, r1, r2
 80038a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d038      	beq.n	800392a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038c0:	e033      	b.n	800392a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f003 031c 	and.w	r3, r3, #28
 80038ca:	2208      	movs	r2, #8
 80038cc:	409a      	lsls	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d02a      	beq.n	800392c <HAL_DMA_IRQHandler+0x156>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d025      	beq.n	800392c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 020e 	bic.w	r2, r2, #14
 80038ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	f003 021c 	and.w	r2, r3, #28
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	2101      	movs	r1, #1
 80038fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003902:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391e:	2b00      	cmp	r3, #0
 8003920:	d004      	beq.n	800392c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800392a:	bf00      	nop
 800392c:	bf00      	nop
}
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800394a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800395c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	f003 021c 	and.w	r2, r3, #28
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f202 	lsl.w	r2, r1, r2
 8003970:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b10      	cmp	r3, #16
 8003980:	d108      	bne.n	8003994 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003992:	e007      	b.n	80039a4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b17      	ldr	r3, [pc, #92]	; (8003a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d80a      	bhi.n	80039da <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	089b      	lsrs	r3, r3, #2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039d0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6493      	str	r3, [r2, #72]	; 0x48
 80039d8:	e007      	b.n	80039ea <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	089b      	lsrs	r3, r3, #2
 80039e0:	009a      	lsls	r2, r3, #2
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80039e4:	4413      	add	r3, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	3b08      	subs	r3, #8
 80039f2:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a00:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	2201      	movs	r2, #1
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	40020407 	.word	0x40020407
 8003a20:	4002081c 	.word	0x4002081c
 8003a24:	cccccccd 	.word	0xcccccccd
 8003a28:	40020880 	.word	0x40020880

08003a2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	461a      	mov	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003a50:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	1000823f 	.word	0x1000823f
 8003a74:	40020940 	.word	0x40020940

08003a78 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a86:	e14c      	b.n	8003d22 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	4013      	ands	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 813e 	beq.w	8003d1c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d005      	beq.n	8003ab8 <HAL_GPIO_Init+0x40>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d130      	bne.n	8003b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aee:	2201      	movs	r2, #1
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 0201 	and.w	r2, r3, #1
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d017      	beq.n	8003b56 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2203      	movs	r2, #3
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d123      	bne.n	8003baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	08da      	lsrs	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3208      	adds	r2, #8
 8003b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	220f      	movs	r2, #15
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	08da      	lsrs	r2, r3, #3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3208      	adds	r2, #8
 8003ba4:	6939      	ldr	r1, [r7, #16]
 8003ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 0203 	and.w	r2, r3, #3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8098 	beq.w	8003d1c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003bec:	4a54      	ldr	r2, [pc, #336]	; (8003d40 <HAL_GPIO_Init+0x2c8>)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	089b      	lsrs	r3, r3, #2
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	220f      	movs	r2, #15
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c16:	d019      	beq.n	8003c4c <HAL_GPIO_Init+0x1d4>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a4a      	ldr	r2, [pc, #296]	; (8003d44 <HAL_GPIO_Init+0x2cc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d013      	beq.n	8003c48 <HAL_GPIO_Init+0x1d0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a49      	ldr	r2, [pc, #292]	; (8003d48 <HAL_GPIO_Init+0x2d0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00d      	beq.n	8003c44 <HAL_GPIO_Init+0x1cc>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a48      	ldr	r2, [pc, #288]	; (8003d4c <HAL_GPIO_Init+0x2d4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <HAL_GPIO_Init+0x1c8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a47      	ldr	r2, [pc, #284]	; (8003d50 <HAL_GPIO_Init+0x2d8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d101      	bne.n	8003c3c <HAL_GPIO_Init+0x1c4>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	e008      	b.n	8003c4e <HAL_GPIO_Init+0x1d6>
 8003c3c:	2307      	movs	r3, #7
 8003c3e:	e006      	b.n	8003c4e <HAL_GPIO_Init+0x1d6>
 8003c40:	2303      	movs	r3, #3
 8003c42:	e004      	b.n	8003c4e <HAL_GPIO_Init+0x1d6>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e002      	b.n	8003c4e <HAL_GPIO_Init+0x1d6>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_GPIO_Init+0x1d6>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	f002 0203 	and.w	r2, r2, #3
 8003c54:	0092      	lsls	r2, r2, #2
 8003c56:	4093      	lsls	r3, r2
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c5e:	4938      	ldr	r1, [pc, #224]	; (8003d40 <HAL_GPIO_Init+0x2c8>)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	089b      	lsrs	r3, r3, #2
 8003c64:	3302      	adds	r3, #2
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c6c:	4b39      	ldr	r3, [pc, #228]	; (8003d54 <HAL_GPIO_Init+0x2dc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c90:	4a30      	ldr	r2, [pc, #192]	; (8003d54 <HAL_GPIO_Init+0x2dc>)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <HAL_GPIO_Init+0x2dc>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cba:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <HAL_GPIO_Init+0x2dc>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003cc0:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HAL_GPIO_Init+0x2dc>)
 8003cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ce6:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <HAL_GPIO_Init+0x2dc>)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003cee:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_GPIO_Init+0x2dc>)
 8003cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d14:	4a0f      	ldr	r2, [pc, #60]	; (8003d54 <HAL_GPIO_Init+0x2dc>)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f47f aeab 	bne.w	8003a88 <HAL_GPIO_Init+0x10>
  }
}
 8003d32:	bf00      	nop
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	40010000 	.word	0x40010000
 8003d44:	48000400 	.word	0x48000400
 8003d48:	48000800 	.word	0x48000800
 8003d4c:	48000c00 	.word	0x48000c00
 8003d50:	48001000 	.word	0x48001000
 8003d54:	58000800 	.word	0x58000800

08003d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	807b      	strh	r3, [r7, #2]
 8003d64:	4613      	mov	r3, r2
 8003d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d68:	787b      	ldrb	r3, [r7, #1]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d6e:	887a      	ldrh	r2, [r7, #2]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d74:	e002      	b.n	8003d7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d006      	beq.n	8003dac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d9e:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd fb5c 	bl	8001464 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	58000800 	.word	0x58000800

08003db8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_HSEM_IRQHandler+0x30>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_HSEM_IRQHandler+0x30>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	4906      	ldr	r1, [pc, #24]	; (8003de8 <HAL_HSEM_IRQHandler+0x30>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003dd2:	4a05      	ldr	r2, [pc, #20]	; (8003de8 <HAL_HSEM_IRQHandler+0x30>)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f807 	bl	8003dec <HAL_HSEM_FreeCallback>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	58001500 	.word	0x58001500

08003dec <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01e      	beq.n	8003e50 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003e12:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <HAL_IPCC_Init+0x60>)
 8003e14:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fe fd96 	bl	8002954 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003e28:	68b8      	ldr	r0, [r7, #8]
 8003e2a:	f000 f85b 	bl	8003ee4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f82c 	bl	8003e98 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003e4e:	e001      	b.n	8003e54 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	58000c00 	.word	0x58000c00

08003e64 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	e00f      	b.n	8003ec6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <IPCC_SetDefaultCallbacks+0x44>)
 8003eb0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	3306      	adds	r3, #6
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <IPCC_SetDefaultCallbacks+0x48>)
 8003ebe:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d9ec      	bls.n	8003ea6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	08003e65 	.word	0x08003e65
 8003ee0:	08003e7f 	.word	0x08003e7f

08003ee4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	223f      	movs	r2, #63	; 0x3f
 8003efe:	609a      	str	r2, [r3, #8]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e0c0      	b.n	80040a0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fe fe4c 	bl	8002bd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f004 fadd 	bl	8008504 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	e03e      	b.n	8003fce <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3311      	adds	r3, #17
 8003f60:	2201      	movs	r2, #1
 8003f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	440b      	add	r3, r1
 8003f72:	3310      	adds	r3, #16
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f78:	7bfa      	ldrb	r2, [r7, #15]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	440b      	add	r3, r1
 8003f86:	3313      	adds	r3, #19
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f8c:	7bfa      	ldrb	r2, [r7, #15]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	440b      	add	r3, r1
 8003f9a:	3320      	adds	r3, #32
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fa0:	7bfa      	ldrb	r2, [r7, #15]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	440b      	add	r3, r1
 8003fae:	3324      	adds	r3, #36	; 0x24
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	440b      	add	r3, r1
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	791b      	ldrb	r3, [r3, #4]
 8003fd2:	7bfa      	ldrb	r2, [r7, #15]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d3bb      	bcc.n	8003f50 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
 8003fdc:	e044      	b.n	8004068 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	440b      	add	r3, r1
 8003fec:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	440b      	add	r3, r1
 8004002:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	440b      	add	r3, r1
 8004018:	f203 1353 	addw	r3, r3, #339	; 0x153
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800404c:	7bfa      	ldrb	r2, [r7, #15]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	440b      	add	r3, r1
 800405a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	3301      	adds	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	791b      	ldrb	r3, [r3, #4]
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	429a      	cmp	r2, r3
 8004070:	d3b5      	bcc.n	8003fde <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800407e:	f004 fa5c 	bl	800853a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7a9b      	ldrb	r3, [r3, #10]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d102      	bne.n	800409e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f805 	bl	80040a8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f043 0302 	orr.w	r3, r3, #2
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a04      	ldr	r2, [pc, #16]	; (8004118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410a:	6013      	str	r3, [r2, #0]
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	58000400 	.word	0x58000400

0800411c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004120:	4b04      	ldr	r3, [pc, #16]	; (8004134 <HAL_PWREx_GetVoltageRange+0x18>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	58000400 	.word	0x58000400

08004138 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800414a:	d101      	bne.n	8004150 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <LL_RCC_HSE_Enable>:
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800416a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416e:	6013      	str	r3, [r2, #0]
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <LL_RCC_HSE_Disable>:
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418c:	6013      	str	r3, [r2, #0]
}
 800418e:	bf00      	nop
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_RCC_HSE_IsReady>:
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041aa:	d101      	bne.n	80041b0 <LL_RCC_HSE_IsReady+0x18>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <LL_RCC_HSE_IsReady+0x1a>
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <LL_RCC_HSI_Enable>:
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80041c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	6013      	str	r3, [r2, #0]
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <LL_RCC_HSI_Disable>:
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80041de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ec:	6013      	str	r3, [r2, #0]
}
 80041ee:	bf00      	nop
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_RCC_HSI_IsReady>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420a:	d101      	bne.n	8004210 <LL_RCC_HSI_IsReady+0x18>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <LL_RCC_HSI_IsReady+0x1a>
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_RCC_HSI_SetCalibTrimming>:
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004236:	4313      	orrs	r3, r2
 8004238:	604b      	str	r3, [r1, #4]
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <LL_RCC_HSI48_Enable>:
{
 8004246:	b480      	push	{r7}
 8004248:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800424a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800425e:	bf00      	nop
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <LL_RCC_HSI48_Disable>:
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800426c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <LL_RCC_HSI48_IsReady>:
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800428e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b02      	cmp	r3, #2
 800429c:	d101      	bne.n	80042a2 <LL_RCC_HSI48_IsReady+0x18>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <LL_RCC_HSI48_IsReady+0x1a>
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_RCC_LSE_Enable>:
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042c6:	bf00      	nop
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <LL_RCC_LSE_Disable>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <LL_RCC_LSE_EnableBypass>:
{
 80042f2:	b480      	push	{r7}
 80042f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80042f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004302:	f043 0304 	orr.w	r3, r3, #4
 8004306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800430a:	bf00      	nop
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <LL_RCC_LSE_DisableBypass>:
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <LL_RCC_LSE_IsReady>:
{
 8004336:	b480      	push	{r7}
 8004338:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800433a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b02      	cmp	r3, #2
 8004348:	d101      	bne.n	800434e <LL_RCC_LSE_IsReady+0x18>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <LL_RCC_LSE_IsReady+0x1a>
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <LL_RCC_LSI1_Enable>:
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800435e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004372:	bf00      	nop
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_RCC_LSI1_Disable>:
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <LL_RCC_LSI1_IsReady>:
{
 800439e:	b480      	push	{r7}
 80043a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80043a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d101      	bne.n	80043b6 <LL_RCC_LSI1_IsReady+0x18>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <LL_RCC_LSI1_IsReady+0x1a>
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <LL_RCC_LSI2_Enable>:
{
 80043c2:	b480      	push	{r7}
 80043c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d2:	f043 0304 	orr.w	r3, r3, #4
 80043d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80043da:	bf00      	nop
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <LL_RCC_LSI2_Disable>:
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043f4:	f023 0304 	bic.w	r3, r3, #4
 80043f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_RCC_LSI2_IsReady>:
{
 8004406:	b480      	push	{r7}
 8004408:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800440a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800440e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b08      	cmp	r3, #8
 8004418:	d101      	bne.n	800441e <LL_RCC_LSI2_IsReady+0x18>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <LL_RCC_LSI2_IsReady+0x1a>
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <LL_RCC_LSI2_SetTrimming>:
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_RCC_MSI_Enable>:
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800445c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6013      	str	r3, [r2, #0]
}
 800446c:	bf00      	nop
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_RCC_MSI_Disable>:
{
 8004476:	b480      	push	{r7}
 8004478:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800447a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	6013      	str	r3, [r2, #0]
}
 800448a:	bf00      	nop
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_RCC_MSI_IsReady>:
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d101      	bne.n	80044aa <LL_RCC_MSI_IsReady+0x16>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <LL_RCC_MSI_IsReady+0x18>
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_RCC_MSI_SetRange>:
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80044be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_RCC_MSI_GetRange>:
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80044e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2bb0      	cmp	r3, #176	; 0xb0
 80044f4:	d901      	bls.n	80044fa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80044f6:	23b0      	movs	r3, #176	; 0xb0
 80044f8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80044fa:	687b      	ldr	r3, [r7, #4]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004522:	4313      	orrs	r3, r2
 8004524:	604b      	str	r3, [r1, #4]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <LL_RCC_SetSysClkSource>:
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800453a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f023 0203 	bic.w	r2, r3, #3
 8004544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <LL_RCC_GetSysClkSource>:
{
 800455a:	b480      	push	{r7}
 800455c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800455e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 030c 	and.w	r3, r3, #12
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <LL_RCC_SetAHBPrescaler>:
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800457a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <LL_C2_RCC_SetAHBPrescaler>:
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <LL_RCC_SetAHB4Prescaler>:
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80045ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045d6:	f023 020f 	bic.w	r2, r3, #15
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <LL_RCC_SetAPB1Prescaler>:
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80045fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4313      	orrs	r3, r2
 800460e:	608b      	str	r3, [r1, #8]
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_RCC_SetAPB2Prescaler>:
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800462e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4313      	orrs	r3, r2
 8004636:	608b      	str	r3, [r1, #8]
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <LL_RCC_GetAHBPrescaler>:
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004652:	4618      	mov	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <LL_RCC_GetAHB4Prescaler>:
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004664:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800466e:	4618      	mov	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <LL_RCC_GetAPB1Prescaler>:
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800467c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <LL_RCC_GetAPB2Prescaler>:
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800469e:	4618      	mov	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80046ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ba:	6013      	str	r3, [r2, #0]
}
 80046bc:	bf00      	nop
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80046c6:	b480      	push	{r7}
 80046c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80046ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d8:	6013      	str	r3, [r2, #0]
}
 80046da:	bf00      	nop
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80046e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f6:	d101      	bne.n	80046fc <LL_RCC_PLL_IsReady+0x18>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <LL_RCC_PLL_IsReady+0x1a>
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800470c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	0a1b      	lsrs	r3, r3, #8
 8004714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004722:	b480      	push	{r7}
 8004724:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800473a:	b480      	push	{r7}
 800473c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800473e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004748:	4618      	mov	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0303 	and.w	r3, r3, #3
}
 8004760:	4618      	mov	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d101      	bne.n	8004782 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800478e:	b480      	push	{r7}
 8004790:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004796:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047a2:	d101      	bne.n	80047a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80047b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d101      	bne.n	80047ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80047da:	b480      	push	{r7}
 80047dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80047de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047ec:	d101      	bne.n	80047f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800480c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004810:	d101      	bne.n	8004816 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b08d      	sub	sp, #52	; 0x34
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e363      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 808d 	beq.w	800495e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004844:	f7ff fe89 	bl	800455a <LL_RCC_GetSysClkSource>
 8004848:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800484a:	f7ff ff82 	bl	8004752 <LL_RCC_PLL_GetMainSource>
 800484e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <HAL_RCC_OscConfig+0x3e>
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	2b0c      	cmp	r3, #12
 800485a:	d147      	bne.n	80048ec <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	2b01      	cmp	r3, #1
 8004860:	d144      	bne.n	80048ec <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e347      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004872:	f7ff fe34 	bl	80044de <LL_RCC_MSI_GetRange>
 8004876:	4603      	mov	r3, r0
 8004878:	429c      	cmp	r4, r3
 800487a:	d914      	bls.n	80048a6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fd2f 	bl	80052e4 <RCC_SetFlashLatencyFromMSIRange>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e336      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff fe0e 	bl	80044b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fe32 	bl	8004508 <LL_RCC_MSI_SetCalibTrimming>
 80048a4:	e013      	b.n	80048ce <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fe03 	bl	80044b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff fe27 	bl	8004508 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fd10 	bl	80052e4 <RCC_SetFlashLatencyFromMSIRange>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e317      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80048ce:	f000 fcc9 	bl	8005264 <HAL_RCC_GetHCLKFreq>
 80048d2:	4603      	mov	r3, r0
 80048d4:	4aa4      	ldr	r2, [pc, #656]	; (8004b68 <HAL_RCC_OscConfig+0x344>)
 80048d6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048d8:	4ba4      	ldr	r3, [pc, #656]	; (8004b6c <HAL_RCC_OscConfig+0x348>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe fb8d 	bl	8002ffc <HAL_InitTick>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d039      	beq.n	800495c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e308      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01e      	beq.n	8004932 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048f4:	f7ff fdb0 	bl	8004458 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048f8:	f7fe fbce 	bl	8003098 <HAL_GetTick>
 80048fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004900:	f7fe fbca 	bl	8003098 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e2f5      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004912:	f7ff fdbf 	bl	8004494 <LL_RCC_MSI_IsReady>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f1      	beq.n	8004900 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fdc8 	bl	80044b6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fdec 	bl	8004508 <LL_RCC_MSI_SetCalibTrimming>
 8004930:	e015      	b.n	800495e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004932:	f7ff fda0 	bl	8004476 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004936:	f7fe fbaf 	bl	8003098 <HAL_GetTick>
 800493a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800493e:	f7fe fbab 	bl	8003098 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e2d6      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004950:	f7ff fda0 	bl	8004494 <LL_RCC_MSI_IsReady>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f1      	bne.n	800493e <HAL_RCC_OscConfig+0x11a>
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800495c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d047      	beq.n	80049fa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800496a:	f7ff fdf6 	bl	800455a <LL_RCC_GetSysClkSource>
 800496e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004970:	f7ff feef 	bl	8004752 <LL_RCC_PLL_GetMainSource>
 8004974:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d005      	beq.n	8004988 <HAL_RCC_OscConfig+0x164>
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d108      	bne.n	8004994 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	2b03      	cmp	r3, #3
 8004986:	d105      	bne.n	8004994 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d134      	bne.n	80049fa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e2b4      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d102      	bne.n	80049a4 <HAL_RCC_OscConfig+0x180>
 800499e:	f7ff fbdd 	bl	800415c <LL_RCC_HSE_Enable>
 80049a2:	e001      	b.n	80049a8 <HAL_RCC_OscConfig+0x184>
 80049a4:	f7ff fbe9 	bl	800417a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d012      	beq.n	80049d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fe fb72 	bl	8003098 <HAL_GetTick>
 80049b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b8:	f7fe fb6e 	bl	8003098 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b64      	cmp	r3, #100	; 0x64
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e299      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80049ca:	f7ff fbe5 	bl	8004198 <LL_RCC_HSE_IsReady>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f1      	beq.n	80049b8 <HAL_RCC_OscConfig+0x194>
 80049d4:	e011      	b.n	80049fa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d6:	f7fe fb5f 	bl	8003098 <HAL_GetTick>
 80049da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80049dc:	e008      	b.n	80049f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049de:	f7fe fb5b 	bl	8003098 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b64      	cmp	r3, #100	; 0x64
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e286      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80049f0:	f7ff fbd2 	bl	8004198 <LL_RCC_HSE_IsReady>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f1      	bne.n	80049de <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d04c      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a06:	f7ff fda8 	bl	800455a <LL_RCC_GetSysClkSource>
 8004a0a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a0c:	f7ff fea1 	bl	8004752 <LL_RCC_PLL_GetMainSource>
 8004a10:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d005      	beq.n	8004a24 <HAL_RCC_OscConfig+0x200>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d10e      	bne.n	8004a3c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d10b      	bne.n	8004a3c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e266      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fbf1 	bl	800421c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a3a:	e031      	b.n	8004aa0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d019      	beq.n	8004a78 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a44:	f7ff fbba 	bl	80041bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fe fb26 	bl	8003098 <HAL_GetTick>
 8004a4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a50:	f7fe fb22 	bl	8003098 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e24d      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004a62:	f7ff fbc9 	bl	80041f8 <LL_RCC_HSI_IsReady>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f1      	beq.n	8004a50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff fbd3 	bl	800421c <LL_RCC_HSI_SetCalibTrimming>
 8004a76:	e013      	b.n	8004aa0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a78:	f7ff fbaf 	bl	80041da <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fe fb0c 	bl	8003098 <HAL_GetTick>
 8004a80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a84:	f7fe fb08 	bl	8003098 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e233      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004a96:	f7ff fbaf 	bl	80041f8 <LL_RCC_HSI_IsReady>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f1      	bne.n	8004a84 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80a3 	beq.w	8004c00 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d076      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d046      	beq.n	8004b5c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004ace:	f7ff fc66 	bl	800439e <LL_RCC_LSI1_IsReady>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d113      	bne.n	8004b00 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004ad8:	f7ff fc3f 	bl	800435a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004adc:	f7fe fadc 	bl	8003098 <HAL_GetTick>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ae4:	f7fe fad8 	bl	8003098 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e203      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004af6:	f7ff fc52 	bl	800439e <LL_RCC_LSI1_IsReady>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f1      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004b00:	f7ff fc5f 	bl	80043c2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fe fac8 	bl	8003098 <HAL_GetTick>
 8004b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b0c:	f7fe fac4 	bl	8003098 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e1ef      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004b1e:	f7ff fc72 	bl	8004406 <LL_RCC_LSI2_IsReady>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f1      	beq.n	8004b0c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff fc7c 	bl	800442a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004b32:	f7ff fc23 	bl	800437c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b36:	f7fe faaf 	bl	8003098 <HAL_GetTick>
 8004b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b3e:	f7fe faab 	bl	8003098 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e1d6      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004b50:	f7ff fc25 	bl	800439e <LL_RCC_LSI1_IsReady>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f1      	bne.n	8004b3e <HAL_RCC_OscConfig+0x31a>
 8004b5a:	e051      	b.n	8004c00 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004b5c:	f7ff fbfd 	bl	800435a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fe fa9a 	bl	8003098 <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004b66:	e00c      	b.n	8004b82 <HAL_RCC_OscConfig+0x35e>
 8004b68:	20000008 	.word	0x20000008
 8004b6c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004b70:	f7fe fa92 	bl	8003098 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e1bd      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004b82:	f7ff fc0c 	bl	800439e <LL_RCC_LSI1_IsReady>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f1      	beq.n	8004b70 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004b8c:	f7ff fc2a 	bl	80043e4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004b92:	f7fe fa81 	bl	8003098 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e1ac      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ba4:	f7ff fc2f 	bl	8004406 <LL_RCC_LSI2_IsReady>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f1      	bne.n	8004b92 <HAL_RCC_OscConfig+0x36e>
 8004bae:	e027      	b.n	8004c00 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004bb0:	f7ff fc18 	bl	80043e4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fe fa70 	bl	8003098 <HAL_GetTick>
 8004bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004bbc:	f7fe fa6c 	bl	8003098 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e197      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004bce:	f7ff fc1a 	bl	8004406 <LL_RCC_LSI2_IsReady>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f1      	bne.n	8004bbc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004bd8:	f7ff fbd0 	bl	800437c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fe fa5c 	bl	8003098 <HAL_GetTick>
 8004be0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004be4:	f7fe fa58 	bl	8003098 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e183      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004bf6:	f7ff fbd2 	bl	800439e <LL_RCC_LSI1_IsReady>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f1      	bne.n	8004be4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05b      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c0c:	4ba7      	ldr	r3, [pc, #668]	; (8004eac <HAL_RCC_OscConfig+0x688>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d114      	bne.n	8004c42 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004c18:	f7ff fa70 	bl	80040fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1c:	f7fe fa3c 	bl	8003098 <HAL_GetTick>
 8004c20:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c24:	f7fe fa38 	bl	8003098 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e163      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c36:	4b9d      	ldr	r3, [pc, #628]	; (8004eac <HAL_RCC_OscConfig+0x688>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d102      	bne.n	8004c50 <HAL_RCC_OscConfig+0x42c>
 8004c4a:	f7ff fb30 	bl	80042ae <LL_RCC_LSE_Enable>
 8004c4e:	e00c      	b.n	8004c6a <HAL_RCC_OscConfig+0x446>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b05      	cmp	r3, #5
 8004c56:	d104      	bne.n	8004c62 <HAL_RCC_OscConfig+0x43e>
 8004c58:	f7ff fb4b 	bl	80042f2 <LL_RCC_LSE_EnableBypass>
 8004c5c:	f7ff fb27 	bl	80042ae <LL_RCC_LSE_Enable>
 8004c60:	e003      	b.n	8004c6a <HAL_RCC_OscConfig+0x446>
 8004c62:	f7ff fb35 	bl	80042d0 <LL_RCC_LSE_Disable>
 8004c66:	f7ff fb55 	bl	8004314 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d014      	beq.n	8004c9c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c72:	f7fe fa11 	bl	8003098 <HAL_GetTick>
 8004c76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c78:	e00a      	b.n	8004c90 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7a:	f7fe fa0d 	bl	8003098 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e136      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c90:	f7ff fb51 	bl	8004336 <LL_RCC_LSE_IsReady>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0ef      	beq.n	8004c7a <HAL_RCC_OscConfig+0x456>
 8004c9a:	e013      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9c:	f7fe f9fc 	bl	8003098 <HAL_GetTick>
 8004ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ca2:	e00a      	b.n	8004cba <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca4:	f7fe f9f8 	bl	8003098 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e121      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004cba:	f7ff fb3c 	bl	8004336 <LL_RCC_LSE_IsReady>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1ef      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d02c      	beq.n	8004d2a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d014      	beq.n	8004d02 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cd8:	f7ff fab5 	bl	8004246 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cdc:	f7fe f9dc 	bl	8003098 <HAL_GetTick>
 8004ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ce4:	f7fe f9d8 	bl	8003098 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e103      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004cf6:	f7ff fac8 	bl	800428a <LL_RCC_HSI48_IsReady>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f1      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x4c0>
 8004d00:	e013      	b.n	8004d2a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d02:	f7ff fab1 	bl	8004268 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fe f9c7 	bl	8003098 <HAL_GetTick>
 8004d0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d0e:	f7fe f9c3 	bl	8003098 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e0ee      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004d20:	f7ff fab3 	bl	800428a <LL_RCC_HSI48_IsReady>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f1      	bne.n	8004d0e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80e4 	beq.w	8004efc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d34:	f7ff fc11 	bl	800455a <LL_RCC_GetSysClkSource>
 8004d38:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	f040 80b4 	bne.w	8004eb4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0203 	and.w	r2, r3, #3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d123      	bne.n	8004da2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d11c      	bne.n	8004da2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d114      	bne.n	8004da2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d10d      	bne.n	8004da2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d106      	bne.n	8004da2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d05d      	beq.n	8004e5e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	d058      	beq.n	8004e5a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e0a1      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dba:	f7ff fc84 	bl	80046c6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dbe:	f7fe f96b 	bl	8003098 <HAL_GetTick>
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fe f967 	bl	8003098 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e092      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1ef      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	4b30      	ldr	r3, [pc, #192]	; (8004eb0 <HAL_RCC_OscConfig+0x68c>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004df8:	4311      	orrs	r1, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dfe:	0212      	lsls	r2, r2, #8
 8004e00:	4311      	orrs	r1, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e06:	4311      	orrs	r1, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e0c:	4311      	orrs	r1, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e12:	430a      	orrs	r2, r1
 8004e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e1c:	f7ff fc44 	bl	80046a8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e30:	f7fe f932 	bl	8003098 <HAL_GetTick>
 8004e34:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e38:	f7fe f92e 	bl	8003098 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e059      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0ef      	beq.n	8004e38 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e58:	e050      	b.n	8004efc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e04f      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d147      	bne.n	8004efc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e6c:	f7ff fc1c 	bl	80046a8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e80:	f7fe f90a 	bl	8003098 <HAL_GetTick>
 8004e84:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fe f906 	bl	8003098 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e031      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0ef      	beq.n	8004e88 <HAL_RCC_OscConfig+0x664>
 8004ea8:	e028      	b.n	8004efc <HAL_RCC_OscConfig+0x6d8>
 8004eaa:	bf00      	nop
 8004eac:	58000400 	.word	0x58000400
 8004eb0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b0c      	cmp	r3, #12
 8004eb8:	d01e      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eba:	f7ff fc04 	bl	80046c6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebe:	f7fe f8eb 	bl	8003098 <HAL_GetTick>
 8004ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7fe f8e7 	bl	8003098 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e012      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1ef      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_RCC_OscConfig+0x6e4>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	60cb      	str	r3, [r1, #12]
 8004ef6:	e001      	b.n	8004efc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3734      	adds	r7, #52	; 0x34
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd90      	pop	{r4, r7, pc}
 8004f06:	bf00      	nop
 8004f08:	eefefffc 	.word	0xeefefffc

08004f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e12d      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f20:	4b98      	ldr	r3, [pc, #608]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d91b      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b95      	ldr	r3, [pc, #596]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 0207 	bic.w	r2, r3, #7
 8004f36:	4993      	ldr	r1, [pc, #588]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3e:	f7fe f8ab 	bl	8003098 <HAL_GetTick>
 8004f42:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f46:	f7fe f8a7 	bl	8003098 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e111      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f58:	4b8a      	ldr	r3, [pc, #552]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d1ef      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fafb 	bl	8004572 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f7c:	f7fe f88c 	bl	8003098 <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f84:	f7fe f888 	bl	8003098 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e0f2      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f96:	f7ff fbe8 	bl	800476a <LL_RCC_IsActiveFlag_HPRE>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f1      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d016      	beq.n	8004fda <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff faf2 	bl	800459a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fb6:	f7fe f86f 	bl	8003098 <HAL_GetTick>
 8004fba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fbe:	f7fe f86b 	bl	8003098 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e0d5      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004fd0:	f7ff fbdd 	bl	800478e <LL_RCC_IsActiveFlag_C2HPRE>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f1      	beq.n	8004fbe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d016      	beq.n	8005014 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff faeb 	bl	80045c6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ff0:	f7fe f852 	bl	8003098 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ff8:	f7fe f84e 	bl	8003098 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e0b8      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800500a:	f7ff fbd3 	bl	80047b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f1      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d016      	beq.n	800504e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fae5 	bl	80045f4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800502a:	f7fe f835 	bl	8003098 <HAL_GetTick>
 800502e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005030:	e008      	b.n	8005044 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005032:	f7fe f831 	bl	8003098 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e09b      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005044:	f7ff fbc9 	bl	80047da <LL_RCC_IsActiveFlag_PPRE1>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f1      	beq.n	8005032 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d017      	beq.n	800508a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff fadb 	bl	800461c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005066:	f7fe f817 	bl	8003098 <HAL_GetTick>
 800506a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800506c:	e008      	b.n	8005080 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800506e:	f7fe f813 	bl	8003098 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e07d      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005080:	f7ff fbbd 	bl	80047fe <LL_RCC_IsActiveFlag_PPRE2>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f1      	beq.n	800506e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d043      	beq.n	800511e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d106      	bne.n	80050ac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800509e:	f7ff f87b 	bl	8004198 <LL_RCC_HSE_IsReady>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11e      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e067      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d106      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80050b4:	f7ff fb16 	bl	80046e4 <LL_RCC_PLL_IsReady>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d113      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e05c      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80050ca:	f7ff f9e3 	bl	8004494 <LL_RCC_MSI_IsReady>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d108      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e051      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80050d8:	f7ff f88e 	bl	80041f8 <LL_RCC_HSI_IsReady>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e04a      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fa21 	bl	8004532 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f0:	f7fd ffd2 	bl	8003098 <HAL_GetTick>
 80050f4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f6:	e00a      	b.n	800510e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f8:	f7fd ffce 	bl	8003098 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e036      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510e:	f7ff fa24 	bl	800455a <LL_RCC_GetSysClkSource>
 8005112:	4602      	mov	r2, r0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	429a      	cmp	r2, r3
 800511c:	d1ec      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800511e:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d21b      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512c:	4b15      	ldr	r3, [pc, #84]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f023 0207 	bic.w	r2, r3, #7
 8005134:	4913      	ldr	r1, [pc, #76]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800513c:	f7fd ffac 	bl	8003098 <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	e008      	b.n	8005156 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005144:	f7fd ffa8 	bl	8003098 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e012      	b.n	800517c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d1ef      	bne.n	8005144 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005164:	f000 f87e 	bl	8005264 <HAL_RCC_GetHCLKFreq>
 8005168:	4603      	mov	r3, r0
 800516a:	4a07      	ldr	r2, [pc, #28]	; (8005188 <HAL_RCC_ClockConfig+0x27c>)
 800516c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800516e:	f7fd ff9f 	bl	80030b0 <HAL_GetTickPrio>
 8005172:	4603      	mov	r3, r0
 8005174:	4618      	mov	r0, r3
 8005176:	f7fd ff41 	bl	8002ffc <HAL_InitTick>
 800517a:	4603      	mov	r3, r0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	58004000 	.word	0x58004000
 8005188:	20000008 	.word	0x20000008

0800518c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005192:	f7ff f9e2 	bl	800455a <LL_RCC_GetSysClkSource>
 8005196:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800519e:	f7ff f99e 	bl	80044de <LL_RCC_MSI_GetRange>
 80051a2:	4603      	mov	r3, r0
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	4a2b      	ldr	r2, [pc, #172]	; (8005258 <HAL_RCC_GetSysClockFreq+0xcc>)
 80051ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	e04b      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d102      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051ba:	4b28      	ldr	r3, [pc, #160]	; (800525c <HAL_RCC_GetSysClockFreq+0xd0>)
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e045      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d10a      	bne.n	80051dc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80051c6:	f7fe ffb7 	bl	8004138 <LL_RCC_HSE_IsEnabledDiv2>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d102      	bne.n	80051d6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80051d0:	4b22      	ldr	r3, [pc, #136]	; (800525c <HAL_RCC_GetSysClockFreq+0xd0>)
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e03a      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80051d6:	4b22      	ldr	r3, [pc, #136]	; (8005260 <HAL_RCC_GetSysClockFreq+0xd4>)
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e037      	b.n	800524c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80051dc:	f7ff fab9 	bl	8004752 <LL_RCC_PLL_GetMainSource>
 80051e0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d003      	beq.n	80051f0 <HAL_RCC_GetSysClockFreq+0x64>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d003      	beq.n	80051f6 <HAL_RCC_GetSysClockFreq+0x6a>
 80051ee:	e00d      	b.n	800520c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80051f0:	4b1a      	ldr	r3, [pc, #104]	; (800525c <HAL_RCC_GetSysClockFreq+0xd0>)
 80051f2:	60bb      	str	r3, [r7, #8]
        break;
 80051f4:	e015      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80051f6:	f7fe ff9f 	bl	8004138 <LL_RCC_HSE_IsEnabledDiv2>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d102      	bne.n	8005206 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005200:	4b16      	ldr	r3, [pc, #88]	; (800525c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005202:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005204:	e00d      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005206:	4b16      	ldr	r3, [pc, #88]	; (8005260 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005208:	60bb      	str	r3, [r7, #8]
        break;
 800520a:	e00a      	b.n	8005222 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800520c:	f7ff f967 	bl	80044de <LL_RCC_MSI_GetRange>
 8005210:	4603      	mov	r3, r0
 8005212:	091b      	lsrs	r3, r3, #4
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	4a0f      	ldr	r2, [pc, #60]	; (8005258 <HAL_RCC_GetSysClockFreq+0xcc>)
 800521a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521e:	60bb      	str	r3, [r7, #8]
        break;
 8005220:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005222:	f7ff fa71 	bl	8004708 <LL_RCC_PLL_GetN>
 8005226:	4602      	mov	r2, r0
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	fb03 f402 	mul.w	r4, r3, r2
 800522e:	f7ff fa84 	bl	800473a <LL_RCC_PLL_GetDivider>
 8005232:	4603      	mov	r3, r0
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	3301      	adds	r3, #1
 8005238:	fbb4 f4f3 	udiv	r4, r4, r3
 800523c:	f7ff fa71 	bl	8004722 <LL_RCC_PLL_GetR>
 8005240:	4603      	mov	r3, r0
 8005242:	0f5b      	lsrs	r3, r3, #29
 8005244:	3301      	adds	r3, #1
 8005246:	fbb4 f3f3 	udiv	r3, r4, r3
 800524a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800524c:	68fb      	ldr	r3, [r7, #12]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	bd90      	pop	{r4, r7, pc}
 8005256:	bf00      	nop
 8005258:	0800f898 	.word	0x0800f898
 800525c:	00f42400 	.word	0x00f42400
 8005260:	01e84800 	.word	0x01e84800

08005264 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005264:	b598      	push	{r3, r4, r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005268:	f7ff ff90 	bl	800518c <HAL_RCC_GetSysClockFreq>
 800526c:	4604      	mov	r4, r0
 800526e:	f7ff f9e9 	bl	8004644 <LL_RCC_GetAHBPrescaler>
 8005272:	4603      	mov	r3, r0
 8005274:	091b      	lsrs	r3, r3, #4
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	4a03      	ldr	r2, [pc, #12]	; (8005288 <HAL_RCC_GetHCLKFreq+0x24>)
 800527c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005280:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005284:	4618      	mov	r0, r3
 8005286:	bd98      	pop	{r3, r4, r7, pc}
 8005288:	0800f838 	.word	0x0800f838

0800528c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800528c:	b598      	push	{r3, r4, r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005290:	f7ff ffe8 	bl	8005264 <HAL_RCC_GetHCLKFreq>
 8005294:	4604      	mov	r4, r0
 8005296:	f7ff f9ef 	bl	8004678 <LL_RCC_GetAPB1Prescaler>
 800529a:	4603      	mov	r3, r0
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	4a04      	ldr	r2, [pc, #16]	; (80052b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a8:	f003 031f 	and.w	r3, r3, #31
 80052ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd98      	pop	{r3, r4, r7, pc}
 80052b4:	0800f878 	.word	0x0800f878

080052b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052b8:	b598      	push	{r3, r4, r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80052bc:	f7ff ffd2 	bl	8005264 <HAL_RCC_GetHCLKFreq>
 80052c0:	4604      	mov	r4, r0
 80052c2:	f7ff f9e5 	bl	8004690 <LL_RCC_GetAPB2Prescaler>
 80052c6:	4603      	mov	r3, r0
 80052c8:	0adb      	lsrs	r3, r3, #11
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	4a04      	ldr	r2, [pc, #16]	; (80052e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	bd98      	pop	{r3, r4, r7, pc}
 80052e0:	0800f878 	.word	0x0800f878

080052e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80052e4:	b590      	push	{r4, r7, lr}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2bb0      	cmp	r3, #176	; 0xb0
 80052f0:	d903      	bls.n	80052fa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e007      	b.n	800530a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	4a11      	ldr	r2, [pc, #68]	; (8005348 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005308:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800530a:	f7ff f9a7 	bl	800465c <LL_RCC_GetAHB4Prescaler>
 800530e:	4603      	mov	r3, r0
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	4a0d      	ldr	r2, [pc, #52]	; (800534c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005328:	fba2 2303 	umull	r2, r3, r2, r3
 800532c:	0c9c      	lsrs	r4, r3, #18
 800532e:	f7fe fef5 	bl	800411c <HAL_PWREx_GetVoltageRange>
 8005332:	4603      	mov	r3, r0
 8005334:	4619      	mov	r1, r3
 8005336:	4620      	mov	r0, r4
 8005338:	f000 f80c 	bl	8005354 <RCC_SetFlashLatency>
 800533c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	bd90      	pop	{r4, r7, pc}
 8005346:	bf00      	nop
 8005348:	0800f898 	.word	0x0800f898
 800534c:	0800f838 	.word	0x0800f838
 8005350:	431bde83 	.word	0x431bde83

08005354 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b093      	sub	sp, #76	; 0x4c
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800535e:	4b37      	ldr	r3, [pc, #220]	; (800543c <RCC_SetFlashLatency+0xe8>)
 8005360:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005364:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005366:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800536a:	4a35      	ldr	r2, [pc, #212]	; (8005440 <RCC_SetFlashLatency+0xec>)
 800536c:	f107 031c 	add.w	r3, r7, #28
 8005370:	ca07      	ldmia	r2, {r0, r1, r2}
 8005372:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005376:	4b33      	ldr	r3, [pc, #204]	; (8005444 <RCC_SetFlashLatency+0xf0>)
 8005378:	f107 040c 	add.w	r4, r7, #12
 800537c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800537e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005382:	2300      	movs	r3, #0
 8005384:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538c:	d11a      	bne.n	80053c4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800538e:	2300      	movs	r3, #0
 8005390:	643b      	str	r3, [r7, #64]	; 0x40
 8005392:	e013      	b.n	80053bc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	3348      	adds	r3, #72	; 0x48
 800539a:	443b      	add	r3, r7
 800539c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d807      	bhi.n	80053b6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80053a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	3348      	adds	r3, #72	; 0x48
 80053ac:	443b      	add	r3, r7
 80053ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80053b2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80053b4:	e020      	b.n	80053f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80053b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b8:	3301      	adds	r3, #1
 80053ba:	643b      	str	r3, [r7, #64]	; 0x40
 80053bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d9e8      	bls.n	8005394 <RCC_SetFlashLatency+0x40>
 80053c2:	e019      	b.n	80053f8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80053c4:	2300      	movs	r3, #0
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c8:	e013      	b.n	80053f2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80053ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	3348      	adds	r3, #72	; 0x48
 80053d0:	443b      	add	r3, r7
 80053d2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d807      	bhi.n	80053ec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80053dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	3348      	adds	r3, #72	; 0x48
 80053e2:	443b      	add	r3, r7
 80053e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80053e8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80053ea:	e005      	b.n	80053f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80053ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ee:	3301      	adds	r3, #1
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d9e8      	bls.n	80053ca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80053f8:	4b13      	ldr	r3, [pc, #76]	; (8005448 <RCC_SetFlashLatency+0xf4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f023 0207 	bic.w	r2, r3, #7
 8005400:	4911      	ldr	r1, [pc, #68]	; (8005448 <RCC_SetFlashLatency+0xf4>)
 8005402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005404:	4313      	orrs	r3, r2
 8005406:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005408:	f7fd fe46 	bl	8003098 <HAL_GetTick>
 800540c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800540e:	e008      	b.n	8005422 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005410:	f7fd fe42 	bl	8003098 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e007      	b.n	8005432 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005422:	4b09      	ldr	r3, [pc, #36]	; (8005448 <RCC_SetFlashLatency+0xf4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800542c:	429a      	cmp	r2, r3
 800542e:	d1ef      	bne.n	8005410 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	374c      	adds	r7, #76	; 0x4c
 8005436:	46bd      	mov	sp, r7
 8005438:	bd90      	pop	{r4, r7, pc}
 800543a:	bf00      	nop
 800543c:	0800e5c4 	.word	0x0800e5c4
 8005440:	0800e5d4 	.word	0x0800e5d4
 8005444:	0800e5e0 	.word	0x0800e5e0
 8005448:	58004000 	.word	0x58004000

0800544c <LL_RCC_LSE_IsEnabled>:
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <LL_RCC_LSE_IsEnabled+0x18>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <LL_RCC_LSE_IsEnabled+0x1a>
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <LL_RCC_LSE_IsReady>:
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b02      	cmp	r3, #2
 8005482:	d101      	bne.n	8005488 <LL_RCC_LSE_IsReady+0x18>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <LL_RCC_LSE_IsReady+0x1a>
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <LL_RCC_MSI_EnablePLLMode>:
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054a2:	f043 0304 	orr.w	r3, r3, #4
 80054a6:	6013      	str	r3, [r2, #0]
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <LL_RCC_SetRFWKPClockSource>:
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80054ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <LL_RCC_SetSMPSClockSource>:
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	f023 0203 	bic.w	r2, r3, #3
 80054f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_RCC_SetSMPSPrescaler>:
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800550e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005518:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4313      	orrs	r3, r2
 8005520:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <LL_RCC_SetUSARTClockSource>:
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	f023 0203 	bic.w	r2, r3, #3
 8005542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <LL_RCC_SetLPUARTClockSource>:
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800556e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <LL_RCC_SetI2CClockSource>:
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800558e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005592:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800559e:	43db      	mvns	r3, r3
 80055a0:	401a      	ands	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <LL_RCC_SetLPTIMClockSource>:
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80055c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	0c1b      	lsrs	r3, r3, #16
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	43db      	mvns	r3, r3
 80055d8:	401a      	ands	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	041b      	lsls	r3, r3, #16
 80055de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <LL_RCC_SetSAIClockSource>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80055fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005608:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <LL_RCC_SetRNGClockSource>:
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005634:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <LL_RCC_SetCLK48ClockSource>:
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <LL_RCC_SetUSBClockSource>:
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7ff ffe3 	bl	800564c <LL_RCC_SetCLK48ClockSource>
}
 8005686:	bf00      	nop
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <LL_RCC_SetADCClockSource>:
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <LL_RCC_SetRTCClockSource>:
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80056c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <LL_RCC_GetRTCClockSource>:
{
 80056e6:	b480      	push	{r7}
 80056e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80056ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <LL_RCC_ForceBackupDomainReset>:
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005718:	bf00      	nop
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005722:	b480      	push	{r7}
 8005724:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800573a:	bf00      	nop
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <LL_RCC_PLLSAI1_Enable>:
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005752:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005756:	6013      	str	r3, [r2, #0]
}
 8005758:	bf00      	nop
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <LL_RCC_PLLSAI1_Disable>:
{
 8005762:	b480      	push	{r7}
 8005764:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005770:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005774:	6013      	str	r3, [r2, #0]
}
 8005776:	bf00      	nop
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <LL_RCC_PLLSAI1_IsReady>:
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800578e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005792:	d101      	bne.n	8005798 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80057ac:	2300      	movs	r3, #0
 80057ae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80057b0:	2300      	movs	r3, #0
 80057b2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d034      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057c8:	d021      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80057ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057ce:	d81b      	bhi.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057d4:	d01d      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80057d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057da:	d815      	bhi.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80057e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057e4:	d110      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80057e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80057f6:	e00d      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 f94d 	bl	8005a9c <RCCEx_PLLSAI1_ConfigNP>
 8005802:	4603      	mov	r3, r0
 8005804:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005806:	e005      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	77fb      	strb	r3, [r7, #31]
        break;
 800580c:	e002      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800580e:	bf00      	nop
 8005810:	e000      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005814:	7ffb      	ldrb	r3, [r7, #31]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d105      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fee8 	bl	80055f4 <LL_RCC_SetSAIClockSource>
 8005824:	e001      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005826:	7ffb      	ldrb	r3, [r7, #31]
 8005828:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005832:	2b00      	cmp	r3, #0
 8005834:	d046      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005836:	f7ff ff56 	bl	80056e6 <LL_RCC_GetRTCClockSource>
 800583a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	429a      	cmp	r2, r3
 8005844:	d03c      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005846:	f7fe fc59 	bl	80040fc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d105      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff ff30 	bl	80056ba <LL_RCC_SetRTCClockSource>
 800585a:	e02e      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800585c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005864:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005866:	f7ff ff4b 	bl	8005700 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800586a:	f7ff ff5a 	bl	8005722 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800587c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005886:	f7ff fde1 	bl	800544c <LL_RCC_LSE_IsEnabled>
 800588a:	4603      	mov	r3, r0
 800588c:	2b01      	cmp	r3, #1
 800588e:	d114      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005890:	f7fd fc02 	bl	8003098 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005896:	e00b      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005898:	f7fd fbfe 	bl	8003098 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d902      	bls.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	77fb      	strb	r3, [r7, #31]
              break;
 80058ae:	e004      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80058b0:	f7ff fdde 	bl	8005470 <LL_RCC_LSE_IsReady>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d1ee      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80058ba:	7ffb      	ldrb	r3, [r7, #31]
 80058bc:	77bb      	strb	r3, [r7, #30]
 80058be:	e001      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c0:	7ffb      	ldrb	r3, [r7, #31]
 80058c2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d004      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fe2a 	bl	800552e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d004      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fe35 	bl	800555a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff fe5d 	bl	80055c0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d004      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fe52 	bl	80055c0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d004      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff fe2a 	bl	8005586 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d004      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff fe1f 	bl	8005586 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d022      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff fe8d 	bl	8005678 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005966:	d107      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005976:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800597c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005980:	d10b      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3304      	adds	r3, #4
 8005986:	4618      	mov	r0, r3
 8005988:	f000 f8e3 	bl	8005b52 <RCCEx_PLLSAI1_ConfigNQ>
 800598c:	4603      	mov	r3, r0
 800598e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005990:	7ffb      	ldrb	r3, [r7, #31]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005996:	7ffb      	ldrb	r3, [r7, #31]
 8005998:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d02b      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ae:	d008      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b8:	d003      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d105      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fe2a 	bl	8005620 <LL_RCC_SetRNGClockSource>
 80059cc:	e00a      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	2000      	movs	r0, #0
 80059da:	f7ff fe21 	bl	8005620 <LL_RCC_SetRNGClockSource>
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff fe34 	bl	800564c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80059ec:	d107      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80059ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d022      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff fe3d 	bl	800568e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a1c:	d107      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a2c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a36:	d10b      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 f8e3 	bl	8005c08 <RCCEx_PLLSAI1_ConfigNR>
 8005a42:	4603      	mov	r3, r0
 8005a44:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005a4c:	7ffb      	ldrb	r3, [r7, #31]
 8005a4e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fd26 	bl	80054b2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d009      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fd45 	bl	8005506 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff fd2c 	bl	80054de <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005a86:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3720      	adds	r7, #32
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005a94:	f7ff fcfe 	bl	8005494 <LL_RCC_MSI_EnablePLLMode>
}
 8005a98:	bf00      	nop
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005aa8:	f7ff fe5b 	bl	8005762 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005aac:	f7fd faf4 	bl	8003098 <HAL_GetTick>
 8005ab0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ab2:	e009      	b.n	8005ac8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ab4:	f7fd faf0 	bl	8003098 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d902      	bls.n	8005ac8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac6:	e004      	b.n	8005ad2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ac8:	f7ff fe5a 	bl	8005780 <LL_RCC_PLLSAI1_IsReady>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d137      	bne.n	8005b48 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aec:	4313      	orrs	r3, r2
 8005aee:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b02:	4313      	orrs	r3, r2
 8005b04:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005b06:	f7ff fe1d 	bl	8005744 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0a:	f7fd fac5 	bl	8003098 <HAL_GetTick>
 8005b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b10:	e009      	b.n	8005b26 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b12:	f7fd fac1 	bl	8003098 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d902      	bls.n	8005b26 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	73fb      	strb	r3, [r7, #15]
        break;
 8005b24:	e004      	b.n	8005b30 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005b26:	f7ff fe2b 	bl	8005780 <LL_RCC_PLLSAI1_IsReady>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d1f0      	bne.n	8005b12 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d108      	bne.n	8005b48 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b44:	4313      	orrs	r3, r2
 8005b46:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005b5e:	f7ff fe00 	bl	8005762 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b62:	f7fd fa99 	bl	8003098 <HAL_GetTick>
 8005b66:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b68:	e009      	b.n	8005b7e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b6a:	f7fd fa95 	bl	8003098 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d902      	bls.n	8005b7e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b7c:	e004      	b.n	8005b88 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b7e:	f7ff fdff 	bl	8005780 <LL_RCC_PLLSAI1_IsReady>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f0      	bne.n	8005b6a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005b88:	7bfb      	ldrb	r3, [r7, #15]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d137      	bne.n	8005bfe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005bbc:	f7ff fdc2 	bl	8005744 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc0:	f7fd fa6a 	bl	8003098 <HAL_GetTick>
 8005bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bc6:	e009      	b.n	8005bdc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bc8:	f7fd fa66 	bl	8003098 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d902      	bls.n	8005bdc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8005bda:	e004      	b.n	8005be6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bdc:	f7ff fdd0 	bl	8005780 <LL_RCC_PLLSAI1_IsReady>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d1f0      	bne.n	8005bc8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d108      	bne.n	8005bfe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf0:	691a      	ldr	r2, [r3, #16]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c14:	f7ff fda5 	bl	8005762 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c18:	f7fd fa3e 	bl	8003098 <HAL_GetTick>
 8005c1c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c1e:	e009      	b.n	8005c34 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c20:	f7fd fa3a 	bl	8003098 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d902      	bls.n	8005c34 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	73fb      	strb	r3, [r7, #15]
      break;
 8005c32:	e004      	b.n	8005c3e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c34:	f7ff fda4 	bl	8005780 <LL_RCC_PLLSAI1_IsReady>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f0      	bne.n	8005c20 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d137      	bne.n	8005cb4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c72:	f7ff fd67 	bl	8005744 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c76:	f7fd fa0f 	bl	8003098 <HAL_GetTick>
 8005c7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c7c:	e009      	b.n	8005c92 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c7e:	f7fd fa0b 	bl	8003098 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d902      	bls.n	8005c92 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	73fb      	strb	r3, [r7, #15]
        break;
 8005c90:	e004      	b.n	8005c9c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c92:	f7ff fd75 	bl	8005780 <LL_RCC_PLLSAI1_IsReady>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d1f0      	bne.n	8005c7e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d108      	bne.n	8005cb4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e09f      	b.n	8005e12 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fc fe58 	bl	800299c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005cf4:	4b49      	ldr	r3, [pc, #292]	; (8005e1c <HAL_RTC_Init+0x15c>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d07e      	beq.n	8005dfe <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	22ca      	movs	r2, #202	; 0xca
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2253      	movs	r2, #83	; 0x53
 8005d0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f8ab 	bl	8005e6c <RTC_EnterInitMode>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2204      	movs	r2, #4
 8005d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
 8005d30:	e067      	b.n	8005e02 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d44:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6899      	ldr	r1, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	68d2      	ldr	r2, [r2, #12]
 8005d6c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6919      	ldr	r1, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	041a      	lsls	r2, r3, #16
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d90:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0203 	bic.w	r2, r2, #3
 8005da0:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d113      	bne.n	8005df0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f829 	bl	8005e20 <HAL_RTC_WaitForSynchro>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00d      	beq.n	8005df0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	22ff      	movs	r2, #255	; 0xff
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2204      	movs	r2, #4
 8005de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e010      	b.n	8005e12 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	22ff      	movs	r2, #255	; 0xff
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	73fb      	strb	r3, [r7, #15]
 8005dfc:	e001      	b.n	8005e02 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40002800 	.word	0x40002800

08005e20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e36:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005e38:	f7fd f92e 	bl	8003098 <HAL_GetTick>
 8005e3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e3e:	e009      	b.n	8005e54 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e40:	f7fd f92a 	bl	8003098 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e4e:	d901      	bls.n	8005e54 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e007      	b.n	8005e64 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0ee      	beq.n	8005e40 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d119      	bne.n	8005eb6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e8c:	f7fd f904 	bl	8003098 <HAL_GetTick>
 8005e90:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e92:	e009      	b.n	8005ea8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005e94:	f7fd f900 	bl	8003098 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ea2:	d901      	bls.n	8005ea8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e007      	b.n	8005eb8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0ee      	beq.n	8005e94 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e0a8      	b.n	800602c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	22ca      	movs	r2, #202	; 0xca
 8005ef0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2253      	movs	r2, #83	; 0x53
 8005ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d020      	beq.n	8005f4a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005f08:	f7fd f8c6 	bl	8003098 <HAL_GetTick>
 8005f0c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005f0e:	e015      	b.n	8005f3c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f10:	f7fd f8c2 	bl	8003098 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f1e:	d90d      	bls.n	8005f3c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2203      	movs	r2, #3
 8005f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e077      	b.n	800602c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e2      	bne.n	8005f10 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f58:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005f6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005f6c:	f7fd f894 	bl	8003098 <HAL_GetTick>
 8005f70:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005f72:	e015      	b.n	8005fa0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f74:	f7fd f890 	bl	8003098 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f82:	d90d      	bls.n	8005fa0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	22ff      	movs	r2, #255	; 0xff
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2203      	movs	r2, #3
 8005f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e045      	b.n	800602c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0e2      	beq.n	8005f74 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689a      	ldr	r2, [r3, #8]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0207 	bic.w	r2, r2, #7
 8005fc4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6899      	ldr	r1, [r3, #8]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005fd6:	4b17      	ldr	r3, [pc, #92]	; (8006034 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fdc:	4a15      	ldr	r2, [pc, #84]	; (8006034 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005fde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fe2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005fe6:	4b13      	ldr	r3, [pc, #76]	; (8006034 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a12      	ldr	r2, [pc, #72]	; (8006034 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ff0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006000:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006010:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	22ff      	movs	r2, #255	; 0xff
 8006018:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	58000800 	.word	0x58000800

08006038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e049      	b.n	80060de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d106      	bne.n	8006064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fc fcd0 	bl	8002a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f000 fb1a 	bl	80066b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e049      	b.n	800618c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f841 	bl	8006194 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	3304      	adds	r3, #4
 8006122:	4619      	mov	r1, r3
 8006124:	4610      	mov	r0, r2
 8006126:	f000 fac3 	bl	80066b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e097      	b.n	80062ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d106      	bne.n	80061d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7fc fc2b 	bl	8002a2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2202      	movs	r2, #2
 80061da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80061ec:	f023 0307 	bic.w	r3, r3, #7
 80061f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f000 fa57 	bl	80066b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	4313      	orrs	r3, r2
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4313      	orrs	r3, r2
 8006240:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006248:	f023 030c 	bic.w	r3, r3, #12
 800624c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006254:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	4313      	orrs	r3, r2
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4313      	orrs	r3, r2
 800626a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	011a      	lsls	r2, r3, #4
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	031b      	lsls	r3, r3, #12
 8006278:	4313      	orrs	r3, r2
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006286:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800628e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	4313      	orrs	r3, r2
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800630e:	2302      	movs	r3, #2
 8006310:	e0ff      	b.n	8006512 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b14      	cmp	r3, #20
 800631e:	f200 80f0 	bhi.w	8006502 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006322:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006328:	0800637d 	.word	0x0800637d
 800632c:	08006503 	.word	0x08006503
 8006330:	08006503 	.word	0x08006503
 8006334:	08006503 	.word	0x08006503
 8006338:	080063bd 	.word	0x080063bd
 800633c:	08006503 	.word	0x08006503
 8006340:	08006503 	.word	0x08006503
 8006344:	08006503 	.word	0x08006503
 8006348:	080063ff 	.word	0x080063ff
 800634c:	08006503 	.word	0x08006503
 8006350:	08006503 	.word	0x08006503
 8006354:	08006503 	.word	0x08006503
 8006358:	0800643f 	.word	0x0800643f
 800635c:	08006503 	.word	0x08006503
 8006360:	08006503 	.word	0x08006503
 8006364:	08006503 	.word	0x08006503
 8006368:	08006481 	.word	0x08006481
 800636c:	08006503 	.word	0x08006503
 8006370:	08006503 	.word	0x08006503
 8006374:	08006503 	.word	0x08006503
 8006378:	080064c1 	.word	0x080064c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fa04 	bl	8006790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0208 	orr.w	r2, r2, #8
 8006396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0204 	bic.w	r2, r2, #4
 80063a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6999      	ldr	r1, [r3, #24]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	691a      	ldr	r2, [r3, #16]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	619a      	str	r2, [r3, #24]
      break;
 80063ba:	e0a5      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fa60 	bl	8006888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6999      	ldr	r1, [r3, #24]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	021a      	lsls	r2, r3, #8
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	619a      	str	r2, [r3, #24]
      break;
 80063fc:	e084      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68b9      	ldr	r1, [r7, #8]
 8006404:	4618      	mov	r0, r3
 8006406:	f000 fab9 	bl	800697c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	69da      	ldr	r2, [r3, #28]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0208 	orr.w	r2, r2, #8
 8006418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0204 	bic.w	r2, r2, #4
 8006428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69d9      	ldr	r1, [r3, #28]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	61da      	str	r2, [r3, #28]
      break;
 800643c:	e064      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fb11 	bl	8006a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69d9      	ldr	r1, [r3, #28]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	021a      	lsls	r2, r3, #8
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	61da      	str	r2, [r3, #28]
      break;
 800647e:	e043      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fb4e 	bl	8006b28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0208 	orr.w	r2, r2, #8
 800649a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0204 	bic.w	r2, r2, #4
 80064aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691a      	ldr	r2, [r3, #16]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80064be:	e023      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fb86 	bl	8006bd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	021a      	lsls	r2, r3, #8
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006500:	e002      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	75fb      	strb	r3, [r7, #23]
      break;
 8006506:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006510:	7dfb      	ldrb	r3, [r7, #23]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop

0800651c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_TIM_ConfigClockSource+0x1c>
 8006534:	2302      	movs	r3, #2
 8006536:	e0b6      	b.n	80066a6 <HAL_TIM_ConfigClockSource+0x18a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800655a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006562:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006574:	d03e      	beq.n	80065f4 <HAL_TIM_ConfigClockSource+0xd8>
 8006576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657a:	f200 8087 	bhi.w	800668c <HAL_TIM_ConfigClockSource+0x170>
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006582:	f000 8086 	beq.w	8006692 <HAL_TIM_ConfigClockSource+0x176>
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658a:	d87f      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 800658c:	2b70      	cmp	r3, #112	; 0x70
 800658e:	d01a      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0xaa>
 8006590:	2b70      	cmp	r3, #112	; 0x70
 8006592:	d87b      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 8006594:	2b60      	cmp	r3, #96	; 0x60
 8006596:	d050      	beq.n	800663a <HAL_TIM_ConfigClockSource+0x11e>
 8006598:	2b60      	cmp	r3, #96	; 0x60
 800659a:	d877      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 800659c:	2b50      	cmp	r3, #80	; 0x50
 800659e:	d03c      	beq.n	800661a <HAL_TIM_ConfigClockSource+0xfe>
 80065a0:	2b50      	cmp	r3, #80	; 0x50
 80065a2:	d873      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d058      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x13e>
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d86f      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 80065ac:	2b30      	cmp	r3, #48	; 0x30
 80065ae:	d064      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15e>
 80065b0:	2b30      	cmp	r3, #48	; 0x30
 80065b2:	d86b      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d060      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15e>
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d867      	bhi.n	800668c <HAL_TIM_ConfigClockSource+0x170>
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d05c      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15e>
 80065c0:	2b10      	cmp	r3, #16
 80065c2:	d05a      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x15e>
 80065c4:	e062      	b.n	800668c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065d6:	f000 fbd5 	bl	8006d84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	609a      	str	r2, [r3, #8]
      break;
 80065f2:	e04f      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006604:	f000 fbbe 	bl	8006d84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006616:	609a      	str	r2, [r3, #8]
      break;
 8006618:	e03c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006626:	461a      	mov	r2, r3
 8006628:	f000 fb30 	bl	8006c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2150      	movs	r1, #80	; 0x50
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fb89 	bl	8006d4a <TIM_ITRx_SetConfig>
      break;
 8006638:	e02c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006646:	461a      	mov	r2, r3
 8006648:	f000 fb4f 	bl	8006cea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2160      	movs	r1, #96	; 0x60
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fb79 	bl	8006d4a <TIM_ITRx_SetConfig>
      break;
 8006658:	e01c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006666:	461a      	mov	r2, r3
 8006668:	f000 fb10 	bl	8006c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2140      	movs	r1, #64	; 0x40
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fb69 	bl	8006d4a <TIM_ITRx_SetConfig>
      break;
 8006678:	e00c      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f000 fb60 	bl	8006d4a <TIM_ITRx_SetConfig>
      break;
 800668a:	e003      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	73fb      	strb	r3, [r7, #15]
      break;
 8006690:	e000      	b.n	8006694 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006692:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
	...

080066b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a30      	ldr	r2, [pc, #192]	; (8006784 <TIM_Base_SetConfig+0xd4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_Base_SetConfig+0x20>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ce:	d108      	bne.n	80066e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a27      	ldr	r2, [pc, #156]	; (8006784 <TIM_Base_SetConfig+0xd4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00b      	beq.n	8006702 <TIM_Base_SetConfig+0x52>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f0:	d007      	beq.n	8006702 <TIM_Base_SetConfig+0x52>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a24      	ldr	r2, [pc, #144]	; (8006788 <TIM_Base_SetConfig+0xd8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_Base_SetConfig+0x52>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a23      	ldr	r2, [pc, #140]	; (800678c <TIM_Base_SetConfig+0xdc>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d108      	bne.n	8006714 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a12      	ldr	r2, [pc, #72]	; (8006784 <TIM_Base_SetConfig+0xd4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d007      	beq.n	8006750 <TIM_Base_SetConfig+0xa0>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a11      	ldr	r2, [pc, #68]	; (8006788 <TIM_Base_SetConfig+0xd8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_Base_SetConfig+0xa0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a10      	ldr	r2, [pc, #64]	; (800678c <TIM_Base_SetConfig+0xdc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d103      	bne.n	8006758 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b01      	cmp	r3, #1
 8006768:	d105      	bne.n	8006776 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f023 0201 	bic.w	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	611a      	str	r2, [r3, #16]
  }
}
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40012c00 	.word	0x40012c00
 8006788:	40014400 	.word	0x40014400
 800678c:	40014800 	.word	0x40014800

08006790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f023 0201 	bic.w	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f023 0303 	bic.w	r3, r3, #3
 80067ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 0302 	bic.w	r3, r3, #2
 80067dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a24      	ldr	r2, [pc, #144]	; (800687c <TIM_OC1_SetConfig+0xec>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_OC1_SetConfig+0x70>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a23      	ldr	r2, [pc, #140]	; (8006880 <TIM_OC1_SetConfig+0xf0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_OC1_SetConfig+0x70>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a22      	ldr	r2, [pc, #136]	; (8006884 <TIM_OC1_SetConfig+0xf4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d10c      	bne.n	800681a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f023 0308 	bic.w	r3, r3, #8
 8006806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	4313      	orrs	r3, r2
 8006810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f023 0304 	bic.w	r3, r3, #4
 8006818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a17      	ldr	r2, [pc, #92]	; (800687c <TIM_OC1_SetConfig+0xec>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d007      	beq.n	8006832 <TIM_OC1_SetConfig+0xa2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a17      	ldr	r2, [pc, #92]	; (8006884 <TIM_OC1_SetConfig+0xf4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_OC1_SetConfig+0xa2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a14      	ldr	r2, [pc, #80]	; (8006880 <TIM_OC1_SetConfig+0xf0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d111      	bne.n	8006856 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40012c00 	.word	0x40012c00
 8006880:	40014800 	.word	0x40014800
 8006884:	40014400 	.word	0x40014400

08006888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f023 0210 	bic.w	r2, r3, #16
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f023 0320 	bic.w	r3, r3, #32
 80068d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a22      	ldr	r2, [pc, #136]	; (8006970 <TIM_OC2_SetConfig+0xe8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d10d      	bne.n	8006908 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006906:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a19      	ldr	r2, [pc, #100]	; (8006970 <TIM_OC2_SetConfig+0xe8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d007      	beq.n	8006920 <TIM_OC2_SetConfig+0x98>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a18      	ldr	r2, [pc, #96]	; (8006974 <TIM_OC2_SetConfig+0xec>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d003      	beq.n	8006920 <TIM_OC2_SetConfig+0x98>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a17      	ldr	r2, [pc, #92]	; (8006978 <TIM_OC2_SetConfig+0xf0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d113      	bne.n	8006948 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800692e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40012c00 	.word	0x40012c00
 8006974:	40014400 	.word	0x40014400
 8006978:	40014800 	.word	0x40014800

0800697c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a1b      	ldr	r3, [r3, #32]
 8006990:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	69db      	ldr	r3, [r3, #28]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f023 0303 	bic.w	r3, r3, #3
 80069b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a21      	ldr	r2, [pc, #132]	; (8006a60 <TIM_OC3_SetConfig+0xe4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d10d      	bne.n	80069fa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a18      	ldr	r2, [pc, #96]	; (8006a60 <TIM_OC3_SetConfig+0xe4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d007      	beq.n	8006a12 <TIM_OC3_SetConfig+0x96>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a17      	ldr	r2, [pc, #92]	; (8006a64 <TIM_OC3_SetConfig+0xe8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_OC3_SetConfig+0x96>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a16      	ldr	r2, [pc, #88]	; (8006a68 <TIM_OC3_SetConfig+0xec>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d113      	bne.n	8006a3a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	621a      	str	r2, [r3, #32]
}
 8006a54:	bf00      	nop
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800

08006a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	031b      	lsls	r3, r3, #12
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a14      	ldr	r2, [pc, #80]	; (8006b1c <TIM_OC4_SetConfig+0xb0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d007      	beq.n	8006ae0 <TIM_OC4_SetConfig+0x74>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a13      	ldr	r2, [pc, #76]	; (8006b20 <TIM_OC4_SetConfig+0xb4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <TIM_OC4_SetConfig+0x74>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a12      	ldr	r2, [pc, #72]	; (8006b24 <TIM_OC4_SetConfig+0xb8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d109      	bne.n	8006af4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	019b      	lsls	r3, r3, #6
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	621a      	str	r2, [r3, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40012c00 	.word	0x40012c00
 8006b20:	40014400 	.word	0x40014400
 8006b24:	40014800 	.word	0x40014800

08006b28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	041b      	lsls	r3, r3, #16
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a13      	ldr	r2, [pc, #76]	; (8006bcc <TIM_OC5_SetConfig+0xa4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d007      	beq.n	8006b92 <TIM_OC5_SetConfig+0x6a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a12      	ldr	r2, [pc, #72]	; (8006bd0 <TIM_OC5_SetConfig+0xa8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d003      	beq.n	8006b92 <TIM_OC5_SetConfig+0x6a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a11      	ldr	r2, [pc, #68]	; (8006bd4 <TIM_OC5_SetConfig+0xac>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d109      	bne.n	8006ba6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	621a      	str	r2, [r3, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	40014400 	.word	0x40014400
 8006bd4:	40014800 	.word	0x40014800

08006bd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	051b      	lsls	r3, r3, #20
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a14      	ldr	r2, [pc, #80]	; (8006c80 <TIM_OC6_SetConfig+0xa8>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d007      	beq.n	8006c44 <TIM_OC6_SetConfig+0x6c>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a13      	ldr	r2, [pc, #76]	; (8006c84 <TIM_OC6_SetConfig+0xac>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d003      	beq.n	8006c44 <TIM_OC6_SetConfig+0x6c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <TIM_OC6_SetConfig+0xb0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d109      	bne.n	8006c58 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	029b      	lsls	r3, r3, #10
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	621a      	str	r2, [r3, #32]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	40012c00 	.word	0x40012c00
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800

08006c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a1b      	ldr	r3, [r3, #32]
 8006c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f023 0201 	bic.w	r2, r3, #1
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f023 030a 	bic.w	r3, r3, #10
 8006cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	621a      	str	r2, [r3, #32]
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b087      	sub	sp, #28
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	f023 0210 	bic.w	r2, r3, #16
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	031b      	lsls	r3, r3, #12
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	621a      	str	r2, [r3, #32]
}
 8006d3e:	bf00      	nop
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f043 0307 	orr.w	r3, r3, #7
 8006d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	609a      	str	r2, [r3, #8]
}
 8006d78:	bf00      	nop
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]
 8006d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	021a      	lsls	r2, r3, #8
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	609a      	str	r2, [r3, #8]
}
 8006db8:	bf00      	nop
 8006dba:	371c      	adds	r7, #28
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d101      	bne.n	8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e04a      	b.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1f      	ldr	r2, [pc, #124]	; (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a12      	ldr	r2, [pc, #72]	; (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d004      	beq.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e44:	d10c      	bne.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40012c00 	.word	0x40012c00

08006e84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e06e      	b.n	8006f7e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	041b      	lsls	r3, r3, #16
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	69db      	ldr	r3, [r3, #28]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a17      	ldr	r2, [pc, #92]	; (8006f8c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d11c      	bne.n	8006f6c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3c:	051b      	lsls	r3, r3, #20
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40012c00 	.word	0x40012c00

08006f90 <LL_RCC_GetUSARTClockSource>:
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4013      	ands	r3, r2
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <LL_RCC_GetLPUARTClockSource>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4013      	ands	r3, r2
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e042      	b.n	8007068 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d106      	bne.n	8006ffa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7fb fd71 	bl	8002adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2224      	movs	r2, #36	; 0x24
 8006ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0201 	bic.w	r2, r2, #1
 8007010:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fe14 	bl	8007c48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fbe9 	bl	80077f8 <UART_SetConfig>
 8007026:	4603      	mov	r3, r0
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e01b      	b.n	8007068 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800703e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689a      	ldr	r2, [r3, #8]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800704e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f042 0201 	orr.w	r2, r2, #1
 800705e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fe93 	bl	8007d8c <UART_CheckIdleState>
 8007066:	4603      	mov	r3, r0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	4613      	mov	r3, r2
 800707c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007084:	2b20      	cmp	r3, #32
 8007086:	d167      	bne.n	8007158 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <HAL_UART_Transmit_DMA+0x24>
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e060      	b.n	800715a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	88fa      	ldrh	r2, [r7, #6]
 80070a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	88fa      	ldrh	r2, [r7, #6]
 80070aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2221      	movs	r2, #33	; 0x21
 80070ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d028      	beq.n	8007118 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070ca:	4a26      	ldr	r2, [pc, #152]	; (8007164 <HAL_UART_Transmit_DMA+0xf4>)
 80070cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070d2:	4a25      	ldr	r2, [pc, #148]	; (8007168 <HAL_UART_Transmit_DMA+0xf8>)
 80070d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070da:	4a24      	ldr	r2, [pc, #144]	; (800716c <HAL_UART_Transmit_DMA+0xfc>)
 80070dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070e2:	2200      	movs	r2, #0
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ee:	4619      	mov	r1, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3328      	adds	r3, #40	; 0x28
 80070f6:	461a      	mov	r2, r3
 80070f8:	88fb      	ldrh	r3, [r7, #6]
 80070fa:	f7fc fa33 	bl	8003564 <HAL_DMA_Start_IT>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d009      	beq.n	8007118 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2210      	movs	r2, #16
 8007108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2220      	movs	r2, #32
 8007110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e020      	b.n	800715a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2240      	movs	r2, #64	; 0x40
 800711e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	613b      	str	r3, [r7, #16]
   return(result);
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007140:	623a      	str	r2, [r7, #32]
 8007142:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	69f9      	ldr	r1, [r7, #28]
 8007146:	6a3a      	ldr	r2, [r7, #32]
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	61bb      	str	r3, [r7, #24]
   return(result);
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e5      	bne.n	8007120 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	e000      	b.n	800715a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007158:	2302      	movs	r3, #2
  }
}
 800715a:	4618      	mov	r0, r3
 800715c:	3728      	adds	r7, #40	; 0x28
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	08008109 	.word	0x08008109
 8007168:	080081a3 	.word	0x080081a3
 800716c:	080081bf 	.word	0x080081bf

08007170 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b0ba      	sub	sp, #232	; 0xe8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007196:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800719a:	f640 030f 	movw	r3, #2063	; 0x80f
 800719e:	4013      	ands	r3, r2
 80071a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80071a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d11b      	bne.n	80071e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d015      	beq.n	80071e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071bc:	f003 0320 	and.w	r3, r3, #32
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d105      	bne.n	80071d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 82e3 	beq.w	80077a0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
      }
      return;
 80071e2:	e2dd      	b.n	80077a0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8123 	beq.w	8007434 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80071ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80071f2:	4b8d      	ldr	r3, [pc, #564]	; (8007428 <HAL_UART_IRQHandler+0x2b8>)
 80071f4:	4013      	ands	r3, r2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80071fe:	4b8b      	ldr	r3, [pc, #556]	; (800742c <HAL_UART_IRQHandler+0x2bc>)
 8007200:	4013      	ands	r3, r2
 8007202:	2b00      	cmp	r3, #0
 8007204:	f000 8116 	beq.w	8007434 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d011      	beq.n	8007238 <HAL_UART_IRQHandler+0xc8>
 8007214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2201      	movs	r2, #1
 8007226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722e:	f043 0201 	orr.w	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d011      	beq.n	8007268 <HAL_UART_IRQHandler+0xf8>
 8007244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2202      	movs	r2, #2
 8007256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800725e:	f043 0204 	orr.w	r2, r3, #4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d011      	beq.n	8007298 <HAL_UART_IRQHandler+0x128>
 8007274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00b      	beq.n	8007298 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2204      	movs	r2, #4
 8007286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728e:	f043 0202 	orr.w	r2, r3, #2
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d017      	beq.n	80072d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d105      	bne.n	80072bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80072b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80072b4:	4b5c      	ldr	r3, [pc, #368]	; (8007428 <HAL_UART_IRQHandler+0x2b8>)
 80072b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00b      	beq.n	80072d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2208      	movs	r2, #8
 80072c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ca:	f043 0208 	orr.w	r2, r3, #8
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d012      	beq.n	8007306 <HAL_UART_IRQHandler+0x196>
 80072e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00c      	beq.n	8007306 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fc:	f043 0220 	orr.w	r2, r3, #32
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8249 	beq.w	80077a4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d013      	beq.n	8007346 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800731e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d105      	bne.n	8007336 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800732a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800732e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d005      	beq.n	800736a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800735e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007362:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007366:	2b00      	cmp	r3, #0
 8007368:	d054      	beq.n	8007414 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fe66 	bl	800803c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737a:	2b40      	cmp	r3, #64	; 0x40
 800737c:	d146      	bne.n	800740c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3308      	adds	r3, #8
 8007384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800739c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1d9      	bne.n	800737e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d017      	beq.n	8007404 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073da:	4a15      	ldr	r2, [pc, #84]	; (8007430 <HAL_UART_IRQHandler+0x2c0>)
 80073dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fc f997 	bl	8003718 <HAL_DMA_Abort_IT>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d019      	beq.n	8007424 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80073fe:	4610      	mov	r0, r2
 8007400:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007402:	e00f      	b.n	8007424 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f9e1 	bl	80077cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740a:	e00b      	b.n	8007424 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f9dd 	bl	80077cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007412:	e007      	b.n	8007424 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f9d9 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007422:	e1bf      	b.n	80077a4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	bf00      	nop
    return;
 8007426:	e1bd      	b.n	80077a4 <HAL_UART_IRQHandler+0x634>
 8007428:	10000001 	.word	0x10000001
 800742c:	04000120 	.word	0x04000120
 8007430:	0800823f 	.word	0x0800823f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007438:	2b01      	cmp	r3, #1
 800743a:	f040 8153 	bne.w	80076e4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800743e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007442:	f003 0310 	and.w	r3, r3, #16
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 814c 	beq.w	80076e4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800744c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8145 	beq.w	80076e4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2210      	movs	r2, #16
 8007460:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746c:	2b40      	cmp	r3, #64	; 0x40
 800746e:	f040 80bb 	bne.w	80075e8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007480:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 818f 	beq.w	80077a8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007490:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007494:	429a      	cmp	r2, r3
 8007496:	f080 8187 	bcs.w	80077a8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f040 8087 	bne.w	80075c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074c4:	e853 3f00 	ldrex	r3, [r3]
 80074c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074f2:	e841 2300 	strex	r3, r2, [r1]
 80074f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1da      	bne.n	80074b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3308      	adds	r3, #8
 8007508:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007514:	f023 0301 	bic.w	r3, r3, #1
 8007518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3308      	adds	r3, #8
 8007522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007526:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800752a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800752e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e1      	bne.n	8007502 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800754e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3308      	adds	r3, #8
 800755e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007564:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e3      	bne.n	800753e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007594:	f023 0310 	bic.w	r3, r3, #16
 8007598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	461a      	mov	r2, r3
 80075a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80075a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e4      	bne.n	8007584 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7fc f84a 	bl	800365a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075d8:	b29b      	uxth	r3, r3
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	b29b      	uxth	r3, r3
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8fd 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075e6:	e0df      	b.n	80077a8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 80d1 	beq.w	80077ac <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800760a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 80cc 	beq.w	80077ac <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007636:	647b      	str	r3, [r7, #68]	; 0x44
 8007638:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800763c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e4      	bne.n	8007614 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3308      	adds	r3, #8
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	623b      	str	r3, [r7, #32]
   return(result);
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007660:	f023 0301 	bic.w	r3, r3, #1
 8007664:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3308      	adds	r3, #8
 800766e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007672:	633a      	str	r2, [r7, #48]	; 0x30
 8007674:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e1      	bne.n	800764a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2220      	movs	r2, #32
 800768a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	e853 3f00 	ldrex	r3, [r3]
 80076a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0310 	bic.w	r3, r3, #16
 80076ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	69b9      	ldr	r1, [r7, #24]
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	617b      	str	r3, [r7, #20]
   return(result);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e4      	bne.n	800769a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f87f 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076e2:	e063      	b.n	80077ac <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00e      	beq.n	800770e <HAL_UART_IRQHandler+0x59e>
 80076f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d008      	beq.n	800770e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fdda 	bl	80082c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800770c:	e051      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800770e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007716:	2b00      	cmp	r3, #0
 8007718:	d014      	beq.n	8007744 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800771a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007722:	2b00      	cmp	r3, #0
 8007724:	d105      	bne.n	8007732 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800772a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d008      	beq.n	8007744 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007736:	2b00      	cmp	r3, #0
 8007738:	d03a      	beq.n	80077b0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
    }
    return;
 8007742:	e035      	b.n	80077b0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774c:	2b00      	cmp	r3, #0
 800774e:	d009      	beq.n	8007764 <HAL_UART_IRQHandler+0x5f4>
 8007750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fd84 	bl	800826a <UART_EndTransmit_IT>
    return;
 8007762:	e026      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <HAL_UART_IRQHandler+0x614>
 8007770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007774:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fdb3 	bl	80082e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007782:	e016      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d010      	beq.n	80077b2 <HAL_UART_IRQHandler+0x642>
 8007790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007794:	2b00      	cmp	r3, #0
 8007796:	da0c      	bge.n	80077b2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fd9b 	bl	80082d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800779e:	e008      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
      return;
 80077a0:	bf00      	nop
 80077a2:	e006      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
    return;
 80077a4:	bf00      	nop
 80077a6:	e004      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
      return;
 80077a8:	bf00      	nop
 80077aa:	e002      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
      return;
 80077ac:	bf00      	nop
 80077ae:	e000      	b.n	80077b2 <HAL_UART_IRQHandler+0x642>
    return;
 80077b0:	bf00      	nop
  }
}
 80077b2:	37e8      	adds	r7, #232	; 0xe8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077fc:	b08c      	sub	sp, #48	; 0x30
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	431a      	orrs	r2, r3
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	431a      	orrs	r2, r3
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	4313      	orrs	r3, r2
 800781e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4baf      	ldr	r3, [pc, #700]	; (8007ae4 <UART_SetConfig+0x2ec>)
 8007828:	4013      	ands	r3, r2
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	6812      	ldr	r2, [r2, #0]
 800782e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007830:	430b      	orrs	r3, r1
 8007832:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4aa4      	ldr	r2, [pc, #656]	; (8007ae8 <UART_SetConfig+0x2f0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d004      	beq.n	8007864 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007860:	4313      	orrs	r3, r2
 8007862:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800786e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	6812      	ldr	r2, [r2, #0]
 8007876:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007878:	430b      	orrs	r3, r1
 800787a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007882:	f023 010f 	bic.w	r1, r3, #15
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a95      	ldr	r2, [pc, #596]	; (8007aec <UART_SetConfig+0x2f4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d125      	bne.n	80078e8 <UART_SetConfig+0xf0>
 800789c:	2003      	movs	r0, #3
 800789e:	f7ff fb77 	bl	8006f90 <LL_RCC_GetUSARTClockSource>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d81b      	bhi.n	80078e0 <UART_SetConfig+0xe8>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <UART_SetConfig+0xb8>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	080078c1 	.word	0x080078c1
 80078b4:	080078d1 	.word	0x080078d1
 80078b8:	080078c9 	.word	0x080078c9
 80078bc:	080078d9 	.word	0x080078d9
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078c6:	e042      	b.n	800794e <UART_SetConfig+0x156>
 80078c8:	2302      	movs	r3, #2
 80078ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078ce:	e03e      	b.n	800794e <UART_SetConfig+0x156>
 80078d0:	2304      	movs	r3, #4
 80078d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078d6:	e03a      	b.n	800794e <UART_SetConfig+0x156>
 80078d8:	2308      	movs	r3, #8
 80078da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078de:	e036      	b.n	800794e <UART_SetConfig+0x156>
 80078e0:	2310      	movs	r3, #16
 80078e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80078e6:	e032      	b.n	800794e <UART_SetConfig+0x156>
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a7e      	ldr	r2, [pc, #504]	; (8007ae8 <UART_SetConfig+0x2f0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d12a      	bne.n	8007948 <UART_SetConfig+0x150>
 80078f2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80078f6:	f7ff fb5b 	bl	8006fb0 <LL_RCC_GetLPUARTClockSource>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007900:	d01a      	beq.n	8007938 <UART_SetConfig+0x140>
 8007902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007906:	d81b      	bhi.n	8007940 <UART_SetConfig+0x148>
 8007908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800790c:	d00c      	beq.n	8007928 <UART_SetConfig+0x130>
 800790e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007912:	d815      	bhi.n	8007940 <UART_SetConfig+0x148>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <UART_SetConfig+0x128>
 8007918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800791c:	d008      	beq.n	8007930 <UART_SetConfig+0x138>
 800791e:	e00f      	b.n	8007940 <UART_SetConfig+0x148>
 8007920:	2300      	movs	r3, #0
 8007922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007926:	e012      	b.n	800794e <UART_SetConfig+0x156>
 8007928:	2302      	movs	r3, #2
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800792e:	e00e      	b.n	800794e <UART_SetConfig+0x156>
 8007930:	2304      	movs	r3, #4
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007936:	e00a      	b.n	800794e <UART_SetConfig+0x156>
 8007938:	2308      	movs	r3, #8
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800793e:	e006      	b.n	800794e <UART_SetConfig+0x156>
 8007940:	2310      	movs	r3, #16
 8007942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007946:	e002      	b.n	800794e <UART_SetConfig+0x156>
 8007948:	2310      	movs	r3, #16
 800794a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a65      	ldr	r2, [pc, #404]	; (8007ae8 <UART_SetConfig+0x2f0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	f040 8097 	bne.w	8007a88 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800795a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800795e:	2b08      	cmp	r3, #8
 8007960:	d823      	bhi.n	80079aa <UART_SetConfig+0x1b2>
 8007962:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <UART_SetConfig+0x170>)
 8007964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007968:	0800798d 	.word	0x0800798d
 800796c:	080079ab 	.word	0x080079ab
 8007970:	08007995 	.word	0x08007995
 8007974:	080079ab 	.word	0x080079ab
 8007978:	0800799b 	.word	0x0800799b
 800797c:	080079ab 	.word	0x080079ab
 8007980:	080079ab 	.word	0x080079ab
 8007984:	080079ab 	.word	0x080079ab
 8007988:	080079a3 	.word	0x080079a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800798c:	f7fd fc7e 	bl	800528c <HAL_RCC_GetPCLK1Freq>
 8007990:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007992:	e010      	b.n	80079b6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007994:	4b56      	ldr	r3, [pc, #344]	; (8007af0 <UART_SetConfig+0x2f8>)
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007998:	e00d      	b.n	80079b6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800799a:	f7fd fbf7 	bl	800518c <HAL_RCC_GetSysClockFreq>
 800799e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80079a0:	e009      	b.n	80079b6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80079a8:	e005      	b.n	80079b6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80079b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 812b 	beq.w	8007c14 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	4a4c      	ldr	r2, [pc, #304]	; (8007af4 <UART_SetConfig+0x2fc>)
 80079c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079c8:	461a      	mov	r2, r3
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	4413      	add	r3, r2
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d305      	bcc.n	80079ee <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d903      	bls.n	80079f6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079f4:	e10e      	b.n	8007c14 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	2200      	movs	r2, #0
 80079fa:	60bb      	str	r3, [r7, #8]
 80079fc:	60fa      	str	r2, [r7, #12]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	4a3c      	ldr	r2, [pc, #240]	; (8007af4 <UART_SetConfig+0x2fc>)
 8007a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a18:	f7f8 fef0 	bl	80007fc <__aeabi_uldivmod>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4610      	mov	r0, r2
 8007a22:	4619      	mov	r1, r3
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	020b      	lsls	r3, r1, #8
 8007a2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a32:	0202      	lsls	r2, r0, #8
 8007a34:	6979      	ldr	r1, [r7, #20]
 8007a36:	6849      	ldr	r1, [r1, #4]
 8007a38:	0849      	lsrs	r1, r1, #1
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	4605      	mov	r5, r0
 8007a40:	eb12 0804 	adds.w	r8, r2, r4
 8007a44:	eb43 0905 	adc.w	r9, r3, r5
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	469a      	mov	sl, r3
 8007a50:	4693      	mov	fp, r2
 8007a52:	4652      	mov	r2, sl
 8007a54:	465b      	mov	r3, fp
 8007a56:	4640      	mov	r0, r8
 8007a58:	4649      	mov	r1, r9
 8007a5a:	f7f8 fecf 	bl	80007fc <__aeabi_uldivmod>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4613      	mov	r3, r2
 8007a64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a6c:	d308      	bcc.n	8007a80 <UART_SetConfig+0x288>
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a74:	d204      	bcs.n	8007a80 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6a3a      	ldr	r2, [r7, #32]
 8007a7c:	60da      	str	r2, [r3, #12]
 8007a7e:	e0c9      	b.n	8007c14 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007a86:	e0c5      	b.n	8007c14 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a90:	d16d      	bne.n	8007b6e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007a92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a96:	3b01      	subs	r3, #1
 8007a98:	2b07      	cmp	r3, #7
 8007a9a:	d82d      	bhi.n	8007af8 <UART_SetConfig+0x300>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0x2ac>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ac5 	.word	0x08007ac5
 8007aa8:	08007acd 	.word	0x08007acd
 8007aac:	08007af9 	.word	0x08007af9
 8007ab0:	08007ad3 	.word	0x08007ad3
 8007ab4:	08007af9 	.word	0x08007af9
 8007ab8:	08007af9 	.word	0x08007af9
 8007abc:	08007af9 	.word	0x08007af9
 8007ac0:	08007adb 	.word	0x08007adb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ac4:	f7fd fbf8 	bl	80052b8 <HAL_RCC_GetPCLK2Freq>
 8007ac8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007aca:	e01b      	b.n	8007b04 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007acc:	4b08      	ldr	r3, [pc, #32]	; (8007af0 <UART_SetConfig+0x2f8>)
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ad0:	e018      	b.n	8007b04 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ad2:	f7fd fb5b 	bl	800518c <HAL_RCC_GetSysClockFreq>
 8007ad6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ad8:	e014      	b.n	8007b04 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ae0:	e010      	b.n	8007b04 <UART_SetConfig+0x30c>
 8007ae2:	bf00      	nop
 8007ae4:	cfff69f3 	.word	0xcfff69f3
 8007ae8:	40008000 	.word	0x40008000
 8007aec:	40013800 	.word	0x40013800
 8007af0:	00f42400 	.word	0x00f42400
 8007af4:	0800f8d8 	.word	0x0800f8d8
      default:
        pclk = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007b02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 8084 	beq.w	8007c14 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	4a4b      	ldr	r2, [pc, #300]	; (8007c40 <UART_SetConfig+0x448>)
 8007b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b16:	461a      	mov	r2, r3
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b1e:	005a      	lsls	r2, r3, #1
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	441a      	add	r2, r3
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b30:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	2b0f      	cmp	r3, #15
 8007b36:	d916      	bls.n	8007b66 <UART_SetConfig+0x36e>
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3e:	d212      	bcs.n	8007b66 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f023 030f 	bic.w	r3, r3, #15
 8007b48:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	085b      	lsrs	r3, r3, #1
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	8bfb      	ldrh	r3, [r7, #30]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	8bfa      	ldrh	r2, [r7, #30]
 8007b62:	60da      	str	r2, [r3, #12]
 8007b64:	e056      	b.n	8007c14 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007b6c:	e052      	b.n	8007c14 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b72:	3b01      	subs	r3, #1
 8007b74:	2b07      	cmp	r3, #7
 8007b76:	d822      	bhi.n	8007bbe <UART_SetConfig+0x3c6>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <UART_SetConfig+0x388>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007ba1 	.word	0x08007ba1
 8007b84:	08007ba9 	.word	0x08007ba9
 8007b88:	08007bbf 	.word	0x08007bbf
 8007b8c:	08007baf 	.word	0x08007baf
 8007b90:	08007bbf 	.word	0x08007bbf
 8007b94:	08007bbf 	.word	0x08007bbf
 8007b98:	08007bbf 	.word	0x08007bbf
 8007b9c:	08007bb7 	.word	0x08007bb7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ba0:	f7fd fb8a 	bl	80052b8 <HAL_RCC_GetPCLK2Freq>
 8007ba4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ba6:	e010      	b.n	8007bca <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ba8:	4b26      	ldr	r3, [pc, #152]	; (8007c44 <UART_SetConfig+0x44c>)
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bac:	e00d      	b.n	8007bca <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bae:	f7fd faed 	bl	800518c <HAL_RCC_GetSysClockFreq>
 8007bb2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007bb4:	e009      	b.n	8007bca <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007bbc:	e005      	b.n	8007bca <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d021      	beq.n	8007c14 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	4a1a      	ldr	r2, [pc, #104]	; (8007c40 <UART_SetConfig+0x448>)
 8007bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	441a      	add	r2, r3
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	2b0f      	cmp	r3, #15
 8007bf8:	d909      	bls.n	8007c0e <UART_SetConfig+0x416>
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c00:	d205      	bcs.n	8007c0e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	60da      	str	r2, [r3, #12]
 8007c0c:	e002      	b.n	8007c14 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	2200      	movs	r2, #0
 8007c28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007c30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3730      	adds	r7, #48	; 0x30
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c3e:	bf00      	nop
 8007c40:	0800f8d8 	.word	0x0800f8d8
 8007c44:	00f42400 	.word	0x00f42400

08007c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	f003 0308 	and.w	r3, r3, #8
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	f003 0304 	and.w	r3, r3, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01a      	beq.n	8007d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d46:	d10a      	bne.n	8007d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	605a      	str	r2, [r3, #4]
  }
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b098      	sub	sp, #96	; 0x60
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d9c:	f7fb f97c 	bl	8003098 <HAL_GetTick>
 8007da0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d12f      	bne.n	8007e10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db8:	2200      	movs	r2, #0
 8007dba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f88e 	bl	8007ee0 <UART_WaitOnFlagUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d022      	beq.n	8007e10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dde:	653b      	str	r3, [r7, #80]	; 0x50
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e6      	bne.n	8007dca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2220      	movs	r2, #32
 8007e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e063      	b.n	8007ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d149      	bne.n	8007eb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e26:	2200      	movs	r2, #0
 8007e28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f857 	bl	8007ee0 <UART_WaitOnFlagUntilTimeout>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d03c      	beq.n	8007eb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	623b      	str	r3, [r7, #32]
   return(result);
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e56:	633b      	str	r3, [r7, #48]	; 0x30
 8007e58:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e6      	bne.n	8007e38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	e853 3f00 	ldrex	r3, [r3]
 8007e78:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f023 0301 	bic.w	r3, r3, #1
 8007e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e8a:	61fa      	str	r2, [r7, #28]
 8007e8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8e:	69b9      	ldr	r1, [r7, #24]
 8007e90:	69fa      	ldr	r2, [r7, #28]
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	617b      	str	r3, [r7, #20]
   return(result);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e5      	bne.n	8007e6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e012      	b.n	8007ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3758      	adds	r7, #88	; 0x58
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	4613      	mov	r3, r2
 8007eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef0:	e04f      	b.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d04b      	beq.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007efa:	f7fb f8cd 	bl	8003098 <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d302      	bcc.n	8007f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e04e      	b.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0304 	and.w	r3, r3, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d037      	beq.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2b80      	cmp	r3, #128	; 0x80
 8007f26:	d034      	beq.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2b40      	cmp	r3, #64	; 0x40
 8007f2c:	d031      	beq.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	f003 0308 	and.w	r3, r3, #8
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d110      	bne.n	8007f5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2208      	movs	r2, #8
 8007f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 f879 	bl	800803c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2208      	movs	r2, #8
 8007f4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e029      	b.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f6c:	d111      	bne.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f85f 	bl	800803c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2220      	movs	r2, #32
 8007f82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e00f      	b.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69da      	ldr	r2, [r3, #28]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	bf0c      	ite	eq
 8007fa2:	2301      	moveq	r3, #1
 8007fa4:	2300      	movne	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	461a      	mov	r2, r3
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d0a0      	beq.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b08f      	sub	sp, #60	; 0x3c
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fe2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e6      	bne.n	8007fc2 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	60bb      	str	r3, [r7, #8]
   return(result);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800800a:	633b      	str	r3, [r7, #48]	; 0x30
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3308      	adds	r3, #8
 8008012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008014:	61ba      	str	r2, [r7, #24]
 8008016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	6979      	ldr	r1, [r7, #20]
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	613b      	str	r3, [r7, #16]
   return(result);
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e5      	bne.n	8007ff4 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008030:	bf00      	nop
 8008032:	373c      	adds	r7, #60	; 0x3c
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800803c:	b480      	push	{r7}
 800803e:	b095      	sub	sp, #84	; 0x54
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008058:	64fb      	str	r3, [r7, #76]	; 0x4c
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008062:	643b      	str	r3, [r7, #64]	; 0x40
 8008064:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008068:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e6      	bne.n	8008044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3308      	adds	r3, #8
 800807c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	61fb      	str	r3, [r7, #28]
   return(result);
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800808c:	f023 0301 	bic.w	r3, r3, #1
 8008090:	64bb      	str	r3, [r7, #72]	; 0x48
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3308      	adds	r3, #8
 8008098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800809a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e3      	bne.n	8008076 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d118      	bne.n	80080e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	e853 3f00 	ldrex	r3, [r3]
 80080c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f023 0310 	bic.w	r3, r3, #16
 80080ca:	647b      	str	r3, [r7, #68]	; 0x44
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	461a      	mov	r2, r3
 80080d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d8:	6979      	ldr	r1, [r7, #20]
 80080da:	69ba      	ldr	r2, [r7, #24]
 80080dc:	e841 2300 	strex	r3, r2, [r1]
 80080e0:	613b      	str	r3, [r7, #16]
   return(result);
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e6      	bne.n	80080b6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2220      	movs	r2, #32
 80080ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	675a      	str	r2, [r3, #116]	; 0x74
}
 80080fc:	bf00      	nop
 80080fe:	3754      	adds	r7, #84	; 0x54
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b090      	sub	sp, #64	; 0x40
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008114:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d137      	bne.n	8008194 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008126:	2200      	movs	r2, #0
 8008128:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800812c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3308      	adds	r3, #8
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	623b      	str	r3, [r7, #32]
   return(result);
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008142:	63bb      	str	r3, [r7, #56]	; 0x38
 8008144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3308      	adds	r3, #8
 800814a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800814c:	633a      	str	r2, [r7, #48]	; 0x30
 800814e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008154:	e841 2300 	strex	r3, r2, [r1]
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1e5      	bne.n	800812c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	60fb      	str	r3, [r7, #12]
   return(result);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
 8008176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817e:	61fb      	str	r3, [r7, #28]
 8008180:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	69b9      	ldr	r1, [r7, #24]
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	e841 2300 	strex	r3, r2, [r1]
 800818a:	617b      	str	r3, [r7, #20]
   return(result);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e6      	bne.n	8008160 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008192:	e002      	b.n	800819a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008194:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008196:	f7f9 ffcf 	bl	8002138 <HAL_UART_TxCpltCallback>
}
 800819a:	bf00      	nop
 800819c:	3740      	adds	r7, #64	; 0x40
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff fb01 	bl	80077b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b086      	sub	sp, #24
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e6:	2b80      	cmp	r3, #128	; 0x80
 80081e8:	d109      	bne.n	80081fe <UART_DMAError+0x40>
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b21      	cmp	r3, #33	; 0x21
 80081ee:	d106      	bne.n	80081fe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80081f8:	6978      	ldr	r0, [r7, #20]
 80081fa:	f7ff fede 	bl	8007fba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008208:	2b40      	cmp	r3, #64	; 0x40
 800820a:	d109      	bne.n	8008220 <UART_DMAError+0x62>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b22      	cmp	r3, #34	; 0x22
 8008210:	d106      	bne.n	8008220 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2200      	movs	r2, #0
 8008216:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800821a:	6978      	ldr	r0, [r7, #20]
 800821c:	f7ff ff0e 	bl	800803c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008226:	f043 0210 	orr.w	r2, r3, #16
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008230:	6978      	ldr	r0, [r7, #20]
 8008232:	f7ff facb 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008236:	bf00      	nop
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f7ff fab5 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008262:	bf00      	nop
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b088      	sub	sp, #32
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008286:	61fb      	str	r3, [r7, #28]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	61bb      	str	r3, [r7, #24]
 8008292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6979      	ldr	r1, [r7, #20]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	613b      	str	r3, [r7, #16]
   return(result);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e6      	bne.n	8008272 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7f9 ff40 	bl	8002138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082b8:	bf00      	nop
 80082ba:	3720      	adds	r7, #32
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800830a:	2b01      	cmp	r3, #1
 800830c:	d101      	bne.n	8008312 <HAL_UARTEx_DisableFifoMode+0x16>
 800830e:	2302      	movs	r3, #2
 8008310:	e027      	b.n	8008362 <HAL_UARTEx_DisableFifoMode+0x66>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2224      	movs	r2, #36	; 0x24
 800831e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0201 	bic.w	r2, r2, #1
 8008338:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008340:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2220      	movs	r2, #32
 8008354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b084      	sub	sp, #16
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800837e:	2b01      	cmp	r3, #1
 8008380:	d101      	bne.n	8008386 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008382:	2302      	movs	r3, #2
 8008384:	e02d      	b.n	80083e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2224      	movs	r2, #36	; 0x24
 8008392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0201 	bic.w	r2, r2, #1
 80083ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f850 	bl	8008468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2220      	movs	r2, #32
 80083d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d101      	bne.n	8008402 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083fe:	2302      	movs	r3, #2
 8008400:	e02d      	b.n	800845e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2224      	movs	r2, #36	; 0x24
 800840e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0201 	bic.w	r2, r2, #1
 8008428:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f812 	bl	8008468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2220      	movs	r2, #32
 8008450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008474:	2b00      	cmp	r3, #0
 8008476:	d108      	bne.n	800848a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008488:	e031      	b.n	80084ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800848a:	2308      	movs	r3, #8
 800848c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800848e:	2308      	movs	r3, #8
 8008490:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	0e5b      	lsrs	r3, r3, #25
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	0f5b      	lsrs	r3, r3, #29
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	7b3a      	ldrb	r2, [r7, #12]
 80084b6:	4911      	ldr	r1, [pc, #68]	; (80084fc <UARTEx_SetNbDataToProcess+0x94>)
 80084b8:	5c8a      	ldrb	r2, [r1, r2]
 80084ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084be:	7b3a      	ldrb	r2, [r7, #12]
 80084c0:	490f      	ldr	r1, [pc, #60]	; (8008500 <UARTEx_SetNbDataToProcess+0x98>)
 80084c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	7b7a      	ldrb	r2, [r7, #13]
 80084d4:	4909      	ldr	r1, [pc, #36]	; (80084fc <UARTEx_SetNbDataToProcess+0x94>)
 80084d6:	5c8a      	ldrb	r2, [r1, r2]
 80084d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084dc:	7b7a      	ldrb	r2, [r7, #13]
 80084de:	4908      	ldr	r1, [pc, #32]	; (8008500 <UARTEx_SetNbDataToProcess+0x98>)
 80084e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084ee:	bf00      	nop
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	0800f8f0 	.word	0x0800f8f0
 8008500:	0800f8f8 	.word	0x0800f8f8

08008504 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800850c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008510:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008518:	b29a      	uxth	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	b29b      	uxth	r3, r3
 800851e:	43db      	mvns	r3, r3
 8008520:	b29b      	uxth	r3, r3
 8008522:	4013      	ands	r3, r2
 8008524:	b29a      	uxth	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800853a:	b480      	push	{r7}
 800853c:	b085      	sub	sp, #20
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	1d3b      	adds	r3, r7, #4
 8008544:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b088      	sub	sp, #32
 800857a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800857c:	2300      	movs	r3, #0
 800857e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008580:	f107 0308 	add.w	r3, r7, #8
 8008584:	2218      	movs	r2, #24
 8008586:	2100      	movs	r1, #0
 8008588:	4618      	mov	r0, r3
 800858a:	f001 f8d8 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 800858e:	233f      	movs	r3, #63	; 0x3f
 8008590:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008592:	2381      	movs	r3, #129	; 0x81
 8008594:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008596:	1dfb      	adds	r3, r7, #7
 8008598:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800859a:	2301      	movs	r3, #1
 800859c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800859e:	f107 0308 	add.w	r3, r7, #8
 80085a2:	2100      	movs	r1, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 fb53 	bl	8009c50 <hci_send_req>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	da01      	bge.n	80085b4 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80085b0:	23ff      	movs	r3, #255	; 0xff
 80085b2:	e000      	b.n	80085b6 <aci_gap_set_non_discoverable+0x40>
  return status;
 80085b4:	79fb      	ldrb	r3, [r7, #7]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80085be:	b5b0      	push	{r4, r5, r7, lr}
 80085c0:	b0ce      	sub	sp, #312	; 0x138
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	4605      	mov	r5, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	4610      	mov	r0, r2
 80085ca:	4619      	mov	r1, r3
 80085cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80085d0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80085d4:	462a      	mov	r2, r5
 80085d6:	701a      	strb	r2, [r3, #0]
 80085d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80085dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80085e0:	4622      	mov	r2, r4
 80085e2:	801a      	strh	r2, [r3, #0]
 80085e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80085e8:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80085ec:	4602      	mov	r2, r0
 80085ee:	801a      	strh	r2, [r3, #0]
 80085f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80085f4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80085f8:	460a      	mov	r2, r1
 80085fa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80085fc:	f107 0310 	add.w	r3, r7, #16
 8008600:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008604:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008608:	3308      	adds	r3, #8
 800860a:	f107 0210 	add.w	r2, r7, #16
 800860e:	4413      	add	r3, r2
 8008610:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008614:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008618:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800861c:	4413      	add	r3, r2
 800861e:	3309      	adds	r3, #9
 8008620:	f107 0210 	add.w	r2, r7, #16
 8008624:	4413      	add	r3, r2
 8008626:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800862a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800862e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008632:	2200      	movs	r2, #0
 8008634:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800863c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008640:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008644:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008648:	7812      	ldrb	r2, [r2, #0]
 800864a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800864c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008650:	3301      	adds	r3, #1
 8008652:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008656:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800865a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800865e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008662:	8812      	ldrh	r2, [r2, #0]
 8008664:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008668:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800866c:	3302      	adds	r3, #2
 800866e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008672:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008676:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800867a:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800867e:	8812      	ldrh	r2, [r2, #0]
 8008680:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008684:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008688:	3302      	adds	r3, #2
 800868a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800868e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008692:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008696:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800869a:	7812      	ldrb	r2, [r2, #0]
 800869c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800869e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086a2:	3301      	adds	r3, #1
 80086a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80086a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086ac:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80086b0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80086b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086b6:	3301      	adds	r3, #1
 80086b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80086bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086c0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80086c4:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80086c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086ca:	3301      	adds	r3, #1
 80086cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80086d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086d4:	3308      	adds	r3, #8
 80086d6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80086da:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 f81d 	bl	800971e <Osal_MemCpy>
    index_input += Local_Name_Length;
 80086e4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80086e8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80086ec:	4413      	add	r3, r2
 80086ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80086f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80086f6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80086fa:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80086fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008700:	3301      	adds	r3, #1
 8008702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008706:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800870a:	3301      	adds	r3, #1
 800870c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008710:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008714:	4618      	mov	r0, r3
 8008716:	f001 f802 	bl	800971e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800871a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800871e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008722:	4413      	add	r3, r2
 8008724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8008728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008730:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008732:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008736:	3302      	adds	r3, #2
 8008738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800873c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008740:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008744:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008746:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800874a:	3302      	adds	r3, #2
 800874c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008750:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008754:	2218      	movs	r2, #24
 8008756:	2100      	movs	r1, #0
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fff0 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 800875e:	233f      	movs	r3, #63	; 0x3f
 8008760:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008764:	2383      	movs	r3, #131	; 0x83
 8008766:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800876a:	f107 0310 	add.w	r3, r7, #16
 800876e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008776:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800877a:	f107 030f 	add.w	r3, r7, #15
 800877e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008782:	2301      	movs	r3, #1
 8008784:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008788:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800878c:	2100      	movs	r1, #0
 800878e:	4618      	mov	r0, r3
 8008790:	f001 fa5e 	bl	8009c50 <hci_send_req>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	da01      	bge.n	800879e <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800879a:	23ff      	movs	r3, #255	; 0xff
 800879c:	e004      	b.n	80087a8 <aci_gap_set_discoverable+0x1ea>
  return status;
 800879e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80087a2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80087a6:	781b      	ldrb	r3, [r3, #0]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bdb0      	pop	{r4, r5, r7, pc}

080087b2 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b0cc      	sub	sp, #304	; 0x130
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	4602      	mov	r2, r0
 80087ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087be:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80087c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80087c4:	f107 0310 	add.w	r3, r7, #16
 80087c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80087cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80087d4:	2200      	movs	r2, #0
 80087d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80087de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087e6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80087ea:	7812      	ldrb	r2, [r2, #0]
 80087ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80087ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087f2:	3301      	adds	r3, #1
 80087f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087fc:	2218      	movs	r2, #24
 80087fe:	2100      	movs	r1, #0
 8008800:	4618      	mov	r0, r3
 8008802:	f000 ff9c 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008806:	233f      	movs	r3, #63	; 0x3f
 8008808:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800880c:	2385      	movs	r3, #133	; 0x85
 800880e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008812:	f107 0310 	add.w	r3, r7, #16
 8008816:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800881a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800881e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008822:	f107 030f 	add.w	r3, r7, #15
 8008826:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800882a:	2301      	movs	r3, #1
 800882c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008830:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008834:	2100      	movs	r1, #0
 8008836:	4618      	mov	r0, r3
 8008838:	f001 fa0a 	bl	8009c50 <hci_send_req>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	da01      	bge.n	8008846 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008842:	23ff      	movs	r3, #255	; 0xff
 8008844:	e004      	b.n	8008850 <aci_gap_set_io_capability+0x9e>
  return status;
 8008846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800884a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800884e:	781b      	ldrb	r3, [r3, #0]
}
 8008850:	4618      	mov	r0, r3
 8008852:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800885a:	b5b0      	push	{r4, r5, r7, lr}
 800885c:	b0cc      	sub	sp, #304	; 0x130
 800885e:	af00      	add	r7, sp, #0
 8008860:	4605      	mov	r5, r0
 8008862:	460c      	mov	r4, r1
 8008864:	4610      	mov	r0, r2
 8008866:	4619      	mov	r1, r3
 8008868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008870:	462a      	mov	r2, r5
 8008872:	701a      	strb	r2, [r3, #0]
 8008874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008878:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800887c:	4622      	mov	r2, r4
 800887e:	701a      	strb	r2, [r3, #0]
 8008880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008884:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008888:	4602      	mov	r2, r0
 800888a:	701a      	strb	r2, [r3, #0]
 800888c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008890:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008894:	460a      	mov	r2, r1
 8008896:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008898:	f107 0310 	add.w	r3, r7, #16
 800889c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80088a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80088a8:	2200      	movs	r2, #0
 80088aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80088b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088ba:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80088be:	7812      	ldrb	r2, [r2, #0]
 80088c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088c6:	3301      	adds	r3, #1
 80088c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80088cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088d4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80088d8:	7812      	ldrb	r2, [r2, #0]
 80088da:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80088dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088e0:	3301      	adds	r3, #1
 80088e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80088e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088ee:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80088f2:	7812      	ldrb	r2, [r2, #0]
 80088f4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80088f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088fa:	3301      	adds	r3, #1
 80088fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008904:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008908:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800890c:	7812      	ldrb	r2, [r2, #0]
 800890e:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008910:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008914:	3301      	adds	r3, #1
 8008916:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800891a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800891e:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008922:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008924:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008928:	3301      	adds	r3, #1
 800892a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800892e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008932:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008936:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800893c:	3301      	adds	r3, #1
 800893e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008946:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800894a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800894c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008950:	3301      	adds	r3, #1
 8008952:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800895a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800895e:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008962:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008966:	3304      	adds	r3, #4
 8008968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800896c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008970:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008974:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008976:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800897a:	3301      	adds	r3, #1
 800897c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008980:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008984:	2218      	movs	r2, #24
 8008986:	2100      	movs	r1, #0
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fed8 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 800898e:	233f      	movs	r3, #63	; 0x3f
 8008990:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008994:	2386      	movs	r3, #134	; 0x86
 8008996:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800899a:	f107 0310 	add.w	r3, r7, #16
 800899e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089aa:	f107 030f 	add.w	r3, r7, #15
 80089ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089b2:	2301      	movs	r3, #1
 80089b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089bc:	2100      	movs	r1, #0
 80089be:	4618      	mov	r0, r3
 80089c0:	f001 f946 	bl	8009c50 <hci_send_req>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	da01      	bge.n	80089ce <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80089ca:	23ff      	movs	r3, #255	; 0xff
 80089cc:	e004      	b.n	80089d8 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80089ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80089d6:	781b      	ldrb	r3, [r3, #0]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089de:	46bd      	mov	sp, r7
 80089e0:	bdb0      	pop	{r4, r5, r7, pc}

080089e2 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b0cc      	sub	sp, #304	; 0x130
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	4602      	mov	r2, r0
 80089ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f2:	6019      	str	r1, [r3, #0]
 80089f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80089fc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80089fe:	f107 0310 	add.w	r3, r7, #16
 8008a02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a0e:	2200      	movs	r2, #0
 8008a10:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a20:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008a24:	8812      	ldrh	r2, [r2, #0]
 8008a26:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a2c:	3302      	adds	r3, #2
 8008a2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8008a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a3a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008a3e:	6812      	ldr	r2, [r2, #0]
 8008a40:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008a44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a48:	3304      	adds	r3, #4
 8008a4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a52:	2218      	movs	r2, #24
 8008a54:	2100      	movs	r1, #0
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 fe71 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a5c:	233f      	movs	r3, #63	; 0x3f
 8008a5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008a62:	2388      	movs	r3, #136	; 0x88
 8008a64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a68:	f107 0310 	add.w	r3, r7, #16
 8008a6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008a78:	f107 030f 	add.w	r3, r7, #15
 8008a7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008a80:	2301      	movs	r3, #1
 8008a82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f001 f8df 	bl	8009c50 <hci_send_req>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	da01      	bge.n	8008a9c <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8008a98:	23ff      	movs	r3, #255	; 0xff
 8008a9a:	e004      	b.n	8008aa6 <aci_gap_pass_key_resp+0xc4>
  return status;
 8008a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008aa4:	781b      	ldrb	r3, [r3, #0]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008ab0:	b590      	push	{r4, r7, lr}
 8008ab2:	b0cd      	sub	sp, #308	; 0x134
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	4611      	mov	r1, r2
 8008abc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ac0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008ace:	4622      	mov	r2, r4
 8008ad0:	701a      	strb	r2, [r3, #0]
 8008ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008ada:	4602      	mov	r2, r0
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008ae6:	460a      	mov	r2, r1
 8008ae8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008aea:	f107 0310 	add.w	r3, r7, #16
 8008aee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008af2:	f107 0308 	add.w	r3, r7, #8
 8008af6:	2207      	movs	r2, #7
 8008af8:	2100      	movs	r1, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f000 fe1f 	bl	800973e <Osal_MemSet>
  int index_input = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b0e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008b12:	7812      	ldrb	r2, [r2, #0]
 8008b14:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b28:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008b2c:	7812      	ldrb	r2, [r2, #0]
 8008b2e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b34:	3301      	adds	r3, #1
 8008b36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b42:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008b46:	7812      	ldrb	r2, [r2, #0]
 8008b48:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008b4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b4e:	3301      	adds	r3, #1
 8008b50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b58:	2218      	movs	r2, #24
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fdee 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b62:	233f      	movs	r3, #63	; 0x3f
 8008b64:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008b68:	238a      	movs	r3, #138	; 0x8a
 8008b6a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b6e:	f107 0310 	add.w	r3, r7, #16
 8008b72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008b7e:	f107 0308 	add.w	r3, r7, #8
 8008b82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008b86:	2307      	movs	r3, #7
 8008b88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f001 f85c 	bl	8009c50 <hci_send_req>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	da01      	bge.n	8008ba2 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008b9e:	23ff      	movs	r3, #255	; 0xff
 8008ba0:	e02e      	b.n	8008c00 <aci_gap_init+0x150>
  if ( resp.Status )
 8008ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d005      	beq.n	8008bbc <aci_gap_init+0x10c>
    return resp.Status;
 8008bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	e021      	b.n	8008c00 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008bc4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bda:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008bde:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008be8:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008bf2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008bfc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd90      	pop	{r4, r7, pc}

08008c0a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b0cc      	sub	sp, #304	; 0x130
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	4602      	mov	r2, r0
 8008c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c1a:	6019      	str	r1, [r3, #0]
 8008c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c20:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008c24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008c26:	f107 0310 	add.w	r3, r7, #16
 8008c2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c32:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c44:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c48:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008c4c:	7812      	ldrb	r2, [r2, #0]
 8008c4e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c54:	3301      	adds	r3, #1
 8008c56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c5e:	1c58      	adds	r0, r3, #1
 8008c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c64:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008c68:	781a      	ldrb	r2, [r3, #0]
 8008c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c72:	6819      	ldr	r1, [r3, #0]
 8008c74:	f000 fd53 	bl	800971e <Osal_MemCpy>
  index_input += AdvDataLen;
 8008c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c7c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008c86:	4413      	add	r3, r2
 8008c88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c90:	2218      	movs	r2, #24
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 fd52 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c9a:	233f      	movs	r3, #63	; 0x3f
 8008c9c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008ca0:	238e      	movs	r3, #142	; 0x8e
 8008ca2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ca6:	f107 0310 	add.w	r3, r7, #16
 8008caa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008cb6:	f107 030f 	add.w	r3, r7, #15
 8008cba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008cc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 ffc0 	bl	8009c50 <hci_send_req>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	da01      	bge.n	8008cda <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008cd6:	23ff      	movs	r3, #255	; 0xff
 8008cd8:	e004      	b.n	8008ce4 <aci_gap_update_adv_data+0xda>
  return status;
 8008cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cde:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ce2:	781b      	ldrb	r3, [r3, #0]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b088      	sub	sp, #32
 8008cf2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cf8:	f107 0308 	add.w	r3, r7, #8
 8008cfc:	2218      	movs	r2, #24
 8008cfe:	2100      	movs	r1, #0
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 fd1c 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d06:	233f      	movs	r3, #63	; 0x3f
 8008d08:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008d0a:	2392      	movs	r3, #146	; 0x92
 8008d0c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008d0e:	1dfb      	adds	r3, r7, #7
 8008d10:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008d12:	2301      	movs	r3, #1
 8008d14:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d16:	f107 0308 	add.w	r3, r7, #8
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 ff97 	bl	8009c50 <hci_send_req>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	da01      	bge.n	8008d2c <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008d28:	23ff      	movs	r3, #255	; 0xff
 8008d2a:	e000      	b.n	8008d2e <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3720      	adds	r7, #32
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b0cc      	sub	sp, #304	; 0x130
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d42:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008d46:	801a      	strh	r2, [r3, #0]
 8008d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008d50:	460a      	mov	r2, r1
 8008d52:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008d54:	f107 0310 	add.w	r3, r7, #16
 8008d58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d60:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d64:	2200      	movs	r2, #0
 8008d66:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d76:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008d7a:	8812      	ldrh	r2, [r2, #0]
 8008d7c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d82:	3302      	adds	r3, #2
 8008d84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d90:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008d94:	7812      	ldrb	r2, [r2, #0]
 8008d96:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008da2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008da6:	2218      	movs	r2, #24
 8008da8:	2100      	movs	r1, #0
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fcc7 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008db0:	233f      	movs	r3, #63	; 0x3f
 8008db2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008db6:	23a5      	movs	r3, #165	; 0xa5
 8008db8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008dbc:	f107 0310 	add.w	r3, r7, #16
 8008dc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008dcc:	f107 030f 	add.w	r3, r7, #15
 8008dd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dde:	2100      	movs	r1, #0
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 ff35 	bl	8009c50 <hci_send_req>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	da01      	bge.n	8008df0 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008dec:	23ff      	movs	r3, #255	; 0xff
 8008dee:	e004      	b.n	8008dfa <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008df8:	781b      	ldrb	r3, [r3, #0]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e0e:	f107 0308 	add.w	r3, r7, #8
 8008e12:	2218      	movs	r2, #24
 8008e14:	2100      	movs	r1, #0
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fc91 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e1c:	233f      	movs	r3, #63	; 0x3f
 8008e1e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008e20:	f240 1301 	movw	r3, #257	; 0x101
 8008e24:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008e26:	1dfb      	adds	r3, r7, #7
 8008e28:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e2e:	f107 0308 	add.w	r3, r7, #8
 8008e32:	2100      	movs	r1, #0
 8008e34:	4618      	mov	r0, r3
 8008e36:	f000 ff0b 	bl	8009c50 <hci_send_req>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	da01      	bge.n	8008e44 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008e40:	23ff      	movs	r3, #255	; 0xff
 8008e42:	e000      	b.n	8008e46 <aci_gatt_init+0x42>
  return status;
 8008e44:	79fb      	ldrb	r3, [r7, #7]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3720      	adds	r7, #32
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008e4e:	b590      	push	{r4, r7, lr}
 8008e50:	b0cf      	sub	sp, #316	; 0x13c
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	4604      	mov	r4, r0
 8008e56:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008e5a:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008e5e:	6001      	str	r1, [r0, #0]
 8008e60:	4610      	mov	r0, r2
 8008e62:	4619      	mov	r1, r3
 8008e64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e68:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008e6c:	4622      	mov	r2, r4
 8008e6e:	701a      	strb	r2, [r3, #0]
 8008e70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e74:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008e78:	4602      	mov	r2, r0
 8008e7a:	701a      	strb	r2, [r3, #0]
 8008e7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e80:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008e84:	460a      	mov	r2, r1
 8008e86:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008e88:	f107 0310 	add.w	r3, r7, #16
 8008e8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008e90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e94:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d00a      	beq.n	8008eb4 <aci_gatt_add_service+0x66>
 8008e9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ea2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d101      	bne.n	8008eb0 <aci_gatt_add_service+0x62>
 8008eac:	2311      	movs	r3, #17
 8008eae:	e002      	b.n	8008eb6 <aci_gatt_add_service+0x68>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e000      	b.n	8008eb6 <aci_gatt_add_service+0x68>
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	f107 0210 	add.w	r2, r7, #16
 8008eba:	4413      	add	r3, r2
 8008ebc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008ec0:	f107 030c 	add.w	r3, r7, #12
 8008ec4:	2203      	movs	r2, #3
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 fc38 	bl	800973e <Osal_MemSet>
  int index_input = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008ed4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ed8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008edc:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008ee0:	7812      	ldrb	r2, [r2, #0]
 8008ee2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ee8:	3301      	adds	r3, #1
 8008eea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008eee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ef2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d002      	beq.n	8008f02 <aci_gatt_add_service+0xb4>
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d004      	beq.n	8008f0a <aci_gatt_add_service+0xbc>
 8008f00:	e007      	b.n	8008f12 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008f02:	2302      	movs	r3, #2
 8008f04:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008f08:	e005      	b.n	8008f16 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008f0a:	2310      	movs	r3, #16
 8008f0c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008f10:	e001      	b.n	8008f16 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008f12:	2397      	movs	r3, #151	; 0x97
 8008f14:	e06c      	b.n	8008ff0 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008f16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f1a:	1c58      	adds	r0, r3, #1
 8008f1c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008f20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f24:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008f28:	6819      	ldr	r1, [r3, #0]
 8008f2a:	f000 fbf8 	bl	800971e <Osal_MemCpy>
    index_input += size;
 8008f2e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008f32:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008f36:	4413      	add	r3, r2
 8008f38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f40:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008f44:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008f48:	7812      	ldrb	r2, [r2, #0]
 8008f4a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008f4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f50:	3301      	adds	r3, #1
 8008f52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f5a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008f5e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008f62:	7812      	ldrb	r2, [r2, #0]
 8008f64:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008f66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f74:	2218      	movs	r2, #24
 8008f76:	2100      	movs	r1, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 fbe0 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f7e:	233f      	movs	r3, #63	; 0x3f
 8008f80:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008f84:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008f88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f8c:	f107 0310 	add.w	r3, r7, #16
 8008f90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008f9c:	f107 030c 	add.w	r3, r7, #12
 8008fa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008faa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fae:	2100      	movs	r1, #0
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 fe4d 	bl	8009c50 <hci_send_req>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	da01      	bge.n	8008fc0 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008fbc:	23ff      	movs	r3, #255	; 0xff
 8008fbe:	e017      	b.n	8008ff0 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008fc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d005      	beq.n	8008fda <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008fce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	e00a      	b.n	8008ff0 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008fda:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fe2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008fec:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd90      	pop	{r4, r7, pc}

08008ffa <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008ffa:	b590      	push	{r4, r7, lr}
 8008ffc:	b0d1      	sub	sp, #324	; 0x144
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	4604      	mov	r4, r0
 8009002:	4608      	mov	r0, r1
 8009004:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009008:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800900c:	600a      	str	r2, [r1, #0]
 800900e:	4619      	mov	r1, r3
 8009010:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009014:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009018:	4622      	mov	r2, r4
 800901a:	801a      	strh	r2, [r3, #0]
 800901c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009020:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009024:	4602      	mov	r2, r0
 8009026:	701a      	strb	r2, [r3, #0]
 8009028:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800902c:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009030:	460a      	mov	r2, r1
 8009032:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009034:	f107 0318 	add.w	r3, r7, #24
 8009038:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800903c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009040:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d00a      	beq.n	8009060 <aci_gatt_add_char+0x66>
 800904a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800904e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d101      	bne.n	800905c <aci_gatt_add_char+0x62>
 8009058:	2313      	movs	r3, #19
 800905a:	e002      	b.n	8009062 <aci_gatt_add_char+0x68>
 800905c:	2303      	movs	r3, #3
 800905e:	e000      	b.n	8009062 <aci_gatt_add_char+0x68>
 8009060:	2305      	movs	r3, #5
 8009062:	f107 0218 	add.w	r2, r7, #24
 8009066:	4413      	add	r3, r2
 8009068:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800906c:	f107 0314 	add.w	r3, r7, #20
 8009070:	2203      	movs	r2, #3
 8009072:	2100      	movs	r1, #0
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fb62 	bl	800973e <Osal_MemSet>
  int index_input = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8009080:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009084:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009088:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800908c:	8812      	ldrh	r2, [r2, #0]
 800908e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009090:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009094:	3302      	adds	r3, #2
 8009096:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800909a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800909e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80090a2:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80090a6:	7812      	ldrb	r2, [r2, #0]
 80090a8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80090aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090ae:	3301      	adds	r3, #1
 80090b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80090b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090b8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d002      	beq.n	80090c8 <aci_gatt_add_char+0xce>
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d004      	beq.n	80090d0 <aci_gatt_add_char+0xd6>
 80090c6:	e007      	b.n	80090d8 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80090c8:	2302      	movs	r3, #2
 80090ca:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80090ce:	e005      	b.n	80090dc <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80090d0:	2310      	movs	r3, #16
 80090d2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80090d6:	e001      	b.n	80090dc <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80090d8:	2397      	movs	r3, #151	; 0x97
 80090da:	e091      	b.n	8009200 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80090dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80090e0:	1cd8      	adds	r0, r3, #3
 80090e2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80090e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80090ee:	6819      	ldr	r1, [r3, #0]
 80090f0:	f000 fb15 	bl	800971e <Osal_MemCpy>
    index_input += size;
 80090f4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80090f8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80090fc:	4413      	add	r3, r2
 80090fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009102:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009106:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800910a:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800910e:	8812      	ldrh	r2, [r2, #0]
 8009110:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009112:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009116:	3302      	adds	r3, #2
 8009118:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800911c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009120:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009124:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009126:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800912a:	3301      	adds	r3, #1
 800912c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009130:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009134:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009138:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800913a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800913e:	3301      	adds	r3, #1
 8009140:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009144:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009148:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800914c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800914e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009152:	3301      	adds	r3, #1
 8009154:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009158:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800915c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009160:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009162:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009166:	3301      	adds	r3, #1
 8009168:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800916c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009170:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009174:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009176:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800917a:	3301      	adds	r3, #1
 800917c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009180:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009184:	2218      	movs	r2, #24
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f000 fad8 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 800918e:	233f      	movs	r3, #63	; 0x3f
 8009190:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009194:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009198:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800919c:	f107 0318 	add.w	r3, r7, #24
 80091a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80091a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80091ac:	f107 0314 	add.w	r3, r7, #20
 80091b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80091b4:	2303      	movs	r3, #3
 80091b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80091be:	2100      	movs	r1, #0
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 fd45 	bl	8009c50 <hci_send_req>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	da01      	bge.n	80091d0 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80091cc:	23ff      	movs	r3, #255	; 0xff
 80091ce:	e017      	b.n	8009200 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80091d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d005      	beq.n	80091ea <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80091de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	e00a      	b.n	8009200 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80091ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80091fc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009206:	46bd      	mov	sp, r7
 8009208:	bd90      	pop	{r4, r7, pc}

0800920a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800920a:	b5b0      	push	{r4, r5, r7, lr}
 800920c:	b0cc      	sub	sp, #304	; 0x130
 800920e:	af00      	add	r7, sp, #0
 8009210:	4605      	mov	r5, r0
 8009212:	460c      	mov	r4, r1
 8009214:	4610      	mov	r0, r2
 8009216:	4619      	mov	r1, r3
 8009218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800921c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009220:	462a      	mov	r2, r5
 8009222:	801a      	strh	r2, [r3, #0]
 8009224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009228:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800922c:	4622      	mov	r2, r4
 800922e:	801a      	strh	r2, [r3, #0]
 8009230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009234:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009238:	4602      	mov	r2, r0
 800923a:	701a      	strb	r2, [r3, #0]
 800923c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009240:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009244:	460a      	mov	r2, r1
 8009246:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009248:	f107 0310 	add.w	r3, r7, #16
 800924c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009254:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009258:	2200      	movs	r2, #0
 800925a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009266:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800926a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800926e:	8812      	ldrh	r2, [r2, #0]
 8009270:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009276:	3302      	adds	r3, #2
 8009278:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800927c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009280:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009284:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009288:	8812      	ldrh	r2, [r2, #0]
 800928a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800928c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009290:	3302      	adds	r3, #2
 8009292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800929a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800929e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80092a2:	7812      	ldrb	r2, [r2, #0]
 80092a4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80092a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092aa:	3301      	adds	r3, #1
 80092ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80092b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092b8:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80092bc:	7812      	ldrb	r2, [r2, #0]
 80092be:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80092c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092c4:	3301      	adds	r3, #1
 80092c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80092ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ce:	1d98      	adds	r0, r3, #6
 80092d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80092e0:	f000 fa1d 	bl	800971e <Osal_MemCpy>
  index_input += Char_Value_Length;
 80092e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80092f2:	4413      	add	r3, r2
 80092f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092fc:	2218      	movs	r2, #24
 80092fe:	2100      	movs	r1, #0
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fa1c 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 8009306:	233f      	movs	r3, #63	; 0x3f
 8009308:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800930c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009310:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009314:	f107 0310 	add.w	r3, r7, #16
 8009318:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800931c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009320:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009324:	f107 030f 	add.w	r3, r7, #15
 8009328:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800932c:	2301      	movs	r3, #1
 800932e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009332:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009336:	2100      	movs	r1, #0
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fc89 	bl	8009c50 <hci_send_req>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	da01      	bge.n	8009348 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009344:	23ff      	movs	r3, #255	; 0xff
 8009346:	e004      	b.n	8009352 <aci_gatt_update_char_value+0x148>
  return status;
 8009348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800934c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009350:	781b      	ldrb	r3, [r3, #0]
}
 8009352:	4618      	mov	r0, r3
 8009354:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009358:	46bd      	mov	sp, r7
 800935a:	bdb0      	pop	{r4, r5, r7, pc}

0800935c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b0cc      	sub	sp, #304	; 0x130
 8009360:	af00      	add	r7, sp, #0
 8009362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009370:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009374:	4602      	mov	r2, r0
 8009376:	701a      	strb	r2, [r3, #0]
 8009378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800937c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009380:	460a      	mov	r2, r1
 8009382:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009384:	f107 0310 	add.w	r3, r7, #16
 8009388:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800938c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009390:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009394:	2200      	movs	r2, #0
 8009396:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009398:	2300      	movs	r3, #0
 800939a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800939e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093a6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80093aa:	7812      	ldrb	r2, [r2, #0]
 80093ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80093ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093b2:	3301      	adds	r3, #1
 80093b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80093b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093c0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80093c4:	7812      	ldrb	r2, [r2, #0]
 80093c6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80093c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093cc:	3301      	adds	r3, #1
 80093ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80093d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d6:	1c98      	adds	r0, r3, #2
 80093d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093dc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80093e0:	781a      	ldrb	r2, [r3, #0]
 80093e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ea:	6819      	ldr	r1, [r3, #0]
 80093ec:	f000 f997 	bl	800971e <Osal_MemCpy>
  index_input += Length;
 80093f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093f4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80093fe:	4413      	add	r3, r2
 8009400:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009404:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009408:	2218      	movs	r2, #24
 800940a:	2100      	movs	r1, #0
 800940c:	4618      	mov	r0, r3
 800940e:	f000 f996 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 8009412:	233f      	movs	r3, #63	; 0x3f
 8009414:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009418:	230c      	movs	r3, #12
 800941a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800941e:	f107 0310 	add.w	r3, r7, #16
 8009422:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009426:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800942a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800942e:	f107 030f 	add.w	r3, r7, #15
 8009432:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009436:	2301      	movs	r3, #1
 8009438:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800943c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009440:	2100      	movs	r1, #0
 8009442:	4618      	mov	r0, r3
 8009444:	f000 fc04 	bl	8009c50 <hci_send_req>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	da01      	bge.n	8009452 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800944e:	23ff      	movs	r3, #255	; 0xff
 8009450:	e004      	b.n	800945c <aci_hal_write_config_data+0x100>
  return status;
 8009452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009456:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800945a:	781b      	ldrb	r3, [r3, #0]
}
 800945c:	4618      	mov	r0, r3
 800945e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b0cc      	sub	sp, #304	; 0x130
 800946a:	af00      	add	r7, sp, #0
 800946c:	4602      	mov	r2, r0
 800946e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009472:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009476:	701a      	strb	r2, [r3, #0]
 8009478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800947c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009480:	460a      	mov	r2, r1
 8009482:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009484:	f107 0310 	add.w	r3, r7, #16
 8009488:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800948c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009490:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009494:	2200      	movs	r2, #0
 8009496:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800949e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094a6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80094aa:	7812      	ldrb	r2, [r2, #0]
 80094ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80094ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094b2:	3301      	adds	r3, #1
 80094b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80094b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094c0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80094c4:	7812      	ldrb	r2, [r2, #0]
 80094c6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80094c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094cc:	3301      	adds	r3, #1
 80094ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094d6:	2218      	movs	r2, #24
 80094d8:	2100      	movs	r1, #0
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 f92f 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 80094e0:	233f      	movs	r3, #63	; 0x3f
 80094e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80094e6:	230f      	movs	r3, #15
 80094e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094ec:	f107 0310 	add.w	r3, r7, #16
 80094f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094fc:	f107 030f 	add.w	r3, r7, #15
 8009500:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009504:	2301      	movs	r3, #1
 8009506:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800950a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800950e:	2100      	movs	r1, #0
 8009510:	4618      	mov	r0, r3
 8009512:	f000 fb9d 	bl	8009c50 <hci_send_req>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	da01      	bge.n	8009520 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800951c:	23ff      	movs	r3, #255	; 0xff
 800951e:	e004      	b.n	800952a <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009524:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009528:	781b      	ldrb	r3, [r3, #0]
}
 800952a:	4618      	mov	r0, r3
 800952c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b0cc      	sub	sp, #304	; 0x130
 8009538:	af00      	add	r7, sp, #0
 800953a:	4602      	mov	r2, r0
 800953c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009540:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009544:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009546:	f107 0310 	add.w	r3, r7, #16
 800954a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800954e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009552:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009564:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009568:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800956c:	8812      	ldrh	r2, [r2, #0]
 800956e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009574:	3302      	adds	r3, #2
 8009576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800957a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800957e:	2218      	movs	r2, #24
 8009580:	2100      	movs	r1, #0
 8009582:	4618      	mov	r0, r3
 8009584:	f000 f8db 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x3f;
 8009588:	233f      	movs	r3, #63	; 0x3f
 800958a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800958e:	2318      	movs	r3, #24
 8009590:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009594:	f107 0310 	add.w	r3, r7, #16
 8009598:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800959c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80095a4:	f107 030f 	add.w	r3, r7, #15
 80095a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80095ac:	2301      	movs	r3, #1
 80095ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095b6:	2100      	movs	r1, #0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f000 fb49 	bl	8009c50 <hci_send_req>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	da01      	bge.n	80095c8 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80095c4:	23ff      	movs	r3, #255	; 0xff
 80095c6:	e004      	b.n	80095d2 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80095c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095cc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095d0:	781b      	ldrb	r3, [r3, #0]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b088      	sub	sp, #32
 80095e0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095e6:	f107 0308 	add.w	r3, r7, #8
 80095ea:	2218      	movs	r2, #24
 80095ec:	2100      	movs	r1, #0
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 f8a5 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x03;
 80095f4:	2303      	movs	r3, #3
 80095f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80095f8:	2303      	movs	r3, #3
 80095fa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80095fc:	1dfb      	adds	r3, r7, #7
 80095fe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009600:	2301      	movs	r3, #1
 8009602:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009604:	f107 0308 	add.w	r3, r7, #8
 8009608:	2100      	movs	r1, #0
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fb20 	bl	8009c50 <hci_send_req>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	da01      	bge.n	800961a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009616:	23ff      	movs	r3, #255	; 0xff
 8009618:	e000      	b.n	800961c <hci_reset+0x40>
  return status;
 800961a:	79fb      	ldrb	r3, [r7, #7]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3720      	adds	r7, #32
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009624:	b590      	push	{r4, r7, lr}
 8009626:	b0cd      	sub	sp, #308	; 0x134
 8009628:	af00      	add	r7, sp, #0
 800962a:	4604      	mov	r4, r0
 800962c:	4608      	mov	r0, r1
 800962e:	4611      	mov	r1, r2
 8009630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009634:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009638:	4622      	mov	r2, r4
 800963a:	701a      	strb	r2, [r3, #0]
 800963c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009640:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009644:	4602      	mov	r2, r0
 8009646:	701a      	strb	r2, [r3, #0]
 8009648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800964c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009650:	460a      	mov	r2, r1
 8009652:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009654:	f107 0310 	add.w	r3, r7, #16
 8009658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800965c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009660:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009664:	2200      	movs	r2, #0
 8009666:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800966e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009672:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009676:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800967a:	7812      	ldrb	r2, [r2, #0]
 800967c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800967e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009682:	3301      	adds	r3, #1
 8009684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800968c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009690:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009694:	7812      	ldrb	r2, [r2, #0]
 8009696:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800969c:	3301      	adds	r3, #1
 800969e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80096a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096aa:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80096ae:	7812      	ldrb	r2, [r2, #0]
 80096b0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80096b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096b6:	3301      	adds	r3, #1
 80096b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096c0:	2218      	movs	r2, #24
 80096c2:	2100      	movs	r1, #0
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 f83a 	bl	800973e <Osal_MemSet>
  rq.ogf = 0x08;
 80096ca:	2308      	movs	r3, #8
 80096cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80096d0:	2331      	movs	r3, #49	; 0x31
 80096d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80096d6:	f107 0310 	add.w	r3, r7, #16
 80096da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096e6:	f107 030f 	add.w	r3, r7, #15
 80096ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096ee:	2301      	movs	r3, #1
 80096f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096f8:	2100      	movs	r1, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 faa8 	bl	8009c50 <hci_send_req>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	da01      	bge.n	800970a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009706:	23ff      	movs	r3, #255	; 0xff
 8009708:	e004      	b.n	8009714 <hci_le_set_default_phy+0xf0>
  return status;
 800970a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800970e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009712:	781b      	ldrb	r3, [r3, #0]
}
 8009714:	4618      	mov	r0, r3
 8009716:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800971a:	46bd      	mov	sp, r7
 800971c:	bd90      	pop	{r4, r7, pc}

0800971e <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	60f8      	str	r0, [r7, #12]
 8009726:	60b9      	str	r1, [r7, #8]
 8009728:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	68b9      	ldr	r1, [r7, #8]
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f004 f819 	bl	800d766 <memcpy>
 8009734:	4603      	mov	r3, r0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	68b9      	ldr	r1, [r7, #8]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f003 ff76 	bl	800d640 <memset>
 8009754:	4603      	mov	r3, r0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800975e:	b480      	push	{r7}
 8009760:	af00      	add	r7, sp, #0
  return;
 8009762:	bf00      	nop
}
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800976c:	b480      	push	{r7}
 800976e:	af00      	add	r7, sp, #0
  return;
 8009770:	bf00      	nop
}
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800977a:	b480      	push	{r7}
 800977c:	af00      	add	r7, sp, #0
  return;
 800977e:	bf00      	nop
}
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
  return;
 800978c:	bf00      	nop
}
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009796:	b480      	push	{r7}
 8009798:	af00      	add	r7, sp, #0
  return;
 800979a:	bf00      	nop
}
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
  return;
 80097a8:	bf00      	nop
}
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80097b2:	b480      	push	{r7}
 80097b4:	af00      	add	r7, sp, #0
  return;
 80097b6:	bf00      	nop
}
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80097c0:	b480      	push	{r7}
 80097c2:	af00      	add	r7, sp, #0
  return;
 80097c4:	bf00      	nop
}
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80097ce:	b480      	push	{r7}
 80097d0:	af00      	add	r7, sp, #0
  return;
 80097d2:	bf00      	nop
}
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
  return;
 80097e0:	bf00      	nop
}
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80097ea:	b480      	push	{r7}
 80097ec:	af00      	add	r7, sp, #0
  return;
 80097ee:	bf00      	nop
}
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
  return;
 80097fc:	bf00      	nop
}
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009806:	b480      	push	{r7}
 8009808:	af00      	add	r7, sp, #0
  return;
 800980a:	bf00      	nop
}
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009814:	b480      	push	{r7}
 8009816:	af00      	add	r7, sp, #0
  return;
 8009818:	bf00      	nop
}
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009822:	b480      	push	{r7}
 8009824:	af00      	add	r7, sp, #0
  return;
 8009826:	bf00      	nop
}
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
  return;
 8009834:	bf00      	nop
}
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800983e:	b480      	push	{r7}
 8009840:	af00      	add	r7, sp, #0
  return;
 8009842:	bf00      	nop
}
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009850:	4b04      	ldr	r3, [pc, #16]	; (8009864 <SVCCTL_Init+0x18>)
 8009852:	2200      	movs	r2, #0
 8009854:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009856:	4b04      	ldr	r3, [pc, #16]	; (8009868 <SVCCTL_Init+0x1c>)
 8009858:	2200      	movs	r2, #0
 800985a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800985c:	f000 f806 	bl	800986c <SVCCTL_SvcInit>

  return;
 8009860:	bf00      	nop
}
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20000094 	.word	0x20000094
 8009868:	200000b4 	.word	0x200000b4

0800986c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  BAS_Init();
 8009870:	f7ff ff75 	bl	800975e <BAS_Init>

  BLS_Init();
 8009874:	f7ff ff7a 	bl	800976c <BLS_Init>

  CRS_STM_Init();
 8009878:	f7ff ff7f 	bl	800977a <CRS_STM_Init>

  DIS_Init();
 800987c:	f7ff ff84 	bl	8009788 <DIS_Init>

  EDS_STM_Init();
 8009880:	f7ff ff89 	bl	8009796 <EDS_STM_Init>

  HIDS_Init();
 8009884:	f7ff ff8e 	bl	80097a4 <HIDS_Init>

  HRS_Init();
 8009888:	f7ff ff93 	bl	80097b2 <HRS_Init>

  HTS_Init();
 800988c:	f7ff ff98 	bl	80097c0 <HTS_Init>

  IAS_Init();
 8009890:	f7ff ff9d 	bl	80097ce <IAS_Init>

  LLS_Init();
 8009894:	f7ff ffa2 	bl	80097dc <LLS_Init>

  TPS_Init();
 8009898:	f7ff ffa7 	bl	80097ea <TPS_Init>

  MOTENV_STM_Init();
 800989c:	f7ff ffac 	bl	80097f8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80098a0:	f7ff ffb1 	bl	8009806 <P2PS_STM_Init>

  ZDD_STM_Init();
 80098a4:	f7ff ffb6 	bl	8009814 <ZDD_STM_Init>

  OTAS_STM_Init();
 80098a8:	f7ff ffbb 	bl	8009822 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80098ac:	f7ff ffc7 	bl	800983e <BVOPUS_STM_Init>

  MESH_Init();
 80098b0:	f7ff ffbe 	bl	8009830 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80098b4:	f002 fe42 	bl	800c53c <SVCCTL_InitCustomSvc>
  
  return;
 80098b8:	bf00      	nop
}
 80098ba:	bd80      	pop	{r7, pc}

080098bc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80098c4:	4b09      	ldr	r3, [pc, #36]	; (80098ec <SVCCTL_RegisterSvcHandler+0x30>)
 80098c6:	7f1b      	ldrb	r3, [r3, #28]
 80098c8:	4619      	mov	r1, r3
 80098ca:	4a08      	ldr	r2, [pc, #32]	; (80098ec <SVCCTL_RegisterSvcHandler+0x30>)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80098d2:	4b06      	ldr	r3, [pc, #24]	; (80098ec <SVCCTL_RegisterSvcHandler+0x30>)
 80098d4:	7f1b      	ldrb	r3, [r3, #28]
 80098d6:	3301      	adds	r3, #1
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	4b04      	ldr	r3, [pc, #16]	; (80098ec <SVCCTL_RegisterSvcHandler+0x30>)
 80098dc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80098de:	bf00      	nop
}
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	20000094 	.word	0x20000094

080098f0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3301      	adds	r3, #1
 80098fc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80098fe:	2300      	movs	r3, #0
 8009900:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2bff      	cmp	r3, #255	; 0xff
 8009908:	d125      	bne.n	8009956 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	3302      	adds	r3, #2
 800990e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	b29b      	uxth	r3, r3
 8009916:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800991a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800991e:	d118      	bne.n	8009952 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009920:	2300      	movs	r3, #0
 8009922:	757b      	strb	r3, [r7, #21]
 8009924:	e00d      	b.n	8009942 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009926:	7d7b      	ldrb	r3, [r7, #21]
 8009928:	4a1a      	ldr	r2, [pc, #104]	; (8009994 <SVCCTL_UserEvtRx+0xa4>)
 800992a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
 8009932:	4603      	mov	r3, r0
 8009934:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009936:	7dfb      	ldrb	r3, [r7, #23]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d108      	bne.n	800994e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800993c:	7d7b      	ldrb	r3, [r7, #21]
 800993e:	3301      	adds	r3, #1
 8009940:	757b      	strb	r3, [r7, #21]
 8009942:	4b14      	ldr	r3, [pc, #80]	; (8009994 <SVCCTL_UserEvtRx+0xa4>)
 8009944:	7f1b      	ldrb	r3, [r3, #28]
 8009946:	7d7a      	ldrb	r2, [r7, #21]
 8009948:	429a      	cmp	r2, r3
 800994a:	d3ec      	bcc.n	8009926 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800994c:	e002      	b.n	8009954 <SVCCTL_UserEvtRx+0x64>
              break;
 800994e:	bf00      	nop
          break;
 8009950:	e000      	b.n	8009954 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009952:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009954:	e000      	b.n	8009958 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009956:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8009958:	7dfb      	ldrb	r3, [r7, #23]
 800995a:	2b02      	cmp	r3, #2
 800995c:	d00f      	beq.n	800997e <SVCCTL_UserEvtRx+0x8e>
 800995e:	2b02      	cmp	r3, #2
 8009960:	dc10      	bgt.n	8009984 <SVCCTL_UserEvtRx+0x94>
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <SVCCTL_UserEvtRx+0x7c>
 8009966:	2b01      	cmp	r3, #1
 8009968:	d006      	beq.n	8009978 <SVCCTL_UserEvtRx+0x88>
 800996a:	e00b      	b.n	8009984 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 fcb3 	bl	800b2d8 <SVCCTL_App_Notification>
 8009972:	4603      	mov	r3, r0
 8009974:	75bb      	strb	r3, [r7, #22]
      break;
 8009976:	e008      	b.n	800998a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009978:	2301      	movs	r3, #1
 800997a:	75bb      	strb	r3, [r7, #22]
      break;
 800997c:	e005      	b.n	800998a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800997e:	2300      	movs	r3, #0
 8009980:	75bb      	strb	r3, [r7, #22]
      break;
 8009982:	e002      	b.n	800998a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009984:	2301      	movs	r3, #1
 8009986:	75bb      	strb	r3, [r7, #22]
      break;
 8009988:	bf00      	nop
  }

  return (return_status);
 800998a:	7dbb      	ldrb	r3, [r7, #22]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3718      	adds	r7, #24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20000094 	.word	0x20000094

08009998 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80099a0:	f107 030c 	add.w	r3, r7, #12
 80099a4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	212e      	movs	r1, #46	; 0x2e
 80099b0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80099b4:	f000 fae8 	bl	8009f88 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	330b      	adds	r3, #11
 80099bc:	78db      	ldrb	r3, [r3, #3]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3720      	adds	r7, #32
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b088      	sub	sp, #32
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80099ce:	f107 030c 	add.w	r3, r7, #12
 80099d2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	210f      	movs	r1, #15
 80099de:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80099e2:	f000 fad1 	bl	8009f88 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	330b      	adds	r3, #11
 80099ea:	78db      	ldrb	r3, [r3, #3]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3720      	adds	r7, #32
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80099fc:	f107 030c 	add.w	r3, r7, #12
 8009a00:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	2110      	movs	r1, #16
 8009a08:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009a0c:	f000 fabc 	bl	8009f88 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	330b      	adds	r3, #11
 8009a14:	78db      	ldrb	r3, [r3, #3]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3720      	adds	r7, #32
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009a20:	b480      	push	{r7}
 8009a22:	b08b      	sub	sp, #44	; 0x2c
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009a48:	4b4a      	ldr	r3, [pc, #296]	; (8009b74 <SHCI_GetWirelessFwInfo+0x154>)
 8009a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009a50:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009a5a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a44      	ldr	r2, [pc, #272]	; (8009b78 <SHCI_GetWirelessFwInfo+0x158>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d10f      	bne.n	8009a8c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	e01a      	b.n	8009ac2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009a94:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009a98:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	0e1b      	lsrs	r3, r3, #24
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	0c1b      	lsrs	r3, r3, #16
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad8:	0a1b      	lsrs	r3, r3, #8
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	091b      	lsrs	r3, r3, #4
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	f003 030f 	and.w	r3, r3, #15
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	f003 030f 	and.w	r3, r3, #15
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	0e1b      	lsrs	r3, r3, #24
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	0c1b      	lsrs	r3, r3, #16
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	0a1b      	lsrs	r3, r3, #8
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	b2da      	uxtb	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	0e1b      	lsrs	r3, r3, #24
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	0c1b      	lsrs	r3, r3, #16
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	0a1b      	lsrs	r3, r3, #8
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	0e1b      	lsrs	r3, r3, #24
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	0c1b      	lsrs	r3, r3, #16
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	372c      	adds	r7, #44	; 0x2c
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	58004000 	.word	0x58004000
 8009b78:	a94656b9 	.word	0xa94656b9

08009b7c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	4a08      	ldr	r2, [pc, #32]	; (8009bac <hci_init+0x30>)
 8009b8c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009b8e:	4a08      	ldr	r2, [pc, #32]	; (8009bb0 <hci_init+0x34>)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009b94:	4806      	ldr	r0, [pc, #24]	; (8009bb0 <hci_init+0x34>)
 8009b96:	f000 f979 	bl	8009e8c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 f8da 	bl	8009d58 <TlInit>

  return;
 8009ba4:	bf00      	nop
}
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	20000698 	.word	0x20000698
 8009bb0:	20000670 	.word	0x20000670

08009bb4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009bba:	4822      	ldr	r0, [pc, #136]	; (8009c44 <hci_user_evt_proc+0x90>)
 8009bbc:	f000 fe10 	bl	800a7e0 <LST_is_empty>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d12b      	bne.n	8009c1e <hci_user_evt_proc+0x6a>
 8009bc6:	4b20      	ldr	r3, [pc, #128]	; (8009c48 <hci_user_evt_proc+0x94>)
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d027      	beq.n	8009c1e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009bce:	f107 030c 	add.w	r3, r7, #12
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	481b      	ldr	r0, [pc, #108]	; (8009c44 <hci_user_evt_proc+0x90>)
 8009bd6:	f000 fe92 	bl	800a8fe <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009bda:	4b1c      	ldr	r3, [pc, #112]	; (8009c4c <hci_user_evt_proc+0x98>)
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00c      	beq.n	8009bfc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009be6:	2301      	movs	r3, #1
 8009be8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009bea:	4b18      	ldr	r3, [pc, #96]	; (8009c4c <hci_user_evt_proc+0x98>)
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	1d3a      	adds	r2, r7, #4
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009bf4:	793a      	ldrb	r2, [r7, #4]
 8009bf6:	4b14      	ldr	r3, [pc, #80]	; (8009c48 <hci_user_evt_proc+0x94>)
 8009bf8:	701a      	strb	r2, [r3, #0]
 8009bfa:	e002      	b.n	8009c02 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009bfc:	4b12      	ldr	r3, [pc, #72]	; (8009c48 <hci_user_evt_proc+0x94>)
 8009bfe:	2201      	movs	r2, #1
 8009c00:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009c02:	4b11      	ldr	r3, [pc, #68]	; (8009c48 <hci_user_evt_proc+0x94>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d004      	beq.n	8009c14 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 fc0d 	bl	800a42c <TL_MM_EvtDone>
 8009c12:	e004      	b.n	8009c1e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4619      	mov	r1, r3
 8009c18:	480a      	ldr	r0, [pc, #40]	; (8009c44 <hci_user_evt_proc+0x90>)
 8009c1a:	f000 fe03 	bl	800a824 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009c1e:	4809      	ldr	r0, [pc, #36]	; (8009c44 <hci_user_evt_proc+0x90>)
 8009c20:	f000 fdde 	bl	800a7e0 <LST_is_empty>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d107      	bne.n	8009c3a <hci_user_evt_proc+0x86>
 8009c2a:	4b07      	ldr	r3, [pc, #28]	; (8009c48 <hci_user_evt_proc+0x94>)
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009c32:	4804      	ldr	r0, [pc, #16]	; (8009c44 <hci_user_evt_proc+0x90>)
 8009c34:	f002 f9c2 	bl	800bfbc <hci_notify_asynch_evt>
  }


  return;
 8009c38:	bf00      	nop
 8009c3a:	bf00      	nop
}
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	200000bc 	.word	0x200000bc
 8009c48:	200000c8 	.word	0x200000c8
 8009c4c:	20000670 	.word	0x20000670

08009c50 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	f000 f8d1 	bl	8009e04 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009c62:	2300      	movs	r3, #0
 8009c64:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	885b      	ldrh	r3, [r3, #2]
 8009c6a:	b21b      	sxth	r3, r3
 8009c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c70:	b21a      	sxth	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	029b      	lsls	r3, r3, #10
 8009c78:	b21b      	sxth	r3, r3
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	b21b      	sxth	r3, r3
 8009c7e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8009c80:	4b33      	ldr	r3, [pc, #204]	; (8009d50 <hci_send_req+0x100>)
 8009c82:	2201      	movs	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	b2d9      	uxtb	r1, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	689a      	ldr	r2, [r3, #8]
 8009c90:	8bbb      	ldrh	r3, [r7, #28]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f000 f890 	bl	8009db8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009c98:	e04e      	b.n	8009d38 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009c9a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009c9e:	f002 f9a4 	bl	800bfea <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009ca2:	e043      	b.n	8009d2c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009ca4:	f107 030c 	add.w	r3, r7, #12
 8009ca8:	4619      	mov	r1, r3
 8009caa:	482a      	ldr	r0, [pc, #168]	; (8009d54 <hci_send_req+0x104>)
 8009cac:	f000 fe27 	bl	800a8fe <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	7a5b      	ldrb	r3, [r3, #9]
 8009cb4:	2b0f      	cmp	r3, #15
 8009cb6:	d114      	bne.n	8009ce2 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	330b      	adds	r3, #11
 8009cbc:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	885b      	ldrh	r3, [r3, #2]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	8bba      	ldrh	r2, [r7, #28]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d104      	bne.n	8009cd4 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	7812      	ldrb	r2, [r2, #0]
 8009cd2:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	785b      	ldrb	r3, [r3, #1]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d027      	beq.n	8009d2c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	77fb      	strb	r3, [r7, #31]
 8009ce0:	e024      	b.n	8009d2c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	330b      	adds	r3, #11
 8009ce6:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	8bba      	ldrh	r2, [r7, #28]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d114      	bne.n	8009d20 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	7a9b      	ldrb	r3, [r3, #10]
 8009cfa:	3b03      	subs	r3, #3
 8009cfc:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	695a      	ldr	r2, [r3, #20]
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	bfa8      	it	ge
 8009d08:	461a      	movge	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6918      	ldr	r0, [r3, #16]
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	1cd9      	adds	r1, r3, #3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f003 fd23 	bl	800d766 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009d2c:	4809      	ldr	r0, [pc, #36]	; (8009d54 <hci_send_req+0x104>)
 8009d2e:	f000 fd57 	bl	800a7e0 <LST_is_empty>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0b5      	beq.n	8009ca4 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009d38:	7ffb      	ldrb	r3, [r7, #31]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d0ad      	beq.n	8009c9a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009d3e:	2001      	movs	r0, #1
 8009d40:	f000 f860 	bl	8009e04 <NotifyCmdStatus>

  return 0;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3720      	adds	r7, #32
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	2000069c 	.word	0x2000069c
 8009d54:	20000690 	.word	0x20000690

08009d58 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009d60:	480f      	ldr	r0, [pc, #60]	; (8009da0 <TlInit+0x48>)
 8009d62:	f000 fd2d 	bl	800a7c0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009d66:	4a0f      	ldr	r2, [pc, #60]	; (8009da4 <TlInit+0x4c>)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009d6c:	480e      	ldr	r0, [pc, #56]	; (8009da8 <TlInit+0x50>)
 8009d6e:	f000 fd27 	bl	800a7c0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009d72:	4b0e      	ldr	r3, [pc, #56]	; (8009dac <TlInit+0x54>)
 8009d74:	2201      	movs	r2, #1
 8009d76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009d78:	4b0d      	ldr	r3, [pc, #52]	; (8009db0 <TlInit+0x58>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00a      	beq.n	8009d96 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009d84:	4b0b      	ldr	r3, [pc, #44]	; (8009db4 <TlInit+0x5c>)
 8009d86:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009d88:	4b09      	ldr	r3, [pc, #36]	; (8009db0 <TlInit+0x58>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f107 0208 	add.w	r2, r7, #8
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
  }

  return;
 8009d94:	bf00      	nop
 8009d96:	bf00      	nop
}
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	20000690 	.word	0x20000690
 8009da4:	200000c4 	.word	0x200000c4
 8009da8:	200000bc 	.word	0x200000bc
 8009dac:	200000c8 	.word	0x200000c8
 8009db0:	20000670 	.word	0x20000670
 8009db4:	08009e45 	.word	0x08009e45

08009db8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	603a      	str	r2, [r7, #0]
 8009dc2:	80fb      	strh	r3, [r7, #6]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009dc8:	4b0c      	ldr	r3, [pc, #48]	; (8009dfc <SendCmd+0x44>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	88fa      	ldrh	r2, [r7, #6]
 8009dce:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009dd2:	4b0a      	ldr	r3, [pc, #40]	; (8009dfc <SendCmd+0x44>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	797a      	ldrb	r2, [r7, #5]
 8009dd8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009dda:	4b08      	ldr	r3, [pc, #32]	; (8009dfc <SendCmd+0x44>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	330c      	adds	r3, #12
 8009de0:	797a      	ldrb	r2, [r7, #5]
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f003 fcbe 	bl	800d766 <memcpy>

  hciContext.io.Send(0,0);
 8009dea:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <SendCmd+0x48>)
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	2100      	movs	r1, #0
 8009df0:	2000      	movs	r0, #0
 8009df2:	4798      	blx	r3

  return;
 8009df4:	bf00      	nop
}
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	200000c4 	.word	0x200000c4
 8009e00:	20000670 	.word	0x20000670

08009e04 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009e0e:	79fb      	ldrb	r3, [r7, #7]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d108      	bne.n	8009e26 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009e14:	4b0a      	ldr	r3, [pc, #40]	; (8009e40 <NotifyCmdStatus+0x3c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00d      	beq.n	8009e38 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009e1c:	4b08      	ldr	r3, [pc, #32]	; (8009e40 <NotifyCmdStatus+0x3c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2000      	movs	r0, #0
 8009e22:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009e24:	e008      	b.n	8009e38 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009e26:	4b06      	ldr	r3, [pc, #24]	; (8009e40 <NotifyCmdStatus+0x3c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d004      	beq.n	8009e38 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009e2e:	4b04      	ldr	r3, [pc, #16]	; (8009e40 <NotifyCmdStatus+0x3c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2001      	movs	r0, #1
 8009e34:	4798      	blx	r3
  return;
 8009e36:	bf00      	nop
 8009e38:	bf00      	nop
}
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20000698 	.word	0x20000698

08009e44 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	7a5b      	ldrb	r3, [r3, #9]
 8009e50:	2b0f      	cmp	r3, #15
 8009e52:	d003      	beq.n	8009e5c <TlEvtReceived+0x18>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	7a5b      	ldrb	r3, [r3, #9]
 8009e58:	2b0e      	cmp	r3, #14
 8009e5a:	d107      	bne.n	8009e6c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009e5c:	6879      	ldr	r1, [r7, #4]
 8009e5e:	4809      	ldr	r0, [pc, #36]	; (8009e84 <TlEvtReceived+0x40>)
 8009e60:	f000 fd06 	bl	800a870 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009e64:	2000      	movs	r0, #0
 8009e66:	f002 f8b5 	bl	800bfd4 <hci_cmd_resp_release>
 8009e6a:	e006      	b.n	8009e7a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009e6c:	6879      	ldr	r1, [r7, #4]
 8009e6e:	4806      	ldr	r0, [pc, #24]	; (8009e88 <TlEvtReceived+0x44>)
 8009e70:	f000 fcfe 	bl	800a870 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009e74:	4804      	ldr	r0, [pc, #16]	; (8009e88 <TlEvtReceived+0x44>)
 8009e76:	f002 f8a1 	bl	800bfbc <hci_notify_asynch_evt>
  }

  return;
 8009e7a:	bf00      	nop
}
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20000690 	.word	0x20000690
 8009e88:	200000bc 	.word	0x200000bc

08009e8c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a05      	ldr	r2, [pc, #20]	; (8009eac <hci_register_io_bus+0x20>)
 8009e98:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a04      	ldr	r2, [pc, #16]	; (8009eb0 <hci_register_io_bus+0x24>)
 8009e9e:	611a      	str	r2, [r3, #16]

  return;
 8009ea0:	bf00      	nop
}
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	0800a1a5 	.word	0x0800a1a5
 8009eb0:	0800a20d 	.word	0x0800a20d

08009eb4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	4a08      	ldr	r2, [pc, #32]	; (8009ee4 <shci_init+0x30>)
 8009ec4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009ec6:	4a08      	ldr	r2, [pc, #32]	; (8009ee8 <shci_init+0x34>)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009ecc:	4806      	ldr	r0, [pc, #24]	; (8009ee8 <shci_init+0x34>)
 8009ece:	f000 f915 	bl	800a0fc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f000 f898 	bl	800a00c <TlInit>

  return;
 8009edc:	bf00      	nop
}
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	200006c0 	.word	0x200006c0
 8009ee8:	200006a0 	.word	0x200006a0

08009eec <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009ef2:	4822      	ldr	r0, [pc, #136]	; (8009f7c <shci_user_evt_proc+0x90>)
 8009ef4:	f000 fc74 	bl	800a7e0 <LST_is_empty>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d12b      	bne.n	8009f56 <shci_user_evt_proc+0x6a>
 8009efe:	4b20      	ldr	r3, [pc, #128]	; (8009f80 <shci_user_evt_proc+0x94>)
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d027      	beq.n	8009f56 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009f06:	f107 030c 	add.w	r3, r7, #12
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	481b      	ldr	r0, [pc, #108]	; (8009f7c <shci_user_evt_proc+0x90>)
 8009f0e:	f000 fcf6 	bl	800a8fe <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009f12:	4b1c      	ldr	r3, [pc, #112]	; (8009f84 <shci_user_evt_proc+0x98>)
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00c      	beq.n	8009f34 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009f22:	4b18      	ldr	r3, [pc, #96]	; (8009f84 <shci_user_evt_proc+0x98>)
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	1d3a      	adds	r2, r7, #4
 8009f28:	4610      	mov	r0, r2
 8009f2a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009f2c:	793a      	ldrb	r2, [r7, #4]
 8009f2e:	4b14      	ldr	r3, [pc, #80]	; (8009f80 <shci_user_evt_proc+0x94>)
 8009f30:	701a      	strb	r2, [r3, #0]
 8009f32:	e002      	b.n	8009f3a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009f34:	4b12      	ldr	r3, [pc, #72]	; (8009f80 <shci_user_evt_proc+0x94>)
 8009f36:	2201      	movs	r2, #1
 8009f38:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009f3a:	4b11      	ldr	r3, [pc, #68]	; (8009f80 <shci_user_evt_proc+0x94>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d004      	beq.n	8009f4c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 fa71 	bl	800a42c <TL_MM_EvtDone>
 8009f4a:	e004      	b.n	8009f56 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	480a      	ldr	r0, [pc, #40]	; (8009f7c <shci_user_evt_proc+0x90>)
 8009f52:	f000 fc67 	bl	800a824 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009f56:	4809      	ldr	r0, [pc, #36]	; (8009f7c <shci_user_evt_proc+0x90>)
 8009f58:	f000 fc42 	bl	800a7e0 <LST_is_empty>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d107      	bne.n	8009f72 <shci_user_evt_proc+0x86>
 8009f62:	4b07      	ldr	r3, [pc, #28]	; (8009f80 <shci_user_evt_proc+0x94>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d003      	beq.n	8009f72 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009f6a:	4804      	ldr	r0, [pc, #16]	; (8009f7c <shci_user_evt_proc+0x90>)
 8009f6c:	f7f7 fa58 	bl	8001420 <shci_notify_asynch_evt>
  }


  return;
 8009f70:	bf00      	nop
 8009f72:	bf00      	nop
}
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	200000cc 	.word	0x200000cc
 8009f80:	200000dc 	.word	0x200000dc
 8009f84:	200006a0 	.word	0x200006a0

08009f88 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60ba      	str	r2, [r7, #8]
 8009f90:	607b      	str	r3, [r7, #4]
 8009f92:	4603      	mov	r3, r0
 8009f94:	81fb      	strh	r3, [r7, #14]
 8009f96:	460b      	mov	r3, r1
 8009f98:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f000 f868 	bl	800a070 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009fa0:	4b17      	ldr	r3, [pc, #92]	; (800a000 <shci_send+0x78>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	89fa      	ldrh	r2, [r7, #14]
 8009fa6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009faa:	4b15      	ldr	r3, [pc, #84]	; (800a000 <shci_send+0x78>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	7b7a      	ldrb	r2, [r7, #13]
 8009fb0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009fb2:	4b13      	ldr	r3, [pc, #76]	; (800a000 <shci_send+0x78>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	330c      	adds	r3, #12
 8009fb8:	7b7a      	ldrb	r2, [r7, #13]
 8009fba:	68b9      	ldr	r1, [r7, #8]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f003 fbd2 	bl	800d766 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8009fc2:	4b10      	ldr	r3, [pc, #64]	; (800a004 <shci_send+0x7c>)
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8009fc8:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <shci_send+0x80>)
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	2100      	movs	r1, #0
 8009fce:	2000      	movs	r0, #0
 8009fd0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009fd2:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009fd6:	f7f7 fa3a 	bl	800144e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f103 0008 	add.w	r0, r3, #8
 8009fe0:	4b07      	ldr	r3, [pc, #28]	; (800a000 <shci_send+0x78>)
 8009fe2:	6819      	ldr	r1, [r3, #0]
 8009fe4:	4b06      	ldr	r3, [pc, #24]	; (800a000 <shci_send+0x78>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	789b      	ldrb	r3, [r3, #2]
 8009fea:	3303      	adds	r3, #3
 8009fec:	461a      	mov	r2, r3
 8009fee:	f003 fbba 	bl	800d766 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009ff2:	2001      	movs	r0, #1
 8009ff4:	f000 f83c 	bl	800a070 <Cmd_SetStatus>

  return;
 8009ff8:	bf00      	nop
}
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	200000d8 	.word	0x200000d8
 800a004:	200006c4 	.word	0x200006c4
 800a008:	200006a0 	.word	0x200006a0

0800a00c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a014:	4a10      	ldr	r2, [pc, #64]	; (800a058 <TlInit+0x4c>)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a01a:	4810      	ldr	r0, [pc, #64]	; (800a05c <TlInit+0x50>)
 800a01c:	f000 fbd0 	bl	800a7c0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a020:	2001      	movs	r0, #1
 800a022:	f000 f825 	bl	800a070 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a026:	4b0e      	ldr	r3, [pc, #56]	; (800a060 <TlInit+0x54>)
 800a028:	2201      	movs	r2, #1
 800a02a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a02c:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <TlInit+0x58>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00c      	beq.n	800a04e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a038:	4b0b      	ldr	r3, [pc, #44]	; (800a068 <TlInit+0x5c>)
 800a03a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a03c:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <TlInit+0x60>)
 800a03e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a040:	4b08      	ldr	r3, [pc, #32]	; (800a064 <TlInit+0x58>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f107 020c 	add.w	r2, r7, #12
 800a048:	4610      	mov	r0, r2
 800a04a:	4798      	blx	r3
  }

  return;
 800a04c:	bf00      	nop
 800a04e:	bf00      	nop
}
 800a050:	3718      	adds	r7, #24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	200000d8 	.word	0x200000d8
 800a05c:	200000cc 	.word	0x200000cc
 800a060:	200000dc 	.word	0x200000dc
 800a064:	200006a0 	.word	0x200006a0
 800a068:	0800a0c1 	.word	0x0800a0c1
 800a06c:	0800a0d9 	.word	0x0800a0d9

0800a070 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a07a:	79fb      	ldrb	r3, [r7, #7]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10b      	bne.n	800a098 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a080:	4b0d      	ldr	r3, [pc, #52]	; (800a0b8 <Cmd_SetStatus+0x48>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a088:	4b0b      	ldr	r3, [pc, #44]	; (800a0b8 <Cmd_SetStatus+0x48>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2000      	movs	r0, #0
 800a08e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a090:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <Cmd_SetStatus+0x4c>)
 800a092:	2200      	movs	r2, #0
 800a094:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a096:	e00b      	b.n	800a0b0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a098:	4b08      	ldr	r3, [pc, #32]	; (800a0bc <Cmd_SetStatus+0x4c>)
 800a09a:	2201      	movs	r2, #1
 800a09c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a09e:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <Cmd_SetStatus+0x48>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d004      	beq.n	800a0b0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a0a6:	4b04      	ldr	r3, [pc, #16]	; (800a0b8 <Cmd_SetStatus+0x48>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	4798      	blx	r3
  return;
 800a0ae:	bf00      	nop
 800a0b0:	bf00      	nop
}
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	200006c0 	.word	0x200006c0
 800a0bc:	200000d4 	.word	0x200000d4

0800a0c0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	f7f7 f9b5 	bl	8001438 <shci_cmd_resp_release>

  return;
 800a0ce:	bf00      	nop
}
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a0e0:	6879      	ldr	r1, [r7, #4]
 800a0e2:	4805      	ldr	r0, [pc, #20]	; (800a0f8 <TlUserEvtReceived+0x20>)
 800a0e4:	f000 fbc4 	bl	800a870 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a0e8:	4803      	ldr	r0, [pc, #12]	; (800a0f8 <TlUserEvtReceived+0x20>)
 800a0ea:	f7f7 f999 	bl	8001420 <shci_notify_asynch_evt>

  return;
 800a0ee:	bf00      	nop
}
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	200000cc 	.word	0x200000cc

0800a0fc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a05      	ldr	r2, [pc, #20]	; (800a11c <shci_register_io_bus+0x20>)
 800a108:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a04      	ldr	r2, [pc, #16]	; (800a120 <shci_register_io_bus+0x24>)
 800a10e:	611a      	str	r2, [r3, #16]

  return;
 800a110:	bf00      	nop
}
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	0800a2b9 	.word	0x0800a2b9
 800a120:	0800a30d 	.word	0x0800a30d

0800a124 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a128:	f002 fd28 	bl	800cb7c <HW_IPCC_Enable>

  return;
 800a12c:	bf00      	nop
}
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <TL_Init>:


void TL_Init( void )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a134:	4b10      	ldr	r3, [pc, #64]	; (800a178 <TL_Init+0x48>)
 800a136:	4a11      	ldr	r2, [pc, #68]	; (800a17c <TL_Init+0x4c>)
 800a138:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a13a:	4b0f      	ldr	r3, [pc, #60]	; (800a178 <TL_Init+0x48>)
 800a13c:	4a10      	ldr	r2, [pc, #64]	; (800a180 <TL_Init+0x50>)
 800a13e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a140:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <TL_Init+0x48>)
 800a142:	4a10      	ldr	r2, [pc, #64]	; (800a184 <TL_Init+0x54>)
 800a144:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a146:	4b0c      	ldr	r3, [pc, #48]	; (800a178 <TL_Init+0x48>)
 800a148:	4a0f      	ldr	r2, [pc, #60]	; (800a188 <TL_Init+0x58>)
 800a14a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a14c:	4b0a      	ldr	r3, [pc, #40]	; (800a178 <TL_Init+0x48>)
 800a14e:	4a0f      	ldr	r2, [pc, #60]	; (800a18c <TL_Init+0x5c>)
 800a150:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <TL_Init+0x48>)
 800a154:	4a0e      	ldr	r2, [pc, #56]	; (800a190 <TL_Init+0x60>)
 800a156:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a158:	4b07      	ldr	r3, [pc, #28]	; (800a178 <TL_Init+0x48>)
 800a15a:	4a0e      	ldr	r2, [pc, #56]	; (800a194 <TL_Init+0x64>)
 800a15c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a15e:	4b06      	ldr	r3, [pc, #24]	; (800a178 <TL_Init+0x48>)
 800a160:	4a0d      	ldr	r2, [pc, #52]	; (800a198 <TL_Init+0x68>)
 800a162:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a164:	4b04      	ldr	r3, [pc, #16]	; (800a178 <TL_Init+0x48>)
 800a166:	4a0d      	ldr	r2, [pc, #52]	; (800a19c <TL_Init+0x6c>)
 800a168:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a16a:	4b03      	ldr	r3, [pc, #12]	; (800a178 <TL_Init+0x48>)
 800a16c:	4a0c      	ldr	r2, [pc, #48]	; (800a1a0 <TL_Init+0x70>)
 800a16e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a170:	f002 fd18 	bl	800cba4 <HW_IPCC_Init>

  return;
 800a174:	bf00      	nop
}
 800a176:	bd80      	pop	{r7, pc}
 800a178:	20030000 	.word	0x20030000
 800a17c:	20030028 	.word	0x20030028
 800a180:	20030048 	.word	0x20030048
 800a184:	20030058 	.word	0x20030058
 800a188:	20030068 	.word	0x20030068
 800a18c:	20030070 	.word	0x20030070
 800a190:	20030078 	.word	0x20030078
 800a194:	20030080 	.word	0x20030080
 800a198:	2003009c 	.word	0x2003009c
 800a19c:	200300a0 	.word	0x200300a0
 800a1a0:	200300ac 	.word	0x200300ac

0800a1a4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a1b0:	4811      	ldr	r0, [pc, #68]	; (800a1f8 <TL_BLE_Init+0x54>)
 800a1b2:	f000 fb05 	bl	800a7c0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a1b6:	4b11      	ldr	r3, [pc, #68]	; (800a1fc <TL_BLE_Init+0x58>)
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	689a      	ldr	r2, [r3, #8]
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	68da      	ldr	r2, [r3, #12]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	4a0c      	ldr	r2, [pc, #48]	; (800a200 <TL_BLE_Init+0x5c>)
 800a1d0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	4a08      	ldr	r2, [pc, #32]	; (800a1f8 <TL_BLE_Init+0x54>)
 800a1d6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a1d8:	f002 fcfa 	bl	800cbd0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a08      	ldr	r2, [pc, #32]	; (800a204 <TL_BLE_Init+0x60>)
 800a1e2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	4a07      	ldr	r2, [pc, #28]	; (800a208 <TL_BLE_Init+0x64>)
 800a1ea:	6013      	str	r3, [r2, #0]

  return 0;
 800a1ec:	2300      	movs	r3, #0
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	200300c8 	.word	0x200300c8
 800a1fc:	20030000 	.word	0x20030000
 800a200:	20030a58 	.word	0x20030a58
 800a204:	200006d0 	.word	0x200006d0
 800a208:	200006d4 	.word	0x200006d4

0800a20c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a218:	4b09      	ldr	r3, [pc, #36]	; (800a240 <TL_BLE_SendCmd+0x34>)
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2201      	movs	r2, #1
 800a220:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a222:	4b07      	ldr	r3, [pc, #28]	; (800a240 <TL_BLE_SendCmd+0x34>)
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4619      	mov	r1, r3
 800a22a:	2001      	movs	r0, #1
 800a22c:	f000 f96c 	bl	800a508 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a230:	f002 fcd8 	bl	800cbe4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20030000 	.word	0x20030000

0800a244 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a24a:	e01c      	b.n	800a286 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a24c:	1d3b      	adds	r3, r7, #4
 800a24e:	4619      	mov	r1, r3
 800a250:	4812      	ldr	r0, [pc, #72]	; (800a29c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a252:	f000 fb54 	bl	800a8fe <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	7a5b      	ldrb	r3, [r3, #9]
 800a25a:	2b0f      	cmp	r3, #15
 800a25c:	d003      	beq.n	800a266 <HW_IPCC_BLE_RxEvtNot+0x22>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	7a5b      	ldrb	r3, [r3, #9]
 800a262:	2b0e      	cmp	r3, #14
 800a264:	d105      	bne.n	800a272 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4619      	mov	r1, r3
 800a26a:	2002      	movs	r0, #2
 800a26c:	f000 f94c 	bl	800a508 <OutputDbgTrace>
 800a270:	e004      	b.n	800a27c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4619      	mov	r1, r3
 800a276:	2003      	movs	r0, #3
 800a278:	f000 f946 	bl	800a508 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a27c:	4b08      	ldr	r3, [pc, #32]	; (800a2a0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	4610      	mov	r0, r2
 800a284:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a286:	4805      	ldr	r0, [pc, #20]	; (800a29c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a288:	f000 faaa 	bl	800a7e0 <LST_is_empty>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0dc      	beq.n	800a24c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a292:	bf00      	nop
}
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	200300c8 	.word	0x200300c8
 800a2a0:	200006d0 	.word	0x200006d0

0800a2a4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a2a8:	4b02      	ldr	r3, [pc, #8]	; (800a2b4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4798      	blx	r3

  return;
 800a2ae:	bf00      	nop
}
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	200006d4 	.word	0x200006d4

0800a2b8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a2c4:	480d      	ldr	r0, [pc, #52]	; (800a2fc <TL_SYS_Init+0x44>)
 800a2c6:	f000 fa7b 	bl	800a7c0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a2ca:	4b0d      	ldr	r3, [pc, #52]	; (800a300 <TL_SYS_Init+0x48>)
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	4a08      	ldr	r2, [pc, #32]	; (800a2fc <TL_SYS_Init+0x44>)
 800a2dc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a2de:	f002 fca3 	bl	800cc28 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a07      	ldr	r2, [pc, #28]	; (800a304 <TL_SYS_Init+0x4c>)
 800a2e8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	4a06      	ldr	r2, [pc, #24]	; (800a308 <TL_SYS_Init+0x50>)
 800a2f0:	6013      	str	r3, [r2, #0]

  return 0;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	200300d0 	.word	0x200300d0
 800a300:	20030000 	.word	0x20030000
 800a304:	200006d8 	.word	0x200006d8
 800a308:	200006dc 	.word	0x200006dc

0800a30c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a318:	4b09      	ldr	r3, [pc, #36]	; (800a340 <TL_SYS_SendCmd+0x34>)
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2210      	movs	r2, #16
 800a320:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a322:	4b07      	ldr	r3, [pc, #28]	; (800a340 <TL_SYS_SendCmd+0x34>)
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4619      	mov	r1, r3
 800a32a:	2004      	movs	r0, #4
 800a32c:	f000 f8ec 	bl	800a508 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a330:	f002 fc84 	bl	800cc3c <HW_IPCC_SYS_SendCmd>

  return 0;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20030000 	.word	0x20030000

0800a344 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a348:	4b07      	ldr	r3, [pc, #28]	; (800a368 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4619      	mov	r1, r3
 800a350:	2005      	movs	r0, #5
 800a352:	f000 f8d9 	bl	800a508 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a356:	4b05      	ldr	r3, [pc, #20]	; (800a36c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a03      	ldr	r2, [pc, #12]	; (800a368 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a35c:	68d2      	ldr	r2, [r2, #12]
 800a35e:	6812      	ldr	r2, [r2, #0]
 800a360:	4610      	mov	r0, r2
 800a362:	4798      	blx	r3

  return;
 800a364:	bf00      	nop
}
 800a366:	bd80      	pop	{r7, pc}
 800a368:	20030000 	.word	0x20030000
 800a36c:	200006d8 	.word	0x200006d8

0800a370 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a376:	e00e      	b.n	800a396 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a378:	1d3b      	adds	r3, r7, #4
 800a37a:	4619      	mov	r1, r3
 800a37c:	480b      	ldr	r0, [pc, #44]	; (800a3ac <HW_IPCC_SYS_EvtNot+0x3c>)
 800a37e:	f000 fabe 	bl	800a8fe <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4619      	mov	r1, r3
 800a386:	2006      	movs	r0, #6
 800a388:	f000 f8be 	bl	800a508 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a38c:	4b08      	ldr	r3, [pc, #32]	; (800a3b0 <HW_IPCC_SYS_EvtNot+0x40>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	4610      	mov	r0, r2
 800a394:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a396:	4805      	ldr	r0, [pc, #20]	; (800a3ac <HW_IPCC_SYS_EvtNot+0x3c>)
 800a398:	f000 fa22 	bl	800a7e0 <LST_is_empty>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d0ea      	beq.n	800a378 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a3a2:	bf00      	nop
}
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200300d0 	.word	0x200300d0
 800a3b0:	200006dc 	.word	0x200006dc

0800a3b4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a3bc:	4817      	ldr	r0, [pc, #92]	; (800a41c <TL_MM_Init+0x68>)
 800a3be:	f000 f9ff 	bl	800a7c0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a3c2:	4817      	ldr	r0, [pc, #92]	; (800a420 <TL_MM_Init+0x6c>)
 800a3c4:	f000 f9fc 	bl	800a7c0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a3c8:	4b16      	ldr	r3, [pc, #88]	; (800a424 <TL_MM_Init+0x70>)
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	4a16      	ldr	r2, [pc, #88]	; (800a428 <TL_MM_Init+0x74>)
 800a3ce:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a3d0:	4b15      	ldr	r3, [pc, #84]	; (800a428 <TL_MM_Init+0x74>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	6892      	ldr	r2, [r2, #8]
 800a3d8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a3da:	4b13      	ldr	r3, [pc, #76]	; (800a428 <TL_MM_Init+0x74>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	68d2      	ldr	r2, [r2, #12]
 800a3e2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a3e4:	4b10      	ldr	r3, [pc, #64]	; (800a428 <TL_MM_Init+0x74>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a0c      	ldr	r2, [pc, #48]	; (800a41c <TL_MM_Init+0x68>)
 800a3ea:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a3ec:	4b0e      	ldr	r3, [pc, #56]	; (800a428 <TL_MM_Init+0x74>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	6812      	ldr	r2, [r2, #0]
 800a3f4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a3f6:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <TL_MM_Init+0x74>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	6852      	ldr	r2, [r2, #4]
 800a3fe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a400:	4b09      	ldr	r3, [pc, #36]	; (800a428 <TL_MM_Init+0x74>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	6912      	ldr	r2, [r2, #16]
 800a408:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a40a:	4b07      	ldr	r3, [pc, #28]	; (800a428 <TL_MM_Init+0x74>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	6952      	ldr	r2, [r2, #20]
 800a412:	619a      	str	r2, [r3, #24]

  return;
 800a414:	bf00      	nop
}
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	200300b8 	.word	0x200300b8
 800a420:	200006c8 	.word	0x200006c8
 800a424:	20030000 	.word	0x20030000
 800a428:	200006e0 	.word	0x200006e0

0800a42c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a434:	6879      	ldr	r1, [r7, #4]
 800a436:	4807      	ldr	r0, [pc, #28]	; (800a454 <TL_MM_EvtDone+0x28>)
 800a438:	f000 fa1a 	bl	800a870 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a43c:	6879      	ldr	r1, [r7, #4]
 800a43e:	2000      	movs	r0, #0
 800a440:	f000 f862 	bl	800a508 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a444:	4804      	ldr	r0, [pc, #16]	; (800a458 <TL_MM_EvtDone+0x2c>)
 800a446:	f002 fc1f 	bl	800cc88 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a44a:	bf00      	nop
}
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	200006c8 	.word	0x200006c8
 800a458:	0800a45d 	.word	0x0800a45d

0800a45c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a462:	e00c      	b.n	800a47e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a464:	1d3b      	adds	r3, r7, #4
 800a466:	4619      	mov	r1, r3
 800a468:	480a      	ldr	r0, [pc, #40]	; (800a494 <SendFreeBuf+0x38>)
 800a46a:	f000 fa48 	bl	800a8fe <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a46e:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <SendFreeBuf+0x3c>)
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	4611      	mov	r1, r2
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 f9f9 	bl	800a870 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a47e:	4805      	ldr	r0, [pc, #20]	; (800a494 <SendFreeBuf+0x38>)
 800a480:	f000 f9ae 	bl	800a7e0 <LST_is_empty>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0ec      	beq.n	800a464 <SendFreeBuf+0x8>
  }

  return;
 800a48a:	bf00      	nop
}
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	200006c8 	.word	0x200006c8
 800a498:	20030000 	.word	0x20030000

0800a49c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a4a0:	4805      	ldr	r0, [pc, #20]	; (800a4b8 <TL_TRACES_Init+0x1c>)
 800a4a2:	f000 f98d 	bl	800a7c0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a4a6:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <TL_TRACES_Init+0x20>)
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	4a03      	ldr	r2, [pc, #12]	; (800a4b8 <TL_TRACES_Init+0x1c>)
 800a4ac:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a4ae:	f002 fc21 	bl	800ccf4 <HW_IPCC_TRACES_Init>

  return;
 800a4b2:	bf00      	nop
}
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	200300c0 	.word	0x200300c0
 800a4bc:	20030000 	.word	0x20030000

0800a4c0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a4c6:	e008      	b.n	800a4da <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a4c8:	1d3b      	adds	r3, r7, #4
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	4808      	ldr	r0, [pc, #32]	; (800a4f0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a4ce:	f000 fa16 	bl	800a8fe <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 f80d 	bl	800a4f4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a4da:	4805      	ldr	r0, [pc, #20]	; (800a4f0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a4dc:	f000 f980 	bl	800a7e0 <LST_is_empty>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0f0      	beq.n	800a4c8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a4e6:	bf00      	nop
}
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	200300c0 	.word	0x200300c0

0800a4f4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	6039      	str	r1, [r7, #0]
 800a512:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a514:	79fb      	ldrb	r3, [r7, #7]
 800a516:	2b06      	cmp	r3, #6
 800a518:	d845      	bhi.n	800a5a6 <OutputDbgTrace+0x9e>
 800a51a:	a201      	add	r2, pc, #4	; (adr r2, 800a520 <OutputDbgTrace+0x18>)
 800a51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a520:	0800a53d 	.word	0x0800a53d
 800a524:	0800a561 	.word	0x0800a561
 800a528:	0800a567 	.word	0x0800a567
 800a52c:	0800a57b 	.word	0x0800a57b
 800a530:	0800a587 	.word	0x0800a587
 800a534:	0800a58d 	.word	0x0800a58d
 800a538:	0800a59b 	.word	0x0800a59b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	7a5b      	ldrb	r3, [r3, #9]
 800a544:	2bff      	cmp	r3, #255	; 0xff
 800a546:	d005      	beq.n	800a554 <OutputDbgTrace+0x4c>
 800a548:	2bff      	cmp	r3, #255	; 0xff
 800a54a:	dc05      	bgt.n	800a558 <OutputDbgTrace+0x50>
 800a54c:	2b0e      	cmp	r3, #14
 800a54e:	d005      	beq.n	800a55c <OutputDbgTrace+0x54>
 800a550:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a552:	e001      	b.n	800a558 <OutputDbgTrace+0x50>
          break;
 800a554:	bf00      	nop
 800a556:	e027      	b.n	800a5a8 <OutputDbgTrace+0xa0>
          break;
 800a558:	bf00      	nop
 800a55a:	e025      	b.n	800a5a8 <OutputDbgTrace+0xa0>
          break;
 800a55c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a55e:	e023      	b.n	800a5a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a564:	e020      	b.n	800a5a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	7a5b      	ldrb	r3, [r3, #9]
 800a56e:	2b0e      	cmp	r3, #14
 800a570:	d001      	beq.n	800a576 <OutputDbgTrace+0x6e>
 800a572:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a574:	e000      	b.n	800a578 <OutputDbgTrace+0x70>
          break;
 800a576:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a578:	e016      	b.n	800a5a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	7a5b      	ldrb	r3, [r3, #9]
 800a582:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a584:	e010      	b.n	800a5a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a58a:	e00d      	b.n	800a5a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	7a5b      	ldrb	r3, [r3, #9]
 800a594:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a596:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a598:	e006      	b.n	800a5a8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	7a5b      	ldrb	r3, [r3, #9]
 800a5a2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a5a4:	e000      	b.n	800a5a8 <OutputDbgTrace+0xa0>

    default:
      break;
 800a5a6:	bf00      	nop
  }

  return;
 800a5a8:	bf00      	nop
}
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800a5c0:	215c      	movs	r1, #92	; 0x5c
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f003 f844 	bl	800d650 <strrchr>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d007      	beq.n	800a5de <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800a5ce:	215c      	movs	r1, #92	; 0x5c
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f003 f83d 	bl	800d650 <strrchr>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	3301      	adds	r3, #1
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	e00d      	b.n	800a5fa <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800a5de:	212f      	movs	r1, #47	; 0x2f
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f003 f835 	bl	800d650 <strrchr>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d006      	beq.n	800a5fa <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800a5ec:	212f      	movs	r1, #47	; 0x2f
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f003 f82e 	bl	800d650 <strrchr>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b086      	sub	sp, #24
 800a608:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a60a:	f3ef 8310 	mrs	r3, PRIMASK
 800a60e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a610:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a612:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a614:	b672      	cpsid	i
}
 800a616:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a618:	1cbb      	adds	r3, r7, #2
 800a61a:	4619      	mov	r1, r3
 800a61c:	4812      	ldr	r0, [pc, #72]	; (800a668 <DbgTrace_TxCpltCallback+0x64>)
 800a61e:	f000 fbe6 	bl	800adee <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a622:	1cbb      	adds	r3, r7, #2
 800a624:	4619      	mov	r1, r3
 800a626:	4810      	ldr	r0, [pc, #64]	; (800a668 <DbgTrace_TxCpltCallback+0x64>)
 800a628:	f000 fcd2 	bl	800afd0 <CircularQueue_Sense>
 800a62c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00c      	beq.n	800a64e <DbgTrace_TxCpltCallback+0x4a>
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f383 8810 	msr	PRIMASK, r3
}
 800a63e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a640:	887b      	ldrh	r3, [r7, #2]
 800a642:	4a0a      	ldr	r2, [pc, #40]	; (800a66c <DbgTrace_TxCpltCallback+0x68>)
 800a644:	4619      	mov	r1, r3
 800a646:	6938      	ldr	r0, [r7, #16]
 800a648:	f7f6 fb7d 	bl	8000d46 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a64c:	e008      	b.n	800a660 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800a64e:	4b08      	ldr	r3, [pc, #32]	; (800a670 <DbgTrace_TxCpltCallback+0x6c>)
 800a650:	2201      	movs	r2, #1
 800a652:	701a      	strb	r2, [r3, #0]
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f383 8810 	msr	PRIMASK, r3
}
 800a65e:	bf00      	nop
}
 800a660:	bf00      	nop
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	200006e4 	.word	0x200006e4
 800a66c:	0800a605 	.word	0x0800a605
 800a670:	20000011 	.word	0x20000011

0800a674 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a67a:	f7f6 fb5e 	bl	8000d3a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a67e:	2302      	movs	r3, #2
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	2300      	movs	r3, #0
 800a684:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a688:	4903      	ldr	r1, [pc, #12]	; (800a698 <DbgTraceInit+0x24>)
 800a68a:	4804      	ldr	r0, [pc, #16]	; (800a69c <DbgTraceInit+0x28>)
 800a68c:	f000 f956 	bl	800a93c <CircularQueue_Init>
#endif 
#endif
  return;
 800a690:	bf00      	nop
}
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	20000704 	.word	0x20000704
 800a69c:	200006e4 	.word	0x200006e4

0800a6a0 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	68b9      	ldr	r1, [r7, #8]
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f805 	bl	800a6c0 <DbgTraceWrite>
 800a6b6:	4603      	mov	r3, r0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b08a      	sub	sp, #40	; 0x28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a6d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800a6d6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800a6d8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e0:	d102      	bne.n	800a6e8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a6e6:	e037      	b.n	800a758 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d006      	beq.n	800a6fc <DbgTraceWrite+0x3c>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d003      	beq.n	800a6fc <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800a6f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f8:	627b      	str	r3, [r7, #36]	; 0x24
 800a6fa:	e02d      	b.n	800a758 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d02a      	beq.n	800a758 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a706:	b672      	cpsid	i
}
 800a708:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	2301      	movs	r3, #1
 800a710:	68b9      	ldr	r1, [r7, #8]
 800a712:	4814      	ldr	r0, [pc, #80]	; (800a764 <DbgTraceWrite+0xa4>)
 800a714:	f000 f944 	bl	800a9a0 <CircularQueue_Add>
 800a718:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d015      	beq.n	800a74c <DbgTraceWrite+0x8c>
 800a720:	4b11      	ldr	r3, [pc, #68]	; (800a768 <DbgTraceWrite+0xa8>)
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b00      	cmp	r3, #0
 800a728:	d010      	beq.n	800a74c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800a72a:	4b0f      	ldr	r3, [pc, #60]	; (800a768 <DbgTraceWrite+0xa8>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	701a      	strb	r2, [r3, #0]
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	f383 8810 	msr	PRIMASK, r3
}
 800a73a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	4a0a      	ldr	r2, [pc, #40]	; (800a76c <DbgTraceWrite+0xac>)
 800a742:	4619      	mov	r1, r3
 800a744:	69f8      	ldr	r0, [r7, #28]
 800a746:	f7f6 fafe 	bl	8000d46 <DbgOutputTraces>
 800a74a:	e005      	b.n	800a758 <DbgTraceWrite+0x98>
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f383 8810 	msr	PRIMASK, r3
}
 800a756:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3728      	adds	r7, #40	; 0x28
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	200006e4 	.word	0x200006e4
 800a768:	20000011 	.word	0x20000011
 800a76c:	0800a605 	.word	0x0800a605

0800a770 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a77a:	4b0f      	ldr	r3, [pc, #60]	; (800a7b8 <OTP_Read+0x48>)
 800a77c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a77e:	e002      	b.n	800a786 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	3b08      	subs	r3, #8
 800a784:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3307      	adds	r3, #7
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	79fa      	ldrb	r2, [r7, #7]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d003      	beq.n	800a79a <OTP_Read+0x2a>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	4a09      	ldr	r2, [pc, #36]	; (800a7bc <OTP_Read+0x4c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d1f2      	bne.n	800a780 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3307      	adds	r3, #7
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	79fa      	ldrb	r2, [r7, #7]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d001      	beq.n	800a7aa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	1fff73f8 	.word	0x1fff73f8
 800a7bc:	1fff7000 	.word	0x1fff7000

0800a7c0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	605a      	str	r2, [r3, #4]
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a7f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7f2:	b672      	cpsid	i
}
 800a7f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d102      	bne.n	800a806 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a800:	2301      	movs	r3, #1
 800a802:	75fb      	strb	r3, [r7, #23]
 800a804:	e001      	b.n	800a80a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a806:	2300      	movs	r3, #0
 800a808:	75fb      	strb	r3, [r7, #23]
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	f383 8810 	msr	PRIMASK, r3
}
 800a814:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a816:	7dfb      	ldrb	r3, [r7, #23]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	371c      	adds	r7, #28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a824:	b480      	push	{r7}
 800a826:	b087      	sub	sp, #28
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a82e:	f3ef 8310 	mrs	r3, PRIMASK
 800a832:	60fb      	str	r3, [r7, #12]
  return(result);
 800a834:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a836:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a838:	b672      	cpsid	i
}
 800a83a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	683a      	ldr	r2, [r7, #0]
 800a84e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	605a      	str	r2, [r3, #4]
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f383 8810 	msr	PRIMASK, r3
}
 800a862:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a864:	bf00      	nop
 800a866:	371c      	adds	r7, #28
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a870:	b480      	push	{r7}
 800a872:	b087      	sub	sp, #28
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a87a:	f3ef 8310 	mrs	r3, PRIMASK
 800a87e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a880:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a882:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a884:	b672      	cpsid	i
}
 800a886:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	f383 8810 	msr	PRIMASK, r3
}
 800a8ae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a8b0:	bf00      	nop
 800a8b2:	371c      	adds	r7, #28
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b087      	sub	sp, #28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a8c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a8cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8ce:	b672      	cpsid	i
}
 800a8d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	6812      	ldr	r2, [r2, #0]
 800a8da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	6852      	ldr	r2, [r2, #4]
 800a8e4:	605a      	str	r2, [r3, #4]
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	f383 8810 	msr	PRIMASK, r3
}
 800a8f0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a8f2:	bf00      	nop
 800a8f4:	371c      	adds	r7, #28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr

0800a8fe <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b086      	sub	sp, #24
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a908:	f3ef 8310 	mrs	r3, PRIMASK
 800a90c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a90e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a912:	b672      	cpsid	i
}
 800a914:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4618      	mov	r0, r3
 800a924:	f7ff ffca 	bl	800a8bc <LST_remove_node>
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	f383 8810 	msr	PRIMASK, r3
}
 800a932:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a934:	bf00      	nop
 800a936:	3718      	adds	r7, #24
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
 800a948:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2200      	movs	r2, #0
 800a954:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	887a      	ldrh	r2, [r7, #2]
 800a972:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	7e3a      	ldrb	r2, [r7, #24]
 800a978:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a97a:	7e3b      	ldrb	r3, [r7, #24]
 800a97c:	f003 0302 	and.w	r3, r3, #2
 800a980:	2b00      	cmp	r3, #0
 800a982:	d006      	beq.n	800a992 <CircularQueue_Init+0x56>
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	891b      	ldrh	r3, [r3, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a98c:	f04f 33ff 	mov.w	r3, #4294967295
 800a990:	e000      	b.n	800a994 <CircularQueue_Init+0x58>
  }
  return 0;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08e      	sub	sp, #56	; 0x38
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	603b      	str	r3, [r7, #0]
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a9bc:	2300      	movs	r3, #0
 800a9be:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	891b      	ldrh	r3, [r3, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <CircularQueue_Add+0x38>
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	e000      	b.n	800a9da <CircularQueue_Add+0x3a>
 800a9d8:	2300      	movs	r3, #0
 800a9da:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	695b      	ldr	r3, [r3, #20]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d02a      	beq.n	800aa3a <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	891b      	ldrh	r3, [r3, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d123      	bne.n	800aa34 <CircularQueue_Add+0x94>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6819      	ldr	r1, [r3, #0]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	1c58      	adds	r0, r3, #1
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	4298      	cmp	r0, r3
 800aa0a:	d306      	bcc.n	800aa1a <CircularQueue_Add+0x7a>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6918      	ldr	r0, [r3, #16]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	1ac3      	subs	r3, r0, r3
 800aa16:	3301      	adds	r3, #1
 800aa18:	e002      	b.n	800aa20 <CircularQueue_Add+0x80>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	440b      	add	r3, r1
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	021b      	lsls	r3, r3, #8
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	4413      	add	r3, r2
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	3302      	adds	r3, #2
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	e001      	b.n	800aa38 <CircularQueue_Add+0x98>
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	891b      	ldrh	r3, [r3, #8]
 800aa38:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	891b      	ldrh	r3, [r3, #8]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d002      	beq.n	800aa48 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	891b      	ldrh	r3, [r3, #8]
 800aa46:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	691a      	ldr	r2, [r3, #16]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d307      	bcc.n	800aa64 <CircularQueue_Add+0xc4>
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6919      	ldr	r1, [r3, #16]
 800aa5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa5e:	440b      	add	r3, r1
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	e000      	b.n	800aa66 <CircularQueue_Add+0xc6>
 800aa64:	2300      	movs	r3, #0
 800aa66:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800aa68:	88fa      	ldrh	r2, [r7, #6]
 800aa6a:	7ffb      	ldrb	r3, [r7, #31]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	461a      	mov	r2, r3
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	fb02 f303 	mul.w	r3, r2, r3
 800aa76:	69ba      	ldr	r2, [r7, #24]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d80b      	bhi.n	800aa94 <CircularQueue_Add+0xf4>
 800aa7c:	88fa      	ldrh	r2, [r7, #6]
 800aa7e:	7ffb      	ldrb	r3, [r7, #31]
 800aa80:	4413      	add	r3, r2
 800aa82:	461a      	mov	r2, r3
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa8a:	fb01 f202 	mul.w	r2, r1, r2
 800aa8e:	1a9b      	subs	r3, r3, r2
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	e000      	b.n	800aa96 <CircularQueue_Add+0xf6>
 800aa94:	2300      	movs	r3, #0
 800aa96:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800aa98:	7dfa      	ldrb	r2, [r7, #23]
 800aa9a:	7ffb      	ldrb	r3, [r7, #31]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	bf8c      	ite	hi
 800aaa0:	2301      	movhi	r3, #1
 800aaa2:	2300      	movls	r3, #0
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800aaa8:	7fbb      	ldrb	r3, [r7, #30]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d008      	beq.n	800aac0 <CircularQueue_Add+0x120>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	7f1b      	ldrb	r3, [r3, #28]
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d002      	beq.n	800aac0 <CircularQueue_Add+0x120>
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	e000      	b.n	800aac2 <CircularQueue_Add+0x122>
 800aac0:	8bbb      	ldrh	r3, [r7, #28]
 800aac2:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800aac4:	7fbb      	ldrb	r3, [r7, #30]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d008      	beq.n	800aadc <CircularQueue_Add+0x13c>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	7f1b      	ldrb	r3, [r3, #28]
 800aace:	f003 0302 	and.w	r3, r3, #2
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d002      	beq.n	800aadc <CircularQueue_Add+0x13c>
 800aad6:	7ffb      	ldrb	r3, [r7, #31]
 800aad8:	b29b      	uxth	r3, r3
 800aada:	e000      	b.n	800aade <CircularQueue_Add+0x13e>
 800aadc:	8bbb      	ldrh	r3, [r7, #28]
 800aade:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800aae0:	88fb      	ldrh	r3, [r7, #6]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 817e 	beq.w	800ade4 <CircularQueue_Add+0x444>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	695a      	ldr	r2, [r3, #20]
 800aaec:	88f9      	ldrh	r1, [r7, #6]
 800aaee:	7ffb      	ldrb	r3, [r7, #31]
 800aaf0:	440b      	add	r3, r1
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	fb01 f303 	mul.w	r3, r1, r3
 800aafa:	441a      	add	r2, r3
 800aafc:	8bbb      	ldrh	r3, [r7, #28]
 800aafe:	441a      	add	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	f200 816d 	bhi.w	800ade4 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab0e:	e14a      	b.n	800ada6 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	691a      	ldr	r2, [r3, #16]
 800ab14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab16:	441a      	add	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d307      	bcc.n	800ab30 <CircularQueue_Add+0x190>
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	691a      	ldr	r2, [r3, #16]
 800ab24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab26:	441a      	add	r2, r3
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	e003      	b.n	800ab38 <CircularQueue_Add+0x198>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	691a      	ldr	r2, [r3, #16]
 800ab34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ab36:	4413      	add	r3, r2
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	891b      	ldrh	r3, [r3, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d130      	bne.n	800abac <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	1c59      	adds	r1, r3, #1
 800ab52:	6339      	str	r1, [r7, #48]	; 0x30
 800ab54:	4413      	add	r3, r2
 800ab56:	88fa      	ldrh	r2, [r7, #6]
 800ab58:	b2d2      	uxtb	r2, r2
 800ab5a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d304      	bcc.n	800ab70 <CircularQueue_Add+0x1d0>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	e000      	b.n	800ab72 <CircularQueue_Add+0x1d2>
 800ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab72:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800ab74:	88fb      	ldrh	r3, [r7, #6]
 800ab76:	0a1b      	lsrs	r3, r3, #8
 800ab78:	b298      	uxth	r0, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	1c59      	adds	r1, r3, #1
 800ab82:	6339      	str	r1, [r7, #48]	; 0x30
 800ab84:	4413      	add	r3, r2
 800ab86:	b2c2      	uxtb	r2, r0
 800ab88:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d304      	bcc.n	800ab9e <CircularQueue_Add+0x1fe>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	e000      	b.n	800aba0 <CircularQueue_Add+0x200>
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba0:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	1c9a      	adds	r2, r3, #2
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800abac:	88fa      	ldrh	r2, [r7, #6]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6859      	ldr	r1, [r3, #4]
 800abb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb4:	1acb      	subs	r3, r1, r3
 800abb6:	4293      	cmp	r3, r2
 800abb8:	bf28      	it	cs
 800abba:	4613      	movcs	r3, r2
 800abbc:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800abbe:	88fb      	ldrh	r3, [r7, #6]
 800abc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d007      	beq.n	800abd6 <CircularQueue_Add+0x236>
 800abc6:	88fb      	ldrh	r3, [r7, #6]
 800abc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abca:	429a      	cmp	r2, r3
 800abcc:	d225      	bcs.n	800ac1a <CircularQueue_Add+0x27a>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	7f1b      	ldrb	r3, [r3, #28]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d121      	bne.n	800ac1a <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	18d0      	adds	r0, r2, r3
 800abde:	88fb      	ldrh	r3, [r7, #6]
 800abe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abe2:	fb02 f303 	mul.w	r3, r2, r3
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	4413      	add	r3, r2
 800abea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abec:	4619      	mov	r1, r3
 800abee:	f002 fdba 	bl	800d766 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	695a      	ldr	r2, [r3, #20]
 800abf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf8:	441a      	add	r2, r3
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800abfe:	2300      	movs	r3, #0
 800ac00:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac04:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800ac06:	88fa      	ldrh	r2, [r7, #6]
 800ac08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0a:	1ad3      	subs	r3, r2, r3
 800ac0c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800ac0e:	7ffb      	ldrb	r3, [r7, #31]
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	88fb      	ldrh	r3, [r7, #6]
 800ac14:	4413      	add	r3, r2
 800ac16:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ac18:	e0a4      	b.n	800ad64 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800ac1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 80a1 	beq.w	800ad64 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	7f1b      	ldrb	r3, [r3, #28]
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d03a      	beq.n	800aca4 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	891b      	ldrh	r3, [r3, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10d      	bne.n	800ac52 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	3b02      	subs	r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	22ff      	movs	r2, #255	; 0xff
 800ac42:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	4413      	add	r3, r2
 800ac4e:	22ff      	movs	r2, #255	; 0xff
 800ac50:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	695a      	ldr	r2, [r3, #20]
 800ac56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac58:	441a      	add	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800ac62:	88fb      	ldrh	r3, [r7, #6]
 800ac64:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800ac66:	2300      	movs	r3, #0
 800ac68:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	891b      	ldrh	r3, [r3, #8]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d16f      	bne.n	800ad52 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	1c59      	adds	r1, r3, #1
 800ac7a:	6339      	str	r1, [r7, #48]	; 0x30
 800ac7c:	4413      	add	r3, r2
 800ac7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac80:	b2d2      	uxtb	r2, r2
 800ac82:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac86:	0a18      	lsrs	r0, r3, #8
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8e:	1c59      	adds	r1, r3, #1
 800ac90:	6339      	str	r1, [r7, #48]	; 0x30
 800ac92:	4413      	add	r3, r2
 800ac94:	b2c2      	uxtb	r2, r0
 800ac96:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	1c9a      	adds	r2, r3, #2
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	615a      	str	r2, [r3, #20]
 800aca2:	e056      	b.n	800ad52 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	7f1b      	ldrb	r3, [r3, #28]
 800aca8:	f003 0302 	and.w	r3, r3, #2
 800acac:	2b00      	cmp	r3, #0
 800acae:	d050      	beq.n	800ad52 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	891b      	ldrh	r3, [r3, #8]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d14a      	bne.n	800ad4e <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbe:	3b02      	subs	r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acc4:	b2d2      	uxtb	r2, r2
 800acc6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acca:	0a19      	lsrs	r1, r3, #8
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd2:	3b01      	subs	r3, #1
 800acd4:	4413      	add	r3, r2
 800acd6:	b2ca      	uxtb	r2, r1
 800acd8:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace0:	18d0      	adds	r0, r2, r3
 800ace2:	88fb      	ldrh	r3, [r7, #6]
 800ace4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ace6:	fb02 f303 	mul.w	r3, r2, r3
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	4413      	add	r3, r2
 800acee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acf0:	4619      	mov	r1, r3
 800acf2:	f002 fd38 	bl	800d766 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	695a      	ldr	r2, [r3, #20]
 800acfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfc:	441a      	add	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800ad06:	88fa      	ldrh	r2, [r7, #6]
 800ad08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	699b      	ldr	r3, [r3, #24]
 800ad12:	1c5a      	adds	r2, r3, #1
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800ad18:	2300      	movs	r3, #0
 800ad1a:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad22:	1c59      	adds	r1, r3, #1
 800ad24:	6339      	str	r1, [r7, #48]	; 0x30
 800ad26:	4413      	add	r3, r2
 800ad28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad2a:	b2d2      	uxtb	r2, r2
 800ad2c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	0a18      	lsrs	r0, r3, #8
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	1c59      	adds	r1, r3, #1
 800ad3a:	6339      	str	r1, [r7, #48]	; 0x30
 800ad3c:	4413      	add	r3, r2
 800ad3e:	b2c2      	uxtb	r2, r0
 800ad40:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	1c9a      	adds	r2, r3, #2
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	615a      	str	r2, [r3, #20]
 800ad4c:	e001      	b.n	800ad52 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	e049      	b.n	800ade6 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800ad52:	7ffb      	ldrb	r3, [r7, #31]
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	4413      	add	r3, r2
 800ad5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800ad64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d015      	beq.n	800ad96 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad70:	18d0      	adds	r0, r2, r3
 800ad72:	88fb      	ldrh	r3, [r7, #6]
 800ad74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad76:	fb03 f202 	mul.w	r2, r3, r2
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	4413      	add	r3, r2
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	4413      	add	r3, r2
 800ad82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad84:	4619      	mov	r1, r3
 800ad86:	f002 fcee 	bl	800d766 <memcpy>
        q->byteCount += NbBytesToCopy;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	695a      	ldr	r2, [r3, #20]
 800ad8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad90:	441a      	add	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800ada0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada2:	3301      	adds	r3, #1
 800ada4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ada6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	429a      	cmp	r2, r3
 800adac:	f4ff aeb0 	bcc.w	800ab10 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6919      	ldr	r1, [r3, #16]
 800adb8:	7ffb      	ldrb	r3, [r7, #31]
 800adba:	4419      	add	r1, r3
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	4299      	cmp	r1, r3
 800adc2:	d307      	bcc.n	800add4 <CircularQueue_Add+0x434>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6919      	ldr	r1, [r3, #16]
 800adc8:	7ffb      	ldrb	r3, [r7, #31]
 800adca:	4419      	add	r1, r3
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	1acb      	subs	r3, r1, r3
 800add2:	e003      	b.n	800addc <CircularQueue_Add+0x43c>
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6919      	ldr	r1, [r3, #16]
 800add8:	7ffb      	ldrb	r3, [r7, #31]
 800adda:	440b      	add	r3, r1
 800addc:	4413      	add	r3, r2
 800adde:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	e000      	b.n	800ade6 <CircularQueue_Add+0x446>
    return NULL;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3738      	adds	r7, #56	; 0x38
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800adee:	b480      	push	{r7}
 800adf0:	b085      	sub	sp, #20
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800adfc:	2300      	movs	r3, #0
 800adfe:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	891b      	ldrh	r3, [r3, #8]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d101      	bne.n	800ae0c <CircularQueue_Remove+0x1e>
 800ae08:	2302      	movs	r3, #2
 800ae0a:	e000      	b.n	800ae0e <CircularQueue_Remove+0x20>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	695b      	ldr	r3, [r3, #20]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 80cc 	beq.w	800afb6 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	891b      	ldrh	r3, [r3, #8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d121      	bne.n	800ae6a <CircularQueue_Remove+0x7c>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6819      	ldr	r1, [r3, #0]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	1c58      	adds	r0, r3, #1
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	4298      	cmp	r0, r3
 800ae44:	d306      	bcc.n	800ae54 <CircularQueue_Remove+0x66>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68d8      	ldr	r0, [r3, #12]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	1ac3      	subs	r3, r0, r3
 800ae50:	3301      	adds	r3, #1
 800ae52:	e002      	b.n	800ae5a <CircularQueue_Remove+0x6c>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	440b      	add	r3, r1
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	021b      	lsls	r3, r3, #8
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	4413      	add	r3, r2
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	e001      	b.n	800ae6e <CircularQueue_Remove+0x80>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	891b      	ldrh	r3, [r3, #8]
 800ae6e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	7f1b      	ldrb	r3, [r3, #28]
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d057      	beq.n	800af2c <CircularQueue_Remove+0x13e>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	7f1b      	ldrb	r3, [r3, #28]
 800ae80:	f003 0302 	and.w	r3, r3, #2
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d151      	bne.n	800af2c <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ae88:	897b      	ldrh	r3, [r7, #10]
 800ae8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d103      	bne.n	800ae9a <CircularQueue_Remove+0xac>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	891b      	ldrh	r3, [r3, #8]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d012      	beq.n	800aec0 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d942      	bls.n	800af2c <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	891b      	ldrh	r3, [r3, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d03e      	beq.n	800af2c <CircularQueue_Remove+0x13e>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	1ad3      	subs	r3, r2, r3
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	8912      	ldrh	r2, [r2, #8]
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d235      	bcs.n	800af2c <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	695a      	ldr	r2, [r3, #20]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68d9      	ldr	r1, [r3, #12]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	1acb      	subs	r3, r1, r3
 800aece:	441a      	add	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	891b      	ldrh	r3, [r3, #8]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d121      	bne.n	800af26 <CircularQueue_Remove+0x138>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	4413      	add	r3, r2
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6819      	ldr	r1, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	1c58      	adds	r0, r3, #1
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	4298      	cmp	r0, r3
 800af00:	d306      	bcc.n	800af10 <CircularQueue_Remove+0x122>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	68d8      	ldr	r0, [r3, #12]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	1ac3      	subs	r3, r0, r3
 800af0c:	3301      	adds	r3, #1
 800af0e:	e002      	b.n	800af16 <CircularQueue_Remove+0x128>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	3301      	adds	r3, #1
 800af16:	440b      	add	r3, r1
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	b29b      	uxth	r3, r3
 800af20:	4413      	add	r3, r2
 800af22:	b29b      	uxth	r3, r3
 800af24:	e001      	b.n	800af2a <CircularQueue_Remove+0x13c>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	891b      	ldrh	r3, [r3, #8]
 800af2a:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68d9      	ldr	r1, [r3, #12]
 800af34:	7a7b      	ldrb	r3, [r7, #9]
 800af36:	4419      	add	r1, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	4299      	cmp	r1, r3
 800af3e:	d307      	bcc.n	800af50 <CircularQueue_Remove+0x162>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	68d9      	ldr	r1, [r3, #12]
 800af44:	7a7b      	ldrb	r3, [r7, #9]
 800af46:	4419      	add	r1, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	1acb      	subs	r3, r1, r3
 800af4e:	e003      	b.n	800af58 <CircularQueue_Remove+0x16a>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68d9      	ldr	r1, [r3, #12]
 800af54:	7a7b      	ldrb	r3, [r7, #9]
 800af56:	440b      	add	r3, r1
 800af58:	4413      	add	r3, r2
 800af5a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	695b      	ldr	r3, [r3, #20]
 800af60:	8979      	ldrh	r1, [r7, #10]
 800af62:	7a7a      	ldrb	r2, [r7, #9]
 800af64:	440a      	add	r2, r1
 800af66:	1a9a      	subs	r2, r3, r2
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d01b      	beq.n	800afac <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68da      	ldr	r2, [r3, #12]
 800af78:	897b      	ldrh	r3, [r7, #10]
 800af7a:	441a      	add	r2, r3
 800af7c:	7a7b      	ldrb	r3, [r7, #9]
 800af7e:	441a      	add	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	429a      	cmp	r2, r3
 800af86:	d309      	bcc.n	800af9c <CircularQueue_Remove+0x1ae>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	68da      	ldr	r2, [r3, #12]
 800af8c:	897b      	ldrh	r3, [r7, #10]
 800af8e:	441a      	add	r2, r3
 800af90:	7a7b      	ldrb	r3, [r7, #9]
 800af92:	441a      	add	r2, r3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	e005      	b.n	800afa8 <CircularQueue_Remove+0x1ba>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68da      	ldr	r2, [r3, #12]
 800afa0:	897b      	ldrh	r3, [r7, #10]
 800afa2:	441a      	add	r2, r3
 800afa4:	7a7b      	ldrb	r3, [r7, #9]
 800afa6:	4413      	add	r3, r2
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	1e5a      	subs	r2, r3, #1
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	897a      	ldrh	r2, [r7, #10]
 800afc0:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800afc2:	68fb      	ldr	r3, [r7, #12]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b087      	sub	sp, #28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	891b      	ldrh	r3, [r3, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d101      	bne.n	800afee <CircularQueue_Sense+0x1e>
 800afea:	2302      	movs	r3, #2
 800afec:	e000      	b.n	800aff0 <CircularQueue_Sense+0x20>
 800afee:	2300      	movs	r3, #0
 800aff0:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 8090 	beq.w	800b124 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	891b      	ldrh	r3, [r3, #8]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d121      	bne.n	800b056 <CircularQueue_Sense+0x86>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	4413      	add	r3, r2
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	b29a      	uxth	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6819      	ldr	r1, [r3, #0]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	1c58      	adds	r0, r3, #1
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	4298      	cmp	r0, r3
 800b030:	d306      	bcc.n	800b040 <CircularQueue_Sense+0x70>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68d8      	ldr	r0, [r3, #12]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	1ac3      	subs	r3, r0, r3
 800b03c:	3301      	adds	r3, #1
 800b03e:	e002      	b.n	800b046 <CircularQueue_Sense+0x76>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	3301      	adds	r3, #1
 800b046:	440b      	add	r3, r1
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	021b      	lsls	r3, r3, #8
 800b04e:	b29b      	uxth	r3, r3
 800b050:	4413      	add	r3, r2
 800b052:	b29b      	uxth	r3, r3
 800b054:	e001      	b.n	800b05a <CircularQueue_Sense+0x8a>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	891b      	ldrh	r3, [r3, #8]
 800b05a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	7f1b      	ldrb	r3, [r3, #28]
 800b060:	f003 0301 	and.w	r3, r3, #1
 800b064:	2b00      	cmp	r3, #0
 800b066:	d048      	beq.n	800b0fa <CircularQueue_Sense+0x12a>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	7f1b      	ldrb	r3, [r3, #28]
 800b06c:	f003 0302 	and.w	r3, r3, #2
 800b070:	2b00      	cmp	r3, #0
 800b072:	d142      	bne.n	800b0fa <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b074:	8a7b      	ldrh	r3, [r7, #18]
 800b076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d103      	bne.n	800b086 <CircularQueue_Sense+0xb6>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	891b      	ldrh	r3, [r3, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d012      	beq.n	800b0ac <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68da      	ldr	r2, [r3, #12]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b08e:	429a      	cmp	r2, r3
 800b090:	d933      	bls.n	800b0fa <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	891b      	ldrh	r3, [r3, #8]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d02f      	beq.n	800b0fa <CircularQueue_Sense+0x12a>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	8912      	ldrh	r2, [r2, #8]
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d226      	bcs.n	800b0fa <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	891b      	ldrh	r3, [r3, #8]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d11d      	bne.n	800b0f4 <CircularQueue_Sense+0x124>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4413      	add	r3, r2
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6819      	ldr	r1, [r3, #0]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	1c58      	adds	r0, r3, #1
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	4298      	cmp	r0, r3
 800b0d2:	d305      	bcc.n	800b0e0 <CircularQueue_Sense+0x110>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	1ac3      	subs	r3, r0, r3
 800b0dc:	3301      	adds	r3, #1
 800b0de:	e001      	b.n	800b0e4 <CircularQueue_Sense+0x114>
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	440b      	add	r3, r1
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	021b      	lsls	r3, r3, #8
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	4413      	add	r3, r2
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	e001      	b.n	800b0f8 <CircularQueue_Sense+0x128>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	891b      	ldrh	r3, [r3, #8]
 800b0f8:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	7af9      	ldrb	r1, [r7, #11]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4419      	add	r1, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	4299      	cmp	r1, r3
 800b10a:	d306      	bcc.n	800b11a <CircularQueue_Sense+0x14a>
 800b10c:	7af9      	ldrb	r1, [r7, #11]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	4419      	add	r1, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	1acb      	subs	r3, r1, r3
 800b118:	e002      	b.n	800b120 <CircularQueue_Sense+0x150>
 800b11a:	7af9      	ldrb	r1, [r7, #11]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	440b      	add	r3, r1
 800b120:	4413      	add	r3, r2
 800b122:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	8a7a      	ldrh	r2, [r7, #18]
 800b12e:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800b130:	697b      	ldr	r3, [r7, #20]
}
 800b132:	4618      	mov	r0, r3
 800b134:	371c      	adds	r7, #28
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
	...

0800b140 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b140:	b480      	push	{r7}
 800b142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b144:	4b03      	ldr	r3, [pc, #12]	; (800b154 <LL_FLASH_GetUDN+0x14>)
 800b146:	681b      	ldr	r3, [r3, #0]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	1fff7580 	.word	0x1fff7580

0800b158 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b158:	b480      	push	{r7}
 800b15a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b15c:	4b03      	ldr	r3, [pc, #12]	; (800b16c <LL_FLASH_GetDeviceID+0x14>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	b2db      	uxtb	r3, r3
}
 800b162:	4618      	mov	r0, r3
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	1fff7584 	.word	0x1fff7584

0800b170 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b170:	b480      	push	{r7}
 800b172:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b174:	4b03      	ldr	r3, [pc, #12]	; (800b184 <LL_FLASH_GetSTCompanyID+0x14>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	0a1b      	lsrs	r3, r3, #8
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr
 800b184:	1fff7584 	.word	0x1fff7584

0800b188 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b188:	b5b0      	push	{r4, r5, r7, lr}
 800b18a:	b090      	sub	sp, #64	; 0x40
 800b18c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b18e:	2392      	movs	r3, #146	; 0x92
 800b190:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b194:	4b45      	ldr	r3, [pc, #276]	; (800b2ac <APP_BLE_Init+0x124>)
 800b196:	1d3c      	adds	r4, r7, #4
 800b198:	461d      	mov	r5, r3
 800b19a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b19c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b19e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b1a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b1aa:	c403      	stmia	r4!, {r0, r1}
 800b1ac:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b1ae:	f000 fb37 	bl	800b820 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b1b2:	2101      	movs	r1, #1
 800b1b4:	2002      	movs	r0, #2
 800b1b6:	f001 fdc5 	bl	800cd44 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b1ba:	4a3d      	ldr	r2, [pc, #244]	; (800b2b0 <APP_BLE_Init+0x128>)
 800b1bc:	2100      	movs	r1, #0
 800b1be:	2002      	movs	r0, #2
 800b1c0:	f001 feec 	bl	800cf9c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b1c4:	1d3b      	adds	r3, r7, #4
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fe fbe6 	bl	8009998 <SHCI_C2_BLE_Init>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800b1d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d012      	beq.n	800b200 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800b1da:	4836      	ldr	r0, [pc, #216]	; (800b2b4 <APP_BLE_Init+0x12c>)
 800b1dc:	f7ff f9ea 	bl	800a5b4 <DbgTraceGetFileName>
 800b1e0:	4601      	mov	r1, r0
 800b1e2:	f240 1347 	movw	r3, #327	; 0x147
 800b1e6:	4a34      	ldr	r2, [pc, #208]	; (800b2b8 <APP_BLE_Init+0x130>)
 800b1e8:	4834      	ldr	r0, [pc, #208]	; (800b2bc <APP_BLE_Init+0x134>)
 800b1ea:	f002 f8db 	bl	800d3a4 <iprintf>
 800b1ee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	4832      	ldr	r0, [pc, #200]	; (800b2c0 <APP_BLE_Init+0x138>)
 800b1f6:	f002 f8d5 	bl	800d3a4 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b1fa:	f7f7 fb21 	bl	8002840 <Error_Handler>
 800b1fe:	e00c      	b.n	800b21a <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800b200:	482c      	ldr	r0, [pc, #176]	; (800b2b4 <APP_BLE_Init+0x12c>)
 800b202:	f7ff f9d7 	bl	800a5b4 <DbgTraceGetFileName>
 800b206:	4601      	mov	r1, r0
 800b208:	f240 134d 	movw	r3, #333	; 0x14d
 800b20c:	4a2a      	ldr	r2, [pc, #168]	; (800b2b8 <APP_BLE_Init+0x130>)
 800b20e:	482b      	ldr	r0, [pc, #172]	; (800b2bc <APP_BLE_Init+0x134>)
 800b210:	f002 f8c8 	bl	800d3a4 <iprintf>
 800b214:	482b      	ldr	r0, [pc, #172]	; (800b2c4 <APP_BLE_Init+0x13c>)
 800b216:	f002 f8c5 	bl	800d3a4 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b21a:	f000 fb17 	bl	800b84c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b21e:	f7fe fb15 	bl	800984c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b222:	4b29      	ldr	r3, [pc, #164]	; (800b2c8 <APP_BLE_Init+0x140>)
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b22a:	4b27      	ldr	r3, [pc, #156]	; (800b2c8 <APP_BLE_Init+0x140>)
 800b22c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b230:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b232:	4a26      	ldr	r2, [pc, #152]	; (800b2cc <APP_BLE_Init+0x144>)
 800b234:	2100      	movs	r1, #0
 800b236:	2001      	movs	r0, #1
 800b238:	f001 feb0 	bl	800cf9c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b23c:	2006      	movs	r0, #6
 800b23e:	f7fe f979 	bl	8009534 <aci_hal_set_radio_activity_mask>
 800b242:	4603      	mov	r3, r0
 800b244:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800b248:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d010      	beq.n	800b272 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800b250:	4818      	ldr	r0, [pc, #96]	; (800b2b4 <APP_BLE_Init+0x12c>)
 800b252:	f7ff f9af 	bl	800a5b4 <DbgTraceGetFileName>
 800b256:	4601      	mov	r1, r0
 800b258:	f240 1371 	movw	r3, #369	; 0x171
 800b25c:	4a16      	ldr	r2, [pc, #88]	; (800b2b8 <APP_BLE_Init+0x130>)
 800b25e:	4817      	ldr	r0, [pc, #92]	; (800b2bc <APP_BLE_Init+0x134>)
 800b260:	f002 f8a0 	bl	800d3a4 <iprintf>
 800b264:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b268:	4619      	mov	r1, r3
 800b26a:	4819      	ldr	r0, [pc, #100]	; (800b2d0 <APP_BLE_Init+0x148>)
 800b26c:	f002 f89a 	bl	800d3a4 <iprintf>
 800b270:	e00c      	b.n	800b28c <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800b272:	4810      	ldr	r0, [pc, #64]	; (800b2b4 <APP_BLE_Init+0x12c>)
 800b274:	f7ff f99e 	bl	800a5b4 <DbgTraceGetFileName>
 800b278:	4601      	mov	r1, r0
 800b27a:	f240 1375 	movw	r3, #373	; 0x175
 800b27e:	4a0e      	ldr	r2, [pc, #56]	; (800b2b8 <APP_BLE_Init+0x130>)
 800b280:	480e      	ldr	r0, [pc, #56]	; (800b2bc <APP_BLE_Init+0x134>)
 800b282:	f002 f88f 	bl	800d3a4 <iprintf>
 800b286:	4813      	ldr	r0, [pc, #76]	; (800b2d4 <APP_BLE_Init+0x14c>)
 800b288:	f002 f88c 	bl	800d3a4 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b28c:	f000 ffb6 	bl	800c1fc <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b290:	4b0d      	ldr	r3, [pc, #52]	; (800b2c8 <APP_BLE_Init+0x140>)
 800b292:	2200      	movs	r2, #0
 800b294:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b296:	4b0c      	ldr	r3, [pc, #48]	; (800b2c8 <APP_BLE_Init+0x140>)
 800b298:	2200      	movs	r2, #0
 800b29a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b29c:	2001      	movs	r0, #1
 800b29e:	f000 fd69 	bl	800bd74 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b2a2:	bf00      	nop
}
 800b2a4:	3740      	adds	r7, #64	; 0x40
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bdb0      	pop	{r4, r5, r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	0800e6fc 	.word	0x0800e6fc
 800b2b0:	08009bb5 	.word	0x08009bb5
 800b2b4:	0800e5f0 	.word	0x0800e5f0
 800b2b8:	0800f928 	.word	0x0800f928
 800b2bc:	0800e60c 	.word	0x0800e60c
 800b2c0:	0800e620 	.word	0x0800e620
 800b2c4:	0800e658 	.word	0x0800e658
 800b2c8:	2000170c 	.word	0x2000170c
 800b2cc:	0800bef9 	.word	0x0800bef9
 800b2d0:	0800e680 	.word	0x0800e680
 800b2d4:	0800e6c4 	.word	0x0800e6c4

0800b2d8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b2d8:	b5b0      	push	{r4, r5, r7, lr}
 800b2da:	b08e      	sub	sp, #56	; 0x38
 800b2dc:	af04      	add	r7, sp, #16
 800b2de:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b2e0:	2392      	movs	r3, #146	; 0x92
 800b2e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	2bff      	cmp	r3, #255	; 0xff
 800b2f2:	f000 811d 	beq.w	800b530 <SVCCTL_App_Notification+0x258>
 800b2f6:	2bff      	cmp	r3, #255	; 0xff
 800b2f8:	f300 8269 	bgt.w	800b7ce <SVCCTL_App_Notification+0x4f6>
 800b2fc:	2b05      	cmp	r3, #5
 800b2fe:	d002      	beq.n	800b306 <SVCCTL_App_Notification+0x2e>
 800b300:	2b3e      	cmp	r3, #62	; 0x3e
 800b302:	d042      	beq.n	800b38a <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b304:	e263      	b.n	800b7ce <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b306:	6a3b      	ldr	r3, [r7, #32]
 800b308:	3302      	adds	r3, #2
 800b30a:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b312:	b29a      	uxth	r2, r3
 800b314:	4bb1      	ldr	r3, [pc, #708]	; (800b5dc <SVCCTL_App_Notification+0x304>)
 800b316:	8adb      	ldrh	r3, [r3, #22]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d128      	bne.n	800b36e <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b31c:	4baf      	ldr	r3, [pc, #700]	; (800b5dc <SVCCTL_App_Notification+0x304>)
 800b31e:	2200      	movs	r2, #0
 800b320:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b322:	4bae      	ldr	r3, [pc, #696]	; (800b5dc <SVCCTL_App_Notification+0x304>)
 800b324:	2200      	movs	r2, #0
 800b326:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800b32a:	48ad      	ldr	r0, [pc, #692]	; (800b5e0 <SVCCTL_App_Notification+0x308>)
 800b32c:	f7ff f942 	bl	800a5b4 <DbgTraceGetFileName>
 800b330:	4601      	mov	r1, r0
 800b332:	f240 13b9 	movw	r3, #441	; 0x1b9
 800b336:	4aab      	ldr	r2, [pc, #684]	; (800b5e4 <SVCCTL_App_Notification+0x30c>)
 800b338:	48ab      	ldr	r0, [pc, #684]	; (800b5e8 <SVCCTL_App_Notification+0x310>)
 800b33a:	f002 f833 	bl	800d3a4 <iprintf>
 800b33e:	48ab      	ldr	r0, [pc, #684]	; (800b5ec <SVCCTL_App_Notification+0x314>)
 800b340:	f002 f89e 	bl	800d480 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800b344:	48a6      	ldr	r0, [pc, #664]	; (800b5e0 <SVCCTL_App_Notification+0x308>)
 800b346:	f7ff f935 	bl	800a5b4 <DbgTraceGetFileName>
 800b34a:	4601      	mov	r1, r0
 800b34c:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 800b350:	4aa4      	ldr	r2, [pc, #656]	; (800b5e4 <SVCCTL_App_Notification+0x30c>)
 800b352:	48a5      	ldr	r0, [pc, #660]	; (800b5e8 <SVCCTL_App_Notification+0x310>)
 800b354:	f002 f826 	bl	800d3a4 <iprintf>
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	4619      	mov	r1, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	78db      	ldrb	r3, [r3, #3]
 800b366:	461a      	mov	r2, r3
 800b368:	48a1      	ldr	r0, [pc, #644]	; (800b5f0 <SVCCTL_App_Notification+0x318>)
 800b36a:	f002 f81b 	bl	800d3a4 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800b36e:	2001      	movs	r0, #1
 800b370:	f000 fd00 	bl	800bd74 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800b374:	4b9f      	ldr	r3, [pc, #636]	; (800b5f4 <SVCCTL_App_Notification+0x31c>)
 800b376:	2201      	movs	r2, #1
 800b378:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b37a:	4b98      	ldr	r3, [pc, #608]	; (800b5dc <SVCCTL_App_Notification+0x304>)
 800b37c:	8ada      	ldrh	r2, [r3, #22]
 800b37e:	4b9d      	ldr	r3, [pc, #628]	; (800b5f4 <SVCCTL_App_Notification+0x31c>)
 800b380:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800b382:	489c      	ldr	r0, [pc, #624]	; (800b5f4 <SVCCTL_App_Notification+0x31c>)
 800b384:	f000 ff26 	bl	800c1d4 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b388:	e224      	b.n	800b7d4 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	3302      	adds	r3, #2
 800b38e:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d042      	beq.n	800b41e <SVCCTL_App_Notification+0x146>
 800b398:	2b03      	cmp	r3, #3
 800b39a:	f040 80c7 	bne.w	800b52c <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800b3a4:	488e      	ldr	r0, [pc, #568]	; (800b5e0 <SVCCTL_App_Notification+0x308>)
 800b3a6:	f7ff f905 	bl	800a5b4 <DbgTraceGetFileName>
 800b3aa:	4601      	mov	r1, r0
 800b3ac:	f240 13e1 	movw	r3, #481	; 0x1e1
 800b3b0:	4a8c      	ldr	r2, [pc, #560]	; (800b5e4 <SVCCTL_App_Notification+0x30c>)
 800b3b2:	488d      	ldr	r0, [pc, #564]	; (800b5e8 <SVCCTL_App_Notification+0x310>)
 800b3b4:	f001 fff6 	bl	800d3a4 <iprintf>
 800b3b8:	488f      	ldr	r0, [pc, #572]	; (800b5f8 <SVCCTL_App_Notification+0x320>)
 800b3ba:	f002 f861 	bl	800d480 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800b3be:	4888      	ldr	r0, [pc, #544]	; (800b5e0 <SVCCTL_App_Notification+0x308>)
 800b3c0:	f7ff f8f8 	bl	800a5b4 <DbgTraceGetFileName>
 800b3c4:	4601      	mov	r1, r0
 800b3c6:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800b3ca:	4a86      	ldr	r2, [pc, #536]	; (800b5e4 <SVCCTL_App_Notification+0x30c>)
 800b3cc:	4886      	ldr	r0, [pc, #536]	; (800b5e8 <SVCCTL_App_Notification+0x310>)
 800b3ce:	f001 ffe9 	bl	800d3a4 <iprintf>
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7f5 f9a4 	bl	8000728 <__aeabi_i2d>
 800b3e0:	f04f 0200 	mov.w	r2, #0
 800b3e4:	4b85      	ldr	r3, [pc, #532]	; (800b5fc <SVCCTL_App_Notification+0x324>)
 800b3e6:	f7f4 ff23 	bl	8000230 <__aeabi_dmul>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	461c      	mov	r4, r3
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b402:	b29b      	uxth	r3, r3
 800b404:	461a      	mov	r2, r3
 800b406:	4613      	mov	r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	9301      	str	r3, [sp, #4]
 800b410:	9400      	str	r4, [sp, #0]
 800b412:	4602      	mov	r2, r0
 800b414:	460b      	mov	r3, r1
 800b416:	487a      	ldr	r0, [pc, #488]	; (800b600 <SVCCTL_App_Notification+0x328>)
 800b418:	f001 ffc4 	bl	800d3a4 <iprintf>
          break;
 800b41c:	e087      	b.n	800b52e <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	3301      	adds	r3, #1
 800b422:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800b424:	486e      	ldr	r0, [pc, #440]	; (800b5e0 <SVCCTL_App_Notification+0x308>)
 800b426:	f7ff f8c5 	bl	800a5b4 <DbgTraceGetFileName>
 800b42a:	4601      	mov	r1, r0
 800b42c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b430:	4a6c      	ldr	r2, [pc, #432]	; (800b5e4 <SVCCTL_App_Notification+0x30c>)
 800b432:	486d      	ldr	r0, [pc, #436]	; (800b5e8 <SVCCTL_App_Notification+0x310>)
 800b434:	f001 ffb6 	bl	800d3a4 <iprintf>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b43e:	b29b      	uxth	r3, r3
 800b440:	4619      	mov	r1, r3
 800b442:	4870      	ldr	r0, [pc, #448]	; (800b604 <SVCCTL_App_Notification+0x32c>)
 800b444:	f001 ffae 	bl	800d3a4 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800b448:	4865      	ldr	r0, [pc, #404]	; (800b5e0 <SVCCTL_App_Notification+0x308>)
 800b44a:	f7ff f8b3 	bl	800a5b4 <DbgTraceGetFileName>
 800b44e:	4601      	mov	r1, r0
 800b450:	f240 13f5 	movw	r3, #501	; 0x1f5
 800b454:	4a63      	ldr	r2, [pc, #396]	; (800b5e4 <SVCCTL_App_Notification+0x30c>)
 800b456:	4864      	ldr	r0, [pc, #400]	; (800b5e8 <SVCCTL_App_Notification+0x310>)
 800b458:	f001 ffa4 	bl	800d3a4 <iprintf>
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	7a9b      	ldrb	r3, [r3, #10]
 800b460:	4618      	mov	r0, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	7a5b      	ldrb	r3, [r3, #9]
 800b466:	461c      	mov	r4, r3
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	7a1b      	ldrb	r3, [r3, #8]
 800b46c:	461d      	mov	r5, r3
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	79db      	ldrb	r3, [r3, #7]
 800b472:	461a      	mov	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	799b      	ldrb	r3, [r3, #6]
 800b478:	4619      	mov	r1, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	795b      	ldrb	r3, [r3, #5]
 800b47e:	9302      	str	r3, [sp, #8]
 800b480:	9101      	str	r1, [sp, #4]
 800b482:	9200      	str	r2, [sp, #0]
 800b484:	462b      	mov	r3, r5
 800b486:	4622      	mov	r2, r4
 800b488:	4601      	mov	r1, r0
 800b48a:	485f      	ldr	r0, [pc, #380]	; (800b608 <SVCCTL_App_Notification+0x330>)
 800b48c:	f001 ff8a 	bl	800d3a4 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800b490:	4853      	ldr	r0, [pc, #332]	; (800b5e0 <SVCCTL_App_Notification+0x308>)
 800b492:	f7ff f88f 	bl	800a5b4 <DbgTraceGetFileName>
 800b496:	4601      	mov	r1, r0
 800b498:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800b49c:	4a51      	ldr	r2, [pc, #324]	; (800b5e4 <SVCCTL_App_Notification+0x30c>)
 800b49e:	4852      	ldr	r0, [pc, #328]	; (800b5e8 <SVCCTL_App_Notification+0x310>)
 800b4a0:	f001 ff80 	bl	800d3a4 <iprintf>
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7f5 f93b 	bl	8000728 <__aeabi_i2d>
 800b4b2:	f04f 0200 	mov.w	r2, #0
 800b4b6:	4b51      	ldr	r3, [pc, #324]	; (800b5fc <SVCCTL_App_Notification+0x324>)
 800b4b8:	f7f4 feba 	bl	8000230 <__aeabi_dmul>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	461c      	mov	r4, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	4613      	mov	r3, r2
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	005b      	lsls	r3, r3, #1
 800b4e0:	9301      	str	r3, [sp, #4]
 800b4e2:	9400      	str	r4, [sp, #0]
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4845      	ldr	r0, [pc, #276]	; (800b600 <SVCCTL_App_Notification+0x328>)
 800b4ea:	f001 ff5b 	bl	800d3a4 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b4ee:	4b3b      	ldr	r3, [pc, #236]	; (800b5dc <SVCCTL_App_Notification+0x304>)
 800b4f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	d104      	bne.n	800b502 <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b4f8:	4b38      	ldr	r3, [pc, #224]	; (800b5dc <SVCCTL_App_Notification+0x304>)
 800b4fa:	2206      	movs	r2, #6
 800b4fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800b500:	e003      	b.n	800b50a <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b502:	4b36      	ldr	r3, [pc, #216]	; (800b5dc <SVCCTL_App_Notification+0x304>)
 800b504:	2205      	movs	r2, #5
 800b506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b510:	b29a      	uxth	r2, r3
 800b512:	4b32      	ldr	r3, [pc, #200]	; (800b5dc <SVCCTL_App_Notification+0x304>)
 800b514:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800b516:	4b37      	ldr	r3, [pc, #220]	; (800b5f4 <SVCCTL_App_Notification+0x31c>)
 800b518:	2200      	movs	r2, #0
 800b51a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b51c:	4b2f      	ldr	r3, [pc, #188]	; (800b5dc <SVCCTL_App_Notification+0x304>)
 800b51e:	8ada      	ldrh	r2, [r3, #22]
 800b520:	4b34      	ldr	r3, [pc, #208]	; (800b5f4 <SVCCTL_App_Notification+0x31c>)
 800b522:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800b524:	4833      	ldr	r0, [pc, #204]	; (800b5f4 <SVCCTL_App_Notification+0x31c>)
 800b526:	f000 fe55 	bl	800c1d4 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800b52a:	e000      	b.n	800b52e <SVCCTL_App_Notification+0x256>
          break;
 800b52c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b52e:	e151      	b.n	800b7d4 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	3302      	adds	r3, #2
 800b534:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	881b      	ldrh	r3, [r3, #0]
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b540:	f000 8141 	beq.w	800b7c6 <SVCCTL_App_Notification+0x4ee>
 800b544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b548:	f300 8143 	bgt.w	800b7d2 <SVCCTL_App_Notification+0x4fa>
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	f000 813c 	beq.w	800b7ca <SVCCTL_App_Notification+0x4f2>
 800b552:	2b04      	cmp	r3, #4
 800b554:	f2c0 813d 	blt.w	800b7d2 <SVCCTL_App_Notification+0x4fa>
 800b558:	f240 420a 	movw	r2, #1034	; 0x40a
 800b55c:	4293      	cmp	r3, r2
 800b55e:	f300 8138 	bgt.w	800b7d2 <SVCCTL_App_Notification+0x4fa>
 800b562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b566:	f340 8134 	ble.w	800b7d2 <SVCCTL_App_Notification+0x4fa>
 800b56a:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800b56e:	2b09      	cmp	r3, #9
 800b570:	f200 812f 	bhi.w	800b7d2 <SVCCTL_App_Notification+0x4fa>
 800b574:	a201      	add	r2, pc, #4	; (adr r2, 800b57c <SVCCTL_App_Notification+0x2a4>)
 800b576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57a:	bf00      	nop
 800b57c:	0800b741 	.word	0x0800b741
 800b580:	0800b615 	.word	0x0800b615
 800b584:	0800b7d3 	.word	0x0800b7d3
 800b588:	0800b7d3 	.word	0x0800b7d3
 800b58c:	0800b7d3 	.word	0x0800b7d3
 800b590:	0800b7d3 	.word	0x0800b7d3
 800b594:	0800b5a5 	.word	0x0800b5a5
 800b598:	0800b7d3 	.word	0x0800b7d3
 800b59c:	0800b687 	.word	0x0800b687
 800b5a0:	0800b5c1 	.word	0x0800b5c1
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800b5a4:	480e      	ldr	r0, [pc, #56]	; (800b5e0 <SVCCTL_App_Notification+0x308>)
 800b5a6:	f7ff f805 	bl	800a5b4 <DbgTraceGetFileName>
 800b5aa:	4601      	mov	r1, r0
 800b5ac:	f240 233e 	movw	r3, #574	; 0x23e
 800b5b0:	4a0c      	ldr	r2, [pc, #48]	; (800b5e4 <SVCCTL_App_Notification+0x30c>)
 800b5b2:	480d      	ldr	r0, [pc, #52]	; (800b5e8 <SVCCTL_App_Notification+0x310>)
 800b5b4:	f001 fef6 	bl	800d3a4 <iprintf>
 800b5b8:	4814      	ldr	r0, [pc, #80]	; (800b60c <SVCCTL_App_Notification+0x334>)
 800b5ba:	f001 fef3 	bl	800d3a4 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b5be:	e105      	b.n	800b7cc <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800b5c0:	4807      	ldr	r0, [pc, #28]	; (800b5e0 <SVCCTL_App_Notification+0x308>)
 800b5c2:	f7fe fff7 	bl	800a5b4 <DbgTraceGetFileName>
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	f240 234e 	movw	r3, #590	; 0x24e
 800b5cc:	4a05      	ldr	r2, [pc, #20]	; (800b5e4 <SVCCTL_App_Notification+0x30c>)
 800b5ce:	4806      	ldr	r0, [pc, #24]	; (800b5e8 <SVCCTL_App_Notification+0x310>)
 800b5d0:	f001 fee8 	bl	800d3a4 <iprintf>
 800b5d4:	480e      	ldr	r0, [pc, #56]	; (800b610 <SVCCTL_App_Notification+0x338>)
 800b5d6:	f001 ff53 	bl	800d480 <puts>
          break;
 800b5da:	e0f7      	b.n	800b7cc <SVCCTL_App_Notification+0x4f4>
 800b5dc:	2000170c 	.word	0x2000170c
 800b5e0:	0800e5f0 	.word	0x0800e5f0
 800b5e4:	0800f938 	.word	0x0800f938
 800b5e8:	0800e60c 	.word	0x0800e60c
 800b5ec:	0800e738 	.word	0x0800e738
 800b5f0:	0800e764 	.word	0x0800e764
 800b5f4:	20001790 	.word	0x20001790
 800b5f8:	0800e7a0 	.word	0x0800e7a0
 800b5fc:	3ff40000 	.word	0x3ff40000
 800b600:	0800e7d4 	.word	0x0800e7d4
 800b604:	0800e840 	.word	0x0800e840
 800b608:	0800e888 	.word	0x0800e888
 800b60c:	0800e8d8 	.word	0x0800e8d8
 800b610:	0800e900 	.word	0x0800e900
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800b614:	4872      	ldr	r0, [pc, #456]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b616:	f7fe ffcd 	bl	800a5b4 <DbgTraceGetFileName>
 800b61a:	4601      	mov	r1, r0
 800b61c:	f240 2355 	movw	r3, #597	; 0x255
 800b620:	4a70      	ldr	r2, [pc, #448]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b622:	4871      	ldr	r0, [pc, #452]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b624:	f001 febe 	bl	800d3a4 <iprintf>
 800b628:	4870      	ldr	r0, [pc, #448]	; (800b7ec <SVCCTL_App_Notification+0x514>)
 800b62a:	f001 ff29 	bl	800d480 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800b62e:	4b70      	ldr	r3, [pc, #448]	; (800b7f0 <SVCCTL_App_Notification+0x518>)
 800b630:	8adb      	ldrh	r3, [r3, #22]
 800b632:	4970      	ldr	r1, [pc, #448]	; (800b7f4 <SVCCTL_App_Notification+0x51c>)
 800b634:	4618      	mov	r0, r3
 800b636:	f7fd f9d4 	bl	80089e2 <aci_gap_pass_key_resp>
 800b63a:	4603      	mov	r3, r0
 800b63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800b640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b644:	2b00      	cmp	r3, #0
 800b646:	d010      	beq.n	800b66a <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800b648:	4865      	ldr	r0, [pc, #404]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b64a:	f7fe ffb3 	bl	800a5b4 <DbgTraceGetFileName>
 800b64e:	4601      	mov	r1, r0
 800b650:	f240 235a 	movw	r3, #602	; 0x25a
 800b654:	4a63      	ldr	r2, [pc, #396]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b656:	4864      	ldr	r0, [pc, #400]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b658:	f001 fea4 	bl	800d3a4 <iprintf>
 800b65c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b660:	4619      	mov	r1, r3
 800b662:	4865      	ldr	r0, [pc, #404]	; (800b7f8 <SVCCTL_App_Notification+0x520>)
 800b664:	f001 fe9e 	bl	800d3a4 <iprintf>
          break;
 800b668:	e0b0      	b.n	800b7cc <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800b66a:	485d      	ldr	r0, [pc, #372]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b66c:	f7fe ffa2 	bl	800a5b4 <DbgTraceGetFileName>
 800b670:	4601      	mov	r1, r0
 800b672:	f240 235e 	movw	r3, #606	; 0x25e
 800b676:	4a5b      	ldr	r2, [pc, #364]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b678:	485b      	ldr	r0, [pc, #364]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b67a:	f001 fe93 	bl	800d3a4 <iprintf>
 800b67e:	485f      	ldr	r0, [pc, #380]	; (800b7fc <SVCCTL_App_Notification+0x524>)
 800b680:	f001 fefe 	bl	800d480 <puts>
          break;
 800b684:	e0a2      	b.n	800b7cc <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800b686:	4856      	ldr	r0, [pc, #344]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b688:	f7fe ff94 	bl	800a5b4 <DbgTraceGetFileName>
 800b68c:	4601      	mov	r1, r0
 800b68e:	f240 2366 	movw	r3, #614	; 0x266
 800b692:	4a54      	ldr	r2, [pc, #336]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b694:	4854      	ldr	r0, [pc, #336]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b696:	f001 fe85 	bl	800d3a4 <iprintf>
 800b69a:	4859      	ldr	r0, [pc, #356]	; (800b800 <SVCCTL_App_Notification+0x528>)
 800b69c:	f001 fef0 	bl	800d480 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800b6a0:	484f      	ldr	r0, [pc, #316]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b6a2:	f7fe ff87 	bl	800a5b4 <DbgTraceGetFileName>
 800b6a6:	4601      	mov	r1, r0
 800b6a8:	f240 2367 	movw	r3, #615	; 0x267
 800b6ac:	4a4d      	ldr	r2, [pc, #308]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b6ae:	484e      	ldr	r0, [pc, #312]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b6b0:	f001 fe78 	bl	800d3a4 <iprintf>
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	3302      	adds	r3, #2
 800b6b8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4851      	ldr	r0, [pc, #324]	; (800b804 <SVCCTL_App_Notification+0x52c>)
 800b6c0:	f001 fe70 	bl	800d3a4 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800b6c4:	4846      	ldr	r0, [pc, #280]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b6c6:	f7fe ff75 	bl	800a5b4 <DbgTraceGetFileName>
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	f240 2369 	movw	r3, #617	; 0x269
 800b6d0:	4a44      	ldr	r2, [pc, #272]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b6d2:	4845      	ldr	r0, [pc, #276]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b6d4:	f001 fe66 	bl	800d3a4 <iprintf>
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	3302      	adds	r3, #2
 800b6dc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4849      	ldr	r0, [pc, #292]	; (800b808 <SVCCTL_App_Notification+0x530>)
 800b6e4:	f001 fe5e 	bl	800d3a4 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800b6e8:	4b41      	ldr	r3, [pc, #260]	; (800b7f0 <SVCCTL_App_Notification+0x518>)
 800b6ea:	8adb      	ldrh	r3, [r3, #22]
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fd fb21 	bl	8008d36 <aci_gap_numeric_comparison_value_confirm_yesno>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800b6fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d010      	beq.n	800b724 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800b702:	4837      	ldr	r0, [pc, #220]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b704:	f7fe ff56 	bl	800a5b4 <DbgTraceGetFileName>
 800b708:	4601      	mov	r1, r0
 800b70a:	f240 236e 	movw	r3, #622	; 0x26e
 800b70e:	4a35      	ldr	r2, [pc, #212]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b710:	4835      	ldr	r0, [pc, #212]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b712:	f001 fe47 	bl	800d3a4 <iprintf>
 800b716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b71a:	4619      	mov	r1, r3
 800b71c:	483b      	ldr	r0, [pc, #236]	; (800b80c <SVCCTL_App_Notification+0x534>)
 800b71e:	f001 fe41 	bl	800d3a4 <iprintf>
          break;
 800b722:	e053      	b.n	800b7cc <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800b724:	482e      	ldr	r0, [pc, #184]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b726:	f7fe ff45 	bl	800a5b4 <DbgTraceGetFileName>
 800b72a:	4601      	mov	r1, r0
 800b72c:	f240 2372 	movw	r3, #626	; 0x272
 800b730:	4a2c      	ldr	r2, [pc, #176]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b732:	482d      	ldr	r0, [pc, #180]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b734:	f001 fe36 	bl	800d3a4 <iprintf>
 800b738:	4835      	ldr	r0, [pc, #212]	; (800b810 <SVCCTL_App_Notification+0x538>)
 800b73a:	f001 fea1 	bl	800d480 <puts>
          break;
 800b73e:	e045      	b.n	800b7cc <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	3302      	adds	r3, #2
 800b744:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800b746:	4826      	ldr	r0, [pc, #152]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b748:	f7fe ff34 	bl	800a5b4 <DbgTraceGetFileName>
 800b74c:	4601      	mov	r1, r0
 800b74e:	f44f 731f 	mov.w	r3, #636	; 0x27c
 800b752:	4a24      	ldr	r2, [pc, #144]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b754:	4824      	ldr	r0, [pc, #144]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b756:	f001 fe25 	bl	800d3a4 <iprintf>
 800b75a:	482e      	ldr	r0, [pc, #184]	; (800b814 <SVCCTL_App_Notification+0x53c>)
 800b75c:	f001 fe90 	bl	800d480 <puts>
          if (p_pairing_complete->Status != 0)
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	789b      	ldrb	r3, [r3, #2]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d013      	beq.n	800b790 <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800b768:	481d      	ldr	r0, [pc, #116]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b76a:	f7fe ff23 	bl	800a5b4 <DbgTraceGetFileName>
 800b76e:	4601      	mov	r1, r0
 800b770:	f240 237f 	movw	r3, #639	; 0x27f
 800b774:	4a1b      	ldr	r2, [pc, #108]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b776:	481c      	ldr	r0, [pc, #112]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b778:	f001 fe14 	bl	800d3a4 <iprintf>
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	789b      	ldrb	r3, [r3, #2]
 800b780:	4619      	mov	r1, r3
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	78db      	ldrb	r3, [r3, #3]
 800b786:	461a      	mov	r2, r3
 800b788:	4823      	ldr	r0, [pc, #140]	; (800b818 <SVCCTL_App_Notification+0x540>)
 800b78a:	f001 fe0b 	bl	800d3a4 <iprintf>
 800b78e:	e00c      	b.n	800b7aa <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800b790:	4813      	ldr	r0, [pc, #76]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b792:	f7fe ff0f 	bl	800a5b4 <DbgTraceGetFileName>
 800b796:	4601      	mov	r1, r0
 800b798:	f240 2383 	movw	r3, #643	; 0x283
 800b79c:	4a11      	ldr	r2, [pc, #68]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b79e:	4812      	ldr	r0, [pc, #72]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b7a0:	f001 fe00 	bl	800d3a4 <iprintf>
 800b7a4:	481d      	ldr	r0, [pc, #116]	; (800b81c <SVCCTL_App_Notification+0x544>)
 800b7a6:	f001 fe6b 	bl	800d480 <puts>
          APP_DBG_MSG("\n");
 800b7aa:	480d      	ldr	r0, [pc, #52]	; (800b7e0 <SVCCTL_App_Notification+0x508>)
 800b7ac:	f7fe ff02 	bl	800a5b4 <DbgTraceGetFileName>
 800b7b0:	4601      	mov	r1, r0
 800b7b2:	f240 2385 	movw	r3, #645	; 0x285
 800b7b6:	4a0b      	ldr	r2, [pc, #44]	; (800b7e4 <SVCCTL_App_Notification+0x50c>)
 800b7b8:	480b      	ldr	r0, [pc, #44]	; (800b7e8 <SVCCTL_App_Notification+0x510>)
 800b7ba:	f001 fdf3 	bl	800d3a4 <iprintf>
 800b7be:	200a      	movs	r0, #10
 800b7c0:	f001 fe02 	bl	800d3c8 <putchar>
          break;
 800b7c4:	e002      	b.n	800b7cc <SVCCTL_App_Notification+0x4f4>
          break;
 800b7c6:	bf00      	nop
 800b7c8:	e003      	b.n	800b7d2 <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b7ca:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b7cc:	e001      	b.n	800b7d2 <SVCCTL_App_Notification+0x4fa>
      break;
 800b7ce:	bf00      	nop
 800b7d0:	e000      	b.n	800b7d4 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b7d2:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b7d4:	2301      	movs	r3, #1
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3728      	adds	r7, #40	; 0x28
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bdb0      	pop	{r4, r5, r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	0800e5f0 	.word	0x0800e5f0
 800b7e4:	0800f938 	.word	0x0800f938
 800b7e8:	0800e60c 	.word	0x0800e60c
 800b7ec:	0800e930 	.word	0x0800e930
 800b7f0:	2000170c 	.word	0x2000170c
 800b7f4:	0001b207 	.word	0x0001b207
 800b7f8:	0800e958 	.word	0x0800e958
 800b7fc:	0800e98c 	.word	0x0800e98c
 800b800:	0800e9b4 	.word	0x0800e9b4
 800b804:	0800e9e8 	.word	0x0800e9e8
 800b808:	0800ea04 	.word	0x0800ea04
 800b80c:	0800ea1c 	.word	0x0800ea1c
 800b810:	0800ea6c 	.word	0x0800ea6c
 800b814:	0800eab4 	.word	0x0800eab4
 800b818:	0800eae0 	.word	0x0800eae0
 800b81c:	0800eb1c 	.word	0x0800eb1c

0800b820 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b826:	4b06      	ldr	r3, [pc, #24]	; (800b840 <Ble_Tl_Init+0x20>)
 800b828:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b82a:	4b06      	ldr	r3, [pc, #24]	; (800b844 <Ble_Tl_Init+0x24>)
 800b82c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b82e:	463b      	mov	r3, r7
 800b830:	4619      	mov	r1, r3
 800b832:	4805      	ldr	r0, [pc, #20]	; (800b848 <Ble_Tl_Init+0x28>)
 800b834:	f7fe f9a2 	bl	8009b7c <hci_init>

  return;
 800b838:	bf00      	nop
}
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	200300d8 	.word	0x200300d8
 800b844:	0800c039 	.word	0x0800c039
 800b848:	0800c001 	.word	0x0800c001

0800b84c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b84e:	b08d      	sub	sp, #52	; 0x34
 800b850:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b852:	2300      	movs	r3, #0
 800b854:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b856:	2392      	movs	r3, #146	; 0x92
 800b858:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800b85a:	48a3      	ldr	r0, [pc, #652]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b85c:	f7fe feaa 	bl	800a5b4 <DbgTraceGetFileName>
 800b860:	4601      	mov	r1, r0
 800b862:	f240 23c5 	movw	r3, #709	; 0x2c5
 800b866:	4aa1      	ldr	r2, [pc, #644]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b868:	48a1      	ldr	r0, [pc, #644]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b86a:	f001 fd9b 	bl	800d3a4 <iprintf>
 800b86e:	48a1      	ldr	r0, [pc, #644]	; (800baf4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800b870:	f001 fe06 	bl	800d480 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b874:	f7fd feb2 	bl	80095dc <hci_reset>
 800b878:	4603      	mov	r3, r0
 800b87a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b87c:	7dfb      	ldrb	r3, [r7, #23]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00f      	beq.n	800b8a2 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800b882:	4899      	ldr	r0, [pc, #612]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b884:	f7fe fe96 	bl	800a5b4 <DbgTraceGetFileName>
 800b888:	4601      	mov	r1, r0
 800b88a:	f240 23ce 	movw	r3, #718	; 0x2ce
 800b88e:	4a97      	ldr	r2, [pc, #604]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b890:	4897      	ldr	r0, [pc, #604]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b892:	f001 fd87 	bl	800d3a4 <iprintf>
 800b896:	7dfb      	ldrb	r3, [r7, #23]
 800b898:	4619      	mov	r1, r3
 800b89a:	4897      	ldr	r0, [pc, #604]	; (800baf8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800b89c:	f001 fd82 	bl	800d3a4 <iprintf>
 800b8a0:	e00c      	b.n	800b8bc <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800b8a2:	4891      	ldr	r0, [pc, #580]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b8a4:	f7fe fe86 	bl	800a5b4 <DbgTraceGetFileName>
 800b8a8:	4601      	mov	r1, r0
 800b8aa:	f240 23d2 	movw	r3, #722	; 0x2d2
 800b8ae:	4a8f      	ldr	r2, [pc, #572]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b8b0:	488f      	ldr	r0, [pc, #572]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b8b2:	f001 fd77 	bl	800d3a4 <iprintf>
 800b8b6:	4891      	ldr	r0, [pc, #580]	; (800bafc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800b8b8:	f001 fde2 	bl	800d480 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b8bc:	f000 fad8 	bl	800be70 <BleGetBdAddress>
 800b8c0:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	2106      	movs	r1, #6
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	f7fd fd48 	bl	800935c <aci_hal_write_config_data>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b8d0:	7dfb      	ldrb	r3, [r7, #23]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00f      	beq.n	800b8f6 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800b8d6:	4884      	ldr	r0, [pc, #528]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b8d8:	f7fe fe6c 	bl	800a5b4 <DbgTraceGetFileName>
 800b8dc:	4601      	mov	r1, r0
 800b8de:	f44f 7337 	mov.w	r3, #732	; 0x2dc
 800b8e2:	4a82      	ldr	r2, [pc, #520]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b8e4:	4882      	ldr	r0, [pc, #520]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b8e6:	f001 fd5d 	bl	800d3a4 <iprintf>
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4884      	ldr	r0, [pc, #528]	; (800bb00 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800b8f0:	f001 fd58 	bl	800d3a4 <iprintf>
 800b8f4:	e035      	b.n	800b962 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800b8f6:	487c      	ldr	r0, [pc, #496]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b8f8:	f7fe fe5c 	bl	800a5b4 <DbgTraceGetFileName>
 800b8fc:	4601      	mov	r1, r0
 800b8fe:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 800b902:	4a7a      	ldr	r2, [pc, #488]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b904:	487a      	ldr	r0, [pc, #488]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b906:	f001 fd4d 	bl	800d3a4 <iprintf>
 800b90a:	487e      	ldr	r0, [pc, #504]	; (800bb04 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800b90c:	f001 fdb8 	bl	800d480 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800b910:	4875      	ldr	r0, [pc, #468]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b912:	f7fe fe4f 	bl	800a5b4 <DbgTraceGetFileName>
 800b916:	4601      	mov	r1, r0
 800b918:	f240 23e1 	movw	r3, #737	; 0x2e1
 800b91c:	4a73      	ldr	r2, [pc, #460]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b91e:	4874      	ldr	r0, [pc, #464]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b920:	f001 fd40 	bl	800d3a4 <iprintf>
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	3305      	adds	r3, #5
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	4618      	mov	r0, r3
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	3304      	adds	r3, #4
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	461c      	mov	r4, r3
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	3303      	adds	r3, #3
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	461d      	mov	r5, r3
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	3302      	adds	r3, #2
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	3301      	adds	r3, #1
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	4619      	mov	r1, r3
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	9302      	str	r3, [sp, #8]
 800b952:	9101      	str	r1, [sp, #4]
 800b954:	9200      	str	r2, [sp, #0]
 800b956:	462b      	mov	r3, r5
 800b958:	4622      	mov	r2, r4
 800b95a:	4601      	mov	r1, r0
 800b95c:	486a      	ldr	r0, [pc, #424]	; (800bb08 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800b95e:	f001 fd21 	bl	800d3a4 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b962:	4a6a      	ldr	r2, [pc, #424]	; (800bb0c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800b964:	2110      	movs	r1, #16
 800b966:	2018      	movs	r0, #24
 800b968:	f7fd fcf8 	bl	800935c <aci_hal_write_config_data>
 800b96c:	4603      	mov	r3, r0
 800b96e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b970:	7dfb      	ldrb	r3, [r7, #23]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00f      	beq.n	800b996 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800b976:	485c      	ldr	r0, [pc, #368]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b978:	f7fe fe1c 	bl	800a5b4 <DbgTraceGetFileName>
 800b97c:	4601      	mov	r1, r0
 800b97e:	f240 332b 	movw	r3, #811	; 0x32b
 800b982:	4a5a      	ldr	r2, [pc, #360]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b984:	485a      	ldr	r0, [pc, #360]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b986:	f001 fd0d 	bl	800d3a4 <iprintf>
 800b98a:	7dfb      	ldrb	r3, [r7, #23]
 800b98c:	4619      	mov	r1, r3
 800b98e:	4860      	ldr	r0, [pc, #384]	; (800bb10 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800b990:	f001 fd08 	bl	800d3a4 <iprintf>
 800b994:	e00c      	b.n	800b9b0 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800b996:	4854      	ldr	r0, [pc, #336]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b998:	f7fe fe0c 	bl	800a5b4 <DbgTraceGetFileName>
 800b99c:	4601      	mov	r1, r0
 800b99e:	f240 332f 	movw	r3, #815	; 0x32f
 800b9a2:	4a52      	ldr	r2, [pc, #328]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b9a4:	4852      	ldr	r0, [pc, #328]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b9a6:	f001 fcfd 	bl	800d3a4 <iprintf>
 800b9aa:	485a      	ldr	r0, [pc, #360]	; (800bb14 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800b9ac:	f001 fd68 	bl	800d480 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b9b0:	4a59      	ldr	r2, [pc, #356]	; (800bb18 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b9b2:	2110      	movs	r1, #16
 800b9b4:	2008      	movs	r0, #8
 800b9b6:	f7fd fcd1 	bl	800935c <aci_hal_write_config_data>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d00f      	beq.n	800b9e4 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800b9c4:	4848      	ldr	r0, [pc, #288]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b9c6:	f7fe fdf5 	bl	800a5b4 <DbgTraceGetFileName>
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	f44f 734e 	mov.w	r3, #824	; 0x338
 800b9d0:	4a46      	ldr	r2, [pc, #280]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b9d2:	4847      	ldr	r0, [pc, #284]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b9d4:	f001 fce6 	bl	800d3a4 <iprintf>
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	484f      	ldr	r0, [pc, #316]	; (800bb1c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800b9de:	f001 fce1 	bl	800d3a4 <iprintf>
 800b9e2:	e00c      	b.n	800b9fe <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800b9e4:	4840      	ldr	r0, [pc, #256]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b9e6:	f7fe fde5 	bl	800a5b4 <DbgTraceGetFileName>
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	f44f 734f 	mov.w	r3, #828	; 0x33c
 800b9f0:	4a3e      	ldr	r2, [pc, #248]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b9f2:	483f      	ldr	r0, [pc, #252]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b9f4:	f001 fcd6 	bl	800d3a4 <iprintf>
 800b9f8:	4849      	ldr	r0, [pc, #292]	; (800bb20 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800b9fa:	f001 fd41 	bl	800d480 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b9fe:	2118      	movs	r1, #24
 800ba00:	2001      	movs	r0, #1
 800ba02:	f7fd fd30 	bl	8009466 <aci_hal_set_tx_power_level>
 800ba06:	4603      	mov	r3, r0
 800ba08:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00f      	beq.n	800ba30 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800ba10:	4835      	ldr	r0, [pc, #212]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ba12:	f7fe fdcf 	bl	800a5b4 <DbgTraceGetFileName>
 800ba16:	4601      	mov	r1, r0
 800ba18:	f240 3345 	movw	r3, #837	; 0x345
 800ba1c:	4a33      	ldr	r2, [pc, #204]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ba1e:	4834      	ldr	r0, [pc, #208]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ba20:	f001 fcc0 	bl	800d3a4 <iprintf>
 800ba24:	7dfb      	ldrb	r3, [r7, #23]
 800ba26:	4619      	mov	r1, r3
 800ba28:	483e      	ldr	r0, [pc, #248]	; (800bb24 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800ba2a:	f001 fcbb 	bl	800d3a4 <iprintf>
 800ba2e:	e00c      	b.n	800ba4a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800ba30:	482d      	ldr	r0, [pc, #180]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ba32:	f7fe fdbf 	bl	800a5b4 <DbgTraceGetFileName>
 800ba36:	4601      	mov	r1, r0
 800ba38:	f240 3349 	movw	r3, #841	; 0x349
 800ba3c:	4a2b      	ldr	r2, [pc, #172]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ba3e:	482c      	ldr	r0, [pc, #176]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ba40:	f001 fcb0 	bl	800d3a4 <iprintf>
 800ba44:	4838      	ldr	r0, [pc, #224]	; (800bb28 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800ba46:	f001 fd1b 	bl	800d480 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800ba4a:	f7fd f9db 	bl	8008e04 <aci_gatt_init>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ba52:	7dfb      	ldrb	r3, [r7, #23]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00f      	beq.n	800ba78 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800ba58:	4823      	ldr	r0, [pc, #140]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ba5a:	f7fe fdab 	bl	800a5b4 <DbgTraceGetFileName>
 800ba5e:	4601      	mov	r1, r0
 800ba60:	f240 3352 	movw	r3, #850	; 0x352
 800ba64:	4a21      	ldr	r2, [pc, #132]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ba66:	4822      	ldr	r0, [pc, #136]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ba68:	f001 fc9c 	bl	800d3a4 <iprintf>
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	4619      	mov	r1, r3
 800ba70:	482e      	ldr	r0, [pc, #184]	; (800bb2c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800ba72:	f001 fc97 	bl	800d3a4 <iprintf>
 800ba76:	e00c      	b.n	800ba92 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800ba78:	481b      	ldr	r0, [pc, #108]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ba7a:	f7fe fd9b 	bl	800a5b4 <DbgTraceGetFileName>
 800ba7e:	4601      	mov	r1, r0
 800ba80:	f240 3356 	movw	r3, #854	; 0x356
 800ba84:	4a19      	ldr	r2, [pc, #100]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ba86:	481a      	ldr	r0, [pc, #104]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ba88:	f001 fc8c 	bl	800d3a4 <iprintf>
 800ba8c:	4828      	ldr	r0, [pc, #160]	; (800bb30 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800ba8e:	f001 fcf7 	bl	800d480 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ba92:	2300      	movs	r3, #0
 800ba94:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	f043 0301 	orr.w	r3, r3, #1
 800ba9c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d069      	beq.n	800bb78 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800baa4:	4b23      	ldr	r3, [pc, #140]	; (800bb34 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800baa6:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800baa8:	1dba      	adds	r2, r7, #6
 800baaa:	7bf8      	ldrb	r0, [r7, #15]
 800baac:	1cbb      	adds	r3, r7, #2
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	1d3b      	adds	r3, r7, #4
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	4613      	mov	r3, r2
 800bab6:	2209      	movs	r2, #9
 800bab8:	2100      	movs	r1, #0
 800baba:	f7fc fff9 	bl	8008ab0 <aci_gap_init>
 800babe:	4603      	mov	r3, r0
 800bac0:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800bac2:	7dfb      	ldrb	r3, [r7, #23]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d039      	beq.n	800bb3c <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800bac8:	4807      	ldr	r0, [pc, #28]	; (800bae8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800baca:	f7fe fd73 	bl	800a5b4 <DbgTraceGetFileName>
 800bace:	4601      	mov	r1, r0
 800bad0:	f240 3376 	movw	r3, #886	; 0x376
 800bad4:	4a05      	ldr	r2, [pc, #20]	; (800baec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bad6:	4806      	ldr	r0, [pc, #24]	; (800baf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bad8:	f001 fc64 	bl	800d3a4 <iprintf>
 800badc:	7dfb      	ldrb	r3, [r7, #23]
 800bade:	4619      	mov	r1, r3
 800bae0:	4815      	ldr	r0, [pc, #84]	; (800bb38 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800bae2:	f001 fc5f 	bl	800d3a4 <iprintf>
 800bae6:	e036      	b.n	800bb56 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800bae8:	0800e5f0 	.word	0x0800e5f0
 800baec:	0800f950 	.word	0x0800f950
 800baf0:	0800e60c 	.word	0x0800e60c
 800baf4:	0800eb34 	.word	0x0800eb34
 800baf8:	0800eb60 	.word	0x0800eb60
 800bafc:	0800eb90 	.word	0x0800eb90
 800bb00:	0800ebb0 	.word	0x0800ebb0
 800bb04:	0800ec0c 	.word	0x0800ec0c
 800bb08:	0800ec58 	.word	0x0800ec58
 800bb0c:	0800f908 	.word	0x0800f908
 800bb10:	0800ec94 	.word	0x0800ec94
 800bb14:	0800ecec 	.word	0x0800ecec
 800bb18:	0800f918 	.word	0x0800f918
 800bb1c:	0800ed34 	.word	0x0800ed34
 800bb20:	0800ed8c 	.word	0x0800ed8c
 800bb24:	0800edd4 	.word	0x0800edd4
 800bb28:	0800ee14 	.word	0x0800ee14
 800bb2c:	0800ee44 	.word	0x0800ee44
 800bb30:	0800ee78 	.word	0x0800ee78
 800bb34:	0800ee9c 	.word	0x0800ee9c
 800bb38:	0800eea8 	.word	0x0800eea8
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800bb3c:	487e      	ldr	r0, [pc, #504]	; (800bd38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bb3e:	f7fe fd39 	bl	800a5b4 <DbgTraceGetFileName>
 800bb42:	4601      	mov	r1, r0
 800bb44:	f240 337a 	movw	r3, #890	; 0x37a
 800bb48:	4a7c      	ldr	r2, [pc, #496]	; (800bd3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bb4a:	487d      	ldr	r0, [pc, #500]	; (800bd40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bb4c:	f001 fc2a 	bl	800d3a4 <iprintf>
 800bb50:	487c      	ldr	r0, [pc, #496]	; (800bd44 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800bb52:	f001 fc95 	bl	800d480 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800bb56:	88fc      	ldrh	r4, [r7, #6]
 800bb58:	88bd      	ldrh	r5, [r7, #4]
 800bb5a:	68b8      	ldr	r0, [r7, #8]
 800bb5c:	f7f4 fb10 	bl	8000180 <strlen>
 800bb60:	4603      	mov	r3, r0
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	4613      	mov	r3, r2
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f7fd fb4b 	bl	800920a <aci_gatt_update_char_value>
 800bb74:	4603      	mov	r3, r0
 800bb76:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800bb78:	88f8      	ldrh	r0, [r7, #6]
 800bb7a:	8879      	ldrh	r1, [r7, #2]
 800bb7c:	463b      	mov	r3, r7
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	2302      	movs	r3, #2
 800bb82:	2200      	movs	r2, #0
 800bb84:	f7fd fb41 	bl	800920a <aci_gatt_update_char_value>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800bb8c:	2202      	movs	r2, #2
 800bb8e:	2102      	movs	r1, #2
 800bb90:	2000      	movs	r0, #0
 800bb92:	f7fd fd47 	bl	8009624 <hci_le_set_default_phy>
 800bb96:	4603      	mov	r3, r0
 800bb98:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bb9a:	7dfb      	ldrb	r3, [r7, #23]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00f      	beq.n	800bbc0 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800bba0:	4865      	ldr	r0, [pc, #404]	; (800bd38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bba2:	f7fe fd07 	bl	800a5b4 <DbgTraceGetFileName>
 800bba6:	4601      	mov	r1, r0
 800bba8:	f44f 7367 	mov.w	r3, #924	; 0x39c
 800bbac:	4a63      	ldr	r2, [pc, #396]	; (800bd3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bbae:	4864      	ldr	r0, [pc, #400]	; (800bd40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bbb0:	f001 fbf8 	bl	800d3a4 <iprintf>
 800bbb4:	7dfb      	ldrb	r3, [r7, #23]
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	4863      	ldr	r0, [pc, #396]	; (800bd48 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800bbba:	f001 fbf3 	bl	800d3a4 <iprintf>
 800bbbe:	e00c      	b.n	800bbda <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800bbc0:	485d      	ldr	r0, [pc, #372]	; (800bd38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bbc2:	f7fe fcf7 	bl	800a5b4 <DbgTraceGetFileName>
 800bbc6:	4601      	mov	r1, r0
 800bbc8:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800bbcc:	4a5b      	ldr	r2, [pc, #364]	; (800bd3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bbce:	485c      	ldr	r0, [pc, #368]	; (800bd40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bbd0:	f001 fbe8 	bl	800d3a4 <iprintf>
 800bbd4:	485d      	ldr	r0, [pc, #372]	; (800bd4c <Ble_Hci_Gap_Gatt_Init+0x500>)
 800bbd6:	f001 fc53 	bl	800d480 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800bbda:	4b5d      	ldr	r3, [pc, #372]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bbdc:	2201      	movs	r2, #1
 800bbde:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800bbe0:	4b5b      	ldr	r3, [pc, #364]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fc fde4 	bl	80087b2 <aci_gap_set_io_capability>
 800bbea:	4603      	mov	r3, r0
 800bbec:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00f      	beq.n	800bc14 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800bbf4:	4850      	ldr	r0, [pc, #320]	; (800bd38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bbf6:	f7fe fcdd 	bl	800a5b4 <DbgTraceGetFileName>
 800bbfa:	4601      	mov	r1, r0
 800bbfc:	f240 33aa 	movw	r3, #938	; 0x3aa
 800bc00:	4a4e      	ldr	r2, [pc, #312]	; (800bd3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bc02:	484f      	ldr	r0, [pc, #316]	; (800bd40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bc04:	f001 fbce 	bl	800d3a4 <iprintf>
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	4851      	ldr	r0, [pc, #324]	; (800bd54 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800bc0e:	f001 fbc9 	bl	800d3a4 <iprintf>
 800bc12:	e00c      	b.n	800bc2e <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800bc14:	4848      	ldr	r0, [pc, #288]	; (800bd38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bc16:	f7fe fccd 	bl	800a5b4 <DbgTraceGetFileName>
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	f240 33ae 	movw	r3, #942	; 0x3ae
 800bc20:	4a46      	ldr	r2, [pc, #280]	; (800bd3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bc22:	4847      	ldr	r0, [pc, #284]	; (800bd40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bc24:	f001 fbbe 	bl	800d3a4 <iprintf>
 800bc28:	484b      	ldr	r0, [pc, #300]	; (800bd58 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800bc2a:	f001 fc29 	bl	800d480 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800bc2e:	4b48      	ldr	r3, [pc, #288]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc30:	2201      	movs	r2, #1
 800bc32:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800bc34:	4b46      	ldr	r3, [pc, #280]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc36:	2208      	movs	r2, #8
 800bc38:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800bc3a:	4b45      	ldr	r3, [pc, #276]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc3c:	2210      	movs	r2, #16
 800bc3e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800bc40:	4b43      	ldr	r3, [pc, #268]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800bc46:	4b42      	ldr	r3, [pc, #264]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc48:	4a44      	ldr	r2, [pc, #272]	; (800bd5c <Ble_Hci_Gap_Gatt_Init+0x510>)
 800bc4a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800bc4c:	4b40      	ldr	r3, [pc, #256]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc4e:	2200      	movs	r2, #0
 800bc50:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800bc52:	4b3f      	ldr	r3, [pc, #252]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc54:	789c      	ldrb	r4, [r3, #2]
 800bc56:	4b3e      	ldr	r3, [pc, #248]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc58:	785d      	ldrb	r5, [r3, #1]
 800bc5a:	4b3d      	ldr	r3, [pc, #244]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc5c:	791b      	ldrb	r3, [r3, #4]
 800bc5e:	4a3c      	ldr	r2, [pc, #240]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc60:	7952      	ldrb	r2, [r2, #5]
 800bc62:	493b      	ldr	r1, [pc, #236]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc64:	78c9      	ldrb	r1, [r1, #3]
 800bc66:	483a      	ldr	r0, [pc, #232]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bc68:	6880      	ldr	r0, [r0, #8]
 800bc6a:	2600      	movs	r6, #0
 800bc6c:	9604      	str	r6, [sp, #16]
 800bc6e:	9003      	str	r0, [sp, #12]
 800bc70:	9102      	str	r1, [sp, #8]
 800bc72:	9201      	str	r2, [sp, #4]
 800bc74:	9300      	str	r3, [sp, #0]
 800bc76:	2300      	movs	r3, #0
 800bc78:	2201      	movs	r2, #1
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f7fc fdec 	bl	800885a <aci_gap_set_authentication_requirement>
 800bc82:	4603      	mov	r3, r0
 800bc84:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800bc86:	7dfb      	ldrb	r3, [r7, #23]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d00f      	beq.n	800bcac <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800bc8c:	482a      	ldr	r0, [pc, #168]	; (800bd38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bc8e:	f7fe fc91 	bl	800a5b4 <DbgTraceGetFileName>
 800bc92:	4601      	mov	r1, r0
 800bc94:	f240 33c9 	movw	r3, #969	; 0x3c9
 800bc98:	4a28      	ldr	r2, [pc, #160]	; (800bd3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bc9a:	4829      	ldr	r0, [pc, #164]	; (800bd40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bc9c:	f001 fb82 	bl	800d3a4 <iprintf>
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
 800bca2:	4619      	mov	r1, r3
 800bca4:	482e      	ldr	r0, [pc, #184]	; (800bd60 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800bca6:	f001 fb7d 	bl	800d3a4 <iprintf>
 800bcaa:	e00c      	b.n	800bcc6 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800bcac:	4822      	ldr	r0, [pc, #136]	; (800bd38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bcae:	f7fe fc81 	bl	800a5b4 <DbgTraceGetFileName>
 800bcb2:	4601      	mov	r1, r0
 800bcb4:	f240 33cd 	movw	r3, #973	; 0x3cd
 800bcb8:	4a20      	ldr	r2, [pc, #128]	; (800bd3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bcba:	4821      	ldr	r0, [pc, #132]	; (800bd40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bcbc:	f001 fb72 	bl	800d3a4 <iprintf>
 800bcc0:	4828      	ldr	r0, [pc, #160]	; (800bd64 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800bcc2:	f001 fbdd 	bl	800d480 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800bcc6:	4b22      	ldr	r3, [pc, #136]	; (800bd50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bcc8:	789b      	ldrb	r3, [r3, #2]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d023      	beq.n	800bd16 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800bcce:	f7fd f80e 	bl	8008cee <aci_gap_configure_filter_accept_list>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00f      	beq.n	800bcfc <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800bcdc:	4816      	ldr	r0, [pc, #88]	; (800bd38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bcde:	f7fe fc69 	bl	800a5b4 <DbgTraceGetFileName>
 800bce2:	4601      	mov	r1, r0
 800bce4:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 800bce8:	4a14      	ldr	r2, [pc, #80]	; (800bd3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bcea:	4815      	ldr	r0, [pc, #84]	; (800bd40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bcec:	f001 fb5a 	bl	800d3a4 <iprintf>
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	481c      	ldr	r0, [pc, #112]	; (800bd68 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800bcf6:	f001 fb55 	bl	800d3a4 <iprintf>
 800bcfa:	e00c      	b.n	800bd16 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800bcfc:	480e      	ldr	r0, [pc, #56]	; (800bd38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bcfe:	f7fe fc59 	bl	800a5b4 <DbgTraceGetFileName>
 800bd02:	4601      	mov	r1, r0
 800bd04:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 800bd08:	4a0c      	ldr	r2, [pc, #48]	; (800bd3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bd0a:	480d      	ldr	r0, [pc, #52]	; (800bd40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bd0c:	f001 fb4a 	bl	800d3a4 <iprintf>
 800bd10:	4816      	ldr	r0, [pc, #88]	; (800bd6c <Ble_Hci_Gap_Gatt_Init+0x520>)
 800bd12:	f001 fbb5 	bl	800d480 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800bd16:	4808      	ldr	r0, [pc, #32]	; (800bd38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bd18:	f7fe fc4c 	bl	800a5b4 <DbgTraceGetFileName>
 800bd1c:	4601      	mov	r1, r0
 800bd1e:	f240 33df 	movw	r3, #991	; 0x3df
 800bd22:	4a06      	ldr	r2, [pc, #24]	; (800bd3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bd24:	4806      	ldr	r0, [pc, #24]	; (800bd40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bd26:	f001 fb3d 	bl	800d3a4 <iprintf>
 800bd2a:	4811      	ldr	r0, [pc, #68]	; (800bd70 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800bd2c:	f001 fb3a 	bl	800d3a4 <iprintf>
}
 800bd30:	bf00      	nop
 800bd32:	371c      	adds	r7, #28
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd38:	0800e5f0 	.word	0x0800e5f0
 800bd3c:	0800f950 	.word	0x0800f950
 800bd40:	0800e60c 	.word	0x0800e60c
 800bd44:	0800eed8 	.word	0x0800eed8
 800bd48:	0800eef8 	.word	0x0800eef8
 800bd4c:	0800ef34 	.word	0x0800ef34
 800bd50:	2000170c 	.word	0x2000170c
 800bd54:	0800ef60 	.word	0x0800ef60
 800bd58:	0800efa0 	.word	0x0800efa0
 800bd5c:	0001b207 	.word	0x0001b207
 800bd60:	0800efd0 	.word	0x0800efd0
 800bd64:	0800f01c 	.word	0x0800f01c
 800bd68:	0800f058 	.word	0x0800f058
 800bd6c:	0800f098 	.word	0x0800f098
 800bd70:	0800f0c8 	.word	0x0800f0c8

0800bd74 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b08c      	sub	sp, #48	; 0x30
 800bd78:	af08      	add	r7, sp, #32
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bd7e:	2392      	movs	r3, #146	; 0x92
 800bd80:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800bd82:	4a32      	ldr	r2, [pc, #200]	; (800be4c <Adv_Request+0xd8>)
 800bd84:	79fb      	ldrb	r3, [r7, #7]
 800bd86:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	9306      	str	r3, [sp, #24]
 800bd8e:	2300      	movs	r3, #0
 800bd90:	9305      	str	r3, [sp, #20]
 800bd92:	2300      	movs	r3, #0
 800bd94:	9304      	str	r3, [sp, #16]
 800bd96:	2300      	movs	r3, #0
 800bd98:	9303      	str	r3, [sp, #12]
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	9302      	str	r3, [sp, #8]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	2300      	movs	r3, #0
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	2300      	movs	r3, #0
 800bda8:	22a0      	movs	r2, #160	; 0xa0
 800bdaa:	2180      	movs	r1, #128	; 0x80
 800bdac:	2000      	movs	r0, #0
 800bdae:	f7fc fc06 	bl	80085be <aci_gap_set_discoverable>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800bdb6:	7bfb      	ldrb	r3, [r7, #15]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00f      	beq.n	800bddc <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800bdbc:	4824      	ldr	r0, [pc, #144]	; (800be50 <Adv_Request+0xdc>)
 800bdbe:	f7fe fbf9 	bl	800a5b4 <DbgTraceGetFileName>
 800bdc2:	4601      	mov	r1, r0
 800bdc4:	f240 33f5 	movw	r3, #1013	; 0x3f5
 800bdc8:	4a22      	ldr	r2, [pc, #136]	; (800be54 <Adv_Request+0xe0>)
 800bdca:	4823      	ldr	r0, [pc, #140]	; (800be58 <Adv_Request+0xe4>)
 800bdcc:	f001 faea 	bl	800d3a4 <iprintf>
 800bdd0:	7bfb      	ldrb	r3, [r7, #15]
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	4821      	ldr	r0, [pc, #132]	; (800be5c <Adv_Request+0xe8>)
 800bdd6:	f001 fae5 	bl	800d3a4 <iprintf>
 800bdda:	e00c      	b.n	800bdf6 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800bddc:	481c      	ldr	r0, [pc, #112]	; (800be50 <Adv_Request+0xdc>)
 800bdde:	f7fe fbe9 	bl	800a5b4 <DbgTraceGetFileName>
 800bde2:	4601      	mov	r1, r0
 800bde4:	f240 33f9 	movw	r3, #1017	; 0x3f9
 800bde8:	4a1a      	ldr	r2, [pc, #104]	; (800be54 <Adv_Request+0xe0>)
 800bdea:	481b      	ldr	r0, [pc, #108]	; (800be58 <Adv_Request+0xe4>)
 800bdec:	f001 fada 	bl	800d3a4 <iprintf>
 800bdf0:	481b      	ldr	r0, [pc, #108]	; (800be60 <Adv_Request+0xec>)
 800bdf2:	f001 fb45 	bl	800d480 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800bdf6:	491b      	ldr	r1, [pc, #108]	; (800be64 <Adv_Request+0xf0>)
 800bdf8:	2019      	movs	r0, #25
 800bdfa:	f7fc ff06 	bl	8008c0a <aci_gap_update_adv_data>
 800bdfe:	4603      	mov	r3, r0
 800be00:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800be02:	7bfb      	ldrb	r3, [r7, #15]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00f      	beq.n	800be28 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800be08:	4811      	ldr	r0, [pc, #68]	; (800be50 <Adv_Request+0xdc>)
 800be0a:	f7fe fbd3 	bl	800a5b4 <DbgTraceGetFileName>
 800be0e:	4601      	mov	r1, r0
 800be10:	f240 4304 	movw	r3, #1028	; 0x404
 800be14:	4a0f      	ldr	r2, [pc, #60]	; (800be54 <Adv_Request+0xe0>)
 800be16:	4810      	ldr	r0, [pc, #64]	; (800be58 <Adv_Request+0xe4>)
 800be18:	f001 fac4 	bl	800d3a4 <iprintf>
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
 800be1e:	4619      	mov	r1, r3
 800be20:	4811      	ldr	r0, [pc, #68]	; (800be68 <Adv_Request+0xf4>)
 800be22:	f001 fabf 	bl	800d3a4 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800be26:	e00d      	b.n	800be44 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800be28:	4809      	ldr	r0, [pc, #36]	; (800be50 <Adv_Request+0xdc>)
 800be2a:	f7fe fbc3 	bl	800a5b4 <DbgTraceGetFileName>
 800be2e:	4601      	mov	r1, r0
 800be30:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800be34:	4a07      	ldr	r2, [pc, #28]	; (800be54 <Adv_Request+0xe0>)
 800be36:	4808      	ldr	r0, [pc, #32]	; (800be58 <Adv_Request+0xe4>)
 800be38:	f001 fab4 	bl	800d3a4 <iprintf>
 800be3c:	480b      	ldr	r0, [pc, #44]	; (800be6c <Adv_Request+0xf8>)
 800be3e:	f001 fab1 	bl	800d3a4 <iprintf>
  return;
 800be42:	bf00      	nop
}
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	2000170c 	.word	0x2000170c
 800be50:	0800e5f0 	.word	0x0800e5f0
 800be54:	0800f968 	.word	0x0800f968
 800be58:	0800e60c 	.word	0x0800e60c
 800be5c:	0800f0f4 	.word	0x0800f0f4
 800be60:	0800f12c 	.word	0x0800f12c
 800be64:	20000014 	.word	0x20000014
 800be68:	0800f154 	.word	0x0800f154
 800be6c:	0800f188 	.word	0x0800f188

0800be70 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800be76:	f7ff f963 	bl	800b140 <LL_FLASH_GetUDN>
 800be7a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be82:	d023      	beq.n	800becc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800be84:	f7ff f974 	bl	800b170 <LL_FLASH_GetSTCompanyID>
 800be88:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800be8a:	f7ff f965 	bl	800b158 <LL_FLASH_GetDeviceID>
 800be8e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	b2da      	uxtb	r2, r3
 800be94:	4b16      	ldr	r3, [pc, #88]	; (800bef0 <BleGetBdAddress+0x80>)
 800be96:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	0a1b      	lsrs	r3, r3, #8
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	4b14      	ldr	r3, [pc, #80]	; (800bef0 <BleGetBdAddress+0x80>)
 800bea0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	4b12      	ldr	r3, [pc, #72]	; (800bef0 <BleGetBdAddress+0x80>)
 800bea8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	b2da      	uxtb	r2, r3
 800beae:	4b10      	ldr	r3, [pc, #64]	; (800bef0 <BleGetBdAddress+0x80>)
 800beb0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	0a1b      	lsrs	r3, r3, #8
 800beb6:	b2da      	uxtb	r2, r3
 800beb8:	4b0d      	ldr	r3, [pc, #52]	; (800bef0 <BleGetBdAddress+0x80>)
 800beba:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	0c1b      	lsrs	r3, r3, #16
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	4b0b      	ldr	r3, [pc, #44]	; (800bef0 <BleGetBdAddress+0x80>)
 800bec4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800bec6:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <BleGetBdAddress+0x80>)
 800bec8:	617b      	str	r3, [r7, #20]
 800beca:	e00b      	b.n	800bee4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800becc:	2000      	movs	r0, #0
 800bece:	f7fe fc4f 	bl	800a770 <OTP_Read>
 800bed2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d002      	beq.n	800bee0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	617b      	str	r3, [r7, #20]
 800bede:	e001      	b.n	800bee4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800bee0:	4b04      	ldr	r3, [pc, #16]	; (800bef4 <BleGetBdAddress+0x84>)
 800bee2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800bee4:	697b      	ldr	r3, [r7, #20]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	20001704 	.word	0x20001704
 800bef4:	0800f900 	.word	0x0800f900

0800bef8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800befe:	4b1f      	ldr	r3, [pc, #124]	; (800bf7c <Adv_Cancel+0x84>)
 800bf00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf04:	2b05      	cmp	r3, #5
 800bf06:	d035      	beq.n	800bf74 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bf08:	2392      	movs	r3, #146	; 0x92
 800bf0a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800bf0c:	f7fc fb33 	bl	8008576 <aci_gap_set_non_discoverable>
 800bf10:	4603      	mov	r3, r0
 800bf12:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bf14:	4b19      	ldr	r3, [pc, #100]	; (800bf7c <Adv_Cancel+0x84>)
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00d      	beq.n	800bf3e <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800bf22:	4817      	ldr	r0, [pc, #92]	; (800bf80 <Adv_Cancel+0x88>)
 800bf24:	f7fe fb46 	bl	800a5b4 <DbgTraceGetFileName>
 800bf28:	4601      	mov	r1, r0
 800bf2a:	f240 4356 	movw	r3, #1110	; 0x456
 800bf2e:	4a15      	ldr	r2, [pc, #84]	; (800bf84 <Adv_Cancel+0x8c>)
 800bf30:	4815      	ldr	r0, [pc, #84]	; (800bf88 <Adv_Cancel+0x90>)
 800bf32:	f001 fa37 	bl	800d3a4 <iprintf>
 800bf36:	4815      	ldr	r0, [pc, #84]	; (800bf8c <Adv_Cancel+0x94>)
 800bf38:	f001 fa34 	bl	800d3a4 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800bf3c:	e01a      	b.n	800bf74 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800bf3e:	4810      	ldr	r0, [pc, #64]	; (800bf80 <Adv_Cancel+0x88>)
 800bf40:	f7fe fb38 	bl	800a5b4 <DbgTraceGetFileName>
 800bf44:	4601      	mov	r1, r0
 800bf46:	f240 435a 	movw	r3, #1114	; 0x45a
 800bf4a:	4a0e      	ldr	r2, [pc, #56]	; (800bf84 <Adv_Cancel+0x8c>)
 800bf4c:	480e      	ldr	r0, [pc, #56]	; (800bf88 <Adv_Cancel+0x90>)
 800bf4e:	f001 fa29 	bl	800d3a4 <iprintf>
 800bf52:	480f      	ldr	r0, [pc, #60]	; (800bf90 <Adv_Cancel+0x98>)
 800bf54:	f001 fa26 	bl	800d3a4 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800bf58:	4809      	ldr	r0, [pc, #36]	; (800bf80 <Adv_Cancel+0x88>)
 800bf5a:	f7fe fb2b 	bl	800a5b4 <DbgTraceGetFileName>
 800bf5e:	4601      	mov	r1, r0
 800bf60:	f240 435b 	movw	r3, #1115	; 0x45b
 800bf64:	4a07      	ldr	r2, [pc, #28]	; (800bf84 <Adv_Cancel+0x8c>)
 800bf66:	4808      	ldr	r0, [pc, #32]	; (800bf88 <Adv_Cancel+0x90>)
 800bf68:	f001 fa1c 	bl	800d3a4 <iprintf>
 800bf6c:	4809      	ldr	r0, [pc, #36]	; (800bf94 <Adv_Cancel+0x9c>)
 800bf6e:	f001 fa19 	bl	800d3a4 <iprintf>
  return;
 800bf72:	bf00      	nop
 800bf74:	bf00      	nop
}
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	2000170c 	.word	0x2000170c
 800bf80:	0800e5f0 	.word	0x0800e5f0
 800bf84:	0800f974 	.word	0x0800f974
 800bf88:	0800e60c 	.word	0x0800e60c
 800bf8c:	0800f1b0 	.word	0x0800f1b0
 800bf90:	0800f1d4 	.word	0x0800f1d4
 800bf94:	0800f1dc 	.word	0x0800f1dc

0800bf98 <APP_BLE_Key_Button1_Action>:
}
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	af00      	add	r7, sp, #0
  P2PS_APP_B1_Button_Action();
 800bf9c:	f000 fa16 	bl	800c3cc <P2PS_APP_B1_Button_Action>
}
 800bfa0:	bf00      	nop
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	af00      	add	r7, sp, #0
  P2PS_APP_B2_Button_Action();
 800bfa8:	f000 fa1e 	bl	800c3e8 <P2PS_APP_B2_Button_Action>
}
 800bfac:	bf00      	nop
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	af00      	add	r7, sp, #0
  P2PS_APP_B3_Button_Action();
 800bfb4:	f000 fa26 	bl	800c404 <P2PS_APP_B3_Button_Action>
}
 800bfb8:	bf00      	nop
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	2002      	movs	r0, #2
 800bfc8:	f001 f80a 	bl	800cfe0 <UTIL_SEQ_SetTask>

  return;
 800bfcc:	bf00      	nop
}
 800bfce:	3708      	adds	r7, #8
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800bfdc:	2001      	movs	r0, #1
 800bfde:	f001 f86b 	bl	800d0b8 <UTIL_SEQ_SetEvt>

  return;
 800bfe2:	bf00      	nop
}
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b082      	sub	sp, #8
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800bff2:	2001      	movs	r0, #1
 800bff4:	f001 f880 	bl	800d0f8 <UTIL_SEQ_WaitEvt>

  return;
 800bff8:	bf00      	nop
}
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	3308      	adds	r3, #8
 800c012:	4618      	mov	r0, r3
 800c014:	f7fd fc6c 	bl	80098f0 <SVCCTL_UserEvtRx>
 800c018:	4603      	mov	r3, r0
 800c01a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c01c:	7afb      	ldrb	r3, [r7, #11]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d003      	beq.n	800c02a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2201      	movs	r2, #1
 800c026:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800c028:	e003      	b.n	800c032 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2200      	movs	r2, #0
 800c02e:	701a      	strb	r2, [r3, #0]
  return;
 800c030:	bf00      	nop
}
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	4603      	mov	r3, r0
 800c040:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800c042:	79fb      	ldrb	r3, [r7, #7]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <BLE_StatusNot+0x16>
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d006      	beq.n	800c05a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800c04c:	e00b      	b.n	800c066 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c04e:	231f      	movs	r3, #31
 800c050:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f000 fff0 	bl	800d038 <UTIL_SEQ_PauseTask>
      break;
 800c058:	e005      	b.n	800c066 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c05a:	231f      	movs	r3, #31
 800c05c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f001 f80a 	bl	800d078 <UTIL_SEQ_ResumeTask>
      break;
 800c064:	bf00      	nop
  }

  return;
 800c066:	bf00      	nop
}
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <Custom_STM_App_Notification>:
uint16_t Payload_To_Speed(uint8_t, uint8_t);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	2b03      	cmp	r3, #3
 800c07e:	f200 8091 	bhi.w	800c1a4 <Custom_STM_App_Notification+0x134>
 800c082:	a201      	add	r2, pc, #4	; (adr r2, 800c088 <Custom_STM_App_Notification+0x18>)
 800c084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c088:	0800c1a5 	.word	0x0800c1a5
 800c08c:	0800c099 	.word	0x0800c099
 800c090:	0800c165 	.word	0x0800c165
 800c094:	0800c185 	.word	0x0800c185
      /* USER CODE END CUSTOM_STM_GOAL_C_READ_EVT */
      break;

    case CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT \n");
 800c098:	4845      	ldr	r0, [pc, #276]	; (800c1b0 <Custom_STM_App_Notification+0x140>)
 800c09a:	f7fe fa8b 	bl	800a5b4 <DbgTraceGetFileName>
 800c09e:	4601      	mov	r1, r0
 800c0a0:	236d      	movs	r3, #109	; 0x6d
 800c0a2:	4a44      	ldr	r2, [pc, #272]	; (800c1b4 <Custom_STM_App_Notification+0x144>)
 800c0a4:	4844      	ldr	r0, [pc, #272]	; (800c1b8 <Custom_STM_App_Notification+0x148>)
 800c0a6:	f001 f97d 	bl	800d3a4 <iprintf>
 800c0aa:	4844      	ldr	r0, [pc, #272]	; (800c1bc <Custom_STM_App_Notification+0x14c>)
 800c0ac:	f001 f9e8 	bl	800d480 <puts>
        APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800c0b0:	483f      	ldr	r0, [pc, #252]	; (800c1b0 <Custom_STM_App_Notification+0x140>)
 800c0b2:	f7fe fa7f 	bl	800a5b4 <DbgTraceGetFileName>
 800c0b6:	4601      	mov	r1, r0
 800c0b8:	236e      	movs	r3, #110	; 0x6e
 800c0ba:	4a3e      	ldr	r2, [pc, #248]	; (800c1b4 <Custom_STM_App_Notification+0x144>)
 800c0bc:	483e      	ldr	r0, [pc, #248]	; (800c1b8 <Custom_STM_App_Notification+0x148>)
 800c0be:	f001 f971 	bl	800d3a4 <iprintf>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	483a      	ldr	r0, [pc, #232]	; (800c1c0 <Custom_STM_App_Notification+0x150>)
 800c0d6:	f001 f965 	bl	800d3a4 <iprintf>
        uint16_t goal_speed = Payload_To_Speed(pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	781a      	ldrb	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4610      	mov	r0, r2
 800c0ec:	f000 f998 	bl	800c420 <Payload_To_Speed>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	81fb      	strh	r3, [r7, #14]
        if (goal_speed < 301)
 800c0f4:	89fb      	ldrh	r3, [r7, #14]
 800c0f6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c0fa:	d80f      	bhi.n	800c11c <Custom_STM_App_Notification+0xac>
        {
        	HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_SET);
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	2120      	movs	r1, #32
 800c100:	4830      	ldr	r0, [pc, #192]	; (800c1c4 <Custom_STM_App_Notification+0x154>)
 800c102:	f7f7 fe29 	bl	8003d58 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
 800c106:	2200      	movs	r2, #0
 800c108:	2101      	movs	r1, #1
 800c10a:	482e      	ldr	r0, [pc, #184]	; (800c1c4 <Custom_STM_App_Notification+0x154>)
 800c10c:	f7f7 fe24 	bl	8003d58 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 800c110:	2200      	movs	r2, #0
 800c112:	2102      	movs	r1, #2
 800c114:	482b      	ldr	r0, [pc, #172]	; (800c1c4 <Custom_STM_App_Notification+0x154>)
 800c116:	f7f7 fe1f 	bl	8003d58 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET);
        	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
        	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_SET);
        }
      /* USER CODE END CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT */
      break;
 800c11a:	e044      	b.n	800c1a6 <Custom_STM_App_Notification+0x136>
        else if(goal_speed < 601)
 800c11c:	89fb      	ldrh	r3, [r7, #14]
 800c11e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800c122:	d80f      	bhi.n	800c144 <Custom_STM_App_Notification+0xd4>
        	HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET);
 800c124:	2200      	movs	r2, #0
 800c126:	2120      	movs	r1, #32
 800c128:	4826      	ldr	r0, [pc, #152]	; (800c1c4 <Custom_STM_App_Notification+0x154>)
 800c12a:	f7f7 fe15 	bl	8003d58 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_SET);
 800c12e:	2201      	movs	r2, #1
 800c130:	2101      	movs	r1, #1
 800c132:	4824      	ldr	r0, [pc, #144]	; (800c1c4 <Custom_STM_App_Notification+0x154>)
 800c134:	f7f7 fe10 	bl	8003d58 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 800c138:	2200      	movs	r2, #0
 800c13a:	2102      	movs	r1, #2
 800c13c:	4821      	ldr	r0, [pc, #132]	; (800c1c4 <Custom_STM_App_Notification+0x154>)
 800c13e:	f7f7 fe0b 	bl	8003d58 <HAL_GPIO_WritePin>
      break;
 800c142:	e030      	b.n	800c1a6 <Custom_STM_App_Notification+0x136>
        	HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET);
 800c144:	2200      	movs	r2, #0
 800c146:	2120      	movs	r1, #32
 800c148:	481e      	ldr	r0, [pc, #120]	; (800c1c4 <Custom_STM_App_Notification+0x154>)
 800c14a:	f7f7 fe05 	bl	8003d58 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
 800c14e:	2200      	movs	r2, #0
 800c150:	2101      	movs	r1, #1
 800c152:	481c      	ldr	r0, [pc, #112]	; (800c1c4 <Custom_STM_App_Notification+0x154>)
 800c154:	f7f7 fe00 	bl	8003d58 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_SET);
 800c158:	2201      	movs	r2, #1
 800c15a:	2102      	movs	r1, #2
 800c15c:	4819      	ldr	r0, [pc, #100]	; (800c1c4 <Custom_STM_App_Notification+0x154>)
 800c15e:	f7f7 fdfb 	bl	8003d58 <HAL_GPIO_WritePin>
      break;
 800c162:	e020      	b.n	800c1a6 <Custom_STM_App_Notification+0x136>

    case CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT \n");
 800c164:	4812      	ldr	r0, [pc, #72]	; (800c1b0 <Custom_STM_App_Notification+0x140>)
 800c166:	f7fe fa25 	bl	800a5b4 <DbgTraceGetFileName>
 800c16a:	4601      	mov	r1, r0
 800c16c:	2387      	movs	r3, #135	; 0x87
 800c16e:	4a11      	ldr	r2, [pc, #68]	; (800c1b4 <Custom_STM_App_Notification+0x144>)
 800c170:	4811      	ldr	r0, [pc, #68]	; (800c1b8 <Custom_STM_App_Notification+0x148>)
 800c172:	f001 f917 	bl	800d3a4 <iprintf>
 800c176:	4814      	ldr	r0, [pc, #80]	; (800c1c8 <Custom_STM_App_Notification+0x158>)
 800c178:	f001 f982 	bl	800d480 <puts>

        Custom_App_Context.State_c_Notification_Status = 1;
 800c17c:	4b13      	ldr	r3, [pc, #76]	; (800c1cc <Custom_STM_App_Notification+0x15c>)
 800c17e:	2201      	movs	r2, #1
 800c180:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT */
      break;
 800c182:	e010      	b.n	800c1a6 <Custom_STM_App_Notification+0x136>

    case CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT \n");
 800c184:	480a      	ldr	r0, [pc, #40]	; (800c1b0 <Custom_STM_App_Notification+0x140>)
 800c186:	f7fe fa15 	bl	800a5b4 <DbgTraceGetFileName>
 800c18a:	4601      	mov	r1, r0
 800c18c:	238f      	movs	r3, #143	; 0x8f
 800c18e:	4a09      	ldr	r2, [pc, #36]	; (800c1b4 <Custom_STM_App_Notification+0x144>)
 800c190:	4809      	ldr	r0, [pc, #36]	; (800c1b8 <Custom_STM_App_Notification+0x148>)
 800c192:	f001 f907 	bl	800d3a4 <iprintf>
 800c196:	480e      	ldr	r0, [pc, #56]	; (800c1d0 <Custom_STM_App_Notification+0x160>)
 800c198:	f001 f972 	bl	800d480 <puts>

        Custom_App_Context.State_c_Notification_Status = 0;
 800c19c:	4b0b      	ldr	r3, [pc, #44]	; (800c1cc <Custom_STM_App_Notification+0x15c>)
 800c19e:	2200      	movs	r2, #0
 800c1a0:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT */
      break;
 800c1a2:	e000      	b.n	800c1a6 <Custom_STM_App_Notification+0x136>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800c1a4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800c1a6:	bf00      	nop
}
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	0800f1f8 	.word	0x0800f1f8
 800c1b4:	0800f980 	.word	0x0800f980
 800c1b8:	0800f218 	.word	0x0800f218
 800c1bc:	0800f22c 	.word	0x0800f22c
 800c1c0:	0800f258 	.word	0x0800f258
 800c1c4:	48000400 	.word	0x48000400
 800c1c8:	0800f278 	.word	0x0800f278
 800c1cc:	20001794 	.word	0x20001794
 800c1d0:	0800f2a8 	.word	0x0800f2a8

0800c1d4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <Custom_APP_Notification+0x16>
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d002      	beq.n	800c1ee <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800c1e8:	e002      	b.n	800c1f0 <Custom_APP_Notification+0x1c>
      break;
 800c1ea:	bf00      	nop
 800c1ec:	e000      	b.n	800c1f0 <Custom_APP_Notification+0x1c>
      break;
 800c1ee:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800c1f0:	bf00      	nop
}
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	  UTIL_SEQ_RegTask(1<< CFG_TASK_B1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c200:	4a0b      	ldr	r2, [pc, #44]	; (800c230 <Custom_APP_Init+0x34>)
 800c202:	2100      	movs	r1, #0
 800c204:	2004      	movs	r0, #4
 800c206:	f000 fec9 	bl	800cf9c <UTIL_SEQ_RegTask>
	  UTIL_SEQ_RegTask(1<< CFG_TASK_B2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c20a:	4a09      	ldr	r2, [pc, #36]	; (800c230 <Custom_APP_Init+0x34>)
 800c20c:	2100      	movs	r1, #0
 800c20e:	2008      	movs	r0, #8
 800c210:	f000 fec4 	bl	800cf9c <UTIL_SEQ_RegTask>
	  UTIL_SEQ_RegTask(1<< CFG_TASK_B3_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c214:	4a06      	ldr	r2, [pc, #24]	; (800c230 <Custom_APP_Init+0x34>)
 800c216:	2100      	movs	r1, #0
 800c218:	2010      	movs	r0, #16
 800c21a:	f000 febf 	bl	800cf9c <UTIL_SEQ_RegTask>

	  Custom_App_Context.State_c_Notification_Status = 0;
 800c21e:	4b05      	ldr	r3, [pc, #20]	; (800c234 <Custom_APP_Init+0x38>)
 800c220:	2200      	movs	r2, #0
 800c222:	701a      	strb	r2, [r3, #0]
	  Custom_App_Context.State_Status = STOPPED;
 800c224:	4b03      	ldr	r3, [pc, #12]	; (800c234 <Custom_APP_Init+0x38>)
 800c226:	2200      	movs	r2, #0
 800c228:	705a      	strb	r2, [r3, #1]
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800c22a:	bf00      	nop
}
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	0800c239 	.word	0x0800c239
 800c234:	20001794 	.word	0x20001794

0800c238 <Custom_State_c_Send_Notification>:
  /* USER CODE END State_c_UC_Last*/
  return;
}

void Custom_State_c_Send_Notification(void) /* Property Notification */
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800c23e:	2300      	movs	r3, #0
 800c240:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN State_c_NS_1*/
  if(Custom_App_Context.State_c_Notification_Status)
 800c242:	4b57      	ldr	r3, [pc, #348]	; (800c3a0 <Custom_State_c_Send_Notification+0x168>)
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	f000 8090 	beq.w	800c36c <Custom_State_c_Send_Notification+0x134>
  {
	  updateflag = 1;
 800c24c:	2301      	movs	r3, #1
 800c24e:	71fb      	strb	r3, [r7, #7]

	  if(Custom_App_Context.State_Status == STOPPED)
 800c250:	4b53      	ldr	r3, [pc, #332]	; (800c3a0 <Custom_State_c_Send_Notification+0x168>)
 800c252:	785b      	ldrb	r3, [r3, #1]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d11e      	bne.n	800c296 <Custom_State_c_Send_Notification+0x5e>
	  {
		  NotifyCharData[0] = 0x00; //Big Endian
 800c258:	4b52      	ldr	r3, [pc, #328]	; (800c3a4 <Custom_State_c_Send_Notification+0x16c>)
 800c25a:	2200      	movs	r2, #0
 800c25c:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x00;
 800c25e:	4b51      	ldr	r3, [pc, #324]	; (800c3a4 <Custom_State_c_Send_Notification+0x16c>)
 800c260:	2200      	movs	r2, #0
 800c262:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR STOPPED \n");
 800c264:	4850      	ldr	r0, [pc, #320]	; (800c3a8 <Custom_State_c_Send_Notification+0x170>)
 800c266:	f7fe f9a5 	bl	800a5b4 <DbgTraceGetFileName>
 800c26a:	4601      	mov	r1, r0
 800c26c:	23fe      	movs	r3, #254	; 0xfe
 800c26e:	4a4f      	ldr	r2, [pc, #316]	; (800c3ac <Custom_State_c_Send_Notification+0x174>)
 800c270:	484f      	ldr	r0, [pc, #316]	; (800c3b0 <Custom_State_c_Send_Notification+0x178>)
 800c272:	f001 f897 	bl	800d3a4 <iprintf>
 800c276:	484f      	ldr	r0, [pc, #316]	; (800c3b4 <Custom_State_c_Send_Notification+0x17c>)
 800c278:	f001 f902 	bl	800d480 <puts>
		  APP_DBG_MSG(" \n\r");
 800c27c:	484a      	ldr	r0, [pc, #296]	; (800c3a8 <Custom_State_c_Send_Notification+0x170>)
 800c27e:	f7fe f999 	bl	800a5b4 <DbgTraceGetFileName>
 800c282:	4601      	mov	r1, r0
 800c284:	23ff      	movs	r3, #255	; 0xff
 800c286:	4a49      	ldr	r2, [pc, #292]	; (800c3ac <Custom_State_c_Send_Notification+0x174>)
 800c288:	4849      	ldr	r0, [pc, #292]	; (800c3b0 <Custom_State_c_Send_Notification+0x178>)
 800c28a:	f001 f88b 	bl	800d3a4 <iprintf>
 800c28e:	484a      	ldr	r0, [pc, #296]	; (800c3b8 <Custom_State_c_Send_Notification+0x180>)
 800c290:	f001 f888 	bl	800d3a4 <iprintf>
 800c294:	e077      	b.n	800c386 <Custom_State_c_Send_Notification+0x14e>
	  }
	  else if (Custom_App_Context.State_Status == PENDING)
 800c296:	4b42      	ldr	r3, [pc, #264]	; (800c3a0 <Custom_State_c_Send_Notification+0x168>)
 800c298:	785b      	ldrb	r3, [r3, #1]
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d120      	bne.n	800c2e0 <Custom_State_c_Send_Notification+0xa8>
	  {
		  NotifyCharData[0] = 0x00;
 800c29e:	4b41      	ldr	r3, [pc, #260]	; (800c3a4 <Custom_State_c_Send_Notification+0x16c>)
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x01;
 800c2a4:	4b3f      	ldr	r3, [pc, #252]	; (800c3a4 <Custom_State_c_Send_Notification+0x16c>)
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR PENDING \n");
 800c2aa:	483f      	ldr	r0, [pc, #252]	; (800c3a8 <Custom_State_c_Send_Notification+0x170>)
 800c2ac:	f7fe f982 	bl	800a5b4 <DbgTraceGetFileName>
 800c2b0:	4601      	mov	r1, r0
 800c2b2:	f240 1305 	movw	r3, #261	; 0x105
 800c2b6:	4a3d      	ldr	r2, [pc, #244]	; (800c3ac <Custom_State_c_Send_Notification+0x174>)
 800c2b8:	483d      	ldr	r0, [pc, #244]	; (800c3b0 <Custom_State_c_Send_Notification+0x178>)
 800c2ba:	f001 f873 	bl	800d3a4 <iprintf>
 800c2be:	483f      	ldr	r0, [pc, #252]	; (800c3bc <Custom_State_c_Send_Notification+0x184>)
 800c2c0:	f001 f8de 	bl	800d480 <puts>
		  APP_DBG_MSG(" \n\r");
 800c2c4:	4838      	ldr	r0, [pc, #224]	; (800c3a8 <Custom_State_c_Send_Notification+0x170>)
 800c2c6:	f7fe f975 	bl	800a5b4 <DbgTraceGetFileName>
 800c2ca:	4601      	mov	r1, r0
 800c2cc:	f44f 7383 	mov.w	r3, #262	; 0x106
 800c2d0:	4a36      	ldr	r2, [pc, #216]	; (800c3ac <Custom_State_c_Send_Notification+0x174>)
 800c2d2:	4837      	ldr	r0, [pc, #220]	; (800c3b0 <Custom_State_c_Send_Notification+0x178>)
 800c2d4:	f001 f866 	bl	800d3a4 <iprintf>
 800c2d8:	4837      	ldr	r0, [pc, #220]	; (800c3b8 <Custom_State_c_Send_Notification+0x180>)
 800c2da:	f001 f863 	bl	800d3a4 <iprintf>
 800c2de:	e052      	b.n	800c386 <Custom_State_c_Send_Notification+0x14e>
	  }
	  else if (Custom_App_Context.State_Status == DONE)
 800c2e0:	4b2f      	ldr	r3, [pc, #188]	; (800c3a0 <Custom_State_c_Send_Notification+0x168>)
 800c2e2:	785b      	ldrb	r3, [r3, #1]
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d120      	bne.n	800c32a <Custom_State_c_Send_Notification+0xf2>
	  {
		  NotifyCharData[0] = 0x00;
 800c2e8:	4b2e      	ldr	r3, [pc, #184]	; (800c3a4 <Custom_State_c_Send_Notification+0x16c>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x02;
 800c2ee:	4b2d      	ldr	r3, [pc, #180]	; (800c3a4 <Custom_State_c_Send_Notification+0x16c>)
 800c2f0:	2202      	movs	r2, #2
 800c2f2:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR DONE \n");
 800c2f4:	482c      	ldr	r0, [pc, #176]	; (800c3a8 <Custom_State_c_Send_Notification+0x170>)
 800c2f6:	f7fe f95d 	bl	800a5b4 <DbgTraceGetFileName>
 800c2fa:	4601      	mov	r1, r0
 800c2fc:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800c300:	4a2a      	ldr	r2, [pc, #168]	; (800c3ac <Custom_State_c_Send_Notification+0x174>)
 800c302:	482b      	ldr	r0, [pc, #172]	; (800c3b0 <Custom_State_c_Send_Notification+0x178>)
 800c304:	f001 f84e 	bl	800d3a4 <iprintf>
 800c308:	482d      	ldr	r0, [pc, #180]	; (800c3c0 <Custom_State_c_Send_Notification+0x188>)
 800c30a:	f001 f8b9 	bl	800d480 <puts>
		  APP_DBG_MSG(" \n\r");
 800c30e:	4826      	ldr	r0, [pc, #152]	; (800c3a8 <Custom_State_c_Send_Notification+0x170>)
 800c310:	f7fe f950 	bl	800a5b4 <DbgTraceGetFileName>
 800c314:	4601      	mov	r1, r0
 800c316:	f240 130d 	movw	r3, #269	; 0x10d
 800c31a:	4a24      	ldr	r2, [pc, #144]	; (800c3ac <Custom_State_c_Send_Notification+0x174>)
 800c31c:	4824      	ldr	r0, [pc, #144]	; (800c3b0 <Custom_State_c_Send_Notification+0x178>)
 800c31e:	f001 f841 	bl	800d3a4 <iprintf>
 800c322:	4825      	ldr	r0, [pc, #148]	; (800c3b8 <Custom_State_c_Send_Notification+0x180>)
 800c324:	f001 f83e 	bl	800d3a4 <iprintf>
 800c328:	e02d      	b.n	800c386 <Custom_State_c_Send_Notification+0x14e>
	  }
	  else
	  {
		  NotifyCharData[0] = 0x00;
 800c32a:	4b1e      	ldr	r3, [pc, #120]	; (800c3a4 <Custom_State_c_Send_Notification+0x16c>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x03;
 800c330:	4b1c      	ldr	r3, [pc, #112]	; (800c3a4 <Custom_State_c_Send_Notification+0x16c>)
 800c332:	2203      	movs	r2, #3
 800c334:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR WRONG STATE \n");
 800c336:	481c      	ldr	r0, [pc, #112]	; (800c3a8 <Custom_State_c_Send_Notification+0x170>)
 800c338:	f7fe f93c 	bl	800a5b4 <DbgTraceGetFileName>
 800c33c:	4601      	mov	r1, r0
 800c33e:	f240 1313 	movw	r3, #275	; 0x113
 800c342:	4a1a      	ldr	r2, [pc, #104]	; (800c3ac <Custom_State_c_Send_Notification+0x174>)
 800c344:	481a      	ldr	r0, [pc, #104]	; (800c3b0 <Custom_State_c_Send_Notification+0x178>)
 800c346:	f001 f82d 	bl	800d3a4 <iprintf>
 800c34a:	481e      	ldr	r0, [pc, #120]	; (800c3c4 <Custom_State_c_Send_Notification+0x18c>)
 800c34c:	f001 f898 	bl	800d480 <puts>
		  APP_DBG_MSG(" \n\r");
 800c350:	4815      	ldr	r0, [pc, #84]	; (800c3a8 <Custom_State_c_Send_Notification+0x170>)
 800c352:	f7fe f92f 	bl	800a5b4 <DbgTraceGetFileName>
 800c356:	4601      	mov	r1, r0
 800c358:	f44f 738a 	mov.w	r3, #276	; 0x114
 800c35c:	4a13      	ldr	r2, [pc, #76]	; (800c3ac <Custom_State_c_Send_Notification+0x174>)
 800c35e:	4814      	ldr	r0, [pc, #80]	; (800c3b0 <Custom_State_c_Send_Notification+0x178>)
 800c360:	f001 f820 	bl	800d3a4 <iprintf>
 800c364:	4814      	ldr	r0, [pc, #80]	; (800c3b8 <Custom_State_c_Send_Notification+0x180>)
 800c366:	f001 f81d 	bl	800d3a4 <iprintf>
 800c36a:	e00c      	b.n	800c386 <Custom_State_c_Send_Notification+0x14e>
	  }
  }
  else
  {
	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800c36c:	480e      	ldr	r0, [pc, #56]	; (800c3a8 <Custom_State_c_Send_Notification+0x170>)
 800c36e:	f7fe f921 	bl	800a5b4 <DbgTraceGetFileName>
 800c372:	4601      	mov	r1, r0
 800c374:	f240 1319 	movw	r3, #281	; 0x119
 800c378:	4a0c      	ldr	r2, [pc, #48]	; (800c3ac <Custom_State_c_Send_Notification+0x174>)
 800c37a:	480d      	ldr	r0, [pc, #52]	; (800c3b0 <Custom_State_c_Send_Notification+0x178>)
 800c37c:	f001 f812 	bl	800d3a4 <iprintf>
 800c380:	4811      	ldr	r0, [pc, #68]	; (800c3c8 <Custom_State_c_Send_Notification+0x190>)
 800c382:	f001 f87d 	bl	800d480 <puts>
  }
  /* USER CODE END State_c_NS_1*/

  if (updateflag != 0)
 800c386:	79fb      	ldrb	r3, [r7, #7]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d004      	beq.n	800c396 <Custom_State_c_Send_Notification+0x15e>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_STATE_C, (uint8_t *)NotifyCharData);
 800c38c:	4905      	ldr	r1, [pc, #20]	; (800c3a4 <Custom_State_c_Send_Notification+0x16c>)
 800c38e:	2001      	movs	r0, #1
 800c390:	f000 f9f8 	bl	800c784 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN State_c_NS_Last*/

  /* USER CODE END State_c_NS_Last*/

  return;
 800c394:	bf00      	nop
 800c396:	bf00      	nop
}
 800c398:	3708      	adds	r7, #8
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	20001794 	.word	0x20001794
 800c3a4:	20001798 	.word	0x20001798
 800c3a8:	0800f1f8 	.word	0x0800f1f8
 800c3ac:	0800f99c 	.word	0x0800f99c
 800c3b0:	0800f218 	.word	0x0800f218
 800c3b4:	0800f2d8 	.word	0x0800f2d8
 800c3b8:	0800f318 	.word	0x0800f318
 800c3bc:	0800f31c 	.word	0x0800f31c
 800c3c0:	0800f35c 	.word	0x0800f35c
 800c3c4:	0800f398 	.word	0x0800f398
 800c3c8:	0800f3dc 	.word	0x0800f3dc

0800c3cc <P2PS_APP_B1_Button_Action>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_APP_B1_Button_Action(void)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
	Custom_App_Context.State_Status = STOPPED;
 800c3d0:	4b04      	ldr	r3, [pc, #16]	; (800c3e4 <P2PS_APP_B1_Button_Action+0x18>)
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	705a      	strb	r2, [r3, #1]
  UTIL_SEQ_SetTask(1<<CFG_TASK_B1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	2004      	movs	r0, #4
 800c3da:	f000 fe01 	bl	800cfe0 <UTIL_SEQ_SetTask>

  return;
 800c3de:	bf00      	nop
}
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20001794 	.word	0x20001794

0800c3e8 <P2PS_APP_B2_Button_Action>:

void P2PS_APP_B2_Button_Action(void)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	af00      	add	r7, sp, #0
	Custom_App_Context.State_Status = PENDING;
 800c3ec:	4b04      	ldr	r3, [pc, #16]	; (800c400 <P2PS_APP_B2_Button_Action+0x18>)
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	705a      	strb	r2, [r3, #1]
  UTIL_SEQ_SetTask(1<<CFG_TASK_B2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	2008      	movs	r0, #8
 800c3f6:	f000 fdf3 	bl	800cfe0 <UTIL_SEQ_SetTask>

  return;
 800c3fa:	bf00      	nop
}
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	20001794 	.word	0x20001794

0800c404 <P2PS_APP_B3_Button_Action>:

void P2PS_APP_B3_Button_Action(void)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	af00      	add	r7, sp, #0
	Custom_App_Context.State_Status = DONE;
 800c408:	4b04      	ldr	r3, [pc, #16]	; (800c41c <P2PS_APP_B3_Button_Action+0x18>)
 800c40a:	2202      	movs	r2, #2
 800c40c:	705a      	strb	r2, [r3, #1]
  UTIL_SEQ_SetTask(1<<CFG_TASK_B3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800c40e:	2100      	movs	r1, #0
 800c410:	2010      	movs	r0, #16
 800c412:	f000 fde5 	bl	800cfe0 <UTIL_SEQ_SetTask>

  return;
 800c416:	bf00      	nop
}
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	20001794 	.word	0x20001794

0800c420 <Payload_To_Speed>:

uint16_t Payload_To_Speed(uint8_t p0, uint8_t p1)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	4603      	mov	r3, r0
 800c428:	460a      	mov	r2, r1
 800c42a:	71fb      	strb	r3, [r7, #7]
 800c42c:	4613      	mov	r3, r2
 800c42e:	71bb      	strb	r3, [r7, #6]
    uint16_t result = (p0 << 8) + p1;
 800c430:	79fb      	ldrb	r3, [r7, #7]
 800c432:	b29b      	uxth	r3, r3
 800c434:	021b      	lsls	r3, r3, #8
 800c436:	b29a      	uxth	r2, r3
 800c438:	79bb      	ldrb	r3, [r7, #6]
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	4413      	add	r3, r2
 800c43e:	81fb      	strh	r3, [r7, #14]
    return result;
 800c440:	89fb      	ldrh	r3, [r7, #14]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3714      	adds	r7, #20
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
	...

0800c450 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b08a      	sub	sp, #40	; 0x28
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800c458:	2300      	movs	r3, #0
 800c45a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	3301      	adds	r3, #1
 800c462:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800c464:	6a3b      	ldr	r3, [r7, #32]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	2bff      	cmp	r3, #255	; 0xff
 800c46a:	d15e      	bne.n	800c52a <Custom_STM_Event_Handler+0xda>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800c46c:	6a3b      	ldr	r3, [r7, #32]
 800c46e:	3302      	adds	r3, #2
 800c470:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	881b      	ldrh	r3, [r3, #0]
 800c476:	b29b      	uxth	r3, r3
 800c478:	f640 4214 	movw	r2, #3092	; 0xc14
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d04e      	beq.n	800c51e <Custom_STM_Event_Handler+0xce>
 800c480:	f640 4214 	movw	r2, #3092	; 0xc14
 800c484:	4293      	cmp	r3, r2
 800c486:	dc4c      	bgt.n	800c522 <Custom_STM_Event_Handler+0xd2>
 800c488:	f640 4201 	movw	r2, #3073	; 0xc01
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d003      	beq.n	800c498 <Custom_STM_Event_Handler+0x48>
 800c490:	f640 4213 	movw	r2, #3091	; 0xc13
 800c494:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800c496:	e047      	b.n	800c528 <Custom_STM_Event_Handler+0xd8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	3302      	adds	r3, #2
 800c49c:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomState_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	885b      	ldrh	r3, [r3, #2]
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	4b24      	ldr	r3, [pc, #144]	; (800c538 <Custom_STM_Event_Handler+0xe8>)
 800c4a8:	889b      	ldrh	r3, [r3, #4]
 800c4aa:	3302      	adds	r3, #2
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d119      	bne.n	800c4e4 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	7a1b      	ldrb	r3, [r3, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d002      	beq.n	800c4c4 <Custom_STM_Event_Handler+0x74>
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d008      	beq.n	800c4d4 <Custom_STM_Event_Handler+0x84>
              break;
 800c4c2:	e02b      	b.n	800c51c <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT;
 800c4c4:	2303      	movs	r3, #3
 800c4c6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800c4c8:	f107 0308 	add.w	r3, r7, #8
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7ff fdcf 	bl	800c070 <Custom_STM_App_Notification>
                break;
 800c4d2:	e023      	b.n	800c51c <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT;
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800c4d8:	f107 0308 	add.w	r3, r7, #8
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7ff fdc7 	bl	800c070 <Custom_STM_App_Notification>
                break;
 800c4e2:	e01b      	b.n	800c51c <Custom_STM_Event_Handler+0xcc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGoal_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	885b      	ldrh	r3, [r3, #2]
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	4b12      	ldr	r3, [pc, #72]	; (800c538 <Custom_STM_Event_Handler+0xe8>)
 800c4ee:	885b      	ldrh	r3, [r3, #2]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d117      	bne.n	800c526 <Custom_STM_Event_Handler+0xd6>
            return_value = SVCCTL_EvtAckFlowEnable;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	88db      	ldrh	r3, [r3, #6]
 800c504:	b29b      	uxth	r3, r3
 800c506:	b2db      	uxtb	r3, r3
 800c508:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	3308      	adds	r3, #8
 800c50e:	60fb      	str	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800c510:	f107 0308 	add.w	r3, r7, #8
 800c514:	4618      	mov	r0, r3
 800c516:	f7ff fdab 	bl	800c070 <Custom_STM_App_Notification>
          break;
 800c51a:	e004      	b.n	800c526 <Custom_STM_Event_Handler+0xd6>
 800c51c:	e003      	b.n	800c526 <Custom_STM_Event_Handler+0xd6>
          break;
 800c51e:	bf00      	nop
 800c520:	e004      	b.n	800c52c <Custom_STM_Event_Handler+0xdc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800c522:	bf00      	nop
 800c524:	e002      	b.n	800c52c <Custom_STM_Event_Handler+0xdc>
          break;
 800c526:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c528:	e000      	b.n	800c52c <Custom_STM_Event_Handler+0xdc>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800c52a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800c52c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800c530:	4618      	mov	r0, r3
 800c532:	3728      	adds	r7, #40	; 0x28
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	20001890 	.word	0x20001890

0800c53c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08c      	sub	sp, #48	; 0x30
 800c540:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c542:	2392      	movs	r3, #146	; 0x92
 800c544:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800c546:	4880      	ldr	r0, [pc, #512]	; (800c748 <SVCCTL_InitCustomSvc+0x20c>)
 800c548:	f7fd f9b8 	bl	80098bc <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800c54c:	2306      	movs	r3, #6
 800c54e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SERVER_ARM_UUID(uuid.Char_UUID_128);
 800c550:	238f      	movs	r3, #143	; 0x8f
 800c552:	713b      	strb	r3, [r7, #4]
 800c554:	23e5      	movs	r3, #229	; 0xe5
 800c556:	717b      	strb	r3, [r7, #5]
 800c558:	23b3      	movs	r3, #179	; 0xb3
 800c55a:	71bb      	strb	r3, [r7, #6]
 800c55c:	23d5      	movs	r3, #213	; 0xd5
 800c55e:	71fb      	strb	r3, [r7, #7]
 800c560:	232e      	movs	r3, #46	; 0x2e
 800c562:	723b      	strb	r3, [r7, #8]
 800c564:	237f      	movs	r3, #127	; 0x7f
 800c566:	727b      	strb	r3, [r7, #9]
 800c568:	234a      	movs	r3, #74	; 0x4a
 800c56a:	72bb      	strb	r3, [r7, #10]
 800c56c:	2398      	movs	r3, #152	; 0x98
 800c56e:	72fb      	strb	r3, [r7, #11]
 800c570:	232a      	movs	r3, #42	; 0x2a
 800c572:	733b      	strb	r3, [r7, #12]
 800c574:	2348      	movs	r3, #72	; 0x48
 800c576:	737b      	strb	r3, [r7, #13]
 800c578:	237a      	movs	r3, #122	; 0x7a
 800c57a:	73bb      	strb	r3, [r7, #14]
 800c57c:	23cc      	movs	r3, #204	; 0xcc
 800c57e:	73fb      	strb	r3, [r7, #15]
 800c580:	2340      	movs	r3, #64	; 0x40
 800c582:	743b      	strb	r3, [r7, #16]
 800c584:	23fe      	movs	r3, #254	; 0xfe
 800c586:	747b      	strb	r3, [r7, #17]
 800c588:	2300      	movs	r3, #0
 800c58a:	74bb      	strb	r3, [r7, #18]
 800c58c:	2300      	movs	r3, #0
 800c58e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800c590:	7dbb      	ldrb	r3, [r7, #22]
 800c592:	1d39      	adds	r1, r7, #4
 800c594:	4a6d      	ldr	r2, [pc, #436]	; (800c74c <SVCCTL_InitCustomSvc+0x210>)
 800c596:	9200      	str	r2, [sp, #0]
 800c598:	2201      	movs	r2, #1
 800c59a:	2002      	movs	r0, #2
 800c59c:	f7fc fc57 	bl	8008e4e <aci_gatt_add_service>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomArmHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00f      	beq.n	800c5ca <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: Arm, error code: 0x%x \n\r", ret);
 800c5aa:	4869      	ldr	r0, [pc, #420]	; (800c750 <SVCCTL_InitCustomSvc+0x214>)
 800c5ac:	f7fe f802 	bl	800a5b4 <DbgTraceGetFileName>
 800c5b0:	4601      	mov	r1, r0
 800c5b2:	f44f 739b 	mov.w	r3, #310	; 0x136
 800c5b6:	4a67      	ldr	r2, [pc, #412]	; (800c754 <SVCCTL_InitCustomSvc+0x218>)
 800c5b8:	4867      	ldr	r0, [pc, #412]	; (800c758 <SVCCTL_InitCustomSvc+0x21c>)
 800c5ba:	f000 fef3 	bl	800d3a4 <iprintf>
 800c5be:	7dfb      	ldrb	r3, [r7, #23]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	4866      	ldr	r0, [pc, #408]	; (800c75c <SVCCTL_InitCustomSvc+0x220>)
 800c5c4:	f000 feee 	bl	800d3a4 <iprintf>
 800c5c8:	e00c      	b.n	800c5e4 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: Arm \n\r");
 800c5ca:	4861      	ldr	r0, [pc, #388]	; (800c750 <SVCCTL_InitCustomSvc+0x214>)
 800c5cc:	f7fd fff2 	bl	800a5b4 <DbgTraceGetFileName>
 800c5d0:	4601      	mov	r1, r0
 800c5d2:	f44f 739d 	mov.w	r3, #314	; 0x13a
 800c5d6:	4a5f      	ldr	r2, [pc, #380]	; (800c754 <SVCCTL_InitCustomSvc+0x218>)
 800c5d8:	485f      	ldr	r0, [pc, #380]	; (800c758 <SVCCTL_InitCustomSvc+0x21c>)
 800c5da:	f000 fee3 	bl	800d3a4 <iprintf>
 800c5de:	4860      	ldr	r0, [pc, #384]	; (800c760 <SVCCTL_InitCustomSvc+0x224>)
 800c5e0:	f000 fee0 	bl	800d3a4 <iprintf>
  }

  /**
   *  Goal_Char
   */
  COPY_GOAL_CHAR_UUID(uuid.Char_UUID_128);
 800c5e4:	2319      	movs	r3, #25
 800c5e6:	713b      	strb	r3, [r7, #4]
 800c5e8:	23ed      	movs	r3, #237	; 0xed
 800c5ea:	717b      	strb	r3, [r7, #5]
 800c5ec:	2382      	movs	r3, #130	; 0x82
 800c5ee:	71bb      	strb	r3, [r7, #6]
 800c5f0:	23ae      	movs	r3, #174	; 0xae
 800c5f2:	71fb      	strb	r3, [r7, #7]
 800c5f4:	23ed      	movs	r3, #237	; 0xed
 800c5f6:	723b      	strb	r3, [r7, #8]
 800c5f8:	2321      	movs	r3, #33	; 0x21
 800c5fa:	727b      	strb	r3, [r7, #9]
 800c5fc:	234c      	movs	r3, #76	; 0x4c
 800c5fe:	72bb      	strb	r3, [r7, #10]
 800c600:	239d      	movs	r3, #157	; 0x9d
 800c602:	72fb      	strb	r3, [r7, #11]
 800c604:	2341      	movs	r3, #65	; 0x41
 800c606:	733b      	strb	r3, [r7, #12]
 800c608:	2345      	movs	r3, #69	; 0x45
 800c60a:	737b      	strb	r3, [r7, #13]
 800c60c:	2322      	movs	r3, #34	; 0x22
 800c60e:	73bb      	strb	r3, [r7, #14]
 800c610:	238e      	movs	r3, #142	; 0x8e
 800c612:	73fb      	strb	r3, [r7, #15]
 800c614:	2341      	movs	r3, #65	; 0x41
 800c616:	743b      	strb	r3, [r7, #16]
 800c618:	23fe      	movs	r3, #254	; 0xfe
 800c61a:	747b      	strb	r3, [r7, #17]
 800c61c:	2300      	movs	r3, #0
 800c61e:	74bb      	strb	r3, [r7, #18]
 800c620:	2300      	movs	r3, #0
 800c622:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomArmHdle,
 800c624:	4b49      	ldr	r3, [pc, #292]	; (800c74c <SVCCTL_InitCustomSvc+0x210>)
 800c626:	8818      	ldrh	r0, [r3, #0]
 800c628:	4b4e      	ldr	r3, [pc, #312]	; (800c764 <SVCCTL_InitCustomSvc+0x228>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	1d3a      	adds	r2, r7, #4
 800c630:	494d      	ldr	r1, [pc, #308]	; (800c768 <SVCCTL_InitCustomSvc+0x22c>)
 800c632:	9105      	str	r1, [sp, #20]
 800c634:	2101      	movs	r1, #1
 800c636:	9104      	str	r1, [sp, #16]
 800c638:	2110      	movs	r1, #16
 800c63a:	9103      	str	r1, [sp, #12]
 800c63c:	2101      	movs	r1, #1
 800c63e:	9102      	str	r1, [sp, #8]
 800c640:	2100      	movs	r1, #0
 800c642:	9101      	str	r1, [sp, #4]
 800c644:	2106      	movs	r1, #6
 800c646:	9100      	str	r1, [sp, #0]
 800c648:	2102      	movs	r1, #2
 800c64a:	f7fc fcd6 	bl	8008ffa <aci_gatt_add_char>
 800c64e:	4603      	mov	r3, r0
 800c650:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGoal_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c652:	7dfb      	ldrb	r3, [r7, #23]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00f      	beq.n	800c678 <SVCCTL_InitCustomSvc+0x13c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GOAL_C, error code: 0x%x \n\r", ret);
 800c658:	483d      	ldr	r0, [pc, #244]	; (800c750 <SVCCTL_InitCustomSvc+0x214>)
 800c65a:	f7fd ffab 	bl	800a5b4 <DbgTraceGetFileName>
 800c65e:	4601      	mov	r1, r0
 800c660:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 800c664:	4a3b      	ldr	r2, [pc, #236]	; (800c754 <SVCCTL_InitCustomSvc+0x218>)
 800c666:	483c      	ldr	r0, [pc, #240]	; (800c758 <SVCCTL_InitCustomSvc+0x21c>)
 800c668:	f000 fe9c 	bl	800d3a4 <iprintf>
 800c66c:	7dfb      	ldrb	r3, [r7, #23]
 800c66e:	4619      	mov	r1, r3
 800c670:	483e      	ldr	r0, [pc, #248]	; (800c76c <SVCCTL_InitCustomSvc+0x230>)
 800c672:	f000 fe97 	bl	800d3a4 <iprintf>
 800c676:	e00c      	b.n	800c692 <SVCCTL_InitCustomSvc+0x156>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GOAL_C \n\r");
 800c678:	4835      	ldr	r0, [pc, #212]	; (800c750 <SVCCTL_InitCustomSvc+0x214>)
 800c67a:	f7fd ff9b 	bl	800a5b4 <DbgTraceGetFileName>
 800c67e:	4601      	mov	r1, r0
 800c680:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800c684:	4a33      	ldr	r2, [pc, #204]	; (800c754 <SVCCTL_InitCustomSvc+0x218>)
 800c686:	4834      	ldr	r0, [pc, #208]	; (800c758 <SVCCTL_InitCustomSvc+0x21c>)
 800c688:	f000 fe8c 	bl	800d3a4 <iprintf>
 800c68c:	4838      	ldr	r0, [pc, #224]	; (800c770 <SVCCTL_InitCustomSvc+0x234>)
 800c68e:	f000 fe89 	bl	800d3a4 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  State_Char
   */
  COPY_STATE_CHAR_UUID(uuid.Char_UUID_128);
 800c692:	2319      	movs	r3, #25
 800c694:	713b      	strb	r3, [r7, #4]
 800c696:	23ed      	movs	r3, #237	; 0xed
 800c698:	717b      	strb	r3, [r7, #5]
 800c69a:	2382      	movs	r3, #130	; 0x82
 800c69c:	71bb      	strb	r3, [r7, #6]
 800c69e:	23ae      	movs	r3, #174	; 0xae
 800c6a0:	71fb      	strb	r3, [r7, #7]
 800c6a2:	23ed      	movs	r3, #237	; 0xed
 800c6a4:	723b      	strb	r3, [r7, #8]
 800c6a6:	2321      	movs	r3, #33	; 0x21
 800c6a8:	727b      	strb	r3, [r7, #9]
 800c6aa:	234c      	movs	r3, #76	; 0x4c
 800c6ac:	72bb      	strb	r3, [r7, #10]
 800c6ae:	239d      	movs	r3, #157	; 0x9d
 800c6b0:	72fb      	strb	r3, [r7, #11]
 800c6b2:	2341      	movs	r3, #65	; 0x41
 800c6b4:	733b      	strb	r3, [r7, #12]
 800c6b6:	2345      	movs	r3, #69	; 0x45
 800c6b8:	737b      	strb	r3, [r7, #13]
 800c6ba:	2322      	movs	r3, #34	; 0x22
 800c6bc:	73bb      	strb	r3, [r7, #14]
 800c6be:	238e      	movs	r3, #142	; 0x8e
 800c6c0:	73fb      	strb	r3, [r7, #15]
 800c6c2:	2342      	movs	r3, #66	; 0x42
 800c6c4:	743b      	strb	r3, [r7, #16]
 800c6c6:	23fe      	movs	r3, #254	; 0xfe
 800c6c8:	747b      	strb	r3, [r7, #17]
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	74bb      	strb	r3, [r7, #18]
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomArmHdle,
 800c6d2:	4b1e      	ldr	r3, [pc, #120]	; (800c74c <SVCCTL_InitCustomSvc+0x210>)
 800c6d4:	8818      	ldrh	r0, [r3, #0]
 800c6d6:	4b27      	ldr	r3, [pc, #156]	; (800c774 <SVCCTL_InitCustomSvc+0x238>)
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	1d3a      	adds	r2, r7, #4
 800c6de:	4926      	ldr	r1, [pc, #152]	; (800c778 <SVCCTL_InitCustomSvc+0x23c>)
 800c6e0:	9105      	str	r1, [sp, #20]
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	9104      	str	r1, [sp, #16]
 800c6e6:	2110      	movs	r1, #16
 800c6e8:	9103      	str	r1, [sp, #12]
 800c6ea:	2101      	movs	r1, #1
 800c6ec:	9102      	str	r1, [sp, #8]
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	9101      	str	r1, [sp, #4]
 800c6f2:	2110      	movs	r1, #16
 800c6f4:	9100      	str	r1, [sp, #0]
 800c6f6:	2102      	movs	r1, #2
 800c6f8:	f7fc fc7f 	bl	8008ffa <aci_gatt_add_char>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomState_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c700:	7dfb      	ldrb	r3, [r7, #23]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00f      	beq.n	800c726 <SVCCTL_InitCustomSvc+0x1ea>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : STATE_C, error code: 0x%x \n\r", ret);
 800c706:	4812      	ldr	r0, [pc, #72]	; (800c750 <SVCCTL_InitCustomSvc+0x214>)
 800c708:	f7fd ff54 	bl	800a5b4 <DbgTraceGetFileName>
 800c70c:	4601      	mov	r1, r0
 800c70e:	f44f 73b3 	mov.w	r3, #358	; 0x166
 800c712:	4a10      	ldr	r2, [pc, #64]	; (800c754 <SVCCTL_InitCustomSvc+0x218>)
 800c714:	4810      	ldr	r0, [pc, #64]	; (800c758 <SVCCTL_InitCustomSvc+0x21c>)
 800c716:	f000 fe45 	bl	800d3a4 <iprintf>
 800c71a:	7dfb      	ldrb	r3, [r7, #23]
 800c71c:	4619      	mov	r1, r3
 800c71e:	4817      	ldr	r0, [pc, #92]	; (800c77c <SVCCTL_InitCustomSvc+0x240>)
 800c720:	f000 fe40 	bl	800d3a4 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800c724:	e00d      	b.n	800c742 <SVCCTL_InitCustomSvc+0x206>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : STATE_C \n\r");
 800c726:	480a      	ldr	r0, [pc, #40]	; (800c750 <SVCCTL_InitCustomSvc+0x214>)
 800c728:	f7fd ff44 	bl	800a5b4 <DbgTraceGetFileName>
 800c72c:	4601      	mov	r1, r0
 800c72e:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 800c732:	4a08      	ldr	r2, [pc, #32]	; (800c754 <SVCCTL_InitCustomSvc+0x218>)
 800c734:	4808      	ldr	r0, [pc, #32]	; (800c758 <SVCCTL_InitCustomSvc+0x21c>)
 800c736:	f000 fe35 	bl	800d3a4 <iprintf>
 800c73a:	4811      	ldr	r0, [pc, #68]	; (800c780 <SVCCTL_InitCustomSvc+0x244>)
 800c73c:	f000 fe32 	bl	800d3a4 <iprintf>
  return;
 800c740:	bf00      	nop
}
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	0800c451 	.word	0x0800c451
 800c74c:	20001890 	.word	0x20001890
 800c750:	0800f424 	.word	0x0800f424
 800c754:	0800f9c0 	.word	0x0800f9c0
 800c758:	0800f444 	.word	0x0800f444
 800c75c:	0800f458 	.word	0x0800f458
 800c760:	0800f49c 	.word	0x0800f49c
 800c764:	2000002d 	.word	0x2000002d
 800c768:	20001892 	.word	0x20001892
 800c76c:	0800f4cc 	.word	0x0800f4cc
 800c770:	0800f514 	.word	0x0800f514
 800c774:	2000002e 	.word	0x2000002e
 800c778:	20001894 	.word	0x20001894
 800c77c:	0800f548 	.word	0x0800f548
 800c780:	0800f590 	.word	0x0800f590

0800c784 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b086      	sub	sp, #24
 800c788:	af02      	add	r7, sp, #8
 800c78a:	4603      	mov	r3, r0
 800c78c:	6039      	str	r1, [r7, #0]
 800c78e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c790:	2392      	movs	r3, #146	; 0x92
 800c792:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800c794:	79fb      	ldrb	r3, [r7, #7]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d002      	beq.n	800c7a0 <Custom_STM_App_Update_Char+0x1c>
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d02f      	beq.n	800c7fe <Custom_STM_App_Update_Char+0x7a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800c79e:	e05d      	b.n	800c85c <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomArmHdle,
 800c7a0:	4b31      	ldr	r3, [pc, #196]	; (800c868 <Custom_STM_App_Update_Char+0xe4>)
 800c7a2:	8818      	ldrh	r0, [r3, #0]
 800c7a4:	4b30      	ldr	r3, [pc, #192]	; (800c868 <Custom_STM_App_Update_Char+0xe4>)
 800c7a6:	8859      	ldrh	r1, [r3, #2]
 800c7a8:	4b30      	ldr	r3, [pc, #192]	; (800c86c <Custom_STM_App_Update_Char+0xe8>)
 800c7aa:	781a      	ldrb	r2, [r3, #0]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f7fc fd29 	bl	800920a <aci_gatt_update_char_value>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00f      	beq.n	800c7e2 <Custom_STM_App_Update_Char+0x5e>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value GOAL_C command, result : 0x%x \n\r", ret);
 800c7c2:	482b      	ldr	r0, [pc, #172]	; (800c870 <Custom_STM_App_Update_Char+0xec>)
 800c7c4:	f7fd fef6 	bl	800a5b4 <DbgTraceGetFileName>
 800c7c8:	4601      	mov	r1, r0
 800c7ca:	f240 1391 	movw	r3, #401	; 0x191
 800c7ce:	4a29      	ldr	r2, [pc, #164]	; (800c874 <Custom_STM_App_Update_Char+0xf0>)
 800c7d0:	4829      	ldr	r0, [pc, #164]	; (800c878 <Custom_STM_App_Update_Char+0xf4>)
 800c7d2:	f000 fde7 	bl	800d3a4 <iprintf>
 800c7d6:	7bfb      	ldrb	r3, [r7, #15]
 800c7d8:	4619      	mov	r1, r3
 800c7da:	4828      	ldr	r0, [pc, #160]	; (800c87c <Custom_STM_App_Update_Char+0xf8>)
 800c7dc:	f000 fde2 	bl	800d3a4 <iprintf>
      break;
 800c7e0:	e03c      	b.n	800c85c <Custom_STM_App_Update_Char+0xd8>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GOAL_C command\n\r");
 800c7e2:	4823      	ldr	r0, [pc, #140]	; (800c870 <Custom_STM_App_Update_Char+0xec>)
 800c7e4:	f7fd fee6 	bl	800a5b4 <DbgTraceGetFileName>
 800c7e8:	4601      	mov	r1, r0
 800c7ea:	f240 1395 	movw	r3, #405	; 0x195
 800c7ee:	4a21      	ldr	r2, [pc, #132]	; (800c874 <Custom_STM_App_Update_Char+0xf0>)
 800c7f0:	4821      	ldr	r0, [pc, #132]	; (800c878 <Custom_STM_App_Update_Char+0xf4>)
 800c7f2:	f000 fdd7 	bl	800d3a4 <iprintf>
 800c7f6:	4822      	ldr	r0, [pc, #136]	; (800c880 <Custom_STM_App_Update_Char+0xfc>)
 800c7f8:	f000 fdd4 	bl	800d3a4 <iprintf>
      break;
 800c7fc:	e02e      	b.n	800c85c <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomArmHdle,
 800c7fe:	4b1a      	ldr	r3, [pc, #104]	; (800c868 <Custom_STM_App_Update_Char+0xe4>)
 800c800:	8818      	ldrh	r0, [r3, #0]
 800c802:	4b19      	ldr	r3, [pc, #100]	; (800c868 <Custom_STM_App_Update_Char+0xe4>)
 800c804:	8899      	ldrh	r1, [r3, #4]
 800c806:	4b1f      	ldr	r3, [pc, #124]	; (800c884 <Custom_STM_App_Update_Char+0x100>)
 800c808:	781a      	ldrb	r2, [r3, #0]
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	4613      	mov	r3, r2
 800c810:	2200      	movs	r2, #0
 800c812:	f7fc fcfa 	bl	800920a <aci_gatt_update_char_value>
 800c816:	4603      	mov	r3, r0
 800c818:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00f      	beq.n	800c840 <Custom_STM_App_Update_Char+0xbc>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value STATE_C command, result : 0x%x \n\r", ret);
 800c820:	4813      	ldr	r0, [pc, #76]	; (800c870 <Custom_STM_App_Update_Char+0xec>)
 800c822:	f7fd fec7 	bl	800a5b4 <DbgTraceGetFileName>
 800c826:	4601      	mov	r1, r0
 800c828:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800c82c:	4a11      	ldr	r2, [pc, #68]	; (800c874 <Custom_STM_App_Update_Char+0xf0>)
 800c82e:	4812      	ldr	r0, [pc, #72]	; (800c878 <Custom_STM_App_Update_Char+0xf4>)
 800c830:	f000 fdb8 	bl	800d3a4 <iprintf>
 800c834:	7bfb      	ldrb	r3, [r7, #15]
 800c836:	4619      	mov	r1, r3
 800c838:	4813      	ldr	r0, [pc, #76]	; (800c888 <Custom_STM_App_Update_Char+0x104>)
 800c83a:	f000 fdb3 	bl	800d3a4 <iprintf>
      break;
 800c83e:	e00c      	b.n	800c85a <Custom_STM_App_Update_Char+0xd6>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value STATE_C command\n\r");
 800c840:	480b      	ldr	r0, [pc, #44]	; (800c870 <Custom_STM_App_Update_Char+0xec>)
 800c842:	f7fd feb7 	bl	800a5b4 <DbgTraceGetFileName>
 800c846:	4601      	mov	r1, r0
 800c848:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800c84c:	4a09      	ldr	r2, [pc, #36]	; (800c874 <Custom_STM_App_Update_Char+0xf0>)
 800c84e:	480a      	ldr	r0, [pc, #40]	; (800c878 <Custom_STM_App_Update_Char+0xf4>)
 800c850:	f000 fda8 	bl	800d3a4 <iprintf>
 800c854:	480d      	ldr	r0, [pc, #52]	; (800c88c <Custom_STM_App_Update_Char+0x108>)
 800c856:	f000 fda5 	bl	800d3a4 <iprintf>
      break;
 800c85a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	20001890 	.word	0x20001890
 800c86c:	2000002d 	.word	0x2000002d
 800c870:	0800f424 	.word	0x0800f424
 800c874:	0800f9d8 	.word	0x0800f9d8
 800c878:	0800f444 	.word	0x0800f444
 800c87c:	0800f5c4 	.word	0x0800f5c4
 800c880:	0800f60c 	.word	0x0800f60c
 800c884:	2000002e 	.word	0x2000002e
 800c888:	0800f644 	.word	0x0800f644
 800c88c:	0800f68c 	.word	0x0800f68c

0800c890 <LL_PWR_EnableBootC2>:
{
 800c890:	b480      	push	{r7}
 800c892:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c894:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <LL_PWR_EnableBootC2+0x1c>)
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	4a04      	ldr	r2, [pc, #16]	; (800c8ac <LL_PWR_EnableBootC2+0x1c>)
 800c89a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c89e:	60d3      	str	r3, [r2, #12]
}
 800c8a0:	bf00      	nop
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	58000400 	.word	0x58000400

0800c8b0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c8b8:	4b06      	ldr	r3, [pc, #24]	; (800c8d4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c8ba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c8be:	4905      	ldr	r1, [pc, #20]	; (800c8d4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800c8c8:	bf00      	nop
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	58000800 	.word	0x58000800

0800c8d8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c8e0:	4b05      	ldr	r3, [pc, #20]	; (800c8f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c8e2:	6a1a      	ldr	r2, [r3, #32]
 800c8e4:	4904      	ldr	r1, [pc, #16]	; (800c8f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	620b      	str	r3, [r1, #32]
}
 800c8ec:	bf00      	nop
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr
 800c8f8:	58000800 	.word	0x58000800

0800c8fc <LL_AHB3_GRP1_EnableClock>:
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c908:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c90a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4313      	orrs	r3, r2
 800c912:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c918:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4013      	ands	r3, r2
 800c91e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c920:	68fb      	ldr	r3, [r7, #12]
}
 800c922:	bf00      	nop
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c92e:	b480      	push	{r7}
 800c930:	b085      	sub	sp, #20
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c93a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c93e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4313      	orrs	r3, r2
 800c946:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c94a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c94e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4013      	ands	r3, r2
 800c956:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c958:	68fb      	ldr	r3, [r7, #12]
}
 800c95a:	bf00      	nop
 800c95c:	3714      	adds	r7, #20
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800c966:	b480      	push	{r7}
 800c968:	b083      	sub	sp, #12
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	601a      	str	r2, [r3, #0]
}
 800c97a:	bf00      	nop
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800c986:	b480      	push	{r7}
 800c988:	b083      	sub	sp, #12
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f043 0201 	orr.w	r2, r3, #1
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	601a      	str	r2, [r3, #0]
}
 800c99a:	bf00      	nop
 800c99c:	370c      	adds	r7, #12
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr

0800c9a6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c9a6:	b480      	push	{r7}
 800c9a8:	b083      	sub	sp, #12
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	685a      	ldr	r2, [r3, #4]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	041b      	lsls	r3, r3, #16
 800c9b8:	43db      	mvns	r3, r3
 800c9ba:	401a      	ands	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	605a      	str	r2, [r3, #4]
}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	685a      	ldr	r2, [r3, #4]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	041b      	lsls	r3, r3, #16
 800c9de:	431a      	orrs	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	605a      	str	r2, [r3, #4]
}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	685a      	ldr	r2, [r3, #4]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	43db      	mvns	r3, r3
 800ca02:	401a      	ands	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	605a      	str	r2, [r3, #4]
}
 800ca08:	bf00      	nop
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	609a      	str	r2, [r3, #8]
}
 800ca24:	bf00      	nop
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	041a      	lsls	r2, r3, #16
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	609a      	str	r2, [r3, #8]
}
 800ca42:	bf00      	nop
 800ca44:	370c      	adds	r7, #12
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr

0800ca4e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800ca4e:	b480      	push	{r7}
 800ca50:	b083      	sub	sp, #12
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	68da      	ldr	r2, [r3, #12]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	4013      	ands	r3, r2
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d101      	bne.n	800ca6a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800ca66:	2301      	movs	r3, #1
 800ca68:	e000      	b.n	800ca6c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	69da      	ldr	r2, [r3, #28]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	4013      	ands	r3, r2
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d101      	bne.n	800ca94 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800ca90:	2301      	movs	r3, #1
 800ca92:	e000      	b.n	800ca96 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
	...

0800caa4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800caa8:	2102      	movs	r1, #2
 800caaa:	4818      	ldr	r0, [pc, #96]	; (800cb0c <HW_IPCC_Rx_Handler+0x68>)
 800caac:	f7ff ffe4 	bl	800ca78 <LL_C2_IPCC_IsActiveFlag_CHx>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d008      	beq.n	800cac8 <HW_IPCC_Rx_Handler+0x24>
 800cab6:	4b15      	ldr	r3, [pc, #84]	; (800cb0c <HW_IPCC_Rx_Handler+0x68>)
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	f003 0302 	and.w	r3, r3, #2
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d102      	bne.n	800cac8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800cac2:	f000 f8d5 	bl	800cc70 <HW_IPCC_SYS_EvtHandler>
 800cac6:	e01e      	b.n	800cb06 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800cac8:	2101      	movs	r1, #1
 800caca:	4810      	ldr	r0, [pc, #64]	; (800cb0c <HW_IPCC_Rx_Handler+0x68>)
 800cacc:	f7ff ffd4 	bl	800ca78 <LL_C2_IPCC_IsActiveFlag_CHx>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d008      	beq.n	800cae8 <HW_IPCC_Rx_Handler+0x44>
 800cad6:	4b0d      	ldr	r3, [pc, #52]	; (800cb0c <HW_IPCC_Rx_Handler+0x68>)
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	f003 0301 	and.w	r3, r3, #1
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d102      	bne.n	800cae8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800cae2:	f000 f889 	bl	800cbf8 <HW_IPCC_BLE_EvtHandler>
 800cae6:	e00e      	b.n	800cb06 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800cae8:	2108      	movs	r1, #8
 800caea:	4808      	ldr	r0, [pc, #32]	; (800cb0c <HW_IPCC_Rx_Handler+0x68>)
 800caec:	f7ff ffc4 	bl	800ca78 <LL_C2_IPCC_IsActiveFlag_CHx>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d008      	beq.n	800cb08 <HW_IPCC_Rx_Handler+0x64>
 800caf6:	4b05      	ldr	r3, [pc, #20]	; (800cb0c <HW_IPCC_Rx_Handler+0x68>)
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f003 0308 	and.w	r3, r3, #8
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d102      	bne.n	800cb08 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800cb02:	f000 f901 	bl	800cd08 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800cb06:	bf00      	nop
 800cb08:	bf00      	nop
}
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	58000c00 	.word	0x58000c00

0800cb10 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800cb14:	2102      	movs	r1, #2
 800cb16:	4818      	ldr	r0, [pc, #96]	; (800cb78 <HW_IPCC_Tx_Handler+0x68>)
 800cb18:	f7ff ff99 	bl	800ca4e <LL_C1_IPCC_IsActiveFlag_CHx>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d108      	bne.n	800cb34 <HW_IPCC_Tx_Handler+0x24>
 800cb22:	4b15      	ldr	r3, [pc, #84]	; (800cb78 <HW_IPCC_Tx_Handler+0x68>)
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d102      	bne.n	800cb34 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800cb2e:	f000 f893 	bl	800cc58 <HW_IPCC_SYS_CmdEvtHandler>
 800cb32:	e01e      	b.n	800cb72 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800cb34:	2108      	movs	r1, #8
 800cb36:	4810      	ldr	r0, [pc, #64]	; (800cb78 <HW_IPCC_Tx_Handler+0x68>)
 800cb38:	f7ff ff89 	bl	800ca4e <LL_C1_IPCC_IsActiveFlag_CHx>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d108      	bne.n	800cb54 <HW_IPCC_Tx_Handler+0x44>
 800cb42:	4b0d      	ldr	r3, [pc, #52]	; (800cb78 <HW_IPCC_Tx_Handler+0x68>)
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d102      	bne.n	800cb54 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800cb4e:	f000 f8bd 	bl	800cccc <HW_IPCC_MM_FreeBufHandler>
 800cb52:	e00e      	b.n	800cb72 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800cb54:	2120      	movs	r1, #32
 800cb56:	4808      	ldr	r0, [pc, #32]	; (800cb78 <HW_IPCC_Tx_Handler+0x68>)
 800cb58:	f7ff ff79 	bl	800ca4e <LL_C1_IPCC_IsActiveFlag_CHx>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d108      	bne.n	800cb74 <HW_IPCC_Tx_Handler+0x64>
 800cb62:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <HW_IPCC_Tx_Handler+0x68>)
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d102      	bne.n	800cb74 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800cb6e:	f000 f84f 	bl	800cc10 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800cb72:	bf00      	nop
 800cb74:	bf00      	nop
}
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	58000c00 	.word	0x58000c00

0800cb7c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800cb80:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cb84:	f7ff fed3 	bl	800c92e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800cb88:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cb8c:	f7ff fea4 	bl	800c8d8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800cb90:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cb94:	f7ff fe8c 	bl	800c8b0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800cb98:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800cb9a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800cb9c:	f7ff fe78 	bl	800c890 <LL_PWR_EnableBootC2>

  return;
 800cba0:	bf00      	nop
}
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800cba8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cbac:	f7ff fea6 	bl	800c8fc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800cbb0:	4806      	ldr	r0, [pc, #24]	; (800cbcc <HW_IPCC_Init+0x28>)
 800cbb2:	f7ff fee8 	bl	800c986 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800cbb6:	4805      	ldr	r0, [pc, #20]	; (800cbcc <HW_IPCC_Init+0x28>)
 800cbb8:	f7ff fed5 	bl	800c966 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800cbbc:	202c      	movs	r0, #44	; 0x2c
 800cbbe:	f7f6 fbe4 	bl	800338a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800cbc2:	202d      	movs	r0, #45	; 0x2d
 800cbc4:	f7f6 fbe1 	bl	800338a <HAL_NVIC_EnableIRQ>

  return;
 800cbc8:	bf00      	nop
}
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	58000c00 	.word	0x58000c00

0800cbd0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	4802      	ldr	r0, [pc, #8]	; (800cbe0 <HW_IPCC_BLE_Init+0x10>)
 800cbd8:	f7ff ff0a 	bl	800c9f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cbdc:	bf00      	nop
}
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	58000c00 	.word	0x58000c00

0800cbe4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800cbe8:	2101      	movs	r1, #1
 800cbea:	4802      	ldr	r0, [pc, #8]	; (800cbf4 <HW_IPCC_BLE_SendCmd+0x10>)
 800cbec:	f7ff ff20 	bl	800ca30 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800cbf0:	bf00      	nop
}
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	58000c00 	.word	0x58000c00

0800cbf8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800cbfc:	f7fd fb22 	bl	800a244 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800cc00:	2101      	movs	r1, #1
 800cc02:	4802      	ldr	r0, [pc, #8]	; (800cc0c <HW_IPCC_BLE_EvtHandler+0x14>)
 800cc04:	f7ff ff06 	bl	800ca14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cc08:	bf00      	nop
}
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	58000c00 	.word	0x58000c00

0800cc10 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800cc14:	2120      	movs	r1, #32
 800cc16:	4803      	ldr	r0, [pc, #12]	; (800cc24 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800cc18:	f7ff fed8 	bl	800c9cc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800cc1c:	f7fd fb42 	bl	800a2a4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800cc20:	bf00      	nop
}
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	58000c00 	.word	0x58000c00

0800cc28 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800cc2c:	2102      	movs	r1, #2
 800cc2e:	4802      	ldr	r0, [pc, #8]	; (800cc38 <HW_IPCC_SYS_Init+0x10>)
 800cc30:	f7ff fede 	bl	800c9f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cc34:	bf00      	nop
}
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	58000c00 	.word	0x58000c00

0800cc3c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cc40:	2102      	movs	r1, #2
 800cc42:	4804      	ldr	r0, [pc, #16]	; (800cc54 <HW_IPCC_SYS_SendCmd+0x18>)
 800cc44:	f7ff fef4 	bl	800ca30 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cc48:	2102      	movs	r1, #2
 800cc4a:	4802      	ldr	r0, [pc, #8]	; (800cc54 <HW_IPCC_SYS_SendCmd+0x18>)
 800cc4c:	f7ff feab 	bl	800c9a6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800cc50:	bf00      	nop
}
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	58000c00 	.word	0x58000c00

0800cc58 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cc5c:	2102      	movs	r1, #2
 800cc5e:	4803      	ldr	r0, [pc, #12]	; (800cc6c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800cc60:	f7ff feb4 	bl	800c9cc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800cc64:	f7fd fb6e 	bl	800a344 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800cc68:	bf00      	nop
}
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	58000c00 	.word	0x58000c00

0800cc70 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800cc74:	f7fd fb7c 	bl	800a370 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800cc78:	2102      	movs	r1, #2
 800cc7a:	4802      	ldr	r0, [pc, #8]	; (800cc84 <HW_IPCC_SYS_EvtHandler+0x14>)
 800cc7c:	f7ff feca 	bl	800ca14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cc80:	bf00      	nop
}
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	58000c00 	.word	0x58000c00

0800cc88 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800cc90:	2108      	movs	r1, #8
 800cc92:	480c      	ldr	r0, [pc, #48]	; (800ccc4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cc94:	f7ff fedb 	bl	800ca4e <LL_C1_IPCC_IsActiveFlag_CHx>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d007      	beq.n	800ccae <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800cc9e:	4a0a      	ldr	r2, [pc, #40]	; (800ccc8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cca4:	2108      	movs	r1, #8
 800cca6:	4807      	ldr	r0, [pc, #28]	; (800ccc4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cca8:	f7ff fe7d 	bl	800c9a6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800ccac:	e006      	b.n	800ccbc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ccb2:	2108      	movs	r1, #8
 800ccb4:	4803      	ldr	r0, [pc, #12]	; (800ccc4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800ccb6:	f7ff febb 	bl	800ca30 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800ccba:	bf00      	nop
}
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	58000c00 	.word	0x58000c00
 800ccc8:	20001898 	.word	0x20001898

0800cccc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ccd0:	2108      	movs	r1, #8
 800ccd2:	4806      	ldr	r0, [pc, #24]	; (800ccec <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ccd4:	f7ff fe7a 	bl	800c9cc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800ccd8:	4b05      	ldr	r3, [pc, #20]	; (800ccf0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ccde:	2108      	movs	r1, #8
 800cce0:	4802      	ldr	r0, [pc, #8]	; (800ccec <HW_IPCC_MM_FreeBufHandler+0x20>)
 800cce2:	f7ff fea5 	bl	800ca30 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800cce6:	bf00      	nop
}
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	58000c00 	.word	0x58000c00
 800ccf0:	20001898 	.word	0x20001898

0800ccf4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ccf8:	2108      	movs	r1, #8
 800ccfa:	4802      	ldr	r0, [pc, #8]	; (800cd04 <HW_IPCC_TRACES_Init+0x10>)
 800ccfc:	f7ff fe78 	bl	800c9f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cd00:	bf00      	nop
}
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	58000c00 	.word	0x58000c00

0800cd08 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800cd0c:	f7fd fbd8 	bl	800a4c0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800cd10:	2108      	movs	r1, #8
 800cd12:	4802      	ldr	r0, [pc, #8]	; (800cd1c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800cd14:	f7ff fe7e 	bl	800ca14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cd18:	bf00      	nop
}
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	58000c00 	.word	0x58000c00

0800cd20 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800cd20:	b480      	push	{r7}
 800cd22:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800cd24:	4b05      	ldr	r3, [pc, #20]	; (800cd3c <UTIL_LPM_Init+0x1c>)
 800cd26:	2200      	movs	r2, #0
 800cd28:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800cd2a:	4b05      	ldr	r3, [pc, #20]	; (800cd40 <UTIL_LPM_Init+0x20>)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800cd30:	bf00      	nop
 800cd32:	46bd      	mov	sp, r7
 800cd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd38:	4770      	bx	lr
 800cd3a:	bf00      	nop
 800cd3c:	2000189c 	.word	0x2000189c
 800cd40:	200018a0 	.word	0x200018a0

0800cd44 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800cd44:	b480      	push	{r7}
 800cd46:	b087      	sub	sp, #28
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd50:	f3ef 8310 	mrs	r3, PRIMASK
 800cd54:	613b      	str	r3, [r7, #16]
  return(result);
 800cd56:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800cd58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd5a:	b672      	cpsid	i
}
 800cd5c:	bf00      	nop
  
  switch(state)
 800cd5e:	78fb      	ldrb	r3, [r7, #3]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d008      	beq.n	800cd76 <UTIL_LPM_SetOffMode+0x32>
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d10e      	bne.n	800cd86 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800cd68:	4b0d      	ldr	r3, [pc, #52]	; (800cda0 <UTIL_LPM_SetOffMode+0x5c>)
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	4a0b      	ldr	r2, [pc, #44]	; (800cda0 <UTIL_LPM_SetOffMode+0x5c>)
 800cd72:	6013      	str	r3, [r2, #0]
      break;
 800cd74:	e008      	b.n	800cd88 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	43da      	mvns	r2, r3
 800cd7a:	4b09      	ldr	r3, [pc, #36]	; (800cda0 <UTIL_LPM_SetOffMode+0x5c>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4013      	ands	r3, r2
 800cd80:	4a07      	ldr	r2, [pc, #28]	; (800cda0 <UTIL_LPM_SetOffMode+0x5c>)
 800cd82:	6013      	str	r3, [r2, #0]
      break;
 800cd84:	e000      	b.n	800cd88 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800cd86:	bf00      	nop
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f383 8810 	msr	PRIMASK, r3
}
 800cd92:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cd94:	bf00      	nop
 800cd96:	371c      	adds	r7, #28
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	200018a0 	.word	0x200018a0

0800cda4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b090      	sub	sp, #64	; 0x40
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800cdac:	4b73      	ldr	r3, [pc, #460]	; (800cf7c <UTIL_SEQ_Run+0x1d8>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800cdb2:	4b72      	ldr	r3, [pc, #456]	; (800cf7c <UTIL_SEQ_Run+0x1d8>)
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4013      	ands	r3, r2
 800cdba:	4a70      	ldr	r2, [pc, #448]	; (800cf7c <UTIL_SEQ_Run+0x1d8>)
 800cdbc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800cdbe:	4b70      	ldr	r3, [pc, #448]	; (800cf80 <UTIL_SEQ_Run+0x1dc>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800cdc4:	4b6f      	ldr	r3, [pc, #444]	; (800cf84 <UTIL_SEQ_Run+0x1e0>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cdca:	4b6f      	ldr	r3, [pc, #444]	; (800cf88 <UTIL_SEQ_Run+0x1e4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800cdd0:	4b6e      	ldr	r3, [pc, #440]	; (800cf8c <UTIL_SEQ_Run+0x1e8>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cdd6:	e08d      	b.n	800cef4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cddc:	e002      	b.n	800cde4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800cdde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde0:	3301      	adds	r3, #1
 800cde2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cde4:	4a6a      	ldr	r2, [pc, #424]	; (800cf90 <UTIL_SEQ_Run+0x1ec>)
 800cde6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdee:	401a      	ands	r2, r3
 800cdf0:	4b62      	ldr	r3, [pc, #392]	; (800cf7c <UTIL_SEQ_Run+0x1d8>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d0f1      	beq.n	800cdde <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800cdfa:	4a65      	ldr	r2, [pc, #404]	; (800cf90 <UTIL_SEQ_Run+0x1ec>)
 800cdfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdfe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ce02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce04:	401a      	ands	r2, r3
 800ce06:	4b5d      	ldr	r3, [pc, #372]	; (800cf7c <UTIL_SEQ_Run+0x1d8>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4013      	ands	r3, r2
 800ce0c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800ce0e:	4a60      	ldr	r2, [pc, #384]	; (800cf90 <UTIL_SEQ_Run+0x1ec>)
 800ce10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	4413      	add	r3, r2
 800ce16:	685a      	ldr	r2, [r3, #4]
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	4013      	ands	r3, r2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d106      	bne.n	800ce2e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ce20:	4a5b      	ldr	r2, [pc, #364]	; (800cf90 <UTIL_SEQ_Run+0x1ec>)
 800ce22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce24:	00db      	lsls	r3, r3, #3
 800ce26:	4413      	add	r3, r2
 800ce28:	f04f 32ff 	mov.w	r2, #4294967295
 800ce2c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ce2e:	4a58      	ldr	r2, [pc, #352]	; (800cf90 <UTIL_SEQ_Run+0x1ec>)
 800ce30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce32:	00db      	lsls	r3, r3, #3
 800ce34:	4413      	add	r3, r2
 800ce36:	685a      	ldr	r2, [r3, #4]
 800ce38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3a:	4013      	ands	r3, r2
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 f9b3 	bl	800d1a8 <SEQ_BitPosition>
 800ce42:	4603      	mov	r3, r0
 800ce44:	461a      	mov	r2, r3
 800ce46:	4b53      	ldr	r3, [pc, #332]	; (800cf94 <UTIL_SEQ_Run+0x1f0>)
 800ce48:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ce4a:	4a51      	ldr	r2, [pc, #324]	; (800cf90 <UTIL_SEQ_Run+0x1ec>)
 800ce4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce4e:	00db      	lsls	r3, r3, #3
 800ce50:	4413      	add	r3, r2
 800ce52:	685a      	ldr	r2, [r3, #4]
 800ce54:	4b4f      	ldr	r3, [pc, #316]	; (800cf94 <UTIL_SEQ_Run+0x1f0>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2101      	movs	r1, #1
 800ce5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce5e:	43db      	mvns	r3, r3
 800ce60:	401a      	ands	r2, r3
 800ce62:	494b      	ldr	r1, [pc, #300]	; (800cf90 <UTIL_SEQ_Run+0x1ec>)
 800ce64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce66:	00db      	lsls	r3, r3, #3
 800ce68:	440b      	add	r3, r1
 800ce6a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ce70:	61bb      	str	r3, [r7, #24]
  return(result);
 800ce72:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ce74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce76:	b672      	cpsid	i
}
 800ce78:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800ce7a:	4b46      	ldr	r3, [pc, #280]	; (800cf94 <UTIL_SEQ_Run+0x1f0>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2201      	movs	r2, #1
 800ce80:	fa02 f303 	lsl.w	r3, r2, r3
 800ce84:	43da      	mvns	r2, r3
 800ce86:	4b3e      	ldr	r3, [pc, #248]	; (800cf80 <UTIL_SEQ_Run+0x1dc>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4013      	ands	r3, r2
 800ce8c:	4a3c      	ldr	r2, [pc, #240]	; (800cf80 <UTIL_SEQ_Run+0x1dc>)
 800ce8e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ce90:	2302      	movs	r3, #2
 800ce92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce94:	e013      	b.n	800cebe <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800ce96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	4a3d      	ldr	r2, [pc, #244]	; (800cf90 <UTIL_SEQ_Run+0x1ec>)
 800ce9c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800cea0:	4b3c      	ldr	r3, [pc, #240]	; (800cf94 <UTIL_SEQ_Run+0x1f0>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2201      	movs	r2, #1
 800cea6:	fa02 f303 	lsl.w	r3, r2, r3
 800ceaa:	43da      	mvns	r2, r3
 800ceac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	400a      	ands	r2, r1
 800ceb2:	4937      	ldr	r1, [pc, #220]	; (800cf90 <UTIL_SEQ_Run+0x1ec>)
 800ceb4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ceb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceba:	3b01      	subs	r3, #1
 800cebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1e8      	bne.n	800ce96 <UTIL_SEQ_Run+0xf2>
 800cec4:	6a3b      	ldr	r3, [r7, #32]
 800cec6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	f383 8810 	msr	PRIMASK, r3
}
 800cece:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800ced0:	4b30      	ldr	r3, [pc, #192]	; (800cf94 <UTIL_SEQ_Run+0x1f0>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a30      	ldr	r2, [pc, #192]	; (800cf98 <UTIL_SEQ_Run+0x1f4>)
 800ced6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceda:	4798      	blx	r3

    local_taskset = TaskSet;
 800cedc:	4b28      	ldr	r3, [pc, #160]	; (800cf80 <UTIL_SEQ_Run+0x1dc>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800cee2:	4b28      	ldr	r3, [pc, #160]	; (800cf84 <UTIL_SEQ_Run+0x1e0>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800cee8:	4b27      	ldr	r3, [pc, #156]	; (800cf88 <UTIL_SEQ_Run+0x1e4>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800ceee:	4b27      	ldr	r3, [pc, #156]	; (800cf8c <UTIL_SEQ_Run+0x1e8>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef8:	401a      	ands	r2, r3
 800cefa:	4b20      	ldr	r3, [pc, #128]	; (800cf7c <UTIL_SEQ_Run+0x1d8>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4013      	ands	r3, r2
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d005      	beq.n	800cf10 <UTIL_SEQ_Run+0x16c>
 800cf04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf08:	4013      	ands	r3, r2
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f43f af64 	beq.w	800cdd8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800cf10:	4b20      	ldr	r3, [pc, #128]	; (800cf94 <UTIL_SEQ_Run+0x1f0>)
 800cf12:	f04f 32ff 	mov.w	r2, #4294967295
 800cf16:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800cf18:	f000 f938 	bl	800d18c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf1c:	f3ef 8310 	mrs	r3, PRIMASK
 800cf20:	613b      	str	r3, [r7, #16]
  return(result);
 800cf22:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800cf24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf26:	b672      	cpsid	i
}
 800cf28:	bf00      	nop
  local_taskset = TaskSet;
 800cf2a:	4b15      	ldr	r3, [pc, #84]	; (800cf80 <UTIL_SEQ_Run+0x1dc>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800cf30:	4b14      	ldr	r3, [pc, #80]	; (800cf84 <UTIL_SEQ_Run+0x1e0>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cf36:	4b14      	ldr	r3, [pc, #80]	; (800cf88 <UTIL_SEQ_Run+0x1e4>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800cf3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	401a      	ands	r2, r3
 800cf42:	4b0e      	ldr	r3, [pc, #56]	; (800cf7c <UTIL_SEQ_Run+0x1d8>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4013      	ands	r3, r2
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d107      	bne.n	800cf5c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800cf4c:	4b0f      	ldr	r3, [pc, #60]	; (800cf8c <UTIL_SEQ_Run+0x1e8>)
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf52:	4013      	ands	r3, r2
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d101      	bne.n	800cf5c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800cf58:	f7f4 fa4e 	bl	80013f8 <UTIL_SEQ_Idle>
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f383 8810 	msr	PRIMASK, r3
}
 800cf66:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800cf68:	f000 f917 	bl	800d19a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800cf6c:	4a03      	ldr	r2, [pc, #12]	; (800cf7c <UTIL_SEQ_Run+0x1d8>)
 800cf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf70:	6013      	str	r3, [r2, #0]

  return;
 800cf72:	bf00      	nop
}
 800cf74:	3740      	adds	r7, #64	; 0x40
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	20000034 	.word	0x20000034
 800cf80:	200018a4 	.word	0x200018a4
 800cf84:	200018a8 	.word	0x200018a8
 800cf88:	20000030 	.word	0x20000030
 800cf8c:	200018ac 	.word	0x200018ac
 800cf90:	20001934 	.word	0x20001934
 800cf94:	200018b0 	.word	0x200018b0
 800cf98:	200018b4 	.word	0x200018b4

0800cf9c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b088      	sub	sp, #32
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfa8:	f3ef 8310 	mrs	r3, PRIMASK
 800cfac:	617b      	str	r3, [r7, #20]
  return(result);
 800cfae:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800cfb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cfb2:	b672      	cpsid	i
}
 800cfb4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f000 f8f6 	bl	800d1a8 <SEQ_BitPosition>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	4a06      	ldr	r2, [pc, #24]	; (800cfdc <UTIL_SEQ_RegTask+0x40>)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	f383 8810 	msr	PRIMASK, r3
}
 800cfd2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800cfd4:	bf00      	nop
}
 800cfd6:	3720      	adds	r7, #32
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	200018b4 	.word	0x200018b4

0800cfe0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b087      	sub	sp, #28
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfea:	f3ef 8310 	mrs	r3, PRIMASK
 800cfee:	60fb      	str	r3, [r7, #12]
  return(result);
 800cff0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cff4:	b672      	cpsid	i
}
 800cff6:	bf00      	nop

  TaskSet |= TaskId_bm;
 800cff8:	4b0d      	ldr	r3, [pc, #52]	; (800d030 <UTIL_SEQ_SetTask+0x50>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	4313      	orrs	r3, r2
 800d000:	4a0b      	ldr	r2, [pc, #44]	; (800d030 <UTIL_SEQ_SetTask+0x50>)
 800d002:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d004:	4a0b      	ldr	r2, [pc, #44]	; (800d034 <UTIL_SEQ_SetTask+0x54>)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	431a      	orrs	r2, r3
 800d010:	4908      	ldr	r1, [pc, #32]	; (800d034 <UTIL_SEQ_SetTask+0x54>)
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	f383 8810 	msr	PRIMASK, r3
}
 800d022:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d024:	bf00      	nop
}
 800d026:	371c      	adds	r7, #28
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	200018a4 	.word	0x200018a4
 800d034:	20001934 	.word	0x20001934

0800d038 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d038:	b480      	push	{r7}
 800d03a:	b087      	sub	sp, #28
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d040:	f3ef 8310 	mrs	r3, PRIMASK
 800d044:	60fb      	str	r3, [r7, #12]
  return(result);
 800d046:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d048:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d04a:	b672      	cpsid	i
}
 800d04c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	43da      	mvns	r2, r3
 800d052:	4b08      	ldr	r3, [pc, #32]	; (800d074 <UTIL_SEQ_PauseTask+0x3c>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4013      	ands	r3, r2
 800d058:	4a06      	ldr	r2, [pc, #24]	; (800d074 <UTIL_SEQ_PauseTask+0x3c>)
 800d05a:	6013      	str	r3, [r2, #0]
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	f383 8810 	msr	PRIMASK, r3
}
 800d066:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d068:	bf00      	nop
}
 800d06a:	371c      	adds	r7, #28
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr
 800d074:	20000030 	.word	0x20000030

0800d078 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d078:	b480      	push	{r7}
 800d07a:	b087      	sub	sp, #28
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d080:	f3ef 8310 	mrs	r3, PRIMASK
 800d084:	60fb      	str	r3, [r7, #12]
  return(result);
 800d086:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d088:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d08a:	b672      	cpsid	i
}
 800d08c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800d08e:	4b09      	ldr	r3, [pc, #36]	; (800d0b4 <UTIL_SEQ_ResumeTask+0x3c>)
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4313      	orrs	r3, r2
 800d096:	4a07      	ldr	r2, [pc, #28]	; (800d0b4 <UTIL_SEQ_ResumeTask+0x3c>)
 800d098:	6013      	str	r3, [r2, #0]
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	f383 8810 	msr	PRIMASK, r3
}
 800d0a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d0a6:	bf00      	nop
}
 800d0a8:	371c      	adds	r7, #28
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	20000030 	.word	0x20000030

0800d0b8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b087      	sub	sp, #28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0c0:	f3ef 8310 	mrs	r3, PRIMASK
 800d0c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d0c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0ca:	b672      	cpsid	i
}
 800d0cc:	bf00      	nop

  EvtSet |= EvtId_bm;
 800d0ce:	4b09      	ldr	r3, [pc, #36]	; (800d0f4 <UTIL_SEQ_SetEvt+0x3c>)
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	4a07      	ldr	r2, [pc, #28]	; (800d0f4 <UTIL_SEQ_SetEvt+0x3c>)
 800d0d8:	6013      	str	r3, [r2, #0]
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	f383 8810 	msr	PRIMASK, r3
}
 800d0e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d0e6:	bf00      	nop
}
 800d0e8:	371c      	adds	r7, #28
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	200018a8 	.word	0x200018a8

0800d0f8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b088      	sub	sp, #32
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800d100:	4b1f      	ldr	r3, [pc, #124]	; (800d180 <UTIL_SEQ_WaitEvt+0x88>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800d106:	4b1e      	ldr	r3, [pc, #120]	; (800d180 <UTIL_SEQ_WaitEvt+0x88>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10e:	d102      	bne.n	800d116 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800d110:	2300      	movs	r3, #0
 800d112:	61fb      	str	r3, [r7, #28]
 800d114:	e005      	b.n	800d122 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800d116:	4b1a      	ldr	r3, [pc, #104]	; (800d180 <UTIL_SEQ_WaitEvt+0x88>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2201      	movs	r2, #1
 800d11c:	fa02 f303 	lsl.w	r3, r2, r3
 800d120:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d122:	4b18      	ldr	r3, [pc, #96]	; (800d184 <UTIL_SEQ_WaitEvt+0x8c>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800d128:	4a16      	ldr	r2, [pc, #88]	; (800d184 <UTIL_SEQ_WaitEvt+0x8c>)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800d12e:	e003      	b.n	800d138 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800d130:	6879      	ldr	r1, [r7, #4]
 800d132:	69f8      	ldr	r0, [r7, #28]
 800d134:	f7f4 f967 	bl	8001406 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800d138:	4b13      	ldr	r3, [pc, #76]	; (800d188 <UTIL_SEQ_WaitEvt+0x90>)
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4013      	ands	r3, r2
 800d140:	2b00      	cmp	r3, #0
 800d142:	d0f5      	beq.n	800d130 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800d144:	4a0e      	ldr	r2, [pc, #56]	; (800d180 <UTIL_SEQ_WaitEvt+0x88>)
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d14a:	f3ef 8310 	mrs	r3, PRIMASK
 800d14e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d150:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d154:	b672      	cpsid	i
}
 800d156:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	43da      	mvns	r2, r3
 800d15c:	4b0a      	ldr	r3, [pc, #40]	; (800d188 <UTIL_SEQ_WaitEvt+0x90>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4013      	ands	r3, r2
 800d162:	4a09      	ldr	r2, [pc, #36]	; (800d188 <UTIL_SEQ_WaitEvt+0x90>)
 800d164:	6013      	str	r3, [r2, #0]
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f383 8810 	msr	PRIMASK, r3
}
 800d170:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800d172:	4a04      	ldr	r2, [pc, #16]	; (800d184 <UTIL_SEQ_WaitEvt+0x8c>)
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	6013      	str	r3, [r2, #0]
  return;
 800d178:	bf00      	nop
}
 800d17a:	3720      	adds	r7, #32
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	200018b0 	.word	0x200018b0
 800d184:	200018ac 	.word	0x200018ac
 800d188:	200018a8 	.word	0x200018a8

0800d18c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d18c:	b480      	push	{r7}
 800d18e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d190:	bf00      	nop
}
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d19a:	b480      	push	{r7}
 800d19c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d19e:	bf00      	nop
}
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b085      	sub	sp, #20
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	0c1b      	lsrs	r3, r3, #16
 800d1bc:	041b      	lsls	r3, r3, #16
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d104      	bne.n	800d1cc <SEQ_BitPosition+0x24>
 800d1c2:	2310      	movs	r3, #16
 800d1c4:	73fb      	strb	r3, [r7, #15]
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	041b      	lsls	r3, r3, #16
 800d1ca:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d105      	bne.n	800d1e2 <SEQ_BitPosition+0x3a>
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
 800d1d8:	3308      	adds	r3, #8
 800d1da:	73fb      	strb	r3, [r7, #15]
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	021b      	lsls	r3, r3, #8
 800d1e0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d105      	bne.n	800d1f8 <SEQ_BitPosition+0x50>
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	73fb      	strb	r3, [r7, #15]
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	011b      	lsls	r3, r3, #4
 800d1f6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	0f1b      	lsrs	r3, r3, #28
 800d1fc:	4a07      	ldr	r2, [pc, #28]	; (800d21c <SEQ_BitPosition+0x74>)
 800d1fe:	5cd2      	ldrb	r2, [r2, r3]
 800d200:	7bfb      	ldrb	r3, [r7, #15]
 800d202:	4413      	add	r3, r2
 800d204:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d206:	7bfb      	ldrb	r3, [r7, #15]
 800d208:	f1c3 031f 	rsb	r3, r3, #31
 800d20c:	b2db      	uxtb	r3, r3
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3714      	adds	r7, #20
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	0800f9f4 	.word	0x0800f9f4

0800d220 <std>:
 800d220:	2300      	movs	r3, #0
 800d222:	b510      	push	{r4, lr}
 800d224:	4604      	mov	r4, r0
 800d226:	e9c0 3300 	strd	r3, r3, [r0]
 800d22a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d22e:	6083      	str	r3, [r0, #8]
 800d230:	8181      	strh	r1, [r0, #12]
 800d232:	6643      	str	r3, [r0, #100]	; 0x64
 800d234:	81c2      	strh	r2, [r0, #14]
 800d236:	6183      	str	r3, [r0, #24]
 800d238:	4619      	mov	r1, r3
 800d23a:	2208      	movs	r2, #8
 800d23c:	305c      	adds	r0, #92	; 0x5c
 800d23e:	f000 f9ff 	bl	800d640 <memset>
 800d242:	4b0d      	ldr	r3, [pc, #52]	; (800d278 <std+0x58>)
 800d244:	6263      	str	r3, [r4, #36]	; 0x24
 800d246:	4b0d      	ldr	r3, [pc, #52]	; (800d27c <std+0x5c>)
 800d248:	62a3      	str	r3, [r4, #40]	; 0x28
 800d24a:	4b0d      	ldr	r3, [pc, #52]	; (800d280 <std+0x60>)
 800d24c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d24e:	4b0d      	ldr	r3, [pc, #52]	; (800d284 <std+0x64>)
 800d250:	6323      	str	r3, [r4, #48]	; 0x30
 800d252:	4b0d      	ldr	r3, [pc, #52]	; (800d288 <std+0x68>)
 800d254:	6224      	str	r4, [r4, #32]
 800d256:	429c      	cmp	r4, r3
 800d258:	d006      	beq.n	800d268 <std+0x48>
 800d25a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d25e:	4294      	cmp	r4, r2
 800d260:	d002      	beq.n	800d268 <std+0x48>
 800d262:	33d0      	adds	r3, #208	; 0xd0
 800d264:	429c      	cmp	r4, r3
 800d266:	d105      	bne.n	800d274 <std+0x54>
 800d268:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d270:	f000 ba76 	b.w	800d760 <__retarget_lock_init_recursive>
 800d274:	bd10      	pop	{r4, pc}
 800d276:	bf00      	nop
 800d278:	0800d491 	.word	0x0800d491
 800d27c:	0800d4b3 	.word	0x0800d4b3
 800d280:	0800d4eb 	.word	0x0800d4eb
 800d284:	0800d50f 	.word	0x0800d50f
 800d288:	20001944 	.word	0x20001944

0800d28c <stdio_exit_handler>:
 800d28c:	4a02      	ldr	r2, [pc, #8]	; (800d298 <stdio_exit_handler+0xc>)
 800d28e:	4903      	ldr	r1, [pc, #12]	; (800d29c <stdio_exit_handler+0x10>)
 800d290:	4803      	ldr	r0, [pc, #12]	; (800d2a0 <stdio_exit_handler+0x14>)
 800d292:	f000 b869 	b.w	800d368 <_fwalk_sglue>
 800d296:	bf00      	nop
 800d298:	20000038 	.word	0x20000038
 800d29c:	0800e029 	.word	0x0800e029
 800d2a0:	20000044 	.word	0x20000044

0800d2a4 <cleanup_stdio>:
 800d2a4:	6841      	ldr	r1, [r0, #4]
 800d2a6:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <cleanup_stdio+0x34>)
 800d2a8:	4299      	cmp	r1, r3
 800d2aa:	b510      	push	{r4, lr}
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	d001      	beq.n	800d2b4 <cleanup_stdio+0x10>
 800d2b0:	f000 feba 	bl	800e028 <_fflush_r>
 800d2b4:	68a1      	ldr	r1, [r4, #8]
 800d2b6:	4b09      	ldr	r3, [pc, #36]	; (800d2dc <cleanup_stdio+0x38>)
 800d2b8:	4299      	cmp	r1, r3
 800d2ba:	d002      	beq.n	800d2c2 <cleanup_stdio+0x1e>
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f000 feb3 	bl	800e028 <_fflush_r>
 800d2c2:	68e1      	ldr	r1, [r4, #12]
 800d2c4:	4b06      	ldr	r3, [pc, #24]	; (800d2e0 <cleanup_stdio+0x3c>)
 800d2c6:	4299      	cmp	r1, r3
 800d2c8:	d004      	beq.n	800d2d4 <cleanup_stdio+0x30>
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2d0:	f000 beaa 	b.w	800e028 <_fflush_r>
 800d2d4:	bd10      	pop	{r4, pc}
 800d2d6:	bf00      	nop
 800d2d8:	20001944 	.word	0x20001944
 800d2dc:	200019ac 	.word	0x200019ac
 800d2e0:	20001a14 	.word	0x20001a14

0800d2e4 <global_stdio_init.part.0>:
 800d2e4:	b510      	push	{r4, lr}
 800d2e6:	4b0b      	ldr	r3, [pc, #44]	; (800d314 <global_stdio_init.part.0+0x30>)
 800d2e8:	4c0b      	ldr	r4, [pc, #44]	; (800d318 <global_stdio_init.part.0+0x34>)
 800d2ea:	4a0c      	ldr	r2, [pc, #48]	; (800d31c <global_stdio_init.part.0+0x38>)
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	2104      	movs	r1, #4
 800d2f4:	f7ff ff94 	bl	800d220 <std>
 800d2f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	2109      	movs	r1, #9
 800d300:	f7ff ff8e 	bl	800d220 <std>
 800d304:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d308:	2202      	movs	r2, #2
 800d30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d30e:	2112      	movs	r1, #18
 800d310:	f7ff bf86 	b.w	800d220 <std>
 800d314:	20001a7c 	.word	0x20001a7c
 800d318:	20001944 	.word	0x20001944
 800d31c:	0800d28d 	.word	0x0800d28d

0800d320 <__sfp_lock_acquire>:
 800d320:	4801      	ldr	r0, [pc, #4]	; (800d328 <__sfp_lock_acquire+0x8>)
 800d322:	f000 ba1e 	b.w	800d762 <__retarget_lock_acquire_recursive>
 800d326:	bf00      	nop
 800d328:	20001a85 	.word	0x20001a85

0800d32c <__sfp_lock_release>:
 800d32c:	4801      	ldr	r0, [pc, #4]	; (800d334 <__sfp_lock_release+0x8>)
 800d32e:	f000 ba19 	b.w	800d764 <__retarget_lock_release_recursive>
 800d332:	bf00      	nop
 800d334:	20001a85 	.word	0x20001a85

0800d338 <__sinit>:
 800d338:	b510      	push	{r4, lr}
 800d33a:	4604      	mov	r4, r0
 800d33c:	f7ff fff0 	bl	800d320 <__sfp_lock_acquire>
 800d340:	6a23      	ldr	r3, [r4, #32]
 800d342:	b11b      	cbz	r3, 800d34c <__sinit+0x14>
 800d344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d348:	f7ff bff0 	b.w	800d32c <__sfp_lock_release>
 800d34c:	4b04      	ldr	r3, [pc, #16]	; (800d360 <__sinit+0x28>)
 800d34e:	6223      	str	r3, [r4, #32]
 800d350:	4b04      	ldr	r3, [pc, #16]	; (800d364 <__sinit+0x2c>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1f5      	bne.n	800d344 <__sinit+0xc>
 800d358:	f7ff ffc4 	bl	800d2e4 <global_stdio_init.part.0>
 800d35c:	e7f2      	b.n	800d344 <__sinit+0xc>
 800d35e:	bf00      	nop
 800d360:	0800d2a5 	.word	0x0800d2a5
 800d364:	20001a7c 	.word	0x20001a7c

0800d368 <_fwalk_sglue>:
 800d368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d36c:	4607      	mov	r7, r0
 800d36e:	4688      	mov	r8, r1
 800d370:	4614      	mov	r4, r2
 800d372:	2600      	movs	r6, #0
 800d374:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d378:	f1b9 0901 	subs.w	r9, r9, #1
 800d37c:	d505      	bpl.n	800d38a <_fwalk_sglue+0x22>
 800d37e:	6824      	ldr	r4, [r4, #0]
 800d380:	2c00      	cmp	r4, #0
 800d382:	d1f7      	bne.n	800d374 <_fwalk_sglue+0xc>
 800d384:	4630      	mov	r0, r6
 800d386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d38a:	89ab      	ldrh	r3, [r5, #12]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d907      	bls.n	800d3a0 <_fwalk_sglue+0x38>
 800d390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d394:	3301      	adds	r3, #1
 800d396:	d003      	beq.n	800d3a0 <_fwalk_sglue+0x38>
 800d398:	4629      	mov	r1, r5
 800d39a:	4638      	mov	r0, r7
 800d39c:	47c0      	blx	r8
 800d39e:	4306      	orrs	r6, r0
 800d3a0:	3568      	adds	r5, #104	; 0x68
 800d3a2:	e7e9      	b.n	800d378 <_fwalk_sglue+0x10>

0800d3a4 <iprintf>:
 800d3a4:	b40f      	push	{r0, r1, r2, r3}
 800d3a6:	b507      	push	{r0, r1, r2, lr}
 800d3a8:	4906      	ldr	r1, [pc, #24]	; (800d3c4 <iprintf+0x20>)
 800d3aa:	ab04      	add	r3, sp, #16
 800d3ac:	6808      	ldr	r0, [r1, #0]
 800d3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3b2:	6881      	ldr	r1, [r0, #8]
 800d3b4:	9301      	str	r3, [sp, #4]
 800d3b6:	f000 fb07 	bl	800d9c8 <_vfiprintf_r>
 800d3ba:	b003      	add	sp, #12
 800d3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3c0:	b004      	add	sp, #16
 800d3c2:	4770      	bx	lr
 800d3c4:	20000090 	.word	0x20000090

0800d3c8 <putchar>:
 800d3c8:	4b02      	ldr	r3, [pc, #8]	; (800d3d4 <putchar+0xc>)
 800d3ca:	4601      	mov	r1, r0
 800d3cc:	6818      	ldr	r0, [r3, #0]
 800d3ce:	6882      	ldr	r2, [r0, #8]
 800d3d0:	f000 beb4 	b.w	800e13c <_putc_r>
 800d3d4:	20000090 	.word	0x20000090

0800d3d8 <_puts_r>:
 800d3d8:	6a03      	ldr	r3, [r0, #32]
 800d3da:	b570      	push	{r4, r5, r6, lr}
 800d3dc:	6884      	ldr	r4, [r0, #8]
 800d3de:	4605      	mov	r5, r0
 800d3e0:	460e      	mov	r6, r1
 800d3e2:	b90b      	cbnz	r3, 800d3e8 <_puts_r+0x10>
 800d3e4:	f7ff ffa8 	bl	800d338 <__sinit>
 800d3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3ea:	07db      	lsls	r3, r3, #31
 800d3ec:	d405      	bmi.n	800d3fa <_puts_r+0x22>
 800d3ee:	89a3      	ldrh	r3, [r4, #12]
 800d3f0:	0598      	lsls	r0, r3, #22
 800d3f2:	d402      	bmi.n	800d3fa <_puts_r+0x22>
 800d3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3f6:	f000 f9b4 	bl	800d762 <__retarget_lock_acquire_recursive>
 800d3fa:	89a3      	ldrh	r3, [r4, #12]
 800d3fc:	0719      	lsls	r1, r3, #28
 800d3fe:	d513      	bpl.n	800d428 <_puts_r+0x50>
 800d400:	6923      	ldr	r3, [r4, #16]
 800d402:	b18b      	cbz	r3, 800d428 <_puts_r+0x50>
 800d404:	3e01      	subs	r6, #1
 800d406:	68a3      	ldr	r3, [r4, #8]
 800d408:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d40c:	3b01      	subs	r3, #1
 800d40e:	60a3      	str	r3, [r4, #8]
 800d410:	b9e9      	cbnz	r1, 800d44e <_puts_r+0x76>
 800d412:	2b00      	cmp	r3, #0
 800d414:	da2e      	bge.n	800d474 <_puts_r+0x9c>
 800d416:	4622      	mov	r2, r4
 800d418:	210a      	movs	r1, #10
 800d41a:	4628      	mov	r0, r5
 800d41c:	f000 f87b 	bl	800d516 <__swbuf_r>
 800d420:	3001      	adds	r0, #1
 800d422:	d007      	beq.n	800d434 <_puts_r+0x5c>
 800d424:	250a      	movs	r5, #10
 800d426:	e007      	b.n	800d438 <_puts_r+0x60>
 800d428:	4621      	mov	r1, r4
 800d42a:	4628      	mov	r0, r5
 800d42c:	f000 f8b0 	bl	800d590 <__swsetup_r>
 800d430:	2800      	cmp	r0, #0
 800d432:	d0e7      	beq.n	800d404 <_puts_r+0x2c>
 800d434:	f04f 35ff 	mov.w	r5, #4294967295
 800d438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d43a:	07da      	lsls	r2, r3, #31
 800d43c:	d405      	bmi.n	800d44a <_puts_r+0x72>
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	059b      	lsls	r3, r3, #22
 800d442:	d402      	bmi.n	800d44a <_puts_r+0x72>
 800d444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d446:	f000 f98d 	bl	800d764 <__retarget_lock_release_recursive>
 800d44a:	4628      	mov	r0, r5
 800d44c:	bd70      	pop	{r4, r5, r6, pc}
 800d44e:	2b00      	cmp	r3, #0
 800d450:	da04      	bge.n	800d45c <_puts_r+0x84>
 800d452:	69a2      	ldr	r2, [r4, #24]
 800d454:	429a      	cmp	r2, r3
 800d456:	dc06      	bgt.n	800d466 <_puts_r+0x8e>
 800d458:	290a      	cmp	r1, #10
 800d45a:	d004      	beq.n	800d466 <_puts_r+0x8e>
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	6022      	str	r2, [r4, #0]
 800d462:	7019      	strb	r1, [r3, #0]
 800d464:	e7cf      	b.n	800d406 <_puts_r+0x2e>
 800d466:	4622      	mov	r2, r4
 800d468:	4628      	mov	r0, r5
 800d46a:	f000 f854 	bl	800d516 <__swbuf_r>
 800d46e:	3001      	adds	r0, #1
 800d470:	d1c9      	bne.n	800d406 <_puts_r+0x2e>
 800d472:	e7df      	b.n	800d434 <_puts_r+0x5c>
 800d474:	6823      	ldr	r3, [r4, #0]
 800d476:	250a      	movs	r5, #10
 800d478:	1c5a      	adds	r2, r3, #1
 800d47a:	6022      	str	r2, [r4, #0]
 800d47c:	701d      	strb	r5, [r3, #0]
 800d47e:	e7db      	b.n	800d438 <_puts_r+0x60>

0800d480 <puts>:
 800d480:	4b02      	ldr	r3, [pc, #8]	; (800d48c <puts+0xc>)
 800d482:	4601      	mov	r1, r0
 800d484:	6818      	ldr	r0, [r3, #0]
 800d486:	f7ff bfa7 	b.w	800d3d8 <_puts_r>
 800d48a:	bf00      	nop
 800d48c:	20000090 	.word	0x20000090

0800d490 <__sread>:
 800d490:	b510      	push	{r4, lr}
 800d492:	460c      	mov	r4, r1
 800d494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d498:	f000 f914 	bl	800d6c4 <_read_r>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	bfab      	itete	ge
 800d4a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d4a4:	181b      	addge	r3, r3, r0
 800d4a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4aa:	bfac      	ite	ge
 800d4ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4ae:	81a3      	strhlt	r3, [r4, #12]
 800d4b0:	bd10      	pop	{r4, pc}

0800d4b2 <__swrite>:
 800d4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b6:	461f      	mov	r7, r3
 800d4b8:	898b      	ldrh	r3, [r1, #12]
 800d4ba:	05db      	lsls	r3, r3, #23
 800d4bc:	4605      	mov	r5, r0
 800d4be:	460c      	mov	r4, r1
 800d4c0:	4616      	mov	r6, r2
 800d4c2:	d505      	bpl.n	800d4d0 <__swrite+0x1e>
 800d4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f000 f8e8 	bl	800d6a0 <_lseek_r>
 800d4d0:	89a3      	ldrh	r3, [r4, #12]
 800d4d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4da:	81a3      	strh	r3, [r4, #12]
 800d4dc:	4632      	mov	r2, r6
 800d4de:	463b      	mov	r3, r7
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e6:	f000 b8ff 	b.w	800d6e8 <_write_r>

0800d4ea <__sseek>:
 800d4ea:	b510      	push	{r4, lr}
 800d4ec:	460c      	mov	r4, r1
 800d4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f2:	f000 f8d5 	bl	800d6a0 <_lseek_r>
 800d4f6:	1c43      	adds	r3, r0, #1
 800d4f8:	89a3      	ldrh	r3, [r4, #12]
 800d4fa:	bf15      	itete	ne
 800d4fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d502:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d506:	81a3      	strheq	r3, [r4, #12]
 800d508:	bf18      	it	ne
 800d50a:	81a3      	strhne	r3, [r4, #12]
 800d50c:	bd10      	pop	{r4, pc}

0800d50e <__sclose>:
 800d50e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d512:	f000 b8b5 	b.w	800d680 <_close_r>

0800d516 <__swbuf_r>:
 800d516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d518:	460e      	mov	r6, r1
 800d51a:	4614      	mov	r4, r2
 800d51c:	4605      	mov	r5, r0
 800d51e:	b118      	cbz	r0, 800d528 <__swbuf_r+0x12>
 800d520:	6a03      	ldr	r3, [r0, #32]
 800d522:	b90b      	cbnz	r3, 800d528 <__swbuf_r+0x12>
 800d524:	f7ff ff08 	bl	800d338 <__sinit>
 800d528:	69a3      	ldr	r3, [r4, #24]
 800d52a:	60a3      	str	r3, [r4, #8]
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	071a      	lsls	r2, r3, #28
 800d530:	d525      	bpl.n	800d57e <__swbuf_r+0x68>
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	b31b      	cbz	r3, 800d57e <__swbuf_r+0x68>
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	6922      	ldr	r2, [r4, #16]
 800d53a:	1a98      	subs	r0, r3, r2
 800d53c:	6963      	ldr	r3, [r4, #20]
 800d53e:	b2f6      	uxtb	r6, r6
 800d540:	4283      	cmp	r3, r0
 800d542:	4637      	mov	r7, r6
 800d544:	dc04      	bgt.n	800d550 <__swbuf_r+0x3a>
 800d546:	4621      	mov	r1, r4
 800d548:	4628      	mov	r0, r5
 800d54a:	f000 fd6d 	bl	800e028 <_fflush_r>
 800d54e:	b9e0      	cbnz	r0, 800d58a <__swbuf_r+0x74>
 800d550:	68a3      	ldr	r3, [r4, #8]
 800d552:	3b01      	subs	r3, #1
 800d554:	60a3      	str	r3, [r4, #8]
 800d556:	6823      	ldr	r3, [r4, #0]
 800d558:	1c5a      	adds	r2, r3, #1
 800d55a:	6022      	str	r2, [r4, #0]
 800d55c:	701e      	strb	r6, [r3, #0]
 800d55e:	6962      	ldr	r2, [r4, #20]
 800d560:	1c43      	adds	r3, r0, #1
 800d562:	429a      	cmp	r2, r3
 800d564:	d004      	beq.n	800d570 <__swbuf_r+0x5a>
 800d566:	89a3      	ldrh	r3, [r4, #12]
 800d568:	07db      	lsls	r3, r3, #31
 800d56a:	d506      	bpl.n	800d57a <__swbuf_r+0x64>
 800d56c:	2e0a      	cmp	r6, #10
 800d56e:	d104      	bne.n	800d57a <__swbuf_r+0x64>
 800d570:	4621      	mov	r1, r4
 800d572:	4628      	mov	r0, r5
 800d574:	f000 fd58 	bl	800e028 <_fflush_r>
 800d578:	b938      	cbnz	r0, 800d58a <__swbuf_r+0x74>
 800d57a:	4638      	mov	r0, r7
 800d57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d57e:	4621      	mov	r1, r4
 800d580:	4628      	mov	r0, r5
 800d582:	f000 f805 	bl	800d590 <__swsetup_r>
 800d586:	2800      	cmp	r0, #0
 800d588:	d0d5      	beq.n	800d536 <__swbuf_r+0x20>
 800d58a:	f04f 37ff 	mov.w	r7, #4294967295
 800d58e:	e7f4      	b.n	800d57a <__swbuf_r+0x64>

0800d590 <__swsetup_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4b2a      	ldr	r3, [pc, #168]	; (800d63c <__swsetup_r+0xac>)
 800d594:	4605      	mov	r5, r0
 800d596:	6818      	ldr	r0, [r3, #0]
 800d598:	460c      	mov	r4, r1
 800d59a:	b118      	cbz	r0, 800d5a4 <__swsetup_r+0x14>
 800d59c:	6a03      	ldr	r3, [r0, #32]
 800d59e:	b90b      	cbnz	r3, 800d5a4 <__swsetup_r+0x14>
 800d5a0:	f7ff feca 	bl	800d338 <__sinit>
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5aa:	0718      	lsls	r0, r3, #28
 800d5ac:	d422      	bmi.n	800d5f4 <__swsetup_r+0x64>
 800d5ae:	06d9      	lsls	r1, r3, #27
 800d5b0:	d407      	bmi.n	800d5c2 <__swsetup_r+0x32>
 800d5b2:	2309      	movs	r3, #9
 800d5b4:	602b      	str	r3, [r5, #0]
 800d5b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5ba:	81a3      	strh	r3, [r4, #12]
 800d5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c0:	e034      	b.n	800d62c <__swsetup_r+0x9c>
 800d5c2:	0758      	lsls	r0, r3, #29
 800d5c4:	d512      	bpl.n	800d5ec <__swsetup_r+0x5c>
 800d5c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5c8:	b141      	cbz	r1, 800d5dc <__swsetup_r+0x4c>
 800d5ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5ce:	4299      	cmp	r1, r3
 800d5d0:	d002      	beq.n	800d5d8 <__swsetup_r+0x48>
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	f000 f8d6 	bl	800d784 <_free_r>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	6363      	str	r3, [r4, #52]	; 0x34
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5e2:	81a3      	strh	r3, [r4, #12]
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	6063      	str	r3, [r4, #4]
 800d5e8:	6923      	ldr	r3, [r4, #16]
 800d5ea:	6023      	str	r3, [r4, #0]
 800d5ec:	89a3      	ldrh	r3, [r4, #12]
 800d5ee:	f043 0308 	orr.w	r3, r3, #8
 800d5f2:	81a3      	strh	r3, [r4, #12]
 800d5f4:	6923      	ldr	r3, [r4, #16]
 800d5f6:	b94b      	cbnz	r3, 800d60c <__swsetup_r+0x7c>
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d602:	d003      	beq.n	800d60c <__swsetup_r+0x7c>
 800d604:	4621      	mov	r1, r4
 800d606:	4628      	mov	r0, r5
 800d608:	f000 fd5c 	bl	800e0c4 <__smakebuf_r>
 800d60c:	89a0      	ldrh	r0, [r4, #12]
 800d60e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d612:	f010 0301 	ands.w	r3, r0, #1
 800d616:	d00a      	beq.n	800d62e <__swsetup_r+0x9e>
 800d618:	2300      	movs	r3, #0
 800d61a:	60a3      	str	r3, [r4, #8]
 800d61c:	6963      	ldr	r3, [r4, #20]
 800d61e:	425b      	negs	r3, r3
 800d620:	61a3      	str	r3, [r4, #24]
 800d622:	6923      	ldr	r3, [r4, #16]
 800d624:	b943      	cbnz	r3, 800d638 <__swsetup_r+0xa8>
 800d626:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d62a:	d1c4      	bne.n	800d5b6 <__swsetup_r+0x26>
 800d62c:	bd38      	pop	{r3, r4, r5, pc}
 800d62e:	0781      	lsls	r1, r0, #30
 800d630:	bf58      	it	pl
 800d632:	6963      	ldrpl	r3, [r4, #20]
 800d634:	60a3      	str	r3, [r4, #8]
 800d636:	e7f4      	b.n	800d622 <__swsetup_r+0x92>
 800d638:	2000      	movs	r0, #0
 800d63a:	e7f7      	b.n	800d62c <__swsetup_r+0x9c>
 800d63c:	20000090 	.word	0x20000090

0800d640 <memset>:
 800d640:	4402      	add	r2, r0
 800d642:	4603      	mov	r3, r0
 800d644:	4293      	cmp	r3, r2
 800d646:	d100      	bne.n	800d64a <memset+0xa>
 800d648:	4770      	bx	lr
 800d64a:	f803 1b01 	strb.w	r1, [r3], #1
 800d64e:	e7f9      	b.n	800d644 <memset+0x4>

0800d650 <strrchr>:
 800d650:	b513      	push	{r0, r1, r4, lr}
 800d652:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800d656:	4603      	mov	r3, r0
 800d658:	d110      	bne.n	800d67c <strrchr+0x2c>
 800d65a:	b002      	add	sp, #8
 800d65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d660:	f000 bda0 	b.w	800e1a4 <strchr>
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	4604      	mov	r4, r0
 800d668:	4618      	mov	r0, r3
 800d66a:	9101      	str	r1, [sp, #4]
 800d66c:	f000 fd9a 	bl	800e1a4 <strchr>
 800d670:	9901      	ldr	r1, [sp, #4]
 800d672:	2800      	cmp	r0, #0
 800d674:	d1f6      	bne.n	800d664 <strrchr+0x14>
 800d676:	4620      	mov	r0, r4
 800d678:	b002      	add	sp, #8
 800d67a:	bd10      	pop	{r4, pc}
 800d67c:	2400      	movs	r4, #0
 800d67e:	e7f3      	b.n	800d668 <strrchr+0x18>

0800d680 <_close_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4d06      	ldr	r5, [pc, #24]	; (800d69c <_close_r+0x1c>)
 800d684:	2300      	movs	r3, #0
 800d686:	4604      	mov	r4, r0
 800d688:	4608      	mov	r0, r1
 800d68a:	602b      	str	r3, [r5, #0]
 800d68c:	f7f5 fb7f 	bl	8002d8e <_close>
 800d690:	1c43      	adds	r3, r0, #1
 800d692:	d102      	bne.n	800d69a <_close_r+0x1a>
 800d694:	682b      	ldr	r3, [r5, #0]
 800d696:	b103      	cbz	r3, 800d69a <_close_r+0x1a>
 800d698:	6023      	str	r3, [r4, #0]
 800d69a:	bd38      	pop	{r3, r4, r5, pc}
 800d69c:	20001a80 	.word	0x20001a80

0800d6a0 <_lseek_r>:
 800d6a0:	b538      	push	{r3, r4, r5, lr}
 800d6a2:	4d07      	ldr	r5, [pc, #28]	; (800d6c0 <_lseek_r+0x20>)
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	4608      	mov	r0, r1
 800d6a8:	4611      	mov	r1, r2
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	602a      	str	r2, [r5, #0]
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	f7f5 fb94 	bl	8002ddc <_lseek>
 800d6b4:	1c43      	adds	r3, r0, #1
 800d6b6:	d102      	bne.n	800d6be <_lseek_r+0x1e>
 800d6b8:	682b      	ldr	r3, [r5, #0]
 800d6ba:	b103      	cbz	r3, 800d6be <_lseek_r+0x1e>
 800d6bc:	6023      	str	r3, [r4, #0]
 800d6be:	bd38      	pop	{r3, r4, r5, pc}
 800d6c0:	20001a80 	.word	0x20001a80

0800d6c4 <_read_r>:
 800d6c4:	b538      	push	{r3, r4, r5, lr}
 800d6c6:	4d07      	ldr	r5, [pc, #28]	; (800d6e4 <_read_r+0x20>)
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	4608      	mov	r0, r1
 800d6cc:	4611      	mov	r1, r2
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	602a      	str	r2, [r5, #0]
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	f7f5 fb3e 	bl	8002d54 <_read>
 800d6d8:	1c43      	adds	r3, r0, #1
 800d6da:	d102      	bne.n	800d6e2 <_read_r+0x1e>
 800d6dc:	682b      	ldr	r3, [r5, #0]
 800d6de:	b103      	cbz	r3, 800d6e2 <_read_r+0x1e>
 800d6e0:	6023      	str	r3, [r4, #0]
 800d6e2:	bd38      	pop	{r3, r4, r5, pc}
 800d6e4:	20001a80 	.word	0x20001a80

0800d6e8 <_write_r>:
 800d6e8:	b538      	push	{r3, r4, r5, lr}
 800d6ea:	4d07      	ldr	r5, [pc, #28]	; (800d708 <_write_r+0x20>)
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	4608      	mov	r0, r1
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	602a      	str	r2, [r5, #0]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	f7fc ffd2 	bl	800a6a0 <_write>
 800d6fc:	1c43      	adds	r3, r0, #1
 800d6fe:	d102      	bne.n	800d706 <_write_r+0x1e>
 800d700:	682b      	ldr	r3, [r5, #0]
 800d702:	b103      	cbz	r3, 800d706 <_write_r+0x1e>
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	bd38      	pop	{r3, r4, r5, pc}
 800d708:	20001a80 	.word	0x20001a80

0800d70c <__errno>:
 800d70c:	4b01      	ldr	r3, [pc, #4]	; (800d714 <__errno+0x8>)
 800d70e:	6818      	ldr	r0, [r3, #0]
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	20000090 	.word	0x20000090

0800d718 <__libc_init_array>:
 800d718:	b570      	push	{r4, r5, r6, lr}
 800d71a:	4d0d      	ldr	r5, [pc, #52]	; (800d750 <__libc_init_array+0x38>)
 800d71c:	4c0d      	ldr	r4, [pc, #52]	; (800d754 <__libc_init_array+0x3c>)
 800d71e:	1b64      	subs	r4, r4, r5
 800d720:	10a4      	asrs	r4, r4, #2
 800d722:	2600      	movs	r6, #0
 800d724:	42a6      	cmp	r6, r4
 800d726:	d109      	bne.n	800d73c <__libc_init_array+0x24>
 800d728:	4d0b      	ldr	r5, [pc, #44]	; (800d758 <__libc_init_array+0x40>)
 800d72a:	4c0c      	ldr	r4, [pc, #48]	; (800d75c <__libc_init_array+0x44>)
 800d72c:	f000 fd7a 	bl	800e224 <_init>
 800d730:	1b64      	subs	r4, r4, r5
 800d732:	10a4      	asrs	r4, r4, #2
 800d734:	2600      	movs	r6, #0
 800d736:	42a6      	cmp	r6, r4
 800d738:	d105      	bne.n	800d746 <__libc_init_array+0x2e>
 800d73a:	bd70      	pop	{r4, r5, r6, pc}
 800d73c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d740:	4798      	blx	r3
 800d742:	3601      	adds	r6, #1
 800d744:	e7ee      	b.n	800d724 <__libc_init_array+0xc>
 800d746:	f855 3b04 	ldr.w	r3, [r5], #4
 800d74a:	4798      	blx	r3
 800d74c:	3601      	adds	r6, #1
 800d74e:	e7f2      	b.n	800d736 <__libc_init_array+0x1e>
 800d750:	0800fa40 	.word	0x0800fa40
 800d754:	0800fa40 	.word	0x0800fa40
 800d758:	0800fa40 	.word	0x0800fa40
 800d75c:	0800fa44 	.word	0x0800fa44

0800d760 <__retarget_lock_init_recursive>:
 800d760:	4770      	bx	lr

0800d762 <__retarget_lock_acquire_recursive>:
 800d762:	4770      	bx	lr

0800d764 <__retarget_lock_release_recursive>:
 800d764:	4770      	bx	lr

0800d766 <memcpy>:
 800d766:	440a      	add	r2, r1
 800d768:	4291      	cmp	r1, r2
 800d76a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d76e:	d100      	bne.n	800d772 <memcpy+0xc>
 800d770:	4770      	bx	lr
 800d772:	b510      	push	{r4, lr}
 800d774:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d77c:	4291      	cmp	r1, r2
 800d77e:	d1f9      	bne.n	800d774 <memcpy+0xe>
 800d780:	bd10      	pop	{r4, pc}
	...

0800d784 <_free_r>:
 800d784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d786:	2900      	cmp	r1, #0
 800d788:	d044      	beq.n	800d814 <_free_r+0x90>
 800d78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d78e:	9001      	str	r0, [sp, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	f1a1 0404 	sub.w	r4, r1, #4
 800d796:	bfb8      	it	lt
 800d798:	18e4      	addlt	r4, r4, r3
 800d79a:	f000 f8df 	bl	800d95c <__malloc_lock>
 800d79e:	4a1e      	ldr	r2, [pc, #120]	; (800d818 <_free_r+0x94>)
 800d7a0:	9801      	ldr	r0, [sp, #4]
 800d7a2:	6813      	ldr	r3, [r2, #0]
 800d7a4:	b933      	cbnz	r3, 800d7b4 <_free_r+0x30>
 800d7a6:	6063      	str	r3, [r4, #4]
 800d7a8:	6014      	str	r4, [r2, #0]
 800d7aa:	b003      	add	sp, #12
 800d7ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d7b0:	f000 b8da 	b.w	800d968 <__malloc_unlock>
 800d7b4:	42a3      	cmp	r3, r4
 800d7b6:	d908      	bls.n	800d7ca <_free_r+0x46>
 800d7b8:	6825      	ldr	r5, [r4, #0]
 800d7ba:	1961      	adds	r1, r4, r5
 800d7bc:	428b      	cmp	r3, r1
 800d7be:	bf01      	itttt	eq
 800d7c0:	6819      	ldreq	r1, [r3, #0]
 800d7c2:	685b      	ldreq	r3, [r3, #4]
 800d7c4:	1949      	addeq	r1, r1, r5
 800d7c6:	6021      	streq	r1, [r4, #0]
 800d7c8:	e7ed      	b.n	800d7a6 <_free_r+0x22>
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	b10b      	cbz	r3, 800d7d4 <_free_r+0x50>
 800d7d0:	42a3      	cmp	r3, r4
 800d7d2:	d9fa      	bls.n	800d7ca <_free_r+0x46>
 800d7d4:	6811      	ldr	r1, [r2, #0]
 800d7d6:	1855      	adds	r5, r2, r1
 800d7d8:	42a5      	cmp	r5, r4
 800d7da:	d10b      	bne.n	800d7f4 <_free_r+0x70>
 800d7dc:	6824      	ldr	r4, [r4, #0]
 800d7de:	4421      	add	r1, r4
 800d7e0:	1854      	adds	r4, r2, r1
 800d7e2:	42a3      	cmp	r3, r4
 800d7e4:	6011      	str	r1, [r2, #0]
 800d7e6:	d1e0      	bne.n	800d7aa <_free_r+0x26>
 800d7e8:	681c      	ldr	r4, [r3, #0]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	6053      	str	r3, [r2, #4]
 800d7ee:	440c      	add	r4, r1
 800d7f0:	6014      	str	r4, [r2, #0]
 800d7f2:	e7da      	b.n	800d7aa <_free_r+0x26>
 800d7f4:	d902      	bls.n	800d7fc <_free_r+0x78>
 800d7f6:	230c      	movs	r3, #12
 800d7f8:	6003      	str	r3, [r0, #0]
 800d7fa:	e7d6      	b.n	800d7aa <_free_r+0x26>
 800d7fc:	6825      	ldr	r5, [r4, #0]
 800d7fe:	1961      	adds	r1, r4, r5
 800d800:	428b      	cmp	r3, r1
 800d802:	bf04      	itt	eq
 800d804:	6819      	ldreq	r1, [r3, #0]
 800d806:	685b      	ldreq	r3, [r3, #4]
 800d808:	6063      	str	r3, [r4, #4]
 800d80a:	bf04      	itt	eq
 800d80c:	1949      	addeq	r1, r1, r5
 800d80e:	6021      	streq	r1, [r4, #0]
 800d810:	6054      	str	r4, [r2, #4]
 800d812:	e7ca      	b.n	800d7aa <_free_r+0x26>
 800d814:	b003      	add	sp, #12
 800d816:	bd30      	pop	{r4, r5, pc}
 800d818:	20001a88 	.word	0x20001a88

0800d81c <sbrk_aligned>:
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	4e0e      	ldr	r6, [pc, #56]	; (800d858 <sbrk_aligned+0x3c>)
 800d820:	460c      	mov	r4, r1
 800d822:	6831      	ldr	r1, [r6, #0]
 800d824:	4605      	mov	r5, r0
 800d826:	b911      	cbnz	r1, 800d82e <sbrk_aligned+0x12>
 800d828:	f000 fcec 	bl	800e204 <_sbrk_r>
 800d82c:	6030      	str	r0, [r6, #0]
 800d82e:	4621      	mov	r1, r4
 800d830:	4628      	mov	r0, r5
 800d832:	f000 fce7 	bl	800e204 <_sbrk_r>
 800d836:	1c43      	adds	r3, r0, #1
 800d838:	d00a      	beq.n	800d850 <sbrk_aligned+0x34>
 800d83a:	1cc4      	adds	r4, r0, #3
 800d83c:	f024 0403 	bic.w	r4, r4, #3
 800d840:	42a0      	cmp	r0, r4
 800d842:	d007      	beq.n	800d854 <sbrk_aligned+0x38>
 800d844:	1a21      	subs	r1, r4, r0
 800d846:	4628      	mov	r0, r5
 800d848:	f000 fcdc 	bl	800e204 <_sbrk_r>
 800d84c:	3001      	adds	r0, #1
 800d84e:	d101      	bne.n	800d854 <sbrk_aligned+0x38>
 800d850:	f04f 34ff 	mov.w	r4, #4294967295
 800d854:	4620      	mov	r0, r4
 800d856:	bd70      	pop	{r4, r5, r6, pc}
 800d858:	20001a8c 	.word	0x20001a8c

0800d85c <_malloc_r>:
 800d85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d860:	1ccd      	adds	r5, r1, #3
 800d862:	f025 0503 	bic.w	r5, r5, #3
 800d866:	3508      	adds	r5, #8
 800d868:	2d0c      	cmp	r5, #12
 800d86a:	bf38      	it	cc
 800d86c:	250c      	movcc	r5, #12
 800d86e:	2d00      	cmp	r5, #0
 800d870:	4607      	mov	r7, r0
 800d872:	db01      	blt.n	800d878 <_malloc_r+0x1c>
 800d874:	42a9      	cmp	r1, r5
 800d876:	d905      	bls.n	800d884 <_malloc_r+0x28>
 800d878:	230c      	movs	r3, #12
 800d87a:	603b      	str	r3, [r7, #0]
 800d87c:	2600      	movs	r6, #0
 800d87e:	4630      	mov	r0, r6
 800d880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d884:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d958 <_malloc_r+0xfc>
 800d888:	f000 f868 	bl	800d95c <__malloc_lock>
 800d88c:	f8d8 3000 	ldr.w	r3, [r8]
 800d890:	461c      	mov	r4, r3
 800d892:	bb5c      	cbnz	r4, 800d8ec <_malloc_r+0x90>
 800d894:	4629      	mov	r1, r5
 800d896:	4638      	mov	r0, r7
 800d898:	f7ff ffc0 	bl	800d81c <sbrk_aligned>
 800d89c:	1c43      	adds	r3, r0, #1
 800d89e:	4604      	mov	r4, r0
 800d8a0:	d155      	bne.n	800d94e <_malloc_r+0xf2>
 800d8a2:	f8d8 4000 	ldr.w	r4, [r8]
 800d8a6:	4626      	mov	r6, r4
 800d8a8:	2e00      	cmp	r6, #0
 800d8aa:	d145      	bne.n	800d938 <_malloc_r+0xdc>
 800d8ac:	2c00      	cmp	r4, #0
 800d8ae:	d048      	beq.n	800d942 <_malloc_r+0xe6>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	4631      	mov	r1, r6
 800d8b4:	4638      	mov	r0, r7
 800d8b6:	eb04 0903 	add.w	r9, r4, r3
 800d8ba:	f000 fca3 	bl	800e204 <_sbrk_r>
 800d8be:	4581      	cmp	r9, r0
 800d8c0:	d13f      	bne.n	800d942 <_malloc_r+0xe6>
 800d8c2:	6821      	ldr	r1, [r4, #0]
 800d8c4:	1a6d      	subs	r5, r5, r1
 800d8c6:	4629      	mov	r1, r5
 800d8c8:	4638      	mov	r0, r7
 800d8ca:	f7ff ffa7 	bl	800d81c <sbrk_aligned>
 800d8ce:	3001      	adds	r0, #1
 800d8d0:	d037      	beq.n	800d942 <_malloc_r+0xe6>
 800d8d2:	6823      	ldr	r3, [r4, #0]
 800d8d4:	442b      	add	r3, r5
 800d8d6:	6023      	str	r3, [r4, #0]
 800d8d8:	f8d8 3000 	ldr.w	r3, [r8]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d038      	beq.n	800d952 <_malloc_r+0xf6>
 800d8e0:	685a      	ldr	r2, [r3, #4]
 800d8e2:	42a2      	cmp	r2, r4
 800d8e4:	d12b      	bne.n	800d93e <_malloc_r+0xe2>
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	605a      	str	r2, [r3, #4]
 800d8ea:	e00f      	b.n	800d90c <_malloc_r+0xb0>
 800d8ec:	6822      	ldr	r2, [r4, #0]
 800d8ee:	1b52      	subs	r2, r2, r5
 800d8f0:	d41f      	bmi.n	800d932 <_malloc_r+0xd6>
 800d8f2:	2a0b      	cmp	r2, #11
 800d8f4:	d917      	bls.n	800d926 <_malloc_r+0xca>
 800d8f6:	1961      	adds	r1, r4, r5
 800d8f8:	42a3      	cmp	r3, r4
 800d8fa:	6025      	str	r5, [r4, #0]
 800d8fc:	bf18      	it	ne
 800d8fe:	6059      	strne	r1, [r3, #4]
 800d900:	6863      	ldr	r3, [r4, #4]
 800d902:	bf08      	it	eq
 800d904:	f8c8 1000 	streq.w	r1, [r8]
 800d908:	5162      	str	r2, [r4, r5]
 800d90a:	604b      	str	r3, [r1, #4]
 800d90c:	4638      	mov	r0, r7
 800d90e:	f104 060b 	add.w	r6, r4, #11
 800d912:	f000 f829 	bl	800d968 <__malloc_unlock>
 800d916:	f026 0607 	bic.w	r6, r6, #7
 800d91a:	1d23      	adds	r3, r4, #4
 800d91c:	1af2      	subs	r2, r6, r3
 800d91e:	d0ae      	beq.n	800d87e <_malloc_r+0x22>
 800d920:	1b9b      	subs	r3, r3, r6
 800d922:	50a3      	str	r3, [r4, r2]
 800d924:	e7ab      	b.n	800d87e <_malloc_r+0x22>
 800d926:	42a3      	cmp	r3, r4
 800d928:	6862      	ldr	r2, [r4, #4]
 800d92a:	d1dd      	bne.n	800d8e8 <_malloc_r+0x8c>
 800d92c:	f8c8 2000 	str.w	r2, [r8]
 800d930:	e7ec      	b.n	800d90c <_malloc_r+0xb0>
 800d932:	4623      	mov	r3, r4
 800d934:	6864      	ldr	r4, [r4, #4]
 800d936:	e7ac      	b.n	800d892 <_malloc_r+0x36>
 800d938:	4634      	mov	r4, r6
 800d93a:	6876      	ldr	r6, [r6, #4]
 800d93c:	e7b4      	b.n	800d8a8 <_malloc_r+0x4c>
 800d93e:	4613      	mov	r3, r2
 800d940:	e7cc      	b.n	800d8dc <_malloc_r+0x80>
 800d942:	230c      	movs	r3, #12
 800d944:	603b      	str	r3, [r7, #0]
 800d946:	4638      	mov	r0, r7
 800d948:	f000 f80e 	bl	800d968 <__malloc_unlock>
 800d94c:	e797      	b.n	800d87e <_malloc_r+0x22>
 800d94e:	6025      	str	r5, [r4, #0]
 800d950:	e7dc      	b.n	800d90c <_malloc_r+0xb0>
 800d952:	605b      	str	r3, [r3, #4]
 800d954:	deff      	udf	#255	; 0xff
 800d956:	bf00      	nop
 800d958:	20001a88 	.word	0x20001a88

0800d95c <__malloc_lock>:
 800d95c:	4801      	ldr	r0, [pc, #4]	; (800d964 <__malloc_lock+0x8>)
 800d95e:	f7ff bf00 	b.w	800d762 <__retarget_lock_acquire_recursive>
 800d962:	bf00      	nop
 800d964:	20001a84 	.word	0x20001a84

0800d968 <__malloc_unlock>:
 800d968:	4801      	ldr	r0, [pc, #4]	; (800d970 <__malloc_unlock+0x8>)
 800d96a:	f7ff befb 	b.w	800d764 <__retarget_lock_release_recursive>
 800d96e:	bf00      	nop
 800d970:	20001a84 	.word	0x20001a84

0800d974 <__sfputc_r>:
 800d974:	6893      	ldr	r3, [r2, #8]
 800d976:	3b01      	subs	r3, #1
 800d978:	2b00      	cmp	r3, #0
 800d97a:	b410      	push	{r4}
 800d97c:	6093      	str	r3, [r2, #8]
 800d97e:	da08      	bge.n	800d992 <__sfputc_r+0x1e>
 800d980:	6994      	ldr	r4, [r2, #24]
 800d982:	42a3      	cmp	r3, r4
 800d984:	db01      	blt.n	800d98a <__sfputc_r+0x16>
 800d986:	290a      	cmp	r1, #10
 800d988:	d103      	bne.n	800d992 <__sfputc_r+0x1e>
 800d98a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d98e:	f7ff bdc2 	b.w	800d516 <__swbuf_r>
 800d992:	6813      	ldr	r3, [r2, #0]
 800d994:	1c58      	adds	r0, r3, #1
 800d996:	6010      	str	r0, [r2, #0]
 800d998:	7019      	strb	r1, [r3, #0]
 800d99a:	4608      	mov	r0, r1
 800d99c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <__sfputs_r>:
 800d9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	460f      	mov	r7, r1
 800d9a8:	4614      	mov	r4, r2
 800d9aa:	18d5      	adds	r5, r2, r3
 800d9ac:	42ac      	cmp	r4, r5
 800d9ae:	d101      	bne.n	800d9b4 <__sfputs_r+0x12>
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	e007      	b.n	800d9c4 <__sfputs_r+0x22>
 800d9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9b8:	463a      	mov	r2, r7
 800d9ba:	4630      	mov	r0, r6
 800d9bc:	f7ff ffda 	bl	800d974 <__sfputc_r>
 800d9c0:	1c43      	adds	r3, r0, #1
 800d9c2:	d1f3      	bne.n	800d9ac <__sfputs_r+0xa>
 800d9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9c8 <_vfiprintf_r>:
 800d9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9cc:	460d      	mov	r5, r1
 800d9ce:	b09d      	sub	sp, #116	; 0x74
 800d9d0:	4614      	mov	r4, r2
 800d9d2:	4698      	mov	r8, r3
 800d9d4:	4606      	mov	r6, r0
 800d9d6:	b118      	cbz	r0, 800d9e0 <_vfiprintf_r+0x18>
 800d9d8:	6a03      	ldr	r3, [r0, #32]
 800d9da:	b90b      	cbnz	r3, 800d9e0 <_vfiprintf_r+0x18>
 800d9dc:	f7ff fcac 	bl	800d338 <__sinit>
 800d9e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9e2:	07d9      	lsls	r1, r3, #31
 800d9e4:	d405      	bmi.n	800d9f2 <_vfiprintf_r+0x2a>
 800d9e6:	89ab      	ldrh	r3, [r5, #12]
 800d9e8:	059a      	lsls	r2, r3, #22
 800d9ea:	d402      	bmi.n	800d9f2 <_vfiprintf_r+0x2a>
 800d9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9ee:	f7ff feb8 	bl	800d762 <__retarget_lock_acquire_recursive>
 800d9f2:	89ab      	ldrh	r3, [r5, #12]
 800d9f4:	071b      	lsls	r3, r3, #28
 800d9f6:	d501      	bpl.n	800d9fc <_vfiprintf_r+0x34>
 800d9f8:	692b      	ldr	r3, [r5, #16]
 800d9fa:	b99b      	cbnz	r3, 800da24 <_vfiprintf_r+0x5c>
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	4630      	mov	r0, r6
 800da00:	f7ff fdc6 	bl	800d590 <__swsetup_r>
 800da04:	b170      	cbz	r0, 800da24 <_vfiprintf_r+0x5c>
 800da06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da08:	07dc      	lsls	r4, r3, #31
 800da0a:	d504      	bpl.n	800da16 <_vfiprintf_r+0x4e>
 800da0c:	f04f 30ff 	mov.w	r0, #4294967295
 800da10:	b01d      	add	sp, #116	; 0x74
 800da12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da16:	89ab      	ldrh	r3, [r5, #12]
 800da18:	0598      	lsls	r0, r3, #22
 800da1a:	d4f7      	bmi.n	800da0c <_vfiprintf_r+0x44>
 800da1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da1e:	f7ff fea1 	bl	800d764 <__retarget_lock_release_recursive>
 800da22:	e7f3      	b.n	800da0c <_vfiprintf_r+0x44>
 800da24:	2300      	movs	r3, #0
 800da26:	9309      	str	r3, [sp, #36]	; 0x24
 800da28:	2320      	movs	r3, #32
 800da2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800da32:	2330      	movs	r3, #48	; 0x30
 800da34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dbe8 <_vfiprintf_r+0x220>
 800da38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da3c:	f04f 0901 	mov.w	r9, #1
 800da40:	4623      	mov	r3, r4
 800da42:	469a      	mov	sl, r3
 800da44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da48:	b10a      	cbz	r2, 800da4e <_vfiprintf_r+0x86>
 800da4a:	2a25      	cmp	r2, #37	; 0x25
 800da4c:	d1f9      	bne.n	800da42 <_vfiprintf_r+0x7a>
 800da4e:	ebba 0b04 	subs.w	fp, sl, r4
 800da52:	d00b      	beq.n	800da6c <_vfiprintf_r+0xa4>
 800da54:	465b      	mov	r3, fp
 800da56:	4622      	mov	r2, r4
 800da58:	4629      	mov	r1, r5
 800da5a:	4630      	mov	r0, r6
 800da5c:	f7ff ffa1 	bl	800d9a2 <__sfputs_r>
 800da60:	3001      	adds	r0, #1
 800da62:	f000 80a9 	beq.w	800dbb8 <_vfiprintf_r+0x1f0>
 800da66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da68:	445a      	add	r2, fp
 800da6a:	9209      	str	r2, [sp, #36]	; 0x24
 800da6c:	f89a 3000 	ldrb.w	r3, [sl]
 800da70:	2b00      	cmp	r3, #0
 800da72:	f000 80a1 	beq.w	800dbb8 <_vfiprintf_r+0x1f0>
 800da76:	2300      	movs	r3, #0
 800da78:	f04f 32ff 	mov.w	r2, #4294967295
 800da7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da80:	f10a 0a01 	add.w	sl, sl, #1
 800da84:	9304      	str	r3, [sp, #16]
 800da86:	9307      	str	r3, [sp, #28]
 800da88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da8c:	931a      	str	r3, [sp, #104]	; 0x68
 800da8e:	4654      	mov	r4, sl
 800da90:	2205      	movs	r2, #5
 800da92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da96:	4854      	ldr	r0, [pc, #336]	; (800dbe8 <_vfiprintf_r+0x220>)
 800da98:	f7f2 fb7a 	bl	8000190 <memchr>
 800da9c:	9a04      	ldr	r2, [sp, #16]
 800da9e:	b9d8      	cbnz	r0, 800dad8 <_vfiprintf_r+0x110>
 800daa0:	06d1      	lsls	r1, r2, #27
 800daa2:	bf44      	itt	mi
 800daa4:	2320      	movmi	r3, #32
 800daa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daaa:	0713      	lsls	r3, r2, #28
 800daac:	bf44      	itt	mi
 800daae:	232b      	movmi	r3, #43	; 0x2b
 800dab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dab4:	f89a 3000 	ldrb.w	r3, [sl]
 800dab8:	2b2a      	cmp	r3, #42	; 0x2a
 800daba:	d015      	beq.n	800dae8 <_vfiprintf_r+0x120>
 800dabc:	9a07      	ldr	r2, [sp, #28]
 800dabe:	4654      	mov	r4, sl
 800dac0:	2000      	movs	r0, #0
 800dac2:	f04f 0c0a 	mov.w	ip, #10
 800dac6:	4621      	mov	r1, r4
 800dac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dacc:	3b30      	subs	r3, #48	; 0x30
 800dace:	2b09      	cmp	r3, #9
 800dad0:	d94d      	bls.n	800db6e <_vfiprintf_r+0x1a6>
 800dad2:	b1b0      	cbz	r0, 800db02 <_vfiprintf_r+0x13a>
 800dad4:	9207      	str	r2, [sp, #28]
 800dad6:	e014      	b.n	800db02 <_vfiprintf_r+0x13a>
 800dad8:	eba0 0308 	sub.w	r3, r0, r8
 800dadc:	fa09 f303 	lsl.w	r3, r9, r3
 800dae0:	4313      	orrs	r3, r2
 800dae2:	9304      	str	r3, [sp, #16]
 800dae4:	46a2      	mov	sl, r4
 800dae6:	e7d2      	b.n	800da8e <_vfiprintf_r+0xc6>
 800dae8:	9b03      	ldr	r3, [sp, #12]
 800daea:	1d19      	adds	r1, r3, #4
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	9103      	str	r1, [sp, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	bfbb      	ittet	lt
 800daf4:	425b      	neglt	r3, r3
 800daf6:	f042 0202 	orrlt.w	r2, r2, #2
 800dafa:	9307      	strge	r3, [sp, #28]
 800dafc:	9307      	strlt	r3, [sp, #28]
 800dafe:	bfb8      	it	lt
 800db00:	9204      	strlt	r2, [sp, #16]
 800db02:	7823      	ldrb	r3, [r4, #0]
 800db04:	2b2e      	cmp	r3, #46	; 0x2e
 800db06:	d10c      	bne.n	800db22 <_vfiprintf_r+0x15a>
 800db08:	7863      	ldrb	r3, [r4, #1]
 800db0a:	2b2a      	cmp	r3, #42	; 0x2a
 800db0c:	d134      	bne.n	800db78 <_vfiprintf_r+0x1b0>
 800db0e:	9b03      	ldr	r3, [sp, #12]
 800db10:	1d1a      	adds	r2, r3, #4
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	9203      	str	r2, [sp, #12]
 800db16:	2b00      	cmp	r3, #0
 800db18:	bfb8      	it	lt
 800db1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800db1e:	3402      	adds	r4, #2
 800db20:	9305      	str	r3, [sp, #20]
 800db22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dbf8 <_vfiprintf_r+0x230>
 800db26:	7821      	ldrb	r1, [r4, #0]
 800db28:	2203      	movs	r2, #3
 800db2a:	4650      	mov	r0, sl
 800db2c:	f7f2 fb30 	bl	8000190 <memchr>
 800db30:	b138      	cbz	r0, 800db42 <_vfiprintf_r+0x17a>
 800db32:	9b04      	ldr	r3, [sp, #16]
 800db34:	eba0 000a 	sub.w	r0, r0, sl
 800db38:	2240      	movs	r2, #64	; 0x40
 800db3a:	4082      	lsls	r2, r0
 800db3c:	4313      	orrs	r3, r2
 800db3e:	3401      	adds	r4, #1
 800db40:	9304      	str	r3, [sp, #16]
 800db42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db46:	4829      	ldr	r0, [pc, #164]	; (800dbec <_vfiprintf_r+0x224>)
 800db48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db4c:	2206      	movs	r2, #6
 800db4e:	f7f2 fb1f 	bl	8000190 <memchr>
 800db52:	2800      	cmp	r0, #0
 800db54:	d03f      	beq.n	800dbd6 <_vfiprintf_r+0x20e>
 800db56:	4b26      	ldr	r3, [pc, #152]	; (800dbf0 <_vfiprintf_r+0x228>)
 800db58:	bb1b      	cbnz	r3, 800dba2 <_vfiprintf_r+0x1da>
 800db5a:	9b03      	ldr	r3, [sp, #12]
 800db5c:	3307      	adds	r3, #7
 800db5e:	f023 0307 	bic.w	r3, r3, #7
 800db62:	3308      	adds	r3, #8
 800db64:	9303      	str	r3, [sp, #12]
 800db66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db68:	443b      	add	r3, r7
 800db6a:	9309      	str	r3, [sp, #36]	; 0x24
 800db6c:	e768      	b.n	800da40 <_vfiprintf_r+0x78>
 800db6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800db72:	460c      	mov	r4, r1
 800db74:	2001      	movs	r0, #1
 800db76:	e7a6      	b.n	800dac6 <_vfiprintf_r+0xfe>
 800db78:	2300      	movs	r3, #0
 800db7a:	3401      	adds	r4, #1
 800db7c:	9305      	str	r3, [sp, #20]
 800db7e:	4619      	mov	r1, r3
 800db80:	f04f 0c0a 	mov.w	ip, #10
 800db84:	4620      	mov	r0, r4
 800db86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db8a:	3a30      	subs	r2, #48	; 0x30
 800db8c:	2a09      	cmp	r2, #9
 800db8e:	d903      	bls.n	800db98 <_vfiprintf_r+0x1d0>
 800db90:	2b00      	cmp	r3, #0
 800db92:	d0c6      	beq.n	800db22 <_vfiprintf_r+0x15a>
 800db94:	9105      	str	r1, [sp, #20]
 800db96:	e7c4      	b.n	800db22 <_vfiprintf_r+0x15a>
 800db98:	fb0c 2101 	mla	r1, ip, r1, r2
 800db9c:	4604      	mov	r4, r0
 800db9e:	2301      	movs	r3, #1
 800dba0:	e7f0      	b.n	800db84 <_vfiprintf_r+0x1bc>
 800dba2:	ab03      	add	r3, sp, #12
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	462a      	mov	r2, r5
 800dba8:	4b12      	ldr	r3, [pc, #72]	; (800dbf4 <_vfiprintf_r+0x22c>)
 800dbaa:	a904      	add	r1, sp, #16
 800dbac:	4630      	mov	r0, r6
 800dbae:	f3af 8000 	nop.w
 800dbb2:	4607      	mov	r7, r0
 800dbb4:	1c78      	adds	r0, r7, #1
 800dbb6:	d1d6      	bne.n	800db66 <_vfiprintf_r+0x19e>
 800dbb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbba:	07d9      	lsls	r1, r3, #31
 800dbbc:	d405      	bmi.n	800dbca <_vfiprintf_r+0x202>
 800dbbe:	89ab      	ldrh	r3, [r5, #12]
 800dbc0:	059a      	lsls	r2, r3, #22
 800dbc2:	d402      	bmi.n	800dbca <_vfiprintf_r+0x202>
 800dbc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbc6:	f7ff fdcd 	bl	800d764 <__retarget_lock_release_recursive>
 800dbca:	89ab      	ldrh	r3, [r5, #12]
 800dbcc:	065b      	lsls	r3, r3, #25
 800dbce:	f53f af1d 	bmi.w	800da0c <_vfiprintf_r+0x44>
 800dbd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbd4:	e71c      	b.n	800da10 <_vfiprintf_r+0x48>
 800dbd6:	ab03      	add	r3, sp, #12
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	462a      	mov	r2, r5
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <_vfiprintf_r+0x22c>)
 800dbde:	a904      	add	r1, sp, #16
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	f000 f879 	bl	800dcd8 <_printf_i>
 800dbe6:	e7e4      	b.n	800dbb2 <_vfiprintf_r+0x1ea>
 800dbe8:	0800fa04 	.word	0x0800fa04
 800dbec:	0800fa0e 	.word	0x0800fa0e
 800dbf0:	00000000 	.word	0x00000000
 800dbf4:	0800d9a3 	.word	0x0800d9a3
 800dbf8:	0800fa0a 	.word	0x0800fa0a

0800dbfc <_printf_common>:
 800dbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc00:	4616      	mov	r6, r2
 800dc02:	4699      	mov	r9, r3
 800dc04:	688a      	ldr	r2, [r1, #8]
 800dc06:	690b      	ldr	r3, [r1, #16]
 800dc08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	bfb8      	it	lt
 800dc10:	4613      	movlt	r3, r2
 800dc12:	6033      	str	r3, [r6, #0]
 800dc14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc18:	4607      	mov	r7, r0
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	b10a      	cbz	r2, 800dc22 <_printf_common+0x26>
 800dc1e:	3301      	adds	r3, #1
 800dc20:	6033      	str	r3, [r6, #0]
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	0699      	lsls	r1, r3, #26
 800dc26:	bf42      	ittt	mi
 800dc28:	6833      	ldrmi	r3, [r6, #0]
 800dc2a:	3302      	addmi	r3, #2
 800dc2c:	6033      	strmi	r3, [r6, #0]
 800dc2e:	6825      	ldr	r5, [r4, #0]
 800dc30:	f015 0506 	ands.w	r5, r5, #6
 800dc34:	d106      	bne.n	800dc44 <_printf_common+0x48>
 800dc36:	f104 0a19 	add.w	sl, r4, #25
 800dc3a:	68e3      	ldr	r3, [r4, #12]
 800dc3c:	6832      	ldr	r2, [r6, #0]
 800dc3e:	1a9b      	subs	r3, r3, r2
 800dc40:	42ab      	cmp	r3, r5
 800dc42:	dc26      	bgt.n	800dc92 <_printf_common+0x96>
 800dc44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dc48:	1e13      	subs	r3, r2, #0
 800dc4a:	6822      	ldr	r2, [r4, #0]
 800dc4c:	bf18      	it	ne
 800dc4e:	2301      	movne	r3, #1
 800dc50:	0692      	lsls	r2, r2, #26
 800dc52:	d42b      	bmi.n	800dcac <_printf_common+0xb0>
 800dc54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc58:	4649      	mov	r1, r9
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	47c0      	blx	r8
 800dc5e:	3001      	adds	r0, #1
 800dc60:	d01e      	beq.n	800dca0 <_printf_common+0xa4>
 800dc62:	6823      	ldr	r3, [r4, #0]
 800dc64:	6922      	ldr	r2, [r4, #16]
 800dc66:	f003 0306 	and.w	r3, r3, #6
 800dc6a:	2b04      	cmp	r3, #4
 800dc6c:	bf02      	ittt	eq
 800dc6e:	68e5      	ldreq	r5, [r4, #12]
 800dc70:	6833      	ldreq	r3, [r6, #0]
 800dc72:	1aed      	subeq	r5, r5, r3
 800dc74:	68a3      	ldr	r3, [r4, #8]
 800dc76:	bf0c      	ite	eq
 800dc78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc7c:	2500      	movne	r5, #0
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	bfc4      	itt	gt
 800dc82:	1a9b      	subgt	r3, r3, r2
 800dc84:	18ed      	addgt	r5, r5, r3
 800dc86:	2600      	movs	r6, #0
 800dc88:	341a      	adds	r4, #26
 800dc8a:	42b5      	cmp	r5, r6
 800dc8c:	d11a      	bne.n	800dcc4 <_printf_common+0xc8>
 800dc8e:	2000      	movs	r0, #0
 800dc90:	e008      	b.n	800dca4 <_printf_common+0xa8>
 800dc92:	2301      	movs	r3, #1
 800dc94:	4652      	mov	r2, sl
 800dc96:	4649      	mov	r1, r9
 800dc98:	4638      	mov	r0, r7
 800dc9a:	47c0      	blx	r8
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	d103      	bne.n	800dca8 <_printf_common+0xac>
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295
 800dca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dca8:	3501      	adds	r5, #1
 800dcaa:	e7c6      	b.n	800dc3a <_printf_common+0x3e>
 800dcac:	18e1      	adds	r1, r4, r3
 800dcae:	1c5a      	adds	r2, r3, #1
 800dcb0:	2030      	movs	r0, #48	; 0x30
 800dcb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dcb6:	4422      	add	r2, r4
 800dcb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dcbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dcc0:	3302      	adds	r3, #2
 800dcc2:	e7c7      	b.n	800dc54 <_printf_common+0x58>
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	4622      	mov	r2, r4
 800dcc8:	4649      	mov	r1, r9
 800dcca:	4638      	mov	r0, r7
 800dccc:	47c0      	blx	r8
 800dcce:	3001      	adds	r0, #1
 800dcd0:	d0e6      	beq.n	800dca0 <_printf_common+0xa4>
 800dcd2:	3601      	adds	r6, #1
 800dcd4:	e7d9      	b.n	800dc8a <_printf_common+0x8e>
	...

0800dcd8 <_printf_i>:
 800dcd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcdc:	7e0f      	ldrb	r7, [r1, #24]
 800dcde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dce0:	2f78      	cmp	r7, #120	; 0x78
 800dce2:	4691      	mov	r9, r2
 800dce4:	4680      	mov	r8, r0
 800dce6:	460c      	mov	r4, r1
 800dce8:	469a      	mov	sl, r3
 800dcea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dcee:	d807      	bhi.n	800dd00 <_printf_i+0x28>
 800dcf0:	2f62      	cmp	r7, #98	; 0x62
 800dcf2:	d80a      	bhi.n	800dd0a <_printf_i+0x32>
 800dcf4:	2f00      	cmp	r7, #0
 800dcf6:	f000 80d4 	beq.w	800dea2 <_printf_i+0x1ca>
 800dcfa:	2f58      	cmp	r7, #88	; 0x58
 800dcfc:	f000 80c0 	beq.w	800de80 <_printf_i+0x1a8>
 800dd00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd08:	e03a      	b.n	800dd80 <_printf_i+0xa8>
 800dd0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd0e:	2b15      	cmp	r3, #21
 800dd10:	d8f6      	bhi.n	800dd00 <_printf_i+0x28>
 800dd12:	a101      	add	r1, pc, #4	; (adr r1, 800dd18 <_printf_i+0x40>)
 800dd14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd18:	0800dd71 	.word	0x0800dd71
 800dd1c:	0800dd85 	.word	0x0800dd85
 800dd20:	0800dd01 	.word	0x0800dd01
 800dd24:	0800dd01 	.word	0x0800dd01
 800dd28:	0800dd01 	.word	0x0800dd01
 800dd2c:	0800dd01 	.word	0x0800dd01
 800dd30:	0800dd85 	.word	0x0800dd85
 800dd34:	0800dd01 	.word	0x0800dd01
 800dd38:	0800dd01 	.word	0x0800dd01
 800dd3c:	0800dd01 	.word	0x0800dd01
 800dd40:	0800dd01 	.word	0x0800dd01
 800dd44:	0800de89 	.word	0x0800de89
 800dd48:	0800ddb1 	.word	0x0800ddb1
 800dd4c:	0800de43 	.word	0x0800de43
 800dd50:	0800dd01 	.word	0x0800dd01
 800dd54:	0800dd01 	.word	0x0800dd01
 800dd58:	0800deab 	.word	0x0800deab
 800dd5c:	0800dd01 	.word	0x0800dd01
 800dd60:	0800ddb1 	.word	0x0800ddb1
 800dd64:	0800dd01 	.word	0x0800dd01
 800dd68:	0800dd01 	.word	0x0800dd01
 800dd6c:	0800de4b 	.word	0x0800de4b
 800dd70:	682b      	ldr	r3, [r5, #0]
 800dd72:	1d1a      	adds	r2, r3, #4
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	602a      	str	r2, [r5, #0]
 800dd78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd80:	2301      	movs	r3, #1
 800dd82:	e09f      	b.n	800dec4 <_printf_i+0x1ec>
 800dd84:	6820      	ldr	r0, [r4, #0]
 800dd86:	682b      	ldr	r3, [r5, #0]
 800dd88:	0607      	lsls	r7, r0, #24
 800dd8a:	f103 0104 	add.w	r1, r3, #4
 800dd8e:	6029      	str	r1, [r5, #0]
 800dd90:	d501      	bpl.n	800dd96 <_printf_i+0xbe>
 800dd92:	681e      	ldr	r6, [r3, #0]
 800dd94:	e003      	b.n	800dd9e <_printf_i+0xc6>
 800dd96:	0646      	lsls	r6, r0, #25
 800dd98:	d5fb      	bpl.n	800dd92 <_printf_i+0xba>
 800dd9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dd9e:	2e00      	cmp	r6, #0
 800dda0:	da03      	bge.n	800ddaa <_printf_i+0xd2>
 800dda2:	232d      	movs	r3, #45	; 0x2d
 800dda4:	4276      	negs	r6, r6
 800dda6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddaa:	485a      	ldr	r0, [pc, #360]	; (800df14 <_printf_i+0x23c>)
 800ddac:	230a      	movs	r3, #10
 800ddae:	e012      	b.n	800ddd6 <_printf_i+0xfe>
 800ddb0:	682b      	ldr	r3, [r5, #0]
 800ddb2:	6820      	ldr	r0, [r4, #0]
 800ddb4:	1d19      	adds	r1, r3, #4
 800ddb6:	6029      	str	r1, [r5, #0]
 800ddb8:	0605      	lsls	r5, r0, #24
 800ddba:	d501      	bpl.n	800ddc0 <_printf_i+0xe8>
 800ddbc:	681e      	ldr	r6, [r3, #0]
 800ddbe:	e002      	b.n	800ddc6 <_printf_i+0xee>
 800ddc0:	0641      	lsls	r1, r0, #25
 800ddc2:	d5fb      	bpl.n	800ddbc <_printf_i+0xe4>
 800ddc4:	881e      	ldrh	r6, [r3, #0]
 800ddc6:	4853      	ldr	r0, [pc, #332]	; (800df14 <_printf_i+0x23c>)
 800ddc8:	2f6f      	cmp	r7, #111	; 0x6f
 800ddca:	bf0c      	ite	eq
 800ddcc:	2308      	moveq	r3, #8
 800ddce:	230a      	movne	r3, #10
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ddd6:	6865      	ldr	r5, [r4, #4]
 800ddd8:	60a5      	str	r5, [r4, #8]
 800ddda:	2d00      	cmp	r5, #0
 800dddc:	bfa2      	ittt	ge
 800ddde:	6821      	ldrge	r1, [r4, #0]
 800dde0:	f021 0104 	bicge.w	r1, r1, #4
 800dde4:	6021      	strge	r1, [r4, #0]
 800dde6:	b90e      	cbnz	r6, 800ddec <_printf_i+0x114>
 800dde8:	2d00      	cmp	r5, #0
 800ddea:	d04b      	beq.n	800de84 <_printf_i+0x1ac>
 800ddec:	4615      	mov	r5, r2
 800ddee:	fbb6 f1f3 	udiv	r1, r6, r3
 800ddf2:	fb03 6711 	mls	r7, r3, r1, r6
 800ddf6:	5dc7      	ldrb	r7, [r0, r7]
 800ddf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ddfc:	4637      	mov	r7, r6
 800ddfe:	42bb      	cmp	r3, r7
 800de00:	460e      	mov	r6, r1
 800de02:	d9f4      	bls.n	800ddee <_printf_i+0x116>
 800de04:	2b08      	cmp	r3, #8
 800de06:	d10b      	bne.n	800de20 <_printf_i+0x148>
 800de08:	6823      	ldr	r3, [r4, #0]
 800de0a:	07de      	lsls	r6, r3, #31
 800de0c:	d508      	bpl.n	800de20 <_printf_i+0x148>
 800de0e:	6923      	ldr	r3, [r4, #16]
 800de10:	6861      	ldr	r1, [r4, #4]
 800de12:	4299      	cmp	r1, r3
 800de14:	bfde      	ittt	le
 800de16:	2330      	movle	r3, #48	; 0x30
 800de18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de20:	1b52      	subs	r2, r2, r5
 800de22:	6122      	str	r2, [r4, #16]
 800de24:	f8cd a000 	str.w	sl, [sp]
 800de28:	464b      	mov	r3, r9
 800de2a:	aa03      	add	r2, sp, #12
 800de2c:	4621      	mov	r1, r4
 800de2e:	4640      	mov	r0, r8
 800de30:	f7ff fee4 	bl	800dbfc <_printf_common>
 800de34:	3001      	adds	r0, #1
 800de36:	d14a      	bne.n	800dece <_printf_i+0x1f6>
 800de38:	f04f 30ff 	mov.w	r0, #4294967295
 800de3c:	b004      	add	sp, #16
 800de3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de42:	6823      	ldr	r3, [r4, #0]
 800de44:	f043 0320 	orr.w	r3, r3, #32
 800de48:	6023      	str	r3, [r4, #0]
 800de4a:	4833      	ldr	r0, [pc, #204]	; (800df18 <_printf_i+0x240>)
 800de4c:	2778      	movs	r7, #120	; 0x78
 800de4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	6829      	ldr	r1, [r5, #0]
 800de56:	061f      	lsls	r7, r3, #24
 800de58:	f851 6b04 	ldr.w	r6, [r1], #4
 800de5c:	d402      	bmi.n	800de64 <_printf_i+0x18c>
 800de5e:	065f      	lsls	r7, r3, #25
 800de60:	bf48      	it	mi
 800de62:	b2b6      	uxthmi	r6, r6
 800de64:	07df      	lsls	r7, r3, #31
 800de66:	bf48      	it	mi
 800de68:	f043 0320 	orrmi.w	r3, r3, #32
 800de6c:	6029      	str	r1, [r5, #0]
 800de6e:	bf48      	it	mi
 800de70:	6023      	strmi	r3, [r4, #0]
 800de72:	b91e      	cbnz	r6, 800de7c <_printf_i+0x1a4>
 800de74:	6823      	ldr	r3, [r4, #0]
 800de76:	f023 0320 	bic.w	r3, r3, #32
 800de7a:	6023      	str	r3, [r4, #0]
 800de7c:	2310      	movs	r3, #16
 800de7e:	e7a7      	b.n	800ddd0 <_printf_i+0xf8>
 800de80:	4824      	ldr	r0, [pc, #144]	; (800df14 <_printf_i+0x23c>)
 800de82:	e7e4      	b.n	800de4e <_printf_i+0x176>
 800de84:	4615      	mov	r5, r2
 800de86:	e7bd      	b.n	800de04 <_printf_i+0x12c>
 800de88:	682b      	ldr	r3, [r5, #0]
 800de8a:	6826      	ldr	r6, [r4, #0]
 800de8c:	6961      	ldr	r1, [r4, #20]
 800de8e:	1d18      	adds	r0, r3, #4
 800de90:	6028      	str	r0, [r5, #0]
 800de92:	0635      	lsls	r5, r6, #24
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	d501      	bpl.n	800de9c <_printf_i+0x1c4>
 800de98:	6019      	str	r1, [r3, #0]
 800de9a:	e002      	b.n	800dea2 <_printf_i+0x1ca>
 800de9c:	0670      	lsls	r0, r6, #25
 800de9e:	d5fb      	bpl.n	800de98 <_printf_i+0x1c0>
 800dea0:	8019      	strh	r1, [r3, #0]
 800dea2:	2300      	movs	r3, #0
 800dea4:	6123      	str	r3, [r4, #16]
 800dea6:	4615      	mov	r5, r2
 800dea8:	e7bc      	b.n	800de24 <_printf_i+0x14c>
 800deaa:	682b      	ldr	r3, [r5, #0]
 800deac:	1d1a      	adds	r2, r3, #4
 800deae:	602a      	str	r2, [r5, #0]
 800deb0:	681d      	ldr	r5, [r3, #0]
 800deb2:	6862      	ldr	r2, [r4, #4]
 800deb4:	2100      	movs	r1, #0
 800deb6:	4628      	mov	r0, r5
 800deb8:	f7f2 f96a 	bl	8000190 <memchr>
 800debc:	b108      	cbz	r0, 800dec2 <_printf_i+0x1ea>
 800debe:	1b40      	subs	r0, r0, r5
 800dec0:	6060      	str	r0, [r4, #4]
 800dec2:	6863      	ldr	r3, [r4, #4]
 800dec4:	6123      	str	r3, [r4, #16]
 800dec6:	2300      	movs	r3, #0
 800dec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800decc:	e7aa      	b.n	800de24 <_printf_i+0x14c>
 800dece:	6923      	ldr	r3, [r4, #16]
 800ded0:	462a      	mov	r2, r5
 800ded2:	4649      	mov	r1, r9
 800ded4:	4640      	mov	r0, r8
 800ded6:	47d0      	blx	sl
 800ded8:	3001      	adds	r0, #1
 800deda:	d0ad      	beq.n	800de38 <_printf_i+0x160>
 800dedc:	6823      	ldr	r3, [r4, #0]
 800dede:	079b      	lsls	r3, r3, #30
 800dee0:	d413      	bmi.n	800df0a <_printf_i+0x232>
 800dee2:	68e0      	ldr	r0, [r4, #12]
 800dee4:	9b03      	ldr	r3, [sp, #12]
 800dee6:	4298      	cmp	r0, r3
 800dee8:	bfb8      	it	lt
 800deea:	4618      	movlt	r0, r3
 800deec:	e7a6      	b.n	800de3c <_printf_i+0x164>
 800deee:	2301      	movs	r3, #1
 800def0:	4632      	mov	r2, r6
 800def2:	4649      	mov	r1, r9
 800def4:	4640      	mov	r0, r8
 800def6:	47d0      	blx	sl
 800def8:	3001      	adds	r0, #1
 800defa:	d09d      	beq.n	800de38 <_printf_i+0x160>
 800defc:	3501      	adds	r5, #1
 800defe:	68e3      	ldr	r3, [r4, #12]
 800df00:	9903      	ldr	r1, [sp, #12]
 800df02:	1a5b      	subs	r3, r3, r1
 800df04:	42ab      	cmp	r3, r5
 800df06:	dcf2      	bgt.n	800deee <_printf_i+0x216>
 800df08:	e7eb      	b.n	800dee2 <_printf_i+0x20a>
 800df0a:	2500      	movs	r5, #0
 800df0c:	f104 0619 	add.w	r6, r4, #25
 800df10:	e7f5      	b.n	800defe <_printf_i+0x226>
 800df12:	bf00      	nop
 800df14:	0800fa15 	.word	0x0800fa15
 800df18:	0800fa26 	.word	0x0800fa26

0800df1c <__sflush_r>:
 800df1c:	898a      	ldrh	r2, [r1, #12]
 800df1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df22:	4605      	mov	r5, r0
 800df24:	0710      	lsls	r0, r2, #28
 800df26:	460c      	mov	r4, r1
 800df28:	d458      	bmi.n	800dfdc <__sflush_r+0xc0>
 800df2a:	684b      	ldr	r3, [r1, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	dc05      	bgt.n	800df3c <__sflush_r+0x20>
 800df30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df32:	2b00      	cmp	r3, #0
 800df34:	dc02      	bgt.n	800df3c <__sflush_r+0x20>
 800df36:	2000      	movs	r0, #0
 800df38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df3e:	2e00      	cmp	r6, #0
 800df40:	d0f9      	beq.n	800df36 <__sflush_r+0x1a>
 800df42:	2300      	movs	r3, #0
 800df44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df48:	682f      	ldr	r7, [r5, #0]
 800df4a:	6a21      	ldr	r1, [r4, #32]
 800df4c:	602b      	str	r3, [r5, #0]
 800df4e:	d032      	beq.n	800dfb6 <__sflush_r+0x9a>
 800df50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df52:	89a3      	ldrh	r3, [r4, #12]
 800df54:	075a      	lsls	r2, r3, #29
 800df56:	d505      	bpl.n	800df64 <__sflush_r+0x48>
 800df58:	6863      	ldr	r3, [r4, #4]
 800df5a:	1ac0      	subs	r0, r0, r3
 800df5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df5e:	b10b      	cbz	r3, 800df64 <__sflush_r+0x48>
 800df60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df62:	1ac0      	subs	r0, r0, r3
 800df64:	2300      	movs	r3, #0
 800df66:	4602      	mov	r2, r0
 800df68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df6a:	6a21      	ldr	r1, [r4, #32]
 800df6c:	4628      	mov	r0, r5
 800df6e:	47b0      	blx	r6
 800df70:	1c43      	adds	r3, r0, #1
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	d106      	bne.n	800df84 <__sflush_r+0x68>
 800df76:	6829      	ldr	r1, [r5, #0]
 800df78:	291d      	cmp	r1, #29
 800df7a:	d82b      	bhi.n	800dfd4 <__sflush_r+0xb8>
 800df7c:	4a29      	ldr	r2, [pc, #164]	; (800e024 <__sflush_r+0x108>)
 800df7e:	410a      	asrs	r2, r1
 800df80:	07d6      	lsls	r6, r2, #31
 800df82:	d427      	bmi.n	800dfd4 <__sflush_r+0xb8>
 800df84:	2200      	movs	r2, #0
 800df86:	6062      	str	r2, [r4, #4]
 800df88:	04d9      	lsls	r1, r3, #19
 800df8a:	6922      	ldr	r2, [r4, #16]
 800df8c:	6022      	str	r2, [r4, #0]
 800df8e:	d504      	bpl.n	800df9a <__sflush_r+0x7e>
 800df90:	1c42      	adds	r2, r0, #1
 800df92:	d101      	bne.n	800df98 <__sflush_r+0x7c>
 800df94:	682b      	ldr	r3, [r5, #0]
 800df96:	b903      	cbnz	r3, 800df9a <__sflush_r+0x7e>
 800df98:	6560      	str	r0, [r4, #84]	; 0x54
 800df9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df9c:	602f      	str	r7, [r5, #0]
 800df9e:	2900      	cmp	r1, #0
 800dfa0:	d0c9      	beq.n	800df36 <__sflush_r+0x1a>
 800dfa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfa6:	4299      	cmp	r1, r3
 800dfa8:	d002      	beq.n	800dfb0 <__sflush_r+0x94>
 800dfaa:	4628      	mov	r0, r5
 800dfac:	f7ff fbea 	bl	800d784 <_free_r>
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	6360      	str	r0, [r4, #52]	; 0x34
 800dfb4:	e7c0      	b.n	800df38 <__sflush_r+0x1c>
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	4628      	mov	r0, r5
 800dfba:	47b0      	blx	r6
 800dfbc:	1c41      	adds	r1, r0, #1
 800dfbe:	d1c8      	bne.n	800df52 <__sflush_r+0x36>
 800dfc0:	682b      	ldr	r3, [r5, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d0c5      	beq.n	800df52 <__sflush_r+0x36>
 800dfc6:	2b1d      	cmp	r3, #29
 800dfc8:	d001      	beq.n	800dfce <__sflush_r+0xb2>
 800dfca:	2b16      	cmp	r3, #22
 800dfcc:	d101      	bne.n	800dfd2 <__sflush_r+0xb6>
 800dfce:	602f      	str	r7, [r5, #0]
 800dfd0:	e7b1      	b.n	800df36 <__sflush_r+0x1a>
 800dfd2:	89a3      	ldrh	r3, [r4, #12]
 800dfd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfd8:	81a3      	strh	r3, [r4, #12]
 800dfda:	e7ad      	b.n	800df38 <__sflush_r+0x1c>
 800dfdc:	690f      	ldr	r7, [r1, #16]
 800dfde:	2f00      	cmp	r7, #0
 800dfe0:	d0a9      	beq.n	800df36 <__sflush_r+0x1a>
 800dfe2:	0793      	lsls	r3, r2, #30
 800dfe4:	680e      	ldr	r6, [r1, #0]
 800dfe6:	bf08      	it	eq
 800dfe8:	694b      	ldreq	r3, [r1, #20]
 800dfea:	600f      	str	r7, [r1, #0]
 800dfec:	bf18      	it	ne
 800dfee:	2300      	movne	r3, #0
 800dff0:	eba6 0807 	sub.w	r8, r6, r7
 800dff4:	608b      	str	r3, [r1, #8]
 800dff6:	f1b8 0f00 	cmp.w	r8, #0
 800dffa:	dd9c      	ble.n	800df36 <__sflush_r+0x1a>
 800dffc:	6a21      	ldr	r1, [r4, #32]
 800dffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e000:	4643      	mov	r3, r8
 800e002:	463a      	mov	r2, r7
 800e004:	4628      	mov	r0, r5
 800e006:	47b0      	blx	r6
 800e008:	2800      	cmp	r0, #0
 800e00a:	dc06      	bgt.n	800e01a <__sflush_r+0xfe>
 800e00c:	89a3      	ldrh	r3, [r4, #12]
 800e00e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e012:	81a3      	strh	r3, [r4, #12]
 800e014:	f04f 30ff 	mov.w	r0, #4294967295
 800e018:	e78e      	b.n	800df38 <__sflush_r+0x1c>
 800e01a:	4407      	add	r7, r0
 800e01c:	eba8 0800 	sub.w	r8, r8, r0
 800e020:	e7e9      	b.n	800dff6 <__sflush_r+0xda>
 800e022:	bf00      	nop
 800e024:	dfbffffe 	.word	0xdfbffffe

0800e028 <_fflush_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	690b      	ldr	r3, [r1, #16]
 800e02c:	4605      	mov	r5, r0
 800e02e:	460c      	mov	r4, r1
 800e030:	b913      	cbnz	r3, 800e038 <_fflush_r+0x10>
 800e032:	2500      	movs	r5, #0
 800e034:	4628      	mov	r0, r5
 800e036:	bd38      	pop	{r3, r4, r5, pc}
 800e038:	b118      	cbz	r0, 800e042 <_fflush_r+0x1a>
 800e03a:	6a03      	ldr	r3, [r0, #32]
 800e03c:	b90b      	cbnz	r3, 800e042 <_fflush_r+0x1a>
 800e03e:	f7ff f97b 	bl	800d338 <__sinit>
 800e042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d0f3      	beq.n	800e032 <_fflush_r+0xa>
 800e04a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e04c:	07d0      	lsls	r0, r2, #31
 800e04e:	d404      	bmi.n	800e05a <_fflush_r+0x32>
 800e050:	0599      	lsls	r1, r3, #22
 800e052:	d402      	bmi.n	800e05a <_fflush_r+0x32>
 800e054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e056:	f7ff fb84 	bl	800d762 <__retarget_lock_acquire_recursive>
 800e05a:	4628      	mov	r0, r5
 800e05c:	4621      	mov	r1, r4
 800e05e:	f7ff ff5d 	bl	800df1c <__sflush_r>
 800e062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e064:	07da      	lsls	r2, r3, #31
 800e066:	4605      	mov	r5, r0
 800e068:	d4e4      	bmi.n	800e034 <_fflush_r+0xc>
 800e06a:	89a3      	ldrh	r3, [r4, #12]
 800e06c:	059b      	lsls	r3, r3, #22
 800e06e:	d4e1      	bmi.n	800e034 <_fflush_r+0xc>
 800e070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e072:	f7ff fb77 	bl	800d764 <__retarget_lock_release_recursive>
 800e076:	e7dd      	b.n	800e034 <_fflush_r+0xc>

0800e078 <__swhatbuf_r>:
 800e078:	b570      	push	{r4, r5, r6, lr}
 800e07a:	460c      	mov	r4, r1
 800e07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e080:	2900      	cmp	r1, #0
 800e082:	b096      	sub	sp, #88	; 0x58
 800e084:	4615      	mov	r5, r2
 800e086:	461e      	mov	r6, r3
 800e088:	da0d      	bge.n	800e0a6 <__swhatbuf_r+0x2e>
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e090:	f04f 0100 	mov.w	r1, #0
 800e094:	bf0c      	ite	eq
 800e096:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e09a:	2340      	movne	r3, #64	; 0x40
 800e09c:	2000      	movs	r0, #0
 800e09e:	6031      	str	r1, [r6, #0]
 800e0a0:	602b      	str	r3, [r5, #0]
 800e0a2:	b016      	add	sp, #88	; 0x58
 800e0a4:	bd70      	pop	{r4, r5, r6, pc}
 800e0a6:	466a      	mov	r2, sp
 800e0a8:	f000 f88a 	bl	800e1c0 <_fstat_r>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	dbec      	blt.n	800e08a <__swhatbuf_r+0x12>
 800e0b0:	9901      	ldr	r1, [sp, #4]
 800e0b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e0b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e0ba:	4259      	negs	r1, r3
 800e0bc:	4159      	adcs	r1, r3
 800e0be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0c2:	e7eb      	b.n	800e09c <__swhatbuf_r+0x24>

0800e0c4 <__smakebuf_r>:
 800e0c4:	898b      	ldrh	r3, [r1, #12]
 800e0c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0c8:	079d      	lsls	r5, r3, #30
 800e0ca:	4606      	mov	r6, r0
 800e0cc:	460c      	mov	r4, r1
 800e0ce:	d507      	bpl.n	800e0e0 <__smakebuf_r+0x1c>
 800e0d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	6123      	str	r3, [r4, #16]
 800e0d8:	2301      	movs	r3, #1
 800e0da:	6163      	str	r3, [r4, #20]
 800e0dc:	b002      	add	sp, #8
 800e0de:	bd70      	pop	{r4, r5, r6, pc}
 800e0e0:	ab01      	add	r3, sp, #4
 800e0e2:	466a      	mov	r2, sp
 800e0e4:	f7ff ffc8 	bl	800e078 <__swhatbuf_r>
 800e0e8:	9900      	ldr	r1, [sp, #0]
 800e0ea:	4605      	mov	r5, r0
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	f7ff fbb5 	bl	800d85c <_malloc_r>
 800e0f2:	b948      	cbnz	r0, 800e108 <__smakebuf_r+0x44>
 800e0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0f8:	059a      	lsls	r2, r3, #22
 800e0fa:	d4ef      	bmi.n	800e0dc <__smakebuf_r+0x18>
 800e0fc:	f023 0303 	bic.w	r3, r3, #3
 800e100:	f043 0302 	orr.w	r3, r3, #2
 800e104:	81a3      	strh	r3, [r4, #12]
 800e106:	e7e3      	b.n	800e0d0 <__smakebuf_r+0xc>
 800e108:	89a3      	ldrh	r3, [r4, #12]
 800e10a:	6020      	str	r0, [r4, #0]
 800e10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e110:	81a3      	strh	r3, [r4, #12]
 800e112:	9b00      	ldr	r3, [sp, #0]
 800e114:	6163      	str	r3, [r4, #20]
 800e116:	9b01      	ldr	r3, [sp, #4]
 800e118:	6120      	str	r0, [r4, #16]
 800e11a:	b15b      	cbz	r3, 800e134 <__smakebuf_r+0x70>
 800e11c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e120:	4630      	mov	r0, r6
 800e122:	f000 f85f 	bl	800e1e4 <_isatty_r>
 800e126:	b128      	cbz	r0, 800e134 <__smakebuf_r+0x70>
 800e128:	89a3      	ldrh	r3, [r4, #12]
 800e12a:	f023 0303 	bic.w	r3, r3, #3
 800e12e:	f043 0301 	orr.w	r3, r3, #1
 800e132:	81a3      	strh	r3, [r4, #12]
 800e134:	89a3      	ldrh	r3, [r4, #12]
 800e136:	431d      	orrs	r5, r3
 800e138:	81a5      	strh	r5, [r4, #12]
 800e13a:	e7cf      	b.n	800e0dc <__smakebuf_r+0x18>

0800e13c <_putc_r>:
 800e13c:	b570      	push	{r4, r5, r6, lr}
 800e13e:	460d      	mov	r5, r1
 800e140:	4614      	mov	r4, r2
 800e142:	4606      	mov	r6, r0
 800e144:	b118      	cbz	r0, 800e14e <_putc_r+0x12>
 800e146:	6a03      	ldr	r3, [r0, #32]
 800e148:	b90b      	cbnz	r3, 800e14e <_putc_r+0x12>
 800e14a:	f7ff f8f5 	bl	800d338 <__sinit>
 800e14e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e150:	07d8      	lsls	r0, r3, #31
 800e152:	d405      	bmi.n	800e160 <_putc_r+0x24>
 800e154:	89a3      	ldrh	r3, [r4, #12]
 800e156:	0599      	lsls	r1, r3, #22
 800e158:	d402      	bmi.n	800e160 <_putc_r+0x24>
 800e15a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e15c:	f7ff fb01 	bl	800d762 <__retarget_lock_acquire_recursive>
 800e160:	68a3      	ldr	r3, [r4, #8]
 800e162:	3b01      	subs	r3, #1
 800e164:	2b00      	cmp	r3, #0
 800e166:	60a3      	str	r3, [r4, #8]
 800e168:	da05      	bge.n	800e176 <_putc_r+0x3a>
 800e16a:	69a2      	ldr	r2, [r4, #24]
 800e16c:	4293      	cmp	r3, r2
 800e16e:	db12      	blt.n	800e196 <_putc_r+0x5a>
 800e170:	b2eb      	uxtb	r3, r5
 800e172:	2b0a      	cmp	r3, #10
 800e174:	d00f      	beq.n	800e196 <_putc_r+0x5a>
 800e176:	6823      	ldr	r3, [r4, #0]
 800e178:	1c5a      	adds	r2, r3, #1
 800e17a:	6022      	str	r2, [r4, #0]
 800e17c:	701d      	strb	r5, [r3, #0]
 800e17e:	b2ed      	uxtb	r5, r5
 800e180:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e182:	07da      	lsls	r2, r3, #31
 800e184:	d405      	bmi.n	800e192 <_putc_r+0x56>
 800e186:	89a3      	ldrh	r3, [r4, #12]
 800e188:	059b      	lsls	r3, r3, #22
 800e18a:	d402      	bmi.n	800e192 <_putc_r+0x56>
 800e18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e18e:	f7ff fae9 	bl	800d764 <__retarget_lock_release_recursive>
 800e192:	4628      	mov	r0, r5
 800e194:	bd70      	pop	{r4, r5, r6, pc}
 800e196:	4629      	mov	r1, r5
 800e198:	4622      	mov	r2, r4
 800e19a:	4630      	mov	r0, r6
 800e19c:	f7ff f9bb 	bl	800d516 <__swbuf_r>
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	e7ed      	b.n	800e180 <_putc_r+0x44>

0800e1a4 <strchr>:
 800e1a4:	b2c9      	uxtb	r1, r1
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ac:	b11a      	cbz	r2, 800e1b6 <strchr+0x12>
 800e1ae:	428a      	cmp	r2, r1
 800e1b0:	d1f9      	bne.n	800e1a6 <strchr+0x2>
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	4770      	bx	lr
 800e1b6:	2900      	cmp	r1, #0
 800e1b8:	bf18      	it	ne
 800e1ba:	2300      	movne	r3, #0
 800e1bc:	e7f9      	b.n	800e1b2 <strchr+0xe>
	...

0800e1c0 <_fstat_r>:
 800e1c0:	b538      	push	{r3, r4, r5, lr}
 800e1c2:	4d07      	ldr	r5, [pc, #28]	; (800e1e0 <_fstat_r+0x20>)
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	4608      	mov	r0, r1
 800e1ca:	4611      	mov	r1, r2
 800e1cc:	602b      	str	r3, [r5, #0]
 800e1ce:	f7f4 fdea 	bl	8002da6 <_fstat>
 800e1d2:	1c43      	adds	r3, r0, #1
 800e1d4:	d102      	bne.n	800e1dc <_fstat_r+0x1c>
 800e1d6:	682b      	ldr	r3, [r5, #0]
 800e1d8:	b103      	cbz	r3, 800e1dc <_fstat_r+0x1c>
 800e1da:	6023      	str	r3, [r4, #0]
 800e1dc:	bd38      	pop	{r3, r4, r5, pc}
 800e1de:	bf00      	nop
 800e1e0:	20001a80 	.word	0x20001a80

0800e1e4 <_isatty_r>:
 800e1e4:	b538      	push	{r3, r4, r5, lr}
 800e1e6:	4d06      	ldr	r5, [pc, #24]	; (800e200 <_isatty_r+0x1c>)
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	4604      	mov	r4, r0
 800e1ec:	4608      	mov	r0, r1
 800e1ee:	602b      	str	r3, [r5, #0]
 800e1f0:	f7f4 fde9 	bl	8002dc6 <_isatty>
 800e1f4:	1c43      	adds	r3, r0, #1
 800e1f6:	d102      	bne.n	800e1fe <_isatty_r+0x1a>
 800e1f8:	682b      	ldr	r3, [r5, #0]
 800e1fa:	b103      	cbz	r3, 800e1fe <_isatty_r+0x1a>
 800e1fc:	6023      	str	r3, [r4, #0]
 800e1fe:	bd38      	pop	{r3, r4, r5, pc}
 800e200:	20001a80 	.word	0x20001a80

0800e204 <_sbrk_r>:
 800e204:	b538      	push	{r3, r4, r5, lr}
 800e206:	4d06      	ldr	r5, [pc, #24]	; (800e220 <_sbrk_r+0x1c>)
 800e208:	2300      	movs	r3, #0
 800e20a:	4604      	mov	r4, r0
 800e20c:	4608      	mov	r0, r1
 800e20e:	602b      	str	r3, [r5, #0]
 800e210:	f7f4 fdf2 	bl	8002df8 <_sbrk>
 800e214:	1c43      	adds	r3, r0, #1
 800e216:	d102      	bne.n	800e21e <_sbrk_r+0x1a>
 800e218:	682b      	ldr	r3, [r5, #0]
 800e21a:	b103      	cbz	r3, 800e21e <_sbrk_r+0x1a>
 800e21c:	6023      	str	r3, [r4, #0]
 800e21e:	bd38      	pop	{r3, r4, r5, pc}
 800e220:	20001a80 	.word	0x20001a80

0800e224 <_init>:
 800e224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e226:	bf00      	nop
 800e228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e22a:	bc08      	pop	{r3}
 800e22c:	469e      	mov	lr, r3
 800e22e:	4770      	bx	lr

0800e230 <_fini>:
 800e230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e232:	bf00      	nop
 800e234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e236:	bc08      	pop	{r3}
 800e238:	469e      	mov	lr, r3
 800e23a:	4770      	bx	lr
