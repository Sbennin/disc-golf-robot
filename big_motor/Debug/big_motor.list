
big_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000005c  20000008  08006358  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000578  20000064  080063b4  00020064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200005dc  080063b4  000205dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001577d  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002fbe  00000000  00000000  00035854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001680  00000000  00000000  00038818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000110f  00000000  00000000  00039e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000225c2  00000000  00000000  0003afa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014c41  00000000  00000000  0005d569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d9145  00000000  00000000  000721aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000065b4  00000000  00000000  0014b2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  001518a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	08006018 	.word	0x08006018

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	08006018 	.word	0x08006018

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <Digital_Mode>:
	char buff[]={'@', MOTOR_ADDRESS, 'A', '\r'};
	Motor_Transmit(buff, sizeof(buff));
}

void Digital_Mode()
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
	char buff[]={'@', MOTOR_ADDRESS, 'D', '\r'};
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <Digital_Mode+0x1c>)
 8000534:	607b      	str	r3, [r7, #4]
	Motor_Transmit(buff, sizeof(buff));
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2104      	movs	r1, #4
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fafc 	bl	8000b38 <Motor_Transmit>
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0d443040 	.word	0x0d443040

0800054c <Set_Digital_Speed>:
	uint8_t size = sprintf(buff, "@%cKP%c\r", MOTOR_ADDRESS, pc);
	Motor_Transmit(buff, size);
}

void Set_Digital_Speed(uint16_t ds)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b090      	sub	sp, #64	; 0x40
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	80fb      	strh	r3, [r7, #6]
	if (ds < 100)
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	2b63      	cmp	r3, #99	; 0x63
 800055a:	d802      	bhi.n	8000562 <Set_Digital_Speed+0x16>
	{
		ds = 100;
 800055c:	2364      	movs	r3, #100	; 0x64
 800055e:	80fb      	strh	r3, [r7, #6]
 8000560:	e007      	b.n	8000572 <Set_Digital_Speed+0x26>
	}
	else if (ds > 9999)
 8000562:	88fb      	ldrh	r3, [r7, #6]
 8000564:	f242 720f 	movw	r2, #9999	; 0x270f
 8000568:	4293      	cmp	r3, r2
 800056a:	d902      	bls.n	8000572 <Set_Digital_Speed+0x26>
	{
		ds = 9999;
 800056c:	f242 730f 	movw	r3, #9999	; 0x270f
 8000570:	80fb      	strh	r3, [r7, #6]
	}

	char buff[50];
	uint8_t size = sprintf(buff, "@%cM%d\r", MOTOR_ADDRESS, ds);
 8000572:	88fb      	ldrh	r3, [r7, #6]
 8000574:	f107 000c 	add.w	r0, r7, #12
 8000578:	2230      	movs	r2, #48	; 0x30
 800057a:	4909      	ldr	r1, [pc, #36]	; (80005a0 <Set_Digital_Speed+0x54>)
 800057c:	f004 fbee 	bl	8004d5c <siprintf>
 8000580:	4603      	mov	r3, r0
 8000582:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Motor_Transmit(buff, size);
 8000586:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	4611      	mov	r1, r2
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fad1 	bl	8000b38 <Motor_Transmit>
}
 8000596:	bf00      	nop
 8000598:	3740      	adds	r7, #64	; 0x40
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	08006060 	.word	0x08006060

080005a4 <Start_Motor>:

void Start_Motor()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	char buff[]={'@', MOTOR_ADDRESS, 'S', '\r'};
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <Start_Motor+0x1c>)
 80005ac:	607b      	str	r3, [r7, #4]
	Motor_Transmit(buff, sizeof(buff));
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fac0 	bl	8000b38 <Motor_Transmit>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	0d533040 	.word	0x0d533040

080005c4 <Verify_Current_Speed>:

	return Array_To_Int(subbuff);
}

uint16_t Verify_Current_Speed()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
	char tx_buff[]={'@', MOTOR_ADDRESS, 'V','M', '\r'};
 80005ca:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <Verify_Current_Speed+0x70>)
 80005cc:	f107 0318 	add.w	r3, r7, #24
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	6018      	str	r0, [r3, #0]
 80005d6:	3304      	adds	r3, #4
 80005d8:	7019      	strb	r1, [r3, #0]
	Motor_Transmit(tx_buff, sizeof(tx_buff));
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	2105      	movs	r1, #5
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 faa9 	bl	8000b38 <Motor_Transmit>

	uint8_t rx_buff[10];
	uint8_t size = Motor_Receive(rx_buff); //M9999
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fab8 	bl	8000b60 <Motor_Receive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	77fb      	strb	r3, [r7, #31]
	if (size == 0)
 80005f4:	7ffb      	ldrb	r3, [r7, #31]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <Verify_Current_Speed+0x3a>
	{
		return 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e015      	b.n	800062a <Verify_Current_Speed+0x66>
	}

	char subbuff[5];
	memcpy( subbuff, &rx_buff[1], size - 2 );
 80005fe:	7ffb      	ldrb	r3, [r7, #31]
 8000600:	3b02      	subs	r3, #2
 8000602:	461a      	mov	r2, r3
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	1c59      	adds	r1, r3, #1
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f004 fc27 	bl	8004e60 <memcpy>
	subbuff[size - 2] = '\0';
 8000612:	7ffb      	ldrb	r3, [r7, #31]
 8000614:	3b02      	subs	r3, #2
 8000616:	3320      	adds	r3, #32
 8000618:	443b      	add	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	f803 2c1c 	strb.w	r2, [r3, #-28]

	return Array_To_Int(subbuff);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fd26 	bl	8001074 <Array_To_Int>
 8000628:	4603      	mov	r3, r0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3720      	adds	r7, #32
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	08006098 	.word	0x08006098

08000638 <Coast>:
	Motor_Transmit(tx_buff, sizeof(tx_buff));
	return;
}

void Coast()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	char buff[]={'@', MOTOR_ADDRESS, ',', '\r'};
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <Coast+0x1c>)
 8000640:	607b      	str	r3, [r7, #4]
	Motor_Transmit(buff, sizeof(buff));
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2104      	movs	r1, #4
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fa76 	bl	8000b38 <Motor_Transmit>
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	0d2c3040 	.word	0x0d2c3040

08000658 <Set_Clockwise_Direction>:
	char buff[]={'@', MOTOR_ADDRESS, ',', '\r'};
	Motor_Transmit(buff, sizeof(buff));
}

void Set_Clockwise_Direction()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	char buff[]={'@', MOTOR_ADDRESS, '+', '\r'};
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <Set_Clockwise_Direction+0x1c>)
 8000660:	607b      	str	r3, [r7, #4]
	Motor_Transmit(buff, sizeof(buff));
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2104      	movs	r1, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fa66 	bl	8000b38 <Motor_Transmit>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	0d2b3040 	.word	0x0d2b3040

08000678 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000688:	f023 0218 	bic.w	r2, r3, #24
 800068c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4313      	orrs	r3, r2
 8000694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c8:	68fb      	ldr	r3, [r7, #12]
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fd5d 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f873 	bl	80007cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006e6:	f000 f8e7 	bl	80008b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ea:	f000 f9c3 	bl	8000a74 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006ee:	f000 f901 	bl	80008f4 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80006f2:	f000 f94b 	bl	800098c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80006f6:	f000 f995 	bl	8000a24 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  state = 0;
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <main+0xec>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
  state_changed = 0;
 8000700:	4b31      	ldr	r3, [pc, #196]	; (80007c8 <main+0xf0>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]

  Digital_Mode();
 8000706:	f7ff ff11 	bl	800052c <Digital_Mode>
  HAL_Delay(100);
 800070a:	2064      	movs	r0, #100	; 0x64
 800070c:	f000 fdcc 	bl	80012a8 <HAL_Delay>
  Set_Clockwise_Direction();
 8000710:	f7ff ffa2 	bl	8000658 <Set_Clockwise_Direction>
  HAL_Delay(100);
 8000714:	2064      	movs	r0, #100	; 0x64
 8000716:	f000 fdc7 	bl	80012a8 <HAL_Delay>
  Coast();
 800071a:	f7ff ff8d 	bl	8000638 <Coast>
  HAL_Delay(100);
 800071e:	2064      	movs	r0, #100	; 0x64
 8000720:	f000 fdc2 	bl	80012a8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //uint8_t test[] = {'a'};
	 // HAL_UART_Transmit(&huart1, test, sizeof(test), 10);
	  if (state == 0){
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <main+0xec>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d119      	bne.n	8000760 <main+0x88>
		  if (state_changed == 1)
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <main+0xf0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d10e      	bne.n	8000752 <main+0x7a>
		  {
			  //uint16_t test = Verify_Test();
			  Set_Digital_Speed(400);
 8000734:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000738:	f7ff ff08 	bl	800054c <Set_Digital_Speed>
			  HAL_Delay(100);
 800073c:	2064      	movs	r0, #100	; 0x64
 800073e:	f000 fdb3 	bl	80012a8 <HAL_Delay>
			  Start_Motor();
 8000742:	f7ff ff2f 	bl	80005a4 <Start_Motor>
			  HAL_Delay(100);
 8000746:	2064      	movs	r0, #100	; 0x64
 8000748:	f000 fdae 	bl	80012a8 <HAL_Delay>
			  state_changed = 0;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <main+0xf0>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
		  }
		  Blue_On();
 8000752:	f000 fcd1 	bl	80010f8 <Blue_On>
		  Green_Off();
 8000756:	f000 fcc3 	bl	80010e0 <Green_Off>
		  Red_Off();
 800075a:	f000 fca9 	bl	80010b0 <Red_Off>
 800075e:	e7e1      	b.n	8000724 <main+0x4c>
	  }
	  else if (state == 1){
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <main+0xec>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d10f      	bne.n	8000788 <main+0xb0>
		  if (state_changed == 1)
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <main+0xf0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d104      	bne.n	800077a <main+0xa2>
		  {
			  Coast();
 8000770:	f7ff ff62 	bl	8000638 <Coast>
			  state_changed = 0;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <main+0xf0>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
		  }
		  Blue_Off();
 800077a:	f000 fcc9 	bl	8001110 <Blue_Off>
		  Green_On();
 800077e:	f000 fca3 	bl	80010c8 <Green_On>
		  Red_Off();
 8000782:	f000 fc95 	bl	80010b0 <Red_Off>
 8000786:	e7cd      	b.n	8000724 <main+0x4c>
	  }
	  else if (state == 2){
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <main+0xec>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d114      	bne.n	80007ba <main+0xe2>
		  if (state_changed == 1)
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <main+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d109      	bne.n	80007ac <main+0xd4>
		  {
			  uint16_t test = Verify_Current_Speed();
 8000798:	f7ff ff14 	bl	80005c4 <Verify_Current_Speed>
 800079c:	4603      	mov	r3, r0
 800079e:	80fb      	strh	r3, [r7, #6]
			  HAL_Delay(100);
 80007a0:	2064      	movs	r0, #100	; 0x64
 80007a2:	f000 fd81 	bl	80012a8 <HAL_Delay>
			  state_changed = 0;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <main+0xf0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
		  }

		  Blue_Off();
 80007ac:	f000 fcb0 	bl	8001110 <Blue_Off>
		  Green_Off();
 80007b0:	f000 fc96 	bl	80010e0 <Green_Off>
		  Red_On();
 80007b4:	f000 fc70 	bl	8001098 <Red_On>
 80007b8:	e7b4      	b.n	8000724 <main+0x4c>
	  }
	  else{
		  state = 0;
 80007ba:	4b02      	ldr	r3, [pc, #8]	; (80007c4 <main+0xec>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
	  if (state == 0){
 80007c0:	e7b0      	b.n	8000724 <main+0x4c>
 80007c2:	bf00      	nop
 80007c4:	20000484 	.word	0x20000484
 80007c8:	20000488 	.word	0x20000488

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09a      	sub	sp, #104	; 0x68
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2248      	movs	r2, #72	; 0x48
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 fb0c 	bl	8004df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80007f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000800:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	f023 0303 	bic.w	r3, r3, #3
 800080c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000816:	f001 f9d1 	bl	8001bbc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff ff2c 	bl	8000678 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <SystemClock_Config+0xe8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000828:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <SystemClock_Config+0xe8>)
 800082a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <SystemClock_Config+0xe8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800083c:	2327      	movs	r3, #39	; 0x27
 800083e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000846:	2301      	movs	r3, #1
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800084a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000850:	2301      	movs	r3, #1
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2340      	movs	r3, #64	; 0x40
 8000856:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000858:	2300      	movs	r3, #0
 800085a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800085c:	2360      	movs	r3, #96	; 0x60
 800085e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000860:	2300      	movs	r3, #0
 8000862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	4618      	mov	r0, r3
 800086a:	f001 fd3b 	bl	80022e4 <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000874:	f000 f9da 	bl	8000c2c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000878:	236f      	movs	r3, #111	; 0x6f
 800087a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800087c:	2302      	movs	r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2101      	movs	r1, #1
 8000898:	4618      	mov	r0, r3
 800089a:	f002 f897 	bl	80029cc <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80008a4:	f000 f9c2 	bl	8000c2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008a8:	f002 fe52 	bl	8003550 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008ac:	bf00      	nop
 80008ae:	3768      	adds	r7, #104	; 0x68
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	58000400 	.word	0x58000400

080008b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2250      	movs	r2, #80	; 0x50
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f004 fa97 	bl	8004df8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80008ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ce:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fcc2 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80008e6:	f000 f9a1 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80008ea:	bf00      	nop
 80008ec:	3750      	adds	r7, #80	; 0x50
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 80008fa:	4a23      	ldr	r2, [pc, #140]	; (8000988 <MX_LPUART1_UART_Init+0x94>)
 80008fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 8000900:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000904:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000912:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800093c:	4811      	ldr	r0, [pc, #68]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 800093e:	f002 ff3e 	bl	80037be <HAL_UART_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000948:	f000 f970 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	480d      	ldr	r0, [pc, #52]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 8000950:	f004 f8ff 	bl	8004b52 <HAL_UARTEx_SetTxFifoThreshold>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800095a:	f000 f967 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095e:	2100      	movs	r1, #0
 8000960:	4808      	ldr	r0, [pc, #32]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 8000962:	f004 f934 	bl	8004bce <HAL_UARTEx_SetRxFifoThreshold>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800096c:	f000 f95e 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_LPUART1_UART_Init+0x90>)
 8000972:	f004 f8b5 	bl	8004ae0 <HAL_UARTEx_DisableFifoMode>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800097c:	f000 f956 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000080 	.word	0x20000080
 8000988:	40008000 	.word	0x40008000

0800098c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 8000992:	4a23      	ldr	r2, [pc, #140]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 8000994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 8000998:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800099c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d4:	4811      	ldr	r0, [pc, #68]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009d6:	f002 fef2 	bl	80037be <HAL_UART_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009e0:	f000 f924 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e4:	2100      	movs	r1, #0
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009e8:	f004 f8b3 	bl	8004b52 <HAL_UARTEx_SetTxFifoThreshold>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009f2:	f000 f91b 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4808      	ldr	r0, [pc, #32]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 80009fa:	f004 f8e8 	bl	8004bce <HAL_UARTEx_SetRxFifoThreshold>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a04:	f000 f912 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_USART1_UART_Init+0x90>)
 8000a0a:	f004 f869 	bl	8004ae0 <HAL_UARTEx_DisableFifoMode>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f000 f90a 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000114 	.word	0x20000114
 8000a20:	40013800 	.word	0x40013800

08000a24 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a2a:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <MX_USB_PCD_Init+0x4c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a30:	2208      	movs	r2, #8
 8000a32:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a5a:	f000 ffb7 	bl	80019cc <HAL_PCD_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a64:	f000 f8e2 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200001a8 	.word	0x200001a8
 8000a70:	40006800 	.word	0x40006800

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a88:	2004      	movs	r0, #4
 8000a8a:	f7ff fe0b 	bl	80006a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fe08 	bl	80006a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	2002      	movs	r0, #2
 8000a96:	f7ff fe05 	bl	80006a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	2008      	movs	r0, #8
 8000a9c:	f7ff fe02 	bl	80006a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2123      	movs	r1, #35	; 0x23
 8000aa4:	4821      	ldr	r0, [pc, #132]	; (8000b2c <MX_GPIO_Init+0xb8>)
 8000aa6:	f000 ff61 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	481c      	ldr	r0, [pc, #112]	; (8000b30 <MX_GPIO_Init+0xbc>)
 8000abe:	f000 fde5 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000ac2:	2323      	movs	r3, #35	; 0x23
 8000ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4815      	ldr	r0, [pc, #84]	; (8000b2c <MX_GPIO_Init+0xb8>)
 8000ad8:	f000 fdd8 	bl	800168c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000adc:	2303      	movs	r3, #3
 8000ade:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4619      	mov	r1, r3
 8000aee:	4811      	ldr	r0, [pc, #68]	; (8000b34 <MX_GPIO_Init+0xc0>)
 8000af0:	f000 fdcc 	bl	800168c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2006      	movs	r0, #6
 8000afa:	f000 fcd4 	bl	80014a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000afe:	2006      	movs	r0, #6
 8000b00:	f000 fceb 	bl	80014da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	2007      	movs	r0, #7
 8000b0a:	f000 fccc 	bl	80014a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f000 fce3 	bl	80014da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f000 fcc4 	bl	80014a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f000 fcdb 	bl	80014da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b24:	bf00      	nop
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	48000800 	.word	0x48000800
 8000b34:	48000c00 	.word	0x48000c00

08000b38 <Motor_Transmit>:

/* USER CODE BEGIN 4 */
void Motor_Transmit(char tx_buff[], uint8_t size)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	70fb      	strb	r3, [r7, #3]
	//HAL_UART_Transmit(&hlpuart1, (uint8_t*)tx_buff, size, 10);
	HAL_UART_Transmit(&huart1, (uint8_t*)tx_buff, size, 10);
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	230a      	movs	r3, #10
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <Motor_Transmit+0x24>)
 8000b4e:	f002 fe86 	bl	800385e <HAL_UART_Transmit>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000114 	.word	0x20000114

08000b60 <Motor_Receive>:

HAL_StatusTypeDef Motor_Receive(uint8_t rx_buff[])
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	//return HAL_UART_Receive(&hlpuart1, rx_buff, size, 10);
	//return HAL_UART_Receive(&huart1, rx_buff, size, 10);

	uint8_t rx_char[1];
	uint8_t i = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_UART_Receive(&huart1, rx_char, 1, 10000);
 8000b6c:	f107 010c 	add.w	r1, r7, #12
 8000b70:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b74:	2201      	movs	r2, #1
 8000b76:	4819      	ldr	r0, [pc, #100]	; (8000bdc <Motor_Receive+0x7c>)
 8000b78:	f002 feff 	bl	800397a <HAL_UART_Receive>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK)
 8000b80:	7bbb      	ldrb	r3, [r7, #14]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <Motor_Receive+0x2a>
	{
		return 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	e023      	b.n	8000bd2 <Motor_Receive+0x72>
	}
	rx_buff[i] = rx_char[0];
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	7b3a      	ldrb	r2, [r7, #12]
 8000b92:	701a      	strb	r2, [r3, #0]
	i++;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	3301      	adds	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
	while (rx_char[0] != '\r')
 8000b9a:	e016      	b.n	8000bca <Motor_Receive+0x6a>
	{
		status = HAL_UART_Receive(&huart1, rx_char, 1, 10000);
 8000b9c:	f107 010c 	add.w	r1, r7, #12
 8000ba0:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <Motor_Receive+0x7c>)
 8000ba8:	f002 fee7 	bl	800397a <HAL_UART_Receive>
 8000bac:	4603      	mov	r3, r0
 8000bae:	73bb      	strb	r3, [r7, #14]
		if (status != HAL_OK)
 8000bb0:	7bbb      	ldrb	r3, [r7, #14]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <Motor_Receive+0x5a>
		{
			return 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e00b      	b.n	8000bd2 <Motor_Receive+0x72>
		}
		rx_buff[i] = rx_char[0];
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	7b3a      	ldrb	r2, [r7, #12]
 8000bc2:	701a      	strb	r2, [r3, #0]
		i++;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
	while (rx_char[0] != '\r')
 8000bca:	7b3b      	ldrb	r3, [r7, #12]
 8000bcc:	2b0d      	cmp	r3, #13
 8000bce:	d1e5      	bne.n	8000b9c <Motor_Receive+0x3c>
	}
	return i;
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000114 	.word	0x20000114

08000be0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == B1_Pin){state = 0;}      //10
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	2b10      	cmp	r3, #16
 8000bee:	d103      	bne.n	8000bf8 <HAL_GPIO_EXTI_Callback+0x18>
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x44>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e00c      	b.n	8000c12 <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_PIN == B2_Pin){state = 1;} //1
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d103      	bne.n	8000c06 <HAL_GPIO_EXTI_Callback+0x26>
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	e005      	b.n	8000c12 <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_PIN == B3_Pin){state = 2;} //2
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d102      	bne.n	8000c12 <HAL_GPIO_EXTI_Callback+0x32>
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c0e:	2202      	movs	r2, #2
 8000c10:	601a      	str	r2, [r3, #0]
	state_changed = 1;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x48>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	20000484 	.word	0x20000484
 8000c28:	20000488 	.word	0x20000488

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>

08000c36 <LL_AHB2_GRP1_EnableClock>:
{
 8000c36:	b480      	push	{r7}
 8000c38:	b085      	sub	sp, #20
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4013      	ands	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b085      	sub	sp, #20
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09c      	sub	sp, #112	; 0x70
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2250      	movs	r2, #80	; 0x50
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 f863 	bl	8004df8 <memset>
  if(huart->Instance==LPUART1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a33      	ldr	r2, [pc, #204]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d12d      	bne.n	8000d98 <HAL_UART_MspInit+0x8c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 fa8b 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff ff6a 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff ff9e 	bl	8000c9a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff ff69 	bl	8000c36 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = MOTOR_TX_Pin|MOTOR_RX_Pin;
 8000d64:	230c      	movs	r3, #12
 8000d66:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d74:	2308      	movs	r3, #8
 8000d76:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f000 fc83 	bl	800168c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2025      	movs	r0, #37	; 0x25
 8000d8c:	f000 fb8b 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000d90:	2025      	movs	r0, #37	; 0x25
 8000d92:	f000 fba2 	bl	80014da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d96:	e031      	b.n	8000dfc <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <HAL_UART_MspInit+0xfc>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d12c      	bne.n	8000dfc <HAL_UART_MspInit+0xf0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fa58 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_UART_MspInit+0xb2>
      Error_Handler();
 8000dba:	f7ff ff37 	bl	8000c2c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dbe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dc2:	f7ff ff83 	bl	8000ccc <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f7ff ff35 	bl	8000c36 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dcc:	23c0      	movs	r3, #192	; 0xc0
 8000dce:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000de4:	4619      	mov	r1, r3
 8000de6:	4809      	ldr	r0, [pc, #36]	; (8000e0c <HAL_UART_MspInit+0x100>)
 8000de8:	f000 fc50 	bl	800168c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2024      	movs	r0, #36	; 0x24
 8000df2:	f000 fb58 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000df6:	2024      	movs	r0, #36	; 0x24
 8000df8:	f000 fb6f 	bl	80014da <HAL_NVIC_EnableIRQ>
}
 8000dfc:	bf00      	nop
 8000dfe:	3770      	adds	r7, #112	; 0x70
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40008000 	.word	0x40008000
 8000e08:	40013800 	.word	0x40013800
 8000e0c:	48000400 	.word	0x48000400

08000e10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09c      	sub	sp, #112	; 0x70
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2250      	movs	r2, #80	; 0x50
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 ffe1 	bl	8004df8 <memset>
  if(hpcd->Instance==USB)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_PCD_MspInit+0xa8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d136      	bne.n	8000eae <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e44:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000e46:	2318      	movs	r3, #24
 8000e48:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000e50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e54:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000e56:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e60:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e66:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f002 f9f9 	bl	8003264 <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000e78:	f7ff fed8 	bl	8000c2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f7ff feda 	bl	8000c36 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e86:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e94:	230a      	movs	r3, #10
 8000e96:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f000 fbf3 	bl	800168c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ea6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000eaa:	f7ff fedd 	bl	8000c68 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3770      	adds	r7, #112	; 0x70
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40006800 	.word	0x40006800

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 f9a2 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f000 fd41 	bl	800199c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f000 fd3a 	bl	800199c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f30:	2010      	movs	r0, #16
 8000f32:	f000 fd33 	bl	800199c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <USART1_IRQHandler+0x10>)
 8000f42:	f002 fde3 	bl	8003b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000114 	.word	0x20000114

08000f50 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <LPUART1_IRQHandler+0x10>)
 8000f56:	f002 fdd9 	bl	8003b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000080 	.word	0x20000080

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f003 ff38 	bl	8004e08 <__errno>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <_sbrk+0x64>)
 8000fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20030000 	.word	0x20030000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	2000048c 	.word	0x2000048c
 8000fcc:	200005e0 	.word	0x200005e0

08000fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <SystemInit+0x98>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a23      	ldr	r2, [pc, #140]	; (8001068 <SystemInit+0x98>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ffc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <SystemInit+0x9c>)
 800100a:	4013      	ands	r3, r2
 800100c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800100e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800101a:	f023 0305 	bic.w	r3, r3, #5
 800101e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800102a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800102e:	f023 0301 	bic.w	r3, r3, #1
 8001032:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103a:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <SystemInit+0xa0>)
 800103c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800103e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <SystemInit+0xa0>)
 8001044:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001054:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	faf6fefb 	.word	0xfaf6fefb
 8001070:	22041000 	.word	0x22041000

08001074 <Array_To_Int>:

#include "utilities.h"
#include <stdio.h>

uint16_t Array_To_Int(char array[])
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	sscanf(array, "%hd", &i);
 800107c:	f107 030e 	add.w	r3, r7, #14
 8001080:	461a      	mov	r2, r3
 8001082:	4904      	ldr	r1, [pc, #16]	; (8001094 <Array_To_Int+0x20>)
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f003 fe89 	bl	8004d9c <siscanf>
	return i;
 800108a:	89fb      	ldrh	r3, [r7, #14]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	080060f4 	.word	0x080060f4

08001098 <Red_On>:

void Red_On()
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	2102      	movs	r1, #2
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <Red_On+0x14>)
 80010a2:	f000 fc63 	bl	800196c <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	48000400 	.word	0x48000400

080010b0 <Red_Off>:

void Red_Off()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <Red_Off+0x14>)
 80010ba:	f000 fc57 	bl	800196c <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	48000400 	.word	0x48000400

080010c8 <Green_On>:

void Green_On()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2101      	movs	r1, #1
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <Green_On+0x14>)
 80010d2:	f000 fc4b 	bl	800196c <HAL_GPIO_WritePin>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	48000400 	.word	0x48000400

080010e0 <Green_Off>:

void Green_Off()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2101      	movs	r1, #1
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <Green_Off+0x14>)
 80010ea:	f000 fc3f 	bl	800196c <HAL_GPIO_WritePin>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	48000400 	.word	0x48000400

080010f8 <Blue_On>:

void Blue_On()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2120      	movs	r1, #32
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <Blue_On+0x14>)
 8001102:	f000 fc33 	bl	800196c <HAL_GPIO_WritePin>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	48000400 	.word	0x48000400

08001110 <Blue_Off>:

void Blue_Off()
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2120      	movs	r1, #32
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <Blue_Off+0x14>)
 800111a:	f000 fc27 	bl	800196c <HAL_GPIO_WritePin>
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	48000400 	.word	0x48000400

08001128 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001128:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112c:	3304      	adds	r3, #4

0800112e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001130:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001132:	d3f9      	bcc.n	8001128 <CopyDataInit>
  bx lr
 8001134:	4770      	bx	lr

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001136:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001138:	3004      	adds	r0, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800113a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>
  bx lr
 800113e:	4770      	bx	lr

08001140 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001142:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001144:	f7ff ff44 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <LoopForever+0x6>)
 800114a:	490c      	ldr	r1, [pc, #48]	; (800117c <LoopForever+0xa>)
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <LoopForever+0xe>)
 800114e:	2300      	movs	r3, #0
 8001150:	f7ff ffed 	bl	800112e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <LoopForever+0x12>)
 8001156:	490c      	ldr	r1, [pc, #48]	; (8001188 <LoopForever+0x16>)
 8001158:	4a0c      	ldr	r2, [pc, #48]	; (800118c <LoopForever+0x1a>)
 800115a:	2300      	movs	r3, #0
 800115c:	f7ff ffe7 	bl	800112e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <LoopForever+0x1e>)
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <LoopForever+0x22>)
 8001164:	2300      	movs	r3, #0
 8001166:	f7ff ffe8 	bl	800113a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800116a:	f003 fe53 	bl	8004e14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800116e:	f7ff fab3 	bl	80006d8 <main>

08001172 <LoopForever>:

LoopForever:
  b LoopForever
 8001172:	e7fe      	b.n	8001172 <LoopForever>
  ldr   r0, =_estack
 8001174:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001178:	20000008 	.word	0x20000008
 800117c:	20000064 	.word	0x20000064
 8001180:	08006358 	.word	0x08006358
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001184:	20030000 	.word	0x20030000
 8001188:	20030000 	.word	0x20030000
 800118c:	080063b4 	.word	0x080063b4
  INIT_BSS _sbss, _ebss
 8001190:	20000064 	.word	0x20000064
 8001194:	200005dc 	.word	0x200005dc

08001198 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_Init+0x3c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <HAL_Init+0x3c>)
 80011ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b2:	2003      	movs	r0, #3
 80011b4:	f000 f96c 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 f80f 	bl	80011dc <HAL_InitTick>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d002      	beq.n	80011ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	e001      	b.n	80011ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ca:	f7ff fd98 	bl	8000cfe <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ce:	79fb      	ldrb	r3, [r7, #7]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	58004000 	.word	0x58004000

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_InitTick+0x6c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d024      	beq.n	800123a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f0:	f001 fd98 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_InitTick+0x6c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4619      	mov	r1, r3
 80011fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001200:	fbb3 f3f1 	udiv	r3, r3, r1
 8001204:	fbb2 f3f3 	udiv	r3, r2, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f974 	bl	80014f6 <HAL_SYSTICK_Config>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10f      	bne.n	8001234 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b0f      	cmp	r3, #15
 8001218:	d809      	bhi.n	800122e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121a:	2200      	movs	r2, #0
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	f04f 30ff 	mov.w	r0, #4294967295
 8001222:	f000 f940 	bl	80014a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001226:	4a09      	ldr	r2, [pc, #36]	; (800124c <HAL_InitTick+0x70>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e007      	b.n	800123e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e004      	b.n	800123e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e001      	b.n	800123e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000010 	.word	0x20000010
 800124c:	2000000c 	.word	0x2000000c

08001250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000010 	.word	0x20000010
 8001274:	20000490 	.word	0x20000490

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000490 	.word	0x20000490

08001290 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTickPrio+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000000c 	.word	0x2000000c

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffe2 	bl	8001278 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffd2 	bl	8001278 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000010 	.word	0x20000010

080012f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800131c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	60d3      	str	r3, [r2, #12]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	; (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f7ff ff8e 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff29 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff40 	bl	8001338 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff90 	bl	80013e4 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5f 	bl	8001390 <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff33 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffa4 	bl	800144c <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e04f      	b.n	80015c0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d008      	beq.n	800153e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2204      	movs	r2, #4
 8001530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e040      	b.n	80015c0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 020e 	bic.w	r2, r2, #14
 800154c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800155c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0201 	bic.w	r2, r2, #1
 800156c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f003 021c 	and.w	r2, r3, #28
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	2101      	movs	r1, #1
 800157c:	fa01 f202 	lsl.w	r2, r1, r2
 8001580:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800158a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00c      	beq.n	80015ae <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d005      	beq.n	80015f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2204      	movs	r2, #4
 80015e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	e047      	b.n	8001680 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 020e 	bic.w	r2, r2, #14
 80015fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800161e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f003 021c 	and.w	r2, r3, #28
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800163c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00c      	beq.n	8001660 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001654:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800165e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
    }
  }
  return status;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800168c:	b480      	push	{r7}
 800168e:	b087      	sub	sp, #28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169a:	e14c      	b.n	8001936 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 813e 	beq.w	8001930 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d005      	beq.n	80016cc <HAL_GPIO_Init+0x40>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d130      	bne.n	800172e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001702:	2201      	movs	r2, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	f003 0201 	and.w	r2, r3, #1
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b03      	cmp	r3, #3
 8001738:	d017      	beq.n	800176a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d123      	bne.n	80017be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	08da      	lsrs	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3208      	adds	r2, #8
 800177e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	691a      	ldr	r2, [r3, #16]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	08da      	lsrs	r2, r3, #3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3208      	adds	r2, #8
 80017b8:	6939      	ldr	r1, [r7, #16]
 80017ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0203 	and.w	r2, r3, #3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8098 	beq.w	8001930 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001800:	4a54      	ldr	r2, [pc, #336]	; (8001954 <HAL_GPIO_Init+0x2c8>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800182a:	d019      	beq.n	8001860 <HAL_GPIO_Init+0x1d4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a4a      	ldr	r2, [pc, #296]	; (8001958 <HAL_GPIO_Init+0x2cc>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d013      	beq.n	800185c <HAL_GPIO_Init+0x1d0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a49      	ldr	r2, [pc, #292]	; (800195c <HAL_GPIO_Init+0x2d0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00d      	beq.n	8001858 <HAL_GPIO_Init+0x1cc>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a48      	ldr	r2, [pc, #288]	; (8001960 <HAL_GPIO_Init+0x2d4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0x1c8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a47      	ldr	r2, [pc, #284]	; (8001964 <HAL_GPIO_Init+0x2d8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d101      	bne.n	8001850 <HAL_GPIO_Init+0x1c4>
 800184c:	2304      	movs	r3, #4
 800184e:	e008      	b.n	8001862 <HAL_GPIO_Init+0x1d6>
 8001850:	2307      	movs	r3, #7
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1d6>
 8001854:	2303      	movs	r3, #3
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1d6>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1d6>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1d6>
 8001860:	2300      	movs	r3, #0
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001872:	4938      	ldr	r1, [pc, #224]	; (8001954 <HAL_GPIO_Init+0x2c8>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a4:	4a30      	ldr	r2, [pc, #192]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ce:	4a26      	ldr	r2, [pc, #152]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 80018d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018fa:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001902:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 8001904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001928:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_GPIO_Init+0x2dc>)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3301      	adds	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	f47f aeab 	bne.w	800169c <HAL_GPIO_Init+0x10>
  }
}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40010000 	.word	0x40010000
 8001958:	48000400 	.word	0x48000400
 800195c:	48000800 	.word	0x48000800
 8001960:	48000c00 	.word	0x48000c00
 8001964:	48001000 	.word	0x48001000
 8001968:	58000800 	.word	0x58000800

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001988:	e002      	b.n	8001990 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f910 	bl	8000be0 <HAL_GPIO_EXTI_Callback>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	58000800 	.word	0x58000800

080019cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0c0      	b.n	8001b60 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fa0c 	bl	8000e10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2203      	movs	r2, #3
 80019fc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 f96f 	bl	8004ce8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	e03e      	b.n	8001a8e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a10:	7bfa      	ldrb	r2, [r7, #15]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3311      	adds	r3, #17
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	3310      	adds	r3, #16
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	3313      	adds	r3, #19
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	3320      	adds	r3, #32
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3324      	adds	r3, #36	; 0x24
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	791b      	ldrb	r3, [r3, #4]
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d3bb      	bcc.n	8001a10 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e044      	b.n	8001b28 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a9e:	7bfa      	ldrb	r2, [r7, #15]
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	440b      	add	r3, r1
 8001aac:	f203 1351 	addw	r3, r3, #337	; 0x151
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001aca:	7bfa      	ldrb	r2, [r7, #15]
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b0c:	7bfa      	ldrb	r2, [r7, #15]
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	3301      	adds	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	791b      	ldrb	r3, [r3, #4]
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3b5      	bcc.n	8001a9e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001b3e:	f003 f8ee 	bl	8004d1e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7a9b      	ldrb	r3, [r3, #10]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d102      	bne.n	8001b5e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f805 	bl	8001b68 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	58000400 	.word	0x58000400

08001bdc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	58000400 	.word	0x58000400

08001bf8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c0a:	d101      	bne.n	8001c10 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_RCC_HSE_Enable>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_HSE_Disable>:
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_RCC_HSE_IsReady>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c6a:	d101      	bne.n	8001c70 <LL_RCC_HSE_IsReady+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_RCC_HSE_IsReady+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_RCC_HSI_Enable>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_RCC_HSI_Disable>:
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_RCC_HSI_IsReady>:
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	d101      	bne.n	8001cd0 <LL_RCC_HSI_IsReady+0x18>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <LL_RCC_HSI_IsReady+0x1a>
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_RCC_HSI_SetCalibTrimming>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_RCC_HSI48_Enable>:
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_RCC_HSI48_Disable>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_RCC_HSI48_IsReady>:
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d101      	bne.n	8001d62 <LL_RCC_HSI48_IsReady+0x18>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_RCC_HSI48_IsReady+0x1a>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_RCC_LSE_Enable>:
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_LSE_Disable>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_RCC_LSE_EnableBypass>:
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_RCC_LSE_DisableBypass>:
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d101      	bne.n	8001e0e <LL_RCC_LSE_IsReady+0x18>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <LL_RCC_LSE_IsReady+0x1a>
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d101      	bne.n	8001e76 <LL_RCC_LSI1_IsReady+0x18>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <LL_RCC_LSI1_IsReady+0x1a>
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb4:	f023 0304 	bic.w	r3, r3, #4
 8001eb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d101      	bne.n	8001ede <LL_RCC_LSI2_IsReady+0x18>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_RCC_LSI2_IsReady+0x1a>
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d101      	bne.n	8001f6a <LL_RCC_MSI_IsReady+0x16>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <LL_RCC_MSI_IsReady+0x18>
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2bb0      	cmp	r3, #176	; 0xb0
 8001fb4:	d901      	bls.n	8001fba <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001fb6:	23b0      	movs	r3, #176	; 0xb0
 8001fb8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001fba:	687b      	ldr	r3, [r7, #4]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 0203 	bic.w	r2, r3, #3
 8002004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800203a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002066:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800206a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002096:	f023 020f 	bic.w	r2, r3, #15
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800213c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002194:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002198:	6013      	str	r3, [r2, #0]
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021b6:	d101      	bne.n	80021bc <LL_RCC_PLL_IsReady+0x18>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <LL_RCC_PLL_IsReady+0x1a>
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0303 	and.w	r3, r3, #3
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d101      	bne.n	8002242 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002256:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002262:	d101      	bne.n	8002268 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d101      	bne.n	800228e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022ac:	d101      	bne.n	80022b2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022d0:	d101      	bne.n	80022d6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b08d      	sub	sp, #52	; 0x34
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e363      	b.n	80029be <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 808d 	beq.w	800241e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002304:	f7ff fe89 	bl	800201a <LL_RCC_GetSysClkSource>
 8002308:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800230a:	f7ff ff82 	bl	8002212 <LL_RCC_PLL_GetMainSource>
 800230e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x3e>
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	2b0c      	cmp	r3, #12
 800231a:	d147      	bne.n	80023ac <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	2b01      	cmp	r3, #1
 8002320:	d144      	bne.n	80023ac <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e347      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002332:	f7ff fe34 	bl	8001f9e <LL_RCC_MSI_GetRange>
 8002336:	4603      	mov	r3, r0
 8002338:	429c      	cmp	r4, r3
 800233a:	d914      	bls.n	8002366 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fd2f 	bl	8002da4 <RCC_SetFlashLatencyFromMSIRange>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e336      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fe0e 	bl	8001f76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fe32 	bl	8001fc8 <LL_RCC_MSI_SetCalibTrimming>
 8002364:	e013      	b.n	800238e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fe03 	bl	8001f76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fe27 	bl	8001fc8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fd10 	bl	8002da4 <RCC_SetFlashLatencyFromMSIRange>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e317      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800238e:	f000 fcc9 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002392:	4603      	mov	r3, r0
 8002394:	4aa4      	ldr	r2, [pc, #656]	; (8002628 <HAL_RCC_OscConfig+0x344>)
 8002396:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002398:	4ba4      	ldr	r3, [pc, #656]	; (800262c <HAL_RCC_OscConfig+0x348>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe ff1d 	bl	80011dc <HAL_InitTick>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d039      	beq.n	800241c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e308      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01e      	beq.n	80023f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023b4:	f7ff fdb0 	bl	8001f18 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff5e 	bl	8001278 <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c0:	f7fe ff5a 	bl	8001278 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e2f5      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80023d2:	f7ff fdbf 	bl	8001f54 <LL_RCC_MSI_IsReady>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f1      	beq.n	80023c0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fdc8 	bl	8001f76 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fdec 	bl	8001fc8 <LL_RCC_MSI_SetCalibTrimming>
 80023f0:	e015      	b.n	800241e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023f2:	f7ff fda0 	bl	8001f36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023f6:	f7fe ff3f 	bl	8001278 <HAL_GetTick>
 80023fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023fe:	f7fe ff3b 	bl	8001278 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e2d6      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002410:	f7ff fda0 	bl	8001f54 <LL_RCC_MSI_IsReady>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f1      	bne.n	80023fe <HAL_RCC_OscConfig+0x11a>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800241c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d047      	beq.n	80024ba <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242a:	f7ff fdf6 	bl	800201a <LL_RCC_GetSysClkSource>
 800242e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002430:	f7ff feef 	bl	8002212 <LL_RCC_PLL_GetMainSource>
 8002434:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	2b08      	cmp	r3, #8
 800243a:	d005      	beq.n	8002448 <HAL_RCC_OscConfig+0x164>
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d108      	bne.n	8002454 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d105      	bne.n	8002454 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d134      	bne.n	80024ba <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e2b4      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245c:	d102      	bne.n	8002464 <HAL_RCC_OscConfig+0x180>
 800245e:	f7ff fbdd 	bl	8001c1c <LL_RCC_HSE_Enable>
 8002462:	e001      	b.n	8002468 <HAL_RCC_OscConfig+0x184>
 8002464:	f7ff fbe9 	bl	8001c3a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe ff02 	bl	8001278 <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe fefe 	bl	8001278 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e299      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800248a:	f7ff fbe5 	bl	8001c58 <LL_RCC_HSE_IsReady>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f1      	beq.n	8002478 <HAL_RCC_OscConfig+0x194>
 8002494:	e011      	b.n	80024ba <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe feef 	bl	8001278 <HAL_GetTick>
 800249a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249e:	f7fe feeb 	bl	8001278 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	; 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e286      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80024b0:	f7ff fbd2 	bl	8001c58 <LL_RCC_HSE_IsReady>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f1      	bne.n	800249e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d04c      	beq.n	8002560 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c6:	f7ff fda8 	bl	800201a <LL_RCC_GetSysClkSource>
 80024ca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024cc:	f7ff fea1 	bl	8002212 <LL_RCC_PLL_GetMainSource>
 80024d0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_OscConfig+0x200>
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d10e      	bne.n	80024fc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d10b      	bne.n	80024fc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e266      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fbf1 	bl	8001cdc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024fa:	e031      	b.n	8002560 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d019      	beq.n	8002538 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002504:	f7ff fbba 	bl	8001c7c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe feb6 	bl	8001278 <HAL_GetTick>
 800250c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002510:	f7fe feb2 	bl	8001278 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e24d      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002522:	f7ff fbc9 	bl	8001cb8 <LL_RCC_HSI_IsReady>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f1      	beq.n	8002510 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fbd3 	bl	8001cdc <LL_RCC_HSI_SetCalibTrimming>
 8002536:	e013      	b.n	8002560 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002538:	f7ff fbaf 	bl	8001c9a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fe9c 	bl	8001278 <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002544:	f7fe fe98 	bl	8001278 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e233      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002556:	f7ff fbaf 	bl	8001cb8 <LL_RCC_HSI_IsReady>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f1      	bne.n	8002544 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d106      	bne.n	800257a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80a3 	beq.w	80026c0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d076      	beq.n	8002670 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d046      	beq.n	800261c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800258e:	f7ff fc66 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d113      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002598:	f7ff fc3f 	bl	8001e1a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800259c:	f7fe fe6c 	bl	8001278 <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025a4:	f7fe fe68 	bl	8001278 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e203      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025b6:	f7ff fc52 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f1      	beq.n	80025a4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80025c0:	f7ff fc5f 	bl	8001e82 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fe58 	bl	8001278 <HAL_GetTick>
 80025c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025cc:	f7fe fe54 	bl	8001278 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e1ef      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025de:	f7ff fc72 	bl	8001ec6 <LL_RCC_LSI2_IsReady>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f1      	beq.n	80025cc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fc7c 	bl	8001eea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80025f2:	f7ff fc23 	bl	8001e3c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe fe3f 	bl	8001278 <HAL_GetTick>
 80025fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025fe:	f7fe fe3b 	bl	8001278 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1d6      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002610:	f7ff fc25 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f1      	bne.n	80025fe <HAL_RCC_OscConfig+0x31a>
 800261a:	e051      	b.n	80026c0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800261c:	f7ff fbfd 	bl	8001e1a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fe2a 	bl	8001278 <HAL_GetTick>
 8002624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002626:	e00c      	b.n	8002642 <HAL_RCC_OscConfig+0x35e>
 8002628:	20000008 	.word	0x20000008
 800262c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002630:	f7fe fe22 	bl	8001278 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1bd      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002642:	f7ff fc0c 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f1      	beq.n	8002630 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800264c:	f7ff fc2a 	bl	8001ea4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002652:	f7fe fe11 	bl	8001278 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b03      	cmp	r3, #3
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1ac      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002664:	f7ff fc2f 	bl	8001ec6 <LL_RCC_LSI2_IsReady>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f1      	bne.n	8002652 <HAL_RCC_OscConfig+0x36e>
 800266e:	e027      	b.n	80026c0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002670:	f7ff fc18 	bl	8001ea4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fe00 	bl	8001278 <HAL_GetTick>
 8002678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800267c:	f7fe fdfc 	bl	8001278 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b03      	cmp	r3, #3
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e197      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800268e:	f7ff fc1a 	bl	8001ec6 <LL_RCC_LSI2_IsReady>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f1      	bne.n	800267c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002698:	f7ff fbd0 	bl	8001e3c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7fe fdec 	bl	8001278 <HAL_GetTick>
 80026a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026a4:	f7fe fde8 	bl	8001278 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e183      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026b6:	f7ff fbd2 	bl	8001e5e <LL_RCC_LSI1_IsReady>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f1      	bne.n	80026a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d05b      	beq.n	8002784 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026cc:	4ba7      	ldr	r3, [pc, #668]	; (800296c <HAL_RCC_OscConfig+0x688>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d114      	bne.n	8002702 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026d8:	f7ff fa70 	bl	8001bbc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026dc:	f7fe fdcc 	bl	8001278 <HAL_GetTick>
 80026e0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e4:	f7fe fdc8 	bl	8001278 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e163      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f6:	4b9d      	ldr	r3, [pc, #628]	; (800296c <HAL_RCC_OscConfig+0x688>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d102      	bne.n	8002710 <HAL_RCC_OscConfig+0x42c>
 800270a:	f7ff fb30 	bl	8001d6e <LL_RCC_LSE_Enable>
 800270e:	e00c      	b.n	800272a <HAL_RCC_OscConfig+0x446>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b05      	cmp	r3, #5
 8002716:	d104      	bne.n	8002722 <HAL_RCC_OscConfig+0x43e>
 8002718:	f7ff fb4b 	bl	8001db2 <LL_RCC_LSE_EnableBypass>
 800271c:	f7ff fb27 	bl	8001d6e <LL_RCC_LSE_Enable>
 8002720:	e003      	b.n	800272a <HAL_RCC_OscConfig+0x446>
 8002722:	f7ff fb35 	bl	8001d90 <LL_RCC_LSE_Disable>
 8002726:	f7ff fb55 	bl	8001dd4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d014      	beq.n	800275c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7fe fda1 	bl	8001278 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7fe fd9d 	bl	8001278 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e136      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002750:	f7ff fb51 	bl	8001df6 <LL_RCC_LSE_IsReady>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0ef      	beq.n	800273a <HAL_RCC_OscConfig+0x456>
 800275a:	e013      	b.n	8002784 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fd8c 	bl	8001278 <HAL_GetTick>
 8002760:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002762:	e00a      	b.n	800277a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002764:	f7fe fd88 	bl	8001278 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002772:	4293      	cmp	r3, r2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e121      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800277a:	f7ff fb3c 	bl	8001df6 <LL_RCC_LSE_IsReady>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1ef      	bne.n	8002764 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d02c      	beq.n	80027ea <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d014      	beq.n	80027c2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002798:	f7ff fab5 	bl	8001d06 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fd6c 	bl	8001278 <HAL_GetTick>
 80027a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027a4:	f7fe fd68 	bl	8001278 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e103      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027b6:	f7ff fac8 	bl	8001d4a <LL_RCC_HSI48_IsReady>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f1      	beq.n	80027a4 <HAL_RCC_OscConfig+0x4c0>
 80027c0:	e013      	b.n	80027ea <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027c2:	f7ff fab1 	bl	8001d28 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fe fd57 	bl	8001278 <HAL_GetTick>
 80027ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ce:	f7fe fd53 	bl	8001278 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e0ee      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027e0:	f7ff fab3 	bl	8001d4a <LL_RCC_HSI48_IsReady>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f1      	bne.n	80027ce <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80e4 	beq.w	80029bc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f4:	f7ff fc11 	bl	800201a <LL_RCC_GetSysClkSource>
 80027f8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	2b02      	cmp	r3, #2
 8002808:	f040 80b4 	bne.w	8002974 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0203 	and.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	429a      	cmp	r2, r3
 8002818:	d123      	bne.n	8002862 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d11c      	bne.n	8002862 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d114      	bne.n	8002862 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d10d      	bne.n	8002862 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d05d      	beq.n	800291e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d058      	beq.n	800291a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0a1      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800287a:	f7ff fc84 	bl	8002186 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800287e:	f7fe fcfb 	bl	8001278 <HAL_GetTick>
 8002882:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe fcf7 	bl	8001278 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e092      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1ef      	bne.n	8002886 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	4b30      	ldr	r3, [pc, #192]	; (8002970 <HAL_RCC_OscConfig+0x68c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028be:	0212      	lsls	r2, r2, #8
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028d2:	430a      	orrs	r2, r1
 80028d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d8:	4313      	orrs	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028dc:	f7ff fc44 	bl	8002168 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f0:	f7fe fcc2 	bl	8001278 <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fcbe 	bl	8001278 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e059      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ef      	beq.n	80028f8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002918:	e050      	b.n	80029bc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e04f      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d147      	bne.n	80029bc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800292c:	f7ff fc1c 	bl	8002168 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800293a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002940:	f7fe fc9a 	bl	8001278 <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe fc96 	bl	8001278 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e031      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0ef      	beq.n	8002948 <HAL_RCC_OscConfig+0x664>
 8002968:	e028      	b.n	80029bc <HAL_RCC_OscConfig+0x6d8>
 800296a:	bf00      	nop
 800296c:	58000400 	.word	0x58000400
 8002970:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	2b0c      	cmp	r3, #12
 8002978:	d01e      	beq.n	80029b8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	f7ff fc04 	bl	8002186 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fc7b 	bl	8001278 <HAL_GetTick>
 8002982:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe fc77 	bl	8001278 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e012      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ef      	bne.n	8002986 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_OscConfig+0x6e4>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	60cb      	str	r3, [r1, #12]
 80029b6:	e001      	b.n	80029bc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3734      	adds	r7, #52	; 0x34
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd90      	pop	{r4, r7, pc}
 80029c6:	bf00      	nop
 80029c8:	eefefffc 	.word	0xeefefffc

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e12d      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b98      	ldr	r3, [pc, #608]	; (8002c44 <HAL_RCC_ClockConfig+0x278>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d91b      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b95      	ldr	r3, [pc, #596]	; (8002c44 <HAL_RCC_ClockConfig+0x278>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	4993      	ldr	r1, [pc, #588]	; (8002c44 <HAL_RCC_ClockConfig+0x278>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fe:	f7fe fc3b 	bl	8001278 <HAL_GetTick>
 8002a02:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a06:	f7fe fc37 	bl	8001278 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e111      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a18:	4b8a      	ldr	r3, [pc, #552]	; (8002c44 <HAL_RCC_ClockConfig+0x278>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d1ef      	bne.n	8002a06 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d016      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fafb 	bl	8002032 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe fc1c 	bl	8001278 <HAL_GetTick>
 8002a40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a44:	f7fe fc18 	bl	8001278 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e0f2      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a56:	f7ff fbe8 	bl	800222a <LL_RCC_IsActiveFlag_HPRE>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f1      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d016      	beq.n	8002a9a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff faf2 	bl	800205a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a76:	f7fe fbff 	bl	8001278 <HAL_GetTick>
 8002a7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a7e:	f7fe fbfb 	bl	8001278 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0d5      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a90:	f7ff fbdd 	bl	800224e <LL_RCC_IsActiveFlag_C2HPRE>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f1      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff faeb 	bl	8002086 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fbe2 	bl	8001278 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ab8:	f7fe fbde 	bl	8001278 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e0b8      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002aca:	f7ff fbd3 	bl	8002274 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0f1      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d016      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fae5 	bl	80020b4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002aea:	f7fe fbc5 	bl	8001278 <HAL_GetTick>
 8002aee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002af2:	f7fe fbc1 	bl	8001278 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e09b      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b04:	f7ff fbc9 	bl	800229a <LL_RCC_IsActiveFlag_PPRE1>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f1      	beq.n	8002af2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d017      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fadb 	bl	80020dc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b26:	f7fe fba7 	bl	8001278 <HAL_GetTick>
 8002b2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b2e:	f7fe fba3 	bl	8001278 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e07d      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b40:	f7ff fbbd 	bl	80022be <LL_RCC_IsActiveFlag_PPRE2>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f1      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d043      	beq.n	8002bde <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b5e:	f7ff f87b 	bl	8001c58 <LL_RCC_HSE_IsReady>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d11e      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e067      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b74:	f7ff fb16 	bl	80021a4 <LL_RCC_PLL_IsReady>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d113      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e05c      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b8a:	f7ff f9e3 	bl	8001f54 <LL_RCC_MSI_IsReady>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d108      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e051      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b98:	f7ff f88e 	bl	8001cb8 <LL_RCC_HSI_IsReady>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e04a      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fa21 	bl	8001ff2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb0:	f7fe fb62 	bl	8001278 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7fe fb5e 	bl	8001278 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e036      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	f7ff fa24 	bl	800201a <LL_RCC_GetSysClkSource>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d1ec      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bde:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <HAL_RCC_ClockConfig+0x278>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d21b      	bcs.n	8002c24 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_RCC_ClockConfig+0x278>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 0207 	bic.w	r2, r3, #7
 8002bf4:	4913      	ldr	r1, [pc, #76]	; (8002c44 <HAL_RCC_ClockConfig+0x278>)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfc:	f7fe fb3c 	bl	8001278 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c04:	f7fe fb38 	bl	8001278 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e012      	b.n	8002c3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_ClockConfig+0x278>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1ef      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c24:	f000 f87e 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <HAL_RCC_ClockConfig+0x27c>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002c2e:	f7fe fb2f 	bl	8001290 <HAL_GetTickPrio>
 8002c32:	4603      	mov	r3, r0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe fad1 	bl	80011dc <HAL_InitTick>
 8002c3a:	4603      	mov	r3, r0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	58004000 	.word	0x58004000
 8002c48:	20000008 	.word	0x20000008

08002c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c52:	f7ff f9e2 	bl	800201a <LL_RCC_GetSysClkSource>
 8002c56:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c5e:	f7ff f99e 	bl	8001f9e <LL_RCC_MSI_GetRange>
 8002c62:	4603      	mov	r3, r0
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	4a2b      	ldr	r2, [pc, #172]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e04b      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d102      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e045      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d10a      	bne.n	8002c9c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c86:	f7fe ffb7 	bl	8001bf8 <LL_RCC_HSE_IsEnabledDiv2>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d102      	bne.n	8002c96 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c90:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e03a      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e037      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c9c:	f7ff fab9 	bl	8002212 <LL_RCC_PLL_GetMainSource>
 8002ca0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d003      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x64>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x6a>
 8002cae:	e00d      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002cb0:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cb2:	60bb      	str	r3, [r7, #8]
        break;
 8002cb4:	e015      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cb6:	f7fe ff9f 	bl	8001bf8 <LL_RCC_HSE_IsEnabledDiv2>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002cc0:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cc2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002cc4:	e00d      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cc8:	60bb      	str	r3, [r7, #8]
        break;
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002ccc:	f7ff f967 	bl	8001f9e <LL_RCC_MSI_GetRange>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	091b      	lsrs	r3, r3, #4
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cde:	60bb      	str	r3, [r7, #8]
        break;
 8002ce0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002ce2:	f7ff fa71 	bl	80021c8 <LL_RCC_PLL_GetN>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	fb03 f402 	mul.w	r4, r3, r2
 8002cee:	f7ff fa84 	bl	80021fa <LL_RCC_PLL_GetDivider>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	fbb4 f4f3 	udiv	r4, r4, r3
 8002cfc:	f7ff fa71 	bl	80021e2 <LL_RCC_PLL_GetR>
 8002d00:	4603      	mov	r3, r0
 8002d02:	0f5b      	lsrs	r3, r3, #29
 8002d04:	3301      	adds	r3, #1
 8002d06:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d0a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	bf00      	nop
 8002d18:	08006190 	.word	0x08006190
 8002d1c:	00f42400 	.word	0x00f42400
 8002d20:	01e84800 	.word	0x01e84800

08002d24 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d24:	b598      	push	{r3, r4, r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d28:	f7ff ff90 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	f7ff f9e9 	bl	8002104 <LL_RCC_GetAHBPrescaler>
 8002d32:	4603      	mov	r3, r0
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	4a03      	ldr	r2, [pc, #12]	; (8002d48 <HAL_RCC_GetHCLKFreq+0x24>)
 8002d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d40:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd98      	pop	{r3, r4, r7, pc}
 8002d48:	08006130 	.word	0x08006130

08002d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d4c:	b598      	push	{r3, r4, r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d50:	f7ff ffe8 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d54:	4604      	mov	r4, r0
 8002d56:	f7ff f9ef 	bl	8002138 <LL_RCC_GetAPB1Prescaler>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd98      	pop	{r3, r4, r7, pc}
 8002d74:	08006170 	.word	0x08006170

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b598      	push	{r3, r4, r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d7c:	f7ff ffd2 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d80:	4604      	mov	r4, r0
 8002d82:	f7ff f9e5 	bl	8002150 <LL_RCC_GetAPB2Prescaler>
 8002d86:	4603      	mov	r3, r0
 8002d88:	0adb      	lsrs	r3, r3, #11
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd98      	pop	{r3, r4, r7, pc}
 8002da0:	08006170 	.word	0x08006170

08002da4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2bb0      	cmp	r3, #176	; 0xb0
 8002db0:	d903      	bls.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e007      	b.n	8002dca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002dca:	f7ff f9a7 	bl	800211c <LL_RCC_GetAHB4Prescaler>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	4a0d      	ldr	r2, [pc, #52]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	0c9c      	lsrs	r4, r3, #18
 8002dee:	f7fe fef5 	bl	8001bdc <HAL_PWREx_GetVoltageRange>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4619      	mov	r1, r3
 8002df6:	4620      	mov	r0, r4
 8002df8:	f000 f80c 	bl	8002e14 <RCC_SetFlashLatency>
 8002dfc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd90      	pop	{r4, r7, pc}
 8002e06:	bf00      	nop
 8002e08:	08006190 	.word	0x08006190
 8002e0c:	08006130 	.word	0x08006130
 8002e10:	431bde83 	.word	0x431bde83

08002e14 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b093      	sub	sp, #76	; 0x4c
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002e1e:	4b37      	ldr	r3, [pc, #220]	; (8002efc <RCC_SetFlashLatency+0xe8>)
 8002e20:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002e24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002e2a:	4a35      	ldr	r2, [pc, #212]	; (8002f00 <RCC_SetFlashLatency+0xec>)
 8002e2c:	f107 031c 	add.w	r3, r7, #28
 8002e30:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002e36:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <RCC_SetFlashLatency+0xf0>)
 8002e38:	f107 040c 	add.w	r4, r7, #12
 8002e3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e42:	2300      	movs	r3, #0
 8002e44:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4c:	d11a      	bne.n	8002e84 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	643b      	str	r3, [r7, #64]	; 0x40
 8002e52:	e013      	b.n	8002e7c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	3348      	adds	r3, #72	; 0x48
 8002e5a:	443b      	add	r3, r7
 8002e5c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d807      	bhi.n	8002e76 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	3348      	adds	r3, #72	; 0x48
 8002e6c:	443b      	add	r3, r7
 8002e6e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e72:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e74:	e020      	b.n	8002eb8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e78:	3301      	adds	r3, #1
 8002e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d9e8      	bls.n	8002e54 <RCC_SetFlashLatency+0x40>
 8002e82:	e019      	b.n	8002eb8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e84:	2300      	movs	r3, #0
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e88:	e013      	b.n	8002eb2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	3348      	adds	r3, #72	; 0x48
 8002e90:	443b      	add	r3, r7
 8002e92:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d807      	bhi.n	8002eac <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	3348      	adds	r3, #72	; 0x48
 8002ea2:	443b      	add	r3, r7
 8002ea4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ea8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002eaa:	e005      	b.n	8002eb8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eae:	3301      	adds	r3, #1
 8002eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d9e8      	bls.n	8002e8a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002eb8:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <RCC_SetFlashLatency+0xf4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 0207 	bic.w	r2, r3, #7
 8002ec0:	4911      	ldr	r1, [pc, #68]	; (8002f08 <RCC_SetFlashLatency+0xf4>)
 8002ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ec8:	f7fe f9d6 	bl	8001278 <HAL_GetTick>
 8002ecc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ece:	e008      	b.n	8002ee2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ed0:	f7fe f9d2 	bl	8001278 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e007      	b.n	8002ef2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <RCC_SetFlashLatency+0xf4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d1ef      	bne.n	8002ed0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	374c      	adds	r7, #76	; 0x4c
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd90      	pop	{r4, r7, pc}
 8002efa:	bf00      	nop
 8002efc:	080060f8 	.word	0x080060f8
 8002f00:	08006108 	.word	0x08006108
 8002f04:	08006114 	.word	0x08006114
 8002f08:	58004000 	.word	0x58004000

08002f0c <LL_RCC_LSE_IsEnabled>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <LL_RCC_LSE_IsEnabled+0x18>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <LL_RCC_LSE_IsEnabled+0x1a>
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_RCC_LSE_IsReady>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d101      	bne.n	8002f48 <LL_RCC_LSE_IsReady+0x18>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <LL_RCC_LSE_IsReady+0x1a>
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_RCC_MSI_EnablePLLMode>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <LL_RCC_SetRFWKPClockSource>:
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_RCC_SetSMPSClockSource>:
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	f023 0203 	bic.w	r2, r3, #3
 8002fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_SetSMPSPrescaler>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_RCC_SetUSARTClockSource>:
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_RCC_SetLPUARTClockSource>:
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800302e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_RCC_SetI2CClockSource>:
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003052:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800305e:	43db      	mvns	r3, r3
 8003060:	401a      	ands	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800306a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_RCC_SetLPTIMClockSource>:
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	0c1b      	lsrs	r3, r3, #16
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	43db      	mvns	r3, r3
 8003098:	401a      	ands	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_RCC_SetSAIClockSource>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_RCC_SetRNGClockSource>:
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80030f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <LL_RCC_SetCLK48ClockSource>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_RCC_SetUSBClockSource>:
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ffe3 	bl	800310c <LL_RCC_SetCLK48ClockSource>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <LL_RCC_SetADCClockSource>:
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <LL_RCC_SetRTCClockSource>:
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800318e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_RCC_GetRTCClockSource>:
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_RCC_ForceBackupDomainReset>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <LL_RCC_PLLSAI1_Enable>:
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003212:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003216:	6013      	str	r3, [r2, #0]
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_RCC_PLLSAI1_Disable>:
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003230:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003234:	6013      	str	r3, [r2, #0]
}
 8003236:	bf00      	nop
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_RCC_PLLSAI1_IsReady>:
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800324e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003252:	d101      	bne.n	8003258 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003270:	2300      	movs	r3, #0
 8003272:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	d034      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003288:	d021      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800328a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800328e:	d81b      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003290:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003294:	d01d      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003296:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800329a:	d815      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00b      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80032a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a4:	d110      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80032b6:	e00d      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f94d 	bl	800355c <RCCEx_PLLSAI1_ConfigNP>
 80032c2:	4603      	mov	r3, r0
 80032c4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80032c6:	e005      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	77fb      	strb	r3, [r7, #31]
        break;
 80032cc:	e002      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80032d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d4:	7ffb      	ldrb	r3, [r7, #31]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d105      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fee8 	bl	80030b4 <LL_RCC_SetSAIClockSource>
 80032e4:	e001      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e6:	7ffb      	ldrb	r3, [r7, #31]
 80032e8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d046      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80032f6:	f7ff ff56 	bl	80031a6 <LL_RCC_GetRTCClockSource>
 80032fa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	429a      	cmp	r2, r3
 8003304:	d03c      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003306:	f7fe fc59 	bl	8001bbc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d105      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff30 	bl	800317a <LL_RCC_SetRTCClockSource>
 800331a:	e02e      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003326:	f7ff ff4b 	bl	80031c0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800332a:	f7ff ff5a 	bl	80031e2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800333c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003346:	f7ff fde1 	bl	8002f0c <LL_RCC_LSE_IsEnabled>
 800334a:	4603      	mov	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d114      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003350:	f7fd ff92 	bl	8001278 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003356:	e00b      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7fd ff8e 	bl	8001278 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d902      	bls.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	77fb      	strb	r3, [r7, #31]
              break;
 800336e:	e004      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003370:	f7ff fdde 	bl	8002f30 <LL_RCC_LSE_IsReady>
 8003374:	4603      	mov	r3, r0
 8003376:	2b01      	cmp	r3, #1
 8003378:	d1ee      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800337a:	7ffb      	ldrb	r3, [r7, #31]
 800337c:	77bb      	strb	r3, [r7, #30]
 800337e:	e001      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	7ffb      	ldrb	r3, [r7, #31]
 8003382:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d004      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fe2a 	bl	8002fee <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d004      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fe35 	bl	800301a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fe5d 	bl	8003080 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fe52 	bl	8003080 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d004      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fe2a 	bl	8003046 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d004      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fe1f 	bl	8003046 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d022      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fe8d 	bl	8003138 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003426:	d107      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003436:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003440:	d10b      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f8e3 	bl	8003612 <RCCEx_PLLSAI1_ConfigNQ>
 800344c:	4603      	mov	r3, r0
 800344e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003450:	7ffb      	ldrb	r3, [r7, #31]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003456:	7ffb      	ldrb	r3, [r7, #31]
 8003458:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003462:	2b00      	cmp	r3, #0
 8003464:	d02b      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d008      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003478:	d003      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff fe2a 	bl	80030e0 <LL_RCC_SetRNGClockSource>
 800348c:	e00a      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	2000      	movs	r0, #0
 800349a:	f7ff fe21 	bl	80030e0 <LL_RCC_SetRNGClockSource>
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f7ff fe34 	bl	800310c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80034ac:	d107      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80034ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d022      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fe3d 	bl	800314e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034dc:	d107      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034f6:	d10b      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f8e3 	bl	80036c8 <RCCEx_PLLSAI1_ConfigNR>
 8003502:	4603      	mov	r3, r0
 8003504:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003506:	7ffb      	ldrb	r3, [r7, #31]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800350c:	7ffb      	ldrb	r3, [r7, #31]
 800350e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fd26 	bl	8002f72 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fd45 	bl	8002fc6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fd2c 	bl	8002f9e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003546:	7fbb      	ldrb	r3, [r7, #30]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3720      	adds	r7, #32
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003554:	f7ff fcfe 	bl	8002f54 <LL_RCC_MSI_EnablePLLMode>
}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}

0800355c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003568:	f7ff fe5b 	bl	8003222 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800356c:	f7fd fe84 	bl	8001278 <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003572:	e009      	b.n	8003588 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003574:	f7fd fe80 	bl	8001278 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d902      	bls.n	8003588 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	73fb      	strb	r3, [r7, #15]
      break;
 8003586:	e004      	b.n	8003592 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003588:	f7ff fe5a 	bl	8003240 <LL_RCC_PLLSAI1_IsReady>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d137      	bne.n	8003608 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ac:	4313      	orrs	r3, r2
 80035ae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80035b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035c2:	4313      	orrs	r3, r2
 80035c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035c6:	f7ff fe1d 	bl	8003204 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ca:	f7fd fe55 	bl	8001278 <HAL_GetTick>
 80035ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035d0:	e009      	b.n	80035e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d2:	f7fd fe51 	bl	8001278 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d902      	bls.n	80035e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	73fb      	strb	r3, [r7, #15]
        break;
 80035e4:	e004      	b.n	80035f0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035e6:	f7ff fe2b 	bl	8003240 <LL_RCC_PLLSAI1_IsReady>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d1f0      	bne.n	80035d2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003604:	4313      	orrs	r3, r2
 8003606:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800361e:	f7ff fe00 	bl	8003222 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003622:	f7fd fe29 	bl	8001278 <HAL_GetTick>
 8003626:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003628:	e009      	b.n	800363e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800362a:	f7fd fe25 	bl	8001278 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d902      	bls.n	800363e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e004      	b.n	8003648 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800363e:	f7ff fdff 	bl	8003240 <LL_RCC_PLLSAI1_IsReady>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d137      	bne.n	80036be <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800364e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003662:	4313      	orrs	r3, r2
 8003664:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003678:	4313      	orrs	r3, r2
 800367a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800367c:	f7ff fdc2 	bl	8003204 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003680:	f7fd fdfa 	bl	8001278 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003686:	e009      	b.n	800369c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003688:	f7fd fdf6 	bl	8001278 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d902      	bls.n	800369c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	73fb      	strb	r3, [r7, #15]
        break;
 800369a:	e004      	b.n	80036a6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800369c:	f7ff fdd0 	bl	8003240 <LL_RCC_PLLSAI1_IsReady>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d1f0      	bne.n	8003688 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d108      	bne.n	80036be <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036ba:	4313      	orrs	r3, r2
 80036bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80036d4:	f7ff fda5 	bl	8003222 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036d8:	f7fd fdce 	bl	8001278 <HAL_GetTick>
 80036dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036de:	e009      	b.n	80036f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036e0:	f7fd fdca 	bl	8001278 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d902      	bls.n	80036f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	73fb      	strb	r3, [r7, #15]
      break;
 80036f2:	e004      	b.n	80036fe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036f4:	f7ff fda4 	bl	8003240 <LL_RCC_PLLSAI1_IsReady>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d137      	bne.n	8003774 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003718:	4313      	orrs	r3, r2
 800371a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800371c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800372e:	4313      	orrs	r3, r2
 8003730:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003732:	f7ff fd67 	bl	8003204 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003736:	f7fd fd9f 	bl	8001278 <HAL_GetTick>
 800373a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800373c:	e009      	b.n	8003752 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800373e:	f7fd fd9b 	bl	8001278 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d902      	bls.n	8003752 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	73fb      	strb	r3, [r7, #15]
        break;
 8003750:	e004      	b.n	800375c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003752:	f7ff fd75 	bl	8003240 <LL_RCC_PLLSAI1_IsReady>
 8003756:	4603      	mov	r3, r0
 8003758:	2b01      	cmp	r3, #1
 800375a:	d1f0      	bne.n	800373e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003770:	4313      	orrs	r3, r2
 8003772:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <LL_RCC_GetUSARTClockSource>:
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4013      	ands	r3, r2
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <LL_RCC_GetLPUARTClockSource>:
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4013      	ands	r3, r2
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e042      	b.n	8003856 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fa92 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 feeb 	bl	80045e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fcc0 	bl	8004194 <UART_SetConfig>
 8003814:	4603      	mov	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e01b      	b.n	8003856 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 ff6a 	bl	8004728 <UART_CheckIdleState>
 8003854:	4603      	mov	r3, r0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b08a      	sub	sp, #40	; 0x28
 8003862:	af02      	add	r7, sp, #8
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	2b20      	cmp	r3, #32
 8003876:	d17b      	bne.n	8003970 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_UART_Transmit+0x26>
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e074      	b.n	8003972 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2221      	movs	r2, #33	; 0x21
 8003894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003898:	f7fd fcee 	bl	8001278 <HAL_GetTick>
 800389c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	88fa      	ldrh	r2, [r7, #6]
 80038a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b6:	d108      	bne.n	80038ca <HAL_UART_Transmit+0x6c>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	e003      	b.n	80038d2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038d2:	e030      	b.n	8003936 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2200      	movs	r2, #0
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 ffcc 	bl	800487c <UART_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e03d      	b.n	8003972 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800390a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	3302      	adds	r3, #2
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e007      	b.n	8003924 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	781a      	ldrb	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3301      	adds	r3, #1
 8003922:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1c8      	bne.n	80038d4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2200      	movs	r2, #0
 800394a:	2140      	movs	r1, #64	; 0x40
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 ff95 	bl	800487c <UART_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e006      	b.n	8003972 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e000      	b.n	8003972 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
  }
}
 8003972:	4618      	mov	r0, r3
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b08a      	sub	sp, #40	; 0x28
 800397e:	af02      	add	r7, sp, #8
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	603b      	str	r3, [r7, #0]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003990:	2b20      	cmp	r3, #32
 8003992:	f040 80b5 	bne.w	8003b00 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_UART_Receive+0x28>
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0ad      	b.n	8003b02 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2222      	movs	r2, #34	; 0x22
 80039b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039bc:	f7fd fc5c 	bl	8001278 <HAL_GetTick>
 80039c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	88fa      	ldrh	r2, [r7, #6]
 80039c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	88fa      	ldrh	r2, [r7, #6]
 80039ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039da:	d10e      	bne.n	80039fa <HAL_UART_Receive+0x80>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d105      	bne.n	80039f0 <HAL_UART_Receive+0x76>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80039ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039ee:	e02d      	b.n	8003a4c <HAL_UART_Receive+0xd2>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039f8:	e028      	b.n	8003a4c <HAL_UART_Receive+0xd2>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10d      	bne.n	8003a1e <HAL_UART_Receive+0xa4>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d104      	bne.n	8003a14 <HAL_UART_Receive+0x9a>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	22ff      	movs	r2, #255	; 0xff
 8003a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a12:	e01b      	b.n	8003a4c <HAL_UART_Receive+0xd2>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	227f      	movs	r2, #127	; 0x7f
 8003a18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a1c:	e016      	b.n	8003a4c <HAL_UART_Receive+0xd2>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a26:	d10d      	bne.n	8003a44 <HAL_UART_Receive+0xca>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d104      	bne.n	8003a3a <HAL_UART_Receive+0xc0>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	227f      	movs	r2, #127	; 0x7f
 8003a34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a38:	e008      	b.n	8003a4c <HAL_UART_Receive+0xd2>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	223f      	movs	r2, #63	; 0x3f
 8003a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a42:	e003      	b.n	8003a4c <HAL_UART_Receive+0xd2>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003a52:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5c:	d108      	bne.n	8003a70 <HAL_UART_Receive+0xf6>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d104      	bne.n	8003a70 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e003      	b.n	8003a78 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a78:	e036      	b.n	8003ae8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2200      	movs	r2, #0
 8003a82:	2120      	movs	r1, #32
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fef9 	bl	800487c <UART_WaitOnFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e032      	b.n	8003b02 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10c      	bne.n	8003abc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	8a7b      	ldrh	r3, [r7, #18]
 8003aac:	4013      	ands	r3, r2
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	3302      	adds	r3, #2
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	e00c      	b.n	8003ad6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	8a7b      	ldrh	r3, [r7, #18]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	4013      	ands	r3, r2
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1c2      	bne.n	8003a7a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	e000      	b.n	8003b02 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003b00:	2302      	movs	r3, #2
  }
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b0ba      	sub	sp, #232	; 0xe8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b36:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d11b      	bne.n	8003b80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d009      	beq.n	8003b80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 82e3 	beq.w	800413c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
      }
      return;
 8003b7e:	e2dd      	b.n	800413c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8123 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003b8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003b8e:	4b8d      	ldr	r3, [pc, #564]	; (8003dc4 <HAL_UART_IRQHandler+0x2b8>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003b96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b9a:	4b8b      	ldr	r3, [pc, #556]	; (8003dc8 <HAL_UART_IRQHandler+0x2bc>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8116 	beq.w	8003dd0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d011      	beq.n	8003bd4 <HAL_UART_IRQHandler+0xc8>
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	f043 0201 	orr.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d011      	beq.n	8003c04 <HAL_UART_IRQHandler+0xf8>
 8003be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00b      	beq.n	8003c04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f043 0204 	orr.w	r2, r3, #4
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d011      	beq.n	8003c34 <HAL_UART_IRQHandler+0x128>
 8003c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00b      	beq.n	8003c34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2204      	movs	r2, #4
 8003c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f043 0202 	orr.w	r2, r3, #2
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d017      	beq.n	8003c70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003c50:	4b5c      	ldr	r3, [pc, #368]	; (8003dc4 <HAL_UART_IRQHandler+0x2b8>)
 8003c52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00b      	beq.n	8003c70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f043 0208 	orr.w	r2, r3, #8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d012      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x196>
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00c      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8249 	beq.w	8004140 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d013      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d105      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d054      	beq.n	8003db0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fe25 	bl	8004956 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d146      	bne.n	8003da8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3308      	adds	r3, #8
 8003d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3308      	adds	r3, #8
 8003d42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1d9      	bne.n	8003d1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d017      	beq.n	8003da0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d76:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <HAL_UART_IRQHandler+0x2c0>)
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd fc23 	bl	80015cc <HAL_DMA_Abort_IT>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d019      	beq.n	8003dc0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9e:	e00f      	b.n	8003dc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f9e1 	bl	8004168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da6:	e00b      	b.n	8003dc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f9dd 	bl	8004168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dae:	e007      	b.n	8003dc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f9d9 	bl	8004168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003dbe:	e1bf      	b.n	8004140 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	bf00      	nop
    return;
 8003dc2:	e1bd      	b.n	8004140 <HAL_UART_IRQHandler+0x634>
 8003dc4:	10000001 	.word	0x10000001
 8003dc8:	04000120 	.word	0x04000120
 8003dcc:	08004a23 	.word	0x08004a23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	f040 8153 	bne.w	8004080 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 814c 	beq.w	8004080 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8145 	beq.w	8004080 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2210      	movs	r2, #16
 8003dfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	f040 80bb 	bne.w	8003f84 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 818f 	beq.w	8004144 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e30:	429a      	cmp	r2, r3
 8003e32:	f080 8187 	bcs.w	8004144 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 8087 	bne.w	8003f62 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1da      	bne.n	8003e54 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ec2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003eca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e1      	bne.n	8003e9e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3308      	adds	r3, #8
 8003efa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003efe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e3      	bne.n	8003eda <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f30:	f023 0310 	bic.w	r3, r3, #16
 8003f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f42:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e4      	bne.n	8003f20 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fd fad6 	bl	800150e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f8fd 	bl	800417c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f82:	e0df      	b.n	8004144 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80d1 	beq.w	8004148 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003fa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80cc 	beq.w	8004148 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e4      	bne.n	8003fb0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3308      	adds	r3, #8
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3308      	adds	r3, #8
 800400a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800400e:	633a      	str	r2, [r7, #48]	; 0x30
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e1      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	60fb      	str	r3, [r7, #12]
   return(result);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0310 	bic.w	r3, r3, #16
 800404a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	617b      	str	r3, [r7, #20]
   return(result);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e4      	bne.n	8004036 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004072:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f87f 	bl	800417c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800407e:	e063      	b.n	8004148 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00e      	beq.n	80040aa <HAL_UART_IRQHandler+0x59e>
 800408c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fcfe 	bl	8004aa4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040a8:	e051      	b.n	800414e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d014      	beq.n	80040e0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80040b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d105      	bne.n	80040ce <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80040c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d03a      	beq.n	800414c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
    }
    return;
 80040de:	e035      	b.n	800414c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <HAL_UART_IRQHandler+0x5f4>
 80040ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fca8 	bl	8004a4e <UART_EndTransmit_IT>
    return;
 80040fe:	e026      	b.n	800414e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <HAL_UART_IRQHandler+0x614>
 800410c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004110:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 fcd7 	bl	8004acc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800411e:	e016      	b.n	800414e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <HAL_UART_IRQHandler+0x642>
 800412c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004130:	2b00      	cmp	r3, #0
 8004132:	da0c      	bge.n	800414e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fcbf 	bl	8004ab8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800413a:	e008      	b.n	800414e <HAL_UART_IRQHandler+0x642>
      return;
 800413c:	bf00      	nop
 800413e:	e006      	b.n	800414e <HAL_UART_IRQHandler+0x642>
    return;
 8004140:	bf00      	nop
 8004142:	e004      	b.n	800414e <HAL_UART_IRQHandler+0x642>
      return;
 8004144:	bf00      	nop
 8004146:	e002      	b.n	800414e <HAL_UART_IRQHandler+0x642>
      return;
 8004148:	bf00      	nop
 800414a:	e000      	b.n	800414e <HAL_UART_IRQHandler+0x642>
    return;
 800414c:	bf00      	nop
  }
}
 800414e:	37e8      	adds	r7, #232	; 0xe8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004198:	b08c      	sub	sp, #48	; 0x30
 800419a:	af00      	add	r7, sp, #0
 800419c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	431a      	orrs	r2, r3
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4baf      	ldr	r3, [pc, #700]	; (8004480 <UART_SetConfig+0x2ec>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041cc:	430b      	orrs	r3, r1
 80041ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4aa4      	ldr	r2, [pc, #656]	; (8004484 <UART_SetConfig+0x2f0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fc:	4313      	orrs	r3, r2
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800420a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004214:	430b      	orrs	r3, r1
 8004216:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	f023 010f 	bic.w	r1, r3, #15
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a95      	ldr	r2, [pc, #596]	; (8004488 <UART_SetConfig+0x2f4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d125      	bne.n	8004284 <UART_SetConfig+0xf0>
 8004238:	2003      	movs	r0, #3
 800423a:	f7ff faa0 	bl	800377e <LL_RCC_GetUSARTClockSource>
 800423e:	4603      	mov	r3, r0
 8004240:	2b03      	cmp	r3, #3
 8004242:	d81b      	bhi.n	800427c <UART_SetConfig+0xe8>
 8004244:	a201      	add	r2, pc, #4	; (adr r2, 800424c <UART_SetConfig+0xb8>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	0800425d 	.word	0x0800425d
 8004250:	0800426d 	.word	0x0800426d
 8004254:	08004265 	.word	0x08004265
 8004258:	08004275 	.word	0x08004275
 800425c:	2301      	movs	r3, #1
 800425e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004262:	e042      	b.n	80042ea <UART_SetConfig+0x156>
 8004264:	2302      	movs	r3, #2
 8004266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800426a:	e03e      	b.n	80042ea <UART_SetConfig+0x156>
 800426c:	2304      	movs	r3, #4
 800426e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004272:	e03a      	b.n	80042ea <UART_SetConfig+0x156>
 8004274:	2308      	movs	r3, #8
 8004276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800427a:	e036      	b.n	80042ea <UART_SetConfig+0x156>
 800427c:	2310      	movs	r3, #16
 800427e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004282:	e032      	b.n	80042ea <UART_SetConfig+0x156>
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7e      	ldr	r2, [pc, #504]	; (8004484 <UART_SetConfig+0x2f0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d12a      	bne.n	80042e4 <UART_SetConfig+0x150>
 800428e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004292:	f7ff fa84 	bl	800379e <LL_RCC_GetLPUARTClockSource>
 8004296:	4603      	mov	r3, r0
 8004298:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800429c:	d01a      	beq.n	80042d4 <UART_SetConfig+0x140>
 800429e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042a2:	d81b      	bhi.n	80042dc <UART_SetConfig+0x148>
 80042a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a8:	d00c      	beq.n	80042c4 <UART_SetConfig+0x130>
 80042aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ae:	d815      	bhi.n	80042dc <UART_SetConfig+0x148>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <UART_SetConfig+0x128>
 80042b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b8:	d008      	beq.n	80042cc <UART_SetConfig+0x138>
 80042ba:	e00f      	b.n	80042dc <UART_SetConfig+0x148>
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c2:	e012      	b.n	80042ea <UART_SetConfig+0x156>
 80042c4:	2302      	movs	r3, #2
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ca:	e00e      	b.n	80042ea <UART_SetConfig+0x156>
 80042cc:	2304      	movs	r3, #4
 80042ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d2:	e00a      	b.n	80042ea <UART_SetConfig+0x156>
 80042d4:	2308      	movs	r3, #8
 80042d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042da:	e006      	b.n	80042ea <UART_SetConfig+0x156>
 80042dc:	2310      	movs	r3, #16
 80042de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042e2:	e002      	b.n	80042ea <UART_SetConfig+0x156>
 80042e4:	2310      	movs	r3, #16
 80042e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a65      	ldr	r2, [pc, #404]	; (8004484 <UART_SetConfig+0x2f0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	f040 8097 	bne.w	8004424 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d823      	bhi.n	8004346 <UART_SetConfig+0x1b2>
 80042fe:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <UART_SetConfig+0x170>)
 8004300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004304:	08004329 	.word	0x08004329
 8004308:	08004347 	.word	0x08004347
 800430c:	08004331 	.word	0x08004331
 8004310:	08004347 	.word	0x08004347
 8004314:	08004337 	.word	0x08004337
 8004318:	08004347 	.word	0x08004347
 800431c:	08004347 	.word	0x08004347
 8004320:	08004347 	.word	0x08004347
 8004324:	0800433f 	.word	0x0800433f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004328:	f7fe fd10 	bl	8002d4c <HAL_RCC_GetPCLK1Freq>
 800432c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800432e:	e010      	b.n	8004352 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004330:	4b56      	ldr	r3, [pc, #344]	; (800448c <UART_SetConfig+0x2f8>)
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004334:	e00d      	b.n	8004352 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004336:	f7fe fc89 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 800433a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800433c:	e009      	b.n	8004352 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004344:	e005      	b.n	8004352 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 812b 	beq.w	80045b0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	4a4c      	ldr	r2, [pc, #304]	; (8004490 <UART_SetConfig+0x2fc>)
 8004360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004364:	461a      	mov	r2, r3
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	fbb3 f3f2 	udiv	r3, r3, r2
 800436c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4413      	add	r3, r2
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	429a      	cmp	r2, r3
 800437c:	d305      	bcc.n	800438a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	429a      	cmp	r2, r3
 8004388:	d903      	bls.n	8004392 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004390:	e10e      	b.n	80045b0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	2200      	movs	r2, #0
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	60fa      	str	r2, [r7, #12]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	4a3c      	ldr	r2, [pc, #240]	; (8004490 <UART_SetConfig+0x2fc>)
 80043a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2200      	movs	r2, #0
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043b4:	f7fb ff3c 	bl	8000230 <__aeabi_uldivmod>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	020b      	lsls	r3, r1, #8
 80043ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043ce:	0202      	lsls	r2, r0, #8
 80043d0:	6979      	ldr	r1, [r7, #20]
 80043d2:	6849      	ldr	r1, [r1, #4]
 80043d4:	0849      	lsrs	r1, r1, #1
 80043d6:	2000      	movs	r0, #0
 80043d8:	460c      	mov	r4, r1
 80043da:	4605      	mov	r5, r0
 80043dc:	eb12 0804 	adds.w	r8, r2, r4
 80043e0:	eb43 0905 	adc.w	r9, r3, r5
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	469a      	mov	sl, r3
 80043ec:	4693      	mov	fp, r2
 80043ee:	4652      	mov	r2, sl
 80043f0:	465b      	mov	r3, fp
 80043f2:	4640      	mov	r0, r8
 80043f4:	4649      	mov	r1, r9
 80043f6:	f7fb ff1b 	bl	8000230 <__aeabi_uldivmod>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4613      	mov	r3, r2
 8004400:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004408:	d308      	bcc.n	800441c <UART_SetConfig+0x288>
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004410:	d204      	bcs.n	800441c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a3a      	ldr	r2, [r7, #32]
 8004418:	60da      	str	r2, [r3, #12]
 800441a:	e0c9      	b.n	80045b0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004422:	e0c5      	b.n	80045b0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442c:	d16d      	bne.n	800450a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800442e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004432:	3b01      	subs	r3, #1
 8004434:	2b07      	cmp	r3, #7
 8004436:	d82d      	bhi.n	8004494 <UART_SetConfig+0x300>
 8004438:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <UART_SetConfig+0x2ac>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004461 	.word	0x08004461
 8004444:	08004469 	.word	0x08004469
 8004448:	08004495 	.word	0x08004495
 800444c:	0800446f 	.word	0x0800446f
 8004450:	08004495 	.word	0x08004495
 8004454:	08004495 	.word	0x08004495
 8004458:	08004495 	.word	0x08004495
 800445c:	08004477 	.word	0x08004477
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004460:	f7fe fc8a 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8004464:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004466:	e01b      	b.n	80044a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <UART_SetConfig+0x2f8>)
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800446c:	e018      	b.n	80044a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800446e:	f7fe fbed 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 8004472:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004474:	e014      	b.n	80044a0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800447c:	e010      	b.n	80044a0 <UART_SetConfig+0x30c>
 800447e:	bf00      	nop
 8004480:	cfff69f3 	.word	0xcfff69f3
 8004484:	40008000 	.word	0x40008000
 8004488:	40013800 	.word	0x40013800
 800448c:	00f42400 	.word	0x00f42400
 8004490:	080061d0 	.word	0x080061d0
      default:
        pclk = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800449e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8084 	beq.w	80045b0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	4a4b      	ldr	r2, [pc, #300]	; (80045dc <UART_SetConfig+0x448>)
 80044ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044b2:	461a      	mov	r2, r3
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ba:	005a      	lsls	r2, r3, #1
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	085b      	lsrs	r3, r3, #1
 80044c2:	441a      	add	r2, r3
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	2b0f      	cmp	r3, #15
 80044d2:	d916      	bls.n	8004502 <UART_SetConfig+0x36e>
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044da:	d212      	bcs.n	8004502 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f023 030f 	bic.w	r3, r3, #15
 80044e4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	8bfb      	ldrh	r3, [r7, #30]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	8bfa      	ldrh	r2, [r7, #30]
 80044fe:	60da      	str	r2, [r3, #12]
 8004500:	e056      	b.n	80045b0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004508:	e052      	b.n	80045b0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800450a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800450e:	3b01      	subs	r3, #1
 8004510:	2b07      	cmp	r3, #7
 8004512:	d822      	bhi.n	800455a <UART_SetConfig+0x3c6>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <UART_SetConfig+0x388>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	0800453d 	.word	0x0800453d
 8004520:	08004545 	.word	0x08004545
 8004524:	0800455b 	.word	0x0800455b
 8004528:	0800454b 	.word	0x0800454b
 800452c:	0800455b 	.word	0x0800455b
 8004530:	0800455b 	.word	0x0800455b
 8004534:	0800455b 	.word	0x0800455b
 8004538:	08004553 	.word	0x08004553
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800453c:	f7fe fc1c 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8004540:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004542:	e010      	b.n	8004566 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004544:	4b26      	ldr	r3, [pc, #152]	; (80045e0 <UART_SetConfig+0x44c>)
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004548:	e00d      	b.n	8004566 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454a:	f7fe fb7f 	bl	8002c4c <HAL_RCC_GetSysClockFreq>
 800454e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004550:	e009      	b.n	8004566 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004558:	e005      	b.n	8004566 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004564:	bf00      	nop
    }

    if (pclk != 0U)
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	2b00      	cmp	r3, #0
 800456a:	d021      	beq.n	80045b0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	4a1a      	ldr	r2, [pc, #104]	; (80045dc <UART_SetConfig+0x448>)
 8004572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004576:	461a      	mov	r2, r3
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	fbb3 f2f2 	udiv	r2, r3, r2
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	441a      	add	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	fbb2 f3f3 	udiv	r3, r2, r3
 800458e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	2b0f      	cmp	r3, #15
 8004594:	d909      	bls.n	80045aa <UART_SetConfig+0x416>
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459c:	d205      	bcs.n	80045aa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60da      	str	r2, [r3, #12]
 80045a8:	e002      	b.n	80045b0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2200      	movs	r2, #0
 80045c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2200      	movs	r2, #0
 80045ca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80045cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3730      	adds	r7, #48	; 0x30
 80045d4:	46bd      	mov	sp, r7
 80045d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045da:	bf00      	nop
 80045dc:	080061d0 	.word	0x080061d0
 80045e0:	00f42400 	.word	0x00f42400

080045e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	430a      	orrs	r2, r1
 80046b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01a      	beq.n	80046fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046e2:	d10a      	bne.n	80046fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b098      	sub	sp, #96	; 0x60
 800472c:	af02      	add	r7, sp, #8
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004738:	f7fc fd9e 	bl	8001278 <HAL_GetTick>
 800473c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b08      	cmp	r3, #8
 800474a:	d12f      	bne.n	80047ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004754:	2200      	movs	r2, #0
 8004756:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f88e 	bl	800487c <UART_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d022      	beq.n	80047ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800477a:	653b      	str	r3, [r7, #80]	; 0x50
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004784:	647b      	str	r3, [r7, #68]	; 0x44
 8004786:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800478a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e6      	bne.n	8004766 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e063      	b.n	8004874 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d149      	bne.n	800484e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c2:	2200      	movs	r2, #0
 80047c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f857 	bl	800487c <UART_WaitOnFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d03c      	beq.n	800484e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	623b      	str	r3, [r7, #32]
   return(result);
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30
 80047f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e6      	bne.n	80047d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3308      	adds	r3, #8
 800480c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	60fb      	str	r3, [r7, #12]
   return(result);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	64bb      	str	r3, [r7, #72]	; 0x48
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3308      	adds	r3, #8
 8004824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004826:	61fa      	str	r2, [r7, #28]
 8004828:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	69b9      	ldr	r1, [r7, #24]
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	617b      	str	r3, [r7, #20]
   return(result);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e5      	bne.n	8004806 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e012      	b.n	8004874 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3758      	adds	r7, #88	; 0x58
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488c:	e04f      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d04b      	beq.n	800492e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fc fcef 	bl	8001278 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <UART_WaitOnFlagUntilTimeout+0x30>
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e04e      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d037      	beq.n	800492e <UART_WaitOnFlagUntilTimeout+0xb2>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b80      	cmp	r3, #128	; 0x80
 80048c2:	d034      	beq.n	800492e <UART_WaitOnFlagUntilTimeout+0xb2>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b40      	cmp	r3, #64	; 0x40
 80048c8:	d031      	beq.n	800492e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d110      	bne.n	80048fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2208      	movs	r2, #8
 80048de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f838 	bl	8004956 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2208      	movs	r2, #8
 80048ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e029      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004908:	d111      	bne.n	800492e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f81e 	bl	8004956 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2220      	movs	r2, #32
 800491e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e00f      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69da      	ldr	r2, [r3, #28]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4013      	ands	r3, r2
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	bf0c      	ite	eq
 800493e:	2301      	moveq	r3, #1
 8004940:	2300      	movne	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	429a      	cmp	r2, r3
 800494a:	d0a0      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004956:	b480      	push	{r7}
 8004958:	b095      	sub	sp, #84	; 0x54
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497c:	643b      	str	r3, [r7, #64]	; 0x40
 800497e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004982:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e6      	bne.n	800495e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3308      	adds	r3, #8
 8004996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	61fb      	str	r3, [r7, #28]
   return(result);
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3308      	adds	r3, #8
 80049b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e3      	bne.n	8004990 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d118      	bne.n	8004a02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f023 0310 	bic.w	r3, r3, #16
 80049e4:	647b      	str	r3, [r7, #68]	; 0x44
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6979      	ldr	r1, [r7, #20]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	613b      	str	r3, [r7, #16]
   return(result);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e6      	bne.n	80049d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004a16:	bf00      	nop
 8004a18:	3754      	adds	r7, #84	; 0x54
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff fb91 	bl	8004168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b088      	sub	sp, #32
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	61bb      	str	r3, [r7, #24]
 8004a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6979      	ldr	r1, [r7, #20]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	613b      	str	r3, [r7, #16]
   return(result);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e6      	bne.n	8004a56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff fb5c 	bl	8004154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a9c:	bf00      	nop
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_UARTEx_DisableFifoMode+0x16>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e027      	b.n	8004b46 <HAL_UARTEx_DisableFifoMode+0x66>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2224      	movs	r2, #36	; 0x24
 8004b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e02d      	b.n	8004bc6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2224      	movs	r2, #36	; 0x24
 8004b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f850 	bl	8004c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d101      	bne.n	8004be6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004be2:	2302      	movs	r3, #2
 8004be4:	e02d      	b.n	8004c42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2224      	movs	r2, #36	; 0x24
 8004bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f812 	bl	8004c4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d108      	bne.n	8004c6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c6c:	e031      	b.n	8004cd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c6e:	2308      	movs	r3, #8
 8004c70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c72:	2308      	movs	r3, #8
 8004c74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	0e5b      	lsrs	r3, r3, #25
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	0f5b      	lsrs	r3, r3, #29
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c96:	7bbb      	ldrb	r3, [r7, #14]
 8004c98:	7b3a      	ldrb	r2, [r7, #12]
 8004c9a:	4911      	ldr	r1, [pc, #68]	; (8004ce0 <UARTEx_SetNbDataToProcess+0x94>)
 8004c9c:	5c8a      	ldrb	r2, [r1, r2]
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ca2:	7b3a      	ldrb	r2, [r7, #12]
 8004ca4:	490f      	ldr	r1, [pc, #60]	; (8004ce4 <UARTEx_SetNbDataToProcess+0x98>)
 8004ca6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ca8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	7b7a      	ldrb	r2, [r7, #13]
 8004cb8:	4909      	ldr	r1, [pc, #36]	; (8004ce0 <UARTEx_SetNbDataToProcess+0x94>)
 8004cba:	5c8a      	ldrb	r2, [r1, r2]
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004cc0:	7b7a      	ldrb	r2, [r7, #13]
 8004cc2:	4908      	ldr	r1, [pc, #32]	; (8004ce4 <UARTEx_SetNbDataToProcess+0x98>)
 8004cc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	080061e8 	.word	0x080061e8
 8004ce4:	080061f0 	.word	0x080061f0

08004ce8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cf0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004cf4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	4013      	ands	r3, r2
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	1d3b      	adds	r3, r7, #4
 8004d28:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <siprintf>:
 8004d5c:	b40e      	push	{r1, r2, r3}
 8004d5e:	b500      	push	{lr}
 8004d60:	b09c      	sub	sp, #112	; 0x70
 8004d62:	ab1d      	add	r3, sp, #116	; 0x74
 8004d64:	9002      	str	r0, [sp, #8]
 8004d66:	9006      	str	r0, [sp, #24]
 8004d68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d6c:	4809      	ldr	r0, [pc, #36]	; (8004d94 <siprintf+0x38>)
 8004d6e:	9107      	str	r1, [sp, #28]
 8004d70:	9104      	str	r1, [sp, #16]
 8004d72:	4909      	ldr	r1, [pc, #36]	; (8004d98 <siprintf+0x3c>)
 8004d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d78:	9105      	str	r1, [sp, #20]
 8004d7a:	6800      	ldr	r0, [r0, #0]
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	a902      	add	r1, sp, #8
 8004d80:	f000 f9ce 	bl	8005120 <_svfiprintf_r>
 8004d84:	9b02      	ldr	r3, [sp, #8]
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	b01c      	add	sp, #112	; 0x70
 8004d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d90:	b003      	add	sp, #12
 8004d92:	4770      	bx	lr
 8004d94:	20000060 	.word	0x20000060
 8004d98:	ffff0208 	.word	0xffff0208

08004d9c <siscanf>:
 8004d9c:	b40e      	push	{r1, r2, r3}
 8004d9e:	b510      	push	{r4, lr}
 8004da0:	b09f      	sub	sp, #124	; 0x7c
 8004da2:	ac21      	add	r4, sp, #132	; 0x84
 8004da4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004da8:	f854 2b04 	ldr.w	r2, [r4], #4
 8004dac:	9201      	str	r2, [sp, #4]
 8004dae:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004db2:	9004      	str	r0, [sp, #16]
 8004db4:	9008      	str	r0, [sp, #32]
 8004db6:	f7fb f9e3 	bl	8000180 <strlen>
 8004dba:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <siscanf+0x50>)
 8004dbc:	9005      	str	r0, [sp, #20]
 8004dbe:	9009      	str	r0, [sp, #36]	; 0x24
 8004dc0:	930d      	str	r3, [sp, #52]	; 0x34
 8004dc2:	480b      	ldr	r0, [pc, #44]	; (8004df0 <siscanf+0x54>)
 8004dc4:	9a01      	ldr	r2, [sp, #4]
 8004dc6:	6800      	ldr	r0, [r0, #0]
 8004dc8:	9403      	str	r4, [sp, #12]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9311      	str	r3, [sp, #68]	; 0x44
 8004dce:	9316      	str	r3, [sp, #88]	; 0x58
 8004dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004dd8:	a904      	add	r1, sp, #16
 8004dda:	4623      	mov	r3, r4
 8004ddc:	f000 faf8 	bl	80053d0 <__ssvfiscanf_r>
 8004de0:	b01f      	add	sp, #124	; 0x7c
 8004de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de6:	b003      	add	sp, #12
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	08004df5 	.word	0x08004df5
 8004df0:	20000060 	.word	0x20000060

08004df4 <__seofread>:
 8004df4:	2000      	movs	r0, #0
 8004df6:	4770      	bx	lr

08004df8 <memset>:
 8004df8:	4402      	add	r2, r0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d100      	bne.n	8004e02 <memset+0xa>
 8004e00:	4770      	bx	lr
 8004e02:	f803 1b01 	strb.w	r1, [r3], #1
 8004e06:	e7f9      	b.n	8004dfc <memset+0x4>

08004e08 <__errno>:
 8004e08:	4b01      	ldr	r3, [pc, #4]	; (8004e10 <__errno+0x8>)
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000060 	.word	0x20000060

08004e14 <__libc_init_array>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	4d0d      	ldr	r5, [pc, #52]	; (8004e4c <__libc_init_array+0x38>)
 8004e18:	4c0d      	ldr	r4, [pc, #52]	; (8004e50 <__libc_init_array+0x3c>)
 8004e1a:	1b64      	subs	r4, r4, r5
 8004e1c:	10a4      	asrs	r4, r4, #2
 8004e1e:	2600      	movs	r6, #0
 8004e20:	42a6      	cmp	r6, r4
 8004e22:	d109      	bne.n	8004e38 <__libc_init_array+0x24>
 8004e24:	4d0b      	ldr	r5, [pc, #44]	; (8004e54 <__libc_init_array+0x40>)
 8004e26:	4c0c      	ldr	r4, [pc, #48]	; (8004e58 <__libc_init_array+0x44>)
 8004e28:	f001 f8f6 	bl	8006018 <_init>
 8004e2c:	1b64      	subs	r4, r4, r5
 8004e2e:	10a4      	asrs	r4, r4, #2
 8004e30:	2600      	movs	r6, #0
 8004e32:	42a6      	cmp	r6, r4
 8004e34:	d105      	bne.n	8004e42 <__libc_init_array+0x2e>
 8004e36:	bd70      	pop	{r4, r5, r6, pc}
 8004e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3c:	4798      	blx	r3
 8004e3e:	3601      	adds	r6, #1
 8004e40:	e7ee      	b.n	8004e20 <__libc_init_array+0xc>
 8004e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e46:	4798      	blx	r3
 8004e48:	3601      	adds	r6, #1
 8004e4a:	e7f2      	b.n	8004e32 <__libc_init_array+0x1e>
 8004e4c:	08006350 	.word	0x08006350
 8004e50:	08006350 	.word	0x08006350
 8004e54:	08006350 	.word	0x08006350
 8004e58:	08006354 	.word	0x08006354

08004e5c <__retarget_lock_acquire_recursive>:
 8004e5c:	4770      	bx	lr

08004e5e <__retarget_lock_release_recursive>:
 8004e5e:	4770      	bx	lr

08004e60 <memcpy>:
 8004e60:	440a      	add	r2, r1
 8004e62:	4291      	cmp	r1, r2
 8004e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e68:	d100      	bne.n	8004e6c <memcpy+0xc>
 8004e6a:	4770      	bx	lr
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e76:	4291      	cmp	r1, r2
 8004e78:	d1f9      	bne.n	8004e6e <memcpy+0xe>
 8004e7a:	bd10      	pop	{r4, pc}

08004e7c <_free_r>:
 8004e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e7e:	2900      	cmp	r1, #0
 8004e80:	d044      	beq.n	8004f0c <_free_r+0x90>
 8004e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e86:	9001      	str	r0, [sp, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e8e:	bfb8      	it	lt
 8004e90:	18e4      	addlt	r4, r4, r3
 8004e92:	f000 f8df 	bl	8005054 <__malloc_lock>
 8004e96:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <_free_r+0x94>)
 8004e98:	9801      	ldr	r0, [sp, #4]
 8004e9a:	6813      	ldr	r3, [r2, #0]
 8004e9c:	b933      	cbnz	r3, 8004eac <_free_r+0x30>
 8004e9e:	6063      	str	r3, [r4, #4]
 8004ea0:	6014      	str	r4, [r2, #0]
 8004ea2:	b003      	add	sp, #12
 8004ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ea8:	f000 b8da 	b.w	8005060 <__malloc_unlock>
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	d908      	bls.n	8004ec2 <_free_r+0x46>
 8004eb0:	6825      	ldr	r5, [r4, #0]
 8004eb2:	1961      	adds	r1, r4, r5
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	bf01      	itttt	eq
 8004eb8:	6819      	ldreq	r1, [r3, #0]
 8004eba:	685b      	ldreq	r3, [r3, #4]
 8004ebc:	1949      	addeq	r1, r1, r5
 8004ebe:	6021      	streq	r1, [r4, #0]
 8004ec0:	e7ed      	b.n	8004e9e <_free_r+0x22>
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	b10b      	cbz	r3, 8004ecc <_free_r+0x50>
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	d9fa      	bls.n	8004ec2 <_free_r+0x46>
 8004ecc:	6811      	ldr	r1, [r2, #0]
 8004ece:	1855      	adds	r5, r2, r1
 8004ed0:	42a5      	cmp	r5, r4
 8004ed2:	d10b      	bne.n	8004eec <_free_r+0x70>
 8004ed4:	6824      	ldr	r4, [r4, #0]
 8004ed6:	4421      	add	r1, r4
 8004ed8:	1854      	adds	r4, r2, r1
 8004eda:	42a3      	cmp	r3, r4
 8004edc:	6011      	str	r1, [r2, #0]
 8004ede:	d1e0      	bne.n	8004ea2 <_free_r+0x26>
 8004ee0:	681c      	ldr	r4, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	6053      	str	r3, [r2, #4]
 8004ee6:	440c      	add	r4, r1
 8004ee8:	6014      	str	r4, [r2, #0]
 8004eea:	e7da      	b.n	8004ea2 <_free_r+0x26>
 8004eec:	d902      	bls.n	8004ef4 <_free_r+0x78>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	6003      	str	r3, [r0, #0]
 8004ef2:	e7d6      	b.n	8004ea2 <_free_r+0x26>
 8004ef4:	6825      	ldr	r5, [r4, #0]
 8004ef6:	1961      	adds	r1, r4, r5
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	bf04      	itt	eq
 8004efc:	6819      	ldreq	r1, [r3, #0]
 8004efe:	685b      	ldreq	r3, [r3, #4]
 8004f00:	6063      	str	r3, [r4, #4]
 8004f02:	bf04      	itt	eq
 8004f04:	1949      	addeq	r1, r1, r5
 8004f06:	6021      	streq	r1, [r4, #0]
 8004f08:	6054      	str	r4, [r2, #4]
 8004f0a:	e7ca      	b.n	8004ea2 <_free_r+0x26>
 8004f0c:	b003      	add	sp, #12
 8004f0e:	bd30      	pop	{r4, r5, pc}
 8004f10:	200005d4 	.word	0x200005d4

08004f14 <sbrk_aligned>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	4e0e      	ldr	r6, [pc, #56]	; (8004f50 <sbrk_aligned+0x3c>)
 8004f18:	460c      	mov	r4, r1
 8004f1a:	6831      	ldr	r1, [r6, #0]
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	b911      	cbnz	r1, 8004f26 <sbrk_aligned+0x12>
 8004f20:	f000 ff3a 	bl	8005d98 <_sbrk_r>
 8004f24:	6030      	str	r0, [r6, #0]
 8004f26:	4621      	mov	r1, r4
 8004f28:	4628      	mov	r0, r5
 8004f2a:	f000 ff35 	bl	8005d98 <_sbrk_r>
 8004f2e:	1c43      	adds	r3, r0, #1
 8004f30:	d00a      	beq.n	8004f48 <sbrk_aligned+0x34>
 8004f32:	1cc4      	adds	r4, r0, #3
 8004f34:	f024 0403 	bic.w	r4, r4, #3
 8004f38:	42a0      	cmp	r0, r4
 8004f3a:	d007      	beq.n	8004f4c <sbrk_aligned+0x38>
 8004f3c:	1a21      	subs	r1, r4, r0
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f000 ff2a 	bl	8005d98 <_sbrk_r>
 8004f44:	3001      	adds	r0, #1
 8004f46:	d101      	bne.n	8004f4c <sbrk_aligned+0x38>
 8004f48:	f04f 34ff 	mov.w	r4, #4294967295
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	200005d8 	.word	0x200005d8

08004f54 <_malloc_r>:
 8004f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f58:	1ccd      	adds	r5, r1, #3
 8004f5a:	f025 0503 	bic.w	r5, r5, #3
 8004f5e:	3508      	adds	r5, #8
 8004f60:	2d0c      	cmp	r5, #12
 8004f62:	bf38      	it	cc
 8004f64:	250c      	movcc	r5, #12
 8004f66:	2d00      	cmp	r5, #0
 8004f68:	4607      	mov	r7, r0
 8004f6a:	db01      	blt.n	8004f70 <_malloc_r+0x1c>
 8004f6c:	42a9      	cmp	r1, r5
 8004f6e:	d905      	bls.n	8004f7c <_malloc_r+0x28>
 8004f70:	230c      	movs	r3, #12
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	2600      	movs	r6, #0
 8004f76:	4630      	mov	r0, r6
 8004f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005050 <_malloc_r+0xfc>
 8004f80:	f000 f868 	bl	8005054 <__malloc_lock>
 8004f84:	f8d8 3000 	ldr.w	r3, [r8]
 8004f88:	461c      	mov	r4, r3
 8004f8a:	bb5c      	cbnz	r4, 8004fe4 <_malloc_r+0x90>
 8004f8c:	4629      	mov	r1, r5
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f7ff ffc0 	bl	8004f14 <sbrk_aligned>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	4604      	mov	r4, r0
 8004f98:	d155      	bne.n	8005046 <_malloc_r+0xf2>
 8004f9a:	f8d8 4000 	ldr.w	r4, [r8]
 8004f9e:	4626      	mov	r6, r4
 8004fa0:	2e00      	cmp	r6, #0
 8004fa2:	d145      	bne.n	8005030 <_malloc_r+0xdc>
 8004fa4:	2c00      	cmp	r4, #0
 8004fa6:	d048      	beq.n	800503a <_malloc_r+0xe6>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	4631      	mov	r1, r6
 8004fac:	4638      	mov	r0, r7
 8004fae:	eb04 0903 	add.w	r9, r4, r3
 8004fb2:	f000 fef1 	bl	8005d98 <_sbrk_r>
 8004fb6:	4581      	cmp	r9, r0
 8004fb8:	d13f      	bne.n	800503a <_malloc_r+0xe6>
 8004fba:	6821      	ldr	r1, [r4, #0]
 8004fbc:	1a6d      	subs	r5, r5, r1
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	f7ff ffa7 	bl	8004f14 <sbrk_aligned>
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d037      	beq.n	800503a <_malloc_r+0xe6>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	442b      	add	r3, r5
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d038      	beq.n	800504a <_malloc_r+0xf6>
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	42a2      	cmp	r2, r4
 8004fdc:	d12b      	bne.n	8005036 <_malloc_r+0xe2>
 8004fde:	2200      	movs	r2, #0
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	e00f      	b.n	8005004 <_malloc_r+0xb0>
 8004fe4:	6822      	ldr	r2, [r4, #0]
 8004fe6:	1b52      	subs	r2, r2, r5
 8004fe8:	d41f      	bmi.n	800502a <_malloc_r+0xd6>
 8004fea:	2a0b      	cmp	r2, #11
 8004fec:	d917      	bls.n	800501e <_malloc_r+0xca>
 8004fee:	1961      	adds	r1, r4, r5
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	6025      	str	r5, [r4, #0]
 8004ff4:	bf18      	it	ne
 8004ff6:	6059      	strne	r1, [r3, #4]
 8004ff8:	6863      	ldr	r3, [r4, #4]
 8004ffa:	bf08      	it	eq
 8004ffc:	f8c8 1000 	streq.w	r1, [r8]
 8005000:	5162      	str	r2, [r4, r5]
 8005002:	604b      	str	r3, [r1, #4]
 8005004:	4638      	mov	r0, r7
 8005006:	f104 060b 	add.w	r6, r4, #11
 800500a:	f000 f829 	bl	8005060 <__malloc_unlock>
 800500e:	f026 0607 	bic.w	r6, r6, #7
 8005012:	1d23      	adds	r3, r4, #4
 8005014:	1af2      	subs	r2, r6, r3
 8005016:	d0ae      	beq.n	8004f76 <_malloc_r+0x22>
 8005018:	1b9b      	subs	r3, r3, r6
 800501a:	50a3      	str	r3, [r4, r2]
 800501c:	e7ab      	b.n	8004f76 <_malloc_r+0x22>
 800501e:	42a3      	cmp	r3, r4
 8005020:	6862      	ldr	r2, [r4, #4]
 8005022:	d1dd      	bne.n	8004fe0 <_malloc_r+0x8c>
 8005024:	f8c8 2000 	str.w	r2, [r8]
 8005028:	e7ec      	b.n	8005004 <_malloc_r+0xb0>
 800502a:	4623      	mov	r3, r4
 800502c:	6864      	ldr	r4, [r4, #4]
 800502e:	e7ac      	b.n	8004f8a <_malloc_r+0x36>
 8005030:	4634      	mov	r4, r6
 8005032:	6876      	ldr	r6, [r6, #4]
 8005034:	e7b4      	b.n	8004fa0 <_malloc_r+0x4c>
 8005036:	4613      	mov	r3, r2
 8005038:	e7cc      	b.n	8004fd4 <_malloc_r+0x80>
 800503a:	230c      	movs	r3, #12
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	4638      	mov	r0, r7
 8005040:	f000 f80e 	bl	8005060 <__malloc_unlock>
 8005044:	e797      	b.n	8004f76 <_malloc_r+0x22>
 8005046:	6025      	str	r5, [r4, #0]
 8005048:	e7dc      	b.n	8005004 <_malloc_r+0xb0>
 800504a:	605b      	str	r3, [r3, #4]
 800504c:	deff      	udf	#255	; 0xff
 800504e:	bf00      	nop
 8005050:	200005d4 	.word	0x200005d4

08005054 <__malloc_lock>:
 8005054:	4801      	ldr	r0, [pc, #4]	; (800505c <__malloc_lock+0x8>)
 8005056:	f7ff bf01 	b.w	8004e5c <__retarget_lock_acquire_recursive>
 800505a:	bf00      	nop
 800505c:	200005d0 	.word	0x200005d0

08005060 <__malloc_unlock>:
 8005060:	4801      	ldr	r0, [pc, #4]	; (8005068 <__malloc_unlock+0x8>)
 8005062:	f7ff befc 	b.w	8004e5e <__retarget_lock_release_recursive>
 8005066:	bf00      	nop
 8005068:	200005d0 	.word	0x200005d0

0800506c <__ssputs_r>:
 800506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	688e      	ldr	r6, [r1, #8]
 8005072:	461f      	mov	r7, r3
 8005074:	42be      	cmp	r6, r7
 8005076:	680b      	ldr	r3, [r1, #0]
 8005078:	4682      	mov	sl, r0
 800507a:	460c      	mov	r4, r1
 800507c:	4690      	mov	r8, r2
 800507e:	d82c      	bhi.n	80050da <__ssputs_r+0x6e>
 8005080:	898a      	ldrh	r2, [r1, #12]
 8005082:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005086:	d026      	beq.n	80050d6 <__ssputs_r+0x6a>
 8005088:	6965      	ldr	r5, [r4, #20]
 800508a:	6909      	ldr	r1, [r1, #16]
 800508c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005090:	eba3 0901 	sub.w	r9, r3, r1
 8005094:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005098:	1c7b      	adds	r3, r7, #1
 800509a:	444b      	add	r3, r9
 800509c:	106d      	asrs	r5, r5, #1
 800509e:	429d      	cmp	r5, r3
 80050a0:	bf38      	it	cc
 80050a2:	461d      	movcc	r5, r3
 80050a4:	0553      	lsls	r3, r2, #21
 80050a6:	d527      	bpl.n	80050f8 <__ssputs_r+0x8c>
 80050a8:	4629      	mov	r1, r5
 80050aa:	f7ff ff53 	bl	8004f54 <_malloc_r>
 80050ae:	4606      	mov	r6, r0
 80050b0:	b360      	cbz	r0, 800510c <__ssputs_r+0xa0>
 80050b2:	6921      	ldr	r1, [r4, #16]
 80050b4:	464a      	mov	r2, r9
 80050b6:	f7ff fed3 	bl	8004e60 <memcpy>
 80050ba:	89a3      	ldrh	r3, [r4, #12]
 80050bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c4:	81a3      	strh	r3, [r4, #12]
 80050c6:	6126      	str	r6, [r4, #16]
 80050c8:	6165      	str	r5, [r4, #20]
 80050ca:	444e      	add	r6, r9
 80050cc:	eba5 0509 	sub.w	r5, r5, r9
 80050d0:	6026      	str	r6, [r4, #0]
 80050d2:	60a5      	str	r5, [r4, #8]
 80050d4:	463e      	mov	r6, r7
 80050d6:	42be      	cmp	r6, r7
 80050d8:	d900      	bls.n	80050dc <__ssputs_r+0x70>
 80050da:	463e      	mov	r6, r7
 80050dc:	6820      	ldr	r0, [r4, #0]
 80050de:	4632      	mov	r2, r6
 80050e0:	4641      	mov	r1, r8
 80050e2:	f000 fe3e 	bl	8005d62 <memmove>
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	1b9b      	subs	r3, r3, r6
 80050ea:	60a3      	str	r3, [r4, #8]
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	4433      	add	r3, r6
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	2000      	movs	r0, #0
 80050f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f8:	462a      	mov	r2, r5
 80050fa:	f000 fe5d 	bl	8005db8 <_realloc_r>
 80050fe:	4606      	mov	r6, r0
 8005100:	2800      	cmp	r0, #0
 8005102:	d1e0      	bne.n	80050c6 <__ssputs_r+0x5a>
 8005104:	6921      	ldr	r1, [r4, #16]
 8005106:	4650      	mov	r0, sl
 8005108:	f7ff feb8 	bl	8004e7c <_free_r>
 800510c:	230c      	movs	r3, #12
 800510e:	f8ca 3000 	str.w	r3, [sl]
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	e7e9      	b.n	80050f4 <__ssputs_r+0x88>

08005120 <_svfiprintf_r>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	4698      	mov	r8, r3
 8005126:	898b      	ldrh	r3, [r1, #12]
 8005128:	061b      	lsls	r3, r3, #24
 800512a:	b09d      	sub	sp, #116	; 0x74
 800512c:	4607      	mov	r7, r0
 800512e:	460d      	mov	r5, r1
 8005130:	4614      	mov	r4, r2
 8005132:	d50e      	bpl.n	8005152 <_svfiprintf_r+0x32>
 8005134:	690b      	ldr	r3, [r1, #16]
 8005136:	b963      	cbnz	r3, 8005152 <_svfiprintf_r+0x32>
 8005138:	2140      	movs	r1, #64	; 0x40
 800513a:	f7ff ff0b 	bl	8004f54 <_malloc_r>
 800513e:	6028      	str	r0, [r5, #0]
 8005140:	6128      	str	r0, [r5, #16]
 8005142:	b920      	cbnz	r0, 800514e <_svfiprintf_r+0x2e>
 8005144:	230c      	movs	r3, #12
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	e0d0      	b.n	80052f0 <_svfiprintf_r+0x1d0>
 800514e:	2340      	movs	r3, #64	; 0x40
 8005150:	616b      	str	r3, [r5, #20]
 8005152:	2300      	movs	r3, #0
 8005154:	9309      	str	r3, [sp, #36]	; 0x24
 8005156:	2320      	movs	r3, #32
 8005158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800515c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005160:	2330      	movs	r3, #48	; 0x30
 8005162:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005308 <_svfiprintf_r+0x1e8>
 8005166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800516a:	f04f 0901 	mov.w	r9, #1
 800516e:	4623      	mov	r3, r4
 8005170:	469a      	mov	sl, r3
 8005172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005176:	b10a      	cbz	r2, 800517c <_svfiprintf_r+0x5c>
 8005178:	2a25      	cmp	r2, #37	; 0x25
 800517a:	d1f9      	bne.n	8005170 <_svfiprintf_r+0x50>
 800517c:	ebba 0b04 	subs.w	fp, sl, r4
 8005180:	d00b      	beq.n	800519a <_svfiprintf_r+0x7a>
 8005182:	465b      	mov	r3, fp
 8005184:	4622      	mov	r2, r4
 8005186:	4629      	mov	r1, r5
 8005188:	4638      	mov	r0, r7
 800518a:	f7ff ff6f 	bl	800506c <__ssputs_r>
 800518e:	3001      	adds	r0, #1
 8005190:	f000 80a9 	beq.w	80052e6 <_svfiprintf_r+0x1c6>
 8005194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005196:	445a      	add	r2, fp
 8005198:	9209      	str	r2, [sp, #36]	; 0x24
 800519a:	f89a 3000 	ldrb.w	r3, [sl]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80a1 	beq.w	80052e6 <_svfiprintf_r+0x1c6>
 80051a4:	2300      	movs	r3, #0
 80051a6:	f04f 32ff 	mov.w	r2, #4294967295
 80051aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051ae:	f10a 0a01 	add.w	sl, sl, #1
 80051b2:	9304      	str	r3, [sp, #16]
 80051b4:	9307      	str	r3, [sp, #28]
 80051b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051ba:	931a      	str	r3, [sp, #104]	; 0x68
 80051bc:	4654      	mov	r4, sl
 80051be:	2205      	movs	r2, #5
 80051c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c4:	4850      	ldr	r0, [pc, #320]	; (8005308 <_svfiprintf_r+0x1e8>)
 80051c6:	f7fa ffe3 	bl	8000190 <memchr>
 80051ca:	9a04      	ldr	r2, [sp, #16]
 80051cc:	b9d8      	cbnz	r0, 8005206 <_svfiprintf_r+0xe6>
 80051ce:	06d0      	lsls	r0, r2, #27
 80051d0:	bf44      	itt	mi
 80051d2:	2320      	movmi	r3, #32
 80051d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051d8:	0711      	lsls	r1, r2, #28
 80051da:	bf44      	itt	mi
 80051dc:	232b      	movmi	r3, #43	; 0x2b
 80051de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051e2:	f89a 3000 	ldrb.w	r3, [sl]
 80051e6:	2b2a      	cmp	r3, #42	; 0x2a
 80051e8:	d015      	beq.n	8005216 <_svfiprintf_r+0xf6>
 80051ea:	9a07      	ldr	r2, [sp, #28]
 80051ec:	4654      	mov	r4, sl
 80051ee:	2000      	movs	r0, #0
 80051f0:	f04f 0c0a 	mov.w	ip, #10
 80051f4:	4621      	mov	r1, r4
 80051f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051fa:	3b30      	subs	r3, #48	; 0x30
 80051fc:	2b09      	cmp	r3, #9
 80051fe:	d94d      	bls.n	800529c <_svfiprintf_r+0x17c>
 8005200:	b1b0      	cbz	r0, 8005230 <_svfiprintf_r+0x110>
 8005202:	9207      	str	r2, [sp, #28]
 8005204:	e014      	b.n	8005230 <_svfiprintf_r+0x110>
 8005206:	eba0 0308 	sub.w	r3, r0, r8
 800520a:	fa09 f303 	lsl.w	r3, r9, r3
 800520e:	4313      	orrs	r3, r2
 8005210:	9304      	str	r3, [sp, #16]
 8005212:	46a2      	mov	sl, r4
 8005214:	e7d2      	b.n	80051bc <_svfiprintf_r+0x9c>
 8005216:	9b03      	ldr	r3, [sp, #12]
 8005218:	1d19      	adds	r1, r3, #4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	9103      	str	r1, [sp, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	bfbb      	ittet	lt
 8005222:	425b      	neglt	r3, r3
 8005224:	f042 0202 	orrlt.w	r2, r2, #2
 8005228:	9307      	strge	r3, [sp, #28]
 800522a:	9307      	strlt	r3, [sp, #28]
 800522c:	bfb8      	it	lt
 800522e:	9204      	strlt	r2, [sp, #16]
 8005230:	7823      	ldrb	r3, [r4, #0]
 8005232:	2b2e      	cmp	r3, #46	; 0x2e
 8005234:	d10c      	bne.n	8005250 <_svfiprintf_r+0x130>
 8005236:	7863      	ldrb	r3, [r4, #1]
 8005238:	2b2a      	cmp	r3, #42	; 0x2a
 800523a:	d134      	bne.n	80052a6 <_svfiprintf_r+0x186>
 800523c:	9b03      	ldr	r3, [sp, #12]
 800523e:	1d1a      	adds	r2, r3, #4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	9203      	str	r2, [sp, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	bfb8      	it	lt
 8005248:	f04f 33ff 	movlt.w	r3, #4294967295
 800524c:	3402      	adds	r4, #2
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005318 <_svfiprintf_r+0x1f8>
 8005254:	7821      	ldrb	r1, [r4, #0]
 8005256:	2203      	movs	r2, #3
 8005258:	4650      	mov	r0, sl
 800525a:	f7fa ff99 	bl	8000190 <memchr>
 800525e:	b138      	cbz	r0, 8005270 <_svfiprintf_r+0x150>
 8005260:	9b04      	ldr	r3, [sp, #16]
 8005262:	eba0 000a 	sub.w	r0, r0, sl
 8005266:	2240      	movs	r2, #64	; 0x40
 8005268:	4082      	lsls	r2, r0
 800526a:	4313      	orrs	r3, r2
 800526c:	3401      	adds	r4, #1
 800526e:	9304      	str	r3, [sp, #16]
 8005270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005274:	4825      	ldr	r0, [pc, #148]	; (800530c <_svfiprintf_r+0x1ec>)
 8005276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800527a:	2206      	movs	r2, #6
 800527c:	f7fa ff88 	bl	8000190 <memchr>
 8005280:	2800      	cmp	r0, #0
 8005282:	d038      	beq.n	80052f6 <_svfiprintf_r+0x1d6>
 8005284:	4b22      	ldr	r3, [pc, #136]	; (8005310 <_svfiprintf_r+0x1f0>)
 8005286:	bb1b      	cbnz	r3, 80052d0 <_svfiprintf_r+0x1b0>
 8005288:	9b03      	ldr	r3, [sp, #12]
 800528a:	3307      	adds	r3, #7
 800528c:	f023 0307 	bic.w	r3, r3, #7
 8005290:	3308      	adds	r3, #8
 8005292:	9303      	str	r3, [sp, #12]
 8005294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005296:	4433      	add	r3, r6
 8005298:	9309      	str	r3, [sp, #36]	; 0x24
 800529a:	e768      	b.n	800516e <_svfiprintf_r+0x4e>
 800529c:	fb0c 3202 	mla	r2, ip, r2, r3
 80052a0:	460c      	mov	r4, r1
 80052a2:	2001      	movs	r0, #1
 80052a4:	e7a6      	b.n	80051f4 <_svfiprintf_r+0xd4>
 80052a6:	2300      	movs	r3, #0
 80052a8:	3401      	adds	r4, #1
 80052aa:	9305      	str	r3, [sp, #20]
 80052ac:	4619      	mov	r1, r3
 80052ae:	f04f 0c0a 	mov.w	ip, #10
 80052b2:	4620      	mov	r0, r4
 80052b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052b8:	3a30      	subs	r2, #48	; 0x30
 80052ba:	2a09      	cmp	r2, #9
 80052bc:	d903      	bls.n	80052c6 <_svfiprintf_r+0x1a6>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0c6      	beq.n	8005250 <_svfiprintf_r+0x130>
 80052c2:	9105      	str	r1, [sp, #20]
 80052c4:	e7c4      	b.n	8005250 <_svfiprintf_r+0x130>
 80052c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ca:	4604      	mov	r4, r0
 80052cc:	2301      	movs	r3, #1
 80052ce:	e7f0      	b.n	80052b2 <_svfiprintf_r+0x192>
 80052d0:	ab03      	add	r3, sp, #12
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	462a      	mov	r2, r5
 80052d6:	4b0f      	ldr	r3, [pc, #60]	; (8005314 <_svfiprintf_r+0x1f4>)
 80052d8:	a904      	add	r1, sp, #16
 80052da:	4638      	mov	r0, r7
 80052dc:	f3af 8000 	nop.w
 80052e0:	1c42      	adds	r2, r0, #1
 80052e2:	4606      	mov	r6, r0
 80052e4:	d1d6      	bne.n	8005294 <_svfiprintf_r+0x174>
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	065b      	lsls	r3, r3, #25
 80052ea:	f53f af2d 	bmi.w	8005148 <_svfiprintf_r+0x28>
 80052ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052f0:	b01d      	add	sp, #116	; 0x74
 80052f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f6:	ab03      	add	r3, sp, #12
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	462a      	mov	r2, r5
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <_svfiprintf_r+0x1f4>)
 80052fe:	a904      	add	r1, sp, #16
 8005300:	4638      	mov	r0, r7
 8005302:	f000 fa4b 	bl	800579c <_printf_i>
 8005306:	e7eb      	b.n	80052e0 <_svfiprintf_r+0x1c0>
 8005308:	080061f8 	.word	0x080061f8
 800530c:	08006202 	.word	0x08006202
 8005310:	00000000 	.word	0x00000000
 8005314:	0800506d 	.word	0x0800506d
 8005318:	080061fe 	.word	0x080061fe

0800531c <_sungetc_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	1c4b      	adds	r3, r1, #1
 8005320:	4614      	mov	r4, r2
 8005322:	d103      	bne.n	800532c <_sungetc_r+0x10>
 8005324:	f04f 35ff 	mov.w	r5, #4294967295
 8005328:	4628      	mov	r0, r5
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	8993      	ldrh	r3, [r2, #12]
 800532e:	f023 0320 	bic.w	r3, r3, #32
 8005332:	8193      	strh	r3, [r2, #12]
 8005334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005336:	6852      	ldr	r2, [r2, #4]
 8005338:	b2cd      	uxtb	r5, r1
 800533a:	b18b      	cbz	r3, 8005360 <_sungetc_r+0x44>
 800533c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800533e:	4293      	cmp	r3, r2
 8005340:	dd08      	ble.n	8005354 <_sungetc_r+0x38>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	1e5a      	subs	r2, r3, #1
 8005346:	6022      	str	r2, [r4, #0]
 8005348:	f803 5c01 	strb.w	r5, [r3, #-1]
 800534c:	6863      	ldr	r3, [r4, #4]
 800534e:	3301      	adds	r3, #1
 8005350:	6063      	str	r3, [r4, #4]
 8005352:	e7e9      	b.n	8005328 <_sungetc_r+0xc>
 8005354:	4621      	mov	r1, r4
 8005356:	f000 fcca 	bl	8005cee <__submore>
 800535a:	2800      	cmp	r0, #0
 800535c:	d0f1      	beq.n	8005342 <_sungetc_r+0x26>
 800535e:	e7e1      	b.n	8005324 <_sungetc_r+0x8>
 8005360:	6921      	ldr	r1, [r4, #16]
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	b151      	cbz	r1, 800537c <_sungetc_r+0x60>
 8005366:	4299      	cmp	r1, r3
 8005368:	d208      	bcs.n	800537c <_sungetc_r+0x60>
 800536a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800536e:	42a9      	cmp	r1, r5
 8005370:	d104      	bne.n	800537c <_sungetc_r+0x60>
 8005372:	3b01      	subs	r3, #1
 8005374:	3201      	adds	r2, #1
 8005376:	6023      	str	r3, [r4, #0]
 8005378:	6062      	str	r2, [r4, #4]
 800537a:	e7d5      	b.n	8005328 <_sungetc_r+0xc>
 800537c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005384:	6363      	str	r3, [r4, #52]	; 0x34
 8005386:	2303      	movs	r3, #3
 8005388:	63a3      	str	r3, [r4, #56]	; 0x38
 800538a:	4623      	mov	r3, r4
 800538c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	2301      	movs	r3, #1
 8005394:	e7dc      	b.n	8005350 <_sungetc_r+0x34>

08005396 <__ssrefill_r>:
 8005396:	b510      	push	{r4, lr}
 8005398:	460c      	mov	r4, r1
 800539a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800539c:	b169      	cbz	r1, 80053ba <__ssrefill_r+0x24>
 800539e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053a2:	4299      	cmp	r1, r3
 80053a4:	d001      	beq.n	80053aa <__ssrefill_r+0x14>
 80053a6:	f7ff fd69 	bl	8004e7c <_free_r>
 80053aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053ac:	6063      	str	r3, [r4, #4]
 80053ae:	2000      	movs	r0, #0
 80053b0:	6360      	str	r0, [r4, #52]	; 0x34
 80053b2:	b113      	cbz	r3, 80053ba <__ssrefill_r+0x24>
 80053b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80053b6:	6023      	str	r3, [r4, #0]
 80053b8:	bd10      	pop	{r4, pc}
 80053ba:	6923      	ldr	r3, [r4, #16]
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	2300      	movs	r3, #0
 80053c0:	6063      	str	r3, [r4, #4]
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	f043 0320 	orr.w	r3, r3, #32
 80053c8:	81a3      	strh	r3, [r4, #12]
 80053ca:	f04f 30ff 	mov.w	r0, #4294967295
 80053ce:	e7f3      	b.n	80053b8 <__ssrefill_r+0x22>

080053d0 <__ssvfiscanf_r>:
 80053d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d4:	460c      	mov	r4, r1
 80053d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80053da:	2100      	movs	r1, #0
 80053dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80053e0:	49a6      	ldr	r1, [pc, #664]	; (800567c <__ssvfiscanf_r+0x2ac>)
 80053e2:	91a0      	str	r1, [sp, #640]	; 0x280
 80053e4:	f10d 0804 	add.w	r8, sp, #4
 80053e8:	49a5      	ldr	r1, [pc, #660]	; (8005680 <__ssvfiscanf_r+0x2b0>)
 80053ea:	4fa6      	ldr	r7, [pc, #664]	; (8005684 <__ssvfiscanf_r+0x2b4>)
 80053ec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005688 <__ssvfiscanf_r+0x2b8>
 80053f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80053f4:	4606      	mov	r6, r0
 80053f6:	91a1      	str	r1, [sp, #644]	; 0x284
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	7813      	ldrb	r3, [r2, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 815a 	beq.w	80056b6 <__ssvfiscanf_r+0x2e6>
 8005402:	5cf9      	ldrb	r1, [r7, r3]
 8005404:	f011 0108 	ands.w	r1, r1, #8
 8005408:	f102 0501 	add.w	r5, r2, #1
 800540c:	d019      	beq.n	8005442 <__ssvfiscanf_r+0x72>
 800540e:	6863      	ldr	r3, [r4, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	dd0f      	ble.n	8005434 <__ssvfiscanf_r+0x64>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	781a      	ldrb	r2, [r3, #0]
 8005418:	5cba      	ldrb	r2, [r7, r2]
 800541a:	0712      	lsls	r2, r2, #28
 800541c:	d401      	bmi.n	8005422 <__ssvfiscanf_r+0x52>
 800541e:	462a      	mov	r2, r5
 8005420:	e7eb      	b.n	80053fa <__ssvfiscanf_r+0x2a>
 8005422:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005424:	3201      	adds	r2, #1
 8005426:	9245      	str	r2, [sp, #276]	; 0x114
 8005428:	6862      	ldr	r2, [r4, #4]
 800542a:	3301      	adds	r3, #1
 800542c:	3a01      	subs	r2, #1
 800542e:	6062      	str	r2, [r4, #4]
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	e7ec      	b.n	800540e <__ssvfiscanf_r+0x3e>
 8005434:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005436:	4621      	mov	r1, r4
 8005438:	4630      	mov	r0, r6
 800543a:	4798      	blx	r3
 800543c:	2800      	cmp	r0, #0
 800543e:	d0e9      	beq.n	8005414 <__ssvfiscanf_r+0x44>
 8005440:	e7ed      	b.n	800541e <__ssvfiscanf_r+0x4e>
 8005442:	2b25      	cmp	r3, #37	; 0x25
 8005444:	d012      	beq.n	800546c <__ssvfiscanf_r+0x9c>
 8005446:	469a      	mov	sl, r3
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f340 8091 	ble.w	8005572 <__ssvfiscanf_r+0x1a2>
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	7813      	ldrb	r3, [r2, #0]
 8005454:	4553      	cmp	r3, sl
 8005456:	f040 812e 	bne.w	80056b6 <__ssvfiscanf_r+0x2e6>
 800545a:	6863      	ldr	r3, [r4, #4]
 800545c:	3b01      	subs	r3, #1
 800545e:	6063      	str	r3, [r4, #4]
 8005460:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005462:	3201      	adds	r2, #1
 8005464:	3301      	adds	r3, #1
 8005466:	6022      	str	r2, [r4, #0]
 8005468:	9345      	str	r3, [sp, #276]	; 0x114
 800546a:	e7d8      	b.n	800541e <__ssvfiscanf_r+0x4e>
 800546c:	9141      	str	r1, [sp, #260]	; 0x104
 800546e:	9143      	str	r1, [sp, #268]	; 0x10c
 8005470:	7853      	ldrb	r3, [r2, #1]
 8005472:	2b2a      	cmp	r3, #42	; 0x2a
 8005474:	bf02      	ittt	eq
 8005476:	2310      	moveq	r3, #16
 8005478:	1c95      	addeq	r5, r2, #2
 800547a:	9341      	streq	r3, [sp, #260]	; 0x104
 800547c:	220a      	movs	r2, #10
 800547e:	46aa      	mov	sl, r5
 8005480:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005484:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005488:	2b09      	cmp	r3, #9
 800548a:	d91c      	bls.n	80054c6 <__ssvfiscanf_r+0xf6>
 800548c:	487e      	ldr	r0, [pc, #504]	; (8005688 <__ssvfiscanf_r+0x2b8>)
 800548e:	2203      	movs	r2, #3
 8005490:	f7fa fe7e 	bl	8000190 <memchr>
 8005494:	b138      	cbz	r0, 80054a6 <__ssvfiscanf_r+0xd6>
 8005496:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005498:	eba0 0009 	sub.w	r0, r0, r9
 800549c:	2301      	movs	r3, #1
 800549e:	4083      	lsls	r3, r0
 80054a0:	4313      	orrs	r3, r2
 80054a2:	9341      	str	r3, [sp, #260]	; 0x104
 80054a4:	4655      	mov	r5, sl
 80054a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80054aa:	2b78      	cmp	r3, #120	; 0x78
 80054ac:	d806      	bhi.n	80054bc <__ssvfiscanf_r+0xec>
 80054ae:	2b57      	cmp	r3, #87	; 0x57
 80054b0:	d810      	bhi.n	80054d4 <__ssvfiscanf_r+0x104>
 80054b2:	2b25      	cmp	r3, #37	; 0x25
 80054b4:	d0c7      	beq.n	8005446 <__ssvfiscanf_r+0x76>
 80054b6:	d857      	bhi.n	8005568 <__ssvfiscanf_r+0x198>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d065      	beq.n	8005588 <__ssvfiscanf_r+0x1b8>
 80054bc:	2303      	movs	r3, #3
 80054be:	9347      	str	r3, [sp, #284]	; 0x11c
 80054c0:	230a      	movs	r3, #10
 80054c2:	9342      	str	r3, [sp, #264]	; 0x108
 80054c4:	e076      	b.n	80055b4 <__ssvfiscanf_r+0x1e4>
 80054c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80054c8:	fb02 1103 	mla	r1, r2, r3, r1
 80054cc:	3930      	subs	r1, #48	; 0x30
 80054ce:	9143      	str	r1, [sp, #268]	; 0x10c
 80054d0:	4655      	mov	r5, sl
 80054d2:	e7d4      	b.n	800547e <__ssvfiscanf_r+0xae>
 80054d4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80054d8:	2a20      	cmp	r2, #32
 80054da:	d8ef      	bhi.n	80054bc <__ssvfiscanf_r+0xec>
 80054dc:	a101      	add	r1, pc, #4	; (adr r1, 80054e4 <__ssvfiscanf_r+0x114>)
 80054de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	08005597 	.word	0x08005597
 80054e8:	080054bd 	.word	0x080054bd
 80054ec:	080054bd 	.word	0x080054bd
 80054f0:	080055f5 	.word	0x080055f5
 80054f4:	080054bd 	.word	0x080054bd
 80054f8:	080054bd 	.word	0x080054bd
 80054fc:	080054bd 	.word	0x080054bd
 8005500:	080054bd 	.word	0x080054bd
 8005504:	080054bd 	.word	0x080054bd
 8005508:	080054bd 	.word	0x080054bd
 800550c:	080054bd 	.word	0x080054bd
 8005510:	0800560b 	.word	0x0800560b
 8005514:	080055f1 	.word	0x080055f1
 8005518:	0800556f 	.word	0x0800556f
 800551c:	0800556f 	.word	0x0800556f
 8005520:	0800556f 	.word	0x0800556f
 8005524:	080054bd 	.word	0x080054bd
 8005528:	080055ad 	.word	0x080055ad
 800552c:	080054bd 	.word	0x080054bd
 8005530:	080054bd 	.word	0x080054bd
 8005534:	080054bd 	.word	0x080054bd
 8005538:	080054bd 	.word	0x080054bd
 800553c:	0800561b 	.word	0x0800561b
 8005540:	080055e9 	.word	0x080055e9
 8005544:	0800558f 	.word	0x0800558f
 8005548:	080054bd 	.word	0x080054bd
 800554c:	080054bd 	.word	0x080054bd
 8005550:	08005617 	.word	0x08005617
 8005554:	080054bd 	.word	0x080054bd
 8005558:	080055f1 	.word	0x080055f1
 800555c:	080054bd 	.word	0x080054bd
 8005560:	080054bd 	.word	0x080054bd
 8005564:	08005597 	.word	0x08005597
 8005568:	3b45      	subs	r3, #69	; 0x45
 800556a:	2b02      	cmp	r3, #2
 800556c:	d8a6      	bhi.n	80054bc <__ssvfiscanf_r+0xec>
 800556e:	2305      	movs	r3, #5
 8005570:	e01f      	b.n	80055b2 <__ssvfiscanf_r+0x1e2>
 8005572:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005574:	4621      	mov	r1, r4
 8005576:	4630      	mov	r0, r6
 8005578:	4798      	blx	r3
 800557a:	2800      	cmp	r0, #0
 800557c:	f43f af68 	beq.w	8005450 <__ssvfiscanf_r+0x80>
 8005580:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005582:	2800      	cmp	r0, #0
 8005584:	f040 808d 	bne.w	80056a2 <__ssvfiscanf_r+0x2d2>
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	e08f      	b.n	80056ae <__ssvfiscanf_r+0x2de>
 800558e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005590:	f042 0220 	orr.w	r2, r2, #32
 8005594:	9241      	str	r2, [sp, #260]	; 0x104
 8005596:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559c:	9241      	str	r2, [sp, #260]	; 0x104
 800559e:	2210      	movs	r2, #16
 80055a0:	2b6f      	cmp	r3, #111	; 0x6f
 80055a2:	9242      	str	r2, [sp, #264]	; 0x108
 80055a4:	bf34      	ite	cc
 80055a6:	2303      	movcc	r3, #3
 80055a8:	2304      	movcs	r3, #4
 80055aa:	e002      	b.n	80055b2 <__ssvfiscanf_r+0x1e2>
 80055ac:	2300      	movs	r3, #0
 80055ae:	9342      	str	r3, [sp, #264]	; 0x108
 80055b0:	2303      	movs	r3, #3
 80055b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80055b4:	6863      	ldr	r3, [r4, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	dd3d      	ble.n	8005636 <__ssvfiscanf_r+0x266>
 80055ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80055bc:	0659      	lsls	r1, r3, #25
 80055be:	d404      	bmi.n	80055ca <__ssvfiscanf_r+0x1fa>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	781a      	ldrb	r2, [r3, #0]
 80055c4:	5cba      	ldrb	r2, [r7, r2]
 80055c6:	0712      	lsls	r2, r2, #28
 80055c8:	d43c      	bmi.n	8005644 <__ssvfiscanf_r+0x274>
 80055ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	dc4b      	bgt.n	8005668 <__ssvfiscanf_r+0x298>
 80055d0:	466b      	mov	r3, sp
 80055d2:	4622      	mov	r2, r4
 80055d4:	a941      	add	r1, sp, #260	; 0x104
 80055d6:	4630      	mov	r0, r6
 80055d8:	f000 fa02 	bl	80059e0 <_scanf_chars>
 80055dc:	2801      	cmp	r0, #1
 80055de:	d06a      	beq.n	80056b6 <__ssvfiscanf_r+0x2e6>
 80055e0:	2802      	cmp	r0, #2
 80055e2:	f47f af1c 	bne.w	800541e <__ssvfiscanf_r+0x4e>
 80055e6:	e7cb      	b.n	8005580 <__ssvfiscanf_r+0x1b0>
 80055e8:	2308      	movs	r3, #8
 80055ea:	9342      	str	r3, [sp, #264]	; 0x108
 80055ec:	2304      	movs	r3, #4
 80055ee:	e7e0      	b.n	80055b2 <__ssvfiscanf_r+0x1e2>
 80055f0:	220a      	movs	r2, #10
 80055f2:	e7d5      	b.n	80055a0 <__ssvfiscanf_r+0x1d0>
 80055f4:	4629      	mov	r1, r5
 80055f6:	4640      	mov	r0, r8
 80055f8:	f000 fb40 	bl	8005c7c <__sccl>
 80055fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80055fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005602:	9341      	str	r3, [sp, #260]	; 0x104
 8005604:	4605      	mov	r5, r0
 8005606:	2301      	movs	r3, #1
 8005608:	e7d3      	b.n	80055b2 <__ssvfiscanf_r+0x1e2>
 800560a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800560c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005610:	9341      	str	r3, [sp, #260]	; 0x104
 8005612:	2300      	movs	r3, #0
 8005614:	e7cd      	b.n	80055b2 <__ssvfiscanf_r+0x1e2>
 8005616:	2302      	movs	r3, #2
 8005618:	e7cb      	b.n	80055b2 <__ssvfiscanf_r+0x1e2>
 800561a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800561c:	06c3      	lsls	r3, r0, #27
 800561e:	f53f aefe 	bmi.w	800541e <__ssvfiscanf_r+0x4e>
 8005622:	9b00      	ldr	r3, [sp, #0]
 8005624:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005626:	1d19      	adds	r1, r3, #4
 8005628:	9100      	str	r1, [sp, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	07c0      	lsls	r0, r0, #31
 800562e:	bf4c      	ite	mi
 8005630:	801a      	strhmi	r2, [r3, #0]
 8005632:	601a      	strpl	r2, [r3, #0]
 8005634:	e6f3      	b.n	800541e <__ssvfiscanf_r+0x4e>
 8005636:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005638:	4621      	mov	r1, r4
 800563a:	4630      	mov	r0, r6
 800563c:	4798      	blx	r3
 800563e:	2800      	cmp	r0, #0
 8005640:	d0bb      	beq.n	80055ba <__ssvfiscanf_r+0x1ea>
 8005642:	e79d      	b.n	8005580 <__ssvfiscanf_r+0x1b0>
 8005644:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005646:	3201      	adds	r2, #1
 8005648:	9245      	str	r2, [sp, #276]	; 0x114
 800564a:	6862      	ldr	r2, [r4, #4]
 800564c:	3a01      	subs	r2, #1
 800564e:	2a00      	cmp	r2, #0
 8005650:	6062      	str	r2, [r4, #4]
 8005652:	dd02      	ble.n	800565a <__ssvfiscanf_r+0x28a>
 8005654:	3301      	adds	r3, #1
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	e7b2      	b.n	80055c0 <__ssvfiscanf_r+0x1f0>
 800565a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800565c:	4621      	mov	r1, r4
 800565e:	4630      	mov	r0, r6
 8005660:	4798      	blx	r3
 8005662:	2800      	cmp	r0, #0
 8005664:	d0ac      	beq.n	80055c0 <__ssvfiscanf_r+0x1f0>
 8005666:	e78b      	b.n	8005580 <__ssvfiscanf_r+0x1b0>
 8005668:	2b04      	cmp	r3, #4
 800566a:	dc0f      	bgt.n	800568c <__ssvfiscanf_r+0x2bc>
 800566c:	466b      	mov	r3, sp
 800566e:	4622      	mov	r2, r4
 8005670:	a941      	add	r1, sp, #260	; 0x104
 8005672:	4630      	mov	r0, r6
 8005674:	f000 fa0e 	bl	8005a94 <_scanf_i>
 8005678:	e7b0      	b.n	80055dc <__ssvfiscanf_r+0x20c>
 800567a:	bf00      	nop
 800567c:	0800531d 	.word	0x0800531d
 8005680:	08005397 	.word	0x08005397
 8005684:	08006247 	.word	0x08006247
 8005688:	080061fe 	.word	0x080061fe
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <__ssvfiscanf_r+0x2ec>)
 800568e:	2b00      	cmp	r3, #0
 8005690:	f43f aec5 	beq.w	800541e <__ssvfiscanf_r+0x4e>
 8005694:	466b      	mov	r3, sp
 8005696:	4622      	mov	r2, r4
 8005698:	a941      	add	r1, sp, #260	; 0x104
 800569a:	4630      	mov	r0, r6
 800569c:	f3af 8000 	nop.w
 80056a0:	e79c      	b.n	80055dc <__ssvfiscanf_r+0x20c>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80056a8:	bf18      	it	ne
 80056aa:	f04f 30ff 	movne.w	r0, #4294967295
 80056ae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80056b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80056b8:	e7f9      	b.n	80056ae <__ssvfiscanf_r+0x2de>
 80056ba:	bf00      	nop
 80056bc:	00000000 	.word	0x00000000

080056c0 <_printf_common>:
 80056c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	4616      	mov	r6, r2
 80056c6:	4699      	mov	r9, r3
 80056c8:	688a      	ldr	r2, [r1, #8]
 80056ca:	690b      	ldr	r3, [r1, #16]
 80056cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056d0:	4293      	cmp	r3, r2
 80056d2:	bfb8      	it	lt
 80056d4:	4613      	movlt	r3, r2
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056dc:	4607      	mov	r7, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	b10a      	cbz	r2, 80056e6 <_printf_common+0x26>
 80056e2:	3301      	adds	r3, #1
 80056e4:	6033      	str	r3, [r6, #0]
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	0699      	lsls	r1, r3, #26
 80056ea:	bf42      	ittt	mi
 80056ec:	6833      	ldrmi	r3, [r6, #0]
 80056ee:	3302      	addmi	r3, #2
 80056f0:	6033      	strmi	r3, [r6, #0]
 80056f2:	6825      	ldr	r5, [r4, #0]
 80056f4:	f015 0506 	ands.w	r5, r5, #6
 80056f8:	d106      	bne.n	8005708 <_printf_common+0x48>
 80056fa:	f104 0a19 	add.w	sl, r4, #25
 80056fe:	68e3      	ldr	r3, [r4, #12]
 8005700:	6832      	ldr	r2, [r6, #0]
 8005702:	1a9b      	subs	r3, r3, r2
 8005704:	42ab      	cmp	r3, r5
 8005706:	dc26      	bgt.n	8005756 <_printf_common+0x96>
 8005708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800570c:	1e13      	subs	r3, r2, #0
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	bf18      	it	ne
 8005712:	2301      	movne	r3, #1
 8005714:	0692      	lsls	r2, r2, #26
 8005716:	d42b      	bmi.n	8005770 <_printf_common+0xb0>
 8005718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800571c:	4649      	mov	r1, r9
 800571e:	4638      	mov	r0, r7
 8005720:	47c0      	blx	r8
 8005722:	3001      	adds	r0, #1
 8005724:	d01e      	beq.n	8005764 <_printf_common+0xa4>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	6922      	ldr	r2, [r4, #16]
 800572a:	f003 0306 	and.w	r3, r3, #6
 800572e:	2b04      	cmp	r3, #4
 8005730:	bf02      	ittt	eq
 8005732:	68e5      	ldreq	r5, [r4, #12]
 8005734:	6833      	ldreq	r3, [r6, #0]
 8005736:	1aed      	subeq	r5, r5, r3
 8005738:	68a3      	ldr	r3, [r4, #8]
 800573a:	bf0c      	ite	eq
 800573c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005740:	2500      	movne	r5, #0
 8005742:	4293      	cmp	r3, r2
 8005744:	bfc4      	itt	gt
 8005746:	1a9b      	subgt	r3, r3, r2
 8005748:	18ed      	addgt	r5, r5, r3
 800574a:	2600      	movs	r6, #0
 800574c:	341a      	adds	r4, #26
 800574e:	42b5      	cmp	r5, r6
 8005750:	d11a      	bne.n	8005788 <_printf_common+0xc8>
 8005752:	2000      	movs	r0, #0
 8005754:	e008      	b.n	8005768 <_printf_common+0xa8>
 8005756:	2301      	movs	r3, #1
 8005758:	4652      	mov	r2, sl
 800575a:	4649      	mov	r1, r9
 800575c:	4638      	mov	r0, r7
 800575e:	47c0      	blx	r8
 8005760:	3001      	adds	r0, #1
 8005762:	d103      	bne.n	800576c <_printf_common+0xac>
 8005764:	f04f 30ff 	mov.w	r0, #4294967295
 8005768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576c:	3501      	adds	r5, #1
 800576e:	e7c6      	b.n	80056fe <_printf_common+0x3e>
 8005770:	18e1      	adds	r1, r4, r3
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	2030      	movs	r0, #48	; 0x30
 8005776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800577a:	4422      	add	r2, r4
 800577c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005784:	3302      	adds	r3, #2
 8005786:	e7c7      	b.n	8005718 <_printf_common+0x58>
 8005788:	2301      	movs	r3, #1
 800578a:	4622      	mov	r2, r4
 800578c:	4649      	mov	r1, r9
 800578e:	4638      	mov	r0, r7
 8005790:	47c0      	blx	r8
 8005792:	3001      	adds	r0, #1
 8005794:	d0e6      	beq.n	8005764 <_printf_common+0xa4>
 8005796:	3601      	adds	r6, #1
 8005798:	e7d9      	b.n	800574e <_printf_common+0x8e>
	...

0800579c <_printf_i>:
 800579c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a0:	7e0f      	ldrb	r7, [r1, #24]
 80057a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057a4:	2f78      	cmp	r7, #120	; 0x78
 80057a6:	4691      	mov	r9, r2
 80057a8:	4680      	mov	r8, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	469a      	mov	sl, r3
 80057ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057b2:	d807      	bhi.n	80057c4 <_printf_i+0x28>
 80057b4:	2f62      	cmp	r7, #98	; 0x62
 80057b6:	d80a      	bhi.n	80057ce <_printf_i+0x32>
 80057b8:	2f00      	cmp	r7, #0
 80057ba:	f000 80d4 	beq.w	8005966 <_printf_i+0x1ca>
 80057be:	2f58      	cmp	r7, #88	; 0x58
 80057c0:	f000 80c0 	beq.w	8005944 <_printf_i+0x1a8>
 80057c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057cc:	e03a      	b.n	8005844 <_printf_i+0xa8>
 80057ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057d2:	2b15      	cmp	r3, #21
 80057d4:	d8f6      	bhi.n	80057c4 <_printf_i+0x28>
 80057d6:	a101      	add	r1, pc, #4	; (adr r1, 80057dc <_printf_i+0x40>)
 80057d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057dc:	08005835 	.word	0x08005835
 80057e0:	08005849 	.word	0x08005849
 80057e4:	080057c5 	.word	0x080057c5
 80057e8:	080057c5 	.word	0x080057c5
 80057ec:	080057c5 	.word	0x080057c5
 80057f0:	080057c5 	.word	0x080057c5
 80057f4:	08005849 	.word	0x08005849
 80057f8:	080057c5 	.word	0x080057c5
 80057fc:	080057c5 	.word	0x080057c5
 8005800:	080057c5 	.word	0x080057c5
 8005804:	080057c5 	.word	0x080057c5
 8005808:	0800594d 	.word	0x0800594d
 800580c:	08005875 	.word	0x08005875
 8005810:	08005907 	.word	0x08005907
 8005814:	080057c5 	.word	0x080057c5
 8005818:	080057c5 	.word	0x080057c5
 800581c:	0800596f 	.word	0x0800596f
 8005820:	080057c5 	.word	0x080057c5
 8005824:	08005875 	.word	0x08005875
 8005828:	080057c5 	.word	0x080057c5
 800582c:	080057c5 	.word	0x080057c5
 8005830:	0800590f 	.word	0x0800590f
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	1d1a      	adds	r2, r3, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	602a      	str	r2, [r5, #0]
 800583c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005844:	2301      	movs	r3, #1
 8005846:	e09f      	b.n	8005988 <_printf_i+0x1ec>
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	682b      	ldr	r3, [r5, #0]
 800584c:	0607      	lsls	r7, r0, #24
 800584e:	f103 0104 	add.w	r1, r3, #4
 8005852:	6029      	str	r1, [r5, #0]
 8005854:	d501      	bpl.n	800585a <_printf_i+0xbe>
 8005856:	681e      	ldr	r6, [r3, #0]
 8005858:	e003      	b.n	8005862 <_printf_i+0xc6>
 800585a:	0646      	lsls	r6, r0, #25
 800585c:	d5fb      	bpl.n	8005856 <_printf_i+0xba>
 800585e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005862:	2e00      	cmp	r6, #0
 8005864:	da03      	bge.n	800586e <_printf_i+0xd2>
 8005866:	232d      	movs	r3, #45	; 0x2d
 8005868:	4276      	negs	r6, r6
 800586a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586e:	485a      	ldr	r0, [pc, #360]	; (80059d8 <_printf_i+0x23c>)
 8005870:	230a      	movs	r3, #10
 8005872:	e012      	b.n	800589a <_printf_i+0xfe>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	6820      	ldr	r0, [r4, #0]
 8005878:	1d19      	adds	r1, r3, #4
 800587a:	6029      	str	r1, [r5, #0]
 800587c:	0605      	lsls	r5, r0, #24
 800587e:	d501      	bpl.n	8005884 <_printf_i+0xe8>
 8005880:	681e      	ldr	r6, [r3, #0]
 8005882:	e002      	b.n	800588a <_printf_i+0xee>
 8005884:	0641      	lsls	r1, r0, #25
 8005886:	d5fb      	bpl.n	8005880 <_printf_i+0xe4>
 8005888:	881e      	ldrh	r6, [r3, #0]
 800588a:	4853      	ldr	r0, [pc, #332]	; (80059d8 <_printf_i+0x23c>)
 800588c:	2f6f      	cmp	r7, #111	; 0x6f
 800588e:	bf0c      	ite	eq
 8005890:	2308      	moveq	r3, #8
 8005892:	230a      	movne	r3, #10
 8005894:	2100      	movs	r1, #0
 8005896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800589a:	6865      	ldr	r5, [r4, #4]
 800589c:	60a5      	str	r5, [r4, #8]
 800589e:	2d00      	cmp	r5, #0
 80058a0:	bfa2      	ittt	ge
 80058a2:	6821      	ldrge	r1, [r4, #0]
 80058a4:	f021 0104 	bicge.w	r1, r1, #4
 80058a8:	6021      	strge	r1, [r4, #0]
 80058aa:	b90e      	cbnz	r6, 80058b0 <_printf_i+0x114>
 80058ac:	2d00      	cmp	r5, #0
 80058ae:	d04b      	beq.n	8005948 <_printf_i+0x1ac>
 80058b0:	4615      	mov	r5, r2
 80058b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80058b6:	fb03 6711 	mls	r7, r3, r1, r6
 80058ba:	5dc7      	ldrb	r7, [r0, r7]
 80058bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058c0:	4637      	mov	r7, r6
 80058c2:	42bb      	cmp	r3, r7
 80058c4:	460e      	mov	r6, r1
 80058c6:	d9f4      	bls.n	80058b2 <_printf_i+0x116>
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d10b      	bne.n	80058e4 <_printf_i+0x148>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	07de      	lsls	r6, r3, #31
 80058d0:	d508      	bpl.n	80058e4 <_printf_i+0x148>
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	6861      	ldr	r1, [r4, #4]
 80058d6:	4299      	cmp	r1, r3
 80058d8:	bfde      	ittt	le
 80058da:	2330      	movle	r3, #48	; 0x30
 80058dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058e4:	1b52      	subs	r2, r2, r5
 80058e6:	6122      	str	r2, [r4, #16]
 80058e8:	f8cd a000 	str.w	sl, [sp]
 80058ec:	464b      	mov	r3, r9
 80058ee:	aa03      	add	r2, sp, #12
 80058f0:	4621      	mov	r1, r4
 80058f2:	4640      	mov	r0, r8
 80058f4:	f7ff fee4 	bl	80056c0 <_printf_common>
 80058f8:	3001      	adds	r0, #1
 80058fa:	d14a      	bne.n	8005992 <_printf_i+0x1f6>
 80058fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005900:	b004      	add	sp, #16
 8005902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f043 0320 	orr.w	r3, r3, #32
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	4833      	ldr	r0, [pc, #204]	; (80059dc <_printf_i+0x240>)
 8005910:	2778      	movs	r7, #120	; 0x78
 8005912:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	6829      	ldr	r1, [r5, #0]
 800591a:	061f      	lsls	r7, r3, #24
 800591c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005920:	d402      	bmi.n	8005928 <_printf_i+0x18c>
 8005922:	065f      	lsls	r7, r3, #25
 8005924:	bf48      	it	mi
 8005926:	b2b6      	uxthmi	r6, r6
 8005928:	07df      	lsls	r7, r3, #31
 800592a:	bf48      	it	mi
 800592c:	f043 0320 	orrmi.w	r3, r3, #32
 8005930:	6029      	str	r1, [r5, #0]
 8005932:	bf48      	it	mi
 8005934:	6023      	strmi	r3, [r4, #0]
 8005936:	b91e      	cbnz	r6, 8005940 <_printf_i+0x1a4>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	f023 0320 	bic.w	r3, r3, #32
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	2310      	movs	r3, #16
 8005942:	e7a7      	b.n	8005894 <_printf_i+0xf8>
 8005944:	4824      	ldr	r0, [pc, #144]	; (80059d8 <_printf_i+0x23c>)
 8005946:	e7e4      	b.n	8005912 <_printf_i+0x176>
 8005948:	4615      	mov	r5, r2
 800594a:	e7bd      	b.n	80058c8 <_printf_i+0x12c>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	6826      	ldr	r6, [r4, #0]
 8005950:	6961      	ldr	r1, [r4, #20]
 8005952:	1d18      	adds	r0, r3, #4
 8005954:	6028      	str	r0, [r5, #0]
 8005956:	0635      	lsls	r5, r6, #24
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	d501      	bpl.n	8005960 <_printf_i+0x1c4>
 800595c:	6019      	str	r1, [r3, #0]
 800595e:	e002      	b.n	8005966 <_printf_i+0x1ca>
 8005960:	0670      	lsls	r0, r6, #25
 8005962:	d5fb      	bpl.n	800595c <_printf_i+0x1c0>
 8005964:	8019      	strh	r1, [r3, #0]
 8005966:	2300      	movs	r3, #0
 8005968:	6123      	str	r3, [r4, #16]
 800596a:	4615      	mov	r5, r2
 800596c:	e7bc      	b.n	80058e8 <_printf_i+0x14c>
 800596e:	682b      	ldr	r3, [r5, #0]
 8005970:	1d1a      	adds	r2, r3, #4
 8005972:	602a      	str	r2, [r5, #0]
 8005974:	681d      	ldr	r5, [r3, #0]
 8005976:	6862      	ldr	r2, [r4, #4]
 8005978:	2100      	movs	r1, #0
 800597a:	4628      	mov	r0, r5
 800597c:	f7fa fc08 	bl	8000190 <memchr>
 8005980:	b108      	cbz	r0, 8005986 <_printf_i+0x1ea>
 8005982:	1b40      	subs	r0, r0, r5
 8005984:	6060      	str	r0, [r4, #4]
 8005986:	6863      	ldr	r3, [r4, #4]
 8005988:	6123      	str	r3, [r4, #16]
 800598a:	2300      	movs	r3, #0
 800598c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005990:	e7aa      	b.n	80058e8 <_printf_i+0x14c>
 8005992:	6923      	ldr	r3, [r4, #16]
 8005994:	462a      	mov	r2, r5
 8005996:	4649      	mov	r1, r9
 8005998:	4640      	mov	r0, r8
 800599a:	47d0      	blx	sl
 800599c:	3001      	adds	r0, #1
 800599e:	d0ad      	beq.n	80058fc <_printf_i+0x160>
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	079b      	lsls	r3, r3, #30
 80059a4:	d413      	bmi.n	80059ce <_printf_i+0x232>
 80059a6:	68e0      	ldr	r0, [r4, #12]
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	4298      	cmp	r0, r3
 80059ac:	bfb8      	it	lt
 80059ae:	4618      	movlt	r0, r3
 80059b0:	e7a6      	b.n	8005900 <_printf_i+0x164>
 80059b2:	2301      	movs	r3, #1
 80059b4:	4632      	mov	r2, r6
 80059b6:	4649      	mov	r1, r9
 80059b8:	4640      	mov	r0, r8
 80059ba:	47d0      	blx	sl
 80059bc:	3001      	adds	r0, #1
 80059be:	d09d      	beq.n	80058fc <_printf_i+0x160>
 80059c0:	3501      	adds	r5, #1
 80059c2:	68e3      	ldr	r3, [r4, #12]
 80059c4:	9903      	ldr	r1, [sp, #12]
 80059c6:	1a5b      	subs	r3, r3, r1
 80059c8:	42ab      	cmp	r3, r5
 80059ca:	dcf2      	bgt.n	80059b2 <_printf_i+0x216>
 80059cc:	e7eb      	b.n	80059a6 <_printf_i+0x20a>
 80059ce:	2500      	movs	r5, #0
 80059d0:	f104 0619 	add.w	r6, r4, #25
 80059d4:	e7f5      	b.n	80059c2 <_printf_i+0x226>
 80059d6:	bf00      	nop
 80059d8:	08006209 	.word	0x08006209
 80059dc:	0800621a 	.word	0x0800621a

080059e0 <_scanf_chars>:
 80059e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e4:	4615      	mov	r5, r2
 80059e6:	688a      	ldr	r2, [r1, #8]
 80059e8:	4680      	mov	r8, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	b932      	cbnz	r2, 80059fc <_scanf_chars+0x1c>
 80059ee:	698a      	ldr	r2, [r1, #24]
 80059f0:	2a00      	cmp	r2, #0
 80059f2:	bf0c      	ite	eq
 80059f4:	2201      	moveq	r2, #1
 80059f6:	f04f 32ff 	movne.w	r2, #4294967295
 80059fa:	608a      	str	r2, [r1, #8]
 80059fc:	6822      	ldr	r2, [r4, #0]
 80059fe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8005a90 <_scanf_chars+0xb0>
 8005a02:	06d1      	lsls	r1, r2, #27
 8005a04:	bf5f      	itttt	pl
 8005a06:	681a      	ldrpl	r2, [r3, #0]
 8005a08:	1d11      	addpl	r1, r2, #4
 8005a0a:	6019      	strpl	r1, [r3, #0]
 8005a0c:	6816      	ldrpl	r6, [r2, #0]
 8005a0e:	2700      	movs	r7, #0
 8005a10:	69a0      	ldr	r0, [r4, #24]
 8005a12:	b188      	cbz	r0, 8005a38 <_scanf_chars+0x58>
 8005a14:	2801      	cmp	r0, #1
 8005a16:	d107      	bne.n	8005a28 <_scanf_chars+0x48>
 8005a18:	682a      	ldr	r2, [r5, #0]
 8005a1a:	7811      	ldrb	r1, [r2, #0]
 8005a1c:	6962      	ldr	r2, [r4, #20]
 8005a1e:	5c52      	ldrb	r2, [r2, r1]
 8005a20:	b952      	cbnz	r2, 8005a38 <_scanf_chars+0x58>
 8005a22:	2f00      	cmp	r7, #0
 8005a24:	d031      	beq.n	8005a8a <_scanf_chars+0xaa>
 8005a26:	e022      	b.n	8005a6e <_scanf_chars+0x8e>
 8005a28:	2802      	cmp	r0, #2
 8005a2a:	d120      	bne.n	8005a6e <_scanf_chars+0x8e>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005a34:	071b      	lsls	r3, r3, #28
 8005a36:	d41a      	bmi.n	8005a6e <_scanf_chars+0x8e>
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	06da      	lsls	r2, r3, #27
 8005a3c:	bf5e      	ittt	pl
 8005a3e:	682b      	ldrpl	r3, [r5, #0]
 8005a40:	781b      	ldrbpl	r3, [r3, #0]
 8005a42:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005a46:	682a      	ldr	r2, [r5, #0]
 8005a48:	686b      	ldr	r3, [r5, #4]
 8005a4a:	3201      	adds	r2, #1
 8005a4c:	602a      	str	r2, [r5, #0]
 8005a4e:	68a2      	ldr	r2, [r4, #8]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	3a01      	subs	r2, #1
 8005a54:	606b      	str	r3, [r5, #4]
 8005a56:	3701      	adds	r7, #1
 8005a58:	60a2      	str	r2, [r4, #8]
 8005a5a:	b142      	cbz	r2, 8005a6e <_scanf_chars+0x8e>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dcd7      	bgt.n	8005a10 <_scanf_chars+0x30>
 8005a60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a64:	4629      	mov	r1, r5
 8005a66:	4640      	mov	r0, r8
 8005a68:	4798      	blx	r3
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d0d0      	beq.n	8005a10 <_scanf_chars+0x30>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	f013 0310 	ands.w	r3, r3, #16
 8005a74:	d105      	bne.n	8005a82 <_scanf_chars+0xa2>
 8005a76:	68e2      	ldr	r2, [r4, #12]
 8005a78:	3201      	adds	r2, #1
 8005a7a:	60e2      	str	r2, [r4, #12]
 8005a7c:	69a2      	ldr	r2, [r4, #24]
 8005a7e:	b102      	cbz	r2, 8005a82 <_scanf_chars+0xa2>
 8005a80:	7033      	strb	r3, [r6, #0]
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	443b      	add	r3, r7
 8005a86:	6123      	str	r3, [r4, #16]
 8005a88:	2000      	movs	r0, #0
 8005a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8e:	bf00      	nop
 8005a90:	08006247 	.word	0x08006247

08005a94 <_scanf_i>:
 8005a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a98:	4698      	mov	r8, r3
 8005a9a:	4b74      	ldr	r3, [pc, #464]	; (8005c6c <_scanf_i+0x1d8>)
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	4682      	mov	sl, r0
 8005aa0:	4616      	mov	r6, r2
 8005aa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	ab03      	add	r3, sp, #12
 8005aaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005aae:	4b70      	ldr	r3, [pc, #448]	; (8005c70 <_scanf_i+0x1dc>)
 8005ab0:	69a1      	ldr	r1, [r4, #24]
 8005ab2:	4a70      	ldr	r2, [pc, #448]	; (8005c74 <_scanf_i+0x1e0>)
 8005ab4:	2903      	cmp	r1, #3
 8005ab6:	bf18      	it	ne
 8005ab8:	461a      	movne	r2, r3
 8005aba:	68a3      	ldr	r3, [r4, #8]
 8005abc:	9201      	str	r2, [sp, #4]
 8005abe:	1e5a      	subs	r2, r3, #1
 8005ac0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005ac4:	bf88      	it	hi
 8005ac6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005aca:	4627      	mov	r7, r4
 8005acc:	bf82      	ittt	hi
 8005ace:	eb03 0905 	addhi.w	r9, r3, r5
 8005ad2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ad6:	60a3      	strhi	r3, [r4, #8]
 8005ad8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005adc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005ae0:	bf98      	it	ls
 8005ae2:	f04f 0900 	movls.w	r9, #0
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	463d      	mov	r5, r7
 8005aea:	f04f 0b00 	mov.w	fp, #0
 8005aee:	6831      	ldr	r1, [r6, #0]
 8005af0:	ab03      	add	r3, sp, #12
 8005af2:	7809      	ldrb	r1, [r1, #0]
 8005af4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f7fa fb49 	bl	8000190 <memchr>
 8005afe:	b328      	cbz	r0, 8005b4c <_scanf_i+0xb8>
 8005b00:	f1bb 0f01 	cmp.w	fp, #1
 8005b04:	d159      	bne.n	8005bba <_scanf_i+0x126>
 8005b06:	6862      	ldr	r2, [r4, #4]
 8005b08:	b92a      	cbnz	r2, 8005b16 <_scanf_i+0x82>
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b12:	6063      	str	r3, [r4, #4]
 8005b14:	6022      	str	r2, [r4, #0]
 8005b16:	6822      	ldr	r2, [r4, #0]
 8005b18:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005b1c:	6022      	str	r2, [r4, #0]
 8005b1e:	68a2      	ldr	r2, [r4, #8]
 8005b20:	1e51      	subs	r1, r2, #1
 8005b22:	60a1      	str	r1, [r4, #8]
 8005b24:	b192      	cbz	r2, 8005b4c <_scanf_i+0xb8>
 8005b26:	6832      	ldr	r2, [r6, #0]
 8005b28:	1c51      	adds	r1, r2, #1
 8005b2a:	6031      	str	r1, [r6, #0]
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	f805 2b01 	strb.w	r2, [r5], #1
 8005b32:	6872      	ldr	r2, [r6, #4]
 8005b34:	3a01      	subs	r2, #1
 8005b36:	2a00      	cmp	r2, #0
 8005b38:	6072      	str	r2, [r6, #4]
 8005b3a:	dc07      	bgt.n	8005b4c <_scanf_i+0xb8>
 8005b3c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005b40:	4631      	mov	r1, r6
 8005b42:	4650      	mov	r0, sl
 8005b44:	4790      	blx	r2
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f040 8085 	bne.w	8005c56 <_scanf_i+0x1c2>
 8005b4c:	f10b 0b01 	add.w	fp, fp, #1
 8005b50:	f1bb 0f03 	cmp.w	fp, #3
 8005b54:	d1cb      	bne.n	8005aee <_scanf_i+0x5a>
 8005b56:	6863      	ldr	r3, [r4, #4]
 8005b58:	b90b      	cbnz	r3, 8005b5e <_scanf_i+0xca>
 8005b5a:	230a      	movs	r3, #10
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	6863      	ldr	r3, [r4, #4]
 8005b60:	4945      	ldr	r1, [pc, #276]	; (8005c78 <_scanf_i+0x1e4>)
 8005b62:	6960      	ldr	r0, [r4, #20]
 8005b64:	1ac9      	subs	r1, r1, r3
 8005b66:	f000 f889 	bl	8005c7c <__sccl>
 8005b6a:	f04f 0b00 	mov.w	fp, #0
 8005b6e:	68a3      	ldr	r3, [r4, #8]
 8005b70:	6822      	ldr	r2, [r4, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d03d      	beq.n	8005bf2 <_scanf_i+0x15e>
 8005b76:	6831      	ldr	r1, [r6, #0]
 8005b78:	6960      	ldr	r0, [r4, #20]
 8005b7a:	f891 c000 	ldrb.w	ip, [r1]
 8005b7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d035      	beq.n	8005bf2 <_scanf_i+0x15e>
 8005b86:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005b8a:	d124      	bne.n	8005bd6 <_scanf_i+0x142>
 8005b8c:	0510      	lsls	r0, r2, #20
 8005b8e:	d522      	bpl.n	8005bd6 <_scanf_i+0x142>
 8005b90:	f10b 0b01 	add.w	fp, fp, #1
 8005b94:	f1b9 0f00 	cmp.w	r9, #0
 8005b98:	d003      	beq.n	8005ba2 <_scanf_i+0x10e>
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	f109 39ff 	add.w	r9, r9, #4294967295
 8005ba0:	60a3      	str	r3, [r4, #8]
 8005ba2:	6873      	ldr	r3, [r6, #4]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	6073      	str	r3, [r6, #4]
 8005baa:	dd1b      	ble.n	8005be4 <_scanf_i+0x150>
 8005bac:	6833      	ldr	r3, [r6, #0]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	6033      	str	r3, [r6, #0]
 8005bb2:	68a3      	ldr	r3, [r4, #8]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	60a3      	str	r3, [r4, #8]
 8005bb8:	e7d9      	b.n	8005b6e <_scanf_i+0xda>
 8005bba:	f1bb 0f02 	cmp.w	fp, #2
 8005bbe:	d1ae      	bne.n	8005b1e <_scanf_i+0x8a>
 8005bc0:	6822      	ldr	r2, [r4, #0]
 8005bc2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005bc6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005bca:	d1bf      	bne.n	8005b4c <_scanf_i+0xb8>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	6063      	str	r3, [r4, #4]
 8005bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd4:	e7a2      	b.n	8005b1c <_scanf_i+0x88>
 8005bd6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005bda:	6022      	str	r2, [r4, #0]
 8005bdc:	780b      	ldrb	r3, [r1, #0]
 8005bde:	f805 3b01 	strb.w	r3, [r5], #1
 8005be2:	e7de      	b.n	8005ba2 <_scanf_i+0x10e>
 8005be4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005be8:	4631      	mov	r1, r6
 8005bea:	4650      	mov	r0, sl
 8005bec:	4798      	blx	r3
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d0df      	beq.n	8005bb2 <_scanf_i+0x11e>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	05d9      	lsls	r1, r3, #23
 8005bf6:	d50d      	bpl.n	8005c14 <_scanf_i+0x180>
 8005bf8:	42bd      	cmp	r5, r7
 8005bfa:	d909      	bls.n	8005c10 <_scanf_i+0x17c>
 8005bfc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005c00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c04:	4632      	mov	r2, r6
 8005c06:	4650      	mov	r0, sl
 8005c08:	4798      	blx	r3
 8005c0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8005c0e:	464d      	mov	r5, r9
 8005c10:	42bd      	cmp	r5, r7
 8005c12:	d028      	beq.n	8005c66 <_scanf_i+0x1d2>
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	f012 0210 	ands.w	r2, r2, #16
 8005c1a:	d113      	bne.n	8005c44 <_scanf_i+0x1b0>
 8005c1c:	702a      	strb	r2, [r5, #0]
 8005c1e:	6863      	ldr	r3, [r4, #4]
 8005c20:	9e01      	ldr	r6, [sp, #4]
 8005c22:	4639      	mov	r1, r7
 8005c24:	4650      	mov	r0, sl
 8005c26:	47b0      	blx	r6
 8005c28:	f8d8 3000 	ldr.w	r3, [r8]
 8005c2c:	6821      	ldr	r1, [r4, #0]
 8005c2e:	1d1a      	adds	r2, r3, #4
 8005c30:	f8c8 2000 	str.w	r2, [r8]
 8005c34:	f011 0f20 	tst.w	r1, #32
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	d00f      	beq.n	8005c5c <_scanf_i+0x1c8>
 8005c3c:	6018      	str	r0, [r3, #0]
 8005c3e:	68e3      	ldr	r3, [r4, #12]
 8005c40:	3301      	adds	r3, #1
 8005c42:	60e3      	str	r3, [r4, #12]
 8005c44:	6923      	ldr	r3, [r4, #16]
 8005c46:	1bed      	subs	r5, r5, r7
 8005c48:	445d      	add	r5, fp
 8005c4a:	442b      	add	r3, r5
 8005c4c:	6123      	str	r3, [r4, #16]
 8005c4e:	2000      	movs	r0, #0
 8005c50:	b007      	add	sp, #28
 8005c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c56:	f04f 0b00 	mov.w	fp, #0
 8005c5a:	e7ca      	b.n	8005bf2 <_scanf_i+0x15e>
 8005c5c:	07ca      	lsls	r2, r1, #31
 8005c5e:	bf4c      	ite	mi
 8005c60:	8018      	strhmi	r0, [r3, #0]
 8005c62:	6018      	strpl	r0, [r3, #0]
 8005c64:	e7eb      	b.n	8005c3e <_scanf_i+0x1aa>
 8005c66:	2001      	movs	r0, #1
 8005c68:	e7f2      	b.n	8005c50 <_scanf_i+0x1bc>
 8005c6a:	bf00      	nop
 8005c6c:	08006124 	.word	0x08006124
 8005c70:	08006005 	.word	0x08006005
 8005c74:	08005f1d 	.word	0x08005f1d
 8005c78:	0800623b 	.word	0x0800623b

08005c7c <__sccl>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	780b      	ldrb	r3, [r1, #0]
 8005c80:	4604      	mov	r4, r0
 8005c82:	2b5e      	cmp	r3, #94	; 0x5e
 8005c84:	bf0b      	itete	eq
 8005c86:	784b      	ldrbeq	r3, [r1, #1]
 8005c88:	1c4a      	addne	r2, r1, #1
 8005c8a:	1c8a      	addeq	r2, r1, #2
 8005c8c:	2100      	movne	r1, #0
 8005c8e:	bf08      	it	eq
 8005c90:	2101      	moveq	r1, #1
 8005c92:	3801      	subs	r0, #1
 8005c94:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005c98:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005c9c:	42a8      	cmp	r0, r5
 8005c9e:	d1fb      	bne.n	8005c98 <__sccl+0x1c>
 8005ca0:	b90b      	cbnz	r3, 8005ca6 <__sccl+0x2a>
 8005ca2:	1e50      	subs	r0, r2, #1
 8005ca4:	bd70      	pop	{r4, r5, r6, pc}
 8005ca6:	f081 0101 	eor.w	r1, r1, #1
 8005caa:	54e1      	strb	r1, [r4, r3]
 8005cac:	4610      	mov	r0, r2
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005cb4:	2d2d      	cmp	r5, #45	; 0x2d
 8005cb6:	d005      	beq.n	8005cc4 <__sccl+0x48>
 8005cb8:	2d5d      	cmp	r5, #93	; 0x5d
 8005cba:	d016      	beq.n	8005cea <__sccl+0x6e>
 8005cbc:	2d00      	cmp	r5, #0
 8005cbe:	d0f1      	beq.n	8005ca4 <__sccl+0x28>
 8005cc0:	462b      	mov	r3, r5
 8005cc2:	e7f2      	b.n	8005caa <__sccl+0x2e>
 8005cc4:	7846      	ldrb	r6, [r0, #1]
 8005cc6:	2e5d      	cmp	r6, #93	; 0x5d
 8005cc8:	d0fa      	beq.n	8005cc0 <__sccl+0x44>
 8005cca:	42b3      	cmp	r3, r6
 8005ccc:	dcf8      	bgt.n	8005cc0 <__sccl+0x44>
 8005cce:	3002      	adds	r0, #2
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	3201      	adds	r2, #1
 8005cd4:	4296      	cmp	r6, r2
 8005cd6:	54a1      	strb	r1, [r4, r2]
 8005cd8:	dcfb      	bgt.n	8005cd2 <__sccl+0x56>
 8005cda:	1af2      	subs	r2, r6, r3
 8005cdc:	3a01      	subs	r2, #1
 8005cde:	1c5d      	adds	r5, r3, #1
 8005ce0:	42b3      	cmp	r3, r6
 8005ce2:	bfa8      	it	ge
 8005ce4:	2200      	movge	r2, #0
 8005ce6:	18ab      	adds	r3, r5, r2
 8005ce8:	e7e1      	b.n	8005cae <__sccl+0x32>
 8005cea:	4610      	mov	r0, r2
 8005cec:	e7da      	b.n	8005ca4 <__sccl+0x28>

08005cee <__submore>:
 8005cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005cf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cfa:	4299      	cmp	r1, r3
 8005cfc:	d11d      	bne.n	8005d3a <__submore+0x4c>
 8005cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d02:	f7ff f927 	bl	8004f54 <_malloc_r>
 8005d06:	b918      	cbnz	r0, 8005d10 <__submore+0x22>
 8005d08:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d14:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d16:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005d1a:	6360      	str	r0, [r4, #52]	; 0x34
 8005d1c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005d20:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005d24:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005d28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005d2c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005d30:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005d34:	6020      	str	r0, [r4, #0]
 8005d36:	2000      	movs	r0, #0
 8005d38:	e7e8      	b.n	8005d0c <__submore+0x1e>
 8005d3a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005d3c:	0077      	lsls	r7, r6, #1
 8005d3e:	463a      	mov	r2, r7
 8005d40:	f000 f83a 	bl	8005db8 <_realloc_r>
 8005d44:	4605      	mov	r5, r0
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d0de      	beq.n	8005d08 <__submore+0x1a>
 8005d4a:	eb00 0806 	add.w	r8, r0, r6
 8005d4e:	4601      	mov	r1, r0
 8005d50:	4632      	mov	r2, r6
 8005d52:	4640      	mov	r0, r8
 8005d54:	f7ff f884 	bl	8004e60 <memcpy>
 8005d58:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005d5c:	f8c4 8000 	str.w	r8, [r4]
 8005d60:	e7e9      	b.n	8005d36 <__submore+0x48>

08005d62 <memmove>:
 8005d62:	4288      	cmp	r0, r1
 8005d64:	b510      	push	{r4, lr}
 8005d66:	eb01 0402 	add.w	r4, r1, r2
 8005d6a:	d902      	bls.n	8005d72 <memmove+0x10>
 8005d6c:	4284      	cmp	r4, r0
 8005d6e:	4623      	mov	r3, r4
 8005d70:	d807      	bhi.n	8005d82 <memmove+0x20>
 8005d72:	1e43      	subs	r3, r0, #1
 8005d74:	42a1      	cmp	r1, r4
 8005d76:	d008      	beq.n	8005d8a <memmove+0x28>
 8005d78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d80:	e7f8      	b.n	8005d74 <memmove+0x12>
 8005d82:	4402      	add	r2, r0
 8005d84:	4601      	mov	r1, r0
 8005d86:	428a      	cmp	r2, r1
 8005d88:	d100      	bne.n	8005d8c <memmove+0x2a>
 8005d8a:	bd10      	pop	{r4, pc}
 8005d8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d90:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d94:	e7f7      	b.n	8005d86 <memmove+0x24>
	...

08005d98 <_sbrk_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d06      	ldr	r5, [pc, #24]	; (8005db4 <_sbrk_r+0x1c>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fb f8de 	bl	8000f64 <_sbrk>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_sbrk_r+0x1a>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_sbrk_r+0x1a>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	200005cc 	.word	0x200005cc

08005db8 <_realloc_r>:
 8005db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	4614      	mov	r4, r2
 8005dc0:	460e      	mov	r6, r1
 8005dc2:	b921      	cbnz	r1, 8005dce <_realloc_r+0x16>
 8005dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc8:	4611      	mov	r1, r2
 8005dca:	f7ff b8c3 	b.w	8004f54 <_malloc_r>
 8005dce:	b92a      	cbnz	r2, 8005ddc <_realloc_r+0x24>
 8005dd0:	f7ff f854 	bl	8004e7c <_free_r>
 8005dd4:	4625      	mov	r5, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ddc:	f000 f914 	bl	8006008 <_malloc_usable_size_r>
 8005de0:	4284      	cmp	r4, r0
 8005de2:	4607      	mov	r7, r0
 8005de4:	d802      	bhi.n	8005dec <_realloc_r+0x34>
 8005de6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dea:	d812      	bhi.n	8005e12 <_realloc_r+0x5a>
 8005dec:	4621      	mov	r1, r4
 8005dee:	4640      	mov	r0, r8
 8005df0:	f7ff f8b0 	bl	8004f54 <_malloc_r>
 8005df4:	4605      	mov	r5, r0
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d0ed      	beq.n	8005dd6 <_realloc_r+0x1e>
 8005dfa:	42bc      	cmp	r4, r7
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	4631      	mov	r1, r6
 8005e00:	bf28      	it	cs
 8005e02:	463a      	movcs	r2, r7
 8005e04:	f7ff f82c 	bl	8004e60 <memcpy>
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	f7ff f836 	bl	8004e7c <_free_r>
 8005e10:	e7e1      	b.n	8005dd6 <_realloc_r+0x1e>
 8005e12:	4635      	mov	r5, r6
 8005e14:	e7df      	b.n	8005dd6 <_realloc_r+0x1e>
	...

08005e18 <_strtol_l.constprop.0>:
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e1e:	d001      	beq.n	8005e24 <_strtol_l.constprop.0+0xc>
 8005e20:	2b24      	cmp	r3, #36	; 0x24
 8005e22:	d906      	bls.n	8005e32 <_strtol_l.constprop.0+0x1a>
 8005e24:	f7fe fff0 	bl	8004e08 <__errno>
 8005e28:	2316      	movs	r3, #22
 8005e2a:	6003      	str	r3, [r0, #0]
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005f18 <_strtol_l.constprop.0+0x100>
 8005e36:	460d      	mov	r5, r1
 8005e38:	462e      	mov	r6, r5
 8005e3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e3e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005e42:	f017 0708 	ands.w	r7, r7, #8
 8005e46:	d1f7      	bne.n	8005e38 <_strtol_l.constprop.0+0x20>
 8005e48:	2c2d      	cmp	r4, #45	; 0x2d
 8005e4a:	d132      	bne.n	8005eb2 <_strtol_l.constprop.0+0x9a>
 8005e4c:	782c      	ldrb	r4, [r5, #0]
 8005e4e:	2701      	movs	r7, #1
 8005e50:	1cb5      	adds	r5, r6, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d05b      	beq.n	8005f0e <_strtol_l.constprop.0+0xf6>
 8005e56:	2b10      	cmp	r3, #16
 8005e58:	d109      	bne.n	8005e6e <_strtol_l.constprop.0+0x56>
 8005e5a:	2c30      	cmp	r4, #48	; 0x30
 8005e5c:	d107      	bne.n	8005e6e <_strtol_l.constprop.0+0x56>
 8005e5e:	782c      	ldrb	r4, [r5, #0]
 8005e60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005e64:	2c58      	cmp	r4, #88	; 0x58
 8005e66:	d14d      	bne.n	8005f04 <_strtol_l.constprop.0+0xec>
 8005e68:	786c      	ldrb	r4, [r5, #1]
 8005e6a:	2310      	movs	r3, #16
 8005e6c:	3502      	adds	r5, #2
 8005e6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005e72:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e76:	f04f 0e00 	mov.w	lr, #0
 8005e7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005e7e:	4676      	mov	r6, lr
 8005e80:	fb03 8a19 	mls	sl, r3, r9, r8
 8005e84:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005e88:	f1bc 0f09 	cmp.w	ip, #9
 8005e8c:	d816      	bhi.n	8005ebc <_strtol_l.constprop.0+0xa4>
 8005e8e:	4664      	mov	r4, ip
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	dd24      	ble.n	8005ede <_strtol_l.constprop.0+0xc6>
 8005e94:	f1be 3fff 	cmp.w	lr, #4294967295
 8005e98:	d008      	beq.n	8005eac <_strtol_l.constprop.0+0x94>
 8005e9a:	45b1      	cmp	r9, r6
 8005e9c:	d31c      	bcc.n	8005ed8 <_strtol_l.constprop.0+0xc0>
 8005e9e:	d101      	bne.n	8005ea4 <_strtol_l.constprop.0+0x8c>
 8005ea0:	45a2      	cmp	sl, r4
 8005ea2:	db19      	blt.n	8005ed8 <_strtol_l.constprop.0+0xc0>
 8005ea4:	fb06 4603 	mla	r6, r6, r3, r4
 8005ea8:	f04f 0e01 	mov.w	lr, #1
 8005eac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005eb0:	e7e8      	b.n	8005e84 <_strtol_l.constprop.0+0x6c>
 8005eb2:	2c2b      	cmp	r4, #43	; 0x2b
 8005eb4:	bf04      	itt	eq
 8005eb6:	782c      	ldrbeq	r4, [r5, #0]
 8005eb8:	1cb5      	addeq	r5, r6, #2
 8005eba:	e7ca      	b.n	8005e52 <_strtol_l.constprop.0+0x3a>
 8005ebc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005ec0:	f1bc 0f19 	cmp.w	ip, #25
 8005ec4:	d801      	bhi.n	8005eca <_strtol_l.constprop.0+0xb2>
 8005ec6:	3c37      	subs	r4, #55	; 0x37
 8005ec8:	e7e2      	b.n	8005e90 <_strtol_l.constprop.0+0x78>
 8005eca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005ece:	f1bc 0f19 	cmp.w	ip, #25
 8005ed2:	d804      	bhi.n	8005ede <_strtol_l.constprop.0+0xc6>
 8005ed4:	3c57      	subs	r4, #87	; 0x57
 8005ed6:	e7db      	b.n	8005e90 <_strtol_l.constprop.0+0x78>
 8005ed8:	f04f 3eff 	mov.w	lr, #4294967295
 8005edc:	e7e6      	b.n	8005eac <_strtol_l.constprop.0+0x94>
 8005ede:	f1be 3fff 	cmp.w	lr, #4294967295
 8005ee2:	d105      	bne.n	8005ef0 <_strtol_l.constprop.0+0xd8>
 8005ee4:	2322      	movs	r3, #34	; 0x22
 8005ee6:	6003      	str	r3, [r0, #0]
 8005ee8:	4646      	mov	r6, r8
 8005eea:	b942      	cbnz	r2, 8005efe <_strtol_l.constprop.0+0xe6>
 8005eec:	4630      	mov	r0, r6
 8005eee:	e79e      	b.n	8005e2e <_strtol_l.constprop.0+0x16>
 8005ef0:	b107      	cbz	r7, 8005ef4 <_strtol_l.constprop.0+0xdc>
 8005ef2:	4276      	negs	r6, r6
 8005ef4:	2a00      	cmp	r2, #0
 8005ef6:	d0f9      	beq.n	8005eec <_strtol_l.constprop.0+0xd4>
 8005ef8:	f1be 0f00 	cmp.w	lr, #0
 8005efc:	d000      	beq.n	8005f00 <_strtol_l.constprop.0+0xe8>
 8005efe:	1e69      	subs	r1, r5, #1
 8005f00:	6011      	str	r1, [r2, #0]
 8005f02:	e7f3      	b.n	8005eec <_strtol_l.constprop.0+0xd4>
 8005f04:	2430      	movs	r4, #48	; 0x30
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1b1      	bne.n	8005e6e <_strtol_l.constprop.0+0x56>
 8005f0a:	2308      	movs	r3, #8
 8005f0c:	e7af      	b.n	8005e6e <_strtol_l.constprop.0+0x56>
 8005f0e:	2c30      	cmp	r4, #48	; 0x30
 8005f10:	d0a5      	beq.n	8005e5e <_strtol_l.constprop.0+0x46>
 8005f12:	230a      	movs	r3, #10
 8005f14:	e7ab      	b.n	8005e6e <_strtol_l.constprop.0+0x56>
 8005f16:	bf00      	nop
 8005f18:	08006247 	.word	0x08006247

08005f1c <_strtol_r>:
 8005f1c:	f7ff bf7c 	b.w	8005e18 <_strtol_l.constprop.0>

08005f20 <_strtoul_l.constprop.0>:
 8005f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f24:	4f36      	ldr	r7, [pc, #216]	; (8006000 <_strtoul_l.constprop.0+0xe0>)
 8005f26:	4686      	mov	lr, r0
 8005f28:	460d      	mov	r5, r1
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f30:	5d3e      	ldrb	r6, [r7, r4]
 8005f32:	f016 0608 	ands.w	r6, r6, #8
 8005f36:	d1f8      	bne.n	8005f2a <_strtoul_l.constprop.0+0xa>
 8005f38:	2c2d      	cmp	r4, #45	; 0x2d
 8005f3a:	d130      	bne.n	8005f9e <_strtoul_l.constprop.0+0x7e>
 8005f3c:	782c      	ldrb	r4, [r5, #0]
 8005f3e:	2601      	movs	r6, #1
 8005f40:	1c85      	adds	r5, r0, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d057      	beq.n	8005ff6 <_strtoul_l.constprop.0+0xd6>
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d109      	bne.n	8005f5e <_strtoul_l.constprop.0+0x3e>
 8005f4a:	2c30      	cmp	r4, #48	; 0x30
 8005f4c:	d107      	bne.n	8005f5e <_strtoul_l.constprop.0+0x3e>
 8005f4e:	7828      	ldrb	r0, [r5, #0]
 8005f50:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005f54:	2858      	cmp	r0, #88	; 0x58
 8005f56:	d149      	bne.n	8005fec <_strtoul_l.constprop.0+0xcc>
 8005f58:	786c      	ldrb	r4, [r5, #1]
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	3502      	adds	r5, #2
 8005f5e:	f04f 38ff 	mov.w	r8, #4294967295
 8005f62:	2700      	movs	r7, #0
 8005f64:	fbb8 f8f3 	udiv	r8, r8, r3
 8005f68:	fb03 f908 	mul.w	r9, r3, r8
 8005f6c:	ea6f 0909 	mvn.w	r9, r9
 8005f70:	4638      	mov	r0, r7
 8005f72:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005f76:	f1bc 0f09 	cmp.w	ip, #9
 8005f7a:	d815      	bhi.n	8005fa8 <_strtoul_l.constprop.0+0x88>
 8005f7c:	4664      	mov	r4, ip
 8005f7e:	42a3      	cmp	r3, r4
 8005f80:	dd23      	ble.n	8005fca <_strtoul_l.constprop.0+0xaa>
 8005f82:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005f86:	d007      	beq.n	8005f98 <_strtoul_l.constprop.0+0x78>
 8005f88:	4580      	cmp	r8, r0
 8005f8a:	d31b      	bcc.n	8005fc4 <_strtoul_l.constprop.0+0xa4>
 8005f8c:	d101      	bne.n	8005f92 <_strtoul_l.constprop.0+0x72>
 8005f8e:	45a1      	cmp	r9, r4
 8005f90:	db18      	blt.n	8005fc4 <_strtoul_l.constprop.0+0xa4>
 8005f92:	fb00 4003 	mla	r0, r0, r3, r4
 8005f96:	2701      	movs	r7, #1
 8005f98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f9c:	e7e9      	b.n	8005f72 <_strtoul_l.constprop.0+0x52>
 8005f9e:	2c2b      	cmp	r4, #43	; 0x2b
 8005fa0:	bf04      	itt	eq
 8005fa2:	782c      	ldrbeq	r4, [r5, #0]
 8005fa4:	1c85      	addeq	r5, r0, #2
 8005fa6:	e7cc      	b.n	8005f42 <_strtoul_l.constprop.0+0x22>
 8005fa8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005fac:	f1bc 0f19 	cmp.w	ip, #25
 8005fb0:	d801      	bhi.n	8005fb6 <_strtoul_l.constprop.0+0x96>
 8005fb2:	3c37      	subs	r4, #55	; 0x37
 8005fb4:	e7e3      	b.n	8005f7e <_strtoul_l.constprop.0+0x5e>
 8005fb6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005fba:	f1bc 0f19 	cmp.w	ip, #25
 8005fbe:	d804      	bhi.n	8005fca <_strtoul_l.constprop.0+0xaa>
 8005fc0:	3c57      	subs	r4, #87	; 0x57
 8005fc2:	e7dc      	b.n	8005f7e <_strtoul_l.constprop.0+0x5e>
 8005fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8005fc8:	e7e6      	b.n	8005f98 <_strtoul_l.constprop.0+0x78>
 8005fca:	1c7b      	adds	r3, r7, #1
 8005fcc:	d106      	bne.n	8005fdc <_strtoul_l.constprop.0+0xbc>
 8005fce:	2322      	movs	r3, #34	; 0x22
 8005fd0:	f8ce 3000 	str.w	r3, [lr]
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	b932      	cbnz	r2, 8005fe6 <_strtoul_l.constprop.0+0xc6>
 8005fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fdc:	b106      	cbz	r6, 8005fe0 <_strtoul_l.constprop.0+0xc0>
 8005fde:	4240      	negs	r0, r0
 8005fe0:	2a00      	cmp	r2, #0
 8005fe2:	d0f9      	beq.n	8005fd8 <_strtoul_l.constprop.0+0xb8>
 8005fe4:	b107      	cbz	r7, 8005fe8 <_strtoul_l.constprop.0+0xc8>
 8005fe6:	1e69      	subs	r1, r5, #1
 8005fe8:	6011      	str	r1, [r2, #0]
 8005fea:	e7f5      	b.n	8005fd8 <_strtoul_l.constprop.0+0xb8>
 8005fec:	2430      	movs	r4, #48	; 0x30
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1b5      	bne.n	8005f5e <_strtoul_l.constprop.0+0x3e>
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	e7b3      	b.n	8005f5e <_strtoul_l.constprop.0+0x3e>
 8005ff6:	2c30      	cmp	r4, #48	; 0x30
 8005ff8:	d0a9      	beq.n	8005f4e <_strtoul_l.constprop.0+0x2e>
 8005ffa:	230a      	movs	r3, #10
 8005ffc:	e7af      	b.n	8005f5e <_strtoul_l.constprop.0+0x3e>
 8005ffe:	bf00      	nop
 8006000:	08006247 	.word	0x08006247

08006004 <_strtoul_r>:
 8006004:	f7ff bf8c 	b.w	8005f20 <_strtoul_l.constprop.0>

08006008 <_malloc_usable_size_r>:
 8006008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600c:	1f18      	subs	r0, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	bfbc      	itt	lt
 8006012:	580b      	ldrlt	r3, [r1, r0]
 8006014:	18c0      	addlt	r0, r0, r3
 8006016:	4770      	bx	lr

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
