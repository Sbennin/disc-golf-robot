
Client_Base_Sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce28  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001304  0800cf68  0800cf68  0001cf68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e26c  0800e26c  0001e26c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e274  0800e274  0001e274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e278  0800e278  0001e278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000008  0800e27c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000039  20000078  0800e2ec  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000b4  0800e325  000200b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001840  200000c8  0800e336  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001908  0800e336  00021908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800e336  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   00031fa6  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006e16  00000000  00000000  00052a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002b90  00000000  00000000  00059898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002148  00000000  00000000  0005c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002d980  00000000  00000000  0005e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003249b  00000000  00000000  0008bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000fcc4a  00000000  00000000  000be38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000bd74  00000000  00000000  001bafd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000083  00000000  00000000  001c6d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000c8 	.word	0x200000c8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cf50 	.word	0x0800cf50

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000cc 	.word	0x200000cc
 800017c:	0800cf50 	.word	0x0800cf50

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <LL_EXTI_EnableIT_32_63+0x24>)
 8000536:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800053a:	4905      	ldr	r1, [pc, #20]	; (8000550 <LL_EXTI_EnableIT_32_63+0x24>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4313      	orrs	r3, r2
 8000540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	58000800 	.word	0x58000800

08000554 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000560:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4313      	orrs	r3, r2
 800056a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800056c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000570:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4013      	ands	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000578:	68fb      	ldr	r3, [r7, #12]
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800058e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000592:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4313      	orrs	r3, r2
 800059e:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4013      	ands	r3, r2
 80005ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b0:	68fb      	ldr	r3, [r7, #12]
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005c2:	f002 fa01 	bl	80029c8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005c6:	f002 fa05 	bl	80029d4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005ca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005ce:	f7ff ffad 	bl	800052c <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005d2:	f008 fd55 	bl	8009080 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005d6:	f000 f821 	bl	800061c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005da:	f000 f8c1 	bl	8000760 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005de:	bf00      	nop
}
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <APPD_EnableCPU2+0x34>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	c403      	stmia	r4!, {r0, r1}
 80005fa:	8022      	strh	r2, [r4, #0]
 80005fc:	3402      	adds	r4, #2
 80005fe:	0c13      	lsrs	r3, r2, #16
 8000600:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000602:	f008 fc51 	bl	8008ea8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4618      	mov	r0, r3
 800060a:	f007 fee2 	bl	80083d2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800060e:	bf00      	nop
}
 8000610:	3720      	adds	r7, #32
 8000612:	46bd      	mov	sp, r7
 8000614:	bdb0      	pop	{r4, r5, r7, pc}
 8000616:	bf00      	nop
 8000618:	0800cf68 	.word	0x0800cf68

0800061c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800063c:	2300      	movs	r3, #0
 800063e:	77fb      	strb	r3, [r7, #31]
 8000640:	e036      	b.n	80006b0 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000642:	7ffb      	ldrb	r3, [r7, #31]
 8000644:	4a43      	ldr	r2, [pc, #268]	; (8000754 <APPD_SetCPU2GpioConfig+0x138>)
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	4413      	add	r3, r2
 800064a:	799b      	ldrb	r3, [r3, #6]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d02c      	beq.n	80006aa <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000650:	7ffb      	ldrb	r3, [r7, #31]
 8000652:	4a40      	ldr	r2, [pc, #256]	; (8000754 <APPD_SetCPU2GpioConfig+0x138>)
 8000654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000658:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <APPD_SetCPU2GpioConfig+0x13c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d01b      	beq.n	8000696 <APPD_SetCPU2GpioConfig+0x7a>
 800065e:	4a3e      	ldr	r2, [pc, #248]	; (8000758 <APPD_SetCPU2GpioConfig+0x13c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d821      	bhi.n	80006a8 <APPD_SetCPU2GpioConfig+0x8c>
 8000664:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000668:	d003      	beq.n	8000672 <APPD_SetCPU2GpioConfig+0x56>
 800066a:	4a3c      	ldr	r2, [pc, #240]	; (800075c <APPD_SetCPU2GpioConfig+0x140>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d009      	beq.n	8000684 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000670:	e01a      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000672:	7ffb      	ldrb	r3, [r7, #31]
 8000674:	4a37      	ldr	r2, [pc, #220]	; (8000754 <APPD_SetCPU2GpioConfig+0x138>)
 8000676:	00db      	lsls	r3, r3, #3
 8000678:	4413      	add	r3, r2
 800067a:	889a      	ldrh	r2, [r3, #4]
 800067c:	8bbb      	ldrh	r3, [r7, #28]
 800067e:	4313      	orrs	r3, r2
 8000680:	83bb      	strh	r3, [r7, #28]
          break;
 8000682:	e012      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000684:	7ffb      	ldrb	r3, [r7, #31]
 8000686:	4a33      	ldr	r2, [pc, #204]	; (8000754 <APPD_SetCPU2GpioConfig+0x138>)
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	4413      	add	r3, r2
 800068c:	889a      	ldrh	r2, [r3, #4]
 800068e:	8b7b      	ldrh	r3, [r7, #26]
 8000690:	4313      	orrs	r3, r2
 8000692:	837b      	strh	r3, [r7, #26]
          break;
 8000694:	e009      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000696:	7ffb      	ldrb	r3, [r7, #31]
 8000698:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <APPD_SetCPU2GpioConfig+0x138>)
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	4413      	add	r3, r2
 800069e:	889a      	ldrh	r2, [r3, #4]
 80006a0:	8b3b      	ldrh	r3, [r7, #24]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	833b      	strh	r3, [r7, #24]
          break;
 80006a6:	e000      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x8e>
          break;
 80006a8:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
 80006ac:	3301      	adds	r3, #1
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	2b25      	cmp	r3, #37	; 0x25
 80006b4:	d9c5      	bls.n	8000642 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d014      	beq.n	80006f2 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006c8:	8bbb      	ldrh	r3, [r7, #28]
 80006ca:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff41 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff57 	bl	8000586 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f002 fe4a 	bl	8003378 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006e4:	8bbb      	ldrh	r3, [r7, #28]
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f002 ffb3 	bl	8003658 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006f2:	8b7b      	ldrh	r3, [r7, #26]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d012      	beq.n	800071e <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 80006f8:	8b7b      	ldrh	r3, [r7, #26]
 80006fa:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff29 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff3f 	bl	8000586 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <APPD_SetCPU2GpioConfig+0x140>)
 800070e:	f002 fe33 	bl	8003378 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000712:	8b7b      	ldrh	r3, [r7, #26]
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <APPD_SetCPU2GpioConfig+0x140>)
 800071a:	f002 ff9d 	bl	8003658 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800071e:	8b3b      	ldrh	r3, [r7, #24]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d013      	beq.n	800074c <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000724:	8b3b      	ldrh	r3, [r7, #24]
 8000726:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	2004      	movs	r0, #4
 800072a:	f7ff ff13 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800072e:	2004      	movs	r0, #4
 8000730:	f7ff ff29 	bl	8000586 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <APPD_SetCPU2GpioConfig+0x13c>)
 800073a:	f002 fe1d 	bl	8003378 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800073e:	8b3b      	ldrh	r3, [r7, #24]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <APPD_SetCPU2GpioConfig+0x13c>)
 8000746:	f002 ff87 	bl	8003658 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800074a:	bf00      	nop
 800074c:	bf00      	nop
}
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800df1c 	.word	0x0800df1c
 8000758:	48000800 	.word	0x48000800
 800075c:	48000400 	.word	0x48000400

08000760 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000764:	bf00      	nop
}
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000772:	f001 fbe1 	bl	8001f38 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000776:	bf00      	nop
}
 8000778:	bd80      	pop	{r7, pc}

0800077a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	460b      	mov	r3, r1
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000788:	897a      	ldrh	r2, [r7, #10]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	2000      	movs	r0, #0
 8000790:	f001 fa24 	bl	8001bdc <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000794:	bf00      	nop
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007aa:	f023 0207 	bic.w	r2, r3, #7
 80007ae:	4905      	ldr	r1, [pc, #20]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	58000400 	.word	0x58000400

080007c8 <LL_EXTI_EnableIT_32_63>:
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <LL_EXTI_EnableIT_32_63+0x24>)
 80007d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007d6:	4905      	ldr	r1, [pc, #20]	; (80007ec <LL_EXTI_EnableIT_32_63+0x24>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4313      	orrs	r3, r2
 80007dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	58000800 	.word	0x58000800

080007f0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80007f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80007fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800080a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000816:	4313      	orrs	r3, r2
 8000818:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	cafecafe 	.word	0xcafecafe

0800082c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800083e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4313      	orrs	r3, r2
 8000846:	608b      	str	r3, [r1, #8]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <LL_DBGMCU_GetDeviceID+0x18>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e0042000 	.word	0xe0042000

08000870 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <LL_DBGMCU_GetRevisionID+0x18>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	0c1b      	lsrs	r3, r3, #16
 800087a:	b29b      	uxth	r3, r3
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e0042000 	.word	0xe0042000

0800088c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	22ff      	movs	r2, #255	; 0xff
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	22ca      	movs	r2, #202	; 0xca
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2253      	movs	r2, #83	; 0x53
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	f023 0207 	bic.w	r2, r3, #7
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	431a      	orrs	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	609a      	str	r2, [r3, #8]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <MX_APPE_Config+0x18>)
 80008f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80008f6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80008f8:	f000 f82a 	bl	8000950 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80008fc:	f000 f82f 	bl	800095e <Config_HSE>

  return;
 8000900:	bf00      	nop
}
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58004000 	.word	0x58004000

08000908 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800090c:	f000 f83b 	bl	8000986 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000910:	f000 f854 	bl	80009bc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000914:	4906      	ldr	r1, [pc, #24]	; (8000930 <MX_APPE_Init+0x28>)
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fef4 	bl	8001704 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
//TODO
  APPD_Init();
 800091c:	f7ff fe4f 	bl	80005be <APPD_Init>
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE); //maybe not needed?
 8000920:	2101      	movs	r1, #1
 8000922:	2001      	movs	r0, #1
 8000924:	f00b f8a4 	bl	800ba70 <UTIL_LPM_SetOffMode>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000928:	f000 f856 	bl	80009d8 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800092c:	bf00      	nop
}
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200001c4 	.word	0x200001c4

08000934 <Init_Smps>:

void Init_Smps(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000938:	bf00      	nop
}
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <Init_Exti>:

void Init_Exti(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000946:	2050      	movs	r0, #80	; 0x50
 8000948:	f7ff ff3e 	bl	80007c8 <LL_EXTI_EnableIT_32_63>

  return;
 800094c:	bf00      	nop
}
 800094e:	bd80      	pop	{r7, pc}

08000950 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000954:	bf00      	nop
}
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f008 fc09 	bl	800917c <OTP_Read>
 800096a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d005      	beq.n	800097e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	799b      	ldrb	r3, [r3, #6]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ff3a 	bl	80007f0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800097c:	bf00      	nop
 800097e:	bf00      	nop
}
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <System_Init>:

static void System_Init(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  Init_Smps();
 800098a:	f7ff ffd3 	bl	8000934 <Init_Smps>

  Init_Exti();
 800098e:	f7ff ffd8 	bl	8000942 <Init_Exti>

  Init_Rtc();
 8000992:	f000 f803 	bl	800099c <Init_Rtc>

  return;
 8000996:	bf00      	nop
}
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <Init_Rtc>:

static void Init_Rtc(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <Init_Rtc+0x1c>)
 80009a2:	f7ff ff80 	bl	80008a6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80009a6:	2100      	movs	r1, #0
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <Init_Rtc+0x1c>)
 80009aa:	f7ff ff8c 	bl	80008c6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80009ae:	4802      	ldr	r0, [pc, #8]	; (80009b8 <Init_Rtc+0x1c>)
 80009b0:	f7ff ff6c 	bl	800088c <LL_RTC_EnableWriteProtection>

  return;
 80009b4:	bf00      	nop
}
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40002800 	.word	0x40002800

080009bc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80009c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009c4:	f7ff ff32 	bl	800082c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80009c8:	f00b f840 	bl	800ba4c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80009cc:	2004      	movs	r0, #4
 80009ce:	f7ff fee5 	bl	800079c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80009d2:	bf00      	nop
}
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80009de:	f008 f8ad 	bl	8008b3c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <appe_Tl_Init+0x50>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009ea:	f00b f96d 	bl	800bcc8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <appe_Tl_Init+0x54>)
 80009f0:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <appe_Tl_Init+0x58>)
 80009f4:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <appe_Tl_Init+0x5c>)
 80009fc:	f007 ff60 	bl	80088c0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <appe_Tl_Init+0x60>)
 8000a02:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <appe_Tl_Init+0x64>)
 8000a06:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <appe_Tl_Init+0x68>)
 8000a0a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000a0c:	f240 533c 	movw	r3, #1340	; 0x53c
 8000a10:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4618      	mov	r0, r3
 8000a18:	f008 f9d2 	bl	8008dc0 <TL_MM_Init>

  TL_Enable();
 8000a1c:	f008 f888 	bl	8008b30 <TL_Enable>

  return;
 8000a20:	bf00      	nop
}
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	080088f9 	.word	0x080088f9
 8000a2c:	20030734 	.word	0x20030734
 8000a30:	08000a45 	.word	0x08000a45
 8000a34:	08000a5d 	.word	0x08000a5d
 8000a38:	2003094c 	.word	0x2003094c
 8000a3c:	20030840 	.word	0x20030840
 8000a40:	200301f8 	.word	0x200301f8

08000a44 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000a4e:	bf00      	nop
}
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	330b      	adds	r3, #11
 8000a6a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a76:	2b07      	cmp	r3, #7
 8000a78:	f200 80d0 	bhi.w	8000c1c <APPE_SysUserEvtRx+0x1c0>
 8000a7c:	a201      	add	r2, pc, #4	; (adr r2, 8000a84 <APPE_SysUserEvtRx+0x28>)
 8000a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a82:	bf00      	nop
 8000a84:	08000aa5 	.word	0x08000aa5
 8000a88:	08000b37 	.word	0x08000b37
 8000a8c:	08000b59 	.word	0x08000b59
 8000a90:	08000c1d 	.word	0x08000c1d
 8000a94:	08000b9d 	.word	0x08000b9d
 8000a98:	08000bc1 	.word	0x08000bc1
 8000a9c:	08000bdd 	.word	0x08000bdd
 8000aa0:	08000c01 	.word	0x08000c01
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f007 fcbf 	bl	800842c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000aae:	485e      	ldr	r0, [pc, #376]	; (8000c28 <APPE_SysUserEvtRx+0x1cc>)
 8000ab0:	f008 fa86 	bl	8008fc0 <DbgTraceGetFileName>
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f240 136d 	movw	r3, #365	; 0x16d
 8000aba:	4a5c      	ldr	r2, [pc, #368]	; (8000c2c <APPE_SysUserEvtRx+0x1d0>)
 8000abc:	485c      	ldr	r0, [pc, #368]	; (8000c30 <APPE_SysUserEvtRx+0x1d4>)
 8000abe:	f00b fb07 	bl	800c0d0 <iprintf>
 8000ac2:	7b3b      	ldrb	r3, [r7, #12]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	7b7b      	ldrb	r3, [r7, #13]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	4859      	ldr	r0, [pc, #356]	; (8000c34 <APPE_SysUserEvtRx+0x1d8>)
 8000ace:	f00b faff 	bl	800c0d0 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000ad2:	4855      	ldr	r0, [pc, #340]	; (8000c28 <APPE_SysUserEvtRx+0x1cc>)
 8000ad4:	f008 fa74 	bl	8008fc0 <DbgTraceGetFileName>
 8000ad8:	4601      	mov	r1, r0
 8000ada:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8000ade:	4a53      	ldr	r2, [pc, #332]	; (8000c2c <APPE_SysUserEvtRx+0x1d0>)
 8000ae0:	4853      	ldr	r0, [pc, #332]	; (8000c30 <APPE_SysUserEvtRx+0x1d4>)
 8000ae2:	f00b faf5 	bl	800c0d0 <iprintf>
 8000ae6:	7c3b      	ldrb	r3, [r7, #16]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4853      	ldr	r0, [pc, #332]	; (8000c38 <APPE_SysUserEvtRx+0x1dc>)
 8000aec:	f00b faf0 	bl	800c0d0 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000af0:	484d      	ldr	r0, [pc, #308]	; (8000c28 <APPE_SysUserEvtRx+0x1cc>)
 8000af2:	f008 fa65 	bl	8008fc0 <DbgTraceGetFileName>
 8000af6:	4601      	mov	r1, r0
 8000af8:	f240 136f 	movw	r3, #367	; 0x16f
 8000afc:	4a4b      	ldr	r2, [pc, #300]	; (8000c2c <APPE_SysUserEvtRx+0x1d0>)
 8000afe:	484c      	ldr	r0, [pc, #304]	; (8000c30 <APPE_SysUserEvtRx+0x1d4>)
 8000b00:	f00b fae6 	bl	800c0d0 <iprintf>
 8000b04:	7dbb      	ldrb	r3, [r7, #22]
 8000b06:	4619      	mov	r1, r3
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	7e3b      	ldrb	r3, [r7, #24]
 8000b0e:	484b      	ldr	r0, [pc, #300]	; (8000c3c <APPE_SysUserEvtRx+0x1e0>)
 8000b10:	f00b fade 	bl	800c0d0 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000b14:	4844      	ldr	r0, [pc, #272]	; (8000c28 <APPE_SysUserEvtRx+0x1cc>)
 8000b16:	f008 fa53 	bl	8008fc0 <DbgTraceGetFileName>
 8000b1a:	4601      	mov	r1, r0
 8000b1c:	f240 1371 	movw	r3, #369	; 0x171
 8000b20:	4a42      	ldr	r2, [pc, #264]	; (8000c2c <APPE_SysUserEvtRx+0x1d0>)
 8000b22:	4843      	ldr	r0, [pc, #268]	; (8000c30 <APPE_SysUserEvtRx+0x1d4>)
 8000b24:	f00b fad4 	bl	800c0d0 <iprintf>
 8000b28:	4845      	ldr	r0, [pc, #276]	; (8000c40 <APPE_SysUserEvtRx+0x1e4>)
 8000b2a:	f00b fad1 	bl	800c0d0 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 f8e0 	bl	8000cf4 <APPE_SysEvtReadyProcessing>
    break;
 8000b34:	e073      	b.n	8000c1e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000b36:	483c      	ldr	r0, [pc, #240]	; (8000c28 <APPE_SysUserEvtRx+0x1cc>)
 8000b38:	f008 fa42 	bl	8008fc0 <DbgTraceGetFileName>
 8000b3c:	4601      	mov	r1, r0
 8000b3e:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8000b42:	4a3a      	ldr	r2, [pc, #232]	; (8000c2c <APPE_SysUserEvtRx+0x1d0>)
 8000b44:	483a      	ldr	r0, [pc, #232]	; (8000c30 <APPE_SysUserEvtRx+0x1d4>)
 8000b46:	f00b fac3 	bl	800c0d0 <iprintf>
 8000b4a:	483e      	ldr	r0, [pc, #248]	; (8000c44 <APPE_SysUserEvtRx+0x1e8>)
 8000b4c:	f00b fac0 	bl	800c0d0 <iprintf>
    APPE_SysEvtError(pPayload);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f885 	bl	8000c60 <APPE_SysEvtError>
    break;
 8000b56:	e062      	b.n	8000c1e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000b58:	4833      	ldr	r0, [pc, #204]	; (8000c28 <APPE_SysUserEvtRx+0x1cc>)
 8000b5a:	f008 fa31 	bl	8008fc0 <DbgTraceGetFileName>
 8000b5e:	4601      	mov	r1, r0
 8000b60:	f240 137b 	movw	r3, #379	; 0x17b
 8000b64:	4a31      	ldr	r2, [pc, #196]	; (8000c2c <APPE_SysUserEvtRx+0x1d0>)
 8000b66:	4832      	ldr	r0, [pc, #200]	; (8000c30 <APPE_SysUserEvtRx+0x1d4>)
 8000b68:	f00b fab2 	bl	800c0d0 <iprintf>
 8000b6c:	4836      	ldr	r0, [pc, #216]	; (8000c48 <APPE_SysUserEvtRx+0x1ec>)
 8000b6e:	f00b fb1d 	bl	800c1ac <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000b72:	482d      	ldr	r0, [pc, #180]	; (8000c28 <APPE_SysUserEvtRx+0x1cc>)
 8000b74:	f008 fa24 	bl	8008fc0 <DbgTraceGetFileName>
 8000b78:	4601      	mov	r1, r0
 8000b7a:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8000b7e:	4a2b      	ldr	r2, [pc, #172]	; (8000c2c <APPE_SysUserEvtRx+0x1d0>)
 8000b80:	482b      	ldr	r0, [pc, #172]	; (8000c30 <APPE_SysUserEvtRx+0x1d4>)
 8000b82:	f00b faa5 	bl	800c0d0 <iprintf>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	6819      	ldr	r1, [r3, #0]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	3302      	adds	r3, #2
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	461a      	mov	r2, r3
 8000b94:	482d      	ldr	r0, [pc, #180]	; (8000c4c <APPE_SysUserEvtRx+0x1f0>)
 8000b96:	f00b fa9b 	bl	800c0d0 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8000b9a:	e040      	b.n	8000c1e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000b9c:	4822      	ldr	r0, [pc, #136]	; (8000c28 <APPE_SysUserEvtRx+0x1cc>)
 8000b9e:	f008 fa0f 	bl	8008fc0 <DbgTraceGetFileName>
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8000ba8:	4a20      	ldr	r2, [pc, #128]	; (8000c2c <APPE_SysUserEvtRx+0x1d0>)
 8000baa:	4821      	ldr	r0, [pc, #132]	; (8000c30 <APPE_SysUserEvtRx+0x1d4>)
 8000bac:	f00b fa90 	bl	800c0d0 <iprintf>
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4825      	ldr	r0, [pc, #148]	; (8000c50 <APPE_SysUserEvtRx+0x1f4>)
 8000bba:	f00b fa89 	bl	800c0d0 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8000bbe:	e02e      	b.n	8000c1e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000bc0:	4819      	ldr	r0, [pc, #100]	; (8000c28 <APPE_SysUserEvtRx+0x1cc>)
 8000bc2:	f008 f9fd 	bl	8008fc0 <DbgTraceGetFileName>
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	f240 1387 	movw	r3, #391	; 0x187
 8000bcc:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <APPE_SysUserEvtRx+0x1d0>)
 8000bce:	4818      	ldr	r0, [pc, #96]	; (8000c30 <APPE_SysUserEvtRx+0x1d4>)
 8000bd0:	f00b fa7e 	bl	800c0d0 <iprintf>
 8000bd4:	481f      	ldr	r0, [pc, #124]	; (8000c54 <APPE_SysUserEvtRx+0x1f8>)
 8000bd6:	f00b fa7b 	bl	800c0d0 <iprintf>
    break;
 8000bda:	e020      	b.n	8000c1e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000bdc:	4812      	ldr	r0, [pc, #72]	; (8000c28 <APPE_SysUserEvtRx+0x1cc>)
 8000bde:	f008 f9ef 	bl	8008fc0 <DbgTraceGetFileName>
 8000be2:	4601      	mov	r1, r0
 8000be4:	f240 138b 	movw	r3, #395	; 0x18b
 8000be8:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <APPE_SysUserEvtRx+0x1d0>)
 8000bea:	4811      	ldr	r0, [pc, #68]	; (8000c30 <APPE_SysUserEvtRx+0x1d4>)
 8000bec:	f00b fa70 	bl	800c0d0 <iprintf>
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4817      	ldr	r0, [pc, #92]	; (8000c58 <APPE_SysUserEvtRx+0x1fc>)
 8000bfa:	f00b fa69 	bl	800c0d0 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8000bfe:	e00e      	b.n	8000c1e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8000c00:	4809      	ldr	r0, [pc, #36]	; (8000c28 <APPE_SysUserEvtRx+0x1cc>)
 8000c02:	f008 f9dd 	bl	8008fc0 <DbgTraceGetFileName>
 8000c06:	4601      	mov	r1, r0
 8000c08:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <APPE_SysUserEvtRx+0x1d0>)
 8000c0e:	4808      	ldr	r0, [pc, #32]	; (8000c30 <APPE_SysUserEvtRx+0x1d4>)
 8000c10:	f00b fa5e 	bl	800c0d0 <iprintf>
 8000c14:	4811      	ldr	r0, [pc, #68]	; (8000c5c <APPE_SysUserEvtRx+0x200>)
 8000c16:	f00b fa5b 	bl	800c0d0 <iprintf>
    break;
 8000c1a:	e000      	b.n	8000c1e <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8000c1c:	bf00      	nop
  }

  return;
 8000c1e:	bf00      	nop
}
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	0800cf84 	.word	0x0800cf84
 8000c2c:	0800e04c 	.word	0x0800e04c
 8000c30:	0800cf9c 	.word	0x0800cf9c
 8000c34:	0800cfb0 	.word	0x0800cfb0
 8000c38:	0800cfd4 	.word	0x0800cfd4
 8000c3c:	0800cff0 	.word	0x0800cff0
 8000c40:	0800d008 	.word	0x0800d008
 8000c44:	0800d028 	.word	0x0800d028
 8000c48:	0800d04c 	.word	0x0800d04c
 8000c4c:	0800d09c 	.word	0x0800d09c
 8000c50:	0800d0c4 	.word	0x0800d0c4
 8000c54:	0800d100 	.word	0x0800d100
 8000c58:	0800d124 	.word	0x0800d124
 8000c5c:	0800d160 	.word	0x0800d160

08000c60 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	330b      	adds	r3, #11
 8000c6e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3302      	adds	r3, #2
 8000c74:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <APPE_SysEvtError+0x7c>)
 8000c78:	f008 f9a2 	bl	8008fc0 <DbgTraceGetFileName>
 8000c7c:	4601      	mov	r1, r0
 8000c7e:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8000c82:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <APPE_SysEvtError+0x80>)
 8000c84:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <APPE_SysEvtError+0x84>)
 8000c86:	f00b fa23 	bl	800c0d0 <iprintf>
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4815      	ldr	r0, [pc, #84]	; (8000ce8 <APPE_SysEvtError+0x88>)
 8000c92:	f00b fa1d 	bl	800c0d0 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10d      	bne.n	8000cba <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000c9e:	480f      	ldr	r0, [pc, #60]	; (8000cdc <APPE_SysEvtError+0x7c>)
 8000ca0:	f008 f98e 	bl	8008fc0 <DbgTraceGetFileName>
 8000ca4:	4601      	mov	r1, r0
 8000ca6:	f240 13ad 	movw	r3, #429	; 0x1ad
 8000caa:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <APPE_SysEvtError+0x80>)
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <APPE_SysEvtError+0x84>)
 8000cae:	f00b fa0f 	bl	800c0d0 <iprintf>
 8000cb2:	480e      	ldr	r0, [pc, #56]	; (8000cec <APPE_SysEvtError+0x8c>)
 8000cb4:	f00b fa7a 	bl	800c1ac <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000cb8:	e00d      	b.n	8000cd6 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000cba:	4808      	ldr	r0, [pc, #32]	; (8000cdc <APPE_SysEvtError+0x7c>)
 8000cbc:	f008 f980 	bl	8008fc0 <DbgTraceGetFileName>
 8000cc0:	4601      	mov	r1, r0
 8000cc2:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000cc6:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <APPE_SysEvtError+0x80>)
 8000cc8:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <APPE_SysEvtError+0x84>)
 8000cca:	f00b fa01 	bl	800c0d0 <iprintf>
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <APPE_SysEvtError+0x90>)
 8000cd0:	f00b fa6c 	bl	800c1ac <puts>
  return;
 8000cd4:	bf00      	nop
}
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	0800cf84 	.word	0x0800cf84
 8000ce0:	0800e060 	.word	0x0800e060
 8000ce4:	0800cf9c 	.word	0x0800cf9c
 8000ce8:	0800d184 	.word	0x0800d184
 8000cec:	0800d1b4 	.word	0x0800d1b4
 8000cf0:	0800d1f0 	.word	0x0800d1f0

08000cf4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	330b      	adds	r3, #11
 8000d18:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d146      	bne.n	8000db6 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8000d28:	4836      	ldr	r0, [pc, #216]	; (8000e04 <APPE_SysEvtReadyProcessing+0x110>)
 8000d2a:	f008 f949 	bl	8008fc0 <DbgTraceGetFileName>
 8000d2e:	4601      	mov	r1, r0
 8000d30:	f240 13c7 	movw	r3, #455	; 0x1c7
 8000d34:	4a34      	ldr	r2, [pc, #208]	; (8000e08 <APPE_SysEvtReadyProcessing+0x114>)
 8000d36:	4835      	ldr	r0, [pc, #212]	; (8000e0c <APPE_SysEvtReadyProcessing+0x118>)
 8000d38:	f00b f9ca 	bl	800c0d0 <iprintf>
 8000d3c:	4834      	ldr	r0, [pc, #208]	; (8000e10 <APPE_SysEvtReadyProcessing+0x11c>)
 8000d3e:	f00b fa35 	bl	800c1ac <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000d42:	f7ff fc4f 	bl	80005e4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000d46:	230f      	movs	r3, #15
 8000d48:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000d4a:	237f      	movs	r3, #127	; 0x7f
 8000d4c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000d4e:	f7ff fd8f 	bl	8000870 <LL_DBGMCU_GetRevisionID>
 8000d52:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8000d54:	482b      	ldr	r0, [pc, #172]	; (8000e04 <APPE_SysEvtReadyProcessing+0x110>)
 8000d56:	f008 f933 	bl	8008fc0 <DbgTraceGetFileName>
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	f240 13df 	movw	r3, #479	; 0x1df
 8000d60:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <APPE_SysEvtReadyProcessing+0x114>)
 8000d62:	482a      	ldr	r0, [pc, #168]	; (8000e0c <APPE_SysEvtReadyProcessing+0x118>)
 8000d64:	f00b f9b4 	bl	800c0d0 <iprintf>
 8000d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d6a:	482a      	ldr	r0, [pc, #168]	; (8000e14 <APPE_SysEvtReadyProcessing+0x120>)
 8000d6c:	f00b f9b0 	bl	800c0d0 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000d76:	f7ff fd6d 	bl	8000854 <LL_DBGMCU_GetDeviceID>
 8000d7a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8000d7c:	4821      	ldr	r0, [pc, #132]	; (8000e04 <APPE_SysEvtReadyProcessing+0x110>)
 8000d7e:	f008 f91f 	bl	8008fc0 <DbgTraceGetFileName>
 8000d82:	4601      	mov	r1, r0
 8000d84:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
 8000d88:	4a1f      	ldr	r2, [pc, #124]	; (8000e08 <APPE_SysEvtReadyProcessing+0x114>)
 8000d8a:	4820      	ldr	r0, [pc, #128]	; (8000e0c <APPE_SysEvtReadyProcessing+0x118>)
 8000d8c:	f00b f9a0 	bl	800c0d0 <iprintf>
 8000d90:	6a39      	ldr	r1, [r7, #32]
 8000d92:	4821      	ldr	r0, [pc, #132]	; (8000e18 <APPE_SysEvtReadyProcessing+0x124>)
 8000d94:	f00b f99c 	bl	800c0d0 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8000d98:	6a3b      	ldr	r3, [r7, #32]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	4618      	mov	r0, r3
 8000da4:	f007 fb2c 	bl	8008400 <SHCI_C2_Config>

    APP_BLE_Init();
 8000da8:	f008 fef4 	bl	8009b94 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000dac:	2100      	movs	r1, #0
 8000dae:	2001      	movs	r0, #1
 8000db0:	f00a fe5e 	bl	800ba70 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000db4:	e022      	b.n	8000dfc <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d110      	bne.n	8000de0 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8000dbe:	4811      	ldr	r0, [pc, #68]	; (8000e04 <APPE_SysEvtReadyProcessing+0x110>)
 8000dc0:	f008 f8fe 	bl	8008fc0 <DbgTraceGetFileName>
 8000dc4:	4601      	mov	r1, r0
 8000dc6:	f240 13f1 	movw	r3, #497	; 0x1f1
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <APPE_SysEvtReadyProcessing+0x114>)
 8000dcc:	480f      	ldr	r0, [pc, #60]	; (8000e0c <APPE_SysEvtReadyProcessing+0x118>)
 8000dce:	f00b f97f 	bl	800c0d0 <iprintf>
 8000dd2:	4812      	ldr	r0, [pc, #72]	; (8000e1c <APPE_SysEvtReadyProcessing+0x128>)
 8000dd4:	f00b f97c 	bl	800c0d0 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
  return;
 8000dde:	e00d      	b.n	8000dfc <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8000de0:	4808      	ldr	r0, [pc, #32]	; (8000e04 <APPE_SysEvtReadyProcessing+0x110>)
 8000de2:	f008 f8ed 	bl	8008fc0 <DbgTraceGetFileName>
 8000de6:	4601      	mov	r1, r0
 8000de8:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <APPE_SysEvtReadyProcessing+0x114>)
 8000dee:	4807      	ldr	r0, [pc, #28]	; (8000e0c <APPE_SysEvtReadyProcessing+0x118>)
 8000df0:	f00b f96e 	bl	800c0d0 <iprintf>
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <APPE_SysEvtReadyProcessing+0x12c>)
 8000df6:	f00b f96b 	bl	800c0d0 <iprintf>
  return;
 8000dfa:	bf00      	nop
}
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	0800cf84 	.word	0x0800cf84
 8000e08:	0800e074 	.word	0x0800e074
 8000e0c:	0800cf9c 	.word	0x0800cf9c
 8000e10:	0800d228 	.word	0x0800d228
 8000e14:	0800d244 	.word	0x0800d244
 8000e18:	0800d268 	.word	0x0800d268
 8000e1c:	0800d288 	.word	0x0800d288
 8000e20:	0800d2bc 	.word	0x0800d2bc

08000e24 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f00a fe50 	bl	800bad0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000e38:	bf00      	nop
}
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f00a fe3e 	bl	800bad0 <UTIL_SEQ_Run>
  return;
 8000e54:	bf00      	nop
}
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000e64:	2100      	movs	r1, #0
 8000e66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e6a:	f00a ff4f 	bl	800bd0c <UTIL_SEQ_SetTask>
  return;
 8000e6e:	bf00      	nop
}
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f00a ffb0 	bl	800bde4 <UTIL_SEQ_SetEvt>
  return;
 8000e84:	bf00      	nop
}
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000e94:	2002      	movs	r0, #2
 8000e96:	f00a ffc5 	bl	800be24 <UTIL_SEQ_WaitEvt>
  return;
 8000e9a:	bf00      	nop
}
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ) //TODO
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	2b10      	cmp	r3, #16
 8000eb0:	d006      	beq.n	8000ec0 <HAL_GPIO_EXTI_Callback+0x1e>
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	dc0d      	bgt.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x30>
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d005      	beq.n	8000ec6 <HAL_GPIO_EXTI_Callback+0x24>
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d006      	beq.n	8000ecc <HAL_GPIO_EXTI_Callback+0x2a>
    case B3_Pin:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000ebe:	e008      	b.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 8000ec0:	f009 f9fa 	bl	800a2b8 <APP_BLE_Key_Button1_Action>
      break;
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8000ec6:	f009 fa07 	bl	800a2d8 <APP_BLE_Key_Button2_Action>
      break;
 8000eca:	e003      	b.n	8000ed4 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8000ecc:	f009 fa0a 	bl	800a2e4 <APP_BLE_Key_Button3_Action>
      break;
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8000ed2:	bf00      	nop

  }
  return;
 8000ed4:	bf00      	nop
}
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <LL_EXTI_EnableIT_0_31>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <LL_EXTI_EnableIT_0_31+0x24>)
 8000ee6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000eea:	4905      	ldr	r1, [pc, #20]	; (8000f00 <LL_EXTI_EnableIT_0_31+0x24>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	58000800 	.word	0x58000800

08000f04 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4904      	ldr	r1, [pc, #16]	; (8000f24 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]

}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	58000800 	.word	0x58000800

08000f28 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <ReadRtcSsrValue+0x3c>)
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <ReadRtcSsrValue+0x3c>)
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000f3e:	e005      	b.n	8000f4c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <ReadRtcSsrValue+0x3c>)
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d1f5      	bne.n	8000f40 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000f54:	683b      	ldr	r3, [r7, #0]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40002800 	.word	0x40002800

08000f68 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	460a      	mov	r2, r1
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	4613      	mov	r3, r2
 8000f76:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000f78:	79ba      	ldrb	r2, [r7, #6]
 8000f7a:	491d      	ldr	r1, [pc, #116]	; (8000ff0 <LinkTimerAfter+0x88>)
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	440b      	add	r3, r1
 8000f86:	3315      	adds	r3, #21
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d009      	beq.n	8000fa6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	4916      	ldr	r1, [pc, #88]	; (8000ff0 <LinkTimerAfter+0x88>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	440b      	add	r3, r1
 8000fa0:	3314      	adds	r3, #20
 8000fa2:	79fa      	ldrb	r2, [r7, #7]
 8000fa4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	4911      	ldr	r1, [pc, #68]	; (8000ff0 <LinkTimerAfter+0x88>)
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3315      	adds	r3, #21
 8000fb6:	7bfa      	ldrb	r2, [r7, #15]
 8000fb8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <LinkTimerAfter+0x88>)
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3314      	adds	r3, #20
 8000fca:	79ba      	ldrb	r2, [r7, #6]
 8000fcc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000fce:	79ba      	ldrb	r2, [r7, #6]
 8000fd0:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <LinkTimerAfter+0x88>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	3315      	adds	r3, #21
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	701a      	strb	r2, [r3, #0]

  return;
 8000fe2:	bf00      	nop
}
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	200000e4 	.word	0x200000e4

08000ff4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	460a      	mov	r2, r1
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	4613      	mov	r3, r2
 8001002:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <LinkTimerBefore+0xb8>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	79ba      	ldrb	r2, [r7, #6]
 800100c:	429a      	cmp	r2, r3
 800100e:	d032      	beq.n	8001076 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001010:	79ba      	ldrb	r2, [r7, #6]
 8001012:	4927      	ldr	r1, [pc, #156]	; (80010b0 <LinkTimerBefore+0xbc>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	440b      	add	r3, r1
 800101e:	3314      	adds	r3, #20
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	4922      	ldr	r1, [pc, #136]	; (80010b0 <LinkTimerBefore+0xbc>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	440b      	add	r3, r1
 8001032:	3315      	adds	r3, #21
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	491d      	ldr	r1, [pc, #116]	; (80010b0 <LinkTimerBefore+0xbc>)
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	440b      	add	r3, r1
 8001046:	3315      	adds	r3, #21
 8001048:	79ba      	ldrb	r2, [r7, #6]
 800104a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	4918      	ldr	r1, [pc, #96]	; (80010b0 <LinkTimerBefore+0xbc>)
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	440b      	add	r3, r1
 800105a:	3314      	adds	r3, #20
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001060:	79ba      	ldrb	r2, [r7, #6]
 8001062:	4913      	ldr	r1, [pc, #76]	; (80010b0 <LinkTimerBefore+0xbc>)
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	3314      	adds	r3, #20
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001074:	e014      	b.n	80010a0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001076:	79fa      	ldrb	r2, [r7, #7]
 8001078:	490d      	ldr	r1, [pc, #52]	; (80010b0 <LinkTimerBefore+0xbc>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	3315      	adds	r3, #21
 8001086:	79ba      	ldrb	r2, [r7, #6]
 8001088:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800108a:	79ba      	ldrb	r2, [r7, #6]
 800108c:	4908      	ldr	r1, [pc, #32]	; (80010b0 <LinkTimerBefore+0xbc>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	3314      	adds	r3, #20
 800109a:	79fa      	ldrb	r2, [r7, #7]
 800109c:	701a      	strb	r2, [r3, #0]
  return;
 800109e:	bf00      	nop
}
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000174 	.word	0x20000174
 80010b0:	200000e4 	.word	0x200000e4

080010b4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010be:	4b4e      	ldr	r3, [pc, #312]	; (80011f8 <linkTimer+0x144>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b06      	cmp	r3, #6
 80010c6:	d118      	bne.n	80010fa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80010c8:	4b4b      	ldr	r3, [pc, #300]	; (80011f8 <linkTimer+0x144>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <linkTimer+0x148>)
 80010d0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80010d2:	4a49      	ldr	r2, [pc, #292]	; (80011f8 <linkTimer+0x144>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80010d8:	79fa      	ldrb	r2, [r7, #7]
 80010da:	4949      	ldr	r1, [pc, #292]	; (8001200 <linkTimer+0x14c>)
 80010dc:	4613      	mov	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	440b      	add	r3, r1
 80010e6:	3315      	adds	r3, #21
 80010e8:	2206      	movs	r2, #6
 80010ea:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010ec:	4b45      	ldr	r3, [pc, #276]	; (8001204 <linkTimer+0x150>)
 80010ee:	f04f 32ff 	mov.w	r2, #4294967295
 80010f2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	81fb      	strh	r3, [r7, #14]
 80010f8:	e078      	b.n	80011ec <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80010fa:	f000 f909 	bl	8001310 <ReturnTimeElapsed>
 80010fe:	4603      	mov	r3, r0
 8001100:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001102:	79fa      	ldrb	r2, [r7, #7]
 8001104:	493e      	ldr	r1, [pc, #248]	; (8001200 <linkTimer+0x14c>)
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	440b      	add	r3, r1
 8001110:	3308      	adds	r3, #8
 8001112:	6819      	ldr	r1, [r3, #0]
 8001114:	89fb      	ldrh	r3, [r7, #14]
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	4419      	add	r1, r3
 800111a:	4839      	ldr	r0, [pc, #228]	; (8001200 <linkTimer+0x14c>)
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	4403      	add	r3, r0
 8001126:	3308      	adds	r3, #8
 8001128:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	4934      	ldr	r1, [pc, #208]	; (8001200 <linkTimer+0x14c>)
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	3308      	adds	r3, #8
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <linkTimer+0x144>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4619      	mov	r1, r3
 8001146:	4a2e      	ldr	r2, [pc, #184]	; (8001200 <linkTimer+0x14c>)
 8001148:	460b      	mov	r3, r1
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	440b      	add	r3, r1
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	3308      	adds	r3, #8
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	429a      	cmp	r2, r3
 800115a:	d337      	bcc.n	80011cc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <linkTimer+0x144>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001162:	7b7a      	ldrb	r2, [r7, #13]
 8001164:	4926      	ldr	r1, [pc, #152]	; (8001200 <linkTimer+0x14c>)
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	440b      	add	r3, r1
 8001170:	3315      	adds	r3, #21
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001176:	e013      	b.n	80011a0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001178:	7b7a      	ldrb	r2, [r7, #13]
 800117a:	4921      	ldr	r1, [pc, #132]	; (8001200 <linkTimer+0x14c>)
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	440b      	add	r3, r1
 8001186:	3315      	adds	r3, #21
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800118c:	7b7a      	ldrb	r2, [r7, #13]
 800118e:	491c      	ldr	r1, [pc, #112]	; (8001200 <linkTimer+0x14c>)
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	3315      	adds	r3, #21
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d00b      	beq.n	80011be <linkTimer+0x10a>
 80011a6:	7b3a      	ldrb	r2, [r7, #12]
 80011a8:	4915      	ldr	r1, [pc, #84]	; (8001200 <linkTimer+0x14c>)
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	440b      	add	r3, r1
 80011b4:	3308      	adds	r3, #8
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d2dc      	bcs.n	8001178 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80011be:	7b7a      	ldrb	r2, [r7, #13]
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fecf 	bl	8000f68 <LinkTimerAfter>
 80011ca:	e00f      	b.n	80011ec <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <linkTimer+0x144>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff0c 	bl	8000ff4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <linkTimer+0x144>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <linkTimer+0x148>)
 80011e4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <linkTimer+0x144>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80011ec:	89fb      	ldrh	r3, [r7, #14]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000174 	.word	0x20000174
 80011fc:	20000175 	.word	0x20000175
 8001200:	200000e4 	.word	0x200000e4
 8001204:	20000178 	.word	0x20000178

08001208 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	460a      	mov	r2, r1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001218:	4b39      	ldr	r3, [pc, #228]	; (8001300 <UnlinkTimer+0xf8>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	79fa      	ldrb	r2, [r7, #7]
 8001220:	429a      	cmp	r2, r3
 8001222:	d111      	bne.n	8001248 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <UnlinkTimer+0xf8>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b36      	ldr	r3, [pc, #216]	; (8001304 <UnlinkTimer+0xfc>)
 800122c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800122e:	79fa      	ldrb	r2, [r7, #7]
 8001230:	4935      	ldr	r1, [pc, #212]	; (8001308 <UnlinkTimer+0x100>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	3315      	adds	r3, #21
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <UnlinkTimer+0xf8>)
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e03e      	b.n	80012c6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001248:	79fa      	ldrb	r2, [r7, #7]
 800124a:	492f      	ldr	r1, [pc, #188]	; (8001308 <UnlinkTimer+0x100>)
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	440b      	add	r3, r1
 8001256:	3314      	adds	r3, #20
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	492a      	ldr	r1, [pc, #168]	; (8001308 <UnlinkTimer+0x100>)
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	440b      	add	r3, r1
 800126a:	3315      	adds	r3, #21
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001270:	79f9      	ldrb	r1, [r7, #7]
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	4824      	ldr	r0, [pc, #144]	; (8001308 <UnlinkTimer+0x100>)
 8001276:	460b      	mov	r3, r1
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	440b      	add	r3, r1
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4403      	add	r3, r0
 8001280:	3315      	adds	r3, #21
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2d8      	uxtb	r0, r3
 8001286:	4920      	ldr	r1, [pc, #128]	; (8001308 <UnlinkTimer+0x100>)
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	3315      	adds	r3, #21
 8001294:	4602      	mov	r2, r0
 8001296:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001298:	7bbb      	ldrb	r3, [r7, #14]
 800129a:	2b06      	cmp	r3, #6
 800129c:	d013      	beq.n	80012c6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800129e:	79f9      	ldrb	r1, [r7, #7]
 80012a0:	7bba      	ldrb	r2, [r7, #14]
 80012a2:	4819      	ldr	r0, [pc, #100]	; (8001308 <UnlinkTimer+0x100>)
 80012a4:	460b      	mov	r3, r1
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	440b      	add	r3, r1
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4403      	add	r3, r0
 80012ae:	3314      	adds	r3, #20
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b2d8      	uxtb	r0, r3
 80012b4:	4914      	ldr	r1, [pc, #80]	; (8001308 <UnlinkTimer+0x100>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	3314      	adds	r3, #20
 80012c2:	4602      	mov	r2, r0
 80012c4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	490f      	ldr	r1, [pc, #60]	; (8001308 <UnlinkTimer+0x100>)
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	440b      	add	r3, r1
 80012d4:	330c      	adds	r3, #12
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <UnlinkTimer+0xf8>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b06      	cmp	r3, #6
 80012e2:	d107      	bne.n	80012f4 <UnlinkTimer+0xec>
 80012e4:	79bb      	ldrb	r3, [r7, #6]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d104      	bne.n	80012f4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <UnlinkTimer+0x104>)
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295
 80012f0:	601a      	str	r2, [r3, #0]
  }

  return;
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
}
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	20000174 	.word	0x20000174
 8001304:	20000175 	.word	0x20000175
 8001308:	200000e4 	.word	0x200000e4
 800130c:	20000178 	.word	0x20000178

08001310 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <ReturnTimeElapsed+0x70>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131e:	d026      	beq.n	800136e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001320:	f7ff fe02 	bl	8000f28 <ReadRtcSsrValue>
 8001324:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <ReturnTimeElapsed+0x70>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	d805      	bhi.n	800133c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <ReturnTimeElapsed+0x70>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	e00a      	b.n	8001352 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <ReturnTimeElapsed+0x74>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <ReturnTimeElapsed+0x70>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	4413      	add	r3, r2
 8001350:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <ReturnTimeElapsed+0x78>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <ReturnTimeElapsed+0x7c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	40d3      	lsrs	r3, r2
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	e001      	b.n	8001372 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	b29b      	uxth	r3, r3
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000178 	.word	0x20000178
 8001384:	20000180 	.word	0x20000180
 8001388:	2000017e 	.word	0x2000017e
 800138c:	2000017d 	.word	0x2000017d

08001390 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d108      	bne.n	80013b2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80013a0:	f7ff fdc2 	bl	8000f28 <ReadRtcSsrValue>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a21      	ldr	r2, [pc, #132]	; (800142c <RestartWakeupCounter+0x9c>)
 80013a8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80013aa:	2003      	movs	r0, #3
 80013ac:	f001 fc95 	bl	8002cda <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80013b0:	e039      	b.n	8001426 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d803      	bhi.n	80013c0 <RestartWakeupCounter+0x30>
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <RestartWakeupCounter+0xa0>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d002      	beq.n	80013c6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80013c6:	bf00      	nop
 80013c8:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <RestartWakeupCounter+0xa4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f8      	beq.n	80013c8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013d6:	4b17      	ldr	r3, [pc, #92]	; (8001434 <RestartWakeupCounter+0xa4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <RestartWakeupCounter+0xa4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013e6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <RestartWakeupCounter+0xa8>)
 80013ea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013ee:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80013f0:	2003      	movs	r0, #3
 80013f2:	f001 fc80 	bl	8002cf6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <RestartWakeupCounter+0xac>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	0c1b      	lsrs	r3, r3, #16
 80013fc:	041b      	lsls	r3, r3, #16
 80013fe:	88fa      	ldrh	r2, [r7, #6]
 8001400:	490e      	ldr	r1, [pc, #56]	; (800143c <RestartWakeupCounter+0xac>)
 8001402:	4313      	orrs	r3, r2
 8001404:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001406:	f7ff fd8f 	bl	8000f28 <ReadRtcSsrValue>
 800140a:	4603      	mov	r3, r0
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <RestartWakeupCounter+0x9c>)
 800140e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <RestartWakeupCounter+0xa4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <RestartWakeupCounter+0xa4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800141e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001420:	f3af 8000 	nop.w
  return ;
 8001424:	bf00      	nop
}
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000178 	.word	0x20000178
 8001430:	2000017d 	.word	0x2000017d
 8001434:	200001c4 	.word	0x200001c4
 8001438:	58000800 	.word	0x58000800
 800143c:	40002800 	.word	0x40002800

08001440 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001446:	4b45      	ldr	r3, [pc, #276]	; (800155c <RescheduleTimerList+0x11c>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001452:	d107      	bne.n	8001464 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001454:	bf00      	nop
 8001456:	4b42      	ldr	r3, [pc, #264]	; (8001560 <RescheduleTimerList+0x120>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f8      	bne.n	8001456 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001464:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <RescheduleTimerList+0x120>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <RescheduleTimerList+0x120>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001472:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001474:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <RescheduleTimerList+0x124>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800147a:	7bfa      	ldrb	r2, [r7, #15]
 800147c:	493a      	ldr	r1, [pc, #232]	; (8001568 <RescheduleTimerList+0x128>)
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	440b      	add	r3, r1
 8001488:	3308      	adds	r3, #8
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800148e:	f7ff ff3f 	bl	8001310 <ReturnTimeElapsed>
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	429a      	cmp	r2, r3
 800149c:	d205      	bcs.n	80014aa <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014a2:	4b32      	ldr	r3, [pc, #200]	; (800156c <RescheduleTimerList+0x12c>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e04d      	b.n	8001546 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	4a30      	ldr	r2, [pc, #192]	; (8001570 <RescheduleTimerList+0x130>)
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	b292      	uxth	r2, r2
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d906      	bls.n	80014ca <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <RescheduleTimerList+0x130>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <RescheduleTimerList+0x12c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e03d      	b.n	8001546 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <RescheduleTimerList+0x12c>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014da:	e034      	b.n	8001546 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	4922      	ldr	r1, [pc, #136]	; (8001568 <RescheduleTimerList+0x128>)
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	3308      	adds	r3, #8
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d20a      	bcs.n	800150a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	491c      	ldr	r1, [pc, #112]	; (8001568 <RescheduleTimerList+0x128>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	3308      	adds	r3, #8
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e013      	b.n	8001532 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	4916      	ldr	r1, [pc, #88]	; (8001568 <RescheduleTimerList+0x128>)
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	3308      	adds	r3, #8
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	1ac9      	subs	r1, r1, r3
 8001522:	4811      	ldr	r0, [pc, #68]	; (8001568 <RescheduleTimerList+0x128>)
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4403      	add	r3, r0
 800152e:	3308      	adds	r3, #8
 8001530:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	490c      	ldr	r1, [pc, #48]	; (8001568 <RescheduleTimerList+0x128>)
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	440b      	add	r3, r1
 8001540:	3315      	adds	r3, #21
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2b06      	cmp	r3, #6
 800154a:	d1c7      	bne.n	80014dc <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800154c:	89bb      	ldrh	r3, [r7, #12]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ff1e 	bl	8001390 <RestartWakeupCounter>

  return ;
 8001554:	bf00      	nop
}
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40002800 	.word	0x40002800
 8001560:	200001c4 	.word	0x200001c4
 8001564:	20000174 	.word	0x20000174
 8001568:	200000e4 	.word	0x200000e4
 800156c:	2000017c 	.word	0x2000017c
 8001570:	20000182 	.word	0x20000182

08001574 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800157a:	f3ef 8310 	mrs	r3, PRIMASK
 800157e:	617b      	str	r3, [r7, #20]
  return(result);
 8001580:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001588:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	22ca      	movs	r2, #202	; 0xca
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
 8001590:	4b57      	ldr	r3, [pc, #348]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2253      	movs	r2, #83	; 0x53
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001598:	4b55      	ldr	r3, [pc, #340]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	4b54      	ldr	r3, [pc, #336]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015a6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80015a8:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80015b0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015b4:	4950      	ldr	r1, [pc, #320]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	330c      	adds	r3, #12
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d16e      	bne.n	80016a8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80015ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015ce:	494a      	ldr	r1, [pc, #296]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80015de:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015e2:	4945      	ldr	r1, [pc, #276]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	3310      	adds	r3, #16
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80015f4:	4b41      	ldr	r3, [pc, #260]	; (80016fc <HW_TS_RTC_Wakeup_Handler+0x188>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d04c      	beq.n	8001698 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80015fe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001602:	493d      	ldr	r1, [pc, #244]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	330d      	adds	r3, #13
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d124      	bne.n	8001662 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161c:	2101      	movs	r1, #1
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fdf2 	bl	8001208 <UnlinkTimer>
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f383 8810 	msr	PRIMASK, r3
}
 800162e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001630:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001634:	4930      	ldr	r1, [pc, #192]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	3304      	adds	r3, #4
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fa32 	bl	8001ab4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	22ca      	movs	r2, #202	; 0xca
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2253      	movs	r2, #83	; 0x53
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
 8001660:	e012      	b.n	8001688 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f383 8810 	msr	PRIMASK, r3
}
 800166c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800166e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f99a 	bl	80019ac <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001678:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	22ca      	movs	r2, #202	; 0xca
 800167e:	625a      	str	r2, [r3, #36]	; 0x24
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2253      	movs	r2, #83	; 0x53
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	4619      	mov	r1, r3
 8001690:	69b8      	ldr	r0, [r7, #24]
 8001692:	f000 fa95 	bl	8001bc0 <HW_TS_RTC_Int_AppNot>
 8001696:	e022      	b.n	80016de <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001698:	f7ff fed2 	bl	8001440 <RescheduleTimerList>
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f383 8810 	msr	PRIMASK, r3
}
 80016a6:	e01a      	b.n	80016de <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80016a8:	bf00      	nop
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f8      	beq.n	80016aa <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80016c8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80016cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f383 8810 	msr	PRIMASK, r3
}
 80016dc:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	22ff      	movs	r2, #255	; 0xff
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80016e6:	bf00      	nop
}
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200001c4 	.word	0x200001c4
 80016f4:	20000174 	.word	0x20000174
 80016f8:	200000e4 	.word	0x200000e4
 80016fc:	2000017c 	.word	0x2000017c
 8001700:	58000800 	.word	0x58000800

08001704 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001710:	4b5e      	ldr	r3, [pc, #376]	; (800188c <HW_TS_Init+0x188>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	22ca      	movs	r2, #202	; 0xca
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
 8001718:	4b5c      	ldr	r3, [pc, #368]	; (800188c <HW_TS_Init+0x188>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2253      	movs	r2, #83	; 0x53
 800171e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001720:	4b5b      	ldr	r3, [pc, #364]	; (8001890 <HW_TS_Init+0x18c>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a5a      	ldr	r2, [pc, #360]	; (8001890 <HW_TS_Init+0x18c>)
 8001726:	f043 0320 	orr.w	r3, r3, #32
 800172a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800172c:	4b58      	ldr	r3, [pc, #352]	; (8001890 <HW_TS_Init+0x18c>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f1c3 0304 	rsb	r3, r3, #4
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b55      	ldr	r3, [pc, #340]	; (8001894 <HW_TS_Init+0x190>)
 8001740:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001742:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HW_TS_Init+0x18c>)
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800174a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800174e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	fa92 f2a2 	rbit	r2, r2
 8001756:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	2a00      	cmp	r2, #0
 8001760:	d101      	bne.n	8001766 <HW_TS_Init+0x62>
  {
    return 32U;
 8001762:	2220      	movs	r2, #32
 8001764:	e003      	b.n	800176e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	fab2 f282 	clz	r2, r2
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	40d3      	lsrs	r3, r2
 8001770:	b2db      	uxtb	r3, r3
 8001772:	3301      	adds	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b48      	ldr	r3, [pc, #288]	; (8001898 <HW_TS_Init+0x194>)
 8001778:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800177a:	4b45      	ldr	r3, [pc, #276]	; (8001890 <HW_TS_Init+0x18c>)
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	b29b      	uxth	r3, r3
 8001780:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001784:	b29b      	uxth	r3, r3
 8001786:	3301      	adds	r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	4b44      	ldr	r3, [pc, #272]	; (800189c <HW_TS_Init+0x198>)
 800178c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800178e:	4b43      	ldr	r3, [pc, #268]	; (800189c <HW_TS_Init+0x198>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	3b01      	subs	r3, #1
 8001794:	4a40      	ldr	r2, [pc, #256]	; (8001898 <HW_TS_Init+0x194>)
 8001796:	7812      	ldrb	r2, [r2, #0]
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017a0:	4a3c      	ldr	r2, [pc, #240]	; (8001894 <HW_TS_Init+0x190>)
 80017a2:	7812      	ldrb	r2, [r2, #0]
 80017a4:	40d3      	lsrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d904      	bls.n	80017bc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HW_TS_Init+0x19c>)
 80017b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b8:	801a      	strh	r2, [r3, #0]
 80017ba:	e003      	b.n	80017c4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HW_TS_Init+0x19c>)
 80017c2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017c8:	f7ff fb9c 	bl	8000f04 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017d0:	f7ff fb84 	bl	8000edc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d13d      	bne.n	8001856 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80017da:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <HW_TS_Init+0x1a0>)
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80017e0:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <HW_TS_Init+0x1a4>)
 80017e2:	f04f 32ff 	mov.w	r2, #4294967295
 80017e6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	77fb      	strb	r3, [r7, #31]
 80017ec:	e00c      	b.n	8001808 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80017ee:	7ffa      	ldrb	r2, [r7, #31]
 80017f0:	492e      	ldr	r1, [pc, #184]	; (80018ac <HW_TS_Init+0x1a8>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	330c      	adds	r3, #12
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001802:	7ffb      	ldrb	r3, [r7, #31]
 8001804:	3301      	adds	r3, #1
 8001806:	77fb      	strb	r3, [r7, #31]
 8001808:	7ffb      	ldrb	r3, [r7, #31]
 800180a:	2b05      	cmp	r3, #5
 800180c:	d9ef      	bls.n	80017ee <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HW_TS_Init+0x1ac>)
 8001810:	2206      	movs	r2, #6
 8001812:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HW_TS_Init+0x188>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HW_TS_Init+0x188>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001822:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HW_TS_Init+0x188>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <HW_TS_Init+0x188>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001834:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <HW_TS_Init+0x1b0>)
 8001838:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800183c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800183e:	2003      	movs	r0, #3
 8001840:	f001 fa59 	bl	8002cf6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HW_TS_Init+0x188>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <HW_TS_Init+0x188>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	e009      	b.n	800186a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HW_TS_Init+0x188>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001864:	2003      	movs	r0, #3
 8001866:	f001 fa38 	bl	8002cda <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HW_TS_Init+0x188>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	22ff      	movs	r2, #255	; 0xff
 8001870:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001872:	2200      	movs	r2, #0
 8001874:	2103      	movs	r1, #3
 8001876:	2003      	movs	r0, #3
 8001878:	f001 f9ed 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800187c:	2003      	movs	r0, #3
 800187e:	f001 fa04 	bl	8002c8a <HAL_NVIC_EnableIRQ>

  return;
 8001882:	bf00      	nop
}
 8001884:	3720      	adds	r7, #32
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200001c4 	.word	0x200001c4
 8001890:	40002800 	.word	0x40002800
 8001894:	2000017d 	.word	0x2000017d
 8001898:	2000017e 	.word	0x2000017e
 800189c:	20000180 	.word	0x20000180
 80018a0:	20000182 	.word	0x20000182
 80018a4:	2000017c 	.word	0x2000017c
 80018a8:	20000178 	.word	0x20000178
 80018ac:	200000e4 	.word	0x200000e4
 80018b0:	20000174 	.word	0x20000174
 80018b4:	58000800 	.word	0x58000800

080018b8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b08b      	sub	sp, #44	; 0x2c
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018ce:	f3ef 8310 	mrs	r3, PRIMASK
 80018d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80018d4:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80018d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80018d8:	b672      	cpsid	i
}
 80018da:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80018dc:	e004      	b.n	80018e8 <HW_TS_Create+0x30>
  {
    loop++;
 80018de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018e2:	3301      	adds	r3, #1
 80018e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80018e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ec:	2b05      	cmp	r3, #5
 80018ee:	d80c      	bhi.n	800190a <HW_TS_Create+0x52>
 80018f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018f4:	492c      	ldr	r1, [pc, #176]	; (80019a8 <HW_TS_Create+0xf0>)
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	330c      	adds	r3, #12
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1e9      	bne.n	80018de <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800190a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800190e:	2b06      	cmp	r3, #6
 8001910:	d038      	beq.n	8001984 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001912:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001916:	4924      	ldr	r1, [pc, #144]	; (80019a8 <HW_TS_Create+0xf0>)
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	330c      	adds	r3, #12
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f383 8810 	msr	PRIMASK, r3
}
 8001932:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001934:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001938:	491b      	ldr	r1, [pc, #108]	; (80019a8 <HW_TS_Create+0xf0>)
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3310      	adds	r3, #16
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800194a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800194e:	4916      	ldr	r1, [pc, #88]	; (80019a8 <HW_TS_Create+0xf0>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	330d      	adds	r3, #13
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001960:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001964:	4910      	ldr	r1, [pc, #64]	; (80019a8 <HW_TS_Create+0xf0>)
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800197a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800197c:	2300      	movs	r3, #0
 800197e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001982:	e008      	b.n	8001996 <HW_TS_Create+0xde>
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f383 8810 	msr	PRIMASK, r3
}
 800198e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001990:	2301      	movs	r3, #1
 8001992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800199a:	4618      	mov	r0, r3
 800199c:	372c      	adds	r7, #44	; 0x2c
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200000e4 	.word	0x200000e4

080019ac <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019b6:	f3ef 8310 	mrs	r3, PRIMASK
 80019ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80019bc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80019be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80019c4:	2003      	movs	r0, #3
 80019c6:	f001 f96e 	bl	8002ca6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80019ca:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <HW_TS_Stop+0xf0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	22ca      	movs	r2, #202	; 0xca
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
 80019d2:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <HW_TS_Stop+0xf0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2253      	movs	r2, #83	; 0x53
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	4930      	ldr	r1, [pc, #192]	; (8001aa0 <HW_TS_Stop+0xf4>)
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	330c      	adds	r3, #12
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d142      	bne.n	8001a78 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fc06 	bl	8001208 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80019fc:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <HW_TS_Stop+0xf8>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a02:	7cfb      	ldrb	r3, [r7, #19]
 8001a04:	2b06      	cmp	r3, #6
 8001a06:	d12f      	bne.n	8001a68 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HW_TS_Stop+0xfc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a14:	d107      	bne.n	8001a26 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a16:	bf00      	nop
 8001a18:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HW_TS_Stop+0xf0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f8      	bne.n	8001a18 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HW_TS_Stop+0xf0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HW_TS_Stop+0xf0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a34:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a36:	bf00      	nop
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HW_TS_Stop+0xf0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f8      	beq.n	8001a38 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HW_TS_Stop+0xf0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HW_TS_Stop+0xf0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a56:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HW_TS_Stop+0x100>)
 8001a5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a5e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a60:	2003      	movs	r0, #3
 8001a62:	f001 f948 	bl	8002cf6 <HAL_NVIC_ClearPendingIRQ>
 8001a66:	e007      	b.n	8001a78 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HW_TS_Stop+0x104>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	7cfa      	ldrb	r2, [r7, #19]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001a74:	f7ff fce4 	bl	8001440 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HW_TS_Stop+0xf0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	22ff      	movs	r2, #255	; 0xff
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a80:	2003      	movs	r0, #3
 8001a82:	f001 f902 	bl	8002c8a <HAL_NVIC_EnableIRQ>
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f383 8810 	msr	PRIMASK, r3
}
 8001a90:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001a92:	bf00      	nop
}
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200001c4 	.word	0x200001c4
 8001aa0:	200000e4 	.word	0x200000e4
 8001aa4:	20000174 	.word	0x20000174
 8001aa8:	40002800 	.word	0x40002800
 8001aac:	58000800 	.word	0x58000800
 8001ab0:	20000175 	.word	0x20000175

08001ab4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001ac0:	79fa      	ldrb	r2, [r7, #7]
 8001ac2:	493b      	ldr	r1, [pc, #236]	; (8001bb0 <HW_TS_Start+0xfc>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	330c      	adds	r3, #12
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d103      	bne.n	8001ae0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff66 	bl	80019ac <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8001ae4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ae8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001aea:	b672      	cpsid	i
}
 8001aec:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001aee:	2003      	movs	r0, #3
 8001af0:	f001 f8d9 	bl	8002ca6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HW_TS_Start+0x100>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	22ca      	movs	r2, #202	; 0xca
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <HW_TS_Start+0x100>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2253      	movs	r2, #83	; 0x53
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001b04:	79fa      	ldrb	r2, [r7, #7]
 8001b06:	492a      	ldr	r1, [pc, #168]	; (8001bb0 <HW_TS_Start+0xfc>)
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	330c      	adds	r3, #12
 8001b14:	2202      	movs	r2, #2
 8001b16:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001b18:	79fa      	ldrb	r2, [r7, #7]
 8001b1a:	4925      	ldr	r1, [pc, #148]	; (8001bb0 <HW_TS_Start+0xfc>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	3308      	adds	r3, #8
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001b2c:	79fa      	ldrb	r2, [r7, #7]
 8001b2e:	4920      	ldr	r1, [pc, #128]	; (8001bb0 <HW_TS_Start+0xfc>)
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	440b      	add	r3, r1
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fab6 	bl	80010b4 <linkTimer>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <HW_TS_Start+0x104>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HW_TS_Start+0x108>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	7c7a      	ldrb	r2, [r7, #17]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d002      	beq.n	8001b64 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001b5e:	f7ff fc6f 	bl	8001440 <RescheduleTimerList>
 8001b62:	e013      	b.n	8001b8c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001b64:	79fa      	ldrb	r2, [r7, #7]
 8001b66:	4912      	ldr	r1, [pc, #72]	; (8001bb0 <HW_TS_Start+0xfc>)
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3308      	adds	r3, #8
 8001b74:	6819      	ldr	r1, [r3, #0]
 8001b76:	8a7b      	ldrh	r3, [r7, #18]
 8001b78:	79fa      	ldrb	r2, [r7, #7]
 8001b7a:	1ac9      	subs	r1, r1, r3
 8001b7c:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <HW_TS_Start+0xfc>)
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4403      	add	r3, r0
 8001b88:	3308      	adds	r3, #8
 8001b8a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HW_TS_Start+0x100>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	22ff      	movs	r2, #255	; 0xff
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b94:	2003      	movs	r0, #3
 8001b96:	f001 f878 	bl	8002c8a <HAL_NVIC_EnableIRQ>
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f383 8810 	msr	PRIMASK, r3
}
 8001ba4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001ba6:	bf00      	nop
}
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200000e4 	.word	0x200000e4
 8001bb4:	200001c4 	.word	0x200001c4
 8001bb8:	20000174 	.word	0x20000174
 8001bbc:	20000175 	.word	0x20000175

08001bc0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4798      	blx	r3

  return;
 8001bd2:	bf00      	nop
}
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]
 8001bea:	4613      	mov	r3, r2
 8001bec:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10e      	bne.n	8001c1a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HW_UART_Transmit_DMA+0x80>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HW_UART_Transmit_DMA+0x84>)
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HW_UART_Transmit_DMA+0x88>)
 8001c06:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001c08:	89bb      	ldrh	r3, [r7, #12]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	4814      	ldr	r0, [pc, #80]	; (8001c60 <HW_UART_Transmit_DMA+0x84>)
 8001c10:	f003 ff02 	bl	8005a18 <HAL_UART_Transmit_DMA>
 8001c14:	4603      	mov	r3, r0
 8001c16:	75fb      	strb	r3, [r7, #23]
            break;
 8001c18:	e000      	b.n	8001c1c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001c1a:	bf00      	nop
    }

    switch (hal_status)
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d816      	bhi.n	8001c50 <HW_UART_Transmit_DMA+0x74>
 8001c22:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <HW_UART_Transmit_DMA+0x4c>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001c39 	.word	0x08001c39
 8001c2c:	08001c3f 	.word	0x08001c3f
 8001c30:	08001c45 	.word	0x08001c45
 8001c34:	08001c4b 	.word	0x08001c4b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	75bb      	strb	r3, [r7, #22]
            break;
 8001c3c:	e009      	b.n	8001c52 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75bb      	strb	r3, [r7, #22]
            break;
 8001c42:	e006      	b.n	8001c52 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001c44:	2302      	movs	r3, #2
 8001c46:	75bb      	strb	r3, [r7, #22]
            break;
 8001c48:	e003      	b.n	8001c52 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	75bb      	strb	r3, [r7, #22]
            break;
 8001c4e:	e000      	b.n	8001c52 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001c50:	bf00      	nop
    }

    return hw_status;
 8001c52:	7dbb      	ldrb	r3, [r7, #22]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000184 	.word	0x20000184
 8001c60:	200001e8 	.word	0x200001e8
 8001c64:	40013800 	.word	0x40013800

08001c68 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_UART_TxCpltCallback+0x34>)
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d107      	bne.n	8001c8c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_UART_TxCpltCallback+0x38>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_UART_TxCpltCallback+0x38>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4798      	blx	r3
            }
            break;
 8001c8a:	e001      	b.n	8001c90 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001c8c:	bf00      	nop
 8001c8e:	e000      	b.n	8001c92 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001c90:	bf00      	nop
    }

    return;
 8001c92:	bf00      	nop
}
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	20000184 	.word	0x20000184

08001ca4 <LL_RCC_LSE_SetDriveCapability>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb4:	f023 0218 	bic.w	r2, r3, #24
 8001cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_AHB1_GRP1_EnableClock>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_AHB2_GRP1_EnableClock>:
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4013      	ands	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d38:	f000 fdc0 	bl	80028bc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001d3c:	f7fe fdd6 	bl	80008ec <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d40:	f000 f814 	bl	8001d6c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d44:	f000 f888 	bl	8001e58 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001d48:	f000 f8a6 	bl	8001e98 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d4c:	f000 f97c 	bl	8002048 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d50:	f000 f968 	bl	8002024 <MX_DMA_Init>
  MX_RTC_Init();
 8001d54:	f000 f8bc 	bl	8001ed0 <MX_RTC_Init>
  MX_USB_PCD_Init();
 8001d58:	f000 f93c 	bl	8001fd4 <MX_USB_PCD_Init>
  MX_RF_Init();
 8001d5c:	f000 f8b0 	bl	8001ec0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001d60:	f7fe fdd2 	bl	8000908 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001d64:	f7ff f85e 	bl	8000e24 <MX_APPE_Process>
 8001d68:	e7fc      	b.n	8001d64 <main+0x30>
	...

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b09a      	sub	sp, #104	; 0x68
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	2248      	movs	r2, #72	; 0x48
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f00a faf6 	bl	800c36c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
 8001d8e:	615a      	str	r2, [r3, #20]
 8001d90:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da0:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f023 0303 	bic.w	r3, r3, #3
 8001dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001db6:	f001 fe21 	bl	80039fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff ff72 	bl	8001ca4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <SystemClock_Config+0xe8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dc8:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <SystemClock_Config+0xe8>)
 8001dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <SystemClock_Config+0xe8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001ddc:	2327      	movs	r3, #39	; 0x27
 8001dde:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001de6:	2301      	movs	r3, #1
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001df0:	2301      	movs	r3, #1
 8001df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001df4:	2340      	movs	r3, #64	; 0x40
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001dfc:	2360      	movs	r3, #96	; 0x60
 8001dfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e04:	f107 0320 	add.w	r3, r7, #32
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 f98b 	bl	8004124 <HAL_RCC_OscConfig>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001e14:	f000 f97a 	bl	800210c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001e18:	236f      	movs	r3, #111	; 0x6f
 8001e1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2101      	movs	r1, #1
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f002 fce7 	bl	800480c <HAL_RCC_ClockConfig>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001e44:	f000 f962 	bl	800210c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001e48:	f003 faa2 	bl	8005390 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e4c:	bf00      	nop
 8001e4e:	3768      	adds	r7, #104	; 0x68
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	58000400 	.word	0x58000400

08001e58 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b094      	sub	sp, #80	; 0x50
 8001e5c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2250      	movs	r2, #80	; 0x50
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f00a fa81 	bl	800c36c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001e6a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e6e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001e70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001e76:	2302      	movs	r3, #2
 8001e78:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001e7a:	2310      	movs	r3, #16
 8001e7c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e7e:	463b      	mov	r3, r7
 8001e80:	4618      	mov	r0, r3
 8001e82:	f003 f90f 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001e8c:	f000 f93e 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001e90:	bf00      	nop
 8001e92:	3750      	adds	r7, #80	; 0x50
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_IPCC_Init+0x20>)
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <MX_IPCC_Init+0x24>)
 8001ea0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_IPCC_Init+0x20>)
 8001ea4:	f001 fc2c 	bl	8003700 <HAL_IPCC_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001eae:	f000 f92d 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000188 	.word	0x20000188
 8001ebc:	58000c00 	.word	0x58000c00

08001ec0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <MX_RTC_Init+0x60>)
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <MX_RTC_Init+0x64>)
 8001ed8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <MX_RTC_Init+0x60>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <MX_RTC_Init+0x60>)
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <MX_RTC_Init+0x60>)
 8001ee8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001eec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <MX_RTC_Init+0x60>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <MX_RTC_Init+0x60>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <MX_RTC_Init+0x60>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <MX_RTC_Init+0x60>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f06:	480a      	ldr	r0, [pc, #40]	; (8001f30 <MX_RTC_Init+0x60>)
 8001f08:	f003 fb5a 	bl	80055c0 <HAL_RTC_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001f12:	f000 f8fb 	bl	800210c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_RTC_Init+0x60>)
 8001f1c:	f003 fc50 	bl	80057c0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001f26:	f000 f8f1 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200001c4 	.word	0x200001c4
 8001f34:	40002800 	.word	0x40002800

08001f38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f3e:	4a24      	ldr	r2, [pc, #144]	; (8001fd0 <MX_USART1_UART_Init+0x98>)
 8001f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f50:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f5e:	220c      	movs	r2, #12
 8001f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f6e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f82:	4812      	ldr	r0, [pc, #72]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f84:	f003 fcf8 	bl	8005978 <HAL_UART_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001f8e:	f000 f8bd 	bl	800210c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f92:	2100      	movs	r1, #0
 8001f94:	480d      	ldr	r0, [pc, #52]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001f96:	f004 febe 	bl	8006d16 <HAL_UARTEx_SetTxFifoThreshold>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001fa0:	f000 f8b4 	bl	800210c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4809      	ldr	r0, [pc, #36]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001fa8:	f004 fef3 	bl	8006d92 <HAL_UARTEx_SetRxFifoThreshold>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001fb2:	f000 f8ab 	bl	800210c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_USART1_UART_Init+0x94>)
 8001fb8:	f004 fe74 	bl	8006ca4 <HAL_UARTEx_DisableFifoMode>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001fc2:	f000 f8a3 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200001e8 	.word	0x200001e8
 8001fd0:	40013800 	.word	0x40013800

08001fd4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <MX_USB_PCD_Init+0x48>)
 8001fda:	4a11      	ldr	r2, [pc, #68]	; (8002020 <MX_USB_PCD_Init+0x4c>)
 8001fdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_USB_PCD_Init+0x48>)
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	; (800201c <MX_USB_PCD_Init+0x48>)
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_USB_PCD_Init+0x48>)
 8001fec:	2202      	movs	r2, #2
 8001fee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <MX_USB_PCD_Init+0x48>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_USB_PCD_Init+0x48>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <MX_USB_PCD_Init+0x48>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_USB_PCD_Init+0x48>)
 8002004:	2200      	movs	r2, #0
 8002006:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_USB_PCD_Init+0x48>)
 800200a:	f001 fbff 	bl	800380c <HAL_PCD_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002014:	f000 f87a 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200002dc 	.word	0x200002dc
 8002020:	40006800 	.word	0x40006800

08002024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002028:	2004      	movs	r0, #4
 800202a:	f7ff fe51 	bl	8001cd0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800202e:	2001      	movs	r0, #1
 8002030:	f7ff fe4e 	bl	8001cd0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8002034:	2200      	movs	r2, #0
 8002036:	210f      	movs	r1, #15
 8002038:	200b      	movs	r0, #11
 800203a:	f000 fe0c 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800203e:	200b      	movs	r0, #11
 8002040:	f000 fe23 	bl	8002c8a <HAL_NVIC_EnableIRQ>

}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205c:	2004      	movs	r0, #4
 800205e:	f7ff fe50 	bl	8001d02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	2002      	movs	r0, #2
 8002064:	f7ff fe4d 	bl	8001d02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	2001      	movs	r0, #1
 800206a:	f7ff fe4a 	bl	8001d02 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800206e:	2008      	movs	r0, #8
 8002070:	f7ff fe47 	bl	8001d02 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	2123      	movs	r1, #35	; 0x23
 8002078:	4821      	ldr	r0, [pc, #132]	; (8002100 <MX_GPIO_Init+0xb8>)
 800207a:	f001 faed 	bl	8003658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800207e:	2310      	movs	r3, #16
 8002080:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002082:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002086:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002088:	2301      	movs	r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	4619      	mov	r1, r3
 8002090:	481c      	ldr	r0, [pc, #112]	; (8002104 <MX_GPIO_Init+0xbc>)
 8002092:	f001 f971 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002096:	2323      	movs	r3, #35	; 0x23
 8002098:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	2301      	movs	r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4815      	ldr	r0, [pc, #84]	; (8002100 <MX_GPIO_Init+0xb8>)
 80020ac:	f001 f964 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80020b0:	2303      	movs	r3, #3
 80020b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ba:	2301      	movs	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4811      	ldr	r0, [pc, #68]	; (8002108 <MX_GPIO_Init+0xc0>)
 80020c4:	f001 f958 	bl	8003378 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	2006      	movs	r0, #6
 80020ce:	f000 fdc2 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020d2:	2006      	movs	r0, #6
 80020d4:	f000 fdd9 	bl	8002c8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	2007      	movs	r0, #7
 80020de:	f000 fdba 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020e2:	2007      	movs	r0, #7
 80020e4:	f000 fdd1 	bl	8002c8a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	200a      	movs	r0, #10
 80020ee:	f000 fdb2 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80020f2:	200a      	movs	r0, #10
 80020f4:	f000 fdc9 	bl	8002c8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020f8:	bf00      	nop
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	48000400 	.word	0x48000400
 8002104:	48000800 	.word	0x48000800
 8002108:	48000c00 	.word	0x48000c00

0800210c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002110:	b672      	cpsid	i
}
 8002112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002114:	e7fe      	b.n	8002114 <Error_Handler+0x8>

08002116 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800212a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_AHB2_GRP1_EnableClock>:
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002144:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4313      	orrs	r3, r2
 800214e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800215c:	68fb      	ldr	r3, [r7, #12]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <LL_AHB3_GRP1_EnableClock>:
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4313      	orrs	r3, r2
 8002180:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4013      	ands	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_APB1_GRP1_EnableClock>:
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4013      	ands	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021c0:	68fb      	ldr	r3, [r7, #12]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_APB2_GRP1_EnableClock>:
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80021d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4013      	ands	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002204:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002208:	f7ff ffaf 	bl	800216a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2100      	movs	r1, #0
 8002210:	202e      	movs	r0, #46	; 0x2e
 8002212:	f000 fd20 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002216:	202e      	movs	r0, #46	; 0x2e
 8002218:	f000 fd37 	bl	8002c8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <HAL_IPCC_MspInit+0x44>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d113      	bne.n	800225a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002232:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002236:	f7ff ff98 	bl	800216a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	202c      	movs	r0, #44	; 0x2c
 8002240:	f000 fd09 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002244:	202c      	movs	r0, #44	; 0x2c
 8002246:	f000 fd20 	bl	8002c8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	202d      	movs	r0, #45	; 0x2d
 8002250:	f000 fd01 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002254:	202d      	movs	r0, #45	; 0x2d
 8002256:	f000 fd18 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	58000c00 	.word	0x58000c00

08002268 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b096      	sub	sp, #88	; 0x58
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	2250      	movs	r2, #80	; 0x50
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f00a f877 	bl	800c36c <memset>
  if(hrtc->Instance==RTC)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <HAL_RTC_MspInit+0x64>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d11d      	bne.n	80022c4 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800228c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800228e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002292:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002294:	f107 0308 	add.w	r3, r7, #8
 8002298:	4618      	mov	r0, r3
 800229a:	f002 ff03 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80022a4:	f7ff ff32 	bl	800210c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022a8:	f7ff ff35 	bl	8002116 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80022ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022b0:	f7ff ff74 	bl	800219c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2003      	movs	r0, #3
 80022ba:	f000 fccc 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80022be:	2003      	movs	r0, #3
 80022c0:	f000 fce3 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022c4:	bf00      	nop
 80022c6:	3758      	adds	r7, #88	; 0x58
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40002800 	.word	0x40002800

080022d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b09c      	sub	sp, #112	; 0x70
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e8:	f107 030c 	add.w	r3, r7, #12
 80022ec:	2250      	movs	r2, #80	; 0x50
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00a f83b 	bl	800c36c <memset>
  if(huart->Instance==USART1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a2e      	ldr	r2, [pc, #184]	; (80023b4 <HAL_UART_MspInit+0xe4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d155      	bne.n	80023ac <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002300:	2301      	movs	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4618      	mov	r0, r3
 800230e:	f002 fec9 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002318:	f7ff fef8 	bl	800210c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800231c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002320:	f7ff ff55 	bl	80021ce <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002324:	2002      	movs	r0, #2
 8002326:	f7ff ff07 	bl	8002138 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800232a:	23c0      	movs	r3, #192	; 0xc0
 800232c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002332:	2301      	movs	r3, #1
 8002334:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800233a:	2307      	movs	r3, #7
 800233c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002342:	4619      	mov	r1, r3
 8002344:	481c      	ldr	r0, [pc, #112]	; (80023b8 <HAL_UART_MspInit+0xe8>)
 8002346:	f001 f817 	bl	8003378 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <HAL_UART_MspInit+0xec>)
 800234c:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <HAL_UART_MspInit+0xf0>)
 800234e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002352:	220f      	movs	r2, #15
 8002354:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002358:	2210      	movs	r2, #16
 800235a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <HAL_UART_MspInit+0xec>)
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_UART_MspInit+0xec>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002374:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800237a:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_UART_MspInit+0xec>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002380:	480e      	ldr	r0, [pc, #56]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002382:	f000 fcc7 	bl	8002d14 <HAL_DMA_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800238c:	f7ff febe 	bl	800210c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002394:	67da      	str	r2, [r3, #124]	; 0x7c
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_UART_MspInit+0xec>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	2024      	movs	r0, #36	; 0x24
 80023a2:	f000 fc58 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023a6:	2024      	movs	r0, #36	; 0x24
 80023a8:	f000 fc6f 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023ac:	bf00      	nop
 80023ae:	3770      	adds	r7, #112	; 0x70
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40013800 	.word	0x40013800
 80023b8:	48000400 	.word	0x48000400
 80023bc:	2000027c 	.word	0x2000027c
 80023c0:	40020008 	.word	0x40020008

080023c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b09c      	sub	sp, #112	; 0x70
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2250      	movs	r2, #80	; 0x50
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f009 ffc1 	bl	800c36c <memset>
  if(hpcd->Instance==USB)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_PCD_MspInit+0xa8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d136      	bne.n	8002462 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80023f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80023fa:	2318      	movs	r3, #24
 80023fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80023fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002402:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002404:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002408:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800240a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800240e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002414:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002416:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800241a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	4618      	mov	r0, r3
 8002422:	f002 fe3f 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800242c:	f7ff fe6e 	bl	800210c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002430:	2001      	movs	r0, #1
 8002432:	f7ff fe81 	bl	8002138 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002436:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800243a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002448:	230a      	movs	r3, #10
 800244a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002450:	4619      	mov	r1, r3
 8002452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002456:	f000 ff8f 	bl	8003378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800245a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800245e:	f7ff fe9d 	bl	800219c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002462:	bf00      	nop
 8002464:	3770      	adds	r7, #112	; 0x70
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40006800 	.word	0x40006800

08002470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002474:	e7fe      	b.n	8002474 <NMI_Handler+0x4>

08002476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247a:	e7fe      	b.n	800247a <HardFault_Handler+0x4>

0800247c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <MemManage_Handler+0x4>

08002482 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <BusFault_Handler+0x4>

08002488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <UsageFault_Handler+0x4>

0800248e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024bc:	f000 fa58 	bl	8002970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80024c8:	f7ff f854 	bl	8001574 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80024d4:	2001      	movs	r0, #1
 80024d6:	f001 f8d7 	bl	8003688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}

080024de <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80024e2:	2002      	movs	r0, #2
 80024e4:	f001 f8d0 	bl	8003688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}

080024ec <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80024f0:	2010      	movs	r0, #16
 80024f2:	f001 f8c9 	bl	8003688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <DMA1_Channel1_IRQHandler+0x10>)
 8002502:	f000 fde8 	bl	80030d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000027c 	.word	0x2000027c

08002510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <USART1_IRQHandler+0x10>)
 8002516:	f003 faff 	bl	8005b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200001e8 	.word	0x200001e8

08002524 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002528:	f009 f952 	bl	800b7d0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002534:	f009 f982 	bl	800b83c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}

0800253c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002540:	f001 f8ba 	bl	80036b8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}

08002548 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e00a      	b.n	8002570 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800255a:	f3af 8000 	nop.w
 800255e:	4601      	mov	r1, r0
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	60ba      	str	r2, [r7, #8]
 8002566:	b2ca      	uxtb	r2, r1
 8002568:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	dbf0      	blt.n	800255a <_read+0x12>
  }

  return len;
 8002578:	687b      	ldr	r3, [r7, #4]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800258a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025aa:	605a      	str	r2, [r3, #4]
  return 0;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_isatty>:

int _isatty(int file)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f4:	4a14      	ldr	r2, [pc, #80]	; (8002648 <_sbrk+0x5c>)
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <_sbrk+0x60>)
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <_sbrk+0x64>)
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <_sbrk+0x68>)
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	429a      	cmp	r2, r3
 800261a:	d207      	bcs.n	800262c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800261c:	f009 ff0c 	bl	800c438 <__errno>
 8002620:	4603      	mov	r3, r0
 8002622:	220c      	movs	r2, #12
 8002624:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295
 800262a:	e009      	b.n	8002640 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <_sbrk+0x64>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <_sbrk+0x64>)
 800263c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20030000 	.word	0x20030000
 800264c:	00001000 	.word	0x00001000
 8002650:	200005b8 	.word	0x200005b8
 8002654:	20001908 	.word	0x20001908

08002658 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800265c:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <SystemInit+0x98>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	4a23      	ldr	r2, [pc, #140]	; (80026f0 <SystemInit+0x98>)
 8002664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800266c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800267c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002680:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002684:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <SystemInit+0x9c>)
 8002692:	4013      	ands	r3, r2
 8002694:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a2:	f023 0305 	bic.w	r3, r3, #5
 80026a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c2:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <SystemInit+0xa0>)
 80026c4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80026c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ca:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <SystemInit+0xa0>)
 80026cc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e2:	2200      	movs	r2, #0
 80026e4:	619a      	str	r2, [r3, #24]
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00
 80026f4:	faf6fefb 	.word	0xfaf6fefb
 80026f8:	22041000 	.word	0x22041000

080026fc <Red_On>:
	sscanf(array, "%hd", &i);
	return i;
}

void Red_On()
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	2102      	movs	r1, #2
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <Red_On+0x14>)
 8002706:	f000 ffa7 	bl	8003658 <HAL_GPIO_WritePin>
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	48000400 	.word	0x48000400

08002714 <Red_Off>:

void Red_Off()
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	2102      	movs	r1, #2
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <Red_Off+0x14>)
 800271e:	f000 ff9b 	bl	8003658 <HAL_GPIO_WritePin>
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	48000400 	.word	0x48000400

0800272c <Green_On>:

void Green_On()
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002730:	2201      	movs	r2, #1
 8002732:	2101      	movs	r1, #1
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <Green_On+0x14>)
 8002736:	f000 ff8f 	bl	8003658 <HAL_GPIO_WritePin>
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	48000400 	.word	0x48000400

08002744 <Green_Off>:

void Green_Off()
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
 800274a:	2101      	movs	r1, #1
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <Green_Off+0x14>)
 800274e:	f000 ff83 	bl	8003658 <HAL_GPIO_WritePin>
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	48000400 	.word	0x48000400

0800275c <Blue_On>:

void Blue_On()
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002760:	2201      	movs	r2, #1
 8002762:	2120      	movs	r1, #32
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <Blue_On+0x14>)
 8002766:	f000 ff77 	bl	8003658 <HAL_GPIO_WritePin>
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	48000400 	.word	0x48000400

08002774 <Blue_Off>:

void Blue_Off()
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	2120      	movs	r1, #32
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <Blue_Off+0x14>)
 800277e:	f000 ff6b 	bl	8003658 <HAL_GPIO_WritePin>
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	48000400 	.word	0x48000400

0800278c <LED_Num>:

void LED_Num(uint8_t i)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]
	if (i == 4 || i == 5 ||i == 6 || i == 7)
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	2b04      	cmp	r3, #4
 800279a:	d008      	beq.n	80027ae <LED_Num+0x22>
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d005      	beq.n	80027ae <LED_Num+0x22>
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d002      	beq.n	80027ae <LED_Num+0x22>
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	2b07      	cmp	r3, #7
 80027ac:	d102      	bne.n	80027b4 <LED_Num+0x28>
	{
		Blue_On();
 80027ae:	f7ff ffd5 	bl	800275c <Blue_On>
 80027b2:	e001      	b.n	80027b8 <LED_Num+0x2c>
	}
	else
	{
		Blue_Off();
 80027b4:	f7ff ffde 	bl	8002774 <Blue_Off>
	}

	if (i == 2 || i == 3 ||i == 6 || i == 7)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d008      	beq.n	80027d0 <LED_Num+0x44>
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d005      	beq.n	80027d0 <LED_Num+0x44>
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d002      	beq.n	80027d0 <LED_Num+0x44>
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	2b07      	cmp	r3, #7
 80027ce:	d102      	bne.n	80027d6 <LED_Num+0x4a>
	{
		Green_On();
 80027d0:	f7ff ffac 	bl	800272c <Green_On>
 80027d4:	e001      	b.n	80027da <LED_Num+0x4e>
	}
	else
	{
		Green_Off();
 80027d6:	f7ff ffb5 	bl	8002744 <Green_Off>
	}

	if (i == 1 || i == 3 ||i == 5 || i == 7)
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d008      	beq.n	80027f2 <LED_Num+0x66>
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d005      	beq.n	80027f2 <LED_Num+0x66>
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d002      	beq.n	80027f2 <LED_Num+0x66>
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2b07      	cmp	r3, #7
 80027f0:	d102      	bne.n	80027f8 <LED_Num+0x6c>
	{
		Red_On();
 80027f2:	f7ff ff83 	bl	80026fc <Red_On>
 80027f6:	e002      	b.n	80027fe <LED_Num+0x72>
	}
	else
	{
		Red_Off();
 80027f8:	f7ff ff8c 	bl	8002714 <Red_Off>
	}
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280a:	3304      	adds	r3, #4

0800280c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800280c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280e:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002810:	d3f9      	bcc.n	8002806 <CopyDataInit>
  bx lr
 8002812:	4770      	bx	lr

08002814 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002814:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002816:	3004      	adds	r0, #4

08002818 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002818:	4288      	cmp	r0, r1
  bcc FillZerobss
 800281a:	d3fb      	bcc.n	8002814 <FillZerobss>
  bx lr
 800281c:	4770      	bx	lr
	...

08002820 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002822:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002824:	f7ff ff18 	bl	8002658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002828:	480b      	ldr	r0, [pc, #44]	; (8002858 <LoopForever+0x6>)
 800282a:	490c      	ldr	r1, [pc, #48]	; (800285c <LoopForever+0xa>)
 800282c:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <LoopForever+0xe>)
 800282e:	2300      	movs	r3, #0
 8002830:	f7ff ffec 	bl	800280c <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002834:	480b      	ldr	r0, [pc, #44]	; (8002864 <LoopForever+0x12>)
 8002836:	490c      	ldr	r1, [pc, #48]	; (8002868 <LoopForever+0x16>)
 8002838:	4a0c      	ldr	r2, [pc, #48]	; (800286c <LoopForever+0x1a>)
 800283a:	2300      	movs	r3, #0
 800283c:	f7ff ffe6 	bl	800280c <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002840:	480b      	ldr	r0, [pc, #44]	; (8002870 <LoopForever+0x1e>)
 8002842:	490c      	ldr	r1, [pc, #48]	; (8002874 <LoopForever+0x22>)
 8002844:	2300      	movs	r3, #0
 8002846:	f7ff ffe7 	bl	8002818 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800284a:	f009 fdfb 	bl	800c444 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800284e:	f7ff fa71 	bl	8001d34 <main>

08002852 <LoopForever>:

LoopForever:
  b LoopForever
 8002852:	e7fe      	b.n	8002852 <LoopForever>
  ldr   r0, =_estack
 8002854:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002858:	20000008 	.word	0x20000008
 800285c:	20000078 	.word	0x20000078
 8002860:	0800e27c 	.word	0x0800e27c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002864:	200301e4 	.word	0x200301e4
 8002868:	20030a67 	.word	0x20030a67
 800286c:	0800e336 	.word	0x0800e336
  INIT_BSS _sbss, _ebss
 8002870:	200000c8 	.word	0x200000c8
 8002874:	20001908 	.word	0x20001908

08002878 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002878:	e7fe      	b.n	8002878 <ADC1_IRQHandler>
	...

0800287c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6053      	str	r3, [r2, #4]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	e0042000 	.word	0xe0042000

0800289c <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	6053      	str	r3, [r2, #4]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e0042000 	.word	0xe0042000

080028bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <HAL_Init+0x3c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <HAL_Init+0x3c>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d2:	2003      	movs	r0, #3
 80028d4:	f000 f9b4 	bl	8002c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028d8:	2000      	movs	r0, #0
 80028da:	f000 f80f 	bl	80028fc <HAL_InitTick>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	71fb      	strb	r3, [r7, #7]
 80028e8:	e001      	b.n	80028ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028ea:	f7ff fc89 	bl	8002200 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028ee:	79fb      	ldrb	r3, [r7, #7]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	58004000 	.word	0x58004000

080028fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002908:	4b17      	ldr	r3, [pc, #92]	; (8002968 <HAL_InitTick+0x6c>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d024      	beq.n	800295a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002910:	f002 f928 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b14      	ldr	r3, [pc, #80]	; (8002968 <HAL_InitTick+0x6c>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	4619      	mov	r1, r3
 800291c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002920:	fbb3 f3f1 	udiv	r3, r3, r1
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	4618      	mov	r0, r3
 800292a:	f000 f9ca 	bl	8002cc2 <HAL_SYSTICK_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10f      	bne.n	8002954 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	d809      	bhi.n	800294e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800293a:	2200      	movs	r2, #0
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	f04f 30ff 	mov.w	r0, #4294967295
 8002942:	f000 f988 	bl	8002c56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002946:	4a09      	ldr	r2, [pc, #36]	; (800296c <HAL_InitTick+0x70>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e007      	b.n	800295e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	e004      	b.n	800295e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
 8002958:	e001      	b.n	800295e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000010 	.word	0x20000010
 800296c:	2000000c 	.word	0x2000000c

08002970 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_IncTick+0x20>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_IncTick+0x24>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <HAL_IncTick+0x24>)
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000010 	.word	0x20000010
 8002994:	200005bc 	.word	0x200005bc

08002998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return uwTick;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_GetTick+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	200005bc 	.word	0x200005bc

080029b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_GetTickPrio+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	2000000c 	.word	0x2000000c

080029c8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80029cc:	f7ff ff56 	bl	800287c <LL_DBGMCU_EnableDBGSleepMode>
}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80029d8:	f7ff ff60 	bl	800289c <LL_DBGMCU_EnableDBGStopMode>
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}

080029e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a12:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4907      	ldr	r1, [pc, #28]	; (8002a7c <__NVIC_EnableIRQ+0x38>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000e100 	.word	0xe000e100

08002a80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	db12      	blt.n	8002ab8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	f003 021f 	and.w	r2, r3, #31
 8002a98:	490a      	ldr	r1, [pc, #40]	; (8002ac4 <__NVIC_DisableIRQ+0x44>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa6:	3320      	adds	r3, #32
 8002aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002aac:	f3bf 8f4f 	dsb	sy
}
 8002ab0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ab2:	f3bf 8f6f 	isb	sy
}
 8002ab6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	db0c      	blt.n	8002af4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	f003 021f 	and.w	r2, r3, #31
 8002ae0:	4907      	ldr	r1, [pc, #28]	; (8002b00 <__NVIC_SetPendingIRQ+0x38>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	2001      	movs	r0, #1
 8002aea:	fa00 f202 	lsl.w	r2, r0, r2
 8002aee:	3340      	adds	r3, #64	; 0x40
 8002af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100

08002b04 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	db0c      	blt.n	8002b30 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	4907      	ldr	r1, [pc, #28]	; (8002b3c <__NVIC_ClearPendingIRQ+0x38>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2001      	movs	r0, #1
 8002b26:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2a:	3360      	adds	r3, #96	; 0x60
 8002b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db0a      	blt.n	8002b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	490c      	ldr	r1, [pc, #48]	; (8002b8c <__NVIC_SetPriority+0x4c>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	440b      	add	r3, r1
 8002b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b68:	e00a      	b.n	8002b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4908      	ldr	r1, [pc, #32]	; (8002b90 <__NVIC_SetPriority+0x50>)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3b04      	subs	r3, #4
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	761a      	strb	r2, [r3, #24]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000e100 	.word	0xe000e100
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f1c3 0307 	rsb	r3, r3, #7
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	bf28      	it	cs
 8002bb2:	2304      	movcs	r3, #4
 8002bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d902      	bls.n	8002bc4 <NVIC_EncodePriority+0x30>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3b03      	subs	r3, #3
 8002bc2:	e000      	b.n	8002bc6 <NVIC_EncodePriority+0x32>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	4313      	orrs	r3, r2
         );
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c0c:	d301      	bcc.n	8002c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e00f      	b.n	8002c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <SysTick_Config+0x40>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	f7ff ff8e 	bl	8002b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <SysTick_Config+0x40>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2a:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <SysTick_Config+0x40>)
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	e000e010 	.word	0xe000e010

08002c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff fec9 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c64:	f7ff fee0 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f7ff ff90 	bl	8002b94 <NVIC_EncodePriority>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff5f 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fed3 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fee3 	bl	8002a80 <__NVIC_DisableIRQ>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ff96 	bl	8002bfc <SysTick_Config>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff feed 	bl	8002ac8 <__NVIC_SetPendingIRQ>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fefd 	bl	8002b04 <__NVIC_ClearPendingIRQ>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e08e      	b.n	8002e44 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_DMA_Init+0x138>)
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d80f      	bhi.n	8002d52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <HAL_DMA_Init+0x13c>)
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a45      	ldr	r2, [pc, #276]	; (8002e54 <HAL_DMA_Init+0x140>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	009a      	lsls	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a42      	ldr	r2, [pc, #264]	; (8002e58 <HAL_DMA_Init+0x144>)
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d50:	e00e      	b.n	8002d70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	4b40      	ldr	r3, [pc, #256]	; (8002e5c <HAL_DMA_Init+0x148>)
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a3d      	ldr	r2, [pc, #244]	; (8002e54 <HAL_DMA_Init+0x140>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a3c      	ldr	r2, [pc, #240]	; (8002e60 <HAL_DMA_Init+0x14c>)
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fa74 	bl	80032b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd0:	d102      	bne.n	8002dd8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002de4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <HAL_DMA_Init+0x106>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d80c      	bhi.n	8002e1a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa93 	bl	800332c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	e008      	b.n	8002e2c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40020407 	.word	0x40020407
 8002e50:	bffdfff8 	.word	0xbffdfff8
 8002e54:	cccccccd 	.word	0xcccccccd
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	bffdfbf8 	.word	0xbffdfbf8
 8002e60:	40020400 	.word	0x40020400

08002e64 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_DMA_Start_IT+0x20>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e066      	b.n	8002f52 <HAL_DMA_Start_IT+0xee>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d155      	bne.n	8002f44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f9b9 	bl	8003234 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 020e 	orr.w	r2, r2, #14
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e00f      	b.n	8002efc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0204 	bic.w	r2, r2, #4
 8002eea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 020a 	orr.w	r2, r2, #10
 8002efa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0201 	orr.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e005      	b.n	8002f50 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e04f      	b.n	800300c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d008      	beq.n	8002f8a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e040      	b.n	800300c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 020e 	bic.w	r2, r2, #14
 8002f98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f003 021c 	and.w	r2, r3, #28
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fd6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00c      	beq.n	8002ffa <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ff8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d005      	beq.n	800303c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2204      	movs	r2, #4
 8003034:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
 800303a:	e047      	b.n	80030cc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 020e 	bic.w	r2, r2, #14
 800304a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0201 	bic.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800306a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f003 021c 	and.w	r2, r3, #28
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	2101      	movs	r1, #1
 800307a:	fa01 f202 	lsl.w	r2, r1, r2
 800307e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003088:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
    }
  }
  return status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f003 031c 	and.w	r3, r3, #28
 80030f6:	2204      	movs	r2, #4
 80030f8:	409a      	lsls	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d026      	beq.n	8003150 <HAL_DMA_IRQHandler+0x7a>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d021      	beq.n	8003150 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d107      	bne.n	800312a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0204 	bic.w	r2, r2, #4
 8003128:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f003 021c 	and.w	r2, r3, #28
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2104      	movs	r1, #4
 8003138:	fa01 f202 	lsl.w	r2, r1, r2
 800313c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	2b00      	cmp	r3, #0
 8003144:	d071      	beq.n	800322a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800314e:	e06c      	b.n	800322a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	f003 031c 	and.w	r3, r3, #28
 8003158:	2202      	movs	r2, #2
 800315a:	409a      	lsls	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d02e      	beq.n	80031c2 <HAL_DMA_IRQHandler+0xec>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d029      	beq.n	80031c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10b      	bne.n	8003194 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 020a 	bic.w	r2, r2, #10
 800318a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	f003 021c 	and.w	r2, r3, #28
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2102      	movs	r1, #2
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d038      	beq.n	800322a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031c0:	e033      	b.n	800322a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	f003 031c 	and.w	r3, r3, #28
 80031ca:	2208      	movs	r2, #8
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d02a      	beq.n	800322c <HAL_DMA_IRQHandler+0x156>
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d025      	beq.n	800322c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 020e 	bic.w	r2, r2, #14
 80031ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	f003 021c 	and.w	r2, r3, #28
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	2101      	movs	r1, #1
 80031fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003202:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800322a:	bf00      	nop
 800322c:	bf00      	nop
}
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800324a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	2b00      	cmp	r3, #0
 8003252:	d004      	beq.n	800325e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800325c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f003 021c 	and.w	r2, r3, #28
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f202 	lsl.w	r2, r1, r2
 8003270:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b10      	cmp	r3, #16
 8003280:	d108      	bne.n	8003294 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003292:	e007      	b.n	80032a4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	60da      	str	r2, [r3, #12]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d80a      	bhi.n	80032da <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032d0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6493      	str	r3, [r2, #72]	; 0x48
 80032d8:	e007      	b.n	80032ea <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	089b      	lsrs	r3, r3, #2
 80032e0:	009a      	lsls	r2, r3, #2
 80032e2:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032e4:	4413      	add	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3b08      	subs	r3, #8
 80032f2:	4a0c      	ldr	r2, [pc, #48]	; (8003324 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003300:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2201      	movs	r2, #1
 800330a:	409a      	lsls	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003310:	bf00      	nop
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40020407 	.word	0x40020407
 8003320:	4002081c 	.word	0x4002081c
 8003324:	cccccccd 	.word	0xcccccccd
 8003328:	40020880 	.word	0x40020880

0800332c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800333c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	461a      	mov	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003350:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3b01      	subs	r3, #1
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2201      	movs	r2, #1
 800335c:	409a      	lsls	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	1000823f 	.word	0x1000823f
 8003374:	40020940 	.word	0x40020940

08003378 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003386:	e14c      	b.n	8003622 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	fa01 f303 	lsl.w	r3, r1, r3
 8003394:	4013      	ands	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 813e 	beq.w	800361c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d005      	beq.n	80033b8 <HAL_GPIO_Init+0x40>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d130      	bne.n	800341a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4013      	ands	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	4313      	orrs	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ee:	2201      	movs	r2, #1
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	091b      	lsrs	r3, r3, #4
 8003404:	f003 0201 	and.w	r2, r3, #1
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b03      	cmp	r3, #3
 8003424:	d017      	beq.n	8003456 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	2203      	movs	r2, #3
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4013      	ands	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d123      	bne.n	80034aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	08da      	lsrs	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3208      	adds	r2, #8
 800346a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	220f      	movs	r2, #15
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	08da      	lsrs	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3208      	adds	r2, #8
 80034a4:	6939      	ldr	r1, [r7, #16]
 80034a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	2203      	movs	r2, #3
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4013      	ands	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0203 	and.w	r2, r3, #3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8098 	beq.w	800361c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80034ec:	4a54      	ldr	r2, [pc, #336]	; (8003640 <HAL_GPIO_Init+0x2c8>)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	220f      	movs	r2, #15
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003516:	d019      	beq.n	800354c <HAL_GPIO_Init+0x1d4>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a4a      	ldr	r2, [pc, #296]	; (8003644 <HAL_GPIO_Init+0x2cc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d013      	beq.n	8003548 <HAL_GPIO_Init+0x1d0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a49      	ldr	r2, [pc, #292]	; (8003648 <HAL_GPIO_Init+0x2d0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00d      	beq.n	8003544 <HAL_GPIO_Init+0x1cc>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a48      	ldr	r2, [pc, #288]	; (800364c <HAL_GPIO_Init+0x2d4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d007      	beq.n	8003540 <HAL_GPIO_Init+0x1c8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a47      	ldr	r2, [pc, #284]	; (8003650 <HAL_GPIO_Init+0x2d8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_GPIO_Init+0x1c4>
 8003538:	2304      	movs	r3, #4
 800353a:	e008      	b.n	800354e <HAL_GPIO_Init+0x1d6>
 800353c:	2307      	movs	r3, #7
 800353e:	e006      	b.n	800354e <HAL_GPIO_Init+0x1d6>
 8003540:	2303      	movs	r3, #3
 8003542:	e004      	b.n	800354e <HAL_GPIO_Init+0x1d6>
 8003544:	2302      	movs	r3, #2
 8003546:	e002      	b.n	800354e <HAL_GPIO_Init+0x1d6>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <HAL_GPIO_Init+0x1d6>
 800354c:	2300      	movs	r3, #0
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	f002 0203 	and.w	r2, r2, #3
 8003554:	0092      	lsls	r2, r2, #2
 8003556:	4093      	lsls	r3, r2
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800355e:	4938      	ldr	r1, [pc, #224]	; (8003640 <HAL_GPIO_Init+0x2c8>)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	089b      	lsrs	r3, r3, #2
 8003564:	3302      	adds	r3, #2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800356c:	4b39      	ldr	r3, [pc, #228]	; (8003654 <HAL_GPIO_Init+0x2dc>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	43db      	mvns	r3, r3
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003590:	4a30      	ldr	r2, [pc, #192]	; (8003654 <HAL_GPIO_Init+0x2dc>)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003596:	4b2f      	ldr	r3, [pc, #188]	; (8003654 <HAL_GPIO_Init+0x2dc>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	43db      	mvns	r3, r3
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ba:	4a26      	ldr	r2, [pc, #152]	; (8003654 <HAL_GPIO_Init+0x2dc>)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035c0:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_GPIO_Init+0x2dc>)
 80035c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035e6:	4a1b      	ldr	r2, [pc, #108]	; (8003654 <HAL_GPIO_Init+0x2dc>)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80035ee:	4b19      	ldr	r3, [pc, #100]	; (8003654 <HAL_GPIO_Init+0x2dc>)
 80035f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4013      	ands	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003614:	4a0f      	ldr	r2, [pc, #60]	; (8003654 <HAL_GPIO_Init+0x2dc>)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3301      	adds	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	f47f aeab 	bne.w	8003388 <HAL_GPIO_Init+0x10>
  }
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40010000 	.word	0x40010000
 8003644:	48000400 	.word	0x48000400
 8003648:	48000800 	.word	0x48000800
 800364c:	48000c00 	.word	0x48000c00
 8003650:	48001000 	.word	0x48001000
 8003654:	58000800 	.word	0x58000800

08003658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	807b      	strh	r3, [r7, #2]
 8003664:	4613      	mov	r3, r2
 8003666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003668:	787b      	ldrb	r3, [r7, #1]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003674:	e002      	b.n	800367c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800369e:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fd fbfb 	bl	8000ea2 <HAL_GPIO_EXTI_Callback>
  }
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	58000800 	.word	0x58000800

080036b8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_HSEM_IRQHandler+0x30>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <HAL_HSEM_IRQHandler+0x30>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	4906      	ldr	r1, [pc, #24]	; (80036e8 <HAL_HSEM_IRQHandler+0x30>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <HAL_HSEM_IRQHandler+0x30>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f807 	bl	80036ec <HAL_HSEM_FreeCallback>
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	58001500 	.word	0x58001500

080036ec <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01e      	beq.n	8003750 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003712:	4b13      	ldr	r3, [pc, #76]	; (8003760 <HAL_IPCC_Init+0x60>)
 8003714:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe fd7c 	bl	8002220 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003728:	68b8      	ldr	r0, [r7, #8]
 800372a:	f000 f85b 	bl	80037e4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f82c 	bl	8003798 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800374e:	e001      	b.n	8003754 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	58000c00 	.word	0x58000c00

08003764 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	4613      	mov	r3, r2
 800378a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e00f      	b.n	80037c6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <IPCC_SetDefaultCallbacks+0x44>)
 80037b0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3306      	adds	r3, #6
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	4a08      	ldr	r2, [pc, #32]	; (80037e0 <IPCC_SetDefaultCallbacks+0x48>)
 80037be:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3301      	adds	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d9ec      	bls.n	80037a6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	08003765 	.word	0x08003765
 80037e0:	0800377f 	.word	0x0800377f

080037e4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80037f8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	223f      	movs	r2, #63	; 0x3f
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0c0      	b.n	80039a0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fe fdc6 	bl	80023c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2203      	movs	r2, #3
 800383c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f003 fb31 	bl	8006eac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	e03e      	b.n	80038ce <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003850:	7bfa      	ldrb	r2, [r7, #15]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	440b      	add	r3, r1
 800385e:	3311      	adds	r3, #17
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003864:	7bfa      	ldrb	r2, [r7, #15]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	440b      	add	r3, r1
 8003872:	3310      	adds	r3, #16
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	440b      	add	r3, r1
 8003886:	3313      	adds	r3, #19
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	440b      	add	r3, r1
 800389a:	3320      	adds	r3, #32
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	440b      	add	r3, r1
 80038ae:	3324      	adds	r3, #36	; 0x24
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	3301      	adds	r3, #1
 80038cc:	73fb      	strb	r3, [r7, #15]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	791b      	ldrb	r3, [r3, #4]
 80038d2:	7bfa      	ldrb	r2, [r7, #15]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d3bb      	bcc.n	8003850 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e044      	b.n	8003968 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038de:	7bfa      	ldrb	r2, [r7, #15]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	f203 1351 	addw	r3, r3, #337	; 0x151
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	f203 1353 	addw	r3, r3, #339	; 0x153
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	440b      	add	r3, r1
 8003944:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	3301      	adds	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	791b      	ldrb	r3, [r3, #4]
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	429a      	cmp	r2, r3
 8003970:	d3b5      	bcc.n	80038de <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800397e:	f003 fab0 	bl	8006ee2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7a9b      	ldrb	r3, [r3, #10]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d102      	bne.n	800399e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f805 	bl	80039a8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f043 0302 	orr.w	r3, r3, #2
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0a:	6013      	str	r3, [r2, #0]
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	58000400 	.word	0x58000400

08003a1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	58000400 	.word	0x58000400

08003a38 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a4a:	d101      	bne.n	8003a50 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_RCC_HSE_Enable>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_RCC_HSE_Disable>:
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_RCC_HSE_IsReady>:
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aaa:	d101      	bne.n	8003ab0 <LL_RCC_HSE_IsReady+0x18>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <LL_RCC_HSE_IsReady+0x1a>
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <LL_RCC_HSI_Enable>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <LL_RCC_HSI_Disable>:
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aec:	6013      	str	r3, [r2, #0]
}
 8003aee:	bf00      	nop
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_RCC_HSI_IsReady>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0a:	d101      	bne.n	8003b10 <LL_RCC_HSI_IsReady+0x18>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <LL_RCC_HSI_IsReady+0x1a>
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <LL_RCC_HSI_SetCalibTrimming>:
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	061b      	lsls	r3, r3, #24
 8003b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b36:	4313      	orrs	r3, r2
 8003b38:	604b      	str	r3, [r1, #4]
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <LL_RCC_HSI48_Enable>:
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b5e:	bf00      	nop
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <LL_RCC_HSI48_Disable>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <LL_RCC_HSI48_IsReady>:
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d101      	bne.n	8003ba2 <LL_RCC_HSI48_IsReady+0x18>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <LL_RCC_HSI48_IsReady+0x1a>
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_RCC_LSE_Enable>:
{
 8003bae:	b480      	push	{r7}
 8003bb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bc6:	bf00      	nop
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_RCC_LSE_Disable>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <LL_RCC_LSE_EnableBypass>:
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c02:	f043 0304 	orr.w	r3, r3, #4
 8003c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_RCC_LSE_DisableBypass>:
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <LL_RCC_LSE_IsReady>:
{
 8003c36:	b480      	push	{r7}
 8003c38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d101      	bne.n	8003c4e <LL_RCC_LSE_IsReady+0x18>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <LL_RCC_LSE_IsReady+0x1a>
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_RCC_LSI1_Enable>:
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c72:	bf00      	nop
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_RCC_LSI1_Disable>:
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_RCC_LSI1_IsReady>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d101      	bne.n	8003cb6 <LL_RCC_LSI1_IsReady+0x18>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <LL_RCC_LSI1_IsReady+0x1a>
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <LL_RCC_LSI2_Enable>:
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd2:	f043 0304 	orr.w	r3, r3, #4
 8003cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cda:	bf00      	nop
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_RCC_LSI2_Disable>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf4:	f023 0304 	bic.w	r3, r3, #4
 8003cf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_RCC_LSI2_IsReady>:
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d101      	bne.n	8003d1e <LL_RCC_LSI2_IsReady+0x18>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <LL_RCC_LSI2_IsReady+0x1a>
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_LSI2_SetTrimming>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_RCC_MSI_Enable>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6013      	str	r3, [r2, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <LL_RCC_MSI_Disable>:
{
 8003d76:	b480      	push	{r7}
 8003d78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	6013      	str	r3, [r2, #0]
}
 8003d8a:	bf00      	nop
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <LL_RCC_MSI_IsReady>:
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d101      	bne.n	8003daa <LL_RCC_MSI_IsReady+0x16>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <LL_RCC_MSI_IsReady+0x18>
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_RCC_MSI_SetRange>:
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	600b      	str	r3, [r1, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <LL_RCC_MSI_GetRange>:
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2bb0      	cmp	r3, #176	; 0xb0
 8003df4:	d901      	bls.n	8003dfa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003df6:	23b0      	movs	r3, #176	; 0xb0
 8003df8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003dfa:	687b      	ldr	r3, [r7, #4]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <LL_RCC_SetSysClkSource>:
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f023 0203 	bic.w	r2, r3, #3
 8003e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <LL_RCC_GetSysClkSource>:
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <LL_RCC_SetAHBPrescaler>:
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <LL_C2_RCC_SetAHBPrescaler>:
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_RCC_SetAHB4Prescaler>:
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ed6:	f023 020f 	bic.w	r2, r3, #15
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_RCC_SetAPB1Prescaler>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	608b      	str	r3, [r1, #8]
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_RCC_SetAPB2Prescaler>:
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_RCC_GetAHBPrescaler>:
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_RCC_GetAHB4Prescaler>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_RCC_GetAPB1Prescaler>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_RCC_GetAPB2Prescaler>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fba:	6013      	str	r3, [r2, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd8:	6013      	str	r3, [r2, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ff6:	d101      	bne.n	8003ffc <LL_RCC_PLL_IsReady+0x18>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <LL_RCC_PLL_IsReady+0x1a>
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	0a1b      	lsrs	r3, r3, #8
 8004014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800403a:	b480      	push	{r7}
 800403c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800403e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004052:	b480      	push	{r7}
 8004054:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0303 	and.w	r3, r3, #3
}
 8004060:	4618      	mov	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407c:	d101      	bne.n	8004082 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800408e:	b480      	push	{r7}
 8004090:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004096:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a2:	d101      	bne.n	80040a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c8:	d101      	bne.n	80040ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80040da:	b480      	push	{r7}
 80040dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80040de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ec:	d101      	bne.n	80040f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80040fe:	b480      	push	{r7}
 8004100:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004110:	d101      	bne.n	8004116 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004124:	b590      	push	{r4, r7, lr}
 8004126:	b08d      	sub	sp, #52	; 0x34
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e363      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 808d 	beq.w	800425e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004144:	f7ff fe89 	bl	8003e5a <LL_RCC_GetSysClkSource>
 8004148:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414a:	f7ff ff82 	bl	8004052 <LL_RCC_PLL_GetMainSource>
 800414e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_RCC_OscConfig+0x3e>
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	2b0c      	cmp	r3, #12
 800415a:	d147      	bne.n	80041ec <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	2b01      	cmp	r3, #1
 8004160:	d144      	bne.n	80041ec <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e347      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004172:	f7ff fe34 	bl	8003dde <LL_RCC_MSI_GetRange>
 8004176:	4603      	mov	r3, r0
 8004178:	429c      	cmp	r4, r3
 800417a:	d914      	bls.n	80041a6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fd2f 	bl	8004be4 <RCC_SetFlashLatencyFromMSIRange>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e336      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fe0e 	bl	8003db6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fe32 	bl	8003e08 <LL_RCC_MSI_SetCalibTrimming>
 80041a4:	e013      	b.n	80041ce <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fe03 	bl	8003db6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fe27 	bl	8003e08 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fd10 	bl	8004be4 <RCC_SetFlashLatencyFromMSIRange>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e317      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041ce:	f000 fcc9 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4aa4      	ldr	r2, [pc, #656]	; (8004468 <HAL_RCC_OscConfig+0x344>)
 80041d6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041d8:	4ba4      	ldr	r3, [pc, #656]	; (800446c <HAL_RCC_OscConfig+0x348>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fb8d 	bl	80028fc <HAL_InitTick>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d039      	beq.n	800425c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e308      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01e      	beq.n	8004232 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041f4:	f7ff fdb0 	bl	8003d58 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041f8:	f7fe fbce 	bl	8002998 <HAL_GetTick>
 80041fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004200:	f7fe fbca 	bl	8002998 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e2f5      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004212:	f7ff fdbf 	bl	8003d94 <LL_RCC_MSI_IsReady>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f1      	beq.n	8004200 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fdc8 	bl	8003db6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fdec 	bl	8003e08 <LL_RCC_MSI_SetCalibTrimming>
 8004230:	e015      	b.n	800425e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004232:	f7ff fda0 	bl	8003d76 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004236:	f7fe fbaf 	bl	8002998 <HAL_GetTick>
 800423a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800423e:	f7fe fbab 	bl	8002998 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e2d6      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004250:	f7ff fda0 	bl	8003d94 <LL_RCC_MSI_IsReady>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f1      	bne.n	800423e <HAL_RCC_OscConfig+0x11a>
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800425c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d047      	beq.n	80042fa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800426a:	f7ff fdf6 	bl	8003e5a <LL_RCC_GetSysClkSource>
 800426e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004270:	f7ff feef 	bl	8004052 <LL_RCC_PLL_GetMainSource>
 8004274:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d005      	beq.n	8004288 <HAL_RCC_OscConfig+0x164>
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d108      	bne.n	8004294 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d105      	bne.n	8004294 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d134      	bne.n	80042fa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e2b4      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d102      	bne.n	80042a4 <HAL_RCC_OscConfig+0x180>
 800429e:	f7ff fbdd 	bl	8003a5c <LL_RCC_HSE_Enable>
 80042a2:	e001      	b.n	80042a8 <HAL_RCC_OscConfig+0x184>
 80042a4:	f7ff fbe9 	bl	8003a7a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d012      	beq.n	80042d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fe fb72 	bl	8002998 <HAL_GetTick>
 80042b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b8:	f7fe fb6e 	bl	8002998 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b64      	cmp	r3, #100	; 0x64
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e299      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80042ca:	f7ff fbe5 	bl	8003a98 <LL_RCC_HSE_IsReady>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f1      	beq.n	80042b8 <HAL_RCC_OscConfig+0x194>
 80042d4:	e011      	b.n	80042fa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d6:	f7fe fb5f 	bl	8002998 <HAL_GetTick>
 80042da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042de:	f7fe fb5b 	bl	8002998 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b64      	cmp	r3, #100	; 0x64
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e286      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80042f0:	f7ff fbd2 	bl	8003a98 <LL_RCC_HSE_IsReady>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f1      	bne.n	80042de <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04c      	beq.n	80043a0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004306:	f7ff fda8 	bl	8003e5a <LL_RCC_GetSysClkSource>
 800430a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800430c:	f7ff fea1 	bl	8004052 <LL_RCC_PLL_GetMainSource>
 8004310:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b04      	cmp	r3, #4
 8004316:	d005      	beq.n	8004324 <HAL_RCC_OscConfig+0x200>
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d10e      	bne.n	800433c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d10b      	bne.n	800433c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e266      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fbf1 	bl	8003b1c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800433a:	e031      	b.n	80043a0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d019      	beq.n	8004378 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004344:	f7ff fbba 	bl	8003abc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fe fb26 	bl	8002998 <HAL_GetTick>
 800434c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004350:	f7fe fb22 	bl	8002998 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e24d      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004362:	f7ff fbc9 	bl	8003af8 <LL_RCC_HSI_IsReady>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f1      	beq.n	8004350 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fbd3 	bl	8003b1c <LL_RCC_HSI_SetCalibTrimming>
 8004376:	e013      	b.n	80043a0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004378:	f7ff fbaf 	bl	8003ada <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fe fb0c 	bl	8002998 <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004384:	f7fe fb08 	bl	8002998 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e233      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004396:	f7ff fbaf 	bl	8003af8 <LL_RCC_HSI_IsReady>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f1      	bne.n	8004384 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80a3 	beq.w	8004500 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d076      	beq.n	80044b0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d046      	beq.n	800445c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80043ce:	f7ff fc66 	bl	8003c9e <LL_RCC_LSI1_IsReady>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d113      	bne.n	8004400 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80043d8:	f7ff fc3f 	bl	8003c5a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043dc:	f7fe fadc 	bl	8002998 <HAL_GetTick>
 80043e0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043e4:	f7fe fad8 	bl	8002998 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e203      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043f6:	f7ff fc52 	bl	8003c9e <LL_RCC_LSI1_IsReady>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0f1      	beq.n	80043e4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004400:	f7ff fc5f 	bl	8003cc2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fe fac8 	bl	8002998 <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800440c:	f7fe fac4 	bl	8002998 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b03      	cmp	r3, #3
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1ef      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800441e:	f7ff fc72 	bl	8003d06 <LL_RCC_LSI2_IsReady>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f1      	beq.n	800440c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fc7c 	bl	8003d2a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004432:	f7ff fc23 	bl	8003c7c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fe faaf 	bl	8002998 <HAL_GetTick>
 800443a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800443e:	f7fe faab 	bl	8002998 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1d6      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004450:	f7ff fc25 	bl	8003c9e <LL_RCC_LSI1_IsReady>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f1      	bne.n	800443e <HAL_RCC_OscConfig+0x31a>
 800445a:	e051      	b.n	8004500 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800445c:	f7ff fbfd 	bl	8003c5a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fe fa9a 	bl	8002998 <HAL_GetTick>
 8004464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004466:	e00c      	b.n	8004482 <HAL_RCC_OscConfig+0x35e>
 8004468:	20000008 	.word	0x20000008
 800446c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004470:	f7fe fa92 	bl	8002998 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e1bd      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004482:	f7ff fc0c 	bl	8003c9e <LL_RCC_LSI1_IsReady>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d0f1      	beq.n	8004470 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800448c:	f7ff fc2a 	bl	8003ce4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004492:	f7fe fa81 	bl	8002998 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b03      	cmp	r3, #3
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e1ac      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044a4:	f7ff fc2f 	bl	8003d06 <LL_RCC_LSI2_IsReady>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f1      	bne.n	8004492 <HAL_RCC_OscConfig+0x36e>
 80044ae:	e027      	b.n	8004500 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80044b0:	f7ff fc18 	bl	8003ce4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fe fa70 	bl	8002998 <HAL_GetTick>
 80044b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044bc:	f7fe fa6c 	bl	8002998 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e197      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80044ce:	f7ff fc1a 	bl	8003d06 <LL_RCC_LSI2_IsReady>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f1      	bne.n	80044bc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80044d8:	f7ff fbd0 	bl	8003c7c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fe fa5c 	bl	8002998 <HAL_GetTick>
 80044e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044e4:	f7fe fa58 	bl	8002998 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e183      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044f6:	f7ff fbd2 	bl	8003c9e <LL_RCC_LSI1_IsReady>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f1      	bne.n	80044e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d05b      	beq.n	80045c4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800450c:	4ba7      	ldr	r3, [pc, #668]	; (80047ac <HAL_RCC_OscConfig+0x688>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d114      	bne.n	8004542 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004518:	f7ff fa70 	bl	80039fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800451c:	f7fe fa3c 	bl	8002998 <HAL_GetTick>
 8004520:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004524:	f7fe fa38 	bl	8002998 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e163      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004536:	4b9d      	ldr	r3, [pc, #628]	; (80047ac <HAL_RCC_OscConfig+0x688>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d102      	bne.n	8004550 <HAL_RCC_OscConfig+0x42c>
 800454a:	f7ff fb30 	bl	8003bae <LL_RCC_LSE_Enable>
 800454e:	e00c      	b.n	800456a <HAL_RCC_OscConfig+0x446>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b05      	cmp	r3, #5
 8004556:	d104      	bne.n	8004562 <HAL_RCC_OscConfig+0x43e>
 8004558:	f7ff fb4b 	bl	8003bf2 <LL_RCC_LSE_EnableBypass>
 800455c:	f7ff fb27 	bl	8003bae <LL_RCC_LSE_Enable>
 8004560:	e003      	b.n	800456a <HAL_RCC_OscConfig+0x446>
 8004562:	f7ff fb35 	bl	8003bd0 <LL_RCC_LSE_Disable>
 8004566:	f7ff fb55 	bl	8003c14 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d014      	beq.n	800459c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004572:	f7fe fa11 	bl	8002998 <HAL_GetTick>
 8004576:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457a:	f7fe fa0d 	bl	8002998 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	; 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e136      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004590:	f7ff fb51 	bl	8003c36 <LL_RCC_LSE_IsReady>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0ef      	beq.n	800457a <HAL_RCC_OscConfig+0x456>
 800459a:	e013      	b.n	80045c4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fe f9fc 	bl	8002998 <HAL_GetTick>
 80045a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a4:	f7fe f9f8 	bl	8002998 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e121      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80045ba:	f7ff fb3c 	bl	8003c36 <LL_RCC_LSE_IsReady>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1ef      	bne.n	80045a4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d02c      	beq.n	800462a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d014      	beq.n	8004602 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045d8:	f7ff fab5 	bl	8003b46 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fe f9dc 	bl	8002998 <HAL_GetTick>
 80045e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045e4:	f7fe f9d8 	bl	8002998 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e103      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045f6:	f7ff fac8 	bl	8003b8a <LL_RCC_HSI48_IsReady>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f1      	beq.n	80045e4 <HAL_RCC_OscConfig+0x4c0>
 8004600:	e013      	b.n	800462a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004602:	f7ff fab1 	bl	8003b68 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004606:	f7fe f9c7 	bl	8002998 <HAL_GetTick>
 800460a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800460e:	f7fe f9c3 	bl	8002998 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e0ee      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004620:	f7ff fab3 	bl	8003b8a <LL_RCC_HSI48_IsReady>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f1      	bne.n	800460e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80e4 	beq.w	80047fc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004634:	f7ff fc11 	bl	8003e5a <LL_RCC_GetSysClkSource>
 8004638:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800463a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	2b02      	cmp	r3, #2
 8004648:	f040 80b4 	bne.w	80047b4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 0203 	and.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	429a      	cmp	r2, r3
 8004658:	d123      	bne.n	80046a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d11c      	bne.n	80046a2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d114      	bne.n	80046a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d10d      	bne.n	80046a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d106      	bne.n	80046a2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d05d      	beq.n	800475e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d058      	beq.n	800475a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e0a1      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046ba:	f7ff fc84 	bl	8003fc6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046be:	f7fe f96b 	bl	8002998 <HAL_GetTick>
 80046c2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c6:	f7fe f967 	bl	8002998 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e092      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ef      	bne.n	80046c6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	4b30      	ldr	r3, [pc, #192]	; (80047b0 <HAL_RCC_OscConfig+0x68c>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046f8:	4311      	orrs	r1, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046fe:	0212      	lsls	r2, r2, #8
 8004700:	4311      	orrs	r1, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004706:	4311      	orrs	r1, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800470c:	4311      	orrs	r1, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004712:	430a      	orrs	r2, r1
 8004714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004718:	4313      	orrs	r3, r2
 800471a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800471c:	f7ff fc44 	bl	8003fa8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004730:	f7fe f932 	bl	8002998 <HAL_GetTick>
 8004734:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004738:	f7fe f92e 	bl	8002998 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e059      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ef      	beq.n	8004738 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004758:	e050      	b.n	80047fc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e04f      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d147      	bne.n	80047fc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800476c:	f7ff fc1c 	bl	8003fa8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004780:	f7fe f90a 	bl	8002998 <HAL_GetTick>
 8004784:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004788:	f7fe f906 	bl	8002998 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e031      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ef      	beq.n	8004788 <HAL_RCC_OscConfig+0x664>
 80047a8:	e028      	b.n	80047fc <HAL_RCC_OscConfig+0x6d8>
 80047aa:	bf00      	nop
 80047ac:	58000400 	.word	0x58000400
 80047b0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d01e      	beq.n	80047f8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ba:	f7ff fc04 	bl	8003fc6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fe f8eb 	bl	8002998 <HAL_GetTick>
 80047c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c6:	f7fe f8e7 	bl	8002998 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e012      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ef      	bne.n	80047c6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80047e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <HAL_RCC_OscConfig+0x6e4>)
 80047f2:	4013      	ands	r3, r2
 80047f4:	60cb      	str	r3, [r1, #12]
 80047f6:	e001      	b.n	80047fc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3734      	adds	r7, #52	; 0x34
 8004802:	46bd      	mov	sp, r7
 8004804:	bd90      	pop	{r4, r7, pc}
 8004806:	bf00      	nop
 8004808:	eefefffc 	.word	0xeefefffc

0800480c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e12d      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004820:	4b98      	ldr	r3, [pc, #608]	; (8004a84 <HAL_RCC_ClockConfig+0x278>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d91b      	bls.n	8004866 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b95      	ldr	r3, [pc, #596]	; (8004a84 <HAL_RCC_ClockConfig+0x278>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 0207 	bic.w	r2, r3, #7
 8004836:	4993      	ldr	r1, [pc, #588]	; (8004a84 <HAL_RCC_ClockConfig+0x278>)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800483e:	f7fe f8ab 	bl	8002998 <HAL_GetTick>
 8004842:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004844:	e008      	b.n	8004858 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004846:	f7fe f8a7 	bl	8002998 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e111      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004858:	4b8a      	ldr	r3, [pc, #552]	; (8004a84 <HAL_RCC_ClockConfig+0x278>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d1ef      	bne.n	8004846 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d016      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fafb 	bl	8003e72 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800487c:	f7fe f88c 	bl	8002998 <HAL_GetTick>
 8004880:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004884:	f7fe f888 	bl	8002998 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e0f2      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004896:	f7ff fbe8 	bl	800406a <LL_RCC_IsActiveFlag_HPRE>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f1      	beq.n	8004884 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d016      	beq.n	80048da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff faf2 	bl	8003e9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048b6:	f7fe f86f 	bl	8002998 <HAL_GetTick>
 80048ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048be:	f7fe f86b 	bl	8002998 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e0d5      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80048d0:	f7ff fbdd 	bl	800408e <LL_RCC_IsActiveFlag_C2HPRE>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f1      	beq.n	80048be <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff faeb 	bl	8003ec6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048f0:	f7fe f852 	bl	8002998 <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048f8:	f7fe f84e 	bl	8002998 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e0b8      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800490a:	f7ff fbd3 	bl	80040b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f1      	beq.n	80048f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d016      	beq.n	800494e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fae5 	bl	8003ef4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800492a:	f7fe f835 	bl	8002998 <HAL_GetTick>
 800492e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004932:	f7fe f831 	bl	8002998 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e09b      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004944:	f7ff fbc9 	bl	80040da <LL_RCC_IsActiveFlag_PPRE1>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f1      	beq.n	8004932 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d017      	beq.n	800498a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fadb 	bl	8003f1c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004966:	f7fe f817 	bl	8002998 <HAL_GetTick>
 800496a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800496e:	f7fe f813 	bl	8002998 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e07d      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004980:	f7ff fbbd 	bl	80040fe <LL_RCC_IsActiveFlag_PPRE2>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f1      	beq.n	800496e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d043      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d106      	bne.n	80049ac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800499e:	f7ff f87b 	bl	8003a98 <LL_RCC_HSE_IsReady>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d11e      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e067      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d106      	bne.n	80049c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80049b4:	f7ff fb16 	bl	8003fe4 <LL_RCC_PLL_IsReady>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d113      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e05c      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80049ca:	f7ff f9e3 	bl	8003d94 <LL_RCC_MSI_IsReady>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d108      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e051      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80049d8:	f7ff f88e 	bl	8003af8 <LL_RCC_HSI_IsReady>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e04a      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fa21 	bl	8003e32 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f0:	f7fd ffd2 	bl	8002998 <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f8:	f7fd ffce 	bl	8002998 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e036      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0e:	f7ff fa24 	bl	8003e5a <LL_RCC_GetSysClkSource>
 8004a12:	4602      	mov	r2, r0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d1ec      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a1e:	4b19      	ldr	r3, [pc, #100]	; (8004a84 <HAL_RCC_ClockConfig+0x278>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d21b      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2c:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <HAL_RCC_ClockConfig+0x278>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f023 0207 	bic.w	r2, r3, #7
 8004a34:	4913      	ldr	r1, [pc, #76]	; (8004a84 <HAL_RCC_ClockConfig+0x278>)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a3c:	f7fd ffac 	bl	8002998 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a44:	f7fd ffa8 	bl	8002998 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e012      	b.n	8004a7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a56:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <HAL_RCC_ClockConfig+0x278>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d1ef      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a64:	f000 f87e 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4a07      	ldr	r2, [pc, #28]	; (8004a88 <HAL_RCC_ClockConfig+0x27c>)
 8004a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004a6e:	f7fd ff9f 	bl	80029b0 <HAL_GetTickPrio>
 8004a72:	4603      	mov	r3, r0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fd ff41 	bl	80028fc <HAL_InitTick>
 8004a7a:	4603      	mov	r3, r0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	58004000 	.word	0x58004000
 8004a88:	20000008 	.word	0x20000008

08004a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a8c:	b590      	push	{r4, r7, lr}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a92:	f7ff f9e2 	bl	8003e5a <LL_RCC_GetSysClkSource>
 8004a96:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10a      	bne.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a9e:	f7ff f99e 	bl	8003dde <LL_RCC_MSI_GetRange>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	4a2b      	ldr	r2, [pc, #172]	; (8004b58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e04b      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d102      	bne.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aba:	4b28      	ldr	r3, [pc, #160]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	e045      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d10a      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ac6:	f7fe ffb7 	bl	8003a38 <LL_RCC_HSE_IsEnabledDiv2>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d102      	bne.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004ad0:	4b22      	ldr	r3, [pc, #136]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e03a      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004ad6:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	e037      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004adc:	f7ff fab9 	bl	8004052 <LL_RCC_PLL_GetMainSource>
 8004ae0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d003      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x64>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d003      	beq.n	8004af6 <HAL_RCC_GetSysClockFreq+0x6a>
 8004aee:	e00d      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004af0:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004af2:	60bb      	str	r3, [r7, #8]
        break;
 8004af4:	e015      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004af6:	f7fe ff9f 	bl	8003a38 <LL_RCC_HSE_IsEnabledDiv2>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d102      	bne.n	8004b06 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004b00:	4b16      	ldr	r3, [pc, #88]	; (8004b5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b02:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004b04:	e00d      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004b06:	4b16      	ldr	r3, [pc, #88]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b08:	60bb      	str	r3, [r7, #8]
        break;
 8004b0a:	e00a      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b0c:	f7ff f967 	bl	8003dde <LL_RCC_MSI_GetRange>
 8004b10:	4603      	mov	r3, r0
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	4a0f      	ldr	r2, [pc, #60]	; (8004b58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1e:	60bb      	str	r3, [r7, #8]
        break;
 8004b20:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004b22:	f7ff fa71 	bl	8004008 <LL_RCC_PLL_GetN>
 8004b26:	4602      	mov	r2, r0
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	fb03 f402 	mul.w	r4, r3, r2
 8004b2e:	f7ff fa84 	bl	800403a <LL_RCC_PLL_GetDivider>
 8004b32:	4603      	mov	r3, r0
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	3301      	adds	r3, #1
 8004b38:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b3c:	f7ff fa71 	bl	8004022 <LL_RCC_PLL_GetR>
 8004b40:	4603      	mov	r3, r0
 8004b42:	0f5b      	lsrs	r3, r3, #29
 8004b44:	3301      	adds	r3, #1
 8004b46:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b4a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd90      	pop	{r4, r7, pc}
 8004b56:	bf00      	nop
 8004b58:	0800e0f0 	.word	0x0800e0f0
 8004b5c:	00f42400 	.word	0x00f42400
 8004b60:	01e84800 	.word	0x01e84800

08004b64 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b64:	b598      	push	{r3, r4, r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b68:	f7ff ff90 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	f7ff f9e9 	bl	8003f44 <LL_RCC_GetAHBPrescaler>
 8004b72:	4603      	mov	r3, r0
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	4a03      	ldr	r2, [pc, #12]	; (8004b88 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b80:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd98      	pop	{r3, r4, r7, pc}
 8004b88:	0800e090 	.word	0x0800e090

08004b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b8c:	b598      	push	{r3, r4, r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b90:	f7ff ffe8 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004b94:	4604      	mov	r4, r0
 8004b96:	f7ff f9ef 	bl	8003f78 <LL_RCC_GetAPB1Prescaler>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	0a1b      	lsrs	r3, r3, #8
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	4a04      	ldr	r2, [pc, #16]	; (8004bb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	bd98      	pop	{r3, r4, r7, pc}
 8004bb4:	0800e0d0 	.word	0x0800e0d0

08004bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb8:	b598      	push	{r3, r4, r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004bbc:	f7ff ffd2 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	f7ff f9e5 	bl	8003f90 <LL_RCC_GetAPB2Prescaler>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	0adb      	lsrs	r3, r3, #11
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	bd98      	pop	{r3, r4, r7, pc}
 8004be0:	0800e0d0 	.word	0x0800e0d0

08004be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2bb0      	cmp	r3, #176	; 0xb0
 8004bf0:	d903      	bls.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004bf2:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e007      	b.n	8004c0a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	091b      	lsrs	r3, r3, #4
 8004bfe:	f003 030f 	and.w	r3, r3, #15
 8004c02:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004c0a:	f7ff f9a7 	bl	8003f5c <LL_RCC_GetAHB4Prescaler>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	4a0d      	ldr	r2, [pc, #52]	; (8004c4c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	0c9c      	lsrs	r4, r3, #18
 8004c2e:	f7fe fef5 	bl	8003a1c <HAL_PWREx_GetVoltageRange>
 8004c32:	4603      	mov	r3, r0
 8004c34:	4619      	mov	r1, r3
 8004c36:	4620      	mov	r0, r4
 8004c38:	f000 f80c 	bl	8004c54 <RCC_SetFlashLatency>
 8004c3c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd90      	pop	{r4, r7, pc}
 8004c46:	bf00      	nop
 8004c48:	0800e0f0 	.word	0x0800e0f0
 8004c4c:	0800e090 	.word	0x0800e090
 8004c50:	431bde83 	.word	0x431bde83

08004c54 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c54:	b590      	push	{r4, r7, lr}
 8004c56:	b093      	sub	sp, #76	; 0x4c
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c5e:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <RCC_SetFlashLatency+0xe8>)
 8004c60:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004c6a:	4a35      	ldr	r2, [pc, #212]	; (8004d40 <RCC_SetFlashLatency+0xec>)
 8004c6c:	f107 031c 	add.w	r3, r7, #28
 8004c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004c76:	4b33      	ldr	r3, [pc, #204]	; (8004d44 <RCC_SetFlashLatency+0xf0>)
 8004c78:	f107 040c 	add.w	r4, r7, #12
 8004c7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c82:	2300      	movs	r3, #0
 8004c84:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8c:	d11a      	bne.n	8004cc4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c8e:	2300      	movs	r3, #0
 8004c90:	643b      	str	r3, [r7, #64]	; 0x40
 8004c92:	e013      	b.n	8004cbc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	3348      	adds	r3, #72	; 0x48
 8004c9a:	443b      	add	r3, r7
 8004c9c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d807      	bhi.n	8004cb6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	3348      	adds	r3, #72	; 0x48
 8004cac:	443b      	add	r3, r7
 8004cae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004cb2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004cb4:	e020      	b.n	8004cf8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb8:	3301      	adds	r3, #1
 8004cba:	643b      	str	r3, [r7, #64]	; 0x40
 8004cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d9e8      	bls.n	8004c94 <RCC_SetFlashLatency+0x40>
 8004cc2:	e019      	b.n	8004cf8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc8:	e013      	b.n	8004cf2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	3348      	adds	r3, #72	; 0x48
 8004cd0:	443b      	add	r3, r7
 8004cd2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d807      	bhi.n	8004cec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	3348      	adds	r3, #72	; 0x48
 8004ce2:	443b      	add	r3, r7
 8004ce4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ce8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004cea:	e005      	b.n	8004cf8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cee:	3301      	adds	r3, #1
 8004cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d9e8      	bls.n	8004cca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004cf8:	4b13      	ldr	r3, [pc, #76]	; (8004d48 <RCC_SetFlashLatency+0xf4>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f023 0207 	bic.w	r2, r3, #7
 8004d00:	4911      	ldr	r1, [pc, #68]	; (8004d48 <RCC_SetFlashLatency+0xf4>)
 8004d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d04:	4313      	orrs	r3, r2
 8004d06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d08:	f7fd fe46 	bl	8002998 <HAL_GetTick>
 8004d0c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d0e:	e008      	b.n	8004d22 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d10:	f7fd fe42 	bl	8002998 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e007      	b.n	8004d32 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <RCC_SetFlashLatency+0xf4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d1ef      	bne.n	8004d10 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	374c      	adds	r7, #76	; 0x4c
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd90      	pop	{r4, r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	0800d2f0 	.word	0x0800d2f0
 8004d40:	0800d300 	.word	0x0800d300
 8004d44:	0800d30c 	.word	0x0800d30c
 8004d48:	58004000 	.word	0x58004000

08004d4c <LL_RCC_LSE_IsEnabled>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <LL_RCC_LSE_IsEnabled+0x18>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <LL_RCC_LSE_IsEnabled+0x1a>
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <LL_RCC_LSE_IsReady>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d101      	bne.n	8004d88 <LL_RCC_LSE_IsReady+0x18>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <LL_RCC_LSE_IsReady+0x1a>
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <LL_RCC_MSI_EnablePLLMode>:
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004da2:	f043 0304 	orr.w	r3, r3, #4
 8004da6:	6013      	str	r3, [r2, #0]
}
 8004da8:	bf00      	nop
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <LL_RCC_SetRFWKPClockSource>:
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <LL_RCC_SetSMPSClockSource>:
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	f023 0203 	bic.w	r2, r3, #3
 8004df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <LL_RCC_SetSMPSPrescaler>:
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <LL_RCC_SetUSARTClockSource>:
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3e:	f023 0203 	bic.w	r2, r3, #3
 8004e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <LL_RCC_SetLPUARTClockSource>:
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <LL_RCC_SetI2CClockSource>:
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e92:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <LL_RCC_SetLPTIMClockSource>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ecc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	0c1b      	lsrs	r3, r3, #16
 8004ed4:	041b      	lsls	r3, r3, #16
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	401a      	ands	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	041b      	lsls	r3, r3, #16
 8004ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <LL_RCC_SetSAIClockSource>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <LL_RCC_SetRNGClockSource>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <LL_RCC_SetCLK48ClockSource>:
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <LL_RCC_SetUSBClockSource>:
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff ffe3 	bl	8004f4c <LL_RCC_SetCLK48ClockSource>
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <LL_RCC_SetADCClockSource>:
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <LL_RCC_SetRTCClockSource>:
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <LL_RCC_GetRTCClockSource>:
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <LL_RCC_ForceBackupDomainReset>:
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005018:	bf00      	nop
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005022:	b480      	push	{r7}
 8005024:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800503a:	bf00      	nop
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <LL_RCC_PLLSAI1_Enable>:
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005052:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005056:	6013      	str	r3, [r2, #0]
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <LL_RCC_PLLSAI1_Disable>:
{
 8005062:	b480      	push	{r7}
 8005064:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005070:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005074:	6013      	str	r3, [r2, #0]
}
 8005076:	bf00      	nop
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <LL_RCC_PLLSAI1_IsReady>:
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005092:	d101      	bne.n	8005098 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80050ac:	2300      	movs	r3, #0
 80050ae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80050b0:	2300      	movs	r3, #0
 80050b2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d034      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050c8:	d021      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80050ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050ce:	d81b      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050d4:	d01d      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80050d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050da:	d815      	bhi.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80050e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e4:	d110      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80050e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80050f6:	e00d      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 f94d 	bl	800539c <RCCEx_PLLSAI1_ConfigNP>
 8005102:	4603      	mov	r3, r0
 8005104:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005106:	e005      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	77fb      	strb	r3, [r7, #31]
        break;
 800510c:	e002      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800510e:	bf00      	nop
 8005110:	e000      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005112:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005114:	7ffb      	ldrb	r3, [r7, #31]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d105      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fee8 	bl	8004ef4 <LL_RCC_SetSAIClockSource>
 8005124:	e001      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005126:	7ffb      	ldrb	r3, [r7, #31]
 8005128:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005132:	2b00      	cmp	r3, #0
 8005134:	d046      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005136:	f7ff ff56 	bl	8004fe6 <LL_RCC_GetRTCClockSource>
 800513a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	429a      	cmp	r2, r3
 8005144:	d03c      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005146:	f7fe fc59 	bl	80039fc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d105      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff ff30 	bl	8004fba <LL_RCC_SetRTCClockSource>
 800515a:	e02e      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800515c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005164:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005166:	f7ff ff4b 	bl	8005000 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800516a:	f7ff ff5a 	bl	8005022 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800517c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005186:	f7ff fde1 	bl	8004d4c <LL_RCC_LSE_IsEnabled>
 800518a:	4603      	mov	r3, r0
 800518c:	2b01      	cmp	r3, #1
 800518e:	d114      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005190:	f7fd fc02 	bl	8002998 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005196:	e00b      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005198:	f7fd fbfe 	bl	8002998 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d902      	bls.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	77fb      	strb	r3, [r7, #31]
              break;
 80051ae:	e004      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80051b0:	f7ff fdde 	bl	8004d70 <LL_RCC_LSE_IsReady>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d1ee      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80051ba:	7ffb      	ldrb	r3, [r7, #31]
 80051bc:	77bb      	strb	r3, [r7, #30]
 80051be:	e001      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c0:	7ffb      	ldrb	r3, [r7, #31]
 80051c2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fe2a 	bl	8004e2e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fe35 	bl	8004e5a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff fe5d 	bl	8004ec0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fe52 	bl	8004ec0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fe2a 	bl	8004e86 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fe1f 	bl	8004e86 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d022      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fe8d 	bl	8004f78 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005266:	d107      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005276:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005280:	d10b      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3304      	adds	r3, #4
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f8e3 	bl	8005452 <RCCEx_PLLSAI1_ConfigNQ>
 800528c:	4603      	mov	r3, r0
 800528e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005290:	7ffb      	ldrb	r3, [r7, #31]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005296:	7ffb      	ldrb	r3, [r7, #31]
 8005298:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d02b      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ae:	d008      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b8:	d003      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d105      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fe2a 	bl	8004f20 <LL_RCC_SetRNGClockSource>
 80052cc:	e00a      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	2000      	movs	r0, #0
 80052da:	f7ff fe21 	bl	8004f20 <LL_RCC_SetRNGClockSource>
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff fe34 	bl	8004f4c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80052ec:	d107      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005306:	2b00      	cmp	r3, #0
 8005308:	d022      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fe3d 	bl	8004f8e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800531c:	d107      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800531e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005336:	d10b      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	4618      	mov	r0, r3
 800533e:	f000 f8e3 	bl	8005508 <RCCEx_PLLSAI1_ConfigNR>
 8005342:	4603      	mov	r3, r0
 8005344:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005346:	7ffb      	ldrb	r3, [r7, #31]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800534c:	7ffb      	ldrb	r3, [r7, #31]
 800534e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d004      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fd26 	bl	8004db2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fd45 	bl	8004e06 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fd2c 	bl	8004dde <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005386:	7fbb      	ldrb	r3, [r7, #30]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3720      	adds	r7, #32
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005394:	f7ff fcfe 	bl	8004d94 <LL_RCC_MSI_EnablePLLMode>
}
 8005398:	bf00      	nop
 800539a:	bd80      	pop	{r7, pc}

0800539c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80053a8:	f7ff fe5b 	bl	8005062 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053ac:	f7fd faf4 	bl	8002998 <HAL_GetTick>
 80053b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053b2:	e009      	b.n	80053c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053b4:	f7fd faf0 	bl	8002998 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d902      	bls.n	80053c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	73fb      	strb	r3, [r7, #15]
      break;
 80053c6:	e004      	b.n	80053d2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053c8:	f7ff fe5a 	bl	8005080 <LL_RCC_PLLSAI1_IsReady>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d137      	bne.n	8005448 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80053d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ec:	4313      	orrs	r3, r2
 80053ee:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80053f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005402:	4313      	orrs	r3, r2
 8005404:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005406:	f7ff fe1d 	bl	8005044 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540a:	f7fd fac5 	bl	8002998 <HAL_GetTick>
 800540e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005410:	e009      	b.n	8005426 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005412:	f7fd fac1 	bl	8002998 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d902      	bls.n	8005426 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	73fb      	strb	r3, [r7, #15]
        break;
 8005424:	e004      	b.n	8005430 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005426:	f7ff fe2b 	bl	8005080 <LL_RCC_PLLSAI1_IsReady>
 800542a:	4603      	mov	r3, r0
 800542c:	2b01      	cmp	r3, #1
 800542e:	d1f0      	bne.n	8005412 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d108      	bne.n	8005448 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005444:	4313      	orrs	r3, r2
 8005446:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005448:	7bfb      	ldrb	r3, [r7, #15]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800545e:	f7ff fe00 	bl	8005062 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005462:	f7fd fa99 	bl	8002998 <HAL_GetTick>
 8005466:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005468:	e009      	b.n	800547e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800546a:	f7fd fa95 	bl	8002998 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d902      	bls.n	800547e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	73fb      	strb	r3, [r7, #15]
      break;
 800547c:	e004      	b.n	8005488 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800547e:	f7ff fdff 	bl	8005080 <LL_RCC_PLLSAI1_IsReady>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1f0      	bne.n	800546a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d137      	bne.n	80054fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800548e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054a2:	4313      	orrs	r3, r2
 80054a4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b8:	4313      	orrs	r3, r2
 80054ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80054bc:	f7ff fdc2 	bl	8005044 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c0:	f7fd fa6a 	bl	8002998 <HAL_GetTick>
 80054c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054c6:	e009      	b.n	80054dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054c8:	f7fd fa66 	bl	8002998 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d902      	bls.n	80054dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	73fb      	strb	r3, [r7, #15]
        break;
 80054da:	e004      	b.n	80054e6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054dc:	f7ff fdd0 	bl	8005080 <LL_RCC_PLLSAI1_IsReady>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d1f0      	bne.n	80054c8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d108      	bne.n	80054fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80054ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f0:	691a      	ldr	r2, [r3, #16]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054fa:	4313      	orrs	r3, r2
 80054fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005514:	f7ff fda5 	bl	8005062 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005518:	f7fd fa3e 	bl	8002998 <HAL_GetTick>
 800551c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800551e:	e009      	b.n	8005534 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005520:	f7fd fa3a 	bl	8002998 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d902      	bls.n	8005534 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	73fb      	strb	r3, [r7, #15]
      break;
 8005532:	e004      	b.n	800553e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005534:	f7ff fda4 	bl	8005080 <LL_RCC_PLLSAI1_IsReady>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d137      	bne.n	80055b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005558:	4313      	orrs	r3, r2
 800555a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800555c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800556e:	4313      	orrs	r3, r2
 8005570:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005572:	f7ff fd67 	bl	8005044 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005576:	f7fd fa0f 	bl	8002998 <HAL_GetTick>
 800557a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800557c:	e009      	b.n	8005592 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800557e:	f7fd fa0b 	bl	8002998 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d902      	bls.n	8005592 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	73fb      	strb	r3, [r7, #15]
        break;
 8005590:	e004      	b.n	800559c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005592:	f7ff fd75 	bl	8005080 <LL_RCC_PLLSAI1_IsReady>
 8005596:	4603      	mov	r3, r0
 8005598:	2b01      	cmp	r3, #1
 800559a:	d1f0      	bne.n	800557e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d108      	bne.n	80055b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80055a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055b0:	4313      	orrs	r3, r2
 80055b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e09f      	b.n	8005712 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fc fe3e 	bl	8002268 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055f4:	4b49      	ldr	r3, [pc, #292]	; (800571c <HAL_RTC_Init+0x15c>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b10      	cmp	r3, #16
 80055fe:	d07e      	beq.n	80056fe <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	22ca      	movs	r2, #202	; 0xca
 8005606:	625a      	str	r2, [r3, #36]	; 0x24
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2253      	movs	r2, #83	; 0x53
 800560e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f8ab 	bl	800576c <RTC_EnterInitMode>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	22ff      	movs	r2, #255	; 0xff
 8005622:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2204      	movs	r2, #4
 8005628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
 8005630:	e067      	b.n	8005702 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005644:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6899      	ldr	r1, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	68d2      	ldr	r2, [r2, #12]
 800566c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6919      	ldr	r1, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	041a      	lsls	r2, r3, #16
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005690:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0203 	bic.w	r2, r2, #3
 80056a0:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d113      	bne.n	80056f0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f829 	bl	8005720 <HAL_RTC_WaitForSynchro>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00d      	beq.n	80056f0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	22ff      	movs	r2, #255	; 0xff
 80056da:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2204      	movs	r2, #4
 80056e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e010      	b.n	8005712 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	22ff      	movs	r2, #255	; 0xff
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	73fb      	strb	r3, [r7, #15]
 80056fc:	e001      	b.n	8005702 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d103      	bne.n	8005710 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40002800 	.word	0x40002800

08005720 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005736:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005738:	f7fd f92e 	bl	8002998 <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800573e:	e009      	b.n	8005754 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005740:	f7fd f92a 	bl	8002998 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800574e:	d901      	bls.n	8005754 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e007      	b.n	8005764 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0ee      	beq.n	8005740 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d119      	bne.n	80057b6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f04f 32ff 	mov.w	r2, #4294967295
 800578a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800578c:	f7fd f904 	bl	8002998 <HAL_GetTick>
 8005790:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005792:	e009      	b.n	80057a8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005794:	f7fd f900 	bl	8002998 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057a2:	d901      	bls.n	80057a8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e007      	b.n	80057b8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0ee      	beq.n	8005794 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e0a8      	b.n	800592c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2202      	movs	r2, #2
 80057e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	22ca      	movs	r2, #202	; 0xca
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2253      	movs	r2, #83	; 0x53
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005804:	2b00      	cmp	r3, #0
 8005806:	d020      	beq.n	800584a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005808:	f7fd f8c6 	bl	8002998 <HAL_GetTick>
 800580c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800580e:	e015      	b.n	800583c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005810:	f7fd f8c2 	bl	8002998 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800581e:	d90d      	bls.n	800583c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	22ff      	movs	r2, #255	; 0xff
 8005826:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2203      	movs	r2, #3
 800582c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e077      	b.n	800592c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e2      	bne.n	8005810 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005858:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800586a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800586c:	f7fd f894 	bl	8002998 <HAL_GetTick>
 8005870:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005872:	e015      	b.n	80058a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005874:	f7fd f890 	bl	8002998 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005882:	d90d      	bls.n	80058a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	22ff      	movs	r2, #255	; 0xff
 800588a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2203      	movs	r2, #3
 8005890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e045      	b.n	800592c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0e2      	beq.n	8005874 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0207 	bic.w	r2, r2, #7
 80058c4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6899      	ldr	r1, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80058d6:	4b17      	ldr	r3, [pc, #92]	; (8005934 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058dc:	4a15      	ldr	r2, [pc, #84]	; (8005934 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80058e6:	4b13      	ldr	r3, [pc, #76]	; (8005934 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a12      	ldr	r2, [pc, #72]	; (8005934 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005900:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005910:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	22ff      	movs	r2, #255	; 0xff
 8005918:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	58000800 	.word	0x58000800

08005938 <LL_RCC_GetUSARTClockSource>:
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005944:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4013      	ands	r3, r2
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <LL_RCC_GetLPUARTClockSource>:
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005964:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4013      	ands	r3, r2
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e042      	b.n	8005a10 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7fc fc97 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2224      	movs	r2, #36	; 0x24
 80059a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0201 	bic.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fe14 	bl	80065f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fbe9 	bl	80061a0 <UART_SetConfig>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d101      	bne.n	80059d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e01b      	b.n	8005a10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fe93 	bl	8006734 <UART_CheckIdleState>
 8005a0e:	4603      	mov	r3, r0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d167      	bne.n	8005b00 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_UART_Transmit_DMA+0x24>
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e060      	b.n	8005b02 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	88fa      	ldrh	r2, [r7, #6]
 8005a4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2221      	movs	r2, #33	; 0x21
 8005a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d028      	beq.n	8005ac0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a72:	4a26      	ldr	r2, [pc, #152]	; (8005b0c <HAL_UART_Transmit_DMA+0xf4>)
 8005a74:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a7a:	4a25      	ldr	r2, [pc, #148]	; (8005b10 <HAL_UART_Transmit_DMA+0xf8>)
 8005a7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a82:	4a24      	ldr	r2, [pc, #144]	; (8005b14 <HAL_UART_Transmit_DMA+0xfc>)
 8005a84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a96:	4619      	mov	r1, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3328      	adds	r3, #40	; 0x28
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	f7fd f9df 	bl	8002e64 <HAL_DMA_Start_IT>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d009      	beq.n	8005ac0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2210      	movs	r2, #16
 8005ab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e020      	b.n	8005b02 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2240      	movs	r2, #64	; 0x40
 8005ac6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3308      	adds	r3, #8
 8005ace:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae8:	623a      	str	r2, [r7, #32]
 8005aea:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	69f9      	ldr	r1, [r7, #28]
 8005aee:	6a3a      	ldr	r2, [r7, #32]
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e5      	bne.n	8005ac8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3728      	adds	r7, #40	; 0x28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	08006ab1 	.word	0x08006ab1
 8005b10:	08006b4b 	.word	0x08006b4b
 8005b14:	08006b67 	.word	0x08006b67

08005b18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b0ba      	sub	sp, #232	; 0xe8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b42:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b46:	4013      	ands	r3, r2
 8005b48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d11b      	bne.n	8005b8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d015      	beq.n	8005b8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d105      	bne.n	8005b78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d009      	beq.n	8005b8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 82e3 	beq.w	8006148 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
      }
      return;
 8005b8a:	e2dd      	b.n	8006148 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 8123 	beq.w	8005ddc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b9a:	4b8d      	ldr	r3, [pc, #564]	; (8005dd0 <HAL_UART_IRQHandler+0x2b8>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005ba2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ba6:	4b8b      	ldr	r3, [pc, #556]	; (8005dd4 <HAL_UART_IRQHandler+0x2bc>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8116 	beq.w	8005ddc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d011      	beq.n	8005be0 <HAL_UART_IRQHandler+0xc8>
 8005bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	f043 0201 	orr.w	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d011      	beq.n	8005c10 <HAL_UART_IRQHandler+0xf8>
 8005bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	f043 0204 	orr.w	r2, r3, #4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d011      	beq.n	8005c40 <HAL_UART_IRQHandler+0x128>
 8005c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2204      	movs	r2, #4
 8005c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f043 0202 	orr.w	r2, r3, #2
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d017      	beq.n	8005c7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d105      	bne.n	8005c64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005c5c:	4b5c      	ldr	r3, [pc, #368]	; (8005dd0 <HAL_UART_IRQHandler+0x2b8>)
 8005c5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00b      	beq.n	8005c7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2208      	movs	r2, #8
 8005c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c72:	f043 0208 	orr.w	r2, r3, #8
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d012      	beq.n	8005cae <HAL_UART_IRQHandler+0x196>
 8005c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00c      	beq.n	8005cae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca4:	f043 0220 	orr.w	r2, r3, #32
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8249 	beq.w	800614c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d013      	beq.n	8005cee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d105      	bne.n	8005cde <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b40      	cmp	r3, #64	; 0x40
 8005d04:	d005      	beq.n	8005d12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d054      	beq.n	8005dbc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fe66 	bl	80069e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d146      	bne.n	8005db4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d62:	e841 2300 	strex	r3, r2, [r1]
 8005d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1d9      	bne.n	8005d26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d017      	beq.n	8005dac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d82:	4a15      	ldr	r2, [pc, #84]	; (8005dd8 <HAL_UART_IRQHandler+0x2c0>)
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fd f943 	bl	8003018 <HAL_DMA_Abort_IT>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d019      	beq.n	8005dcc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005da6:	4610      	mov	r0, r2
 8005da8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005daa:	e00f      	b.n	8005dcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f9e1 	bl	8006174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db2:	e00b      	b.n	8005dcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f9dd 	bl	8006174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dba:	e007      	b.n	8005dcc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9d9 	bl	8006174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005dca:	e1bf      	b.n	800614c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	bf00      	nop
    return;
 8005dce:	e1bd      	b.n	800614c <HAL_UART_IRQHandler+0x634>
 8005dd0:	10000001 	.word	0x10000001
 8005dd4:	04000120 	.word	0x04000120
 8005dd8:	08006be7 	.word	0x08006be7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	f040 8153 	bne.w	800608c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 814c 	beq.w	800608c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 8145 	beq.w	800608c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2210      	movs	r2, #16
 8005e08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	f040 80bb 	bne.w	8005f90 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 818f 	beq.w	8006150 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	f080 8187 	bcs.w	8006150 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f040 8087 	bne.w	8005f6e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1da      	bne.n	8005e60 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3308      	adds	r3, #8
 8005eca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ece:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e1      	bne.n	8005eaa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e3      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f3c:	f023 0310 	bic.w	r3, r3, #16
 8005f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f56:	e841 2300 	strex	r3, r2, [r1]
 8005f5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1e4      	bne.n	8005f2c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fc fff6 	bl	8002f5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f8fd 	bl	8006188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f8e:	e0df      	b.n	8006150 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80d1 	beq.w	8006154 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005fb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 80cc 	beq.w	8006154 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fde:	647b      	str	r3, [r7, #68]	; 0x44
 8005fe0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e4      	bne.n	8005fbc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	623b      	str	r3, [r7, #32]
   return(result);
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006008:	f023 0301 	bic.w	r3, r3, #1
 800600c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3308      	adds	r3, #8
 8006016:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800601a:	633a      	str	r2, [r7, #48]	; 0x30
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e1      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0310 	bic.w	r3, r3, #16
 8006056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	69b9      	ldr	r1, [r7, #24]
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	617b      	str	r3, [r7, #20]
   return(result);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e4      	bne.n	8006042 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800607e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f87f 	bl	8006188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800608a:	e063      	b.n	8006154 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800608c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00e      	beq.n	80060b6 <HAL_UART_IRQHandler+0x59e>
 8006098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800609c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d008      	beq.n	80060b6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fdda 	bl	8006c68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060b4:	e051      	b.n	800615a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80060b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d014      	beq.n	80060ec <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80060c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d105      	bne.n	80060da <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80060ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d008      	beq.n	80060ec <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d03a      	beq.n	8006158 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	4798      	blx	r3
    }
    return;
 80060ea:	e035      	b.n	8006158 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d009      	beq.n	800610c <HAL_UART_IRQHandler+0x5f4>
 80060f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fd84 	bl	8006c12 <UART_EndTransmit_IT>
    return;
 800610a:	e026      	b.n	800615a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800610c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d009      	beq.n	800612c <HAL_UART_IRQHandler+0x614>
 8006118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fdb3 	bl	8006c90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800612a:	e016      	b.n	800615a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800612c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d010      	beq.n	800615a <HAL_UART_IRQHandler+0x642>
 8006138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613c:	2b00      	cmp	r3, #0
 800613e:	da0c      	bge.n	800615a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fd9b 	bl	8006c7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006146:	e008      	b.n	800615a <HAL_UART_IRQHandler+0x642>
      return;
 8006148:	bf00      	nop
 800614a:	e006      	b.n	800615a <HAL_UART_IRQHandler+0x642>
    return;
 800614c:	bf00      	nop
 800614e:	e004      	b.n	800615a <HAL_UART_IRQHandler+0x642>
      return;
 8006150:	bf00      	nop
 8006152:	e002      	b.n	800615a <HAL_UART_IRQHandler+0x642>
      return;
 8006154:	bf00      	nop
 8006156:	e000      	b.n	800615a <HAL_UART_IRQHandler+0x642>
    return;
 8006158:	bf00      	nop
  }
}
 800615a:	37e8      	adds	r7, #232	; 0xe8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a4:	b08c      	sub	sp, #48	; 0x30
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	431a      	orrs	r2, r3
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	431a      	orrs	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	4baf      	ldr	r3, [pc, #700]	; (800648c <UART_SetConfig+0x2ec>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061d8:	430b      	orrs	r3, r1
 80061da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4aa4      	ldr	r2, [pc, #656]	; (8006490 <UART_SetConfig+0x2f0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006208:	4313      	orrs	r3, r2
 800620a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006216:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	6812      	ldr	r2, [r2, #0]
 800621e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006220:	430b      	orrs	r3, r1
 8006222:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	f023 010f 	bic.w	r1, r3, #15
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a95      	ldr	r2, [pc, #596]	; (8006494 <UART_SetConfig+0x2f4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d125      	bne.n	8006290 <UART_SetConfig+0xf0>
 8006244:	2003      	movs	r0, #3
 8006246:	f7ff fb77 	bl	8005938 <LL_RCC_GetUSARTClockSource>
 800624a:	4603      	mov	r3, r0
 800624c:	2b03      	cmp	r3, #3
 800624e:	d81b      	bhi.n	8006288 <UART_SetConfig+0xe8>
 8006250:	a201      	add	r2, pc, #4	; (adr r2, 8006258 <UART_SetConfig+0xb8>)
 8006252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006256:	bf00      	nop
 8006258:	08006269 	.word	0x08006269
 800625c:	08006279 	.word	0x08006279
 8006260:	08006271 	.word	0x08006271
 8006264:	08006281 	.word	0x08006281
 8006268:	2301      	movs	r3, #1
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800626e:	e042      	b.n	80062f6 <UART_SetConfig+0x156>
 8006270:	2302      	movs	r3, #2
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006276:	e03e      	b.n	80062f6 <UART_SetConfig+0x156>
 8006278:	2304      	movs	r3, #4
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627e:	e03a      	b.n	80062f6 <UART_SetConfig+0x156>
 8006280:	2308      	movs	r3, #8
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006286:	e036      	b.n	80062f6 <UART_SetConfig+0x156>
 8006288:	2310      	movs	r3, #16
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800628e:	e032      	b.n	80062f6 <UART_SetConfig+0x156>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a7e      	ldr	r2, [pc, #504]	; (8006490 <UART_SetConfig+0x2f0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d12a      	bne.n	80062f0 <UART_SetConfig+0x150>
 800629a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800629e:	f7ff fb5b 	bl	8005958 <LL_RCC_GetLPUARTClockSource>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a8:	d01a      	beq.n	80062e0 <UART_SetConfig+0x140>
 80062aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062ae:	d81b      	bhi.n	80062e8 <UART_SetConfig+0x148>
 80062b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062b4:	d00c      	beq.n	80062d0 <UART_SetConfig+0x130>
 80062b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ba:	d815      	bhi.n	80062e8 <UART_SetConfig+0x148>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <UART_SetConfig+0x128>
 80062c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c4:	d008      	beq.n	80062d8 <UART_SetConfig+0x138>
 80062c6:	e00f      	b.n	80062e8 <UART_SetConfig+0x148>
 80062c8:	2300      	movs	r3, #0
 80062ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ce:	e012      	b.n	80062f6 <UART_SetConfig+0x156>
 80062d0:	2302      	movs	r3, #2
 80062d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d6:	e00e      	b.n	80062f6 <UART_SetConfig+0x156>
 80062d8:	2304      	movs	r3, #4
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062de:	e00a      	b.n	80062f6 <UART_SetConfig+0x156>
 80062e0:	2308      	movs	r3, #8
 80062e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e6:	e006      	b.n	80062f6 <UART_SetConfig+0x156>
 80062e8:	2310      	movs	r3, #16
 80062ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ee:	e002      	b.n	80062f6 <UART_SetConfig+0x156>
 80062f0:	2310      	movs	r3, #16
 80062f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a65      	ldr	r2, [pc, #404]	; (8006490 <UART_SetConfig+0x2f0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	f040 8097 	bne.w	8006430 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006302:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006306:	2b08      	cmp	r3, #8
 8006308:	d823      	bhi.n	8006352 <UART_SetConfig+0x1b2>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <UART_SetConfig+0x170>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006335 	.word	0x08006335
 8006314:	08006353 	.word	0x08006353
 8006318:	0800633d 	.word	0x0800633d
 800631c:	08006353 	.word	0x08006353
 8006320:	08006343 	.word	0x08006343
 8006324:	08006353 	.word	0x08006353
 8006328:	08006353 	.word	0x08006353
 800632c:	08006353 	.word	0x08006353
 8006330:	0800634b 	.word	0x0800634b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006334:	f7fe fc2a 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8006338:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800633a:	e010      	b.n	800635e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800633c:	4b56      	ldr	r3, [pc, #344]	; (8006498 <UART_SetConfig+0x2f8>)
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006340:	e00d      	b.n	800635e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006342:	f7fe fba3 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8006346:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006348:	e009      	b.n	800635e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800634a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006350:	e005      	b.n	800635e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006352:	2300      	movs	r3, #0
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800635c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 812b 	beq.w	80065bc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	4a4c      	ldr	r2, [pc, #304]	; (800649c <UART_SetConfig+0x2fc>)
 800636c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006370:	461a      	mov	r2, r3
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	fbb3 f3f2 	udiv	r3, r3, r2
 8006378:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	4413      	add	r3, r2
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	429a      	cmp	r2, r3
 8006388:	d305      	bcc.n	8006396 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	429a      	cmp	r2, r3
 8006394:	d903      	bls.n	800639e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800639c:	e10e      	b.n	80065bc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	2200      	movs	r2, #0
 80063a2:	60bb      	str	r3, [r7, #8]
 80063a4:	60fa      	str	r2, [r7, #12]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	4a3c      	ldr	r2, [pc, #240]	; (800649c <UART_SetConfig+0x2fc>)
 80063ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2200      	movs	r2, #0
 80063b4:	603b      	str	r3, [r7, #0]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063c0:	f7f9 ff36 	bl	8000230 <__aeabi_uldivmod>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4610      	mov	r0, r2
 80063ca:	4619      	mov	r1, r3
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	020b      	lsls	r3, r1, #8
 80063d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063da:	0202      	lsls	r2, r0, #8
 80063dc:	6979      	ldr	r1, [r7, #20]
 80063de:	6849      	ldr	r1, [r1, #4]
 80063e0:	0849      	lsrs	r1, r1, #1
 80063e2:	2000      	movs	r0, #0
 80063e4:	460c      	mov	r4, r1
 80063e6:	4605      	mov	r5, r0
 80063e8:	eb12 0804 	adds.w	r8, r2, r4
 80063ec:	eb43 0905 	adc.w	r9, r3, r5
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	469a      	mov	sl, r3
 80063f8:	4693      	mov	fp, r2
 80063fa:	4652      	mov	r2, sl
 80063fc:	465b      	mov	r3, fp
 80063fe:	4640      	mov	r0, r8
 8006400:	4649      	mov	r1, r9
 8006402:	f7f9 ff15 	bl	8000230 <__aeabi_uldivmod>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	4613      	mov	r3, r2
 800640c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006414:	d308      	bcc.n	8006428 <UART_SetConfig+0x288>
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800641c:	d204      	bcs.n	8006428 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6a3a      	ldr	r2, [r7, #32]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	e0c9      	b.n	80065bc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800642e:	e0c5      	b.n	80065bc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	d16d      	bne.n	8006516 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800643a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800643e:	3b01      	subs	r3, #1
 8006440:	2b07      	cmp	r3, #7
 8006442:	d82d      	bhi.n	80064a0 <UART_SetConfig+0x300>
 8006444:	a201      	add	r2, pc, #4	; (adr r2, 800644c <UART_SetConfig+0x2ac>)
 8006446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644a:	bf00      	nop
 800644c:	0800646d 	.word	0x0800646d
 8006450:	08006475 	.word	0x08006475
 8006454:	080064a1 	.word	0x080064a1
 8006458:	0800647b 	.word	0x0800647b
 800645c:	080064a1 	.word	0x080064a1
 8006460:	080064a1 	.word	0x080064a1
 8006464:	080064a1 	.word	0x080064a1
 8006468:	08006483 	.word	0x08006483
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646c:	f7fe fba4 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 8006470:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006472:	e01b      	b.n	80064ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006474:	4b08      	ldr	r3, [pc, #32]	; (8006498 <UART_SetConfig+0x2f8>)
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006478:	e018      	b.n	80064ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647a:	f7fe fb07 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 800647e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006480:	e014      	b.n	80064ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006488:	e010      	b.n	80064ac <UART_SetConfig+0x30c>
 800648a:	bf00      	nop
 800648c:	cfff69f3 	.word	0xcfff69f3
 8006490:	40008000 	.word	0x40008000
 8006494:	40013800 	.word	0x40013800
 8006498:	00f42400 	.word	0x00f42400
 800649c:	0800e130 	.word	0x0800e130
      default:
        pclk = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8084 	beq.w	80065bc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	4a4b      	ldr	r2, [pc, #300]	; (80065e8 <UART_SetConfig+0x448>)
 80064ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064be:	461a      	mov	r2, r3
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80064c6:	005a      	lsls	r2, r3, #1
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	441a      	add	r2, r3
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	2b0f      	cmp	r3, #15
 80064de:	d916      	bls.n	800650e <UART_SetConfig+0x36e>
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e6:	d212      	bcs.n	800650e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f023 030f 	bic.w	r3, r3, #15
 80064f0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	085b      	lsrs	r3, r3, #1
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	8bfb      	ldrh	r3, [r7, #30]
 8006500:	4313      	orrs	r3, r2
 8006502:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	8bfa      	ldrh	r2, [r7, #30]
 800650a:	60da      	str	r2, [r3, #12]
 800650c:	e056      	b.n	80065bc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006514:	e052      	b.n	80065bc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800651a:	3b01      	subs	r3, #1
 800651c:	2b07      	cmp	r3, #7
 800651e:	d822      	bhi.n	8006566 <UART_SetConfig+0x3c6>
 8006520:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <UART_SetConfig+0x388>)
 8006522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006526:	bf00      	nop
 8006528:	08006549 	.word	0x08006549
 800652c:	08006551 	.word	0x08006551
 8006530:	08006567 	.word	0x08006567
 8006534:	08006557 	.word	0x08006557
 8006538:	08006567 	.word	0x08006567
 800653c:	08006567 	.word	0x08006567
 8006540:	08006567 	.word	0x08006567
 8006544:	0800655f 	.word	0x0800655f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006548:	f7fe fb36 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 800654c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800654e:	e010      	b.n	8006572 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006550:	4b26      	ldr	r3, [pc, #152]	; (80065ec <UART_SetConfig+0x44c>)
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006554:	e00d      	b.n	8006572 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006556:	f7fe fa99 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 800655a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800655c:	e009      	b.n	8006572 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800655e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006564:	e005      	b.n	8006572 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006570:	bf00      	nop
    }

    if (pclk != 0U)
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	d021      	beq.n	80065bc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	4a1a      	ldr	r2, [pc, #104]	; (80065e8 <UART_SetConfig+0x448>)
 800657e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006582:	461a      	mov	r2, r3
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	fbb3 f2f2 	udiv	r2, r3, r2
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	441a      	add	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	2b0f      	cmp	r3, #15
 80065a0:	d909      	bls.n	80065b6 <UART_SetConfig+0x416>
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a8:	d205      	bcs.n	80065b6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60da      	str	r2, [r3, #12]
 80065b4:	e002      	b.n	80065bc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2201      	movs	r2, #1
 80065c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2200      	movs	r2, #0
 80065d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2200      	movs	r2, #0
 80065d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80065d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3730      	adds	r7, #48	; 0x30
 80065e0:	46bd      	mov	sp, r7
 80065e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065e6:	bf00      	nop
 80065e8:	0800e130 	.word	0x0800e130
 80065ec:	00f42400 	.word	0x00f42400

080065f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	f003 0308 	and.w	r3, r3, #8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00a      	beq.n	800665e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01a      	beq.n	8006706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ee:	d10a      	bne.n	8006706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	605a      	str	r2, [r3, #4]
  }
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b098      	sub	sp, #96	; 0x60
 8006738:	af02      	add	r7, sp, #8
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006744:	f7fc f928 	bl	8002998 <HAL_GetTick>
 8006748:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b08      	cmp	r3, #8
 8006756:	d12f      	bne.n	80067b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006760:	2200      	movs	r2, #0
 8006762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f88e 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d022      	beq.n	80067b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006786:	653b      	str	r3, [r7, #80]	; 0x50
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	461a      	mov	r2, r3
 800678e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006790:	647b      	str	r3, [r7, #68]	; 0x44
 8006792:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006798:	e841 2300 	strex	r3, r2, [r1]
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800679e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e6      	bne.n	8006772 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e063      	b.n	8006880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d149      	bne.n	800685a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ce:	2200      	movs	r2, #0
 80067d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f857 	bl	8006888 <UART_WaitOnFlagUntilTimeout>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d03c      	beq.n	800685a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	623b      	str	r3, [r7, #32]
   return(result);
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006800:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e6      	bne.n	80067e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3308      	adds	r3, #8
 8006818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	60fb      	str	r3, [r7, #12]
   return(result);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f023 0301 	bic.w	r3, r3, #1
 8006828:	64bb      	str	r3, [r7, #72]	; 0x48
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3308      	adds	r3, #8
 8006830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006832:	61fa      	str	r2, [r7, #28]
 8006834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	69b9      	ldr	r1, [r7, #24]
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	617b      	str	r3, [r7, #20]
   return(result);
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e5      	bne.n	8006812 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e012      	b.n	8006880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3758      	adds	r7, #88	; 0x58
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	4613      	mov	r3, r2
 8006896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006898:	e04f      	b.n	800693a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a0:	d04b      	beq.n	800693a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a2:	f7fc f879 	bl	8002998 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d302      	bcc.n	80068b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e04e      	b.n	800695a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d037      	beq.n	800693a <UART_WaitOnFlagUntilTimeout+0xb2>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b80      	cmp	r3, #128	; 0x80
 80068ce:	d034      	beq.n	800693a <UART_WaitOnFlagUntilTimeout+0xb2>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d031      	beq.n	800693a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d110      	bne.n	8006906 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2208      	movs	r2, #8
 80068ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 f879 	bl	80069e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2208      	movs	r2, #8
 80068f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e029      	b.n	800695a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006914:	d111      	bne.n	800693a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800691e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 f85f 	bl	80069e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e00f      	b.n	800695a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4013      	ands	r3, r2
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	429a      	cmp	r2, r3
 8006948:	bf0c      	ite	eq
 800694a:	2301      	moveq	r3, #1
 800694c:	2300      	movne	r3, #0
 800694e:	b2db      	uxtb	r3, r3
 8006950:	461a      	mov	r2, r3
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	429a      	cmp	r2, r3
 8006956:	d0a0      	beq.n	800689a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006962:	b480      	push	{r7}
 8006964:	b08f      	sub	sp, #60	; 0x3c
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	61fb      	str	r3, [r7, #28]
   return(result);
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800698a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800698e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e6      	bne.n	800696a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3308      	adds	r3, #8
 80069a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80069b2:	633b      	str	r3, [r7, #48]	; 0x30
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069bc:	61ba      	str	r2, [r7, #24]
 80069be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6979      	ldr	r1, [r7, #20]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	613b      	str	r3, [r7, #16]
   return(result);
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e5      	bne.n	800699c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80069d8:	bf00      	nop
 80069da:	373c      	adds	r7, #60	; 0x3c
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b095      	sub	sp, #84	; 0x54
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8006a0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e6      	bne.n	80069ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3308      	adds	r3, #8
 8006a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a34:	f023 0301 	bic.w	r3, r3, #1
 8006a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e3      	bne.n	8006a1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d118      	bne.n	8006a90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f023 0310 	bic.w	r3, r3, #16
 8006a72:	647b      	str	r3, [r7, #68]	; 0x44
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6979      	ldr	r1, [r7, #20]
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	613b      	str	r3, [r7, #16]
   return(result);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e6      	bne.n	8006a5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006aa4:	bf00      	nop
 8006aa6:	3754      	adds	r7, #84	; 0x54
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b090      	sub	sp, #64	; 0x40
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d137      	bne.n	8006b3c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006af4:	633a      	str	r2, [r7, #48]	; 0x30
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e5      	bne.n	8006ad4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	69b9      	ldr	r1, [r7, #24]
 8006b2c:	69fa      	ldr	r2, [r7, #28]
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	617b      	str	r3, [r7, #20]
   return(result);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e6      	bne.n	8006b08 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b3a:	e002      	b.n	8006b42 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b3e:	f7fb f893 	bl	8001c68 <HAL_UART_TxCpltCallback>
}
 8006b42:	bf00      	nop
 8006b44:	3740      	adds	r7, #64	; 0x40
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7ff fb01 	bl	8006160 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b5e:	bf00      	nop
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b086      	sub	sp, #24
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b72:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8e:	2b80      	cmp	r3, #128	; 0x80
 8006b90:	d109      	bne.n	8006ba6 <UART_DMAError+0x40>
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2b21      	cmp	r3, #33	; 0x21
 8006b96:	d106      	bne.n	8006ba6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006ba0:	6978      	ldr	r0, [r7, #20]
 8006ba2:	f7ff fede 	bl	8006962 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d109      	bne.n	8006bc8 <UART_DMAError+0x62>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b22      	cmp	r3, #34	; 0x22
 8006bb8:	d106      	bne.n	8006bc8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006bc2:	6978      	ldr	r0, [r7, #20]
 8006bc4:	f7ff ff0e 	bl	80069e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bce:	f043 0210 	orr.w	r2, r3, #16
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bd8:	6978      	ldr	r0, [r7, #20]
 8006bda:	f7ff facb 	bl	8006174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bde:	bf00      	nop
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff fab5 	bl	8006174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c0a:	bf00      	nop
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b088      	sub	sp, #32
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	461a      	mov	r2, r3
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	613b      	str	r3, [r7, #16]
   return(result);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e6      	bne.n	8006c1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fb f804 	bl	8001c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c60:	bf00      	nop
 8006c62:	3720      	adds	r7, #32
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_UARTEx_DisableFifoMode+0x16>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e027      	b.n	8006d0a <HAL_UARTEx_DisableFifoMode+0x66>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2224      	movs	r2, #36	; 0x24
 8006cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0201 	bic.w	r2, r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ce8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e02d      	b.n	8006d8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2224      	movs	r2, #36	; 0x24
 8006d3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0201 	bic.w	r2, r2, #1
 8006d54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f850 	bl	8006e10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e02d      	b.n	8006e06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2224      	movs	r2, #36	; 0x24
 8006db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f812 	bl	8006e10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d108      	bne.n	8006e32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e30:	e031      	b.n	8006e96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e32:	2308      	movs	r3, #8
 8006e34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e36:	2308      	movs	r3, #8
 8006e38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	0e5b      	lsrs	r3, r3, #25
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	0f5b      	lsrs	r3, r3, #29
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	7b3a      	ldrb	r2, [r7, #12]
 8006e5e:	4911      	ldr	r1, [pc, #68]	; (8006ea4 <UARTEx_SetNbDataToProcess+0x94>)
 8006e60:	5c8a      	ldrb	r2, [r1, r2]
 8006e62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e66:	7b3a      	ldrb	r2, [r7, #12]
 8006e68:	490f      	ldr	r1, [pc, #60]	; (8006ea8 <UARTEx_SetNbDataToProcess+0x98>)
 8006e6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	7b7a      	ldrb	r2, [r7, #13]
 8006e7c:	4909      	ldr	r1, [pc, #36]	; (8006ea4 <UARTEx_SetNbDataToProcess+0x94>)
 8006e7e:	5c8a      	ldrb	r2, [r1, r2]
 8006e80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e84:	7b7a      	ldrb	r2, [r7, #13]
 8006e86:	4908      	ldr	r1, [pc, #32]	; (8006ea8 <UARTEx_SetNbDataToProcess+0x98>)
 8006e88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	0800e148 	.word	0x0800e148
 8006ea8:	0800e150 	.word	0x0800e150

08006eac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006eb4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006eb8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	43db      	mvns	r3, r3
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	4013      	ands	r3, r2
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	1d3b      	adds	r3, r7, #4
 8006eec:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b0cc      	sub	sp, #304	; 0x130
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	4602      	mov	r2, r0
 8006f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006f2e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006f30:	f107 0310 	add.w	r3, r7, #16
 8006f34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f52:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006f56:	7812      	ldrb	r2, [r2, #0]
 8006f58:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f5e:	3301      	adds	r3, #1
 8006f60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f68:	2218      	movs	r2, #24
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f001 f8c9 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f72:	233f      	movs	r3, #63	; 0x3f
 8006f74:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8006f78:	2385      	movs	r3, #133	; 0x85
 8006f7a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f7e:	f107 0310 	add.w	r3, r7, #16
 8006f82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006f8e:	f107 030f 	add.w	r3, r7, #15
 8006f92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 fb5a 	bl	800865c <hci_send_req>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	da01      	bge.n	8006fb2 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006fae:	23ff      	movs	r3, #255	; 0xff
 8006fb0:	e004      	b.n	8006fbc <aci_gap_set_io_capability+0x9e>
  return status;
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006fba:	781b      	ldrb	r3, [r3, #0]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006fc6:	b5b0      	push	{r4, r5, r7, lr}
 8006fc8:	b0cc      	sub	sp, #304	; 0x130
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	4605      	mov	r5, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006fdc:	462a      	mov	r2, r5
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006fe8:	4622      	mov	r2, r4
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff0:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007000:	460a      	mov	r2, r1
 8007002:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007004:	f107 0310 	add.w	r3, r7, #16
 8007008:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800700c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007010:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800701e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007022:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007026:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800702a:	7812      	ldrb	r2, [r2, #0]
 800702c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800702e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007032:	3301      	adds	r3, #1
 8007034:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007040:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007044:	7812      	ldrb	r2, [r2, #0]
 8007046:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007048:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800704c:	3301      	adds	r3, #1
 800704e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007056:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800705a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007062:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007066:	3301      	adds	r3, #1
 8007068:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800706c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007070:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007074:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007078:	7812      	ldrb	r2, [r2, #0]
 800707a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800707c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007080:	3301      	adds	r3, #1
 8007082:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708a:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800708e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007090:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007094:	3301      	adds	r3, #1
 8007096:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800709a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709e:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80070a2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80070a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070a8:	3301      	adds	r3, #1
 80070aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80070ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80070b6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80070b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070bc:	3301      	adds	r3, #1
 80070be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80070c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80070ca:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80070ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070d2:	3304      	adds	r3, #4
 80070d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80070d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070dc:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80070e0:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80070e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070e6:	3301      	adds	r3, #1
 80070e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070f0:	2218      	movs	r2, #24
 80070f2:	2100      	movs	r1, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 f805 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 80070fa:	233f      	movs	r3, #63	; 0x3f
 80070fc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007100:	2386      	movs	r3, #134	; 0x86
 8007102:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007106:	f107 0310 	add.w	r3, r7, #16
 800710a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800710e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007112:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007116:	f107 030f 	add.w	r3, r7, #15
 800711a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800711e:	2301      	movs	r3, #1
 8007120:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007124:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007128:	2100      	movs	r1, #0
 800712a:	4618      	mov	r0, r3
 800712c:	f001 fa96 	bl	800865c <hci_send_req>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	da01      	bge.n	800713a <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007136:	23ff      	movs	r3, #255	; 0xff
 8007138:	e004      	b.n	8007144 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800713a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007142:	781b      	ldrb	r3, [r3, #0]
}
 8007144:	4618      	mov	r0, r3
 8007146:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800714a:	46bd      	mov	sp, r7
 800714c:	bdb0      	pop	{r4, r5, r7, pc}

0800714e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800714e:	b590      	push	{r4, r7, lr}
 8007150:	b0cd      	sub	sp, #308	; 0x134
 8007152:	af00      	add	r7, sp, #0
 8007154:	4604      	mov	r4, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800715e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007168:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800716c:	4622      	mov	r2, r4
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007174:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007178:	4602      	mov	r2, r0
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007180:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007184:	460a      	mov	r2, r1
 8007186:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007188:	f107 0310 	add.w	r3, r7, #16
 800718c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007190:	f107 0308 	add.w	r3, r7, #8
 8007194:	2207      	movs	r2, #7
 8007196:	2100      	movs	r1, #0
 8007198:	4618      	mov	r0, r3
 800719a:	f000 ffb3 	bl	8008104 <Osal_MemSet>
  int index_input = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80071a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071ac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80071b0:	7812      	ldrb	r2, [r2, #0]
 80071b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80071b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071b8:	3301      	adds	r3, #1
 80071ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80071be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071c6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80071ca:	7812      	ldrb	r2, [r2, #0]
 80071cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80071ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071d2:	3301      	adds	r3, #1
 80071d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80071d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071e0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80071e4:	7812      	ldrb	r2, [r2, #0]
 80071e6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80071e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071ec:	3301      	adds	r3, #1
 80071ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071f6:	2218      	movs	r2, #24
 80071f8:	2100      	movs	r1, #0
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 ff82 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007200:	233f      	movs	r3, #63	; 0x3f
 8007202:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007206:	238a      	movs	r3, #138	; 0x8a
 8007208:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800720c:	f107 0310 	add.w	r3, r7, #16
 8007210:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007214:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007218:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800721c:	f107 0308 	add.w	r3, r7, #8
 8007220:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007224:	2307      	movs	r3, #7
 8007226:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800722a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f001 fa13 	bl	800865c <hci_send_req>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	da01      	bge.n	8007240 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800723c:	23ff      	movs	r3, #255	; 0xff
 800723e:	e02e      	b.n	800729e <aci_gap_init+0x150>
  if ( resp.Status )
 8007240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007244:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <aci_gap_init+0x10c>
    return resp.Status;
 800724e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007252:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	e021      	b.n	800729e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800725a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007262:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007266:	b29a      	uxth	r2, r3
 8007268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007278:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800727c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007280:	b29a      	uxth	r2, r3
 8007282:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007286:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007290:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800729a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd90      	pop	{r4, r7, pc}

080072a8 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072b2:	f107 0308 	add.w	r3, r7, #8
 80072b6:	2218      	movs	r2, #24
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 ff22 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 80072c0:	233f      	movs	r3, #63	; 0x3f
 80072c2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80072c4:	2392      	movs	r3, #146	; 0x92
 80072c6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80072c8:	1dfb      	adds	r3, r7, #7
 80072ca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80072cc:	2301      	movs	r3, #1
 80072ce:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072d0:	f107 0308 	add.w	r3, r7, #8
 80072d4:	2100      	movs	r1, #0
 80072d6:	4618      	mov	r0, r3
 80072d8:	f001 f9c0 	bl	800865c <hci_send_req>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da01      	bge.n	80072e6 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80072e2:	23ff      	movs	r3, #255	; 0xff
 80072e4:	e000      	b.n	80072e8 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80072e6:	79fb      	ldrb	r3, [r7, #7]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 80072f0:	b5b0      	push	{r4, r5, r7, lr}
 80072f2:	b0cc      	sub	sp, #304	; 0x130
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4605      	mov	r5, r0
 80072f8:	460c      	mov	r4, r1
 80072fa:	4610      	mov	r0, r2
 80072fc:	4619      	mov	r1, r3
 80072fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007302:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007306:	462a      	mov	r2, r5
 8007308:	801a      	strh	r2, [r3, #0]
 800730a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007312:	4622      	mov	r2, r4
 8007314:	801a      	strh	r2, [r3, #0]
 8007316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800731e:	4602      	mov	r2, r0
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800732a:	460a      	mov	r2, r1
 800732c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800732e:	f107 0310 	add.w	r3, r7, #16
 8007332:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8007348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007350:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007354:	8812      	ldrh	r2, [r2, #0]
 8007356:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007358:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800735c:	3302      	adds	r3, #2
 800735e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 8007362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007366:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800736a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800736e:	8812      	ldrh	r2, [r2, #0]
 8007370:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007372:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007376:	3302      	adds	r3, #2
 8007378:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800737c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007380:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007384:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800738c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007390:	3301      	adds	r3, #1
 8007392:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 8007396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800739e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80073a2:	7812      	ldrb	r2, [r2, #0]
 80073a4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80073a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073aa:	3301      	adds	r3, #1
 80073ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073b4:	2218      	movs	r2, #24
 80073b6:	2100      	movs	r1, #0
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fea3 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 80073be:	233f      	movs	r3, #63	; 0x3f
 80073c0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 80073c4:	2397      	movs	r3, #151	; 0x97
 80073c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80073ca:	230f      	movs	r3, #15
 80073cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80073d0:	f107 0310 	add.w	r3, r7, #16
 80073d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80073e0:	f107 030f 	add.w	r3, r7, #15
 80073e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80073e8:	2301      	movs	r3, #1
 80073ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073f2:	2100      	movs	r1, #0
 80073f4:	4618      	mov	r0, r3
 80073f6:	f001 f931 	bl	800865c <hci_send_req>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	da01      	bge.n	8007404 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8007400:	23ff      	movs	r3, #255	; 0xff
 8007402:	e004      	b.n	800740e <aci_gap_start_general_discovery_proc+0x11e>
  return status;
 8007404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007408:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800740c:	781b      	ldrb	r3, [r3, #0]
}
 800740e:	4618      	mov	r0, r3
 8007410:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007414:	46bd      	mov	sp, r7
 8007416:	bdb0      	pop	{r4, r5, r7, pc}

08007418 <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 8007418:	b590      	push	{r4, r7, lr}
 800741a:	b0cf      	sub	sp, #316	; 0x13c
 800741c:	af00      	add	r7, sp, #0
 800741e:	4604      	mov	r4, r0
 8007420:	4608      	mov	r0, r1
 8007422:	4611      	mov	r1, r2
 8007424:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007428:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007432:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007436:	4622      	mov	r2, r4
 8007438:	801a      	strh	r2, [r3, #0]
 800743a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800743e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007442:	4602      	mov	r2, r0
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800744a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800744e:	460a      	mov	r2, r1
 8007450:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8007452:	f107 0318 	add.w	r3, r7, #24
 8007456:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800745a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800745e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800746c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007470:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007474:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007478:	8812      	ldrh	r2, [r2, #0]
 800747a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800747c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007480:	3302      	adds	r3, #2
 8007482:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 8007486:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800748a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800748e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007492:	8812      	ldrh	r2, [r2, #0]
 8007494:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007496:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800749a:	3302      	adds	r3, #2
 800749c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 80074a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074a4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80074a8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80074ac:	7812      	ldrb	r2, [r2, #0]
 80074ae:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80074b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80074b4:	3301      	adds	r3, #1
 80074b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 80074ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074be:	1d58      	adds	r0, r3, #5
 80074c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80074c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80074c8:	2206      	movs	r2, #6
 80074ca:	6819      	ldr	r1, [r3, #0]
 80074cc:	f000 fe0a 	bl	80080e4 <Osal_MemCpy>
  index_input += 6;
 80074d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80074d4:	3306      	adds	r3, #6
 80074d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 80074da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074de:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80074e2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80074e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80074e8:	3301      	adds	r3, #1
 80074ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 80074ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074f2:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80074f6:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 80074f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80074fc:	3302      	adds	r3, #2
 80074fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8007502:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007506:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 800750a:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 800750c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007510:	3302      	adds	r3, #2
 8007512:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 8007516:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800751a:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 800751e:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8007520:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007524:	3302      	adds	r3, #2
 8007526:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 800752a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800752e:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8007532:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8007534:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007538:	3302      	adds	r3, #2
 800753a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 800753e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007542:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007546:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8007548:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800754c:	3302      	adds	r3, #2
 800754e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8007552:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007556:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800755a:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 800755c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007560:	3302      	adds	r3, #2
 8007562:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007566:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800756a:	2218      	movs	r2, #24
 800756c:	2100      	movs	r1, #0
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fdc8 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007574:	233f      	movs	r3, #63	; 0x3f
 8007576:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 800757a:	239c      	movs	r3, #156	; 0x9c
 800757c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8007580:	230f      	movs	r3, #15
 8007582:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8007586:	f107 0318 	add.w	r3, r7, #24
 800758a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800758e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007592:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8007596:	f107 0317 	add.w	r3, r7, #23
 800759a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800759e:	2301      	movs	r3, #1
 80075a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80075a8:	2100      	movs	r1, #0
 80075aa:	4618      	mov	r0, r3
 80075ac:	f001 f856 	bl	800865c <hci_send_req>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	da01      	bge.n	80075ba <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 80075b6:	23ff      	movs	r3, #255	; 0xff
 80075b8:	e004      	b.n	80075c4 <aci_gap_create_connection+0x1ac>
  return status;
 80075ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80075be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80075c2:	781b      	ldrb	r3, [r3, #0]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd90      	pop	{r4, r7, pc}

080075ce <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b088      	sub	sp, #32
 80075d2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075d8:	f107 0308 	add.w	r3, r7, #8
 80075dc:	2218      	movs	r2, #24
 80075de:	2100      	movs	r1, #0
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fd8f 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 80075e6:	233f      	movs	r3, #63	; 0x3f
 80075e8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80075ea:	f240 1301 	movw	r3, #257	; 0x101
 80075ee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80075f0:	1dfb      	adds	r3, r7, #7
 80075f2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80075f4:	2301      	movs	r3, #1
 80075f6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075f8:	f107 0308 	add.w	r3, r7, #8
 80075fc:	2100      	movs	r1, #0
 80075fe:	4618      	mov	r0, r3
 8007600:	f001 f82c 	bl	800865c <hci_send_req>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	da01      	bge.n	800760e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800760a:	23ff      	movs	r3, #255	; 0xff
 800760c:	e000      	b.n	8007610 <aci_gatt_init+0x42>
  return status;
 800760e:	79fb      	ldrb	r3, [r7, #7]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007618:	b5b0      	push	{r4, r5, r7, lr}
 800761a:	b0cc      	sub	sp, #304	; 0x130
 800761c:	af00      	add	r7, sp, #0
 800761e:	4605      	mov	r5, r0
 8007620:	460c      	mov	r4, r1
 8007622:	4610      	mov	r0, r2
 8007624:	4619      	mov	r1, r3
 8007626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800762e:	462a      	mov	r2, r5
 8007630:	801a      	strh	r2, [r3, #0]
 8007632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007636:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800763a:	4622      	mov	r2, r4
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007642:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007646:	4602      	mov	r2, r0
 8007648:	701a      	strb	r2, [r3, #0]
 800764a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007652:	460a      	mov	r2, r1
 8007654:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007656:	f107 0310 	add.w	r3, r7, #16
 800765a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800765e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007662:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800766a:	2300      	movs	r3, #0
 800766c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007674:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007678:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800767c:	8812      	ldrh	r2, [r2, #0]
 800767e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007680:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007684:	3302      	adds	r3, #2
 8007686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800768a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800768e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007692:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007696:	8812      	ldrh	r2, [r2, #0]
 8007698:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800769a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800769e:	3302      	adds	r3, #2
 80076a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80076a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076ac:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80076b0:	7812      	ldrb	r2, [r2, #0]
 80076b2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80076b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076b8:	3301      	adds	r3, #1
 80076ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80076be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076c6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80076ca:	7812      	ldrb	r2, [r2, #0]
 80076cc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80076ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076d2:	3301      	adds	r3, #1
 80076d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80076d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076dc:	1d98      	adds	r0, r3, #6
 80076de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80076ee:	f000 fcf9 	bl	80080e4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80076f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007700:	4413      	add	r3, r2
 8007702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800770a:	2218      	movs	r2, #24
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fcf8 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007714:	233f      	movs	r3, #63	; 0x3f
 8007716:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800771a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800771e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007722:	f107 0310 	add.w	r3, r7, #16
 8007726:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800772a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800772e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007732:	f107 030f 	add.w	r3, r7, #15
 8007736:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800773a:	2301      	movs	r3, #1
 800773c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007740:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007744:	2100      	movs	r1, #0
 8007746:	4618      	mov	r0, r3
 8007748:	f000 ff88 	bl	800865c <hci_send_req>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	da01      	bge.n	8007756 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007752:	23ff      	movs	r3, #255	; 0xff
 8007754:	e004      	b.n	8007760 <aci_gatt_update_char_value+0x148>
  return status;
 8007756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800775e:	781b      	ldrb	r3, [r3, #0]
}
 8007760:	4618      	mov	r0, r3
 8007762:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007766:	46bd      	mov	sp, r7
 8007768:	bdb0      	pop	{r4, r5, r7, pc}

0800776a <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b0cc      	sub	sp, #304	; 0x130
 800776e:	af00      	add	r7, sp, #0
 8007770:	4602      	mov	r2, r0
 8007772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007776:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800777a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 800777c:	f107 0310 	add.w	r3, r7, #16
 8007780:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007788:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800778c:	2200      	movs	r2, #0
 800778e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800779e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80077a2:	8812      	ldrh	r2, [r2, #0]
 80077a4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80077a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077aa:	3302      	adds	r3, #2
 80077ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077b4:	2218      	movs	r2, #24
 80077b6:	2100      	movs	r1, #0
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fca3 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 80077be:	233f      	movs	r3, #63	; 0x3f
 80077c0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 80077c4:	f44f 7389 	mov.w	r3, #274	; 0x112
 80077c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80077cc:	230f      	movs	r3, #15
 80077ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80077d2:	f107 0310 	add.w	r3, r7, #16
 80077d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80077e2:	f107 030f 	add.w	r3, r7, #15
 80077e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80077ea:	2301      	movs	r3, #1
 80077ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077f4:	2100      	movs	r1, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 ff30 	bl	800865c <hci_send_req>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da01      	bge.n	8007806 <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 8007802:	23ff      	movs	r3, #255	; 0xff
 8007804:	e004      	b.n	8007810 <aci_gatt_disc_all_primary_services+0xa6>
  return status;
 8007806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800780e:	781b      	ldrb	r3, [r3, #0]
}
 8007810:	4618      	mov	r0, r3
 8007812:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 800781a:	b590      	push	{r4, r7, lr}
 800781c:	b0cd      	sub	sp, #308	; 0x134
 800781e:	af00      	add	r7, sp, #0
 8007820:	4604      	mov	r4, r0
 8007822:	4608      	mov	r0, r1
 8007824:	4611      	mov	r1, r2
 8007826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800782e:	4622      	mov	r2, r4
 8007830:	801a      	strh	r2, [r3, #0]
 8007832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800783a:	4602      	mov	r2, r0
 800783c:	801a      	strh	r2, [r3, #0]
 800783e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007842:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007846:	460a      	mov	r2, r1
 8007848:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800784a:	f107 0310 	add.w	r3, r7, #16
 800784e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007856:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007868:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800786c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007870:	8812      	ldrh	r2, [r2, #0]
 8007872:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007874:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007878:	3302      	adds	r3, #2
 800787a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 800787e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007882:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007886:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800788a:	8812      	ldrh	r2, [r2, #0]
 800788c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800788e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007892:	3302      	adds	r3, #2
 8007894:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 8007898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078a0:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80078a4:	8812      	ldrh	r2, [r2, #0]
 80078a6:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80078a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078ac:	3302      	adds	r3, #2
 80078ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078b6:	2218      	movs	r2, #24
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fc22 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 80078c0:	233f      	movs	r3, #63	; 0x3f
 80078c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 80078c6:	f240 1315 	movw	r3, #277	; 0x115
 80078ca:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80078ce:	230f      	movs	r3, #15
 80078d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80078d4:	f107 0310 	add.w	r3, r7, #16
 80078d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80078e4:	f107 030f 	add.w	r3, r7, #15
 80078e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80078ec:	2301      	movs	r3, #1
 80078ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078f6:	2100      	movs	r1, #0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f000 feaf 	bl	800865c <hci_send_req>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	da01      	bge.n	8007908 <aci_gatt_disc_all_char_of_service+0xee>
    return BLE_STATUS_TIMEOUT;
 8007904:	23ff      	movs	r3, #255	; 0xff
 8007906:	e004      	b.n	8007912 <aci_gatt_disc_all_char_of_service+0xf8>
  return status;
 8007908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007910:	781b      	ldrb	r3, [r3, #0]
}
 8007912:	4618      	mov	r0, r3
 8007914:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007918:	46bd      	mov	sp, r7
 800791a:	bd90      	pop	{r4, r7, pc}

0800791c <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b0cd      	sub	sp, #308	; 0x134
 8007920:	af00      	add	r7, sp, #0
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	4611      	mov	r1, r2
 8007928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007930:	4622      	mov	r2, r4
 8007932:	801a      	strh	r2, [r3, #0]
 8007934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007938:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800793c:	4602      	mov	r2, r0
 800793e:	801a      	strh	r2, [r3, #0]
 8007940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007944:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007948:	460a      	mov	r2, r1
 800794a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800794c:	f107 0310 	add.w	r3, r7, #16
 8007950:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007958:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800795c:	2200      	movs	r2, #0
 800795e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800796e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007972:	8812      	ldrh	r2, [r2, #0]
 8007974:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007976:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800797a:	3302      	adds	r3, #2
 800797c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007984:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007988:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800798c:	8812      	ldrh	r2, [r2, #0]
 800798e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007990:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007994:	3302      	adds	r3, #2
 8007996:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 800799a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800799e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079a2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80079a6:	8812      	ldrh	r2, [r2, #0]
 80079a8:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80079aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079ae:	3302      	adds	r3, #2
 80079b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079b8:	2218      	movs	r2, #24
 80079ba:	2100      	movs	r1, #0
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fba1 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 80079c2:	233f      	movs	r3, #63	; 0x3f
 80079c4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 80079c8:	f240 1317 	movw	r3, #279	; 0x117
 80079cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80079d0:	230f      	movs	r3, #15
 80079d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80079d6:	f107 0310 	add.w	r3, r7, #16
 80079da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80079de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80079e6:	f107 030f 	add.w	r3, r7, #15
 80079ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80079ee:	2301      	movs	r3, #1
 80079f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 fe2e 	bl	800865c <hci_send_req>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	da01      	bge.n	8007a0a <aci_gatt_disc_all_char_desc+0xee>
    return BLE_STATUS_TIMEOUT;
 8007a06:	23ff      	movs	r3, #255	; 0xff
 8007a08:	e004      	b.n	8007a14 <aci_gatt_disc_all_char_desc+0xf8>
  return status;
 8007a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a12:	781b      	ldrb	r3, [r3, #0]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd90      	pop	{r4, r7, pc}

08007a1e <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 8007a1e:	b590      	push	{r4, r7, lr}
 8007a20:	b0cf      	sub	sp, #316	; 0x13c
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	4604      	mov	r4, r0
 8007a26:	4608      	mov	r0, r1
 8007a28:	4611      	mov	r1, r2
 8007a2a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a2e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a38:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	801a      	strh	r2, [r3, #0]
 8007a40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a48:	4602      	mov	r2, r0
 8007a4a:	801a      	strh	r2, [r3, #0]
 8007a4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a50:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007a54:	460a      	mov	r2, r1
 8007a56:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 8007a58:	f107 0318 	add.w	r3, r7, #24
 8007a5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8007a60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a64:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a68:	2200      	movs	r2, #0
 8007a6a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8007a72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a76:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a7a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007a7e:	8812      	ldrh	r2, [r2, #0]
 8007a80:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a86:	3302      	adds	r3, #2
 8007a88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 8007a8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a90:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a94:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007a98:	8812      	ldrh	r2, [r2, #0]
 8007a9a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007a9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8007aa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007aaa:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007aae:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007ab2:	7812      	ldrb	r2, [r2, #0]
 8007ab4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007ab6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007aba:	3301      	adds	r3, #1
 8007abc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8007ac0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ac4:	1d58      	adds	r0, r3, #5
 8007ac6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007aca:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007ace:	781a      	ldrb	r2, [r3, #0]
 8007ad0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007ad4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007ad8:	6819      	ldr	r1, [r3, #0]
 8007ada:	f000 fb03 	bl	80080e4 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8007ade:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007ae2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007aec:	4413      	add	r3, r2
 8007aee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007af2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007af6:	2218      	movs	r2, #24
 8007af8:	2100      	movs	r1, #0
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fb02 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b00:	233f      	movs	r3, #63	; 0x3f
 8007b02:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 8007b06:	f240 1321 	movw	r3, #289	; 0x121
 8007b0a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8007b0e:	230f      	movs	r3, #15
 8007b10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8007b14:	f107 0318 	add.w	r3, r7, #24
 8007b18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007b1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8007b24:	f107 0317 	add.w	r3, r7, #23
 8007b28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007b36:	2100      	movs	r1, #0
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 fd8f 	bl	800865c <hci_send_req>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	da01      	bge.n	8007b48 <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 8007b44:	23ff      	movs	r3, #255	; 0xff
 8007b46:	e004      	b.n	8007b52 <aci_gatt_write_char_desc+0x134>
  return status;
 8007b48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007b4c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b50:	781b      	ldrb	r3, [r3, #0]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd90      	pop	{r4, r7, pc}

08007b5c <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 8007b5c:	b590      	push	{r4, r7, lr}
 8007b5e:	b0cf      	sub	sp, #316	; 0x13c
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4604      	mov	r4, r0
 8007b64:	4608      	mov	r0, r1
 8007b66:	4611      	mov	r1, r2
 8007b68:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007b6c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007b76:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	801a      	strh	r2, [r3, #0]
 8007b7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b86:	4602      	mov	r2, r0
 8007b88:	801a      	strh	r2, [r3, #0]
 8007b8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007b8e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007b92:	460a      	mov	r2, r1
 8007b94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 8007b96:	f107 0318 	add.w	r3, r7, #24
 8007b9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8007b9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007ba2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8007bb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007bb4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007bb8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007bbc:	8812      	ldrh	r2, [r2, #0]
 8007bbe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007bc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 8007bca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007bce:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007bd2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007bd6:	8812      	ldrh	r2, [r2, #0]
 8007bd8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007bda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007bde:	3302      	adds	r3, #2
 8007be0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8007be4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007be8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007bec:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007bf0:	7812      	ldrb	r2, [r2, #0]
 8007bf2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007bf4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8007bfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007c02:	1d58      	adds	r0, r3, #5
 8007c04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c08:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007c0c:	781a      	ldrb	r2, [r3, #0]
 8007c0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c12:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007c16:	6819      	ldr	r1, [r3, #0]
 8007c18:	f000 fa64 	bl	80080e4 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8007c1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c20:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007c34:	2218      	movs	r2, #24
 8007c36:	2100      	movs	r1, #0
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fa63 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c3e:	233f      	movs	r3, #63	; 0x3f
 8007c40:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 8007c44:	f240 1323 	movw	r3, #291	; 0x123
 8007c48:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007c4c:	f107 0318 	add.w	r3, r7, #24
 8007c50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007c54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007c58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8007c5c:	f107 0317 	add.w	r3, r7, #23
 8007c60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8007c64:	2301      	movs	r3, #1
 8007c66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c6a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007c6e:	2100      	movs	r1, #0
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fcf3 	bl	800865c <hci_send_req>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	da01      	bge.n	8007c80 <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 8007c7c:	23ff      	movs	r3, #255	; 0xff
 8007c7e:	e004      	b.n	8007c8a <aci_gatt_write_without_resp+0x12e>
  return status;
 8007c80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c84:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c88:	781b      	ldrb	r3, [r3, #0]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd90      	pop	{r4, r7, pc}

08007c94 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b0cc      	sub	sp, #304	; 0x130
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007cac:	4602      	mov	r2, r0
 8007cae:	701a      	strb	r2, [r3, #0]
 8007cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007cb8:	460a      	mov	r2, r1
 8007cba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007cbc:	f107 0310 	add.w	r3, r7, #16
 8007cc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ccc:	2200      	movs	r2, #0
 8007cce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cde:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007ce2:	7812      	ldrb	r2, [r2, #0]
 8007ce4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cea:	3301      	adds	r3, #1
 8007cec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cf8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007cfc:	7812      	ldrb	r2, [r2, #0]
 8007cfe:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d04:	3301      	adds	r3, #1
 8007d06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0e:	1c98      	adds	r0, r3, #2
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d18:	781a      	ldrb	r2, [r3, #0]
 8007d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d22:	6819      	ldr	r1, [r3, #0]
 8007d24:	f000 f9de 	bl	80080e4 <Osal_MemCpy>
  index_input += Length;
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007d36:	4413      	add	r3, r2
 8007d38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d40:	2218      	movs	r2, #24
 8007d42:	2100      	movs	r1, #0
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 f9dd 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d4a:	233f      	movs	r3, #63	; 0x3f
 8007d4c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007d50:	230c      	movs	r3, #12
 8007d52:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d66:	f107 030f 	add.w	r3, r7, #15
 8007d6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fc6e 	bl	800865c <hci_send_req>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	da01      	bge.n	8007d8a <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007d86:	23ff      	movs	r3, #255	; 0xff
 8007d88:	e004      	b.n	8007d94 <aci_hal_write_config_data+0x100>
  return status;
 8007d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d92:	781b      	ldrb	r3, [r3, #0]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b0cc      	sub	sp, #304	; 0x130
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	4602      	mov	r2, r0
 8007da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007daa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007dae:	701a      	strb	r2, [r3, #0]
 8007db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007db8:	460a      	mov	r2, r1
 8007dba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007dbc:	f107 0310 	add.w	r3, r7, #16
 8007dc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007dcc:	2200      	movs	r2, #0
 8007dce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dde:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007de2:	7812      	ldrb	r2, [r2, #0]
 8007de4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dea:	3301      	adds	r3, #1
 8007dec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007df8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007dfc:	7812      	ldrb	r2, [r2, #0]
 8007dfe:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007e00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e04:	3301      	adds	r3, #1
 8007e06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e0e:	2218      	movs	r2, #24
 8007e10:	2100      	movs	r1, #0
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 f976 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e18:	233f      	movs	r3, #63	; 0x3f
 8007e1a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007e1e:	230f      	movs	r3, #15
 8007e20:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e24:	f107 0310 	add.w	r3, r7, #16
 8007e28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e34:	f107 030f 	add.w	r3, r7, #15
 8007e38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e46:	2100      	movs	r1, #0
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fc07 	bl	800865c <hci_send_req>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	da01      	bge.n	8007e58 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007e54:	23ff      	movs	r3, #255	; 0xff
 8007e56:	e004      	b.n	8007e62 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e5c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e60:	781b      	ldrb	r3, [r3, #0]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b0cc      	sub	sp, #304	; 0x130
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4602      	mov	r2, r0
 8007e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e78:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007e7c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007e7e:	f107 0310 	add.w	r3, r7, #16
 8007e82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ea0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007ea4:	8812      	ldrh	r2, [r2, #0]
 8007ea6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007ea8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eac:	3302      	adds	r3, #2
 8007eae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007eb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eb6:	2218      	movs	r2, #24
 8007eb8:	2100      	movs	r1, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 f922 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ec0:	233f      	movs	r3, #63	; 0x3f
 8007ec2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007ec6:	2318      	movs	r3, #24
 8007ec8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ecc:	f107 0310 	add.w	r3, r7, #16
 8007ed0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ed8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007edc:	f107 030f 	add.w	r3, r7, #15
 8007ee0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007eea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eee:	2100      	movs	r1, #0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fbb3 	bl	800865c <hci_send_req>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da01      	bge.n	8007f00 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007efc:	23ff      	movs	r3, #255	; 0xff
 8007efe:	e004      	b.n	8007f0a <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f04:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f08:	781b      	ldrb	r3, [r3, #0]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f1e:	f107 0308 	add.w	r3, r7, #8
 8007f22:	2218      	movs	r2, #24
 8007f24:	2100      	movs	r1, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 f8ec 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x03;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007f30:	2303      	movs	r3, #3
 8007f32:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007f34:	1dfb      	adds	r3, r7, #7
 8007f36:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f3c:	f107 0308 	add.w	r3, r7, #8
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fb8a 	bl	800865c <hci_send_req>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	da01      	bge.n	8007f52 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007f4e:	23ff      	movs	r3, #255	; 0xff
 8007f50:	e000      	b.n	8007f54 <hci_reset+0x40>
  return status;
 8007f52:	79fb      	ldrb	r3, [r7, #7]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 8007f5c:	b5b0      	push	{r4, r5, r7, lr}
 8007f5e:	b0cc      	sub	sp, #304	; 0x130
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4605      	mov	r5, r0
 8007f64:	460c      	mov	r4, r1
 8007f66:	4610      	mov	r0, r2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f6e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007f72:	462a      	mov	r2, r5
 8007f74:	801a      	strh	r2, [r3, #0]
 8007f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f7e:	4622      	mov	r2, r4
 8007f80:	801a      	strh	r2, [r3, #0]
 8007f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f86:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	801a      	strh	r2, [r3, #0]
 8007f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f96:	460a      	mov	r2, r1
 8007f98:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 8007f9a:	f107 0310 	add.w	r3, r7, #16
 8007f9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007faa:	2200      	movs	r2, #0
 8007fac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fbc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007fc0:	8812      	ldrh	r2, [r2, #0]
 8007fc2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007fc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fc8:	3302      	adds	r3, #2
 8007fca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8007fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fd6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007fda:	8812      	ldrh	r2, [r2, #0]
 8007fdc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007fde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fe2:	3302      	adds	r3, #2
 8007fe4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8007fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ff0:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007ff4:	8812      	ldrh	r2, [r2, #0]
 8007ff6:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8007ff8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ffc:	3302      	adds	r3, #2
 8007ffe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 8008002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008006:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800800a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800800e:	8812      	ldrh	r2, [r2, #0]
 8008010:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8008012:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008016:	3302      	adds	r3, #2
 8008018:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800801c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008020:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008024:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8008026:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800802a:	3302      	adds	r3, #2
 800802c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8008030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008034:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8008038:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 800803a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800803e:	3302      	adds	r3, #2
 8008040:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8008044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008048:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 800804c:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800804e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008052:	3302      	adds	r3, #2
 8008054:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 8008058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008060:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 8008062:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008066:	3301      	adds	r3, #1
 8008068:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 800806c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008070:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008074:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 8008076:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800807a:	3301      	adds	r3, #1
 800807c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008080:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008084:	2218      	movs	r2, #24
 8008086:	2100      	movs	r1, #0
 8008088:	4618      	mov	r0, r3
 800808a:	f000 f83b 	bl	8008104 <Osal_MemSet>
  rq.ogf = 0x3f;
 800808e:	233f      	movs	r3, #63	; 0x3f
 8008090:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 8008094:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8008098:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800809c:	f107 0310 	add.w	r3, r7, #16
 80080a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80080a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80080ac:	f107 030f 	add.w	r3, r7, #15
 80080b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80080b4:	2301      	movs	r3, #1
 80080b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080be:	2100      	movs	r1, #0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 facb 	bl	800865c <hci_send_req>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	da01      	bge.n	80080d0 <aci_l2cap_connection_parameter_update_resp+0x174>
    return BLE_STATUS_TIMEOUT;
 80080cc:	23ff      	movs	r3, #255	; 0xff
 80080ce:	e004      	b.n	80080da <aci_l2cap_connection_parameter_update_resp+0x17e>
  return status;
 80080d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80080d8:	781b      	ldrb	r3, [r3, #0]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bdb0      	pop	{r4, r5, r7, pc}

080080e4 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	68b9      	ldr	r1, [r7, #8]
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f004 f9cc 	bl	800c492 <memcpy>
 80080fa:	4603      	mov	r3, r0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f004 f929 	bl	800c36c <memset>
 800811a:	4603      	mov	r3, r0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008124:	b480      	push	{r7}
 8008126:	af00      	add	r7, sp, #0
  return;
 8008128:	bf00      	nop
}
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008132:	b480      	push	{r7}
 8008134:	af00      	add	r7, sp, #0
  return;
 8008136:	bf00      	nop
}
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
  return;
 8008144:	bf00      	nop
}
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800814e:	b480      	push	{r7}
 8008150:	af00      	add	r7, sp, #0
  return;
 8008152:	bf00      	nop
}
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
  return;
 8008160:	bf00      	nop
}
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800816a:	b480      	push	{r7}
 800816c:	af00      	add	r7, sp, #0
  return;
 800816e:	bf00      	nop
}
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8008178:	b480      	push	{r7}
 800817a:	af00      	add	r7, sp, #0
  return;
 800817c:	bf00      	nop
}
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8008186:	b480      	push	{r7}
 8008188:	af00      	add	r7, sp, #0
  return;
 800818a:	bf00      	nop
}
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8008194:	b480      	push	{r7}
 8008196:	af00      	add	r7, sp, #0
  return;
 8008198:	bf00      	nop
}
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80081a2:	b480      	push	{r7}
 80081a4:	af00      	add	r7, sp, #0
  return;
 80081a6:	bf00      	nop
}
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80081b0:	b480      	push	{r7}
 80081b2:	af00      	add	r7, sp, #0
  return;
 80081b4:	bf00      	nop
}
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80081be:	b480      	push	{r7}
 80081c0:	af00      	add	r7, sp, #0
  return;
 80081c2:	bf00      	nop
}
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
  return;
 80081d0:	bf00      	nop
}
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80081da:	b480      	push	{r7}
 80081dc:	af00      	add	r7, sp, #0
  return;
 80081de:	bf00      	nop
}
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0
  return;
 80081ec:	bf00      	nop
}
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80081f6:	b480      	push	{r7}
 80081f8:	af00      	add	r7, sp, #0
  return;
 80081fa:	bf00      	nop
}
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
  return;
 8008208:	bf00      	nop
}
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8008212:	b480      	push	{r7}
 8008214:	af00      	add	r7, sp, #0
  return;
 8008216:	bf00      	nop
}
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008224:	4b04      	ldr	r3, [pc, #16]	; (8008238 <SVCCTL_Init+0x18>)
 8008226:	2200      	movs	r2, #0
 8008228:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800822a:	4b04      	ldr	r3, [pc, #16]	; (800823c <SVCCTL_Init+0x1c>)
 800822c:	2200      	movs	r2, #0
 800822e:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008230:	f000 f806 	bl	8008240 <SVCCTL_SvcInit>

  return;
 8008234:	bf00      	nop
}
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20000078 	.word	0x20000078
 800823c:	20000098 	.word	0x20000098

08008240 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  BAS_Init();
 8008244:	f7ff ff6e 	bl	8008124 <BAS_Init>

  BLS_Init();
 8008248:	f7ff ff73 	bl	8008132 <BLS_Init>

  CRS_STM_Init();
 800824c:	f7ff ff78 	bl	8008140 <CRS_STM_Init>

  DIS_Init();
 8008250:	f7ff ff7d 	bl	800814e <DIS_Init>

  EDS_STM_Init();
 8008254:	f7ff ff82 	bl	800815c <EDS_STM_Init>

  HIDS_Init();
 8008258:	f7ff ff87 	bl	800816a <HIDS_Init>

  HRS_Init();
 800825c:	f7ff ff8c 	bl	8008178 <HRS_Init>

  HTS_Init();
 8008260:	f7ff ff91 	bl	8008186 <HTS_Init>

  IAS_Init();
 8008264:	f7ff ff96 	bl	8008194 <IAS_Init>

  LLS_Init();
 8008268:	f7ff ff9b 	bl	80081a2 <LLS_Init>

  TPS_Init();
 800826c:	f7ff ffa0 	bl	80081b0 <TPS_Init>

  MOTENV_STM_Init();
 8008270:	f7ff ffa5 	bl	80081be <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008274:	f7ff ffaa 	bl	80081cc <P2PS_STM_Init>

  ZDD_STM_Init();
 8008278:	f7ff ffaf 	bl	80081da <ZDD_STM_Init>

  OTAS_STM_Init();
 800827c:	f7ff ffb4 	bl	80081e8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008280:	f7ff ffc0 	bl	8008204 <BVOPUS_STM_Init>

  MESH_Init();
 8008284:	f7ff ffb7 	bl	80081f6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008288:	f7ff ffc3 	bl	8008212 <SVCCTL_InitCustomSvc>
  
  return;
 800828c:	bf00      	nop
}
 800828e:	bd80      	pop	{r7, pc}

08008290 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 8008298:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <SVCCTL_RegisterCltHandler+0x30>)
 800829a:	791b      	ldrb	r3, [r3, #4]
 800829c:	4619      	mov	r1, r3
 800829e:	4a08      	ldr	r2, [pc, #32]	; (80082c0 <SVCCTL_RegisterCltHandler+0x30>)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 80082a6:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <SVCCTL_RegisterCltHandler+0x30>)
 80082a8:	791b      	ldrb	r3, [r3, #4]
 80082aa:	3301      	adds	r3, #1
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <SVCCTL_RegisterCltHandler+0x30>)
 80082b0:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 80082b2:	bf00      	nop
}
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	20000098 	.word	0x20000098

080082c4 <SVCCTL_UserEvtRx>:

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3301      	adds	r3, #1
 80082d0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80082d2:	2300      	movs	r3, #0
 80082d4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2bff      	cmp	r3, #255	; 0xff
 80082dc:	d13f      	bne.n	800835e <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	3302      	adds	r3, #2
 80082e2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80082ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082f2:	d132      	bne.n	800835a <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80082f4:	2300      	movs	r3, #0
 80082f6:	757b      	strb	r3, [r7, #21]
 80082f8:	e00d      	b.n	8008316 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80082fa:	7d7b      	ldrb	r3, [r7, #21]
 80082fc:	4a27      	ldr	r2, [pc, #156]	; (800839c <SVCCTL_UserEvtRx+0xd8>)
 80082fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800830a:	7dfb      	ldrb	r3, [r7, #23]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d108      	bne.n	8008322 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008310:	7d7b      	ldrb	r3, [r7, #21]
 8008312:	3301      	adds	r3, #1
 8008314:	757b      	strb	r3, [r7, #21]
 8008316:	4b21      	ldr	r3, [pc, #132]	; (800839c <SVCCTL_UserEvtRx+0xd8>)
 8008318:	7f1b      	ldrb	r3, [r3, #28]
 800831a:	7d7a      	ldrb	r2, [r7, #21]
 800831c:	429a      	cmp	r2, r3
 800831e:	d3ec      	bcc.n	80082fa <SVCCTL_UserEvtRx+0x36>
 8008320:	e000      	b.n	8008324 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 8008322:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 8008324:	2300      	movs	r3, #0
 8008326:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8008328:	2300      	movs	r3, #0
 800832a:	757b      	strb	r3, [r7, #21]
 800832c:	e00d      	b.n	800834a <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800832e:	7d7b      	ldrb	r3, [r7, #21]
 8008330:	4a1b      	ldr	r2, [pc, #108]	; (80083a0 <SVCCTL_UserEvtRx+0xdc>)
 8008332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	4798      	blx	r3
 800833a:	4603      	mov	r3, r0
 800833c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d108      	bne.n	8008356 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8008344:	7d7b      	ldrb	r3, [r7, #21]
 8008346:	3301      	adds	r3, #1
 8008348:	757b      	strb	r3, [r7, #21]
 800834a:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <SVCCTL_UserEvtRx+0xdc>)
 800834c:	791b      	ldrb	r3, [r3, #4]
 800834e:	7d7a      	ldrb	r2, [r7, #21]
 8008350:	429a      	cmp	r2, r3
 8008352:	d3ec      	bcc.n	800832e <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 8008354:	e002      	b.n	800835c <SVCCTL_UserEvtRx+0x98>
              break;
 8008356:	bf00      	nop
          break;
 8008358:	e000      	b.n	800835c <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 800835a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800835c:	e000      	b.n	8008360 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800835e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8008360:	7dfb      	ldrb	r3, [r7, #23]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d00f      	beq.n	8008386 <SVCCTL_UserEvtRx+0xc2>
 8008366:	2b02      	cmp	r3, #2
 8008368:	dc10      	bgt.n	800838c <SVCCTL_UserEvtRx+0xc8>
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <SVCCTL_UserEvtRx+0xb0>
 800836e:	2b01      	cmp	r3, #1
 8008370:	d006      	beq.n	8008380 <SVCCTL_UserEvtRx+0xbc>
 8008372:	e00b      	b.n	800838c <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 fcc5 	bl	8009d04 <SVCCTL_App_Notification>
 800837a:	4603      	mov	r3, r0
 800837c:	75bb      	strb	r3, [r7, #22]
      break;
 800837e:	e008      	b.n	8008392 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008380:	2301      	movs	r3, #1
 8008382:	75bb      	strb	r3, [r7, #22]
      break;
 8008384:	e005      	b.n	8008392 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008386:	2300      	movs	r3, #0
 8008388:	75bb      	strb	r3, [r7, #22]
      break;
 800838a:	e002      	b.n	8008392 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800838c:	2301      	movs	r3, #1
 800838e:	75bb      	strb	r3, [r7, #22]
      break;
 8008390:	bf00      	nop
  }

  return (return_status);
 8008392:	7dbb      	ldrb	r3, [r7, #22]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20000078 	.word	0x20000078
 80083a0:	20000098 	.word	0x20000098

080083a4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80083ac:	f107 030c 	add.w	r3, r7, #12
 80083b0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	212e      	movs	r1, #46	; 0x2e
 80083bc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80083c0:	f000 fae8 	bl	8008994 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	330b      	adds	r3, #11
 80083c8:	78db      	ldrb	r3, [r3, #3]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b088      	sub	sp, #32
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80083da:	f107 030c 	add.w	r3, r7, #12
 80083de:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	210f      	movs	r1, #15
 80083ea:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80083ee:	f000 fad1 	bl	8008994 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	330b      	adds	r3, #11
 80083f6:	78db      	ldrb	r3, [r3, #3]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008408:	f107 030c 	add.w	r3, r7, #12
 800840c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	2110      	movs	r1, #16
 8008414:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8008418:	f000 fabc 	bl	8008994 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	330b      	adds	r3, #11
 8008420:	78db      	ldrb	r3, [r3, #3]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3720      	adds	r7, #32
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800842c:	b480      	push	{r7}
 800842e:	b08b      	sub	sp, #44	; 0x2c
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008438:	2300      	movs	r3, #0
 800843a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008440:	2300      	movs	r3, #0
 8008442:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008448:	2300      	movs	r3, #0
 800844a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008454:	4b4a      	ldr	r3, [pc, #296]	; (8008580 <SHCI_GetWirelessFwInfo+0x154>)
 8008456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008458:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800845c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008466:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a44      	ldr	r2, [pc, #272]	; (8008584 <SHCI_GetWirelessFwInfo+0x158>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d10f      	bne.n	8008498 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	e01a      	b.n	80084ce <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80084a0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80084a4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	0e1b      	lsrs	r3, r3, #24
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	0c1b      	lsrs	r3, r3, #16
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	0a1b      	lsrs	r3, r3, #8
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	091b      	lsrs	r3, r3, #4
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	f003 030f 	and.w	r3, r3, #15
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	f003 030f 	and.w	r3, r3, #15
 8008504:	b2da      	uxtb	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	0e1b      	lsrs	r3, r3, #24
 800850e:	b2da      	uxtb	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	0c1b      	lsrs	r3, r3, #16
 8008518:	b2da      	uxtb	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800851e:	6a3b      	ldr	r3, [r7, #32]
 8008520:	0a1b      	lsrs	r3, r3, #8
 8008522:	b2da      	uxtb	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	b2da      	uxtb	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	0e1b      	lsrs	r3, r3, #24
 800853c:	b2da      	uxtb	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	0c1b      	lsrs	r3, r3, #16
 8008546:	b2da      	uxtb	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	0a1b      	lsrs	r3, r3, #8
 8008550:	b2da      	uxtb	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	0e1b      	lsrs	r3, r3, #24
 800855a:	b2da      	uxtb	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	0c1b      	lsrs	r3, r3, #16
 8008564:	b2da      	uxtb	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	b2da      	uxtb	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	372c      	adds	r7, #44	; 0x2c
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	58004000 	.word	0x58004000
 8008584:	a94656b9 	.word	0xa94656b9

08008588 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	4a08      	ldr	r2, [pc, #32]	; (80085b8 <hci_init+0x30>)
 8008598:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800859a:	4a08      	ldr	r2, [pc, #32]	; (80085bc <hci_init+0x34>)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80085a0:	4806      	ldr	r0, [pc, #24]	; (80085bc <hci_init+0x34>)
 80085a2:	f000 f979 	bl	8008898 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f8da 	bl	8008764 <TlInit>

  return;
 80085b0:	bf00      	nop
}
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	200005e8 	.word	0x200005e8
 80085bc:	200005c0 	.word	0x200005c0

080085c0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80085c6:	4822      	ldr	r0, [pc, #136]	; (8008650 <hci_user_evt_proc+0x90>)
 80085c8:	f000 fe10 	bl	80091ec <LST_is_empty>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d12b      	bne.n	800862a <hci_user_evt_proc+0x6a>
 80085d2:	4b20      	ldr	r3, [pc, #128]	; (8008654 <hci_user_evt_proc+0x94>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d027      	beq.n	800862a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80085da:	f107 030c 	add.w	r3, r7, #12
 80085de:	4619      	mov	r1, r3
 80085e0:	481b      	ldr	r0, [pc, #108]	; (8008650 <hci_user_evt_proc+0x90>)
 80085e2:	f000 fe92 	bl	800930a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80085e6:	4b1c      	ldr	r3, [pc, #112]	; (8008658 <hci_user_evt_proc+0x98>)
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00c      	beq.n	8008608 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80085f2:	2301      	movs	r3, #1
 80085f4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80085f6:	4b18      	ldr	r3, [pc, #96]	; (8008658 <hci_user_evt_proc+0x98>)
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	1d3a      	adds	r2, r7, #4
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008600:	793a      	ldrb	r2, [r7, #4]
 8008602:	4b14      	ldr	r3, [pc, #80]	; (8008654 <hci_user_evt_proc+0x94>)
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	e002      	b.n	800860e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008608:	4b12      	ldr	r3, [pc, #72]	; (8008654 <hci_user_evt_proc+0x94>)
 800860a:	2201      	movs	r2, #1
 800860c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800860e:	4b11      	ldr	r3, [pc, #68]	; (8008654 <hci_user_evt_proc+0x94>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d004      	beq.n	8008620 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fc0d 	bl	8008e38 <TL_MM_EvtDone>
 800861e:	e004      	b.n	800862a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4619      	mov	r1, r3
 8008624:	480a      	ldr	r0, [pc, #40]	; (8008650 <hci_user_evt_proc+0x90>)
 8008626:	f000 fe03 	bl	8009230 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800862a:	4809      	ldr	r0, [pc, #36]	; (8008650 <hci_user_evt_proc+0x90>)
 800862c:	f000 fdde 	bl	80091ec <LST_is_empty>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d107      	bne.n	8008646 <hci_user_evt_proc+0x86>
 8008636:	4b07      	ldr	r3, [pc, #28]	; (8008654 <hci_user_evt_proc+0x94>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800863e:	4804      	ldr	r0, [pc, #16]	; (8008650 <hci_user_evt_proc+0x90>)
 8008640:	f002 f9ba 	bl	800a9b8 <hci_notify_asynch_evt>
  }


  return;
 8008644:	bf00      	nop
 8008646:	bf00      	nop
}
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	200000a4 	.word	0x200000a4
 8008654:	200000b0 	.word	0x200000b0
 8008658:	200005c0 	.word	0x200005c0

0800865c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008668:	2000      	movs	r0, #0
 800866a:	f000 f8d1 	bl	8008810 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800866e:	2300      	movs	r3, #0
 8008670:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	885b      	ldrh	r3, [r3, #2]
 8008676:	b21b      	sxth	r3, r3
 8008678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800867c:	b21a      	sxth	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	029b      	lsls	r3, r3, #10
 8008684:	b21b      	sxth	r3, r3
 8008686:	4313      	orrs	r3, r2
 8008688:	b21b      	sxth	r3, r3
 800868a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800868c:	4b33      	ldr	r3, [pc, #204]	; (800875c <hci_send_req+0x100>)
 800868e:	2201      	movs	r2, #1
 8008690:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	b2d9      	uxtb	r1, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	689a      	ldr	r2, [r3, #8]
 800869c:	8bbb      	ldrh	r3, [r7, #28]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 f890 	bl	80087c4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80086a4:	e04e      	b.n	8008744 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80086a6:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80086aa:	f002 f99c 	bl	800a9e6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80086ae:	e043      	b.n	8008738 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80086b0:	f107 030c 	add.w	r3, r7, #12
 80086b4:	4619      	mov	r1, r3
 80086b6:	482a      	ldr	r0, [pc, #168]	; (8008760 <hci_send_req+0x104>)
 80086b8:	f000 fe27 	bl	800930a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	7a5b      	ldrb	r3, [r3, #9]
 80086c0:	2b0f      	cmp	r3, #15
 80086c2:	d114      	bne.n	80086ee <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	330b      	adds	r3, #11
 80086c8:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	885b      	ldrh	r3, [r3, #2]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	8bba      	ldrh	r2, [r7, #28]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d104      	bne.n	80086e0 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	7812      	ldrb	r2, [r2, #0]
 80086de:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d027      	beq.n	8008738 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80086e8:	2301      	movs	r3, #1
 80086ea:	77fb      	strb	r3, [r7, #31]
 80086ec:	e024      	b.n	8008738 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	330b      	adds	r3, #11
 80086f2:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	8bba      	ldrh	r2, [r7, #28]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d114      	bne.n	800872c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	7a9b      	ldrb	r3, [r3, #10]
 8008706:	3b03      	subs	r3, #3
 8008708:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	695a      	ldr	r2, [r3, #20]
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	429a      	cmp	r2, r3
 8008712:	bfa8      	it	ge
 8008714:	461a      	movge	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6918      	ldr	r0, [r3, #16]
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	1cd9      	adds	r1, r3, #3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	461a      	mov	r2, r3
 8008728:	f003 feb3 	bl	800c492 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008734:	2301      	movs	r3, #1
 8008736:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008738:	4809      	ldr	r0, [pc, #36]	; (8008760 <hci_send_req+0x104>)
 800873a:	f000 fd57 	bl	80091ec <LST_is_empty>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0b5      	beq.n	80086b0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008744:	7ffb      	ldrb	r3, [r7, #31]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0ad      	beq.n	80086a6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800874a:	2001      	movs	r0, #1
 800874c:	f000 f860 	bl	8008810 <NotifyCmdStatus>

  return 0;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3720      	adds	r7, #32
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	200005ec 	.word	0x200005ec
 8008760:	200005e0 	.word	0x200005e0

08008764 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800876c:	480f      	ldr	r0, [pc, #60]	; (80087ac <TlInit+0x48>)
 800876e:	f000 fd2d 	bl	80091cc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008772:	4a0f      	ldr	r2, [pc, #60]	; (80087b0 <TlInit+0x4c>)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008778:	480e      	ldr	r0, [pc, #56]	; (80087b4 <TlInit+0x50>)
 800877a:	f000 fd27 	bl	80091cc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800877e:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <TlInit+0x54>)
 8008780:	2201      	movs	r2, #1
 8008782:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008784:	4b0d      	ldr	r3, [pc, #52]	; (80087bc <TlInit+0x58>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00a      	beq.n	80087a2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008790:	4b0b      	ldr	r3, [pc, #44]	; (80087c0 <TlInit+0x5c>)
 8008792:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008794:	4b09      	ldr	r3, [pc, #36]	; (80087bc <TlInit+0x58>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f107 0208 	add.w	r2, r7, #8
 800879c:	4610      	mov	r0, r2
 800879e:	4798      	blx	r3
  }

  return;
 80087a0:	bf00      	nop
 80087a2:	bf00      	nop
}
 80087a4:	3718      	adds	r7, #24
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200005e0 	.word	0x200005e0
 80087b0:	200000ac 	.word	0x200000ac
 80087b4:	200000a4 	.word	0x200000a4
 80087b8:	200000b0 	.word	0x200000b0
 80087bc:	200005c0 	.word	0x200005c0
 80087c0:	08008851 	.word	0x08008851

080087c4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	4603      	mov	r3, r0
 80087cc:	603a      	str	r2, [r7, #0]
 80087ce:	80fb      	strh	r3, [r7, #6]
 80087d0:	460b      	mov	r3, r1
 80087d2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80087d4:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <SendCmd+0x44>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	88fa      	ldrh	r2, [r7, #6]
 80087da:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80087de:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <SendCmd+0x44>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	797a      	ldrb	r2, [r7, #5]
 80087e4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80087e6:	4b08      	ldr	r3, [pc, #32]	; (8008808 <SendCmd+0x44>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	330c      	adds	r3, #12
 80087ec:	797a      	ldrb	r2, [r7, #5]
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f003 fe4e 	bl	800c492 <memcpy>

  hciContext.io.Send(0,0);
 80087f6:	4b05      	ldr	r3, [pc, #20]	; (800880c <SendCmd+0x48>)
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	2100      	movs	r1, #0
 80087fc:	2000      	movs	r0, #0
 80087fe:	4798      	blx	r3

  return;
 8008800:	bf00      	nop
}
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	200000ac 	.word	0x200000ac
 800880c:	200005c0 	.word	0x200005c0

08008810 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800881a:	79fb      	ldrb	r3, [r7, #7]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d108      	bne.n	8008832 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008820:	4b0a      	ldr	r3, [pc, #40]	; (800884c <NotifyCmdStatus+0x3c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00d      	beq.n	8008844 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008828:	4b08      	ldr	r3, [pc, #32]	; (800884c <NotifyCmdStatus+0x3c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2000      	movs	r0, #0
 800882e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008830:	e008      	b.n	8008844 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008832:	4b06      	ldr	r3, [pc, #24]	; (800884c <NotifyCmdStatus+0x3c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d004      	beq.n	8008844 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800883a:	4b04      	ldr	r3, [pc, #16]	; (800884c <NotifyCmdStatus+0x3c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2001      	movs	r0, #1
 8008840:	4798      	blx	r3
  return;
 8008842:	bf00      	nop
 8008844:	bf00      	nop
}
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	200005e8 	.word	0x200005e8

08008850 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	7a5b      	ldrb	r3, [r3, #9]
 800885c:	2b0f      	cmp	r3, #15
 800885e:	d003      	beq.n	8008868 <TlEvtReceived+0x18>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	7a5b      	ldrb	r3, [r3, #9]
 8008864:	2b0e      	cmp	r3, #14
 8008866:	d107      	bne.n	8008878 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	4809      	ldr	r0, [pc, #36]	; (8008890 <TlEvtReceived+0x40>)
 800886c:	f000 fd06 	bl	800927c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008870:	2000      	movs	r0, #0
 8008872:	f002 f8ad 	bl	800a9d0 <hci_cmd_resp_release>
 8008876:	e006      	b.n	8008886 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008878:	6879      	ldr	r1, [r7, #4]
 800887a:	4806      	ldr	r0, [pc, #24]	; (8008894 <TlEvtReceived+0x44>)
 800887c:	f000 fcfe 	bl	800927c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008880:	4804      	ldr	r0, [pc, #16]	; (8008894 <TlEvtReceived+0x44>)
 8008882:	f002 f899 	bl	800a9b8 <hci_notify_asynch_evt>
  }

  return;
 8008886:	bf00      	nop
}
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	200005e0 	.word	0x200005e0
 8008894:	200000a4 	.word	0x200000a4

08008898 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a05      	ldr	r2, [pc, #20]	; (80088b8 <hci_register_io_bus+0x20>)
 80088a4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a04      	ldr	r2, [pc, #16]	; (80088bc <hci_register_io_bus+0x24>)
 80088aa:	611a      	str	r2, [r3, #16]

  return;
 80088ac:	bf00      	nop
}
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	08008bb1 	.word	0x08008bb1
 80088bc:	08008c19 	.word	0x08008c19

080088c0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	4a08      	ldr	r2, [pc, #32]	; (80088f0 <shci_init+0x30>)
 80088d0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80088d2:	4a08      	ldr	r2, [pc, #32]	; (80088f4 <shci_init+0x34>)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80088d8:	4806      	ldr	r0, [pc, #24]	; (80088f4 <shci_init+0x34>)
 80088da:	f000 f915 	bl	8008b08 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f898 	bl	8008a18 <TlInit>

  return;
 80088e8:	bf00      	nop
}
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	20000610 	.word	0x20000610
 80088f4:	200005f0 	.word	0x200005f0

080088f8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80088fe:	4822      	ldr	r0, [pc, #136]	; (8008988 <shci_user_evt_proc+0x90>)
 8008900:	f000 fc74 	bl	80091ec <LST_is_empty>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d12b      	bne.n	8008962 <shci_user_evt_proc+0x6a>
 800890a:	4b20      	ldr	r3, [pc, #128]	; (800898c <shci_user_evt_proc+0x94>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d027      	beq.n	8008962 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008912:	f107 030c 	add.w	r3, r7, #12
 8008916:	4619      	mov	r1, r3
 8008918:	481b      	ldr	r0, [pc, #108]	; (8008988 <shci_user_evt_proc+0x90>)
 800891a:	f000 fcf6 	bl	800930a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800891e:	4b1c      	ldr	r3, [pc, #112]	; (8008990 <shci_user_evt_proc+0x98>)
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00c      	beq.n	8008940 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800892a:	2301      	movs	r3, #1
 800892c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800892e:	4b18      	ldr	r3, [pc, #96]	; (8008990 <shci_user_evt_proc+0x98>)
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	1d3a      	adds	r2, r7, #4
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008938:	793a      	ldrb	r2, [r7, #4]
 800893a:	4b14      	ldr	r3, [pc, #80]	; (800898c <shci_user_evt_proc+0x94>)
 800893c:	701a      	strb	r2, [r3, #0]
 800893e:	e002      	b.n	8008946 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008940:	4b12      	ldr	r3, [pc, #72]	; (800898c <shci_user_evt_proc+0x94>)
 8008942:	2201      	movs	r2, #1
 8008944:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8008946:	4b11      	ldr	r3, [pc, #68]	; (800898c <shci_user_evt_proc+0x94>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fa71 	bl	8008e38 <TL_MM_EvtDone>
 8008956:	e004      	b.n	8008962 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	4619      	mov	r1, r3
 800895c:	480a      	ldr	r0, [pc, #40]	; (8008988 <shci_user_evt_proc+0x90>)
 800895e:	f000 fc67 	bl	8009230 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008962:	4809      	ldr	r0, [pc, #36]	; (8008988 <shci_user_evt_proc+0x90>)
 8008964:	f000 fc42 	bl	80091ec <LST_is_empty>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d107      	bne.n	800897e <shci_user_evt_proc+0x86>
 800896e:	4b07      	ldr	r3, [pc, #28]	; (800898c <shci_user_evt_proc+0x94>)
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008976:	4804      	ldr	r0, [pc, #16]	; (8008988 <shci_user_evt_proc+0x90>)
 8008978:	f7f8 fa70 	bl	8000e5c <shci_notify_asynch_evt>
  }


  return;
 800897c:	bf00      	nop
 800897e:	bf00      	nop
}
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	200000b4 	.word	0x200000b4
 800898c:	200000c4 	.word	0x200000c4
 8008990:	200005f0 	.word	0x200005f0

08008994 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	60ba      	str	r2, [r7, #8]
 800899c:	607b      	str	r3, [r7, #4]
 800899e:	4603      	mov	r3, r0
 80089a0:	81fb      	strh	r3, [r7, #14]
 80089a2:	460b      	mov	r3, r1
 80089a4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80089a6:	2000      	movs	r0, #0
 80089a8:	f000 f868 	bl	8008a7c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80089ac:	4b17      	ldr	r3, [pc, #92]	; (8008a0c <shci_send+0x78>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	89fa      	ldrh	r2, [r7, #14]
 80089b2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80089b6:	4b15      	ldr	r3, [pc, #84]	; (8008a0c <shci_send+0x78>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	7b7a      	ldrb	r2, [r7, #13]
 80089bc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80089be:	4b13      	ldr	r3, [pc, #76]	; (8008a0c <shci_send+0x78>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	330c      	adds	r3, #12
 80089c4:	7b7a      	ldrb	r2, [r7, #13]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f003 fd62 	bl	800c492 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80089ce:	4b10      	ldr	r3, [pc, #64]	; (8008a10 <shci_send+0x7c>)
 80089d0:	2201      	movs	r2, #1
 80089d2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80089d4:	4b0f      	ldr	r3, [pc, #60]	; (8008a14 <shci_send+0x80>)
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2100      	movs	r1, #0
 80089da:	2000      	movs	r0, #0
 80089dc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80089de:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80089e2:	f7f8 fa53 	bl	8000e8c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f103 0008 	add.w	r0, r3, #8
 80089ec:	4b07      	ldr	r3, [pc, #28]	; (8008a0c <shci_send+0x78>)
 80089ee:	6819      	ldr	r1, [r3, #0]
 80089f0:	4b06      	ldr	r3, [pc, #24]	; (8008a0c <shci_send+0x78>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	789b      	ldrb	r3, [r3, #2]
 80089f6:	3303      	adds	r3, #3
 80089f8:	461a      	mov	r2, r3
 80089fa:	f003 fd4a 	bl	800c492 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80089fe:	2001      	movs	r0, #1
 8008a00:	f000 f83c 	bl	8008a7c <Cmd_SetStatus>

  return;
 8008a04:	bf00      	nop
}
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	200000c0 	.word	0x200000c0
 8008a10:	20000614 	.word	0x20000614
 8008a14:	200005f0 	.word	0x200005f0

08008a18 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008a20:	4a10      	ldr	r2, [pc, #64]	; (8008a64 <TlInit+0x4c>)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008a26:	4810      	ldr	r0, [pc, #64]	; (8008a68 <TlInit+0x50>)
 8008a28:	f000 fbd0 	bl	80091cc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008a2c:	2001      	movs	r0, #1
 8008a2e:	f000 f825 	bl	8008a7c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008a32:	4b0e      	ldr	r3, [pc, #56]	; (8008a6c <TlInit+0x54>)
 8008a34:	2201      	movs	r2, #1
 8008a36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008a38:	4b0d      	ldr	r3, [pc, #52]	; (8008a70 <TlInit+0x58>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00c      	beq.n	8008a5a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008a44:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <TlInit+0x5c>)
 8008a46:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008a48:	4b0b      	ldr	r3, [pc, #44]	; (8008a78 <TlInit+0x60>)
 8008a4a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008a4c:	4b08      	ldr	r3, [pc, #32]	; (8008a70 <TlInit+0x58>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f107 020c 	add.w	r2, r7, #12
 8008a54:	4610      	mov	r0, r2
 8008a56:	4798      	blx	r3
  }

  return;
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
}
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	200000c0 	.word	0x200000c0
 8008a68:	200000b4 	.word	0x200000b4
 8008a6c:	200000c4 	.word	0x200000c4
 8008a70:	200005f0 	.word	0x200005f0
 8008a74:	08008acd 	.word	0x08008acd
 8008a78:	08008ae5 	.word	0x08008ae5

08008a7c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008a86:	79fb      	ldrb	r3, [r7, #7]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10b      	bne.n	8008aa4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008a8c:	4b0d      	ldr	r3, [pc, #52]	; (8008ac4 <Cmd_SetStatus+0x48>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d003      	beq.n	8008a9c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008a94:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <Cmd_SetStatus+0x48>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2000      	movs	r0, #0
 8008a9a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <Cmd_SetStatus+0x4c>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008aa2:	e00b      	b.n	8008abc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008aa4:	4b08      	ldr	r3, [pc, #32]	; (8008ac8 <Cmd_SetStatus+0x4c>)
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008aaa:	4b06      	ldr	r3, [pc, #24]	; (8008ac4 <Cmd_SetStatus+0x48>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008ab2:	4b04      	ldr	r3, [pc, #16]	; (8008ac4 <Cmd_SetStatus+0x48>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2001      	movs	r0, #1
 8008ab8:	4798      	blx	r3
  return;
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
}
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	20000610 	.word	0x20000610
 8008ac8:	200000bc 	.word	0x200000bc

08008acc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f7f8 f9ce 	bl	8000e76 <shci_cmd_resp_release>

  return;
 8008ada:	bf00      	nop
}
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	4805      	ldr	r0, [pc, #20]	; (8008b04 <TlUserEvtReceived+0x20>)
 8008af0:	f000 fbc4 	bl	800927c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008af4:	4803      	ldr	r0, [pc, #12]	; (8008b04 <TlUserEvtReceived+0x20>)
 8008af6:	f7f8 f9b1 	bl	8000e5c <shci_notify_asynch_evt>

  return;
 8008afa:	bf00      	nop
}
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	200000b4 	.word	0x200000b4

08008b08 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a05      	ldr	r2, [pc, #20]	; (8008b28 <shci_register_io_bus+0x20>)
 8008b14:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a04      	ldr	r2, [pc, #16]	; (8008b2c <shci_register_io_bus+0x24>)
 8008b1a:	611a      	str	r2, [r3, #16]

  return;
 8008b1c:	bf00      	nop
}
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	08008cc5 	.word	0x08008cc5
 8008b2c:	08008d19 	.word	0x08008d19

08008b30 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008b34:	f002 feb8 	bl	800b8a8 <HW_IPCC_Enable>

  return;
 8008b38:	bf00      	nop
}
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <TL_Init>:


void TL_Init( void )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008b40:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <TL_Init+0x48>)
 8008b42:	4a11      	ldr	r2, [pc, #68]	; (8008b88 <TL_Init+0x4c>)
 8008b44:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008b46:	4b0f      	ldr	r3, [pc, #60]	; (8008b84 <TL_Init+0x48>)
 8008b48:	4a10      	ldr	r2, [pc, #64]	; (8008b8c <TL_Init+0x50>)
 8008b4a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008b4c:	4b0d      	ldr	r3, [pc, #52]	; (8008b84 <TL_Init+0x48>)
 8008b4e:	4a10      	ldr	r2, [pc, #64]	; (8008b90 <TL_Init+0x54>)
 8008b50:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008b52:	4b0c      	ldr	r3, [pc, #48]	; (8008b84 <TL_Init+0x48>)
 8008b54:	4a0f      	ldr	r2, [pc, #60]	; (8008b94 <TL_Init+0x58>)
 8008b56:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008b58:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <TL_Init+0x48>)
 8008b5a:	4a0f      	ldr	r2, [pc, #60]	; (8008b98 <TL_Init+0x5c>)
 8008b5c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008b5e:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <TL_Init+0x48>)
 8008b60:	4a0e      	ldr	r2, [pc, #56]	; (8008b9c <TL_Init+0x60>)
 8008b62:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008b64:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <TL_Init+0x48>)
 8008b66:	4a0e      	ldr	r2, [pc, #56]	; (8008ba0 <TL_Init+0x64>)
 8008b68:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008b6a:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <TL_Init+0x48>)
 8008b6c:	4a0d      	ldr	r2, [pc, #52]	; (8008ba4 <TL_Init+0x68>)
 8008b6e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <TL_Init+0x48>)
 8008b72:	4a0d      	ldr	r2, [pc, #52]	; (8008ba8 <TL_Init+0x6c>)
 8008b74:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008b76:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <TL_Init+0x48>)
 8008b78:	4a0c      	ldr	r2, [pc, #48]	; (8008bac <TL_Init+0x70>)
 8008b7a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008b7c:	f002 fea8 	bl	800b8d0 <HW_IPCC_Init>

  return;
 8008b80:	bf00      	nop
}
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20030000 	.word	0x20030000
 8008b88:	20030028 	.word	0x20030028
 8008b8c:	20030048 	.word	0x20030048
 8008b90:	20030058 	.word	0x20030058
 8008b94:	20030068 	.word	0x20030068
 8008b98:	20030070 	.word	0x20030070
 8008b9c:	20030078 	.word	0x20030078
 8008ba0:	20030080 	.word	0x20030080
 8008ba4:	2003009c 	.word	0x2003009c
 8008ba8:	200300a0 	.word	0x200300a0
 8008bac:	200300ac 	.word	0x200300ac

08008bb0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008bbc:	4811      	ldr	r0, [pc, #68]	; (8008c04 <TL_BLE_Init+0x54>)
 8008bbe:	f000 fb05 	bl	80091cc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008bc2:	4b11      	ldr	r3, [pc, #68]	; (8008c08 <TL_BLE_Init+0x58>)
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4a0c      	ldr	r2, [pc, #48]	; (8008c0c <TL_BLE_Init+0x5c>)
 8008bdc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <TL_BLE_Init+0x54>)
 8008be2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008be4:	f002 fe8a 	bl	800b8fc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a08      	ldr	r2, [pc, #32]	; (8008c10 <TL_BLE_Init+0x60>)
 8008bee:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	4a07      	ldr	r2, [pc, #28]	; (8008c14 <TL_BLE_Init+0x64>)
 8008bf6:	6013      	str	r3, [r2, #0]

  return 0;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	200300c8 	.word	0x200300c8
 8008c08:	20030000 	.word	0x20030000
 8008c0c:	20030a58 	.word	0x20030a58
 8008c10:	20000620 	.word	0x20000620
 8008c14:	20000624 	.word	0x20000624

08008c18 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008c24:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <TL_BLE_SendCmd+0x34>)
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008c2e:	4b07      	ldr	r3, [pc, #28]	; (8008c4c <TL_BLE_SendCmd+0x34>)
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	2001      	movs	r0, #1
 8008c38:	f000 f96c 	bl	8008f14 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008c3c:	f002 fe68 	bl	800b910 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20030000 	.word	0x20030000

08008c50 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008c56:	e01c      	b.n	8008c92 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008c58:	1d3b      	adds	r3, r7, #4
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4812      	ldr	r0, [pc, #72]	; (8008ca8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008c5e:	f000 fb54 	bl	800930a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	7a5b      	ldrb	r3, [r3, #9]
 8008c66:	2b0f      	cmp	r3, #15
 8008c68:	d003      	beq.n	8008c72 <HW_IPCC_BLE_RxEvtNot+0x22>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7a5b      	ldrb	r3, [r3, #9]
 8008c6e:	2b0e      	cmp	r3, #14
 8008c70:	d105      	bne.n	8008c7e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4619      	mov	r1, r3
 8008c76:	2002      	movs	r0, #2
 8008c78:	f000 f94c 	bl	8008f14 <OutputDbgTrace>
 8008c7c:	e004      	b.n	8008c88 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4619      	mov	r1, r3
 8008c82:	2003      	movs	r0, #3
 8008c84:	f000 f946 	bl	8008f14 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008c88:	4b08      	ldr	r3, [pc, #32]	; (8008cac <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	4610      	mov	r0, r2
 8008c90:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008c92:	4805      	ldr	r0, [pc, #20]	; (8008ca8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008c94:	f000 faaa 	bl	80091ec <LST_is_empty>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0dc      	beq.n	8008c58 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008c9e:	bf00      	nop
}
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	200300c8 	.word	0x200300c8
 8008cac:	20000620 	.word	0x20000620

08008cb0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4798      	blx	r3

  return;
 8008cba:	bf00      	nop
}
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000624 	.word	0x20000624

08008cc4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008cd0:	480d      	ldr	r0, [pc, #52]	; (8008d08 <TL_SYS_Init+0x44>)
 8008cd2:	f000 fa7b 	bl	80091cc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008cd6:	4b0d      	ldr	r3, [pc, #52]	; (8008d0c <TL_SYS_Init+0x48>)
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	4a08      	ldr	r2, [pc, #32]	; (8008d08 <TL_SYS_Init+0x44>)
 8008ce8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008cea:	f002 fe33 	bl	800b954 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a07      	ldr	r2, [pc, #28]	; (8008d10 <TL_SYS_Init+0x4c>)
 8008cf4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	4a06      	ldr	r2, [pc, #24]	; (8008d14 <TL_SYS_Init+0x50>)
 8008cfc:	6013      	str	r3, [r2, #0]

  return 0;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	200300d0 	.word	0x200300d0
 8008d0c:	20030000 	.word	0x20030000
 8008d10:	20000628 	.word	0x20000628
 8008d14:	2000062c 	.word	0x2000062c

08008d18 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008d24:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <TL_SYS_SendCmd+0x34>)
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2210      	movs	r2, #16
 8008d2c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <TL_SYS_SendCmd+0x34>)
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4619      	mov	r1, r3
 8008d36:	2004      	movs	r0, #4
 8008d38:	f000 f8ec 	bl	8008f14 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008d3c:	f002 fe14 	bl	800b968 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20030000 	.word	0x20030000

08008d50 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008d54:	4b07      	ldr	r3, [pc, #28]	; (8008d74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	2005      	movs	r0, #5
 8008d5e:	f000 f8d9 	bl	8008f14 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008d62:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a03      	ldr	r2, [pc, #12]	; (8008d74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008d68:	68d2      	ldr	r2, [r2, #12]
 8008d6a:	6812      	ldr	r2, [r2, #0]
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4798      	blx	r3

  return;
 8008d70:	bf00      	nop
}
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	20030000 	.word	0x20030000
 8008d78:	20000628 	.word	0x20000628

08008d7c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008d82:	e00e      	b.n	8008da2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008d84:	1d3b      	adds	r3, r7, #4
 8008d86:	4619      	mov	r1, r3
 8008d88:	480b      	ldr	r0, [pc, #44]	; (8008db8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008d8a:	f000 fabe 	bl	800930a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4619      	mov	r1, r3
 8008d92:	2006      	movs	r0, #6
 8008d94:	f000 f8be 	bl	8008f14 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008d98:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <HW_IPCC_SYS_EvtNot+0x40>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	4610      	mov	r0, r2
 8008da0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008da2:	4805      	ldr	r0, [pc, #20]	; (8008db8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008da4:	f000 fa22 	bl	80091ec <LST_is_empty>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0ea      	beq.n	8008d84 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008dae:	bf00      	nop
}
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	200300d0 	.word	0x200300d0
 8008dbc:	2000062c 	.word	0x2000062c

08008dc0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008dc8:	4817      	ldr	r0, [pc, #92]	; (8008e28 <TL_MM_Init+0x68>)
 8008dca:	f000 f9ff 	bl	80091cc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008dce:	4817      	ldr	r0, [pc, #92]	; (8008e2c <TL_MM_Init+0x6c>)
 8008dd0:	f000 f9fc 	bl	80091cc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008dd4:	4b16      	ldr	r3, [pc, #88]	; (8008e30 <TL_MM_Init+0x70>)
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	4a16      	ldr	r2, [pc, #88]	; (8008e34 <TL_MM_Init+0x74>)
 8008dda:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008ddc:	4b15      	ldr	r3, [pc, #84]	; (8008e34 <TL_MM_Init+0x74>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	6892      	ldr	r2, [r2, #8]
 8008de4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008de6:	4b13      	ldr	r3, [pc, #76]	; (8008e34 <TL_MM_Init+0x74>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	68d2      	ldr	r2, [r2, #12]
 8008dee:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008df0:	4b10      	ldr	r3, [pc, #64]	; (8008e34 <TL_MM_Init+0x74>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a0c      	ldr	r2, [pc, #48]	; (8008e28 <TL_MM_Init+0x68>)
 8008df6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008df8:	4b0e      	ldr	r3, [pc, #56]	; (8008e34 <TL_MM_Init+0x74>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	6812      	ldr	r2, [r2, #0]
 8008e00:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008e02:	4b0c      	ldr	r3, [pc, #48]	; (8008e34 <TL_MM_Init+0x74>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	6852      	ldr	r2, [r2, #4]
 8008e0a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008e0c:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <TL_MM_Init+0x74>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6912      	ldr	r2, [r2, #16]
 8008e14:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008e16:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <TL_MM_Init+0x74>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	6952      	ldr	r2, [r2, #20]
 8008e1e:	619a      	str	r2, [r3, #24]

  return;
 8008e20:	bf00      	nop
}
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200300b8 	.word	0x200300b8
 8008e2c:	20000618 	.word	0x20000618
 8008e30:	20030000 	.word	0x20030000
 8008e34:	20000630 	.word	0x20000630

08008e38 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	4807      	ldr	r0, [pc, #28]	; (8008e60 <TL_MM_EvtDone+0x28>)
 8008e44:	f000 fa1a 	bl	800927c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	f000 f862 	bl	8008f14 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008e50:	4804      	ldr	r0, [pc, #16]	; (8008e64 <TL_MM_EvtDone+0x2c>)
 8008e52:	f002 fdaf 	bl	800b9b4 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008e56:	bf00      	nop
}
 8008e58:	3708      	adds	r7, #8
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20000618 	.word	0x20000618
 8008e64:	08008e69 	.word	0x08008e69

08008e68 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008e6e:	e00c      	b.n	8008e8a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008e70:	1d3b      	adds	r3, r7, #4
 8008e72:	4619      	mov	r1, r3
 8008e74:	480a      	ldr	r0, [pc, #40]	; (8008ea0 <SendFreeBuf+0x38>)
 8008e76:	f000 fa48 	bl	800930a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008e7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ea4 <SendFreeBuf+0x3c>)
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	4611      	mov	r1, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 f9f9 	bl	800927c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008e8a:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <SendFreeBuf+0x38>)
 8008e8c:	f000 f9ae 	bl	80091ec <LST_is_empty>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0ec      	beq.n	8008e70 <SendFreeBuf+0x8>
  }

  return;
 8008e96:	bf00      	nop
}
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000618 	.word	0x20000618
 8008ea4:	20030000 	.word	0x20030000

08008ea8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008eac:	4805      	ldr	r0, [pc, #20]	; (8008ec4 <TL_TRACES_Init+0x1c>)
 8008eae:	f000 f98d 	bl	80091cc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008eb2:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <TL_TRACES_Init+0x20>)
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	4a03      	ldr	r2, [pc, #12]	; (8008ec4 <TL_TRACES_Init+0x1c>)
 8008eb8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008eba:	f002 fdb1 	bl	800ba20 <HW_IPCC_TRACES_Init>

  return;
 8008ebe:	bf00      	nop
}
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200300c0 	.word	0x200300c0
 8008ec8:	20030000 	.word	0x20030000

08008ecc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008ed2:	e008      	b.n	8008ee6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008ed4:	1d3b      	adds	r3, r7, #4
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	4808      	ldr	r0, [pc, #32]	; (8008efc <HW_IPCC_TRACES_EvtNot+0x30>)
 8008eda:	f000 fa16 	bl	800930a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 f80d 	bl	8008f00 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008ee6:	4805      	ldr	r0, [pc, #20]	; (8008efc <HW_IPCC_TRACES_EvtNot+0x30>)
 8008ee8:	f000 f980 	bl	80091ec <LST_is_empty>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0f0      	beq.n	8008ed4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008ef2:	bf00      	nop
}
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	200300c0 	.word	0x200300c0

08008f00 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	6039      	str	r1, [r7, #0]
 8008f1e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008f20:	79fb      	ldrb	r3, [r7, #7]
 8008f22:	2b06      	cmp	r3, #6
 8008f24:	d845      	bhi.n	8008fb2 <OutputDbgTrace+0x9e>
 8008f26:	a201      	add	r2, pc, #4	; (adr r2, 8008f2c <OutputDbgTrace+0x18>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008f49 	.word	0x08008f49
 8008f30:	08008f6d 	.word	0x08008f6d
 8008f34:	08008f73 	.word	0x08008f73
 8008f38:	08008f87 	.word	0x08008f87
 8008f3c:	08008f93 	.word	0x08008f93
 8008f40:	08008f99 	.word	0x08008f99
 8008f44:	08008fa7 	.word	0x08008fa7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	7a5b      	ldrb	r3, [r3, #9]
 8008f50:	2bff      	cmp	r3, #255	; 0xff
 8008f52:	d005      	beq.n	8008f60 <OutputDbgTrace+0x4c>
 8008f54:	2bff      	cmp	r3, #255	; 0xff
 8008f56:	dc05      	bgt.n	8008f64 <OutputDbgTrace+0x50>
 8008f58:	2b0e      	cmp	r3, #14
 8008f5a:	d005      	beq.n	8008f68 <OutputDbgTrace+0x54>
 8008f5c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008f5e:	e001      	b.n	8008f64 <OutputDbgTrace+0x50>
          break;
 8008f60:	bf00      	nop
 8008f62:	e027      	b.n	8008fb4 <OutputDbgTrace+0xa0>
          break;
 8008f64:	bf00      	nop
 8008f66:	e025      	b.n	8008fb4 <OutputDbgTrace+0xa0>
          break;
 8008f68:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008f6a:	e023      	b.n	8008fb4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008f70:	e020      	b.n	8008fb4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	7a5b      	ldrb	r3, [r3, #9]
 8008f7a:	2b0e      	cmp	r3, #14
 8008f7c:	d001      	beq.n	8008f82 <OutputDbgTrace+0x6e>
 8008f7e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008f80:	e000      	b.n	8008f84 <OutputDbgTrace+0x70>
          break;
 8008f82:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f84:	e016      	b.n	8008fb4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	7a5b      	ldrb	r3, [r3, #9]
 8008f8e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008f90:	e010      	b.n	8008fb4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008f96:	e00d      	b.n	8008fb4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	7a5b      	ldrb	r3, [r3, #9]
 8008fa0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008fa2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008fa4:	e006      	b.n	8008fb4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	7a5b      	ldrb	r3, [r3, #9]
 8008fae:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008fb0:	e000      	b.n	8008fb4 <OutputDbgTrace+0xa0>

    default:
      break;
 8008fb2:	bf00      	nop
  }

  return;
 8008fb4:	bf00      	nop
}
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8008fcc:	215c      	movs	r1, #92	; 0x5c
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f003 f9d4 	bl	800c37c <strrchr>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d007      	beq.n	8008fea <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8008fda:	215c      	movs	r1, #92	; 0x5c
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f003 f9cd 	bl	800c37c <strrchr>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	e00d      	b.n	8009006 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8008fea:	212f      	movs	r1, #47	; 0x2f
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f003 f9c5 	bl	800c37c <strrchr>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d006      	beq.n	8009006 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8008ff8:	212f      	movs	r1, #47	; 0x2f
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f003 f9be 	bl	800c37c <strrchr>
 8009000:	4603      	mov	r3, r0
 8009002:	3301      	adds	r3, #1
 8009004:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009006:	68fb      	ldr	r3, [r7, #12]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009016:	f3ef 8310 	mrs	r3, PRIMASK
 800901a:	60fb      	str	r3, [r7, #12]
  return(result);
 800901c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800901e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009020:	b672      	cpsid	i
}
 8009022:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009024:	1cbb      	adds	r3, r7, #2
 8009026:	4619      	mov	r1, r3
 8009028:	4812      	ldr	r0, [pc, #72]	; (8009074 <DbgTrace_TxCpltCallback+0x64>)
 800902a:	f000 fbe6 	bl	80097fa <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800902e:	1cbb      	adds	r3, r7, #2
 8009030:	4619      	mov	r1, r3
 8009032:	4810      	ldr	r0, [pc, #64]	; (8009074 <DbgTrace_TxCpltCallback+0x64>)
 8009034:	f000 fcd2 	bl	80099dc <CircularQueue_Sense>
 8009038:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00c      	beq.n	800905a <DbgTrace_TxCpltCallback+0x4a>
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f383 8810 	msr	PRIMASK, r3
}
 800904a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800904c:	887b      	ldrh	r3, [r7, #2]
 800904e:	4a0a      	ldr	r2, [pc, #40]	; (8009078 <DbgTrace_TxCpltCallback+0x68>)
 8009050:	4619      	mov	r1, r3
 8009052:	6938      	ldr	r0, [r7, #16]
 8009054:	f7f7 fb91 	bl	800077a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009058:	e008      	b.n	800906c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800905a:	4b08      	ldr	r3, [pc, #32]	; (800907c <DbgTrace_TxCpltCallback+0x6c>)
 800905c:	2201      	movs	r2, #1
 800905e:	701a      	strb	r2, [r3, #0]
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f383 8810 	msr	PRIMASK, r3
}
 800906a:	bf00      	nop
}
 800906c:	bf00      	nop
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	20000634 	.word	0x20000634
 8009078:	08009011 	.word	0x08009011
 800907c:	20000011 	.word	0x20000011

08009080 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009086:	f7f7 fb72 	bl	800076e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800908a:	2302      	movs	r3, #2
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	2300      	movs	r3, #0
 8009090:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009094:	4903      	ldr	r1, [pc, #12]	; (80090a4 <DbgTraceInit+0x24>)
 8009096:	4804      	ldr	r0, [pc, #16]	; (80090a8 <DbgTraceInit+0x28>)
 8009098:	f000 f956 	bl	8009348 <CircularQueue_Init>
#endif 
#endif
  return;
 800909c:	bf00      	nop
}
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	20000654 	.word	0x20000654
 80090a8:	20000634 	.word	0x20000634

080090ac <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 f805 	bl	80090cc <DbgTraceWrite>
 80090c2:	4603      	mov	r3, r0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08a      	sub	sp, #40	; 0x28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090dc:	f3ef 8310 	mrs	r3, PRIMASK
 80090e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80090e2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80090e4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ec:	d102      	bne.n	80090f4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	627b      	str	r3, [r7, #36]	; 0x24
 80090f2:	e037      	b.n	8009164 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d006      	beq.n	8009108 <DbgTraceWrite+0x3c>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d003      	beq.n	8009108 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009100:	f04f 33ff 	mov.w	r3, #4294967295
 8009104:	627b      	str	r3, [r7, #36]	; 0x24
 8009106:	e02d      	b.n	8009164 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d02a      	beq.n	8009164 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009112:	b672      	cpsid	i
}
 8009114:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	b29a      	uxth	r2, r3
 800911a:	2301      	movs	r3, #1
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	4814      	ldr	r0, [pc, #80]	; (8009170 <DbgTraceWrite+0xa4>)
 8009120:	f000 f944 	bl	80093ac <CircularQueue_Add>
 8009124:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d015      	beq.n	8009158 <DbgTraceWrite+0x8c>
 800912c:	4b11      	ldr	r3, [pc, #68]	; (8009174 <DbgTraceWrite+0xa8>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d010      	beq.n	8009158 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8009136:	4b0f      	ldr	r3, [pc, #60]	; (8009174 <DbgTraceWrite+0xa8>)
 8009138:	2200      	movs	r2, #0
 800913a:	701a      	strb	r2, [r3, #0]
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f383 8810 	msr	PRIMASK, r3
}
 8009146:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	b29b      	uxth	r3, r3
 800914c:	4a0a      	ldr	r2, [pc, #40]	; (8009178 <DbgTraceWrite+0xac>)
 800914e:	4619      	mov	r1, r3
 8009150:	69f8      	ldr	r0, [r7, #28]
 8009152:	f7f7 fb12 	bl	800077a <DbgOutputTraces>
 8009156:	e005      	b.n	8009164 <DbgTraceWrite+0x98>
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f383 8810 	msr	PRIMASK, r3
}
 8009162:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009166:	4618      	mov	r0, r3
 8009168:	3728      	adds	r7, #40	; 0x28
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000634 	.word	0x20000634
 8009174:	20000011 	.word	0x20000011
 8009178:	08009011 	.word	0x08009011

0800917c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009186:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <OTP_Read+0x48>)
 8009188:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800918a:	e002      	b.n	8009192 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3b08      	subs	r3, #8
 8009190:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	3307      	adds	r3, #7
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	79fa      	ldrb	r2, [r7, #7]
 800919a:	429a      	cmp	r2, r3
 800919c:	d003      	beq.n	80091a6 <OTP_Read+0x2a>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	4a09      	ldr	r2, [pc, #36]	; (80091c8 <OTP_Read+0x4c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d1f2      	bne.n	800918c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3307      	adds	r3, #7
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	79fa      	ldrb	r2, [r7, #7]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d001      	beq.n	80091b6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80091b6:	68fb      	ldr	r3, [r7, #12]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	1fff73f8 	.word	0x1fff73f8
 80091c8:	1fff7000 	.word	0x1fff7000

080091cc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	605a      	str	r2, [r3, #4]
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091f4:	f3ef 8310 	mrs	r3, PRIMASK
 80091f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80091fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80091fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80091fe:	b672      	cpsid	i
}
 8009200:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	429a      	cmp	r2, r3
 800920a:	d102      	bne.n	8009212 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800920c:	2301      	movs	r3, #1
 800920e:	75fb      	strb	r3, [r7, #23]
 8009210:	e001      	b.n	8009216 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009212:	2300      	movs	r3, #0
 8009214:	75fb      	strb	r3, [r7, #23]
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	f383 8810 	msr	PRIMASK, r3
}
 8009220:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
}
 8009224:	4618      	mov	r0, r3
 8009226:	371c      	adds	r7, #28
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009230:	b480      	push	{r7}
 8009232:	b087      	sub	sp, #28
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800923a:	f3ef 8310 	mrs	r3, PRIMASK
 800923e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009240:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009244:	b672      	cpsid	i
}
 8009246:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	683a      	ldr	r2, [r7, #0]
 8009262:	605a      	str	r2, [r3, #4]
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	f383 8810 	msr	PRIMASK, r3
}
 800926e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009270:	bf00      	nop
 8009272:	371c      	adds	r7, #28
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009286:	f3ef 8310 	mrs	r3, PRIMASK
 800928a:	60fb      	str	r3, [r7, #12]
  return(result);
 800928c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800928e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009290:	b672      	cpsid	i
}
 8009292:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f383 8810 	msr	PRIMASK, r3
}
 80092ba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80092bc:	bf00      	nop
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b087      	sub	sp, #28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092d0:	f3ef 8310 	mrs	r3, PRIMASK
 80092d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80092d6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80092d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092da:	b672      	cpsid	i
}
 80092dc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	6852      	ldr	r2, [r2, #4]
 80092f0:	605a      	str	r2, [r3, #4]
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f383 8810 	msr	PRIMASK, r3
}
 80092fc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80092fe:	bf00      	nop
 8009300:	371c      	adds	r7, #28
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b086      	sub	sp, #24
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
 8009312:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009314:	f3ef 8310 	mrs	r3, PRIMASK
 8009318:	60fb      	str	r3, [r7, #12]
  return(result);
 800931a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800931c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800931e:	b672      	cpsid	i
}
 8009320:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff ffca 	bl	80092c8 <LST_remove_node>
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	f383 8810 	msr	PRIMASK, r3
}
 800933e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009340:	bf00      	nop
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2200      	movs	r2, #0
 8009372:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	887a      	ldrh	r2, [r7, #2]
 800937e:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	7e3a      	ldrb	r2, [r7, #24]
 8009384:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8009386:	7e3b      	ldrb	r3, [r7, #24]
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b00      	cmp	r3, #0
 800938e:	d006      	beq.n	800939e <CircularQueue_Init+0x56>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	891b      	ldrh	r3, [r3, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d002      	beq.n	800939e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8009398:	f04f 33ff 	mov.w	r3, #4294967295
 800939c:	e000      	b.n	80093a0 <CircularQueue_Init+0x58>
  }
  return 0;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3714      	adds	r7, #20
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08e      	sub	sp, #56	; 0x38
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	4613      	mov	r3, r2
 80093ba:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 80093bc:	2300      	movs	r3, #0
 80093be:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80093c0:	2300      	movs	r3, #0
 80093c2:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 80093c4:	2300      	movs	r3, #0
 80093c6:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80093c8:	2300      	movs	r3, #0
 80093ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80093cc:	2300      	movs	r3, #0
 80093ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 80093d0:	2300      	movs	r3, #0
 80093d2:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 80093d4:	2300      	movs	r3, #0
 80093d6:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	891b      	ldrh	r3, [r3, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <CircularQueue_Add+0x38>
 80093e0:	2302      	movs	r3, #2
 80093e2:	e000      	b.n	80093e6 <CircularQueue_Add+0x3a>
 80093e4:	2300      	movs	r3, #0
 80093e6:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	695b      	ldr	r3, [r3, #20]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d02a      	beq.n	8009446 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	891b      	ldrh	r3, [r3, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d123      	bne.n	8009440 <CircularQueue_Add+0x94>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	4413      	add	r3, r2
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	b29a      	uxth	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6819      	ldr	r1, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	1c58      	adds	r0, r3, #1
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	4298      	cmp	r0, r3
 8009416:	d306      	bcc.n	8009426 <CircularQueue_Add+0x7a>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6918      	ldr	r0, [r3, #16]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	1ac3      	subs	r3, r0, r3
 8009422:	3301      	adds	r3, #1
 8009424:	e002      	b.n	800942c <CircularQueue_Add+0x80>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	3301      	adds	r3, #1
 800942c:	440b      	add	r3, r1
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	b29b      	uxth	r3, r3
 8009432:	021b      	lsls	r3, r3, #8
 8009434:	b29b      	uxth	r3, r3
 8009436:	4413      	add	r3, r2
 8009438:	b29b      	uxth	r3, r3
 800943a:	3302      	adds	r3, #2
 800943c:	b29b      	uxth	r3, r3
 800943e:	e001      	b.n	8009444 <CircularQueue_Add+0x98>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	891b      	ldrh	r3, [r3, #8]
 8009444:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	891b      	ldrh	r3, [r3, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d002      	beq.n	8009454 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	891b      	ldrh	r3, [r3, #8]
 8009452:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	691a      	ldr	r2, [r3, #16]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	429a      	cmp	r2, r3
 800945e:	d307      	bcc.n	8009470 <CircularQueue_Add+0xc4>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6919      	ldr	r1, [r3, #16]
 8009468:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800946a:	440b      	add	r3, r1
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	e000      	b.n	8009472 <CircularQueue_Add+0xc6>
 8009470:	2300      	movs	r3, #0
 8009472:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8009474:	88fa      	ldrh	r2, [r7, #6]
 8009476:	7ffb      	ldrb	r3, [r7, #31]
 8009478:	4413      	add	r3, r2
 800947a:	461a      	mov	r2, r3
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	fb02 f303 	mul.w	r3, r2, r3
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	429a      	cmp	r2, r3
 8009486:	d80b      	bhi.n	80094a0 <CircularQueue_Add+0xf4>
 8009488:	88fa      	ldrh	r2, [r7, #6]
 800948a:	7ffb      	ldrb	r3, [r7, #31]
 800948c:	4413      	add	r3, r2
 800948e:	461a      	mov	r2, r3
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	fbb3 f1f2 	udiv	r1, r3, r2
 8009496:	fb01 f202 	mul.w	r2, r1, r2
 800949a:	1a9b      	subs	r3, r3, r2
 800949c:	b2db      	uxtb	r3, r3
 800949e:	e000      	b.n	80094a2 <CircularQueue_Add+0xf6>
 80094a0:	2300      	movs	r3, #0
 80094a2:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 80094a4:	7dfa      	ldrb	r2, [r7, #23]
 80094a6:	7ffb      	ldrb	r3, [r7, #31]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	bf8c      	ite	hi
 80094ac:	2301      	movhi	r3, #1
 80094ae:	2300      	movls	r3, #0
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80094b4:	7fbb      	ldrb	r3, [r7, #30]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d008      	beq.n	80094cc <CircularQueue_Add+0x120>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	7f1b      	ldrb	r3, [r3, #28]
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d002      	beq.n	80094cc <CircularQueue_Add+0x120>
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	e000      	b.n	80094ce <CircularQueue_Add+0x122>
 80094cc:	8bbb      	ldrh	r3, [r7, #28]
 80094ce:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80094d0:	7fbb      	ldrb	r3, [r7, #30]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d008      	beq.n	80094e8 <CircularQueue_Add+0x13c>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	7f1b      	ldrb	r3, [r3, #28]
 80094da:	f003 0302 	and.w	r3, r3, #2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <CircularQueue_Add+0x13c>
 80094e2:	7ffb      	ldrb	r3, [r7, #31]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	e000      	b.n	80094ea <CircularQueue_Add+0x13e>
 80094e8:	8bbb      	ldrh	r3, [r7, #28]
 80094ea:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 80094ec:	88fb      	ldrh	r3, [r7, #6]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 817e 	beq.w	80097f0 <CircularQueue_Add+0x444>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	695a      	ldr	r2, [r3, #20]
 80094f8:	88f9      	ldrh	r1, [r7, #6]
 80094fa:	7ffb      	ldrb	r3, [r7, #31]
 80094fc:	440b      	add	r3, r1
 80094fe:	4619      	mov	r1, r3
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	fb01 f303 	mul.w	r3, r1, r3
 8009506:	441a      	add	r2, r3
 8009508:	8bbb      	ldrh	r3, [r7, #28]
 800950a:	441a      	add	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	429a      	cmp	r2, r3
 8009512:	f200 816d 	bhi.w	80097f0 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009516:	2300      	movs	r3, #0
 8009518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800951a:	e14a      	b.n	80097b2 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	691a      	ldr	r2, [r3, #16]
 8009520:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009522:	441a      	add	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d307      	bcc.n	800953c <CircularQueue_Add+0x190>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	691a      	ldr	r2, [r3, #16]
 8009530:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009532:	441a      	add	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	e003      	b.n	8009544 <CircularQueue_Add+0x198>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	691a      	ldr	r2, [r3, #16]
 8009540:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009542:	4413      	add	r3, r2
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	891b      	ldrh	r3, [r3, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d130      	bne.n	80095b8 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	1c59      	adds	r1, r3, #1
 800955e:	6339      	str	r1, [r7, #48]	; 0x30
 8009560:	4413      	add	r3, r2
 8009562:	88fa      	ldrh	r2, [r7, #6]
 8009564:	b2d2      	uxtb	r2, r2
 8009566:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800956e:	429a      	cmp	r2, r3
 8009570:	d304      	bcc.n	800957c <CircularQueue_Add+0x1d0>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	e000      	b.n	800957e <CircularQueue_Add+0x1d2>
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8009580:	88fb      	ldrh	r3, [r7, #6]
 8009582:	0a1b      	lsrs	r3, r3, #8
 8009584:	b298      	uxth	r0, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	1c59      	adds	r1, r3, #1
 800958e:	6339      	str	r1, [r7, #48]	; 0x30
 8009590:	4413      	add	r3, r2
 8009592:	b2c2      	uxtb	r2, r0
 8009594:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800959c:	429a      	cmp	r2, r3
 800959e:	d304      	bcc.n	80095aa <CircularQueue_Add+0x1fe>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	e000      	b.n	80095ac <CircularQueue_Add+0x200>
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	1c9a      	adds	r2, r3, #2
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80095b8:	88fa      	ldrh	r2, [r7, #6]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6859      	ldr	r1, [r3, #4]
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	1acb      	subs	r3, r1, r3
 80095c2:	4293      	cmp	r3, r2
 80095c4:	bf28      	it	cs
 80095c6:	4613      	movcs	r3, r2
 80095c8:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80095ca:	88fb      	ldrh	r3, [r7, #6]
 80095cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d007      	beq.n	80095e2 <CircularQueue_Add+0x236>
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d225      	bcs.n	8009626 <CircularQueue_Add+0x27a>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	7f1b      	ldrb	r3, [r3, #28]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d121      	bne.n	8009626 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	18d0      	adds	r0, r2, r3
 80095ea:	88fb      	ldrh	r3, [r7, #6]
 80095ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ee:	fb02 f303 	mul.w	r3, r2, r3
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	4413      	add	r3, r2
 80095f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095f8:	4619      	mov	r1, r3
 80095fa:	f002 ff4a 	bl	800c492 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	695a      	ldr	r2, [r3, #20]
 8009602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009604:	441a      	add	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800960a:	2300      	movs	r3, #0
 800960c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8009612:	88fa      	ldrh	r2, [r7, #6]
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800961a:	7ffb      	ldrb	r3, [r7, #31]
 800961c:	b29a      	uxth	r2, r3
 800961e:	88fb      	ldrh	r3, [r7, #6]
 8009620:	4413      	add	r3, r2
 8009622:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009624:	e0a4      	b.n	8009770 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 80a1 	beq.w	8009770 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	7f1b      	ldrb	r3, [r3, #28]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d03a      	beq.n	80096b0 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	891b      	ldrh	r3, [r3, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10d      	bne.n	800965e <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	3b02      	subs	r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	22ff      	movs	r2, #255	; 0xff
 800964e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009656:	3b01      	subs	r3, #1
 8009658:	4413      	add	r3, r2
 800965a:	22ff      	movs	r2, #255	; 0xff
 800965c:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	695a      	ldr	r2, [r3, #20]
 8009662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009664:	441a      	add	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800966e:	88fb      	ldrh	r3, [r7, #6]
 8009670:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8009672:	2300      	movs	r3, #0
 8009674:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	891b      	ldrh	r3, [r3, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d16f      	bne.n	800975e <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009684:	1c59      	adds	r1, r3, #1
 8009686:	6339      	str	r1, [r7, #48]	; 0x30
 8009688:	4413      	add	r3, r2
 800968a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800968c:	b2d2      	uxtb	r2, r2
 800968e:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009692:	0a18      	lsrs	r0, r3, #8
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800969a:	1c59      	adds	r1, r3, #1
 800969c:	6339      	str	r1, [r7, #48]	; 0x30
 800969e:	4413      	add	r3, r2
 80096a0:	b2c2      	uxtb	r2, r0
 80096a2:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	1c9a      	adds	r2, r3, #2
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	615a      	str	r2, [r3, #20]
 80096ae:	e056      	b.n	800975e <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	7f1b      	ldrb	r3, [r3, #28]
 80096b4:	f003 0302 	and.w	r3, r3, #2
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d050      	beq.n	800975e <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	891b      	ldrh	r3, [r3, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d14a      	bne.n	800975a <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ca:	3b02      	subs	r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096d0:	b2d2      	uxtb	r2, r2
 80096d2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d6:	0a19      	lsrs	r1, r3, #8
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	3b01      	subs	r3, #1
 80096e0:	4413      	add	r3, r2
 80096e2:	b2ca      	uxtb	r2, r1
 80096e4:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	18d0      	adds	r0, r2, r3
 80096ee:	88fb      	ldrh	r3, [r7, #6]
 80096f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096f2:	fb02 f303 	mul.w	r3, r2, r3
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	4413      	add	r3, r2
 80096fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096fc:	4619      	mov	r1, r3
 80096fe:	f002 fec8 	bl	800c492 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	695a      	ldr	r2, [r3, #20]
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	441a      	add	r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8009712:	88fa      	ldrh	r2, [r7, #6]
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	1c5a      	adds	r2, r3, #1
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009724:	2300      	movs	r3, #0
 8009726:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	1c59      	adds	r1, r3, #1
 8009730:	6339      	str	r1, [r7, #48]	; 0x30
 8009732:	4413      	add	r3, r2
 8009734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009736:	b2d2      	uxtb	r2, r2
 8009738:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973c:	0a18      	lsrs	r0, r3, #8
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	1c59      	adds	r1, r3, #1
 8009746:	6339      	str	r1, [r7, #48]	; 0x30
 8009748:	4413      	add	r3, r2
 800974a:	b2c2      	uxtb	r2, r0
 800974c:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	1c9a      	adds	r2, r3, #2
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	615a      	str	r2, [r3, #20]
 8009758:	e001      	b.n	800975e <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	e049      	b.n	80097f2 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800975e:	7ffb      	ldrb	r3, [r7, #31]
 8009760:	b29a      	uxth	r2, r3
 8009762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009764:	b29b      	uxth	r3, r3
 8009766:	4413      	add	r3, r2
 8009768:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	2b00      	cmp	r3, #0
 8009774:	d015      	beq.n	80097a2 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	18d0      	adds	r0, r2, r3
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009782:	fb03 f202 	mul.w	r2, r3, r2
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	4413      	add	r3, r2
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	4413      	add	r3, r2
 800978e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009790:	4619      	mov	r1, r3
 8009792:	f002 fe7e 	bl	800c492 <memcpy>
        q->byteCount += NbBytesToCopy;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	695a      	ldr	r2, [r3, #20]
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	441a      	add	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 80097ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ae:	3301      	adds	r3, #1
 80097b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	f4ff aeb0 	bcc.w	800951c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6919      	ldr	r1, [r3, #16]
 80097c4:	7ffb      	ldrb	r3, [r7, #31]
 80097c6:	4419      	add	r1, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	4299      	cmp	r1, r3
 80097ce:	d307      	bcc.n	80097e0 <CircularQueue_Add+0x434>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6919      	ldr	r1, [r3, #16]
 80097d4:	7ffb      	ldrb	r3, [r7, #31]
 80097d6:	4419      	add	r1, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	1acb      	subs	r3, r1, r3
 80097de:	e003      	b.n	80097e8 <CircularQueue_Add+0x43c>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6919      	ldr	r1, [r3, #16]
 80097e4:	7ffb      	ldrb	r3, [r7, #31]
 80097e6:	440b      	add	r3, r1
 80097e8:	4413      	add	r3, r2
 80097ea:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	e000      	b.n	80097f2 <CircularQueue_Add+0x446>
    return NULL;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3738      	adds	r7, #56	; 0x38
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b085      	sub	sp, #20
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8009808:	2300      	movs	r3, #0
 800980a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	891b      	ldrh	r3, [r3, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <CircularQueue_Remove+0x1e>
 8009814:	2302      	movs	r3, #2
 8009816:	e000      	b.n	800981a <CircularQueue_Remove+0x20>
 8009818:	2300      	movs	r3, #0
 800981a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 80cc 	beq.w	80099c2 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	891b      	ldrh	r3, [r3, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d121      	bne.n	8009876 <CircularQueue_Remove+0x7c>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	4413      	add	r3, r2
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	b29a      	uxth	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6819      	ldr	r1, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	1c58      	adds	r0, r3, #1
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	4298      	cmp	r0, r3
 8009850:	d306      	bcc.n	8009860 <CircularQueue_Remove+0x66>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68d8      	ldr	r0, [r3, #12]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	1ac3      	subs	r3, r0, r3
 800985c:	3301      	adds	r3, #1
 800985e:	e002      	b.n	8009866 <CircularQueue_Remove+0x6c>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	440b      	add	r3, r1
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	b29b      	uxth	r3, r3
 800986c:	021b      	lsls	r3, r3, #8
 800986e:	b29b      	uxth	r3, r3
 8009870:	4413      	add	r3, r2
 8009872:	b29b      	uxth	r3, r3
 8009874:	e001      	b.n	800987a <CircularQueue_Remove+0x80>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	891b      	ldrh	r3, [r3, #8]
 800987a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	7f1b      	ldrb	r3, [r3, #28]
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	d057      	beq.n	8009938 <CircularQueue_Remove+0x13e>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	7f1b      	ldrb	r3, [r3, #28]
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d151      	bne.n	8009938 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009894:	897b      	ldrh	r3, [r7, #10]
 8009896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800989a:	4293      	cmp	r3, r2
 800989c:	d103      	bne.n	80098a6 <CircularQueue_Remove+0xac>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	891b      	ldrh	r3, [r3, #8]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d012      	beq.n	80098cc <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68da      	ldr	r2, [r3, #12]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d942      	bls.n	8009938 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	891b      	ldrh	r3, [r3, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d03e      	beq.n	8009938 <CircularQueue_Remove+0x13e>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	8912      	ldrh	r2, [r2, #8]
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d235      	bcs.n	8009938 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	695a      	ldr	r2, [r3, #20]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68d9      	ldr	r1, [r3, #12]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	1acb      	subs	r3, r1, r3
 80098da:	441a      	add	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	891b      	ldrh	r3, [r3, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d121      	bne.n	8009932 <CircularQueue_Remove+0x138>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6819      	ldr	r1, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	1c58      	adds	r0, r3, #1
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	4298      	cmp	r0, r3
 800990c:	d306      	bcc.n	800991c <CircularQueue_Remove+0x122>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68d8      	ldr	r0, [r3, #12]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	1ac3      	subs	r3, r0, r3
 8009918:	3301      	adds	r3, #1
 800991a:	e002      	b.n	8009922 <CircularQueue_Remove+0x128>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	440b      	add	r3, r1
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	b29b      	uxth	r3, r3
 8009928:	021b      	lsls	r3, r3, #8
 800992a:	b29b      	uxth	r3, r3
 800992c:	4413      	add	r3, r2
 800992e:	b29b      	uxth	r3, r3
 8009930:	e001      	b.n	8009936 <CircularQueue_Remove+0x13c>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	891b      	ldrh	r3, [r3, #8]
 8009936:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	68d9      	ldr	r1, [r3, #12]
 8009940:	7a7b      	ldrb	r3, [r7, #9]
 8009942:	4419      	add	r1, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	4299      	cmp	r1, r3
 800994a:	d307      	bcc.n	800995c <CircularQueue_Remove+0x162>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68d9      	ldr	r1, [r3, #12]
 8009950:	7a7b      	ldrb	r3, [r7, #9]
 8009952:	4419      	add	r1, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	1acb      	subs	r3, r1, r3
 800995a:	e003      	b.n	8009964 <CircularQueue_Remove+0x16a>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68d9      	ldr	r1, [r3, #12]
 8009960:	7a7b      	ldrb	r3, [r7, #9]
 8009962:	440b      	add	r3, r1
 8009964:	4413      	add	r3, r2
 8009966:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	695b      	ldr	r3, [r3, #20]
 800996c:	8979      	ldrh	r1, [r7, #10]
 800996e:	7a7a      	ldrb	r2, [r7, #9]
 8009970:	440a      	add	r2, r1
 8009972:	1a9a      	subs	r2, r3, r2
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d01b      	beq.n	80099b8 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	897b      	ldrh	r3, [r7, #10]
 8009986:	441a      	add	r2, r3
 8009988:	7a7b      	ldrb	r3, [r7, #9]
 800998a:	441a      	add	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	429a      	cmp	r2, r3
 8009992:	d309      	bcc.n	80099a8 <CircularQueue_Remove+0x1ae>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	897b      	ldrh	r3, [r7, #10]
 800999a:	441a      	add	r2, r3
 800999c:	7a7b      	ldrb	r3, [r7, #9]
 800999e:	441a      	add	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	e005      	b.n	80099b4 <CircularQueue_Remove+0x1ba>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68da      	ldr	r2, [r3, #12]
 80099ac:	897b      	ldrh	r3, [r7, #10]
 80099ae:	441a      	add	r2, r3
 80099b0:	7a7b      	ldrb	r3, [r7, #9]
 80099b2:	4413      	add	r3, r2
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	1e5a      	subs	r2, r3, #1
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d002      	beq.n	80099ce <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	897a      	ldrh	r2, [r7, #10]
 80099cc:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 80099ce:	68fb      	ldr	r3, [r7, #12]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80099e6:	2300      	movs	r3, #0
 80099e8:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	891b      	ldrh	r3, [r3, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <CircularQueue_Sense+0x1e>
 80099f6:	2302      	movs	r3, #2
 80099f8:	e000      	b.n	80099fc <CircularQueue_Sense+0x20>
 80099fa:	2300      	movs	r3, #0
 80099fc:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 8090 	beq.w	8009b30 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	891b      	ldrh	r3, [r3, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d121      	bne.n	8009a62 <CircularQueue_Sense+0x86>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	4413      	add	r3, r2
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6819      	ldr	r1, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	1c58      	adds	r0, r3, #1
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	4298      	cmp	r0, r3
 8009a3c:	d306      	bcc.n	8009a4c <CircularQueue_Sense+0x70>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68d8      	ldr	r0, [r3, #12]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	1ac3      	subs	r3, r0, r3
 8009a48:	3301      	adds	r3, #1
 8009a4a:	e002      	b.n	8009a52 <CircularQueue_Sense+0x76>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	3301      	adds	r3, #1
 8009a52:	440b      	add	r3, r1
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	021b      	lsls	r3, r3, #8
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	4413      	add	r3, r2
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	e001      	b.n	8009a66 <CircularQueue_Sense+0x8a>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	891b      	ldrh	r3, [r3, #8]
 8009a66:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7f1b      	ldrb	r3, [r3, #28]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d048      	beq.n	8009b06 <CircularQueue_Sense+0x12a>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	7f1b      	ldrb	r3, [r3, #28]
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d142      	bne.n	8009b06 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009a80:	8a7b      	ldrh	r3, [r7, #18]
 8009a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d103      	bne.n	8009a92 <CircularQueue_Sense+0xb6>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	891b      	ldrh	r3, [r3, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d012      	beq.n	8009ab8 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d933      	bls.n	8009b06 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	891b      	ldrh	r3, [r3, #8]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d02f      	beq.n	8009b06 <CircularQueue_Sense+0x12a>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	8912      	ldrh	r2, [r2, #8]
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d226      	bcs.n	8009b06 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8009ab8:	2300      	movs	r3, #0
 8009aba:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	891b      	ldrh	r3, [r3, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d11d      	bne.n	8009b00 <CircularQueue_Sense+0x124>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6819      	ldr	r1, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	1c58      	adds	r0, r3, #1
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	4298      	cmp	r0, r3
 8009ade:	d305      	bcc.n	8009aec <CircularQueue_Sense+0x110>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	1ac3      	subs	r3, r0, r3
 8009ae8:	3301      	adds	r3, #1
 8009aea:	e001      	b.n	8009af0 <CircularQueue_Sense+0x114>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3301      	adds	r3, #1
 8009af0:	440b      	add	r3, r1
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	4413      	add	r3, r2
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	e001      	b.n	8009b04 <CircularQueue_Sense+0x128>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	891b      	ldrh	r3, [r3, #8]
 8009b04:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	7af9      	ldrb	r1, [r7, #11]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4419      	add	r1, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	4299      	cmp	r1, r3
 8009b16:	d306      	bcc.n	8009b26 <CircularQueue_Sense+0x14a>
 8009b18:	7af9      	ldrb	r1, [r7, #11]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	4419      	add	r1, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	1acb      	subs	r3, r1, r3
 8009b24:	e002      	b.n	8009b2c <CircularQueue_Sense+0x150>
 8009b26:	7af9      	ldrb	r1, [r7, #11]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	440b      	add	r3, r1
 8009b2c:	4413      	add	r3, r2
 8009b2e:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	8a7a      	ldrh	r2, [r7, #18]
 8009b3a:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8009b3c:	697b      	ldr	r3, [r7, #20]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
	...

08009b4c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8009b50:	4b03      	ldr	r3, [pc, #12]	; (8009b60 <LL_FLASH_GetUDN+0x14>)
 8009b52:	681b      	ldr	r3, [r3, #0]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	1fff7580 	.word	0x1fff7580

08009b64 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8009b64:	b480      	push	{r7}
 8009b66:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8009b68:	4b03      	ldr	r3, [pc, #12]	; (8009b78 <LL_FLASH_GetDeviceID+0x14>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	b2db      	uxtb	r3, r3
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	1fff7584 	.word	0x1fff7584

08009b7c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8009b80:	4b03      	ldr	r3, [pc, #12]	; (8009b90 <LL_FLASH_GetSTCompanyID+0x14>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	0a1b      	lsrs	r3, r3, #8
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	1fff7584 	.word	0x1fff7584

08009b94 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8009b94:	b5b0      	push	{r4, r5, r7, lr}
 8009b96:	b090      	sub	sp, #64	; 0x40
 8009b98:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009b9a:	2392      	movs	r3, #146	; 0x92
 8009b9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8009ba0:	4b4a      	ldr	r3, [pc, #296]	; (8009ccc <APP_BLE_Init+0x138>)
 8009ba2:	1d3c      	adds	r4, r7, #4
 8009ba4:	461d      	mov	r5, r3
 8009ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009bb6:	c403      	stmia	r4!, {r0, r1}
 8009bb8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8009bba:	f000 fb99 	bl	800a2f0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	2002      	movs	r0, #2
 8009bc2:	f001 ff55 	bl	800ba70 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8009bc6:	4a42      	ldr	r2, [pc, #264]	; (8009cd0 <APP_BLE_Init+0x13c>)
 8009bc8:	2100      	movs	r1, #0
 8009bca:	2010      	movs	r0, #16
 8009bcc:	f002 f87c 	bl	800bcc8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8009bd0:	1d3b      	adds	r3, r7, #4
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fbe6 	bl	80083a4 <SHCI_C2_BLE_Init>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8009bde:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d012      	beq.n	8009c0c <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8009be6:	483b      	ldr	r0, [pc, #236]	; (8009cd4 <APP_BLE_Init+0x140>)
 8009be8:	f7ff f9ea 	bl	8008fc0 <DbgTraceGetFileName>
 8009bec:	4601      	mov	r1, r0
 8009bee:	f44f 739a 	mov.w	r3, #308	; 0x134
 8009bf2:	4a39      	ldr	r2, [pc, #228]	; (8009cd8 <APP_BLE_Init+0x144>)
 8009bf4:	4839      	ldr	r0, [pc, #228]	; (8009cdc <APP_BLE_Init+0x148>)
 8009bf6:	f002 fa6b 	bl	800c0d0 <iprintf>
 8009bfa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4837      	ldr	r0, [pc, #220]	; (8009ce0 <APP_BLE_Init+0x14c>)
 8009c02:	f002 fa65 	bl	800c0d0 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8009c06:	f7f8 fa81 	bl	800210c <Error_Handler>
 8009c0a:	e00c      	b.n	8009c26 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8009c0c:	4831      	ldr	r0, [pc, #196]	; (8009cd4 <APP_BLE_Init+0x140>)
 8009c0e:	f7ff f9d7 	bl	8008fc0 <DbgTraceGetFileName>
 8009c12:	4601      	mov	r1, r0
 8009c14:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8009c18:	4a2f      	ldr	r2, [pc, #188]	; (8009cd8 <APP_BLE_Init+0x144>)
 8009c1a:	4830      	ldr	r0, [pc, #192]	; (8009cdc <APP_BLE_Init+0x148>)
 8009c1c:	f002 fa58 	bl	800c0d0 <iprintf>
 8009c20:	4830      	ldr	r0, [pc, #192]	; (8009ce4 <APP_BLE_Init+0x150>)
 8009c22:	f002 fa55 	bl	800c0d0 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009c26:	f000 fb79 	bl	800a31c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009c2a:	f7fe faf9 	bl	8008220 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 8009c2e:	4a2e      	ldr	r2, [pc, #184]	; (8009ce8 <APP_BLE_Init+0x154>)
 8009c30:	2100      	movs	r1, #0
 8009c32:	2001      	movs	r0, #1
 8009c34:	f002 f848 	bl	800bcc8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 8009c38:	4a2c      	ldr	r2, [pc, #176]	; (8009cec <APP_BLE_Init+0x158>)
 8009c3a:	2100      	movs	r1, #0
 8009c3c:	2002      	movs	r0, #2
 8009c3e:	f002 f843 	bl	800bcc8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009c42:	4b2b      	ldr	r3, [pc, #172]	; (8009cf0 <APP_BLE_Init+0x15c>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  ret = aci_hal_set_radio_activity_mask(0x0020);
 8009c4a:	2020      	movs	r0, #32
 8009c4c:	f7fe f90e 	bl	8007e6c <aci_hal_set_radio_activity_mask>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8009c56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d010      	beq.n	8009c80 <APP_BLE_Init+0xec>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8009c5e:	481d      	ldr	r0, [pc, #116]	; (8009cd4 <APP_BLE_Init+0x140>)
 8009c60:	f7ff f9ae 	bl	8008fc0 <DbgTraceGetFileName>
 8009c64:	4601      	mov	r1, r0
 8009c66:	f240 1357 	movw	r3, #343	; 0x157
 8009c6a:	4a1b      	ldr	r2, [pc, #108]	; (8009cd8 <APP_BLE_Init+0x144>)
 8009c6c:	481b      	ldr	r0, [pc, #108]	; (8009cdc <APP_BLE_Init+0x148>)
 8009c6e:	f002 fa2f 	bl	800c0d0 <iprintf>
 8009c72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c76:	4619      	mov	r1, r3
 8009c78:	481e      	ldr	r0, [pc, #120]	; (8009cf4 <APP_BLE_Init+0x160>)
 8009c7a:	f002 fa29 	bl	800c0d0 <iprintf>
 8009c7e:	e00c      	b.n	8009c9a <APP_BLE_Init+0x106>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8009c80:	4814      	ldr	r0, [pc, #80]	; (8009cd4 <APP_BLE_Init+0x140>)
 8009c82:	f7ff f99d 	bl	8008fc0 <DbgTraceGetFileName>
 8009c86:	4601      	mov	r1, r0
 8009c88:	f240 135b 	movw	r3, #347	; 0x15b
 8009c8c:	4a12      	ldr	r2, [pc, #72]	; (8009cd8 <APP_BLE_Init+0x144>)
 8009c8e:	4813      	ldr	r0, [pc, #76]	; (8009cdc <APP_BLE_Init+0x148>)
 8009c90:	f002 fa1e 	bl	800c0d0 <iprintf>
 8009c94:	4818      	ldr	r0, [pc, #96]	; (8009cf8 <APP_BLE_Init+0x164>)
 8009c96:	f002 fa1b 	bl	800c0d0 <iprintf>
  }
  APP_DBG_MSG("\n");
 8009c9a:	480e      	ldr	r0, [pc, #56]	; (8009cd4 <APP_BLE_Init+0x140>)
 8009c9c:	f7ff f990 	bl	8008fc0 <DbgTraceGetFileName>
 8009ca0:	4601      	mov	r1, r0
 8009ca2:	f240 135d 	movw	r3, #349	; 0x15d
 8009ca6:	4a0c      	ldr	r2, [pc, #48]	; (8009cd8 <APP_BLE_Init+0x144>)
 8009ca8:	480c      	ldr	r0, [pc, #48]	; (8009cdc <APP_BLE_Init+0x148>)
 8009caa:	f002 fa11 	bl	800c0d0 <iprintf>
 8009cae:	200a      	movs	r0, #10
 8009cb0:	f002 fa20 	bl	800c0f4 <putchar>
#endif
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 8009cb4:	f000 feda 	bl	800aa6c <P2PC_APP_Init>
  /* USER CODE BEGIN APP_BLE_Init_3 */

  /* USER CODE END APP_BLE_Init_3 */

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8009cb8:	4b10      	ldr	r3, [pc, #64]	; (8009cfc <APP_BLE_Init+0x168>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	4910      	ldr	r1, [pc, #64]	; (8009d00 <APP_BLE_Init+0x16c>)
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	f7f7 fdfa 	bl	80018b8 <HW_TS_Create>
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */
  return;
 8009cc4:	bf00      	nop
}
 8009cc6:	3740      	adds	r7, #64	; 0x40
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bdb0      	pop	{r4, r5, r7, pc}
 8009ccc:	0800d428 	.word	0x0800d428
 8009cd0:	080085c1 	.word	0x080085c1
 8009cd4:	0800d31c 	.word	0x0800d31c
 8009cd8:	0800e180 	.word	0x0800e180
 8009cdc:	0800d338 	.word	0x0800d338
 8009ce0:	0800d34c 	.word	0x0800d34c
 8009ce4:	0800d384 	.word	0x0800d384
 8009ce8:	0800a7f1 	.word	0x0800a7f1
 8009cec:	0800a87d 	.word	0x0800a87d
 8009cf0:	20001668 	.word	0x20001668
 8009cf4:	0800d3ac 	.word	0x0800d3ac
 8009cf8:	0800d3f0 	.word	0x0800d3f0
 8009cfc:	0800a921 	.word	0x0800a921
 8009d00:	200016e9 	.word	0x200016e9

08009d04 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 8009d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d06:	b097      	sub	sp, #92	; 0x5c
 8009d08:	af06      	add	r7, sp, #24
 8009d0a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blecore_aci *blecore_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 8009d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d14:	3302      	adds	r3, #2
 8009d16:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
#if (OOB_DEMO != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009d1c:	2392      	movs	r3, #146	; 0x92
 8009d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif

  switch (event_pckt->evt)
 8009d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	2bff      	cmp	r3, #255	; 0xff
 8009d28:	d009      	beq.n	8009d3e <SVCCTL_App_Notification+0x3a>
 8009d2a:	2bff      	cmp	r3, #255	; 0xff
 8009d2c:	f300 8289 	bgt.w	800a242 <SVCCTL_App_Notification+0x53e>
 8009d30:	2b05      	cmp	r3, #5
 8009d32:	f000 8106 	beq.w	8009f42 <SVCCTL_App_Notification+0x23e>
 8009d36:	2b3e      	cmp	r3, #62	; 0x3e
 8009d38:	f000 812b 	beq.w	8009f92 <SVCCTL_App_Notification+0x28e>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 8009d3c:	e281      	b.n	800a242 <SVCCTL_App_Notification+0x53e>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8009d3e:	4b9a      	ldr	r3, [pc, #616]	; (8009fa8 <SVCCTL_App_Notification+0x2a4>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	701a      	strb	r2, [r3, #0]
        blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	3302      	adds	r3, #2
 8009d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        switch (blecore_evt->ecode)
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	f640 0202 	movw	r2, #2050	; 0x802
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d039      	beq.n	8009dcc <SVCCTL_App_Notification+0xc8>
 8009d58:	f640 0202 	movw	r2, #2050	; 0x802
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	f300 80ea 	bgt.w	8009f36 <SVCCTL_App_Notification+0x232>
 8009d62:	2b04      	cmp	r3, #4
 8009d64:	f000 80e9 	beq.w	8009f3a <SVCCTL_App_Notification+0x236>
 8009d68:	f240 4207 	movw	r2, #1031	; 0x407
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	f040 80e2 	bne.w	8009f36 <SVCCTL_App_Notification+0x232>
              aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blecore_evt->data;
 8009d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d74:	3302      	adds	r3, #2
 8009d76:	627b      	str	r3, [r7, #36]	; 0x24
              if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	f040 80de 	bne.w	8009f3e <SVCCTL_App_Notification+0x23a>
                  && gap_evt_proc_complete->Status == 0x00)
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	785b      	ldrb	r3, [r3, #1]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f040 80d9 	bne.w	8009f3e <SVCCTL_App_Notification+0x23a>
            	  Blue_Off();
 8009d8c:	f7f8 fcf2 	bl	8002774 <Blue_Off>
                APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n\r");
 8009d90:	4886      	ldr	r0, [pc, #536]	; (8009fac <SVCCTL_App_Notification+0x2a8>)
 8009d92:	f7ff f915 	bl	8008fc0 <DbgTraceGetFileName>
 8009d96:	4601      	mov	r1, r0
 8009d98:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009d9c:	4a84      	ldr	r2, [pc, #528]	; (8009fb0 <SVCCTL_App_Notification+0x2ac>)
 8009d9e:	4885      	ldr	r0, [pc, #532]	; (8009fb4 <SVCCTL_App_Notification+0x2b0>)
 8009da0:	f002 f996 	bl	800c0d0 <iprintf>
 8009da4:	4884      	ldr	r0, [pc, #528]	; (8009fb8 <SVCCTL_App_Notification+0x2b4>)
 8009da6:	f002 f993 	bl	800c0d0 <iprintf>
                if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8009daa:	4b84      	ldr	r3, [pc, #528]	; (8009fbc <SVCCTL_App_Notification+0x2b8>)
 8009dac:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	f040 80c4 	bne.w	8009f3e <SVCCTL_App_Notification+0x23a>
 8009db6:	4b81      	ldr	r3, [pc, #516]	; (8009fbc <SVCCTL_App_Notification+0x2b8>)
 8009db8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009dbc:	2b06      	cmp	r3, #6
 8009dbe:	f000 80be 	beq.w	8009f3e <SVCCTL_App_Notification+0x23a>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	2002      	movs	r0, #2
 8009dc6:	f001 ffa1 	bl	800bd0c <UTIL_SEQ_SetTask>
            break;
 8009dca:	e0b8      	b.n	8009f3e <SVCCTL_App_Notification+0x23a>
              aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blecore_evt->data;
 8009dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dce:	3302      	adds	r3, #2
 8009dd0:	62bb      	str	r3, [r7, #40]	; 0x28
              ret = aci_hal_set_radio_activity_mask(0x0000);
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	f7fe f84a 	bl	8007e6c <aci_hal_set_radio_activity_mask>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 8009dde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d010      	beq.n	8009e08 <SVCCTL_App_Notification+0x104>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8009de6:	4871      	ldr	r0, [pc, #452]	; (8009fac <SVCCTL_App_Notification+0x2a8>)
 8009de8:	f7ff f8ea 	bl	8008fc0 <DbgTraceGetFileName>
 8009dec:	4601      	mov	r1, r0
 8009dee:	f44f 73df 	mov.w	r3, #446	; 0x1be
 8009df2:	4a6f      	ldr	r2, [pc, #444]	; (8009fb0 <SVCCTL_App_Notification+0x2ac>)
 8009df4:	486f      	ldr	r0, [pc, #444]	; (8009fb4 <SVCCTL_App_Notification+0x2b0>)
 8009df6:	f002 f96b 	bl	800c0d0 <iprintf>
 8009dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dfe:	4619      	mov	r1, r3
 8009e00:	486f      	ldr	r0, [pc, #444]	; (8009fc0 <SVCCTL_App_Notification+0x2bc>)
 8009e02:	f002 f965 	bl	800c0d0 <iprintf>
 8009e06:	e00c      	b.n	8009e22 <SVCCTL_App_Notification+0x11e>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8009e08:	4868      	ldr	r0, [pc, #416]	; (8009fac <SVCCTL_App_Notification+0x2a8>)
 8009e0a:	f7ff f8d9 	bl	8008fc0 <DbgTraceGetFileName>
 8009e0e:	4601      	mov	r1, r0
 8009e10:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8009e14:	4a66      	ldr	r2, [pc, #408]	; (8009fb0 <SVCCTL_App_Notification+0x2ac>)
 8009e16:	4867      	ldr	r0, [pc, #412]	; (8009fb4 <SVCCTL_App_Notification+0x2b0>)
 8009e18:	f002 f95a 	bl	800c0d0 <iprintf>
 8009e1c:	4869      	ldr	r0, [pc, #420]	; (8009fc4 <SVCCTL_App_Notification+0x2c0>)
 8009e1e:	f002 f957 	bl	800c0d0 <iprintf>
              APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 8009e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e24:	789a      	ldrb	r2, [r3, #2]
 8009e26:	4b68      	ldr	r3, [pc, #416]	; (8009fc8 <SVCCTL_App_Notification+0x2c4>)
 8009e28:	701a      	strb	r2, [r3, #0]
              APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	4b65      	ldr	r3, [pc, #404]	; (8009fc8 <SVCCTL_App_Notification+0x2c4>)
 8009e34:	805a      	strh	r2, [r3, #2]
              APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 8009e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e38:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	4b62      	ldr	r3, [pc, #392]	; (8009fc8 <SVCCTL_App_Notification+0x2c4>)
 8009e40:	809a      	strh	r2, [r3, #4]
              APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 8009e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e44:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	4b5f      	ldr	r3, [pc, #380]	; (8009fc8 <SVCCTL_App_Notification+0x2c4>)
 8009e4c:	80da      	strh	r2, [r3, #6]
              APP_BLE_p2p_Conn_Update_req.Latency = pr->Latency;
 8009e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e50:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	4b5c      	ldr	r3, [pc, #368]	; (8009fc8 <SVCCTL_App_Notification+0x2c4>)
 8009e58:	811a      	strh	r2, [r3, #8]
              APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 8009e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5c:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	4b59      	ldr	r3, [pc, #356]	; (8009fc8 <SVCCTL_App_Notification+0x2c4>)
 8009e64:	815a      	strh	r2, [r3, #10]
              ret = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8009e66:	4b55      	ldr	r3, [pc, #340]	; (8009fbc <SVCCTL_App_Notification+0x2b8>)
 8009e68:	8ad8      	ldrh	r0, [r3, #22]
 8009e6a:	4b57      	ldr	r3, [pc, #348]	; (8009fc8 <SVCCTL_App_Notification+0x2c4>)
 8009e6c:	8899      	ldrh	r1, [r3, #4]
 8009e6e:	4b56      	ldr	r3, [pc, #344]	; (8009fc8 <SVCCTL_App_Notification+0x2c4>)
 8009e70:	88dc      	ldrh	r4, [r3, #6]
 8009e72:	4b55      	ldr	r3, [pc, #340]	; (8009fc8 <SVCCTL_App_Notification+0x2c4>)
 8009e74:	891d      	ldrh	r5, [r3, #8]
 8009e76:	4b54      	ldr	r3, [pc, #336]	; (8009fc8 <SVCCTL_App_Notification+0x2c4>)
 8009e78:	895b      	ldrh	r3, [r3, #10]
 8009e7a:	4a53      	ldr	r2, [pc, #332]	; (8009fc8 <SVCCTL_App_Notification+0x2c4>)
 8009e7c:	7812      	ldrb	r2, [r2, #0]
 8009e7e:	2601      	movs	r6, #1
 8009e80:	9604      	str	r6, [sp, #16]
 8009e82:	9203      	str	r2, [sp, #12]
 8009e84:	2210      	movs	r2, #16
 8009e86:	9202      	str	r2, [sp, #8]
 8009e88:	2210      	movs	r2, #16
 8009e8a:	9201      	str	r2, [sp, #4]
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	462b      	mov	r3, r5
 8009e90:	4622      	mov	r2, r4
 8009e92:	f7fe f863 	bl	8007f5c <aci_l2cap_connection_parameter_update_resp>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if(ret != BLE_STATUS_SUCCESS)
 8009e9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d012      	beq.n	8009eca <SVCCTL_App_Notification+0x1c6>
                APP_DBG_MSG("  Fail   : aci_l2cap_connection_parameter_update_resp command, result: 0x%x \n\r", ret);
 8009ea4:	4841      	ldr	r0, [pc, #260]	; (8009fac <SVCCTL_App_Notification+0x2a8>)
 8009ea6:	f7ff f88b 	bl	8008fc0 <DbgTraceGetFileName>
 8009eaa:	4601      	mov	r1, r0
 8009eac:	f240 13d7 	movw	r3, #471	; 0x1d7
 8009eb0:	4a3f      	ldr	r2, [pc, #252]	; (8009fb0 <SVCCTL_App_Notification+0x2ac>)
 8009eb2:	4840      	ldr	r0, [pc, #256]	; (8009fb4 <SVCCTL_App_Notification+0x2b0>)
 8009eb4:	f002 f90c 	bl	800c0d0 <iprintf>
 8009eb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4843      	ldr	r0, [pc, #268]	; (8009fcc <SVCCTL_App_Notification+0x2c8>)
 8009ec0:	f002 f906 	bl	800c0d0 <iprintf>
                Red_On();
 8009ec4:	f7f8 fc1a 	bl	80026fc <Red_On>
 8009ec8:	e00c      	b.n	8009ee4 <SVCCTL_App_Notification+0x1e0>
                APP_DBG_MSG("  Success: aci_l2cap_connection_parameter_update_resp command\n\r");
 8009eca:	4838      	ldr	r0, [pc, #224]	; (8009fac <SVCCTL_App_Notification+0x2a8>)
 8009ecc:	f7ff f878 	bl	8008fc0 <DbgTraceGetFileName>
 8009ed0:	4601      	mov	r1, r0
 8009ed2:	f240 13df 	movw	r3, #479	; 0x1df
 8009ed6:	4a36      	ldr	r2, [pc, #216]	; (8009fb0 <SVCCTL_App_Notification+0x2ac>)
 8009ed8:	4836      	ldr	r0, [pc, #216]	; (8009fb4 <SVCCTL_App_Notification+0x2b0>)
 8009eda:	f002 f8f9 	bl	800c0d0 <iprintf>
 8009ede:	483c      	ldr	r0, [pc, #240]	; (8009fd0 <SVCCTL_App_Notification+0x2cc>)
 8009ee0:	f002 f8f6 	bl	800c0d0 <iprintf>
              ret = aci_hal_set_radio_activity_mask(0x0020);
 8009ee4:	2020      	movs	r0, #32
 8009ee6:	f7fd ffc1 	bl	8007e6c <aci_hal_set_radio_activity_mask>
 8009eea:	4603      	mov	r3, r0
 8009eec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 8009ef0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d010      	beq.n	8009f1a <SVCCTL_App_Notification+0x216>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8009ef8:	482c      	ldr	r0, [pc, #176]	; (8009fac <SVCCTL_App_Notification+0x2a8>)
 8009efa:	f7ff f861 	bl	8008fc0 <DbgTraceGetFileName>
 8009efe:	4601      	mov	r1, r0
 8009f00:	f240 13e5 	movw	r3, #485	; 0x1e5
 8009f04:	4a2a      	ldr	r2, [pc, #168]	; (8009fb0 <SVCCTL_App_Notification+0x2ac>)
 8009f06:	482b      	ldr	r0, [pc, #172]	; (8009fb4 <SVCCTL_App_Notification+0x2b0>)
 8009f08:	f002 f8e2 	bl	800c0d0 <iprintf>
 8009f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f10:	4619      	mov	r1, r3
 8009f12:	482b      	ldr	r0, [pc, #172]	; (8009fc0 <SVCCTL_App_Notification+0x2bc>)
 8009f14:	f002 f8dc 	bl	800c0d0 <iprintf>
            break;
 8009f18:	e012      	b.n	8009f40 <SVCCTL_App_Notification+0x23c>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8009f1a:	4824      	ldr	r0, [pc, #144]	; (8009fac <SVCCTL_App_Notification+0x2a8>)
 8009f1c:	f7ff f850 	bl	8008fc0 <DbgTraceGetFileName>
 8009f20:	4601      	mov	r1, r0
 8009f22:	f240 13e9 	movw	r3, #489	; 0x1e9
 8009f26:	4a22      	ldr	r2, [pc, #136]	; (8009fb0 <SVCCTL_App_Notification+0x2ac>)
 8009f28:	4822      	ldr	r0, [pc, #136]	; (8009fb4 <SVCCTL_App_Notification+0x2b0>)
 8009f2a:	f002 f8d1 	bl	800c0d0 <iprintf>
 8009f2e:	4825      	ldr	r0, [pc, #148]	; (8009fc4 <SVCCTL_App_Notification+0x2c0>)
 8009f30:	f002 f8ce 	bl	800c0d0 <iprintf>
            break;
 8009f34:	e004      	b.n	8009f40 <SVCCTL_App_Notification+0x23c>
            break;
 8009f36:	bf00      	nop
 8009f38:	e186      	b.n	800a248 <SVCCTL_App_Notification+0x544>
            break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009f3a:	bf00      	nop
 8009f3c:	e184      	b.n	800a248 <SVCCTL_App_Notification+0x544>
            break;
 8009f3e:	bf00      	nop
      break;
 8009f40:	e182      	b.n	800a248 <SVCCTL_App_Notification+0x544>
        if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8009f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f44:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <SVCCTL_App_Notification+0x2b8>)
 8009f4c:	8adb      	ldrh	r3, [r3, #22]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	f040 8179 	bne.w	800a246 <SVCCTL_App_Notification+0x542>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8009f54:	4b19      	ldr	r3, [pc, #100]	; (8009fbc <SVCCTL_App_Notification+0x2b8>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009f5a:	4b18      	ldr	r3, [pc, #96]	; (8009fbc <SVCCTL_App_Notification+0x2b8>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n\r");
 8009f62:	4812      	ldr	r0, [pc, #72]	; (8009fac <SVCCTL_App_Notification+0x2a8>)
 8009f64:	f7ff f82c 	bl	8008fc0 <DbgTraceGetFileName>
 8009f68:	4601      	mov	r1, r0
 8009f6a:	f240 230e 	movw	r3, #526	; 0x20e
 8009f6e:	4a10      	ldr	r2, [pc, #64]	; (8009fb0 <SVCCTL_App_Notification+0x2ac>)
 8009f70:	4810      	ldr	r0, [pc, #64]	; (8009fb4 <SVCCTL_App_Notification+0x2b0>)
 8009f72:	f002 f8ad 	bl	800c0d0 <iprintf>
 8009f76:	4817      	ldr	r0, [pc, #92]	; (8009fd4 <SVCCTL_App_Notification+0x2d0>)
 8009f78:	f002 f8aa 	bl	800c0d0 <iprintf>
          handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8009f7c:	4b0a      	ldr	r3, [pc, #40]	; (8009fa8 <SVCCTL_App_Notification+0x2a4>)
 8009f7e:	2201      	movs	r2, #1
 8009f80:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009f82:	4b0e      	ldr	r3, [pc, #56]	; (8009fbc <SVCCTL_App_Notification+0x2b8>)
 8009f84:	8ada      	ldrh	r2, [r3, #22]
 8009f86:	4b08      	ldr	r3, [pc, #32]	; (8009fa8 <SVCCTL_App_Notification+0x2a4>)
 8009f88:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 8009f8a:	4807      	ldr	r0, [pc, #28]	; (8009fa8 <SVCCTL_App_Notification+0x2a4>)
 8009f8c:	f000 fdc2 	bl	800ab14 <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8009f90:	e159      	b.n	800a246 <SVCCTL_App_Notification+0x542>
        meta_evt = (evt_le_meta_event*) event_pckt->data;
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	3302      	adds	r3, #2
 8009f96:	623b      	str	r3, [r7, #32]
        switch (meta_evt->subevent)
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d01b      	beq.n	8009fd8 <SVCCTL_App_Notification+0x2d4>
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d070      	beq.n	800a086 <SVCCTL_App_Notification+0x382>
            break;
 8009fa4:	e14c      	b.n	800a240 <SVCCTL_App_Notification+0x53c>
 8009fa6:	bf00      	nop
 8009fa8:	20001664 	.word	0x20001664
 8009fac:	0800d31c 	.word	0x0800d31c
 8009fb0:	0800e190 	.word	0x0800e190
 8009fb4:	0800d338 	.word	0x0800d338
 8009fb8:	0800d464 	.word	0x0800d464
 8009fbc:	20001668 	.word	0x20001668
 8009fc0:	0800d3ac 	.word	0x0800d3ac
 8009fc4:	0800d3f0 	.word	0x0800d3f0
 8009fc8:	200016ec 	.word	0x200016ec
 8009fcc:	0800d494 	.word	0x0800d494
 8009fd0:	0800d4e4 	.word	0x0800d4e4
 8009fd4:	0800d524 	.word	0x0800d524
            connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	60fb      	str	r3, [r7, #12]
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	4b9b      	ldr	r3, [pc, #620]	; (800a254 <SVCCTL_App_Notification+0x550>)
 8009fe8:	82da      	strh	r2, [r3, #22]
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8009fea:	4b9a      	ldr	r3, [pc, #616]	; (800a254 <SVCCTL_App_Notification+0x550>)
 8009fec:	2206      	movs	r2, #6
 8009fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            APP_DBG_MSG("\r\n\r**  CONNECTION COMPLETE EVENT WITH SERVER \n\r");
 8009ff2:	4899      	ldr	r0, [pc, #612]	; (800a258 <SVCCTL_App_Notification+0x554>)
 8009ff4:	f7fe ffe4 	bl	8008fc0 <DbgTraceGetFileName>
 8009ff8:	4601      	mov	r1, r0
 8009ffa:	f240 232f 	movw	r3, #559	; 0x22f
 8009ffe:	4a97      	ldr	r2, [pc, #604]	; (800a25c <SVCCTL_App_Notification+0x558>)
 800a000:	4897      	ldr	r0, [pc, #604]	; (800a260 <SVCCTL_App_Notification+0x55c>)
 800a002:	f002 f865 	bl	800c0d0 <iprintf>
 800a006:	4897      	ldr	r0, [pc, #604]	; (800a264 <SVCCTL_App_Notification+0x560>)
 800a008:	f002 f862 	bl	800c0d0 <iprintf>
            handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800a00c:	4b96      	ldr	r3, [pc, #600]	; (800a268 <SVCCTL_App_Notification+0x564>)
 800a00e:	2200      	movs	r2, #0
 800a010:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800a012:	4b90      	ldr	r3, [pc, #576]	; (800a254 <SVCCTL_App_Notification+0x550>)
 800a014:	8ada      	ldrh	r2, [r3, #22]
 800a016:	4b94      	ldr	r3, [pc, #592]	; (800a268 <SVCCTL_App_Notification+0x564>)
 800a018:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 800a01a:	4893      	ldr	r0, [pc, #588]	; (800a268 <SVCCTL_App_Notification+0x564>)
 800a01c:	f000 fd7a 	bl	800ab14 <P2PC_APP_Notification>
            result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800a020:	4b8c      	ldr	r3, [pc, #560]	; (800a254 <SVCCTL_App_Notification+0x550>)
 800a022:	8adb      	ldrh	r3, [r3, #22]
 800a024:	4618      	mov	r0, r3
 800a026:	f7fd fba0 	bl	800776a <aci_gatt_disc_all_primary_services>
 800a02a:	4603      	mov	r3, r0
 800a02c:	72fb      	strb	r3, [r7, #11]
            if (result == BLE_STATUS_SUCCESS)
 800a02e:	7afb      	ldrb	r3, [r7, #11]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d11a      	bne.n	800a06a <SVCCTL_App_Notification+0x366>
              APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n\r");
 800a034:	4888      	ldr	r0, [pc, #544]	; (800a258 <SVCCTL_App_Notification+0x554>)
 800a036:	f7fe ffc3 	bl	8008fc0 <DbgTraceGetFileName>
 800a03a:	4601      	mov	r1, r0
 800a03c:	f240 2337 	movw	r3, #567	; 0x237
 800a040:	4a86      	ldr	r2, [pc, #536]	; (800a25c <SVCCTL_App_Notification+0x558>)
 800a042:	4887      	ldr	r0, [pc, #540]	; (800a260 <SVCCTL_App_Notification+0x55c>)
 800a044:	f002 f844 	bl	800c0d0 <iprintf>
 800a048:	4888      	ldr	r0, [pc, #544]	; (800a26c <SVCCTL_App_Notification+0x568>)
 800a04a:	f002 f841 	bl	800c0d0 <iprintf>
              APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 800a04e:	4882      	ldr	r0, [pc, #520]	; (800a258 <SVCCTL_App_Notification+0x554>)
 800a050:	f7fe ffb6 	bl	8008fc0 <DbgTraceGetFileName>
 800a054:	4601      	mov	r1, r0
 800a056:	f44f 730e 	mov.w	r3, #568	; 0x238
 800a05a:	4a80      	ldr	r2, [pc, #512]	; (800a25c <SVCCTL_App_Notification+0x558>)
 800a05c:	4880      	ldr	r0, [pc, #512]	; (800a260 <SVCCTL_App_Notification+0x55c>)
 800a05e:	f002 f837 	bl	800c0d0 <iprintf>
 800a062:	4883      	ldr	r0, [pc, #524]	; (800a270 <SVCCTL_App_Notification+0x56c>)
 800a064:	f002 f834 	bl	800c0d0 <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800a068:	e0ea      	b.n	800a240 <SVCCTL_App_Notification+0x53c>
              APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 800a06a:	487b      	ldr	r0, [pc, #492]	; (800a258 <SVCCTL_App_Notification+0x554>)
 800a06c:	f7fe ffa8 	bl	8008fc0 <DbgTraceGetFileName>
 800a070:	4601      	mov	r1, r0
 800a072:	f44f 730f 	mov.w	r3, #572	; 0x23c
 800a076:	4a79      	ldr	r2, [pc, #484]	; (800a25c <SVCCTL_App_Notification+0x558>)
 800a078:	4879      	ldr	r0, [pc, #484]	; (800a260 <SVCCTL_App_Notification+0x55c>)
 800a07a:	f002 f829 	bl	800c0d0 <iprintf>
 800a07e:	487d      	ldr	r0, [pc, #500]	; (800a274 <SVCCTL_App_Notification+0x570>)
 800a080:	f002 f826 	bl	800c0d0 <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800a084:	e0dc      	b.n	800a240 <SVCCTL_App_Notification+0x53c>
              le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	3301      	adds	r3, #1
 800a08a:	61fb      	str	r3, [r7, #28]
              event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	785b      	ldrb	r3, [r3, #1]
 800a090:	76fb      	strb	r3, [r7, #27]
              event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	7a5b      	ldrb	r3, [r3, #9]
 800a096:	76bb      	strb	r3, [r7, #26]
              adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	3309      	adds	r3, #9
 800a09c:	3301      	adds	r3, #1
 800a09e:	617b      	str	r3, [r7, #20]
              k = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
              if (event_type == ADV_IND)
 800a0a4:	7efb      	ldrb	r3, [r7, #27]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f040 80c9 	bne.w	800a23e <SVCCTL_App_Notification+0x53a>
                while(k < event_data_size)
 800a0ac:	e0c2      	b.n	800a234 <SVCCTL_App_Notification+0x530>
                  adlength = adv_report_data[k];
 800a0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b0:	697a      	ldr	r2, [r7, #20]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	74fb      	strb	r3, [r7, #19]
                  adtype = adv_report_data[k + 1];
 800a0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	4413      	add	r3, r2
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	74bb      	strb	r3, [r7, #18]
                  switch (adtype)
 800a0c4:	7cbb      	ldrb	r3, [r7, #18]
 800a0c6:	2bff      	cmp	r3, #255	; 0xff
 800a0c8:	d00d      	beq.n	800a0e6 <SVCCTL_App_Notification+0x3e2>
 800a0ca:	2bff      	cmp	r3, #255	; 0xff
 800a0cc:	f300 80a6 	bgt.w	800a21c <SVCCTL_App_Notification+0x518>
 800a0d0:	2b16      	cmp	r3, #22
 800a0d2:	f000 80a5 	beq.w	800a220 <SVCCTL_App_Notification+0x51c>
 800a0d6:	2b16      	cmp	r3, #22
 800a0d8:	f300 80a0 	bgt.w	800a21c <SVCCTL_App_Notification+0x518>
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	f000 80a1 	beq.w	800a224 <SVCCTL_App_Notification+0x520>
 800a0e2:	2b0a      	cmp	r3, #10
                      break;
 800a0e4:	e0a1      	b.n	800a22a <SVCCTL_App_Notification+0x526>
                        if (adlength >= 4 && adv_report_data[k + 2] == 0x01)
 800a0e6:	7cfb      	ldrb	r3, [r7, #19]
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d949      	bls.n	800a180 <SVCCTL_App_Notification+0x47c>
 800a0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ee:	3302      	adds	r3, #2
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d142      	bne.n	800a180 <SVCCTL_App_Notification+0x47c>
                          APP_DBG_MSG("--- ST MANUFACTURER ID --- \n\r");
 800a0fa:	4857      	ldr	r0, [pc, #348]	; (800a258 <SVCCTL_App_Notification+0x554>)
 800a0fc:	f7fe ff60 	bl	8008fc0 <DbgTraceGetFileName>
 800a100:	4601      	mov	r1, r0
 800a102:	f44f 731c 	mov.w	r3, #624	; 0x270
 800a106:	4a55      	ldr	r2, [pc, #340]	; (800a25c <SVCCTL_App_Notification+0x558>)
 800a108:	4855      	ldr	r0, [pc, #340]	; (800a260 <SVCCTL_App_Notification+0x55c>)
 800a10a:	f001 ffe1 	bl	800c0d0 <iprintf>
 800a10e:	485a      	ldr	r0, [pc, #360]	; (800a278 <SVCCTL_App_Notification+0x574>)
 800a110:	f001 ffde 	bl	800c0d0 <iprintf>
                          switch (adv_report_data[k + 3])
 800a114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a116:	3303      	adds	r3, #3
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	4413      	add	r3, r2
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b83      	cmp	r3, #131	; 0x83
 800a120:	d12d      	bne.n	800a17e <SVCCTL_App_Notification+0x47a>
                             APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n\r");
 800a122:	484d      	ldr	r0, [pc, #308]	; (800a258 <SVCCTL_App_Notification+0x554>)
 800a124:	f7fe ff4c 	bl	8008fc0 <DbgTraceGetFileName>
 800a128:	4601      	mov	r1, r0
 800a12a:	f44f 731d 	mov.w	r3, #628	; 0x274
 800a12e:	4a4b      	ldr	r2, [pc, #300]	; (800a25c <SVCCTL_App_Notification+0x558>)
 800a130:	484b      	ldr	r0, [pc, #300]	; (800a260 <SVCCTL_App_Notification+0x55c>)
 800a132:	f001 ffcd 	bl	800c0d0 <iprintf>
 800a136:	4851      	ldr	r0, [pc, #324]	; (800a27c <SVCCTL_App_Notification+0x578>)
 800a138:	f001 ffca 	bl	800c0d0 <iprintf>
                             BleApplicationContext.DeviceServerFound = 0x01;
 800a13c:	4b45      	ldr	r3, [pc, #276]	; (800a254 <SVCCTL_App_Notification+0x550>)
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                             SERVER_REMOTE_ADDR_TYPE = le_advertising_event->Advertising_Report[0].Address_Type;
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	789a      	ldrb	r2, [r3, #2]
 800a148:	4b4d      	ldr	r3, [pc, #308]	; (800a280 <SVCCTL_App_Notification+0x57c>)
 800a14a:	701a      	strb	r2, [r3, #0]
                             SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	78da      	ldrb	r2, [r3, #3]
 800a150:	4b4c      	ldr	r3, [pc, #304]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a152:	701a      	strb	r2, [r3, #0]
                             SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	791a      	ldrb	r2, [r3, #4]
 800a158:	4b4a      	ldr	r3, [pc, #296]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a15a:	705a      	strb	r2, [r3, #1]
                             SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	795a      	ldrb	r2, [r3, #5]
 800a160:	4b48      	ldr	r3, [pc, #288]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a162:	709a      	strb	r2, [r3, #2]
                             SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	799a      	ldrb	r2, [r3, #6]
 800a168:	4b46      	ldr	r3, [pc, #280]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a16a:	70da      	strb	r2, [r3, #3]
                             SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	79da      	ldrb	r2, [r3, #7]
 800a170:	4b44      	ldr	r3, [pc, #272]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a172:	711a      	strb	r2, [r3, #4]
                             SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	7a1a      	ldrb	r2, [r3, #8]
 800a178:	4b42      	ldr	r3, [pc, #264]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a17a:	715a      	strb	r2, [r3, #5]
                             break;
 800a17c:	e000      	b.n	800a180 <SVCCTL_App_Notification+0x47c>
                              break;
 800a17e:	bf00      	nop
                      if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800a180:	7cfb      	ldrb	r3, [r7, #19]
 800a182:	2b06      	cmp	r3, #6
 800a184:	d950      	bls.n	800a228 <SVCCTL_App_Notification+0x524>
 800a186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a188:	3302      	adds	r3, #2
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	4413      	add	r3, r2
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d149      	bne.n	800a228 <SVCCTL_App_Notification+0x524>
                        APP_DBG_MSG("--- ST MANUFACTURER ID --- \n\r");
 800a194:	4830      	ldr	r0, [pc, #192]	; (800a258 <SVCCTL_App_Notification+0x554>)
 800a196:	f7fe ff13 	bl	8008fc0 <DbgTraceGetFileName>
 800a19a:	4601      	mov	r1, r0
 800a19c:	f240 2386 	movw	r3, #646	; 0x286
 800a1a0:	4a2e      	ldr	r2, [pc, #184]	; (800a25c <SVCCTL_App_Notification+0x558>)
 800a1a2:	482f      	ldr	r0, [pc, #188]	; (800a260 <SVCCTL_App_Notification+0x55c>)
 800a1a4:	f001 ff94 	bl	800c0d0 <iprintf>
 800a1a8:	4833      	ldr	r0, [pc, #204]	; (800a278 <SVCCTL_App_Notification+0x574>)
 800a1aa:	f001 ff91 	bl	800c0d0 <iprintf>
                        switch (adv_report_data[k + 3])
 800a1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b0:	3303      	adds	r3, #3
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2b83      	cmp	r3, #131	; 0x83
 800a1ba:	d12d      	bne.n	800a218 <SVCCTL_App_Notification+0x514>
                           APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n\r");
 800a1bc:	4826      	ldr	r0, [pc, #152]	; (800a258 <SVCCTL_App_Notification+0x554>)
 800a1be:	f7fe feff 	bl	8008fc0 <DbgTraceGetFileName>
 800a1c2:	4601      	mov	r1, r0
 800a1c4:	f240 238a 	movw	r3, #650	; 0x28a
 800a1c8:	4a24      	ldr	r2, [pc, #144]	; (800a25c <SVCCTL_App_Notification+0x558>)
 800a1ca:	4825      	ldr	r0, [pc, #148]	; (800a260 <SVCCTL_App_Notification+0x55c>)
 800a1cc:	f001 ff80 	bl	800c0d0 <iprintf>
 800a1d0:	482a      	ldr	r0, [pc, #168]	; (800a27c <SVCCTL_App_Notification+0x578>)
 800a1d2:	f001 ff7d 	bl	800c0d0 <iprintf>
                           BleApplicationContext.DeviceServerFound = 0x01;
 800a1d6:	4b1f      	ldr	r3, [pc, #124]	; (800a254 <SVCCTL_App_Notification+0x550>)
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                           SERVER_REMOTE_ADDR_TYPE = le_advertising_event->Advertising_Report[0].Address_Type;
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	789a      	ldrb	r2, [r3, #2]
 800a1e2:	4b27      	ldr	r3, [pc, #156]	; (800a280 <SVCCTL_App_Notification+0x57c>)
 800a1e4:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	78da      	ldrb	r2, [r3, #3]
 800a1ea:	4b26      	ldr	r3, [pc, #152]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a1ec:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	791a      	ldrb	r2, [r3, #4]
 800a1f2:	4b24      	ldr	r3, [pc, #144]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a1f4:	705a      	strb	r2, [r3, #1]
                           SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	795a      	ldrb	r2, [r3, #5]
 800a1fa:	4b22      	ldr	r3, [pc, #136]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a1fc:	709a      	strb	r2, [r3, #2]
                           SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	799a      	ldrb	r2, [r3, #6]
 800a202:	4b20      	ldr	r3, [pc, #128]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a204:	70da      	strb	r2, [r3, #3]
                           SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	79da      	ldrb	r2, [r3, #7]
 800a20a:	4b1e      	ldr	r3, [pc, #120]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a20c:	711a      	strb	r2, [r3, #4]
                           SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	7a1a      	ldrb	r2, [r3, #8]
 800a212:	4b1c      	ldr	r3, [pc, #112]	; (800a284 <SVCCTL_App_Notification+0x580>)
 800a214:	715a      	strb	r2, [r3, #5]
                           break;
 800a216:	e000      	b.n	800a21a <SVCCTL_App_Notification+0x516>
                            break;
 800a218:	bf00      	nop
                      break;
 800a21a:	e005      	b.n	800a228 <SVCCTL_App_Notification+0x524>
                      break;
 800a21c:	bf00      	nop
 800a21e:	e004      	b.n	800a22a <SVCCTL_App_Notification+0x526>
                      break;
 800a220:	bf00      	nop
 800a222:	e002      	b.n	800a22a <SVCCTL_App_Notification+0x526>
                      break;
 800a224:	bf00      	nop
 800a226:	e000      	b.n	800a22a <SVCCTL_App_Notification+0x526>
                      break;
 800a228:	bf00      	nop
                  k += adlength + 1;
 800a22a:	7cfb      	ldrb	r3, [r7, #19]
 800a22c:	3301      	adds	r3, #1
 800a22e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a230:	4413      	add	r3, r2
 800a232:	63fb      	str	r3, [r7, #60]	; 0x3c
                while(k < event_data_size)
 800a234:	7ebb      	ldrb	r3, [r7, #26]
 800a236:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a238:	429a      	cmp	r2, r3
 800a23a:	f6ff af38 	blt.w	800a0ae <SVCCTL_App_Notification+0x3aa>
            break;
 800a23e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800a240:	e002      	b.n	800a248 <SVCCTL_App_Notification+0x544>
      break;
 800a242:	bf00      	nop
 800a244:	e000      	b.n	800a248 <SVCCTL_App_Notification+0x544>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800a246:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800a248:	2301      	movs	r3, #1
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3744      	adds	r7, #68	; 0x44
 800a24e:	46bd      	mov	sp, r7
 800a250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a252:	bf00      	nop
 800a254:	20001668 	.word	0x20001668
 800a258:	0800d31c 	.word	0x0800d31c
 800a25c:	0800e190 	.word	0x0800e190
 800a260:	0800d338 	.word	0x0800d338
 800a264:	0800d550 	.word	0x0800d550
 800a268:	20001664 	.word	0x20001664
 800a26c:	0800d580 	.word	0x0800d580
 800a270:	0800d5b4 	.word	0x0800d5b4
 800a274:	0800d5e4 	.word	0x0800d5e4
 800a278:	0800d624 	.word	0x0800d624
 800a27c:	0800d644 	.word	0x0800d644
 800a280:	20001662 	.word	0x20001662
 800a284:	2000165c 	.word	0x2000165c

0800a288 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status(uint16_t Connection_Handle)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	4603      	mov	r3, r0
 800a290:	80fb      	strh	r3, [r7, #6]
  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800a292:	4b08      	ldr	r3, [pc, #32]	; (800a2b4 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800a294:	8adb      	ldrh	r3, [r3, #22]
 800a296:	88fa      	ldrh	r2, [r7, #6]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d103      	bne.n	800a2a4 <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 800a29c:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800a29e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2a2:	e000      	b.n	800a2a6 <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	20001668 	.word	0x20001668

0800a2b8 <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
//TODO
void APP_BLE_Key_Button1_Action(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT) //server not connected, start scanning
 800a2bc:	f000 ffd0 	bl	800b260 <P2P_Client_APP_Get_State>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b06      	cmp	r3, #6
 800a2c4:	d004      	beq.n	800a2d0 <APP_BLE_Key_Button1_Action+0x18>
  {
	  //Blue_On();
    UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	2001      	movs	r0, #1
 800a2ca:	f001 fd1f 	bl	800bd0c <UTIL_SEQ_SetTask>
  }
  else
  {
    P2PC_APP_B1_Button_Action();
  }
}
 800a2ce:	e001      	b.n	800a2d4 <APP_BLE_Key_Button1_Action+0x1c>
    P2PC_APP_B1_Button_Action();
 800a2d0:	f000 fc52 	bl	800ab78 <P2PC_APP_B1_Button_Action>
}
 800a2d4:	bf00      	nop
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	af00      	add	r7, sp, #0
	P2PC_APP_B2_Button_Action();
 800a2dc:	f000 fc5a 	bl	800ab94 <P2PC_APP_B2_Button_Action>
}
 800a2e0:	bf00      	nop
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	af00      	add	r7, sp, #0
	P2PC_APP_B3_Button_Action();
 800a2e8:	f000 fc62 	bl	800abb0 <P2PC_APP_B3_Button_Action>
}
 800a2ec:	bf00      	nop
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800a2f6:	4b06      	ldr	r3, [pc, #24]	; (800a310 <Ble_Tl_Init+0x20>)
 800a2f8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800a2fa:	4b06      	ldr	r3, [pc, #24]	; (800a314 <Ble_Tl_Init+0x24>)
 800a2fc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800a2fe:	463b      	mov	r3, r7
 800a300:	4619      	mov	r1, r3
 800a302:	4805      	ldr	r0, [pc, #20]	; (800a318 <Ble_Tl_Init+0x28>)
 800a304:	f7fe f940 	bl	8008588 <hci_init>

  return;
 800a308:	bf00      	nop
}
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	200300d8 	.word	0x200300d8
 800a314:	0800aa35 	.word	0x0800aa35
 800a318:	0800a9fd 	.word	0x0800a9fd

0800a31c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800a31c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a31e:	b08d      	sub	sp, #52	; 0x34
 800a320:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;

  uint16_t a_appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800a322:	2300      	movs	r3, #0
 800a324:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a326:	2392      	movs	r3, #146	; 0x92
 800a328:	75fb      	strb	r3, [r7, #23]

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800a32a:	48a3      	ldr	r0, [pc, #652]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a32c:	f7fe fe48 	bl	8008fc0 <DbgTraceGetFileName>
 800a330:	4601      	mov	r1, r0
 800a332:	f240 3302 	movw	r3, #770	; 0x302
 800a336:	4aa1      	ldr	r2, [pc, #644]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a338:	48a1      	ldr	r0, [pc, #644]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a33a:	f001 fec9 	bl	800c0d0 <iprintf>
 800a33e:	48a1      	ldr	r0, [pc, #644]	; (800a5c4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800a340:	f001 ff34 	bl	800c1ac <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800a344:	f7fd fde6 	bl	8007f14 <hci_reset>
 800a348:	4603      	mov	r3, r0
 800a34a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a34c:	7dfb      	ldrb	r3, [r7, #23]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00f      	beq.n	800a372 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800a352:	4899      	ldr	r0, [pc, #612]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a354:	f7fe fe34 	bl	8008fc0 <DbgTraceGetFileName>
 800a358:	4601      	mov	r1, r0
 800a35a:	f240 330b 	movw	r3, #779	; 0x30b
 800a35e:	4a97      	ldr	r2, [pc, #604]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a360:	4897      	ldr	r0, [pc, #604]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a362:	f001 feb5 	bl	800c0d0 <iprintf>
 800a366:	7dfb      	ldrb	r3, [r7, #23]
 800a368:	4619      	mov	r1, r3
 800a36a:	4897      	ldr	r0, [pc, #604]	; (800a5c8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800a36c:	f001 feb0 	bl	800c0d0 <iprintf>
 800a370:	e00c      	b.n	800a38c <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800a372:	4891      	ldr	r0, [pc, #580]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a374:	f7fe fe24 	bl	8008fc0 <DbgTraceGetFileName>
 800a378:	4601      	mov	r1, r0
 800a37a:	f240 330f 	movw	r3, #783	; 0x30f
 800a37e:	4a8f      	ldr	r2, [pc, #572]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a380:	488f      	ldr	r0, [pc, #572]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a382:	f001 fea5 	bl	800c0d0 <iprintf>
 800a386:	4891      	ldr	r0, [pc, #580]	; (800a5cc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800a388:	f001 ff10 	bl	800c1ac <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800a38c:	f000 fad0 	bl	800a930 <BleGetBdAddress>
 800a390:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	2106      	movs	r1, #6
 800a396:	2000      	movs	r0, #0
 800a398:	f7fd fc7c 	bl	8007c94 <aci_hal_write_config_data>
 800a39c:	4603      	mov	r3, r0
 800a39e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a3a0:	7dfb      	ldrb	r3, [r7, #23]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00f      	beq.n	800a3c6 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800a3a6:	4884      	ldr	r0, [pc, #528]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a3a8:	f7fe fe0a 	bl	8008fc0 <DbgTraceGetFileName>
 800a3ac:	4601      	mov	r1, r0
 800a3ae:	f240 3319 	movw	r3, #793	; 0x319
 800a3b2:	4a82      	ldr	r2, [pc, #520]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a3b4:	4882      	ldr	r0, [pc, #520]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a3b6:	f001 fe8b 	bl	800c0d0 <iprintf>
 800a3ba:	7dfb      	ldrb	r3, [r7, #23]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4884      	ldr	r0, [pc, #528]	; (800a5d0 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800a3c0:	f001 fe86 	bl	800c0d0 <iprintf>
 800a3c4:	e035      	b.n	800a432 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
   else
   {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800a3c6:	487c      	ldr	r0, [pc, #496]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a3c8:	f7fe fdfa 	bl	8008fc0 <DbgTraceGetFileName>
 800a3cc:	4601      	mov	r1, r0
 800a3ce:	f240 331d 	movw	r3, #797	; 0x31d
 800a3d2:	4a7a      	ldr	r2, [pc, #488]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a3d4:	487a      	ldr	r0, [pc, #488]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a3d6:	f001 fe7b 	bl	800c0d0 <iprintf>
 800a3da:	487e      	ldr	r0, [pc, #504]	; (800a5d4 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800a3dc:	f001 fee6 	bl	800c1ac <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800a3e0:	4875      	ldr	r0, [pc, #468]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a3e2:	f7fe fded 	bl	8008fc0 <DbgTraceGetFileName>
 800a3e6:	4601      	mov	r1, r0
 800a3e8:	f240 331e 	movw	r3, #798	; 0x31e
 800a3ec:	4a73      	ldr	r2, [pc, #460]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a3ee:	4874      	ldr	r0, [pc, #464]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a3f0:	f001 fe6e 	bl	800c0d0 <iprintf>
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	3305      	adds	r3, #5
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	3304      	adds	r3, #4
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	461c      	mov	r4, r3
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	3303      	adds	r3, #3
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	461d      	mov	r5, r3
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	3302      	adds	r3, #2
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	461a      	mov	r2, r3
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	3301      	adds	r3, #1
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	4619      	mov	r1, r3
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	9302      	str	r3, [sp, #8]
 800a422:	9101      	str	r1, [sp, #4]
 800a424:	9200      	str	r2, [sp, #0]
 800a426:	462b      	mov	r3, r5
 800a428:	4622      	mov	r2, r4
 800a42a:	4601      	mov	r1, r0
 800a42c:	486a      	ldr	r0, [pc, #424]	; (800a5d8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800a42e:	f001 fe4f 	bl	800c0d0 <iprintf>
   }

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800a432:	4a6a      	ldr	r2, [pc, #424]	; (800a5dc <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800a434:	2110      	movs	r1, #16
 800a436:	2018      	movs	r0, #24
 800a438:	f7fd fc2c 	bl	8007c94 <aci_hal_write_config_data>
 800a43c:	4603      	mov	r3, r0
 800a43e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00f      	beq.n	800a466 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800a446:	485c      	ldr	r0, [pc, #368]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a448:	f7fe fdba 	bl	8008fc0 <DbgTraceGetFileName>
 800a44c:	4601      	mov	r1, r0
 800a44e:	f240 3327 	movw	r3, #807	; 0x327
 800a452:	4a5a      	ldr	r2, [pc, #360]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a454:	485a      	ldr	r0, [pc, #360]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a456:	f001 fe3b 	bl	800c0d0 <iprintf>
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	4619      	mov	r1, r3
 800a45e:	4860      	ldr	r0, [pc, #384]	; (800a5e0 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800a460:	f001 fe36 	bl	800c0d0 <iprintf>
 800a464:	e00c      	b.n	800a480 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800a466:	4854      	ldr	r0, [pc, #336]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a468:	f7fe fdaa 	bl	8008fc0 <DbgTraceGetFileName>
 800a46c:	4601      	mov	r1, r0
 800a46e:	f240 332b 	movw	r3, #811	; 0x32b
 800a472:	4a52      	ldr	r2, [pc, #328]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a474:	4852      	ldr	r0, [pc, #328]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a476:	f001 fe2b 	bl	800c0d0 <iprintf>
 800a47a:	485a      	ldr	r0, [pc, #360]	; (800a5e4 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800a47c:	f001 fe96 	bl	800c1ac <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800a480:	4a59      	ldr	r2, [pc, #356]	; (800a5e8 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800a482:	2110      	movs	r1, #16
 800a484:	2008      	movs	r0, #8
 800a486:	f7fd fc05 	bl	8007c94 <aci_hal_write_config_data>
 800a48a:	4603      	mov	r3, r0
 800a48c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a48e:	7dfb      	ldrb	r3, [r7, #23]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00f      	beq.n	800a4b4 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800a494:	4848      	ldr	r0, [pc, #288]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a496:	f7fe fd93 	bl	8008fc0 <DbgTraceGetFileName>
 800a49a:	4601      	mov	r1, r0
 800a49c:	f44f 734d 	mov.w	r3, #820	; 0x334
 800a4a0:	4a46      	ldr	r2, [pc, #280]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a4a2:	4847      	ldr	r0, [pc, #284]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a4a4:	f001 fe14 	bl	800c0d0 <iprintf>
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	484f      	ldr	r0, [pc, #316]	; (800a5ec <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800a4ae:	f001 fe0f 	bl	800c0d0 <iprintf>
 800a4b2:	e00c      	b.n	800a4ce <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800a4b4:	4840      	ldr	r0, [pc, #256]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a4b6:	f7fe fd83 	bl	8008fc0 <DbgTraceGetFileName>
 800a4ba:	4601      	mov	r1, r0
 800a4bc:	f44f 734e 	mov.w	r3, #824	; 0x338
 800a4c0:	4a3e      	ldr	r2, [pc, #248]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a4c2:	483f      	ldr	r0, [pc, #252]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a4c4:	f001 fe04 	bl	800c0d0 <iprintf>
 800a4c8:	4849      	ldr	r0, [pc, #292]	; (800a5f0 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800a4ca:	f001 fe6f 	bl	800c1ac <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800a4ce:	2118      	movs	r1, #24
 800a4d0:	2001      	movs	r0, #1
 800a4d2:	f7fd fc64 	bl	8007d9e <aci_hal_set_tx_power_level>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00f      	beq.n	800a500 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800a4e0:	4835      	ldr	r0, [pc, #212]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a4e2:	f7fe fd6d 	bl	8008fc0 <DbgTraceGetFileName>
 800a4e6:	4601      	mov	r1, r0
 800a4e8:	f240 3341 	movw	r3, #833	; 0x341
 800a4ec:	4a33      	ldr	r2, [pc, #204]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a4ee:	4834      	ldr	r0, [pc, #208]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a4f0:	f001 fdee 	bl	800c0d0 <iprintf>
 800a4f4:	7dfb      	ldrb	r3, [r7, #23]
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	483e      	ldr	r0, [pc, #248]	; (800a5f4 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800a4fa:	f001 fde9 	bl	800c0d0 <iprintf>
 800a4fe:	e00c      	b.n	800a51a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800a500:	482d      	ldr	r0, [pc, #180]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a502:	f7fe fd5d 	bl	8008fc0 <DbgTraceGetFileName>
 800a506:	4601      	mov	r1, r0
 800a508:	f240 3345 	movw	r3, #837	; 0x345
 800a50c:	4a2b      	ldr	r2, [pc, #172]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a50e:	482c      	ldr	r0, [pc, #176]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a510:	f001 fdde 	bl	800c0d0 <iprintf>
 800a514:	4838      	ldr	r0, [pc, #224]	; (800a5f8 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800a516:	f001 fe49 	bl	800c1ac <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800a51a:	f7fd f858 	bl	80075ce <aci_gatt_init>
 800a51e:	4603      	mov	r3, r0
 800a520:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00f      	beq.n	800a548 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800a528:	4823      	ldr	r0, [pc, #140]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a52a:	f7fe fd49 	bl	8008fc0 <DbgTraceGetFileName>
 800a52e:	4601      	mov	r1, r0
 800a530:	f240 334e 	movw	r3, #846	; 0x34e
 800a534:	4a21      	ldr	r2, [pc, #132]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a536:	4822      	ldr	r0, [pc, #136]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a538:	f001 fdca 	bl	800c0d0 <iprintf>
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	4619      	mov	r1, r3
 800a540:	482e      	ldr	r0, [pc, #184]	; (800a5fc <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800a542:	f001 fdc5 	bl	800c0d0 <iprintf>
 800a546:	e00c      	b.n	800a562 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800a548:	481b      	ldr	r0, [pc, #108]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a54a:	f7fe fd39 	bl	8008fc0 <DbgTraceGetFileName>
 800a54e:	4601      	mov	r1, r0
 800a550:	f240 3352 	movw	r3, #850	; 0x352
 800a554:	4a19      	ldr	r2, [pc, #100]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a556:	481a      	ldr	r0, [pc, #104]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a558:	f001 fdba 	bl	800c0d0 <iprintf>
 800a55c:	4828      	ldr	r0, [pc, #160]	; (800a600 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800a55e:	f001 fe25 	bl	800c1ac <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	73fb      	strb	r3, [r7, #15]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif /* BLE_CFG_PERIPHERAL == 1 */

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800a566:	7bfb      	ldrb	r3, [r7, #15]
 800a568:	f043 0304 	orr.w	r3, r3, #4
 800a56c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d069      	beq.n	800a648 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = "BASE";
 800a574:	4b23      	ldr	r3, [pc, #140]	; (800a604 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800a576:	60bb      	str	r3, [r7, #8]

    ret = aci_gap_init(role,
 800a578:	1dba      	adds	r2, r7, #6
 800a57a:	7bf8      	ldrb	r0, [r7, #15]
 800a57c:	1cbb      	adds	r3, r7, #2
 800a57e:	9301      	str	r3, [sp, #4]
 800a580:	1d3b      	adds	r3, r7, #4
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	4613      	mov	r3, r2
 800a586:	2207      	movs	r2, #7
 800a588:	2100      	movs	r1, #0
 800a58a:	f7fc fde0 	bl	800714e <aci_gap_init>
 800a58e:	4603      	mov	r3, r0
 800a590:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800a592:	7dfb      	ldrb	r3, [r7, #23]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d039      	beq.n	800a60c <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800a598:	4807      	ldr	r0, [pc, #28]	; (800a5b8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a59a:	f7fe fd11 	bl	8008fc0 <DbgTraceGetFileName>
 800a59e:	4601      	mov	r1, r0
 800a5a0:	f240 3373 	movw	r3, #883	; 0x373
 800a5a4:	4a05      	ldr	r2, [pc, #20]	; (800a5bc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a5a6:	4806      	ldr	r0, [pc, #24]	; (800a5c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a5a8:	f001 fd92 	bl	800c0d0 <iprintf>
 800a5ac:	7dfb      	ldrb	r3, [r7, #23]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	4815      	ldr	r0, [pc, #84]	; (800a608 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800a5b2:	f001 fd8d 	bl	800c0d0 <iprintf>
 800a5b6:	e036      	b.n	800a626 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800a5b8:	0800d31c 	.word	0x0800d31c
 800a5bc:	0800e1a8 	.word	0x0800e1a8
 800a5c0:	0800d338 	.word	0x0800d338
 800a5c4:	0800d668 	.word	0x0800d668
 800a5c8:	0800d694 	.word	0x0800d694
 800a5cc:	0800d6c4 	.word	0x0800d6c4
 800a5d0:	0800d6e4 	.word	0x0800d6e4
 800a5d4:	0800d740 	.word	0x0800d740
 800a5d8:	0800d78c 	.word	0x0800d78c
 800a5dc:	0800e160 	.word	0x0800e160
 800a5e0:	0800d7c8 	.word	0x0800d7c8
 800a5e4:	0800d820 	.word	0x0800d820
 800a5e8:	0800e170 	.word	0x0800e170
 800a5ec:	0800d868 	.word	0x0800d868
 800a5f0:	0800d8c0 	.word	0x0800d8c0
 800a5f4:	0800d908 	.word	0x0800d908
 800a5f8:	0800d948 	.word	0x0800d948
 800a5fc:	0800d978 	.word	0x0800d978
 800a600:	0800d9ac 	.word	0x0800d9ac
 800a604:	0800d9d0 	.word	0x0800d9d0
 800a608:	0800d9d8 	.word	0x0800d9d8
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800a60c:	486b      	ldr	r0, [pc, #428]	; (800a7bc <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800a60e:	f7fe fcd7 	bl	8008fc0 <DbgTraceGetFileName>
 800a612:	4601      	mov	r1, r0
 800a614:	f240 3377 	movw	r3, #887	; 0x377
 800a618:	4a69      	ldr	r2, [pc, #420]	; (800a7c0 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800a61a:	486a      	ldr	r0, [pc, #424]	; (800a7c4 <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800a61c:	f001 fd58 	bl	800c0d0 <iprintf>
 800a620:	4869      	ldr	r0, [pc, #420]	; (800a7c8 <Ble_Hci_Gap_Gatt_Init+0x4ac>)
 800a622:	f001 fdc3 	bl	800c1ac <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800a626:	88fc      	ldrh	r4, [r7, #6]
 800a628:	88bd      	ldrh	r5, [r7, #4]
 800a62a:	68b8      	ldr	r0, [r7, #8]
 800a62c:	f7f5 fda8 	bl	8000180 <strlen>
 800a630:	4603      	mov	r3, r0
 800a632:	b2da      	uxtb	r2, r3
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	4613      	mov	r3, r2
 800a63a:	2200      	movs	r2, #0
 800a63c:	4629      	mov	r1, r5
 800a63e:	4620      	mov	r0, r4
 800a640:	f7fc ffea 	bl	8007618 <aci_gatt_update_char_value>
 800a644:	4603      	mov	r3, r0
 800a646:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800a648:	88f8      	ldrh	r0, [r7, #6]
 800a64a:	8879      	ldrh	r1, [r7, #2]
 800a64c:	463b      	mov	r3, r7
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	2302      	movs	r3, #2
 800a652:	2200      	movs	r2, #0
 800a654:	f7fc ffe0 	bl	8007618 <aci_gatt_update_char_value>
 800a658:	4603      	mov	r3, r0
 800a65a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800a65c:	4b5b      	ldr	r3, [pc, #364]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a65e:	2201      	movs	r2, #1
 800a660:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800a662:	4b5a      	ldr	r3, [pc, #360]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	4618      	mov	r0, r3
 800a668:	f7fc fc59 	bl	8006f1e <aci_gap_set_io_capability>
 800a66c:	4603      	mov	r3, r0
 800a66e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a670:	7dfb      	ldrb	r3, [r7, #23]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00f      	beq.n	800a696 <Ble_Hci_Gap_Gatt_Init+0x37a>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800a676:	4851      	ldr	r0, [pc, #324]	; (800a7bc <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800a678:	f7fe fca2 	bl	8008fc0 <DbgTraceGetFileName>
 800a67c:	4601      	mov	r1, r0
 800a67e:	f240 339a 	movw	r3, #922	; 0x39a
 800a682:	4a4f      	ldr	r2, [pc, #316]	; (800a7c0 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800a684:	484f      	ldr	r0, [pc, #316]	; (800a7c4 <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800a686:	f001 fd23 	bl	800c0d0 <iprintf>
 800a68a:	7dfb      	ldrb	r3, [r7, #23]
 800a68c:	4619      	mov	r1, r3
 800a68e:	4850      	ldr	r0, [pc, #320]	; (800a7d0 <Ble_Hci_Gap_Gatt_Init+0x4b4>)
 800a690:	f001 fd1e 	bl	800c0d0 <iprintf>
 800a694:	e00c      	b.n	800a6b0 <Ble_Hci_Gap_Gatt_Init+0x394>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800a696:	4849      	ldr	r0, [pc, #292]	; (800a7bc <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800a698:	f7fe fc92 	bl	8008fc0 <DbgTraceGetFileName>
 800a69c:	4601      	mov	r1, r0
 800a69e:	f240 339e 	movw	r3, #926	; 0x39e
 800a6a2:	4a47      	ldr	r2, [pc, #284]	; (800a7c0 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800a6a4:	4847      	ldr	r0, [pc, #284]	; (800a7c4 <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800a6a6:	f001 fd13 	bl	800c0d0 <iprintf>
 800a6aa:	484a      	ldr	r0, [pc, #296]	; (800a7d4 <Ble_Hci_Gap_Gatt_Init+0x4b8>)
 800a6ac:	f001 fd7e 	bl	800c1ac <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800a6b0:	4b46      	ldr	r3, [pc, #280]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800a6b6:	4b45      	ldr	r3, [pc, #276]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6b8:	2208      	movs	r2, #8
 800a6ba:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800a6bc:	4b43      	ldr	r3, [pc, #268]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6be:	2210      	movs	r2, #16
 800a6c0:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800a6c2:	4b42      	ldr	r3, [pc, #264]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800a6c8:	4b40      	ldr	r3, [pc, #256]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6ca:	4a43      	ldr	r2, [pc, #268]	; (800a7d8 <Ble_Hci_Gap_Gatt_Init+0x4bc>)
 800a6cc:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800a6ce:	4b3f      	ldr	r3, [pc, #252]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800a6d4:	4b3d      	ldr	r3, [pc, #244]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6d6:	789c      	ldrb	r4, [r3, #2]
 800a6d8:	4b3c      	ldr	r3, [pc, #240]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6da:	785d      	ldrb	r5, [r3, #1]
 800a6dc:	4b3b      	ldr	r3, [pc, #236]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6de:	791b      	ldrb	r3, [r3, #4]
 800a6e0:	4a3a      	ldr	r2, [pc, #232]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6e2:	7952      	ldrb	r2, [r2, #5]
 800a6e4:	4939      	ldr	r1, [pc, #228]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6e6:	78c9      	ldrb	r1, [r1, #3]
 800a6e8:	4838      	ldr	r0, [pc, #224]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a6ea:	6880      	ldr	r0, [r0, #8]
 800a6ec:	2600      	movs	r6, #0
 800a6ee:	9604      	str	r6, [sp, #16]
 800a6f0:	9003      	str	r0, [sp, #12]
 800a6f2:	9102      	str	r1, [sp, #8]
 800a6f4:	9201      	str	r2, [sp, #4]
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4620      	mov	r0, r4
 800a700:	f7fc fc61 	bl	8006fc6 <aci_gap_set_authentication_requirement>
 800a704:	4603      	mov	r3, r0
 800a706:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800a708:	7dfb      	ldrb	r3, [r7, #23]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00f      	beq.n	800a72e <Ble_Hci_Gap_Gatt_Init+0x412>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800a70e:	482b      	ldr	r0, [pc, #172]	; (800a7bc <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800a710:	f7fe fc56 	bl	8008fc0 <DbgTraceGetFileName>
 800a714:	4601      	mov	r1, r0
 800a716:	f240 33b6 	movw	r3, #950	; 0x3b6
 800a71a:	4a29      	ldr	r2, [pc, #164]	; (800a7c0 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800a71c:	4829      	ldr	r0, [pc, #164]	; (800a7c4 <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800a71e:	f001 fcd7 	bl	800c0d0 <iprintf>
 800a722:	7dfb      	ldrb	r3, [r7, #23]
 800a724:	4619      	mov	r1, r3
 800a726:	482d      	ldr	r0, [pc, #180]	; (800a7dc <Ble_Hci_Gap_Gatt_Init+0x4c0>)
 800a728:	f001 fcd2 	bl	800c0d0 <iprintf>
 800a72c:	e00c      	b.n	800a748 <Ble_Hci_Gap_Gatt_Init+0x42c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800a72e:	4823      	ldr	r0, [pc, #140]	; (800a7bc <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800a730:	f7fe fc46 	bl	8008fc0 <DbgTraceGetFileName>
 800a734:	4601      	mov	r1, r0
 800a736:	f240 33ba 	movw	r3, #954	; 0x3ba
 800a73a:	4a21      	ldr	r2, [pc, #132]	; (800a7c0 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800a73c:	4821      	ldr	r0, [pc, #132]	; (800a7c4 <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800a73e:	f001 fcc7 	bl	800c0d0 <iprintf>
 800a742:	4827      	ldr	r0, [pc, #156]	; (800a7e0 <Ble_Hci_Gap_Gatt_Init+0x4c4>)
 800a744:	f001 fd32 	bl	800c1ac <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800a748:	4b20      	ldr	r3, [pc, #128]	; (800a7cc <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800a74a:	789b      	ldrb	r3, [r3, #2]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d023      	beq.n	800a798 <Ble_Hci_Gap_Gatt_Init+0x47c>
  {
    ret = aci_gap_configure_whitelist();
 800a750:	f7fc fdaa 	bl	80072a8 <aci_gap_configure_filter_accept_list>
 800a754:	4603      	mov	r3, r0
 800a756:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00f      	beq.n	800a77e <Ble_Hci_Gap_Gatt_Init+0x462>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800a75e:	4817      	ldr	r0, [pc, #92]	; (800a7bc <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800a760:	f7fe fc2e 	bl	8008fc0 <DbgTraceGetFileName>
 800a764:	4601      	mov	r1, r0
 800a766:	f240 33c5 	movw	r3, #965	; 0x3c5
 800a76a:	4a15      	ldr	r2, [pc, #84]	; (800a7c0 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800a76c:	4815      	ldr	r0, [pc, #84]	; (800a7c4 <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800a76e:	f001 fcaf 	bl	800c0d0 <iprintf>
 800a772:	7dfb      	ldrb	r3, [r7, #23]
 800a774:	4619      	mov	r1, r3
 800a776:	481b      	ldr	r0, [pc, #108]	; (800a7e4 <Ble_Hci_Gap_Gatt_Init+0x4c8>)
 800a778:	f001 fcaa 	bl	800c0d0 <iprintf>
 800a77c:	e00c      	b.n	800a798 <Ble_Hci_Gap_Gatt_Init+0x47c>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800a77e:	480f      	ldr	r0, [pc, #60]	; (800a7bc <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800a780:	f7fe fc1e 	bl	8008fc0 <DbgTraceGetFileName>
 800a784:	4601      	mov	r1, r0
 800a786:	f240 33c9 	movw	r3, #969	; 0x3c9
 800a78a:	4a0d      	ldr	r2, [pc, #52]	; (800a7c0 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800a78c:	480d      	ldr	r0, [pc, #52]	; (800a7c4 <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800a78e:	f001 fc9f 	bl	800c0d0 <iprintf>
 800a792:	4815      	ldr	r0, [pc, #84]	; (800a7e8 <Ble_Hci_Gap_Gatt_Init+0x4cc>)
 800a794:	f001 fd0a 	bl	800c1ac <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800a798:	4808      	ldr	r0, [pc, #32]	; (800a7bc <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800a79a:	f7fe fc11 	bl	8008fc0 <DbgTraceGetFileName>
 800a79e:	4601      	mov	r1, r0
 800a7a0:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 800a7a4:	4a06      	ldr	r2, [pc, #24]	; (800a7c0 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800a7a6:	4807      	ldr	r0, [pc, #28]	; (800a7c4 <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800a7a8:	f001 fc92 	bl	800c0d0 <iprintf>
 800a7ac:	480f      	ldr	r0, [pc, #60]	; (800a7ec <Ble_Hci_Gap_Gatt_Init+0x4d0>)
 800a7ae:	f001 fc8f 	bl	800c0d0 <iprintf>
}
 800a7b2:	bf00      	nop
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	0800d31c 	.word	0x0800d31c
 800a7c0:	0800e1a8 	.word	0x0800e1a8
 800a7c4:	0800d338 	.word	0x0800d338
 800a7c8:	0800da08 	.word	0x0800da08
 800a7cc:	20001668 	.word	0x20001668
 800a7d0:	0800da28 	.word	0x0800da28
 800a7d4:	0800da68 	.word	0x0800da68
 800a7d8:	0001b207 	.word	0x0001b207
 800a7dc:	0800da98 	.word	0x0800da98
 800a7e0:	0800dae4 	.word	0x0800dae4
 800a7e4:	0800db20 	.word	0x0800db20
 800a7e8:	0800db60 	.word	0x0800db60
 800a7ec:	0800db90 	.word	0x0800db90

0800a7f0 <Scan_Request>:

static void Scan_Request(void)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800a7f6:	4b1b      	ldr	r3, [pc, #108]	; (800a864 <Scan_Request+0x74>)
 800a7f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7fc:	2b06      	cmp	r3, #6
 800a7fe:	d02c      	beq.n	800a85a <Scan_Request+0x6a>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
	  //TODO blue on
	  Blue_On();
 800a800:	f7f7 ffac 	bl	800275c <Blue_On>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, CFG_BLE_ADDRESS_TYPE, 1);
 800a804:	2301      	movs	r3, #1
 800a806:	2200      	movs	r2, #0
 800a808:	f44f 7148 	mov.w	r1, #800	; 0x320
 800a80c:	f44f 7048 	mov.w	r0, #800	; 0x320
 800a810:	f7fc fd6e 	bl	80072f0 <aci_gap_start_general_discovery_proc>
 800a814:	4603      	mov	r3, r0
 800a816:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 800a818:	79fb      	ldrb	r3, [r7, #7]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10d      	bne.n	800a83a <Scan_Request+0x4a>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 800a81e:	4812      	ldr	r0, [pc, #72]	; (800a868 <Scan_Request+0x78>)
 800a820:	f7fe fbce 	bl	8008fc0 <DbgTraceGetFileName>
 800a824:	4601      	mov	r1, r0
 800a826:	f240 33e1 	movw	r3, #993	; 0x3e1
 800a82a:	4a10      	ldr	r2, [pc, #64]	; (800a86c <Scan_Request+0x7c>)
 800a82c:	4810      	ldr	r0, [pc, #64]	; (800a870 <Scan_Request+0x80>)
 800a82e:	f001 fc4f 	bl	800c0d0 <iprintf>
 800a832:	4810      	ldr	r0, [pc, #64]	; (800a874 <Scan_Request+0x84>)
 800a834:	f001 fc4c 	bl	800c0d0 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 800a838:	e00f      	b.n	800a85a <Scan_Request+0x6a>
    	Red_On();
 800a83a:	f7f7 ff5f 	bl	80026fc <Red_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 800a83e:	480a      	ldr	r0, [pc, #40]	; (800a868 <Scan_Request+0x78>)
 800a840:	f7fe fbbe 	bl	8008fc0 <DbgTraceGetFileName>
 800a844:	4601      	mov	r1, r0
 800a846:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800a84a:	4a08      	ldr	r2, [pc, #32]	; (800a86c <Scan_Request+0x7c>)
 800a84c:	4808      	ldr	r0, [pc, #32]	; (800a870 <Scan_Request+0x80>)
 800a84e:	f001 fc3f 	bl	800c0d0 <iprintf>
 800a852:	4809      	ldr	r0, [pc, #36]	; (800a878 <Scan_Request+0x88>)
 800a854:	f001 fc3c 	bl	800c0d0 <iprintf>
  return;
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
}
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20001668 	.word	0x20001668
 800a868:	0800d31c 	.word	0x0800d31c
 800a86c:	0800e1c0 	.word	0x0800e1c0
 800a870:	0800d338 	.word	0x0800d338
 800a874:	0800dbbc 	.word	0x0800dbbc
 800a878:	0800dbec 	.word	0x0800dbec

0800a87c <Connect_Request>:

static void Connect_Request(void)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b08a      	sub	sp, #40	; 0x28
 800a880:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 800a882:	4820      	ldr	r0, [pc, #128]	; (800a904 <Connect_Request+0x88>)
 800a884:	f7fe fb9c 	bl	8008fc0 <DbgTraceGetFileName>
 800a888:	4601      	mov	r1, r0
 800a88a:	f240 33f9 	movw	r3, #1017	; 0x3f9
 800a88e:	4a1e      	ldr	r2, [pc, #120]	; (800a908 <Connect_Request+0x8c>)
 800a890:	481e      	ldr	r0, [pc, #120]	; (800a90c <Connect_Request+0x90>)
 800a892:	f001 fc1d 	bl	800c0d0 <iprintf>
 800a896:	481e      	ldr	r0, [pc, #120]	; (800a910 <Connect_Request+0x94>)
 800a898:	f001 fc1a 	bl	800c0d0 <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800a89c:	4b1d      	ldr	r3, [pc, #116]	; (800a914 <Connect_Request+0x98>)
 800a89e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8a2:	2b06      	cmp	r3, #6
 800a8a4:	d02a      	beq.n	800a8fc <Connect_Request+0x80>
  {
    result = aci_gap_create_connection(SCAN_P,
 800a8a6:	4b1c      	ldr	r3, [pc, #112]	; (800a918 <Connect_Request+0x9c>)
 800a8a8:	781a      	ldrb	r2, [r3, #0]
 800a8aa:	2310      	movs	r3, #16
 800a8ac:	9306      	str	r3, [sp, #24]
 800a8ae:	2310      	movs	r3, #16
 800a8b0:	9305      	str	r3, [sp, #20]
 800a8b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a8b6:	9304      	str	r3, [sp, #16]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	9303      	str	r3, [sp, #12]
 800a8bc:	2350      	movs	r3, #80	; 0x50
 800a8be:	9302      	str	r3, [sp, #8]
 800a8c0:	2328      	movs	r3, #40	; 0x28
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	4b14      	ldr	r3, [pc, #80]	; (800a91c <Connect_Request+0xa0>)
 800a8ca:	f44f 7148 	mov.w	r1, #800	; 0x320
 800a8ce:	f44f 7048 	mov.w	r0, #800	; 0x320
 800a8d2:	f7fc fda1 	bl	8007418 <aci_gap_create_connection>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800a8da:	79fb      	ldrb	r3, [r7, #7]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d106      	bne.n	800a8ee <Connect_Request+0x72>
    {
      /* USER CODE BEGIN BLE_CONNECT_SUCCESS */
    	Blue_Off();
 800a8e0:	f7f7 ff48 	bl	8002774 <Blue_Off>
      /* USER CODE END BLE_CONNECT_SUCCESS */
      BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800a8e4:	4b0b      	ldr	r3, [pc, #44]	; (800a914 <Connect_Request+0x98>)
 800a8e6:	2204      	movs	r2, #4
 800a8e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800a8ec:	e006      	b.n	800a8fc <Connect_Request+0x80>
    	Red_On();
 800a8ee:	f7f7 ff05 	bl	80026fc <Red_On>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a8f2:	4b08      	ldr	r3, [pc, #32]	; (800a914 <Connect_Request+0x98>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 800a8fa:	bf00      	nop
 800a8fc:	bf00      	nop
}
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	0800d31c 	.word	0x0800d31c
 800a908:	0800e1d0 	.word	0x0800e1d0
 800a90c:	0800d338 	.word	0x0800d338
 800a910:	0800dc1c 	.word	0x0800dc1c
 800a914:	20001668 	.word	0x20001668
 800a918:	20001662 	.word	0x20001662
 800a91c:	2000165c 	.word	0x2000165c

0800a920 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800a920:	b480      	push	{r7}
 800a922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
	//TODO green off

  /* USER CODE END Switch_OFF_GPIO */
}
 800a924:	bf00      	nop
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
	...

0800a930 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800a936:	f7ff f909 	bl	8009b4c <LL_FLASH_GetUDN>
 800a93a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a942:	d023      	beq.n	800a98c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800a944:	f7ff f91a 	bl	8009b7c <LL_FLASH_GetSTCompanyID>
 800a948:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800a94a:	f7ff f90b 	bl	8009b64 <LL_FLASH_GetDeviceID>
 800a94e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	b2da      	uxtb	r2, r3
 800a954:	4b16      	ldr	r3, [pc, #88]	; (800a9b0 <BleGetBdAddress+0x80>)
 800a956:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	0a1b      	lsrs	r3, r3, #8
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	4b14      	ldr	r3, [pc, #80]	; (800a9b0 <BleGetBdAddress+0x80>)
 800a960:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	b2da      	uxtb	r2, r3
 800a966:	4b12      	ldr	r3, [pc, #72]	; (800a9b0 <BleGetBdAddress+0x80>)
 800a968:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	4b10      	ldr	r3, [pc, #64]	; (800a9b0 <BleGetBdAddress+0x80>)
 800a970:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	0a1b      	lsrs	r3, r3, #8
 800a976:	b2da      	uxtb	r2, r3
 800a978:	4b0d      	ldr	r3, [pc, #52]	; (800a9b0 <BleGetBdAddress+0x80>)
 800a97a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	0c1b      	lsrs	r3, r3, #16
 800a980:	b2da      	uxtb	r2, r3
 800a982:	4b0b      	ldr	r3, [pc, #44]	; (800a9b0 <BleGetBdAddress+0x80>)
 800a984:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800a986:	4b0a      	ldr	r3, [pc, #40]	; (800a9b0 <BleGetBdAddress+0x80>)
 800a988:	617b      	str	r3, [r7, #20]
 800a98a:	e00b      	b.n	800a9a4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800a98c:	2000      	movs	r0, #0
 800a98e:	f7fe fbf5 	bl	800917c <OTP_Read>
 800a992:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d002      	beq.n	800a9a0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	617b      	str	r3, [r7, #20]
 800a99e:	e001      	b.n	800a9a4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800a9a0:	4b04      	ldr	r3, [pc, #16]	; (800a9b4 <BleGetBdAddress+0x84>)
 800a9a2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800a9a4:	697b      	ldr	r3, [r7, #20]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3718      	adds	r7, #24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20001654 	.word	0x20001654
 800a9b4:	0800e158 	.word	0x0800e158

0800a9b8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	2010      	movs	r0, #16
 800a9c4:	f001 f9a2 	bl	800bd0c <UTIL_SEQ_SetTask>
  return;
 800a9c8:	bf00      	nop
}
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a9d8:	2001      	movs	r0, #1
 800a9da:	f001 fa03 	bl	800bde4 <UTIL_SEQ_SetEvt>
  return;
 800a9de:	bf00      	nop
}
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b082      	sub	sp, #8
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	f001 fa18 	bl	800be24 <UTIL_SEQ_WaitEvt>
  return;
 800a9f4:	bf00      	nop
}
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	3308      	adds	r3, #8
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fd fc58 	bl	80082c4 <SVCCTL_UserEvtRx>
 800aa14:	4603      	mov	r3, r0
 800aa16:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800aa18:	7afb      	ldrb	r3, [r7, #11]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2201      	movs	r2, #1
 800aa22:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800aa24:	e003      	b.n	800aa2e <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	701a      	strb	r2, [r3, #0]
  return;
 800aa2c:	bf00      	nop
}
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <BLE_StatusNot+0x16>
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d006      	beq.n	800aa56 <BLE_StatusNot+0x22>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 800aa48:	e00b      	b.n	800aa62 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800aa4a:	23ff      	movs	r3, #255	; 0xff
 800aa4c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f001 f988 	bl	800bd64 <UTIL_SEQ_PauseTask>
      break;
 800aa54:	e005      	b.n	800aa62 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800aa56:	23ff      	movs	r3, #255	; 0xff
 800aa58:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f001 f9a2 	bl	800bda4 <UTIL_SEQ_ResumeTask>
      break;
 800aa60:	bf00      	nop
  }
  return;
 800aa62:	bf00      	nop
}
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
	...

0800aa6c <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
  uint8_t index =0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */
  //TODO register tasks
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 800aa76:	4a1e      	ldr	r2, [pc, #120]	; (800aaf0 <P2PC_APP_Init+0x84>)
 800aa78:	2100      	movs	r1, #0
 800aa7a:	2004      	movs	r0, #4
 800aa7c:	f001 f924 	bl	800bcc8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_B1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
 800aa80:	4a1c      	ldr	r2, [pc, #112]	; (800aaf4 <P2PC_APP_Init+0x88>)
 800aa82:	2100      	movs	r1, #0
 800aa84:	2020      	movs	r0, #32
 800aa86:	f001 f91f 	bl	800bcc8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_B2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
 800aa8a:	4a1a      	ldr	r2, [pc, #104]	; (800aaf4 <P2PC_APP_Init+0x88>)
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	2040      	movs	r0, #64	; 0x40
 800aa90:	f001 f91a 	bl	800bcc8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_B3_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
 800aa94:	4a17      	ldr	r2, [pc, #92]	; (800aaf4 <P2PC_APP_Init+0x88>)
 800aa96:	2100      	movs	r1, #0
 800aa98:	2080      	movs	r0, #128	; 0x80
 800aa9a:	f001 f915 	bl	800bcc8 <UTIL_SEQ_RegTask>
/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	71fb      	strb	r3, [r7, #7]
 800aaa2:	e008      	b.n	800aab6 <P2PC_APP_Init+0x4a>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 800aaa4:	79fb      	ldrb	r3, [r7, #7]
 800aaa6:	4a14      	ldr	r2, [pc, #80]	; (800aaf8 <P2PC_APP_Init+0x8c>)
 800aaa8:	011b      	lsls	r3, r3, #4
 800aaaa:	4413      	add	r3, r2
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800aab0:	79fb      	ldrb	r3, [r7, #7]
 800aab2:	3301      	adds	r3, #1
 800aab4:	71fb      	strb	r3, [r7, #7]
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d0f3      	beq.n	800aaa4 <P2PC_APP_Init+0x38>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 800aabc:	480f      	ldr	r0, [pc, #60]	; (800aafc <P2PC_APP_Init+0x90>)
 800aabe:	f7fd fbe7 	bl	8008290 <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 800aac2:	480f      	ldr	r0, [pc, #60]	; (800ab00 <P2PC_APP_Init+0x94>)
 800aac4:	f7fe fa7c 	bl	8008fc0 <DbgTraceGetFileName>
 800aac8:	4601      	mov	r1, r0
 800aaca:	23bd      	movs	r3, #189	; 0xbd
 800aacc:	4a0d      	ldr	r2, [pc, #52]	; (800ab04 <P2PC_APP_Init+0x98>)
 800aace:	480e      	ldr	r0, [pc, #56]	; (800ab08 <P2PC_APP_Init+0x9c>)
 800aad0:	f001 fafe 	bl	800c0d0 <iprintf>
 800aad4:	480d      	ldr	r0, [pc, #52]	; (800ab0c <P2PC_APP_Init+0xa0>)
 800aad6:	f001 fb69 	bl	800c1ac <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */
  P2P_Client_App_Context.State_Status = STOPPED;
 800aada:	4b0d      	ldr	r3, [pc, #52]	; (800ab10 <P2PC_APP_Init+0xa4>)
 800aadc:	2200      	movs	r2, #0
 800aade:	705a      	strb	r2, [r3, #1]
  P2P_Client_App_Context.small_motor_goal_speed = 0;
 800aae0:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <P2PC_APP_Init+0xa4>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	805a      	strh	r2, [r3, #2]
/* USER CODE END P2PC_APP_Init_2 */
  return;
 800aae6:	bf00      	nop
}
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	0800b365 	.word	0x0800b365
 800aaf4:	0800b2ed 	.word	0x0800b2ed
 800aaf8:	200016f8 	.word	0x200016f8
 800aafc:	0800abcd 	.word	0x0800abcd
 800ab00:	0800dc48 	.word	0x0800dc48
 800ab04:	0800e1e0 	.word	0x0800e1e0
 800ab08:	0800dc6c 	.word	0x0800dc6c
 800ab0c:	0800dc80 	.word	0x0800dc80
 800ab10:	20001708 	.word	0x20001708

0800ab14 <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <P2PC_APP_Notification+0x16>
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d005      	beq.n	800ab34 <P2PC_APP_Notification+0x20>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 800ab28:	e01b      	b.n	800ab62 <P2PC_APP_Notification+0x4e>
	  P2P_Client_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	885a      	ldrh	r2, [r3, #2]
 800ab2e:	4b10      	ldr	r3, [pc, #64]	; (800ab70 <P2PC_APP_Notification+0x5c>)
 800ab30:	809a      	strh	r2, [r3, #4]
      break;
 800ab32:	e016      	b.n	800ab62 <P2PC_APP_Notification+0x4e>
    uint8_t index = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73fb      	strb	r3, [r7, #15]
    P2P_Client_App_Context.ConnectionHandle =  0x00;
 800ab38:	4b0d      	ldr	r3, [pc, #52]	; (800ab70 <P2PC_APP_Notification+0x5c>)
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	809a      	strh	r2, [r3, #4]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ab3e:	e005      	b.n	800ab4c <P2PC_APP_Notification+0x38>
      aP2PClientContext[index].state = APP_BLE_IDLE;
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	4a0c      	ldr	r2, [pc, #48]	; (800ab74 <P2PC_APP_Notification+0x60>)
 800ab44:	011b      	lsls	r3, r3, #4
 800ab46:	4413      	add	r3, r2
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <P2PC_APP_Notification+0x4c>
                (aP2PClientContext[index].state != APP_BLE_IDLE))
 800ab52:	7bfb      	ldrb	r3, [r7, #15]
 800ab54:	4a07      	ldr	r2, [pc, #28]	; (800ab74 <P2PC_APP_Notification+0x60>)
 800ab56:	011b      	lsls	r3, r3, #4
 800ab58:	4413      	add	r3, r2
 800ab5a:	781b      	ldrb	r3, [r3, #0]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1ef      	bne.n	800ab40 <P2PC_APP_Notification+0x2c>
      break;
 800ab60:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 800ab62:	bf00      	nop
}
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	20001708 	.word	0x20001708
 800ab74:	200016f8 	.word	0x200016f8

0800ab78 <P2PC_APP_B1_Button_Action>:
/* USER CODE BEGIN FD */
//TODO
void P2PC_APP_B1_Button_Action(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	af00      	add	r7, sp, #0
	P2P_Client_App_Context.small_motor_goal_speed = 250;
 800ab7c:	4b04      	ldr	r3, [pc, #16]	; (800ab90 <P2PC_APP_B1_Button_Action+0x18>)
 800ab7e:	22fa      	movs	r2, #250	; 0xfa
 800ab80:	805a      	strh	r2, [r3, #2]
	UTIL_SEQ_SetTask(1<<CFG_TASK_B1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800ab82:	2100      	movs	r1, #0
 800ab84:	2020      	movs	r0, #32
 800ab86:	f001 f8c1 	bl	800bd0c <UTIL_SEQ_SetTask>
}
 800ab8a:	bf00      	nop
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	20001708 	.word	0x20001708

0800ab94 <P2PC_APP_B2_Button_Action>:

void P2PC_APP_B2_Button_Action(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
	P2P_Client_App_Context.small_motor_goal_speed = 450;
 800ab98:	4b04      	ldr	r3, [pc, #16]	; (800abac <P2PC_APP_B2_Button_Action+0x18>)
 800ab9a:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800ab9e:	805a      	strh	r2, [r3, #2]
	UTIL_SEQ_SetTask(1<<CFG_TASK_B2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800aba0:	2100      	movs	r1, #0
 800aba2:	2040      	movs	r0, #64	; 0x40
 800aba4:	f001 f8b2 	bl	800bd0c <UTIL_SEQ_SetTask>
}
 800aba8:	bf00      	nop
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	20001708 	.word	0x20001708

0800abb0 <P2PC_APP_B3_Button_Action>:

void P2PC_APP_B3_Button_Action(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	af00      	add	r7, sp, #0
	P2P_Client_App_Context.small_motor_goal_speed = 1200;
 800abb4:	4b04      	ldr	r3, [pc, #16]	; (800abc8 <P2PC_APP_B3_Button_Action+0x18>)
 800abb6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800abba:	805a      	strh	r2, [r3, #2]
	UTIL_SEQ_SetTask(1<<CFG_TASK_B3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800abbc:	2100      	movs	r1, #0
 800abbe:	2080      	movs	r0, #128	; 0x80
 800abc0:	f001 f8a4 	bl	800bd0c <UTIL_SEQ_SetTask>
}
 800abc4:	bf00      	nop
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	20001708 	.word	0x20001708

0800abcc <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b094      	sub	sp, #80	; 0x50
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800abd4:	2300      	movs	r3, #0
 800abd6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	3301      	adds	r3, #1
 800abde:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 800abe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2bff      	cmp	r3, #255	; 0xff
 800abe6:	f040 82f6 	bne.w	800b1d6 <Event_Handler+0x60a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800abea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abec:	3302      	adds	r3, #2
 800abee:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blecore_evt->ecode)
 800abf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800abfa:	2b0c      	cmp	r3, #12
 800abfc:	f200 82df 	bhi.w	800b1be <Event_Handler+0x5f2>
 800ac00:	a201      	add	r2, pc, #4	; (adr r2, 800ac08 <Event_Handler+0x3c>)
 800ac02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac06:	bf00      	nop
 800ac08:	0800af95 	.word	0x0800af95
 800ac0c:	0800b1bf 	.word	0x0800b1bf
 800ac10:	0800ae07 	.word	0x0800ae07
 800ac14:	0800b1bf 	.word	0x0800b1bf
 800ac18:	0800b1bf 	.word	0x0800b1bf
 800ac1c:	0800b1bf 	.word	0x0800b1bf
 800ac20:	0800ac3d 	.word	0x0800ac3d
 800ac24:	0800b1bf 	.word	0x0800b1bf
 800ac28:	0800b1bf 	.word	0x0800b1bf
 800ac2c:	0800b1bf 	.word	0x0800b1bf
 800ac30:	0800b1bf 	.word	0x0800b1bf
 800ac34:	0800b0c5 	.word	0x0800b0c5
 800ac38:	0800b141 	.word	0x0800b141
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800ac3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac3e:	3302      	adds	r3, #2
 800ac40:	633b      	str	r3, [r7, #48]	; 0x30
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 800ac42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac44:	781a      	ldrb	r2, [r3, #0]
 800ac46:	785b      	ldrb	r3, [r3, #1]
 800ac48:	021b      	lsls	r3, r3, #8
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ac54:	e02e      	b.n	800acb4 <Event_Handler+0xe8>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800ac56:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ac5a:	4aab      	ldr	r2, [pc, #684]	; (800af08 <Event_Handler+0x33c>)
 800ac5c:	011b      	lsls	r3, r3, #4
 800ac5e:	4413      	add	r3, r2
 800ac60:	3302      	adds	r3, #2
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff fb0f 	bl	800a288 <APP_BLE_Get_Client_Connection_Status>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 800ac70:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ac74:	4aa4      	ldr	r2, [pc, #656]	; (800af08 <Event_Handler+0x33c>)
 800ac76:	011b      	lsls	r3, r3, #4
 800ac78:	4413      	add	r3, r2
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b06      	cmp	r3, #6
 800ac7e:	d114      	bne.n	800acaa <Event_Handler+0xde>
 800ac80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d110      	bne.n	800acaa <Event_Handler+0xde>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 800ac88:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ac8c:	4a9e      	ldr	r2, [pc, #632]	; (800af08 <Event_Handler+0x33c>)
 800ac8e:	011b      	lsls	r3, r3, #4
 800ac90:	4413      	add	r3, r2
 800ac92:	2200      	movs	r2, #0
 800ac94:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 800ac96:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ac9a:	4a9b      	ldr	r2, [pc, #620]	; (800af08 <Event_Handler+0x33c>)
 800ac9c:	011b      	lsls	r3, r3, #4
 800ac9e:	4413      	add	r3, r2
 800aca0:	3302      	adds	r3, #2
 800aca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aca6:	801a      	strh	r2, [r3, #0]
              break;
 800aca8:	e010      	b.n	800accc <Event_Handler+0x100>
            }
            index++;
 800acaa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800acae:	3301      	adds	r3, #1
 800acb0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800acb4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d107      	bne.n	800accc <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800acbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800acc0:	4a91      	ldr	r2, [pc, #580]	; (800af08 <Event_Handler+0x33c>)
 800acc2:	011b      	lsls	r3, r3, #4
 800acc4:	4413      	add	r3, r2
 800acc6:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1c4      	bne.n	800ac56 <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800accc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f040 8276 	bne.w	800b1c2 <Event_Handler+0x5f6>
          {
            aP2PClientContext[index].connHandle= handle;
 800acd6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800acda:	4a8b      	ldr	r2, [pc, #556]	; (800af08 <Event_Handler+0x33c>)
 800acdc:	011b      	lsls	r3, r3, #4
 800acde:	4413      	add	r3, r2
 800ace0:	3302      	adds	r3, #2
 800ace2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ace4:	801a      	strh	r2, [r3, #0]

            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800ace6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace8:	78da      	ldrb	r2, [r3, #3]
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	789b      	ldrb	r3, [r3, #2]
 800acee:	fbb2 f3f3 	udiv	r3, r2, r3
 800acf2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)
          if (pr->Attribute_Data_Length == 20)
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	789b      	ldrb	r3, [r3, #2]
 800acfa:	2b14      	cmp	r3, #20
 800acfc:	f040 8261 	bne.w	800b1c2 <Event_Handler+0x5f6>
          {
            idx = 16;
 800ad00:	2310      	movs	r3, #16
 800ad02:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
#else
          if (pr->Attribute_Data_Length == 6)
          {
            idx = 4;
#endif
              for (i=0; i<numServ; i++)
 800ad06:	2300      	movs	r3, #0
 800ad08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ad0c:	e074      	b.n	800adf8 <Event_Handler+0x22c>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800ad0e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ad12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad14:	4413      	add	r3, r2
 800ad16:	791b      	ldrb	r3, [r3, #4]
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ad1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad20:	440b      	add	r3, r1
 800ad22:	3304      	adds	r3, #4
 800ad24:	3301      	adds	r3, #1
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	021b      	lsls	r3, r3, #8
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 800ad32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ad34:	f64f 6240 	movw	r2, #65088	; 0xfe40
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d153      	bne.n	800ade4 <Event_Handler+0x218>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 800ad3c:	4873      	ldr	r0, [pc, #460]	; (800af0c <Event_Handler+0x340>)
 800ad3e:	f7fe f93f 	bl	8008fc0 <DbgTraceGetFileName>
 800ad42:	4601      	mov	r1, r0
 800ad44:	f240 1365 	movw	r3, #357	; 0x165
 800ad48:	4a71      	ldr	r2, [pc, #452]	; (800af10 <Event_Handler+0x344>)
 800ad4a:	4872      	ldr	r0, [pc, #456]	; (800af14 <Event_Handler+0x348>)
 800ad4c:	f001 f9c0 	bl	800c0d0 <iprintf>
 800ad50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ad54:	4a6c      	ldr	r2, [pc, #432]	; (800af08 <Event_Handler+0x33c>)
 800ad56:	011b      	lsls	r3, r3, #4
 800ad58:	4413      	add	r3, r2
 800ad5a:	3302      	adds	r3, #2
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	486d      	ldr	r0, [pc, #436]	; (800af18 <Event_Handler+0x34c>)
 800ad62:	f001 f9b5 	bl	800c0d0 <iprintf>
#endif
#if (UUID_128BIT_FORMAT==1)
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800ad66:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ad6a:	3b10      	subs	r3, #16
 800ad6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad6e:	4413      	add	r3, r2
 800ad70:	791b      	ldrb	r3, [r3, #4]
 800ad72:	b299      	uxth	r1, r3
 800ad74:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ad78:	3b10      	subs	r3, #16
 800ad7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad7c:	4413      	add	r3, r2
 800ad7e:	3304      	adds	r3, #4
 800ad80:	3301      	adds	r3, #1
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	021b      	lsls	r3, r3, #8
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	b291      	uxth	r1, r2
 800ad92:	4a5d      	ldr	r2, [pc, #372]	; (800af08 <Event_Handler+0x33c>)
 800ad94:	011b      	lsls	r3, r3, #4
 800ad96:	4413      	add	r3, r2
 800ad98:	3304      	adds	r3, #4
 800ad9a:	460a      	mov	r2, r1
 800ad9c:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800ad9e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ada2:	3b0e      	subs	r3, #14
 800ada4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ada6:	4413      	add	r3, r2
 800ada8:	791b      	ldrb	r3, [r3, #4]
 800adaa:	b299      	uxth	r1, r3
 800adac:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800adb0:	3b0e      	subs	r3, #14
 800adb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb4:	4413      	add	r3, r2
 800adb6:	3304      	adds	r3, #4
 800adb8:	3301      	adds	r3, #1
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	021b      	lsls	r3, r3, #8
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800adc6:	430a      	orrs	r2, r1
 800adc8:	b291      	uxth	r1, r2
 800adca:	4a4f      	ldr	r2, [pc, #316]	; (800af08 <Event_Handler+0x33c>)
 800adcc:	011b      	lsls	r3, r3, #4
 800adce:	4413      	add	r3, r2
 800add0:	3306      	adds	r3, #6
 800add2:	460a      	mov	r2, r1
 800add4:	801a      	strh	r2, [r3, #0]
#else
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800add6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800adda:	4a4b      	ldr	r2, [pc, #300]	; (800af08 <Event_Handler+0x33c>)
 800addc:	011b      	lsls	r3, r3, #4
 800adde:	4413      	add	r3, r2
 800ade0:	2208      	movs	r2, #8
 800ade2:	701a      	strb	r2, [r3, #0]
                }
                idx += 6;
 800ade4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800ade8:	3306      	adds	r3, #6
 800adea:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800adee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800adf2:	3301      	adds	r3, #1
 800adf4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800adf8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800adfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d384      	bcc.n	800ad0e <Event_Handler+0x142>
              }
            }
          }
        }
        break;
 800ae04:	e1dd      	b.n	800b1c2 <Event_Handler+0x5f6>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800ae06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae08:	3302      	adds	r3, #2
 800ae0a:	627b      	str	r3, [r7, #36]	; 0x24
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ae12:	e004      	b.n	800ae1e <Event_Handler+0x252>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800ae14:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ae18:	3301      	adds	r3, #1
 800ae1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ae1e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10b      	bne.n	800ae3e <Event_Handler+0x272>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800ae26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ae2a:	4a37      	ldr	r2, [pc, #220]	; (800af08 <Event_Handler+0x33c>)
 800ae2c:	011b      	lsls	r3, r3, #4
 800ae2e:	4413      	add	r3, r2
 800ae30:	3302      	adds	r3, #2
 800ae32:	881a      	ldrh	r2, [r3, #0]
 800ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d1ea      	bne.n	800ae14 <Event_Handler+0x248>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800ae3e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f040 81bf 	bne.w	800b1c6 <Event_Handler+0x5fa>
          {

            /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
            idx = 17;
 800ae48:	2311      	movs	r3, #17
 800ae4a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae50:	789b      	ldrb	r3, [r3, #2]
 800ae52:	2b15      	cmp	r3, #21
 800ae54:	f040 81b7 	bne.w	800b1c6 <Event_Handler+0x5fa>
#else
              idx = 5;
            if (pr->Handle_Value_Pair_Length == 7)
#endif
            {
              pr->Data_Length -= 1;
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5a:	78db      	ldrb	r3, [r3, #3]
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 800ae64:	e090      	b.n	800af88 <Event_Handler+0x3bc>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800ae66:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ae6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae6c:	4413      	add	r3, r2
 800ae6e:	791b      	ldrb	r3, [r3, #4]
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ae76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae78:	440b      	add	r3, r1
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	021b      	lsls	r3, r3, #8
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	4313      	orrs	r3, r2
 800ae88:	847b      	strh	r3, [r7, #34]	; 0x22
                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800ae8a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ae8e:	3b0e      	subs	r3, #14
 800ae90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae92:	4413      	add	r3, r2
 800ae94:	791b      	ldrb	r3, [r3, #4]
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ae9c:	3b0e      	subs	r3, #14
 800ae9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aea0:	440b      	add	r3, r1
 800aea2:	3304      	adds	r3, #4
 800aea4:	3301      	adds	r3, #1
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	021b      	lsls	r3, r3, #8
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	843b      	strh	r3, [r7, #32]
#else
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                if(uuid == P2P_WRITE_CHAR_UUID)
 800aeb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aeb4:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d131      	bne.n	800af20 <Event_Handler+0x354>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800aebc:	4813      	ldr	r0, [pc, #76]	; (800af0c <Event_Handler+0x340>)
 800aebe:	f7fe f87f 	bl	8008fc0 <DbgTraceGetFileName>
 800aec2:	4601      	mov	r1, r0
 800aec4:	f240 13a5 	movw	r3, #421	; 0x1a5
 800aec8:	4a11      	ldr	r2, [pc, #68]	; (800af10 <Event_Handler+0x344>)
 800aeca:	4812      	ldr	r0, [pc, #72]	; (800af14 <Event_Handler+0x348>)
 800aecc:	f001 f900 	bl	800c0d0 <iprintf>
 800aed0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800aed4:	4a0c      	ldr	r2, [pc, #48]	; (800af08 <Event_Handler+0x33c>)
 800aed6:	011b      	lsls	r3, r3, #4
 800aed8:	4413      	add	r3, r2
 800aeda:	3302      	adds	r3, #2
 800aedc:	881b      	ldrh	r3, [r3, #0]
 800aede:	4619      	mov	r1, r3
 800aee0:	480e      	ldr	r0, [pc, #56]	; (800af1c <Event_Handler+0x350>)
 800aee2:	f001 f8f5 	bl	800c0d0 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 800aee6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800aeea:	4a07      	ldr	r2, [pc, #28]	; (800af08 <Event_Handler+0x33c>)
 800aeec:	011b      	lsls	r3, r3, #4
 800aeee:	4413      	add	r3, r2
 800aef0:	2209      	movs	r2, #9
 800aef2:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 800aef4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800aef8:	4a03      	ldr	r2, [pc, #12]	; (800af08 <Event_Handler+0x33c>)
 800aefa:	011b      	lsls	r3, r3, #4
 800aefc:	4413      	add	r3, r2
 800aefe:	3308      	adds	r3, #8
 800af00:	8c3a      	ldrh	r2, [r7, #32]
 800af02:	801a      	strh	r2, [r3, #0]
 800af04:	e035      	b.n	800af72 <Event_Handler+0x3a6>
 800af06:	bf00      	nop
 800af08:	200016f8 	.word	0x200016f8
 800af0c:	0800dc48 	.word	0x0800dc48
 800af10:	0800e1f0 	.word	0x0800e1f0
 800af14:	0800dc6c 	.word	0x0800dc6c
 800af18:	0800dc9c 	.word	0x0800dc9c
 800af1c:	0800dcd8 	.word	0x0800dcd8
                }

                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800af20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af22:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800af26:	4293      	cmp	r3, r2
 800af28:	d123      	bne.n	800af72 <Event_Handler+0x3a6>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800af2a:	48ae      	ldr	r0, [pc, #696]	; (800b1e4 <Event_Handler+0x618>)
 800af2c:	f7fe f848 	bl	8008fc0 <DbgTraceGetFileName>
 800af30:	4601      	mov	r1, r0
 800af32:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 800af36:	4aac      	ldr	r2, [pc, #688]	; (800b1e8 <Event_Handler+0x61c>)
 800af38:	48ac      	ldr	r0, [pc, #688]	; (800b1ec <Event_Handler+0x620>)
 800af3a:	f001 f8c9 	bl	800c0d0 <iprintf>
 800af3e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800af42:	4aab      	ldr	r2, [pc, #684]	; (800b1f0 <Event_Handler+0x624>)
 800af44:	011b      	lsls	r3, r3, #4
 800af46:	4413      	add	r3, r2
 800af48:	3302      	adds	r3, #2
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	4619      	mov	r1, r3
 800af4e:	48a9      	ldr	r0, [pc, #676]	; (800b1f4 <Event_Handler+0x628>)
 800af50:	f001 f8be 	bl	800c0d0 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800af54:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800af58:	4aa5      	ldr	r2, [pc, #660]	; (800b1f0 <Event_Handler+0x624>)
 800af5a:	011b      	lsls	r3, r3, #4
 800af5c:	4413      	add	r3, r2
 800af5e:	220a      	movs	r2, #10
 800af60:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 800af62:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800af66:	4aa2      	ldr	r2, [pc, #648]	; (800b1f0 <Event_Handler+0x624>)
 800af68:	011b      	lsls	r3, r3, #4
 800af6a:	4413      	add	r3, r2
 800af6c:	330c      	adds	r3, #12
 800af6e:	8c3a      	ldrh	r2, [r7, #32]
 800af70:	801a      	strh	r2, [r3, #0]
                }
#if (UUID_128BIT_FORMAT==1)
                pr->Data_Length -= 21;
 800af72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af74:	78db      	ldrb	r3, [r3, #3]
 800af76:	3b15      	subs	r3, #21
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7c:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800af7e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800af82:	3315      	adds	r3, #21
 800af84:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	78db      	ldrb	r3, [r3, #3]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f47f af6a 	bne.w	800ae66 <Event_Handler+0x29a>
#endif
              }
            }
          }
        }
        break;
 800af92:	e118      	b.n	800b1c6 <Event_Handler+0x5fa>

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800af94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af96:	3302      	adds	r3, #2
 800af98:	61fb      	str	r3, [r7, #28]
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800afa0:	e004      	b.n	800afac <Event_Handler+0x3e0>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 800afa2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800afa6:	3301      	adds	r3, #1
 800afa8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800afac:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d10b      	bne.n	800afcc <Event_Handler+0x400>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800afb4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800afb8:	4a8d      	ldr	r2, [pc, #564]	; (800b1f0 <Event_Handler+0x624>)
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	4413      	add	r3, r2
 800afbe:	3302      	adds	r3, #2
 800afc0:	881a      	ldrh	r2, [r3, #0]
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	881b      	ldrh	r3, [r3, #0]
 800afc6:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800afc8:	429a      	cmp	r2, r3
 800afca:	d1ea      	bne.n	800afa2 <Event_Handler+0x3d6>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800afcc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f040 80fa 	bne.w	800b1ca <Event_Handler+0x5fe>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	78db      	ldrb	r3, [r3, #3]
 800afda:	089b      	lsrs	r3, r3, #2
 800afdc:	76fb      	strb	r3, [r7, #27]
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	789b      	ldrb	r3, [r3, #2]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	f040 80ee 	bne.w	800b1ca <Event_Handler+0x5fe>
            {
              for (i=0; i<numDesc; i++)
 800afee:	2300      	movs	r3, #0
 800aff0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800aff4:	e060      	b.n	800b0b8 <Event_Handler+0x4ec>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800aff6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800affa:	69fa      	ldr	r2, [r7, #28]
 800affc:	4413      	add	r3, r2
 800affe:	791b      	ldrb	r3, [r3, #4]
 800b000:	b29a      	uxth	r2, r3
 800b002:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b006:	69f9      	ldr	r1, [r7, #28]
 800b008:	440b      	add	r3, r1
 800b00a:	3304      	adds	r3, #4
 800b00c:	3301      	adds	r3, #1
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	b29b      	uxth	r3, r3
 800b012:	021b      	lsls	r3, r3, #8
 800b014:	b29b      	uxth	r3, r3
 800b016:	4313      	orrs	r3, r2
 800b018:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800b01a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b01e:	3302      	adds	r3, #2
 800b020:	69fa      	ldr	r2, [r7, #28]
 800b022:	4413      	add	r3, r2
 800b024:	791b      	ldrb	r3, [r3, #4]
 800b026:	b29a      	uxth	r2, r3
 800b028:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b02c:	3302      	adds	r3, #2
 800b02e:	69f9      	ldr	r1, [r7, #28]
 800b030:	440b      	add	r3, r1
 800b032:	3304      	adds	r3, #4
 800b034:	3301      	adds	r3, #1
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	021b      	lsls	r3, r3, #8
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	4313      	orrs	r3, r2
 800b040:	82fb      	strh	r3, [r7, #22]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800b042:	8afb      	ldrh	r3, [r7, #22]
 800b044:	f642 1202 	movw	r2, #10498	; 0x2902
 800b048:	4293      	cmp	r3, r2
 800b04a:	d12b      	bne.n	800b0a4 <Event_Handler+0x4d8>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800b04c:	4865      	ldr	r0, [pc, #404]	; (800b1e4 <Event_Handler+0x618>)
 800b04e:	f7fd ffb7 	bl	8008fc0 <DbgTraceGetFileName>
 800b052:	4601      	mov	r1, r0
 800b054:	f240 13e5 	movw	r3, #485	; 0x1e5
 800b058:	4a63      	ldr	r2, [pc, #396]	; (800b1e8 <Event_Handler+0x61c>)
 800b05a:	4864      	ldr	r0, [pc, #400]	; (800b1ec <Event_Handler+0x620>)
 800b05c:	f001 f838 	bl	800c0d0 <iprintf>
 800b060:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b064:	4a62      	ldr	r2, [pc, #392]	; (800b1f0 <Event_Handler+0x624>)
 800b066:	011b      	lsls	r3, r3, #4
 800b068:	4413      	add	r3, r2
 800b06a:	3302      	adds	r3, #2
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	4619      	mov	r1, r3
 800b070:	4861      	ldr	r0, [pc, #388]	; (800b1f8 <Event_Handler+0x62c>)
 800b072:	f001 f82d 	bl	800c0d0 <iprintf>
#endif
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800b076:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b07a:	4a5d      	ldr	r2, [pc, #372]	; (800b1f0 <Event_Handler+0x624>)
 800b07c:	011b      	lsls	r3, r3, #4
 800b07e:	4413      	add	r3, r2
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	2b0a      	cmp	r3, #10
 800b084:	d10e      	bne.n	800b0a4 <Event_Handler+0x4d8>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800b086:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b08a:	4a59      	ldr	r2, [pc, #356]	; (800b1f0 <Event_Handler+0x624>)
 800b08c:	011b      	lsls	r3, r3, #4
 800b08e:	4413      	add	r3, r2
 800b090:	330e      	adds	r3, #14
 800b092:	8b3a      	ldrh	r2, [r7, #24]
 800b094:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800b096:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b09a:	4a55      	ldr	r2, [pc, #340]	; (800b1f0 <Event_Handler+0x624>)
 800b09c:	011b      	lsls	r3, r3, #4
 800b09e:	4413      	add	r3, r2
 800b0a0:	220b      	movs	r2, #11
 800b0a2:	701a      	strb	r2, [r3, #0]

                  }
                }
                idx += 4;
 800b0a4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 800b0ae:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800b0b8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800b0bc:	7efb      	ldrb	r3, [r7, #27]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d399      	bcc.n	800aff6 <Event_Handler+0x42a>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800b0c2:	e082      	b.n	800b1ca <Event_Handler+0x5fe>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
          aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 800b0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0c6:	3302      	adds	r3, #2
 800b0c8:	637b      	str	r3, [r7, #52]	; 0x34
          uint8_t index;

          index = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b0d0:	e004      	b.n	800b0dc <Event_Handler+0x510>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800b0d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b0dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10b      	bne.n	800b0fc <Event_Handler+0x530>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800b0e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b0e8:	4a41      	ldr	r2, [pc, #260]	; (800b1f0 <Event_Handler+0x624>)
 800b0ea:	011b      	lsls	r3, r3, #4
 800b0ec:	4413      	add	r3, r2
 800b0ee:	3302      	adds	r3, #2
 800b0f0:	881a      	ldrh	r2, [r3, #0]
 800b0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f4:	881b      	ldrh	r3, [r3, #0]
 800b0f6:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d1ea      	bne.n	800b0d2 <Event_Handler+0x506>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800b0fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b100:	2b00      	cmp	r3, #0
 800b102:	d164      	bne.n	800b1ce <Event_Handler+0x602>
          {

            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800b104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b106:	885b      	ldrh	r3, [r3, #2]
 800b108:	b29a      	uxth	r2, r3
 800b10a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b10e:	4938      	ldr	r1, [pc, #224]	; (800b1f0 <Event_Handler+0x624>)
 800b110:	011b      	lsls	r3, r3, #4
 800b112:	440b      	add	r3, r1
 800b114:	330c      	adds	r3, #12
 800b116:	881b      	ldrh	r3, [r3, #0]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d158      	bne.n	800b1ce <Event_Handler+0x602>
                    (pr->Attribute_Value_Length == (2)) )
 800b11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b11e:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800b120:	2b02      	cmp	r3, #2
 800b122:	d154      	bne.n	800b1ce <Event_Handler+0x602>
            {

              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 800b124:	2302      	movs	r3, #2
 800b126:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 800b128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b12a:	791b      	ldrb	r3, [r3, #4]
 800b12c:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 800b12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b130:	3305      	adds	r3, #5
 800b132:	60fb      	str	r3, [r7, #12]

              Gatt_Notification(&Notification);
 800b134:	f107 0308 	add.w	r3, r7, #8
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 f861 	bl	800b200 <Gatt_Notification>
              /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

            }
          }
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800b13e:	e046      	b.n	800b1ce <Event_Handler+0x602>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 800b140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b142:	3302      	adds	r3, #2
 800b144:	63bb      	str	r3, [r7, #56]	; 0x38
#if(CFG_DEBUG_APP_TRACE != 0)
          APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE \n");
 800b146:	4827      	ldr	r0, [pc, #156]	; (800b1e4 <Event_Handler+0x618>)
 800b148:	f7fd ff3a 	bl	8008fc0 <DbgTraceGetFileName>
 800b14c:	4601      	mov	r1, r0
 800b14e:	f44f 7306 	mov.w	r3, #536	; 0x218
 800b152:	4a25      	ldr	r2, [pc, #148]	; (800b1e8 <Event_Handler+0x61c>)
 800b154:	4825      	ldr	r0, [pc, #148]	; (800b1ec <Event_Handler+0x620>)
 800b156:	f000 ffbb 	bl	800c0d0 <iprintf>
 800b15a:	4828      	ldr	r0, [pc, #160]	; (800b1fc <Event_Handler+0x630>)
 800b15c:	f001 f826 	bl	800c1ac <puts>
          APP_DBG_MSG("\n");
 800b160:	4820      	ldr	r0, [pc, #128]	; (800b1e4 <Event_Handler+0x618>)
 800b162:	f7fd ff2d 	bl	8008fc0 <DbgTraceGetFileName>
 800b166:	4601      	mov	r1, r0
 800b168:	f240 2319 	movw	r3, #537	; 0x219
 800b16c:	4a1e      	ldr	r2, [pc, #120]	; (800b1e8 <Event_Handler+0x61c>)
 800b16e:	481f      	ldr	r0, [pc, #124]	; (800b1ec <Event_Handler+0x620>)
 800b170:	f000 ffae 	bl	800c0d0 <iprintf>
 800b174:	200a      	movs	r0, #10
 800b176:	f000 ffbd 	bl	800c0f4 <putchar>
#endif

          uint8_t index;

          index = 0;
 800b17a:	2300      	movs	r3, #0
 800b17c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b180:	e004      	b.n	800b18c <Event_Handler+0x5c0>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800b182:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b186:	3301      	adds	r3, #1
 800b188:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b18c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10b      	bne.n	800b1ac <Event_Handler+0x5e0>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800b194:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b198:	4a15      	ldr	r2, [pc, #84]	; (800b1f0 <Event_Handler+0x624>)
 800b19a:	011b      	lsls	r3, r3, #4
 800b19c:	4413      	add	r3, r2
 800b19e:	3302      	adds	r3, #2
 800b1a0:	881a      	ldrh	r2, [r3, #0]
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d1ea      	bne.n	800b182 <Event_Handler+0x5b6>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800b1ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10e      	bne.n	800b1d2 <Event_Handler+0x606>
          {

            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	2004      	movs	r0, #4
 800b1b8:	f000 fda8 	bl	800bd0c <UTIL_SEQ_SetTask>

          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800b1bc:	e009      	b.n	800b1d2 <Event_Handler+0x606>
        default:
          break;
 800b1be:	bf00      	nop
 800b1c0:	e00a      	b.n	800b1d8 <Event_Handler+0x60c>
        break;
 800b1c2:	bf00      	nop
 800b1c4:	e008      	b.n	800b1d8 <Event_Handler+0x60c>
        break;
 800b1c6:	bf00      	nop
 800b1c8:	e006      	b.n	800b1d8 <Event_Handler+0x60c>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800b1ca:	bf00      	nop
 800b1cc:	e004      	b.n	800b1d8 <Event_Handler+0x60c>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800b1ce:	bf00      	nop
 800b1d0:	e002      	b.n	800b1d8 <Event_Handler+0x60c>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800b1d2:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b1d4:	e000      	b.n	800b1d8 <Event_Handler+0x60c>

    default:
      break;
 800b1d6:	bf00      	nop
  }

  return(return_value);
 800b1d8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3750      	adds	r7, #80	; 0x50
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	0800dc48 	.word	0x0800dc48
 800b1e8:	0800e1f0 	.word	0x0800e1f0
 800b1ec:	0800dc6c 	.word	0x0800dc6c
 800b1f0:	200016f8 	.word	0x200016f8
 800b1f4:	0800dd10 	.word	0x0800dd10
 800b1f8:	0800dd54 	.word	0x0800dd54
 800b1fc:	0800dd9c 	.word	0x0800dd9c

0800b200 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d11d      	bne.n	800b24c <Gatt_Notification+0x4c>

    case P2P_NOTIFICATION_INFO_RECEIVED_EVT:
/* USER CODE BEGIN P2P_NOTIFICATION_INFO_RECEIVED_EVT */
    	//TODO motor state notification recevied
    {
    	P2P_Client_App_Context.State_Status = pNotification->DataTransfered.pPayload[1];
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	3301      	adds	r3, #1
 800b216:	781a      	ldrb	r2, [r3, #0]
 800b218:	4b10      	ldr	r3, [pc, #64]	; (800b25c <Gatt_Notification+0x5c>)
 800b21a:	705a      	strb	r2, [r3, #1]

    	if (P2P_Client_App_Context.State_Status == STOPPED)
 800b21c:	4b0f      	ldr	r3, [pc, #60]	; (800b25c <Gatt_Notification+0x5c>)
 800b21e:	785b      	ldrb	r3, [r3, #1]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d103      	bne.n	800b22c <Gatt_Notification+0x2c>
    	{
    		LED_Num(4);
 800b224:	2004      	movs	r0, #4
 800b226:	f7f7 fab1 	bl	800278c <LED_Num>
    	{
    		LED_Num(1);
    	}
    }
/* USER CODE END P2P_NOTIFICATION_INFO_RECEIVED_EVT */
      break;
 800b22a:	e011      	b.n	800b250 <Gatt_Notification+0x50>
    	else if (P2P_Client_App_Context.State_Status == PENDING)
 800b22c:	4b0b      	ldr	r3, [pc, #44]	; (800b25c <Gatt_Notification+0x5c>)
 800b22e:	785b      	ldrb	r3, [r3, #1]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d103      	bne.n	800b23c <Gatt_Notification+0x3c>
    		LED_Num(2);
 800b234:	2002      	movs	r0, #2
 800b236:	f7f7 faa9 	bl	800278c <LED_Num>
      break;
 800b23a:	e009      	b.n	800b250 <Gatt_Notification+0x50>
    	else if (P2P_Client_App_Context.State_Status == DONE)
 800b23c:	4b07      	ldr	r3, [pc, #28]	; (800b25c <Gatt_Notification+0x5c>)
 800b23e:	785b      	ldrb	r3, [r3, #1]
 800b240:	2b02      	cmp	r3, #2
 800b242:	d105      	bne.n	800b250 <Gatt_Notification+0x50>
    		LED_Num(1);
 800b244:	2001      	movs	r0, #1
 800b246:	f7f7 faa1 	bl	800278c <LED_Num>
      break;
 800b24a:	e001      	b.n	800b250 <Gatt_Notification+0x50>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 800b24c:	bf00      	nop
 800b24e:	e000      	b.n	800b252 <Gatt_Notification+0x52>
      break;
 800b250:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 800b252:	bf00      	nop
}
 800b254:	3708      	adds	r7, #8
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	20001708 	.word	0x20001708

0800b260 <P2P_Client_APP_Get_State>:

uint8_t P2P_Client_APP_Get_State( void ) {
 800b260:	b480      	push	{r7}
 800b262:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 800b264:	4b03      	ldr	r3, [pc, #12]	; (800b274 <P2P_Client_APP_Get_State+0x14>)
 800b266:	781b      	ldrb	r3, [r3, #0]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	200016f8 	.word	0x200016f8

0800b278 <Write_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
tBleStatus Write_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	4603      	mov	r3, r0
 800b280:	603a      	str	r2, [r7, #0]
 800b282:	80fb      	strh	r3, [r7, #6]
 800b284:	460b      	mov	r3, r1
 800b286:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b288:	2392      	movs	r3, #146	; 0x92
 800b28a:	73fb      	strb	r3, [r7, #15]
  uint8_t index;

  index = 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b290:	e01b      	b.n	800b2ca <Write_Char+0x52>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(UUID)
 800b292:	88fb      	ldrh	r3, [r7, #6]
 800b294:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800b298:	4293      	cmp	r3, r2
 800b29a:	d112      	bne.n	800b2c2 <Write_Char+0x4a>
    {
      case P2P_WRITE_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
        ret = aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 800b29c:	7bbb      	ldrb	r3, [r7, #14]
 800b29e:	4a12      	ldr	r2, [pc, #72]	; (800b2e8 <Write_Char+0x70>)
 800b2a0:	011b      	lsls	r3, r3, #4
 800b2a2:	4413      	add	r3, r2
 800b2a4:	3302      	adds	r3, #2
 800b2a6:	8818      	ldrh	r0, [r3, #0]
 800b2a8:	7bbb      	ldrb	r3, [r7, #14]
 800b2aa:	4a0f      	ldr	r2, [pc, #60]	; (800b2e8 <Write_Char+0x70>)
 800b2ac:	011b      	lsls	r3, r3, #4
 800b2ae:	4413      	add	r3, r2
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	8819      	ldrh	r1, [r3, #0]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	f7fc fc50 	bl	8007b5c <aci_gatt_write_without_resp>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	73fb      	strb	r3, [r7, #15]
                                         aP2PClientContext[index].P2PWriteToServerCharHdle,
                                         2, /* charValueLen */
                                         (uint8_t *)  pPayload);
        break;
 800b2c0:	e000      	b.n	800b2c4 <Write_Char+0x4c>
      default:
        break;
 800b2c2:	bf00      	nop
    }
    index++;
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b2ca:	7bbb      	ldrb	r3, [r7, #14]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d106      	bne.n	800b2de <Write_Char+0x66>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800b2d0:	7bbb      	ldrb	r3, [r7, #14]
 800b2d2:	4a05      	ldr	r2, [pc, #20]	; (800b2e8 <Write_Char+0x70>)
 800b2d4:	011b      	lsls	r3, r3, #4
 800b2d6:	4413      	add	r3, r2
 800b2d8:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1d9      	bne.n	800b292 <Write_Char+0x1a>
  }

  return ret;
 800b2de:	7bfb      	ldrb	r3, [r7, #15]
}/* end Write_Char() */
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	200016f8 	.word	0x200016f8

0800b2ec <Button_Trigger_Received>:

void Button_Trigger_Received(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
  APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON PUSHED - WRITE TO SERVER \n ");
 800b2f2:	4816      	ldr	r0, [pc, #88]	; (800b34c <Button_Trigger_Received+0x60>)
 800b2f4:	f7fd fe64 	bl	8008fc0 <DbgTraceGetFileName>
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	f240 238b 	movw	r3, #651	; 0x28b
 800b2fe:	4a14      	ldr	r2, [pc, #80]	; (800b350 <Button_Trigger_Received+0x64>)
 800b300:	4814      	ldr	r0, [pc, #80]	; (800b354 <Button_Trigger_Received+0x68>)
 800b302:	f000 fee5 	bl	800c0d0 <iprintf>
 800b306:	4814      	ldr	r0, [pc, #80]	; (800b358 <Button_Trigger_Received+0x6c>)
 800b308:	f000 fee2 	bl	800c0d0 <iprintf>
  APP_DBG_MSG(" \n\r");
 800b30c:	480f      	ldr	r0, [pc, #60]	; (800b34c <Button_Trigger_Received+0x60>)
 800b30e:	f7fd fe57 	bl	8008fc0 <DbgTraceGetFileName>
 800b312:	4601      	mov	r1, r0
 800b314:	f44f 7323 	mov.w	r3, #652	; 0x28c
 800b318:	4a0d      	ldr	r2, [pc, #52]	; (800b350 <Button_Trigger_Received+0x64>)
 800b31a:	480e      	ldr	r0, [pc, #56]	; (800b354 <Button_Trigger_Received+0x68>)
 800b31c:	f000 fed8 	bl	800c0d0 <iprintf>
 800b320:	480e      	ldr	r0, [pc, #56]	; (800b35c <Button_Trigger_Received+0x70>)
 800b322:	f000 fed5 	bl	800c0d0 <iprintf>

  uint8_t payload [2];
  Speed_To_Payload(P2P_Client_App_Context.small_motor_goal_speed, payload);
 800b326:	4b0e      	ldr	r3, [pc, #56]	; (800b360 <Button_Trigger_Received+0x74>)
 800b328:	885b      	ldrh	r3, [r3, #2]
 800b32a:	1d3a      	adds	r2, r7, #4
 800b32c:	4611      	mov	r1, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 f926 	bl	800b580 <Speed_To_Payload>

  Write_Char( P2P_WRITE_CHAR_UUID, 0, payload);
 800b334:	1d3b      	adds	r3, r7, #4
 800b336:	461a      	mov	r2, r3
 800b338:	2100      	movs	r1, #0
 800b33a:	f64f 6041 	movw	r0, #65089	; 0xfe41
 800b33e:	f7ff ff9b 	bl	800b278 <Write_Char>

  return;
 800b342:	bf00      	nop
}
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	0800dc48 	.word	0x0800dc48
 800b350:	0800e200 	.word	0x0800e200
 800b354:	0800dc6c 	.word	0x0800dc6c
 800b358:	0800ddcc 	.word	0x0800ddcc
 800b35c:	0800de0c 	.word	0x0800de0c
 800b360:	20001708 	.word	0x20001708

0800b364 <Update_Service>:

void Update_Service()
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 800b36a:	2301      	movs	r3, #1
 800b36c:	80bb      	strh	r3, [r7, #4]
  uint16_t disable = 0x0000;
 800b36e:	2300      	movs	r3, #0
 800b370:	807b      	strh	r3, [r7, #2]
  uint8_t index;

  index = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b376:	e0de      	b.n	800b536 <Update_Service+0x1d2>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(aP2PClientContext[index].state)
 800b378:	79fb      	ldrb	r3, [r7, #7]
 800b37a:	4a77      	ldr	r2, [pc, #476]	; (800b558 <Update_Service+0x1f4>)
 800b37c:	011b      	lsls	r3, r3, #4
 800b37e:	4413      	add	r3, r2
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	3b07      	subs	r3, #7
 800b384:	2b05      	cmp	r3, #5
 800b386:	f200 80d2 	bhi.w	800b52e <Update_Service+0x1ca>
 800b38a:	a201      	add	r2, pc, #4	; (adr r2, 800b390 <Update_Service+0x2c>)
 800b38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b390:	0800b3a9 	.word	0x0800b3a9
 800b394:	0800b3c5 	.word	0x0800b3c5
 800b398:	0800b40b 	.word	0x0800b40b
 800b39c:	0800b455 	.word	0x0800b455
 800b3a0:	0800b49f 	.word	0x0800b49f
 800b3a4:	0800b4e7 	.word	0x0800b4e7
    {
      case APP_BLE_DISCOVER_SERVICES:
        APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
 800b3a8:	486c      	ldr	r0, [pc, #432]	; (800b55c <Update_Service+0x1f8>)
 800b3aa:	f7fd fe09 	bl	8008fc0 <DbgTraceGetFileName>
 800b3ae:	4601      	mov	r1, r0
 800b3b0:	f240 23a3 	movw	r3, #675	; 0x2a3
 800b3b4:	4a6a      	ldr	r2, [pc, #424]	; (800b560 <Update_Service+0x1fc>)
 800b3b6:	486b      	ldr	r0, [pc, #428]	; (800b564 <Update_Service+0x200>)
 800b3b8:	f000 fe8a 	bl	800c0d0 <iprintf>
 800b3bc:	486a      	ldr	r0, [pc, #424]	; (800b568 <Update_Service+0x204>)
 800b3be:	f000 fef5 	bl	800c1ac <puts>
        break;
 800b3c2:	e0b5      	b.n	800b530 <Update_Service+0x1cc>
      case APP_BLE_DISCOVER_CHARACS:
        APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
 800b3c4:	4865      	ldr	r0, [pc, #404]	; (800b55c <Update_Service+0x1f8>)
 800b3c6:	f7fd fdfb 	bl	8008fc0 <DbgTraceGetFileName>
 800b3ca:	4601      	mov	r1, r0
 800b3cc:	f240 23a6 	movw	r3, #678	; 0x2a6
 800b3d0:	4a63      	ldr	r2, [pc, #396]	; (800b560 <Update_Service+0x1fc>)
 800b3d2:	4864      	ldr	r0, [pc, #400]	; (800b564 <Update_Service+0x200>)
 800b3d4:	f000 fe7c 	bl	800c0d0 <iprintf>
 800b3d8:	4864      	ldr	r0, [pc, #400]	; (800b56c <Update_Service+0x208>)
 800b3da:	f000 fee7 	bl	800c1ac <puts>
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800b3de:	79fb      	ldrb	r3, [r7, #7]
 800b3e0:	4a5d      	ldr	r2, [pc, #372]	; (800b558 <Update_Service+0x1f4>)
 800b3e2:	011b      	lsls	r3, r3, #4
 800b3e4:	4413      	add	r3, r2
 800b3e6:	3302      	adds	r3, #2
 800b3e8:	8818      	ldrh	r0, [r3, #0]
 800b3ea:	79fb      	ldrb	r3, [r7, #7]
 800b3ec:	4a5a      	ldr	r2, [pc, #360]	; (800b558 <Update_Service+0x1f4>)
 800b3ee:	011b      	lsls	r3, r3, #4
 800b3f0:	4413      	add	r3, r2
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	8819      	ldrh	r1, [r3, #0]
 800b3f6:	79fb      	ldrb	r3, [r7, #7]
 800b3f8:	4a57      	ldr	r2, [pc, #348]	; (800b558 <Update_Service+0x1f4>)
 800b3fa:	011b      	lsls	r3, r3, #4
 800b3fc:	4413      	add	r3, r2
 800b3fe:	3306      	adds	r3, #6
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	461a      	mov	r2, r3
 800b404:	f7fc fa09 	bl	800781a <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                          aP2PClientContext[index].P2PServiceEndHandle);
        break;
 800b408:	e092      	b.n	800b530 <Update_Service+0x1cc>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No descriptor */
        APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write  Characteristic\n");
 800b40a:	4854      	ldr	r0, [pc, #336]	; (800b55c <Update_Service+0x1f8>)
 800b40c:	f7fd fdd8 	bl	8008fc0 <DbgTraceGetFileName>
 800b410:	4601      	mov	r1, r0
 800b412:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 800b416:	4a52      	ldr	r2, [pc, #328]	; (800b560 <Update_Service+0x1fc>)
 800b418:	4852      	ldr	r0, [pc, #328]	; (800b564 <Update_Service+0x200>)
 800b41a:	f000 fe59 	bl	800c0d0 <iprintf>
 800b41e:	4854      	ldr	r0, [pc, #336]	; (800b570 <Update_Service+0x20c>)
 800b420:	f000 fec4 	bl	800c1ac <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800b424:	79fb      	ldrb	r3, [r7, #7]
 800b426:	4a4c      	ldr	r2, [pc, #304]	; (800b558 <Update_Service+0x1f4>)
 800b428:	011b      	lsls	r3, r3, #4
 800b42a:	4413      	add	r3, r2
 800b42c:	3302      	adds	r3, #2
 800b42e:	8818      	ldrh	r0, [r3, #0]
 800b430:	79fb      	ldrb	r3, [r7, #7]
 800b432:	4a49      	ldr	r2, [pc, #292]	; (800b558 <Update_Service+0x1f4>)
 800b434:	011b      	lsls	r3, r3, #4
 800b436:	4413      	add	r3, r2
 800b438:	3308      	adds	r3, #8
 800b43a:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 800b43c:	79fb      	ldrb	r3, [r7, #7]
 800b43e:	4a46      	ldr	r2, [pc, #280]	; (800b558 <Update_Service+0x1f4>)
 800b440:	011b      	lsls	r3, r3, #4
 800b442:	4413      	add	r3, r2
 800b444:	3308      	adds	r3, #8
 800b446:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800b448:	3302      	adds	r3, #2
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	461a      	mov	r2, r3
 800b44e:	f7fc fa65 	bl	800791c <aci_gatt_disc_all_char_desc>
        break;
 800b452:	e06d      	b.n	800b530 <Update_Service+0x1cc>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification  Characteristic\n");
 800b454:	4841      	ldr	r0, [pc, #260]	; (800b55c <Update_Service+0x1f8>)
 800b456:	f7fd fdb3 	bl	8008fc0 <DbgTraceGetFileName>
 800b45a:	4601      	mov	r1, r0
 800b45c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b460:	4a3f      	ldr	r2, [pc, #252]	; (800b560 <Update_Service+0x1fc>)
 800b462:	4840      	ldr	r0, [pc, #256]	; (800b564 <Update_Service+0x200>)
 800b464:	f000 fe34 	bl	800c0d0 <iprintf>
 800b468:	4842      	ldr	r0, [pc, #264]	; (800b574 <Update_Service+0x210>)
 800b46a:	f000 fe9f 	bl	800c1ac <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800b46e:	79fb      	ldrb	r3, [r7, #7]
 800b470:	4a39      	ldr	r2, [pc, #228]	; (800b558 <Update_Service+0x1f4>)
 800b472:	011b      	lsls	r3, r3, #4
 800b474:	4413      	add	r3, r2
 800b476:	3302      	adds	r3, #2
 800b478:	8818      	ldrh	r0, [r3, #0]
 800b47a:	79fb      	ldrb	r3, [r7, #7]
 800b47c:	4a36      	ldr	r2, [pc, #216]	; (800b558 <Update_Service+0x1f4>)
 800b47e:	011b      	lsls	r3, r3, #4
 800b480:	4413      	add	r3, r2
 800b482:	330c      	adds	r3, #12
 800b484:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 800b486:	79fb      	ldrb	r3, [r7, #7]
 800b488:	4a33      	ldr	r2, [pc, #204]	; (800b558 <Update_Service+0x1f4>)
 800b48a:	011b      	lsls	r3, r3, #4
 800b48c:	4413      	add	r3, r2
 800b48e:	330c      	adds	r3, #12
 800b490:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800b492:	3302      	adds	r3, #2
 800b494:	b29b      	uxth	r3, r3
 800b496:	461a      	mov	r2, r3
 800b498:	f7fc fa40 	bl	800791c <aci_gatt_disc_all_char_desc>
        break;
 800b49c:	e048      	b.n	800b530 <Update_Service+0x1cc>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        APP_DBG_MSG("* GATT : Enable Server Notification\n");
 800b49e:	482f      	ldr	r0, [pc, #188]	; (800b55c <Update_Service+0x1f8>)
 800b4a0:	f7fd fd8e 	bl	8008fc0 <DbgTraceGetFileName>
 800b4a4:	4601      	mov	r1, r0
 800b4a6:	f44f 732e 	mov.w	r3, #696	; 0x2b8
 800b4aa:	4a2d      	ldr	r2, [pc, #180]	; (800b560 <Update_Service+0x1fc>)
 800b4ac:	482d      	ldr	r0, [pc, #180]	; (800b564 <Update_Service+0x200>)
 800b4ae:	f000 fe0f 	bl	800c0d0 <iprintf>
 800b4b2:	4831      	ldr	r0, [pc, #196]	; (800b578 <Update_Service+0x214>)
 800b4b4:	f000 fe7a 	bl	800c1ac <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800b4b8:	79fb      	ldrb	r3, [r7, #7]
 800b4ba:	4a27      	ldr	r2, [pc, #156]	; (800b558 <Update_Service+0x1f4>)
 800b4bc:	011b      	lsls	r3, r3, #4
 800b4be:	4413      	add	r3, r2
 800b4c0:	3302      	adds	r3, #2
 800b4c2:	8818      	ldrh	r0, [r3, #0]
 800b4c4:	79fb      	ldrb	r3, [r7, #7]
 800b4c6:	4a24      	ldr	r2, [pc, #144]	; (800b558 <Update_Service+0x1f4>)
 800b4c8:	011b      	lsls	r3, r3, #4
 800b4ca:	4413      	add	r3, r2
 800b4cc:	330e      	adds	r3, #14
 800b4ce:	8819      	ldrh	r1, [r3, #0]
 800b4d0:	1d3b      	adds	r3, r7, #4
 800b4d2:	2202      	movs	r2, #2
 800b4d4:	f7fc faa3 	bl	8007a1e <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800b4d8:	79fb      	ldrb	r3, [r7, #7]
 800b4da:	4a1f      	ldr	r2, [pc, #124]	; (800b558 <Update_Service+0x1f4>)
 800b4dc:	011b      	lsls	r3, r3, #4
 800b4de:	4413      	add	r3, r2
 800b4e0:	2206      	movs	r2, #6
 800b4e2:	701a      	strb	r2, [r3, #0]
        //BSP_LED_Off(LED_RED);
        break;
 800b4e4:	e024      	b.n	800b530 <Update_Service+0x1cc>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        APP_DBG_MSG("* GATT : Disable Server Notification\n");
 800b4e6:	481d      	ldr	r0, [pc, #116]	; (800b55c <Update_Service+0x1f8>)
 800b4e8:	f7fd fd6a 	bl	8008fc0 <DbgTraceGetFileName>
 800b4ec:	4601      	mov	r1, r0
 800b4ee:	f240 23c1 	movw	r3, #705	; 0x2c1
 800b4f2:	4a1b      	ldr	r2, [pc, #108]	; (800b560 <Update_Service+0x1fc>)
 800b4f4:	481b      	ldr	r0, [pc, #108]	; (800b564 <Update_Service+0x200>)
 800b4f6:	f000 fdeb 	bl	800c0d0 <iprintf>
 800b4fa:	4820      	ldr	r0, [pc, #128]	; (800b57c <Update_Service+0x218>)
 800b4fc:	f000 fe56 	bl	800c1ac <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800b500:	79fb      	ldrb	r3, [r7, #7]
 800b502:	4a15      	ldr	r2, [pc, #84]	; (800b558 <Update_Service+0x1f4>)
 800b504:	011b      	lsls	r3, r3, #4
 800b506:	4413      	add	r3, r2
 800b508:	3302      	adds	r3, #2
 800b50a:	8818      	ldrh	r0, [r3, #0]
 800b50c:	79fb      	ldrb	r3, [r7, #7]
 800b50e:	4a12      	ldr	r2, [pc, #72]	; (800b558 <Update_Service+0x1f4>)
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	4413      	add	r3, r2
 800b514:	330e      	adds	r3, #14
 800b516:	8819      	ldrh	r1, [r3, #0]
 800b518:	1cbb      	adds	r3, r7, #2
 800b51a:	2202      	movs	r2, #2
 800b51c:	f7fc fa7f 	bl	8007a1e <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&disable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800b520:	79fb      	ldrb	r3, [r7, #7]
 800b522:	4a0d      	ldr	r2, [pc, #52]	; (800b558 <Update_Service+0x1f4>)
 800b524:	011b      	lsls	r3, r3, #4
 800b526:	4413      	add	r3, r2
 800b528:	2206      	movs	r2, #6
 800b52a:	701a      	strb	r2, [r3, #0]
        break;
 800b52c:	e000      	b.n	800b530 <Update_Service+0x1cc>
      default:
        break;
 800b52e:	bf00      	nop
    }
    index++;
 800b530:	79fb      	ldrb	r3, [r7, #7]
 800b532:	3301      	adds	r3, #1
 800b534:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b536:	79fb      	ldrb	r3, [r7, #7]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d108      	bne.n	800b54e <Update_Service+0x1ea>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800b53c:	79fb      	ldrb	r3, [r7, #7]
 800b53e:	4a06      	ldr	r2, [pc, #24]	; (800b558 <Update_Service+0x1f4>)
 800b540:	011b      	lsls	r3, r3, #4
 800b542:	4413      	add	r3, r2
 800b544:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b546:	2b00      	cmp	r3, #0
 800b548:	f47f af16 	bne.w	800b378 <Update_Service+0x14>
  }
  return;
 800b54c:	bf00      	nop
 800b54e:	bf00      	nop
}
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	200016f8 	.word	0x200016f8
 800b55c:	0800dc48 	.word	0x0800dc48
 800b560:	0800e218 	.word	0x0800e218
 800b564:	0800dc6c 	.word	0x0800dc6c
 800b568:	0800de10 	.word	0x0800de10
 800b56c:	0800de28 	.word	0x0800de28
 800b570:	0800de50 	.word	0x0800de50
 800b574:	0800de8c 	.word	0x0800de8c
 800b578:	0800ded0 	.word	0x0800ded0
 800b57c:	0800def4 	.word	0x0800def4

0800b580 <Speed_To_Payload>:

void Speed_To_Payload(uint16_t speed, uint8_t payload[2])
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	4603      	mov	r3, r0
 800b588:	6039      	str	r1, [r7, #0]
 800b58a:	80fb      	strh	r3, [r7, #6]
	uint8_t test1 = (speed & 0xFF00) >> 8;
 800b58c:	88fb      	ldrh	r3, [r7, #6]
 800b58e:	0a1b      	lsrs	r3, r3, #8
 800b590:	b29b      	uxth	r3, r3
 800b592:	73fb      	strb	r3, [r7, #15]
	uint8_t test2 = (speed & 0x00FF);
 800b594:	88fb      	ldrh	r3, [r7, #6]
 800b596:	73bb      	strb	r3, [r7, #14]
	payload[0] = (speed & 0xFF00) >> 8; //most significant bits
 800b598:	88fb      	ldrh	r3, [r7, #6]
 800b59a:	0a1b      	lsrs	r3, r3, #8
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	b2da      	uxtb	r2, r3
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	701a      	strb	r2, [r3, #0]
	payload[1] = (speed & 0x00FF); //least significant bits
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	88fa      	ldrh	r2, [r7, #6]
 800b5aa:	b2d2      	uxtb	r2, r2
 800b5ac:	701a      	strb	r2, [r3, #0]
}
 800b5ae:	bf00      	nop
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
	...

0800b5bc <LL_PWR_EnableBootC2>:
{
 800b5bc:	b480      	push	{r7}
 800b5be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b5c0:	4b05      	ldr	r3, [pc, #20]	; (800b5d8 <LL_PWR_EnableBootC2+0x1c>)
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	4a04      	ldr	r2, [pc, #16]	; (800b5d8 <LL_PWR_EnableBootC2+0x1c>)
 800b5c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5ca:	60d3      	str	r3, [r2, #12]
}
 800b5cc:	bf00      	nop
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	58000400 	.word	0x58000400

0800b5dc <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b5e4:	4b06      	ldr	r3, [pc, #24]	; (800b600 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b5e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b5ea:	4905      	ldr	r1, [pc, #20]	; (800b600 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr
 800b600:	58000800 	.word	0x58000800

0800b604 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b60c:	4b05      	ldr	r3, [pc, #20]	; (800b624 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b60e:	6a1a      	ldr	r2, [r3, #32]
 800b610:	4904      	ldr	r1, [pc, #16]	; (800b624 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	4313      	orrs	r3, r2
 800b616:	620b      	str	r3, [r1, #32]
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	58000800 	.word	0x58000800

0800b628 <LL_AHB3_GRP1_EnableClock>:
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4013      	ands	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b64c:	68fb      	ldr	r3, [r7, #12]
}
 800b64e:	bf00      	nop
 800b650:	3714      	adds	r7, #20
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b085      	sub	sp, #20
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b666:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b66a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4313      	orrs	r3, r2
 800b672:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b67a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4013      	ands	r3, r2
 800b682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b684:	68fb      	ldr	r3, [r7, #12]
}
 800b686:	bf00      	nop
 800b688:	3714      	adds	r7, #20
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	601a      	str	r2, [r3, #0]
}
 800b6a6:	bf00      	nop
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr

0800b6b2 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800b6b2:	b480      	push	{r7}
 800b6b4:	b083      	sub	sp, #12
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f043 0201 	orr.w	r2, r3, #1
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	601a      	str	r2, [r3, #0]
}
 800b6c6:	bf00      	nop
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b083      	sub	sp, #12
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	685a      	ldr	r2, [r3, #4]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	041b      	lsls	r3, r3, #16
 800b6e4:	43db      	mvns	r3, r3
 800b6e6:	401a      	ands	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	605a      	str	r2, [r3, #4]
}
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	041b      	lsls	r3, r3, #16
 800b70a:	431a      	orrs	r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	605a      	str	r2, [r3, #4]
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	43db      	mvns	r3, r3
 800b72e:	401a      	ands	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	605a      	str	r2, [r3, #4]
}
 800b734:	bf00      	nop
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	683a      	ldr	r2, [r7, #0]
 800b74e:	609a      	str	r2, [r3, #8]
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	041a      	lsls	r2, r3, #16
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	609a      	str	r2, [r3, #8]
}
 800b76e:	bf00      	nop
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b083      	sub	sp, #12
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68da      	ldr	r2, [r3, #12]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	4013      	ands	r3, r2
 800b78c:	683a      	ldr	r2, [r7, #0]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d101      	bne.n	800b796 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b792:	2301      	movs	r3, #1
 800b794:	e000      	b.n	800b798 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	69da      	ldr	r2, [r3, #28]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d101      	bne.n	800b7c0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e000      	b.n	800b7c2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	370c      	adds	r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr
	...

0800b7d0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b7d4:	2102      	movs	r1, #2
 800b7d6:	4818      	ldr	r0, [pc, #96]	; (800b838 <HW_IPCC_Rx_Handler+0x68>)
 800b7d8:	f7ff ffe4 	bl	800b7a4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d008      	beq.n	800b7f4 <HW_IPCC_Rx_Handler+0x24>
 800b7e2:	4b15      	ldr	r3, [pc, #84]	; (800b838 <HW_IPCC_Rx_Handler+0x68>)
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	f003 0302 	and.w	r3, r3, #2
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d102      	bne.n	800b7f4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800b7ee:	f000 f8d5 	bl	800b99c <HW_IPCC_SYS_EvtHandler>
 800b7f2:	e01e      	b.n	800b832 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	4810      	ldr	r0, [pc, #64]	; (800b838 <HW_IPCC_Rx_Handler+0x68>)
 800b7f8:	f7ff ffd4 	bl	800b7a4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d008      	beq.n	800b814 <HW_IPCC_Rx_Handler+0x44>
 800b802:	4b0d      	ldr	r3, [pc, #52]	; (800b838 <HW_IPCC_Rx_Handler+0x68>)
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	f003 0301 	and.w	r3, r3, #1
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d102      	bne.n	800b814 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800b80e:	f000 f889 	bl	800b924 <HW_IPCC_BLE_EvtHandler>
 800b812:	e00e      	b.n	800b832 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b814:	2108      	movs	r1, #8
 800b816:	4808      	ldr	r0, [pc, #32]	; (800b838 <HW_IPCC_Rx_Handler+0x68>)
 800b818:	f7ff ffc4 	bl	800b7a4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d008      	beq.n	800b834 <HW_IPCC_Rx_Handler+0x64>
 800b822:	4b05      	ldr	r3, [pc, #20]	; (800b838 <HW_IPCC_Rx_Handler+0x68>)
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f003 0308 	and.w	r3, r3, #8
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d102      	bne.n	800b834 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b82e:	f000 f901 	bl	800ba34 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b832:	bf00      	nop
 800b834:	bf00      	nop
}
 800b836:	bd80      	pop	{r7, pc}
 800b838:	58000c00 	.word	0x58000c00

0800b83c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b840:	2102      	movs	r1, #2
 800b842:	4818      	ldr	r0, [pc, #96]	; (800b8a4 <HW_IPCC_Tx_Handler+0x68>)
 800b844:	f7ff ff99 	bl	800b77a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d108      	bne.n	800b860 <HW_IPCC_Tx_Handler+0x24>
 800b84e:	4b15      	ldr	r3, [pc, #84]	; (800b8a4 <HW_IPCC_Tx_Handler+0x68>)
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d102      	bne.n	800b860 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b85a:	f000 f893 	bl	800b984 <HW_IPCC_SYS_CmdEvtHandler>
 800b85e:	e01e      	b.n	800b89e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b860:	2108      	movs	r1, #8
 800b862:	4810      	ldr	r0, [pc, #64]	; (800b8a4 <HW_IPCC_Tx_Handler+0x68>)
 800b864:	f7ff ff89 	bl	800b77a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d108      	bne.n	800b880 <HW_IPCC_Tx_Handler+0x44>
 800b86e:	4b0d      	ldr	r3, [pc, #52]	; (800b8a4 <HW_IPCC_Tx_Handler+0x68>)
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b876:	2b00      	cmp	r3, #0
 800b878:	d102      	bne.n	800b880 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b87a:	f000 f8bd 	bl	800b9f8 <HW_IPCC_MM_FreeBufHandler>
 800b87e:	e00e      	b.n	800b89e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b880:	2120      	movs	r1, #32
 800b882:	4808      	ldr	r0, [pc, #32]	; (800b8a4 <HW_IPCC_Tx_Handler+0x68>)
 800b884:	f7ff ff79 	bl	800b77a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d108      	bne.n	800b8a0 <HW_IPCC_Tx_Handler+0x64>
 800b88e:	4b05      	ldr	r3, [pc, #20]	; (800b8a4 <HW_IPCC_Tx_Handler+0x68>)
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b896:	2b00      	cmp	r3, #0
 800b898:	d102      	bne.n	800b8a0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b89a:	f000 f84f 	bl	800b93c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b89e:	bf00      	nop
 800b8a0:	bf00      	nop
}
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	58000c00 	.word	0x58000c00

0800b8a8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800b8ac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b8b0:	f7ff fed3 	bl	800b65a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800b8b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b8b8:	f7ff fea4 	bl	800b604 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800b8bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b8c0:	f7ff fe8c 	bl	800b5dc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b8c4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b8c6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b8c8:	f7ff fe78 	bl	800b5bc <LL_PWR_EnableBootC2>

  return;
 800b8cc:	bf00      	nop
}
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b8d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b8d8:	f7ff fea6 	bl	800b628 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b8dc:	4806      	ldr	r0, [pc, #24]	; (800b8f8 <HW_IPCC_Init+0x28>)
 800b8de:	f7ff fee8 	bl	800b6b2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b8e2:	4805      	ldr	r0, [pc, #20]	; (800b8f8 <HW_IPCC_Init+0x28>)
 800b8e4:	f7ff fed5 	bl	800b692 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b8e8:	202c      	movs	r0, #44	; 0x2c
 800b8ea:	f7f7 f9ce 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b8ee:	202d      	movs	r0, #45	; 0x2d
 800b8f0:	f7f7 f9cb 	bl	8002c8a <HAL_NVIC_EnableIRQ>

  return;
 800b8f4:	bf00      	nop
}
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	58000c00 	.word	0x58000c00

0800b8fc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b900:	2101      	movs	r1, #1
 800b902:	4802      	ldr	r0, [pc, #8]	; (800b90c <HW_IPCC_BLE_Init+0x10>)
 800b904:	f7ff ff0a 	bl	800b71c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b908:	bf00      	nop
}
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	58000c00 	.word	0x58000c00

0800b910 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b910:	b580      	push	{r7, lr}
 800b912:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800b914:	2101      	movs	r1, #1
 800b916:	4802      	ldr	r0, [pc, #8]	; (800b920 <HW_IPCC_BLE_SendCmd+0x10>)
 800b918:	f7ff ff20 	bl	800b75c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b91c:	bf00      	nop
}
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	58000c00 	.word	0x58000c00

0800b924 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b924:	b580      	push	{r7, lr}
 800b926:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b928:	f7fd f992 	bl	8008c50 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b92c:	2101      	movs	r1, #1
 800b92e:	4802      	ldr	r0, [pc, #8]	; (800b938 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b930:	f7ff ff06 	bl	800b740 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b934:	bf00      	nop
}
 800b936:	bd80      	pop	{r7, pc}
 800b938:	58000c00 	.word	0x58000c00

0800b93c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b940:	2120      	movs	r1, #32
 800b942:	4803      	ldr	r0, [pc, #12]	; (800b950 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b944:	f7ff fed8 	bl	800b6f8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b948:	f7fd f9b2 	bl	8008cb0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b94c:	bf00      	nop
}
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	58000c00 	.word	0x58000c00

0800b954 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b958:	2102      	movs	r1, #2
 800b95a:	4802      	ldr	r0, [pc, #8]	; (800b964 <HW_IPCC_SYS_Init+0x10>)
 800b95c:	f7ff fede 	bl	800b71c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b960:	bf00      	nop
}
 800b962:	bd80      	pop	{r7, pc}
 800b964:	58000c00 	.word	0x58000c00

0800b968 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b96c:	2102      	movs	r1, #2
 800b96e:	4804      	ldr	r0, [pc, #16]	; (800b980 <HW_IPCC_SYS_SendCmd+0x18>)
 800b970:	f7ff fef4 	bl	800b75c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b974:	2102      	movs	r1, #2
 800b976:	4802      	ldr	r0, [pc, #8]	; (800b980 <HW_IPCC_SYS_SendCmd+0x18>)
 800b978:	f7ff feab 	bl	800b6d2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b97c:	bf00      	nop
}
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	58000c00 	.word	0x58000c00

0800b984 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b988:	2102      	movs	r1, #2
 800b98a:	4803      	ldr	r0, [pc, #12]	; (800b998 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b98c:	f7ff feb4 	bl	800b6f8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b990:	f7fd f9de 	bl	8008d50 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b994:	bf00      	nop
}
 800b996:	bd80      	pop	{r7, pc}
 800b998:	58000c00 	.word	0x58000c00

0800b99c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b9a0:	f7fd f9ec 	bl	8008d7c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b9a4:	2102      	movs	r1, #2
 800b9a6:	4802      	ldr	r0, [pc, #8]	; (800b9b0 <HW_IPCC_SYS_EvtHandler+0x14>)
 800b9a8:	f7ff feca 	bl	800b740 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b9ac:	bf00      	nop
}
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	58000c00 	.word	0x58000c00

0800b9b4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b9bc:	2108      	movs	r1, #8
 800b9be:	480c      	ldr	r0, [pc, #48]	; (800b9f0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b9c0:	f7ff fedb 	bl	800b77a <LL_C1_IPCC_IsActiveFlag_CHx>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d007      	beq.n	800b9da <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b9ca:	4a0a      	ldr	r2, [pc, #40]	; (800b9f4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b9d0:	2108      	movs	r1, #8
 800b9d2:	4807      	ldr	r0, [pc, #28]	; (800b9f0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b9d4:	f7ff fe7d 	bl	800b6d2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b9d8:	e006      	b.n	800b9e8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b9de:	2108      	movs	r1, #8
 800b9e0:	4803      	ldr	r0, [pc, #12]	; (800b9f0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b9e2:	f7ff febb 	bl	800b75c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b9e6:	bf00      	nop
}
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	58000c00 	.word	0x58000c00
 800b9f4:	20001710 	.word	0x20001710

0800b9f8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b9fc:	2108      	movs	r1, #8
 800b9fe:	4806      	ldr	r0, [pc, #24]	; (800ba18 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ba00:	f7ff fe7a 	bl	800b6f8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ba0a:	2108      	movs	r1, #8
 800ba0c:	4802      	ldr	r0, [pc, #8]	; (800ba18 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800ba0e:	f7ff fea5 	bl	800b75c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800ba12:	bf00      	nop
}
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	58000c00 	.word	0x58000c00
 800ba1c:	20001710 	.word	0x20001710

0800ba20 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ba24:	2108      	movs	r1, #8
 800ba26:	4802      	ldr	r0, [pc, #8]	; (800ba30 <HW_IPCC_TRACES_Init+0x10>)
 800ba28:	f7ff fe78 	bl	800b71c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ba2c:	bf00      	nop
}
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	58000c00 	.word	0x58000c00

0800ba34 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800ba38:	f7fd fa48 	bl	8008ecc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ba3c:	2108      	movs	r1, #8
 800ba3e:	4802      	ldr	r0, [pc, #8]	; (800ba48 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800ba40:	f7ff fe7e 	bl	800b740 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ba44:	bf00      	nop
}
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	58000c00 	.word	0x58000c00

0800ba4c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ba50:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <UTIL_LPM_Init+0x1c>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ba56:	4b05      	ldr	r3, [pc, #20]	; (800ba6c <UTIL_LPM_Init+0x20>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ba5c:	bf00      	nop
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	20001714 	.word	0x20001714
 800ba6c:	20001718 	.word	0x20001718

0800ba70 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ba70:	b480      	push	{r7}
 800ba72:	b087      	sub	sp, #28
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba7c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba80:	613b      	str	r3, [r7, #16]
  return(result);
 800ba82:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ba84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba86:	b672      	cpsid	i
}
 800ba88:	bf00      	nop
  
  switch(state)
 800ba8a:	78fb      	ldrb	r3, [r7, #3]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d008      	beq.n	800baa2 <UTIL_LPM_SetOffMode+0x32>
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d10e      	bne.n	800bab2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ba94:	4b0d      	ldr	r3, [pc, #52]	; (800bacc <UTIL_LPM_SetOffMode+0x5c>)
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	4a0b      	ldr	r2, [pc, #44]	; (800bacc <UTIL_LPM_SetOffMode+0x5c>)
 800ba9e:	6013      	str	r3, [r2, #0]
      break;
 800baa0:	e008      	b.n	800bab4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	43da      	mvns	r2, r3
 800baa6:	4b09      	ldr	r3, [pc, #36]	; (800bacc <UTIL_LPM_SetOffMode+0x5c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4013      	ands	r3, r2
 800baac:	4a07      	ldr	r2, [pc, #28]	; (800bacc <UTIL_LPM_SetOffMode+0x5c>)
 800baae:	6013      	str	r3, [r2, #0]
      break;
 800bab0:	e000      	b.n	800bab4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800bab2:	bf00      	nop
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f383 8810 	msr	PRIMASK, r3
}
 800babe:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bac0:	bf00      	nop
 800bac2:	371c      	adds	r7, #28
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	20001718 	.word	0x20001718

0800bad0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b090      	sub	sp, #64	; 0x40
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bad8:	4b73      	ldr	r3, [pc, #460]	; (800bca8 <UTIL_SEQ_Run+0x1d8>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800bade:	4b72      	ldr	r3, [pc, #456]	; (800bca8 <UTIL_SEQ_Run+0x1d8>)
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4013      	ands	r3, r2
 800bae6:	4a70      	ldr	r2, [pc, #448]	; (800bca8 <UTIL_SEQ_Run+0x1d8>)
 800bae8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800baea:	4b70      	ldr	r3, [pc, #448]	; (800bcac <UTIL_SEQ_Run+0x1dc>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800baf0:	4b6f      	ldr	r3, [pc, #444]	; (800bcb0 <UTIL_SEQ_Run+0x1e0>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800baf6:	4b6f      	ldr	r3, [pc, #444]	; (800bcb4 <UTIL_SEQ_Run+0x1e4>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800bafc:	4b6e      	ldr	r3, [pc, #440]	; (800bcb8 <UTIL_SEQ_Run+0x1e8>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bb02:	e08d      	b.n	800bc20 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800bb04:	2300      	movs	r3, #0
 800bb06:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bb08:	e002      	b.n	800bb10 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800bb0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bb10:	4a6a      	ldr	r2, [pc, #424]	; (800bcbc <UTIL_SEQ_Run+0x1ec>)
 800bb12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1a:	401a      	ands	r2, r3
 800bb1c:	4b62      	ldr	r3, [pc, #392]	; (800bca8 <UTIL_SEQ_Run+0x1d8>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4013      	ands	r3, r2
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d0f1      	beq.n	800bb0a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800bb26:	4a65      	ldr	r2, [pc, #404]	; (800bcbc <UTIL_SEQ_Run+0x1ec>)
 800bb28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb2a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	401a      	ands	r2, r3
 800bb32:	4b5d      	ldr	r3, [pc, #372]	; (800bca8 <UTIL_SEQ_Run+0x1d8>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4013      	ands	r3, r2
 800bb38:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800bb3a:	4a60      	ldr	r2, [pc, #384]	; (800bcbc <UTIL_SEQ_Run+0x1ec>)
 800bb3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	4413      	add	r3, r2
 800bb42:	685a      	ldr	r2, [r3, #4]
 800bb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb46:	4013      	ands	r3, r2
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d106      	bne.n	800bb5a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bb4c:	4a5b      	ldr	r2, [pc, #364]	; (800bcbc <UTIL_SEQ_Run+0x1ec>)
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb50:	00db      	lsls	r3, r3, #3
 800bb52:	4413      	add	r3, r2
 800bb54:	f04f 32ff 	mov.w	r2, #4294967295
 800bb58:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bb5a:	4a58      	ldr	r2, [pc, #352]	; (800bcbc <UTIL_SEQ_Run+0x1ec>)
 800bb5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb5e:	00db      	lsls	r3, r3, #3
 800bb60:	4413      	add	r3, r2
 800bb62:	685a      	ldr	r2, [r3, #4]
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	4013      	ands	r3, r2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 f9b3 	bl	800bed4 <SEQ_BitPosition>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	461a      	mov	r2, r3
 800bb72:	4b53      	ldr	r3, [pc, #332]	; (800bcc0 <UTIL_SEQ_Run+0x1f0>)
 800bb74:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bb76:	4a51      	ldr	r2, [pc, #324]	; (800bcbc <UTIL_SEQ_Run+0x1ec>)
 800bb78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	4413      	add	r3, r2
 800bb7e:	685a      	ldr	r2, [r3, #4]
 800bb80:	4b4f      	ldr	r3, [pc, #316]	; (800bcc0 <UTIL_SEQ_Run+0x1f0>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2101      	movs	r1, #1
 800bb86:	fa01 f303 	lsl.w	r3, r1, r3
 800bb8a:	43db      	mvns	r3, r3
 800bb8c:	401a      	ands	r2, r3
 800bb8e:	494b      	ldr	r1, [pc, #300]	; (800bcbc <UTIL_SEQ_Run+0x1ec>)
 800bb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	440b      	add	r3, r1
 800bb96:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb98:	f3ef 8310 	mrs	r3, PRIMASK
 800bb9c:	61bb      	str	r3, [r7, #24]
  return(result);
 800bb9e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bba0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bba2:	b672      	cpsid	i
}
 800bba4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800bba6:	4b46      	ldr	r3, [pc, #280]	; (800bcc0 <UTIL_SEQ_Run+0x1f0>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb0:	43da      	mvns	r2, r3
 800bbb2:	4b3e      	ldr	r3, [pc, #248]	; (800bcac <UTIL_SEQ_Run+0x1dc>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	4a3c      	ldr	r2, [pc, #240]	; (800bcac <UTIL_SEQ_Run+0x1dc>)
 800bbba:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbc0:	e013      	b.n	800bbea <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800bbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	4a3d      	ldr	r2, [pc, #244]	; (800bcbc <UTIL_SEQ_Run+0x1ec>)
 800bbc8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bbcc:	4b3c      	ldr	r3, [pc, #240]	; (800bcc0 <UTIL_SEQ_Run+0x1f0>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd6:	43da      	mvns	r2, r3
 800bbd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	400a      	ands	r2, r1
 800bbde:	4937      	ldr	r1, [pc, #220]	; (800bcbc <UTIL_SEQ_Run+0x1ec>)
 800bbe0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1e8      	bne.n	800bbc2 <UTIL_SEQ_Run+0xf2>
 800bbf0:	6a3b      	ldr	r3, [r7, #32]
 800bbf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	f383 8810 	msr	PRIMASK, r3
}
 800bbfa:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800bbfc:	4b30      	ldr	r3, [pc, #192]	; (800bcc0 <UTIL_SEQ_Run+0x1f0>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a30      	ldr	r2, [pc, #192]	; (800bcc4 <UTIL_SEQ_Run+0x1f4>)
 800bc02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc06:	4798      	blx	r3

    local_taskset = TaskSet;
 800bc08:	4b28      	ldr	r3, [pc, #160]	; (800bcac <UTIL_SEQ_Run+0x1dc>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800bc0e:	4b28      	ldr	r3, [pc, #160]	; (800bcb0 <UTIL_SEQ_Run+0x1e0>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800bc14:	4b27      	ldr	r3, [pc, #156]	; (800bcb4 <UTIL_SEQ_Run+0x1e4>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800bc1a:	4b27      	ldr	r3, [pc, #156]	; (800bcb8 <UTIL_SEQ_Run+0x1e8>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bc20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	401a      	ands	r2, r3
 800bc26:	4b20      	ldr	r3, [pc, #128]	; (800bca8 <UTIL_SEQ_Run+0x1d8>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d005      	beq.n	800bc3c <UTIL_SEQ_Run+0x16c>
 800bc30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	4013      	ands	r3, r2
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f43f af64 	beq.w	800bb04 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800bc3c:	4b20      	ldr	r3, [pc, #128]	; (800bcc0 <UTIL_SEQ_Run+0x1f0>)
 800bc3e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc42:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800bc44:	f000 f938 	bl	800beb8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc48:	f3ef 8310 	mrs	r3, PRIMASK
 800bc4c:	613b      	str	r3, [r7, #16]
  return(result);
 800bc4e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800bc50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc52:	b672      	cpsid	i
}
 800bc54:	bf00      	nop
  local_taskset = TaskSet;
 800bc56:	4b15      	ldr	r3, [pc, #84]	; (800bcac <UTIL_SEQ_Run+0x1dc>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800bc5c:	4b14      	ldr	r3, [pc, #80]	; (800bcb0 <UTIL_SEQ_Run+0x1e0>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800bc62:	4b14      	ldr	r3, [pc, #80]	; (800bcb4 <UTIL_SEQ_Run+0x1e4>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800bc68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	401a      	ands	r2, r3
 800bc6e:	4b0e      	ldr	r3, [pc, #56]	; (800bca8 <UTIL_SEQ_Run+0x1d8>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4013      	ands	r3, r2
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d107      	bne.n	800bc88 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800bc78:	4b0f      	ldr	r3, [pc, #60]	; (800bcb8 <UTIL_SEQ_Run+0x1e8>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7e:	4013      	ands	r3, r2
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800bc84:	f7f5 f8d6 	bl	8000e34 <UTIL_SEQ_Idle>
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f383 8810 	msr	PRIMASK, r3
}
 800bc92:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800bc94:	f000 f917 	bl	800bec6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800bc98:	4a03      	ldr	r2, [pc, #12]	; (800bca8 <UTIL_SEQ_Run+0x1d8>)
 800bc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9c:	6013      	str	r3, [r2, #0]

  return;
 800bc9e:	bf00      	nop
}
 800bca0:	3740      	adds	r7, #64	; 0x40
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	20000018 	.word	0x20000018
 800bcac:	2000171c 	.word	0x2000171c
 800bcb0:	20001720 	.word	0x20001720
 800bcb4:	20000014 	.word	0x20000014
 800bcb8:	20001724 	.word	0x20001724
 800bcbc:	200017ac 	.word	0x200017ac
 800bcc0:	20001728 	.word	0x20001728
 800bcc4:	2000172c 	.word	0x2000172c

0800bcc8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcd4:	f3ef 8310 	mrs	r3, PRIMASK
 800bcd8:	617b      	str	r3, [r7, #20]
  return(result);
 800bcda:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800bcdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcde:	b672      	cpsid	i
}
 800bce0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f000 f8f6 	bl	800bed4 <SEQ_BitPosition>
 800bce8:	4603      	mov	r3, r0
 800bcea:	4619      	mov	r1, r3
 800bcec:	4a06      	ldr	r2, [pc, #24]	; (800bd08 <UTIL_SEQ_RegTask+0x40>)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	f383 8810 	msr	PRIMASK, r3
}
 800bcfe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800bd00:	bf00      	nop
}
 800bd02:	3720      	adds	r7, #32
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	2000172c 	.word	0x2000172c

0800bd0c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd16:	f3ef 8310 	mrs	r3, PRIMASK
 800bd1a:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bd1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd20:	b672      	cpsid	i
}
 800bd22:	bf00      	nop

  TaskSet |= TaskId_bm;
 800bd24:	4b0d      	ldr	r3, [pc, #52]	; (800bd5c <UTIL_SEQ_SetTask+0x50>)
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	4a0b      	ldr	r2, [pc, #44]	; (800bd5c <UTIL_SEQ_SetTask+0x50>)
 800bd2e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800bd30:	4a0b      	ldr	r2, [pc, #44]	; (800bd60 <UTIL_SEQ_SetTask+0x54>)
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	431a      	orrs	r2, r3
 800bd3c:	4908      	ldr	r1, [pc, #32]	; (800bd60 <UTIL_SEQ_SetTask+0x54>)
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	f383 8810 	msr	PRIMASK, r3
}
 800bd4e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bd50:	bf00      	nop
}
 800bd52:	371c      	adds	r7, #28
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	2000171c 	.word	0x2000171c
 800bd60:	200017ac 	.word	0x200017ac

0800bd64 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bd64:	b480      	push	{r7}
 800bd66:	b087      	sub	sp, #28
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd6c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd70:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd72:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bd74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd76:	b672      	cpsid	i
}
 800bd78:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	43da      	mvns	r2, r3
 800bd7e:	4b08      	ldr	r3, [pc, #32]	; (800bda0 <UTIL_SEQ_PauseTask+0x3c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4013      	ands	r3, r2
 800bd84:	4a06      	ldr	r2, [pc, #24]	; (800bda0 <UTIL_SEQ_PauseTask+0x3c>)
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	f383 8810 	msr	PRIMASK, r3
}
 800bd92:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bd94:	bf00      	nop
}
 800bd96:	371c      	adds	r7, #28
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr
 800bda0:	20000014 	.word	0x20000014

0800bda4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b087      	sub	sp, #28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdac:	f3ef 8310 	mrs	r3, PRIMASK
 800bdb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bdb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bdb6:	b672      	cpsid	i
}
 800bdb8:	bf00      	nop

  TaskMask |= TaskId_bm;
 800bdba:	4b09      	ldr	r3, [pc, #36]	; (800bde0 <UTIL_SEQ_ResumeTask+0x3c>)
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	4a07      	ldr	r2, [pc, #28]	; (800bde0 <UTIL_SEQ_ResumeTask+0x3c>)
 800bdc4:	6013      	str	r3, [r2, #0]
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	f383 8810 	msr	PRIMASK, r3
}
 800bdd0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bdd2:	bf00      	nop
}
 800bdd4:	371c      	adds	r7, #28
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	20000014 	.word	0x20000014

0800bde4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800bde4:	b480      	push	{r7}
 800bde6:	b087      	sub	sp, #28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdec:	f3ef 8310 	mrs	r3, PRIMASK
 800bdf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bdf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bdf6:	b672      	cpsid	i
}
 800bdf8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800bdfa:	4b09      	ldr	r3, [pc, #36]	; (800be20 <UTIL_SEQ_SetEvt+0x3c>)
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4313      	orrs	r3, r2
 800be02:	4a07      	ldr	r2, [pc, #28]	; (800be20 <UTIL_SEQ_SetEvt+0x3c>)
 800be04:	6013      	str	r3, [r2, #0]
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	f383 8810 	msr	PRIMASK, r3
}
 800be10:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800be12:	bf00      	nop
}
 800be14:	371c      	adds	r7, #28
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	20001720 	.word	0x20001720

0800be24 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800be2c:	4b1f      	ldr	r3, [pc, #124]	; (800beac <UTIL_SEQ_WaitEvt+0x88>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800be32:	4b1e      	ldr	r3, [pc, #120]	; (800beac <UTIL_SEQ_WaitEvt+0x88>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be3a:	d102      	bne.n	800be42 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800be3c:	2300      	movs	r3, #0
 800be3e:	61fb      	str	r3, [r7, #28]
 800be40:	e005      	b.n	800be4e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800be42:	4b1a      	ldr	r3, [pc, #104]	; (800beac <UTIL_SEQ_WaitEvt+0x88>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2201      	movs	r2, #1
 800be48:	fa02 f303 	lsl.w	r3, r2, r3
 800be4c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800be4e:	4b18      	ldr	r3, [pc, #96]	; (800beb0 <UTIL_SEQ_WaitEvt+0x8c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800be54:	4a16      	ldr	r2, [pc, #88]	; (800beb0 <UTIL_SEQ_WaitEvt+0x8c>)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800be5a:	e003      	b.n	800be64 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800be5c:	6879      	ldr	r1, [r7, #4]
 800be5e:	69f8      	ldr	r0, [r7, #28]
 800be60:	f7f4 ffef 	bl	8000e42 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800be64:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <UTIL_SEQ_WaitEvt+0x90>)
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4013      	ands	r3, r2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d0f5      	beq.n	800be5c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800be70:	4a0e      	ldr	r2, [pc, #56]	; (800beac <UTIL_SEQ_WaitEvt+0x88>)
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be76:	f3ef 8310 	mrs	r3, PRIMASK
 800be7a:	60bb      	str	r3, [r7, #8]
  return(result);
 800be7c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800be7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800be80:	b672      	cpsid	i
}
 800be82:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	43da      	mvns	r2, r3
 800be88:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <UTIL_SEQ_WaitEvt+0x90>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4013      	ands	r3, r2
 800be8e:	4a09      	ldr	r2, [pc, #36]	; (800beb4 <UTIL_SEQ_WaitEvt+0x90>)
 800be90:	6013      	str	r3, [r2, #0]
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f383 8810 	msr	PRIMASK, r3
}
 800be9c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800be9e:	4a04      	ldr	r2, [pc, #16]	; (800beb0 <UTIL_SEQ_WaitEvt+0x8c>)
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	6013      	str	r3, [r2, #0]
  return;
 800bea4:	bf00      	nop
}
 800bea6:	3720      	adds	r7, #32
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	20001728 	.word	0x20001728
 800beb0:	20001724 	.word	0x20001724
 800beb4:	20001720 	.word	0x20001720

0800beb8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800beb8:	b480      	push	{r7}
 800beba:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800bebc:	bf00      	nop
}
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800bec6:	b480      	push	{r7}
 800bec8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800beca:	bf00      	nop
}
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800bedc:	2300      	movs	r3, #0
 800bede:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	0c1b      	lsrs	r3, r3, #16
 800bee8:	041b      	lsls	r3, r3, #16
 800beea:	2b00      	cmp	r3, #0
 800beec:	d104      	bne.n	800bef8 <SEQ_BitPosition+0x24>
 800beee:	2310      	movs	r3, #16
 800bef0:	73fb      	strb	r3, [r7, #15]
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	041b      	lsls	r3, r3, #16
 800bef6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d105      	bne.n	800bf0e <SEQ_BitPosition+0x3a>
 800bf02:	7bfb      	ldrb	r3, [r7, #15]
 800bf04:	3308      	adds	r3, #8
 800bf06:	73fb      	strb	r3, [r7, #15]
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	021b      	lsls	r3, r3, #8
 800bf0c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d105      	bne.n	800bf24 <SEQ_BitPosition+0x50>
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	73fb      	strb	r3, [r7, #15]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	011b      	lsls	r3, r3, #4
 800bf22:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	0f1b      	lsrs	r3, r3, #28
 800bf28:	4a07      	ldr	r2, [pc, #28]	; (800bf48 <SEQ_BitPosition+0x74>)
 800bf2a:	5cd2      	ldrb	r2, [r2, r3]
 800bf2c:	7bfb      	ldrb	r3, [r7, #15]
 800bf2e:	4413      	add	r3, r2
 800bf30:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800bf32:	7bfb      	ldrb	r3, [r7, #15]
 800bf34:	f1c3 031f 	rsb	r3, r3, #31
 800bf38:	b2db      	uxtb	r3, r3
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	0800e228 	.word	0x0800e228

0800bf4c <std>:
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	b510      	push	{r4, lr}
 800bf50:	4604      	mov	r4, r0
 800bf52:	e9c0 3300 	strd	r3, r3, [r0]
 800bf56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf5a:	6083      	str	r3, [r0, #8]
 800bf5c:	8181      	strh	r1, [r0, #12]
 800bf5e:	6643      	str	r3, [r0, #100]	; 0x64
 800bf60:	81c2      	strh	r2, [r0, #14]
 800bf62:	6183      	str	r3, [r0, #24]
 800bf64:	4619      	mov	r1, r3
 800bf66:	2208      	movs	r2, #8
 800bf68:	305c      	adds	r0, #92	; 0x5c
 800bf6a:	f000 f9ff 	bl	800c36c <memset>
 800bf6e:	4b0d      	ldr	r3, [pc, #52]	; (800bfa4 <std+0x58>)
 800bf70:	6263      	str	r3, [r4, #36]	; 0x24
 800bf72:	4b0d      	ldr	r3, [pc, #52]	; (800bfa8 <std+0x5c>)
 800bf74:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf76:	4b0d      	ldr	r3, [pc, #52]	; (800bfac <std+0x60>)
 800bf78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf7a:	4b0d      	ldr	r3, [pc, #52]	; (800bfb0 <std+0x64>)
 800bf7c:	6323      	str	r3, [r4, #48]	; 0x30
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <std+0x68>)
 800bf80:	6224      	str	r4, [r4, #32]
 800bf82:	429c      	cmp	r4, r3
 800bf84:	d006      	beq.n	800bf94 <std+0x48>
 800bf86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bf8a:	4294      	cmp	r4, r2
 800bf8c:	d002      	beq.n	800bf94 <std+0x48>
 800bf8e:	33d0      	adds	r3, #208	; 0xd0
 800bf90:	429c      	cmp	r4, r3
 800bf92:	d105      	bne.n	800bfa0 <std+0x54>
 800bf94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf9c:	f000 ba76 	b.w	800c48c <__retarget_lock_init_recursive>
 800bfa0:	bd10      	pop	{r4, pc}
 800bfa2:	bf00      	nop
 800bfa4:	0800c1bd 	.word	0x0800c1bd
 800bfa8:	0800c1df 	.word	0x0800c1df
 800bfac:	0800c217 	.word	0x0800c217
 800bfb0:	0800c23b 	.word	0x0800c23b
 800bfb4:	200017bc 	.word	0x200017bc

0800bfb8 <stdio_exit_handler>:
 800bfb8:	4a02      	ldr	r2, [pc, #8]	; (800bfc4 <stdio_exit_handler+0xc>)
 800bfba:	4903      	ldr	r1, [pc, #12]	; (800bfc8 <stdio_exit_handler+0x10>)
 800bfbc:	4803      	ldr	r0, [pc, #12]	; (800bfcc <stdio_exit_handler+0x14>)
 800bfbe:	f000 b869 	b.w	800c094 <_fwalk_sglue>
 800bfc2:	bf00      	nop
 800bfc4:	2000001c 	.word	0x2000001c
 800bfc8:	0800cd55 	.word	0x0800cd55
 800bfcc:	20000028 	.word	0x20000028

0800bfd0 <cleanup_stdio>:
 800bfd0:	6841      	ldr	r1, [r0, #4]
 800bfd2:	4b0c      	ldr	r3, [pc, #48]	; (800c004 <cleanup_stdio+0x34>)
 800bfd4:	4299      	cmp	r1, r3
 800bfd6:	b510      	push	{r4, lr}
 800bfd8:	4604      	mov	r4, r0
 800bfda:	d001      	beq.n	800bfe0 <cleanup_stdio+0x10>
 800bfdc:	f000 feba 	bl	800cd54 <_fflush_r>
 800bfe0:	68a1      	ldr	r1, [r4, #8]
 800bfe2:	4b09      	ldr	r3, [pc, #36]	; (800c008 <cleanup_stdio+0x38>)
 800bfe4:	4299      	cmp	r1, r3
 800bfe6:	d002      	beq.n	800bfee <cleanup_stdio+0x1e>
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f000 feb3 	bl	800cd54 <_fflush_r>
 800bfee:	68e1      	ldr	r1, [r4, #12]
 800bff0:	4b06      	ldr	r3, [pc, #24]	; (800c00c <cleanup_stdio+0x3c>)
 800bff2:	4299      	cmp	r1, r3
 800bff4:	d004      	beq.n	800c000 <cleanup_stdio+0x30>
 800bff6:	4620      	mov	r0, r4
 800bff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bffc:	f000 beaa 	b.w	800cd54 <_fflush_r>
 800c000:	bd10      	pop	{r4, pc}
 800c002:	bf00      	nop
 800c004:	200017bc 	.word	0x200017bc
 800c008:	20001824 	.word	0x20001824
 800c00c:	2000188c 	.word	0x2000188c

0800c010 <global_stdio_init.part.0>:
 800c010:	b510      	push	{r4, lr}
 800c012:	4b0b      	ldr	r3, [pc, #44]	; (800c040 <global_stdio_init.part.0+0x30>)
 800c014:	4c0b      	ldr	r4, [pc, #44]	; (800c044 <global_stdio_init.part.0+0x34>)
 800c016:	4a0c      	ldr	r2, [pc, #48]	; (800c048 <global_stdio_init.part.0+0x38>)
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	4620      	mov	r0, r4
 800c01c:	2200      	movs	r2, #0
 800c01e:	2104      	movs	r1, #4
 800c020:	f7ff ff94 	bl	800bf4c <std>
 800c024:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c028:	2201      	movs	r2, #1
 800c02a:	2109      	movs	r1, #9
 800c02c:	f7ff ff8e 	bl	800bf4c <std>
 800c030:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c034:	2202      	movs	r2, #2
 800c036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c03a:	2112      	movs	r1, #18
 800c03c:	f7ff bf86 	b.w	800bf4c <std>
 800c040:	200018f4 	.word	0x200018f4
 800c044:	200017bc 	.word	0x200017bc
 800c048:	0800bfb9 	.word	0x0800bfb9

0800c04c <__sfp_lock_acquire>:
 800c04c:	4801      	ldr	r0, [pc, #4]	; (800c054 <__sfp_lock_acquire+0x8>)
 800c04e:	f000 ba1e 	b.w	800c48e <__retarget_lock_acquire_recursive>
 800c052:	bf00      	nop
 800c054:	200018fd 	.word	0x200018fd

0800c058 <__sfp_lock_release>:
 800c058:	4801      	ldr	r0, [pc, #4]	; (800c060 <__sfp_lock_release+0x8>)
 800c05a:	f000 ba19 	b.w	800c490 <__retarget_lock_release_recursive>
 800c05e:	bf00      	nop
 800c060:	200018fd 	.word	0x200018fd

0800c064 <__sinit>:
 800c064:	b510      	push	{r4, lr}
 800c066:	4604      	mov	r4, r0
 800c068:	f7ff fff0 	bl	800c04c <__sfp_lock_acquire>
 800c06c:	6a23      	ldr	r3, [r4, #32]
 800c06e:	b11b      	cbz	r3, 800c078 <__sinit+0x14>
 800c070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c074:	f7ff bff0 	b.w	800c058 <__sfp_lock_release>
 800c078:	4b04      	ldr	r3, [pc, #16]	; (800c08c <__sinit+0x28>)
 800c07a:	6223      	str	r3, [r4, #32]
 800c07c:	4b04      	ldr	r3, [pc, #16]	; (800c090 <__sinit+0x2c>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1f5      	bne.n	800c070 <__sinit+0xc>
 800c084:	f7ff ffc4 	bl	800c010 <global_stdio_init.part.0>
 800c088:	e7f2      	b.n	800c070 <__sinit+0xc>
 800c08a:	bf00      	nop
 800c08c:	0800bfd1 	.word	0x0800bfd1
 800c090:	200018f4 	.word	0x200018f4

0800c094 <_fwalk_sglue>:
 800c094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c098:	4607      	mov	r7, r0
 800c09a:	4688      	mov	r8, r1
 800c09c:	4614      	mov	r4, r2
 800c09e:	2600      	movs	r6, #0
 800c0a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0a4:	f1b9 0901 	subs.w	r9, r9, #1
 800c0a8:	d505      	bpl.n	800c0b6 <_fwalk_sglue+0x22>
 800c0aa:	6824      	ldr	r4, [r4, #0]
 800c0ac:	2c00      	cmp	r4, #0
 800c0ae:	d1f7      	bne.n	800c0a0 <_fwalk_sglue+0xc>
 800c0b0:	4630      	mov	r0, r6
 800c0b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b6:	89ab      	ldrh	r3, [r5, #12]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d907      	bls.n	800c0cc <_fwalk_sglue+0x38>
 800c0bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	d003      	beq.n	800c0cc <_fwalk_sglue+0x38>
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	47c0      	blx	r8
 800c0ca:	4306      	orrs	r6, r0
 800c0cc:	3568      	adds	r5, #104	; 0x68
 800c0ce:	e7e9      	b.n	800c0a4 <_fwalk_sglue+0x10>

0800c0d0 <iprintf>:
 800c0d0:	b40f      	push	{r0, r1, r2, r3}
 800c0d2:	b507      	push	{r0, r1, r2, lr}
 800c0d4:	4906      	ldr	r1, [pc, #24]	; (800c0f0 <iprintf+0x20>)
 800c0d6:	ab04      	add	r3, sp, #16
 800c0d8:	6808      	ldr	r0, [r1, #0]
 800c0da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0de:	6881      	ldr	r1, [r0, #8]
 800c0e0:	9301      	str	r3, [sp, #4]
 800c0e2:	f000 fb07 	bl	800c6f4 <_vfiprintf_r>
 800c0e6:	b003      	add	sp, #12
 800c0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0ec:	b004      	add	sp, #16
 800c0ee:	4770      	bx	lr
 800c0f0:	20000074 	.word	0x20000074

0800c0f4 <putchar>:
 800c0f4:	4b02      	ldr	r3, [pc, #8]	; (800c100 <putchar+0xc>)
 800c0f6:	4601      	mov	r1, r0
 800c0f8:	6818      	ldr	r0, [r3, #0]
 800c0fa:	6882      	ldr	r2, [r0, #8]
 800c0fc:	f000 beb4 	b.w	800ce68 <_putc_r>
 800c100:	20000074 	.word	0x20000074

0800c104 <_puts_r>:
 800c104:	6a03      	ldr	r3, [r0, #32]
 800c106:	b570      	push	{r4, r5, r6, lr}
 800c108:	6884      	ldr	r4, [r0, #8]
 800c10a:	4605      	mov	r5, r0
 800c10c:	460e      	mov	r6, r1
 800c10e:	b90b      	cbnz	r3, 800c114 <_puts_r+0x10>
 800c110:	f7ff ffa8 	bl	800c064 <__sinit>
 800c114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c116:	07db      	lsls	r3, r3, #31
 800c118:	d405      	bmi.n	800c126 <_puts_r+0x22>
 800c11a:	89a3      	ldrh	r3, [r4, #12]
 800c11c:	0598      	lsls	r0, r3, #22
 800c11e:	d402      	bmi.n	800c126 <_puts_r+0x22>
 800c120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c122:	f000 f9b4 	bl	800c48e <__retarget_lock_acquire_recursive>
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	0719      	lsls	r1, r3, #28
 800c12a:	d513      	bpl.n	800c154 <_puts_r+0x50>
 800c12c:	6923      	ldr	r3, [r4, #16]
 800c12e:	b18b      	cbz	r3, 800c154 <_puts_r+0x50>
 800c130:	3e01      	subs	r6, #1
 800c132:	68a3      	ldr	r3, [r4, #8]
 800c134:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c138:	3b01      	subs	r3, #1
 800c13a:	60a3      	str	r3, [r4, #8]
 800c13c:	b9e9      	cbnz	r1, 800c17a <_puts_r+0x76>
 800c13e:	2b00      	cmp	r3, #0
 800c140:	da2e      	bge.n	800c1a0 <_puts_r+0x9c>
 800c142:	4622      	mov	r2, r4
 800c144:	210a      	movs	r1, #10
 800c146:	4628      	mov	r0, r5
 800c148:	f000 f87b 	bl	800c242 <__swbuf_r>
 800c14c:	3001      	adds	r0, #1
 800c14e:	d007      	beq.n	800c160 <_puts_r+0x5c>
 800c150:	250a      	movs	r5, #10
 800c152:	e007      	b.n	800c164 <_puts_r+0x60>
 800c154:	4621      	mov	r1, r4
 800c156:	4628      	mov	r0, r5
 800c158:	f000 f8b0 	bl	800c2bc <__swsetup_r>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	d0e7      	beq.n	800c130 <_puts_r+0x2c>
 800c160:	f04f 35ff 	mov.w	r5, #4294967295
 800c164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c166:	07da      	lsls	r2, r3, #31
 800c168:	d405      	bmi.n	800c176 <_puts_r+0x72>
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	059b      	lsls	r3, r3, #22
 800c16e:	d402      	bmi.n	800c176 <_puts_r+0x72>
 800c170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c172:	f000 f98d 	bl	800c490 <__retarget_lock_release_recursive>
 800c176:	4628      	mov	r0, r5
 800c178:	bd70      	pop	{r4, r5, r6, pc}
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	da04      	bge.n	800c188 <_puts_r+0x84>
 800c17e:	69a2      	ldr	r2, [r4, #24]
 800c180:	429a      	cmp	r2, r3
 800c182:	dc06      	bgt.n	800c192 <_puts_r+0x8e>
 800c184:	290a      	cmp	r1, #10
 800c186:	d004      	beq.n	800c192 <_puts_r+0x8e>
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	1c5a      	adds	r2, r3, #1
 800c18c:	6022      	str	r2, [r4, #0]
 800c18e:	7019      	strb	r1, [r3, #0]
 800c190:	e7cf      	b.n	800c132 <_puts_r+0x2e>
 800c192:	4622      	mov	r2, r4
 800c194:	4628      	mov	r0, r5
 800c196:	f000 f854 	bl	800c242 <__swbuf_r>
 800c19a:	3001      	adds	r0, #1
 800c19c:	d1c9      	bne.n	800c132 <_puts_r+0x2e>
 800c19e:	e7df      	b.n	800c160 <_puts_r+0x5c>
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	250a      	movs	r5, #10
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	6022      	str	r2, [r4, #0]
 800c1a8:	701d      	strb	r5, [r3, #0]
 800c1aa:	e7db      	b.n	800c164 <_puts_r+0x60>

0800c1ac <puts>:
 800c1ac:	4b02      	ldr	r3, [pc, #8]	; (800c1b8 <puts+0xc>)
 800c1ae:	4601      	mov	r1, r0
 800c1b0:	6818      	ldr	r0, [r3, #0]
 800c1b2:	f7ff bfa7 	b.w	800c104 <_puts_r>
 800c1b6:	bf00      	nop
 800c1b8:	20000074 	.word	0x20000074

0800c1bc <__sread>:
 800c1bc:	b510      	push	{r4, lr}
 800c1be:	460c      	mov	r4, r1
 800c1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c4:	f000 f914 	bl	800c3f0 <_read_r>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	bfab      	itete	ge
 800c1cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1ce:	89a3      	ldrhlt	r3, [r4, #12]
 800c1d0:	181b      	addge	r3, r3, r0
 800c1d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1d6:	bfac      	ite	ge
 800c1d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1da:	81a3      	strhlt	r3, [r4, #12]
 800c1dc:	bd10      	pop	{r4, pc}

0800c1de <__swrite>:
 800c1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e2:	461f      	mov	r7, r3
 800c1e4:	898b      	ldrh	r3, [r1, #12]
 800c1e6:	05db      	lsls	r3, r3, #23
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	4616      	mov	r6, r2
 800c1ee:	d505      	bpl.n	800c1fc <__swrite+0x1e>
 800c1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f000 f8e8 	bl	800c3cc <_lseek_r>
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	4632      	mov	r2, r6
 800c20a:	463b      	mov	r3, r7
 800c20c:	4628      	mov	r0, r5
 800c20e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c212:	f000 b8ff 	b.w	800c414 <_write_r>

0800c216 <__sseek>:
 800c216:	b510      	push	{r4, lr}
 800c218:	460c      	mov	r4, r1
 800c21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c21e:	f000 f8d5 	bl	800c3cc <_lseek_r>
 800c222:	1c43      	adds	r3, r0, #1
 800c224:	89a3      	ldrh	r3, [r4, #12]
 800c226:	bf15      	itete	ne
 800c228:	6560      	strne	r0, [r4, #84]	; 0x54
 800c22a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c22e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c232:	81a3      	strheq	r3, [r4, #12]
 800c234:	bf18      	it	ne
 800c236:	81a3      	strhne	r3, [r4, #12]
 800c238:	bd10      	pop	{r4, pc}

0800c23a <__sclose>:
 800c23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c23e:	f000 b8b5 	b.w	800c3ac <_close_r>

0800c242 <__swbuf_r>:
 800c242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c244:	460e      	mov	r6, r1
 800c246:	4614      	mov	r4, r2
 800c248:	4605      	mov	r5, r0
 800c24a:	b118      	cbz	r0, 800c254 <__swbuf_r+0x12>
 800c24c:	6a03      	ldr	r3, [r0, #32]
 800c24e:	b90b      	cbnz	r3, 800c254 <__swbuf_r+0x12>
 800c250:	f7ff ff08 	bl	800c064 <__sinit>
 800c254:	69a3      	ldr	r3, [r4, #24]
 800c256:	60a3      	str	r3, [r4, #8]
 800c258:	89a3      	ldrh	r3, [r4, #12]
 800c25a:	071a      	lsls	r2, r3, #28
 800c25c:	d525      	bpl.n	800c2aa <__swbuf_r+0x68>
 800c25e:	6923      	ldr	r3, [r4, #16]
 800c260:	b31b      	cbz	r3, 800c2aa <__swbuf_r+0x68>
 800c262:	6823      	ldr	r3, [r4, #0]
 800c264:	6922      	ldr	r2, [r4, #16]
 800c266:	1a98      	subs	r0, r3, r2
 800c268:	6963      	ldr	r3, [r4, #20]
 800c26a:	b2f6      	uxtb	r6, r6
 800c26c:	4283      	cmp	r3, r0
 800c26e:	4637      	mov	r7, r6
 800c270:	dc04      	bgt.n	800c27c <__swbuf_r+0x3a>
 800c272:	4621      	mov	r1, r4
 800c274:	4628      	mov	r0, r5
 800c276:	f000 fd6d 	bl	800cd54 <_fflush_r>
 800c27a:	b9e0      	cbnz	r0, 800c2b6 <__swbuf_r+0x74>
 800c27c:	68a3      	ldr	r3, [r4, #8]
 800c27e:	3b01      	subs	r3, #1
 800c280:	60a3      	str	r3, [r4, #8]
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	1c5a      	adds	r2, r3, #1
 800c286:	6022      	str	r2, [r4, #0]
 800c288:	701e      	strb	r6, [r3, #0]
 800c28a:	6962      	ldr	r2, [r4, #20]
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	429a      	cmp	r2, r3
 800c290:	d004      	beq.n	800c29c <__swbuf_r+0x5a>
 800c292:	89a3      	ldrh	r3, [r4, #12]
 800c294:	07db      	lsls	r3, r3, #31
 800c296:	d506      	bpl.n	800c2a6 <__swbuf_r+0x64>
 800c298:	2e0a      	cmp	r6, #10
 800c29a:	d104      	bne.n	800c2a6 <__swbuf_r+0x64>
 800c29c:	4621      	mov	r1, r4
 800c29e:	4628      	mov	r0, r5
 800c2a0:	f000 fd58 	bl	800cd54 <_fflush_r>
 800c2a4:	b938      	cbnz	r0, 800c2b6 <__swbuf_r+0x74>
 800c2a6:	4638      	mov	r0, r7
 800c2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f000 f805 	bl	800c2bc <__swsetup_r>
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	d0d5      	beq.n	800c262 <__swbuf_r+0x20>
 800c2b6:	f04f 37ff 	mov.w	r7, #4294967295
 800c2ba:	e7f4      	b.n	800c2a6 <__swbuf_r+0x64>

0800c2bc <__swsetup_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	4b2a      	ldr	r3, [pc, #168]	; (800c368 <__swsetup_r+0xac>)
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	6818      	ldr	r0, [r3, #0]
 800c2c4:	460c      	mov	r4, r1
 800c2c6:	b118      	cbz	r0, 800c2d0 <__swsetup_r+0x14>
 800c2c8:	6a03      	ldr	r3, [r0, #32]
 800c2ca:	b90b      	cbnz	r3, 800c2d0 <__swsetup_r+0x14>
 800c2cc:	f7ff feca 	bl	800c064 <__sinit>
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2d6:	0718      	lsls	r0, r3, #28
 800c2d8:	d422      	bmi.n	800c320 <__swsetup_r+0x64>
 800c2da:	06d9      	lsls	r1, r3, #27
 800c2dc:	d407      	bmi.n	800c2ee <__swsetup_r+0x32>
 800c2de:	2309      	movs	r3, #9
 800c2e0:	602b      	str	r3, [r5, #0]
 800c2e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2e6:	81a3      	strh	r3, [r4, #12]
 800c2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ec:	e034      	b.n	800c358 <__swsetup_r+0x9c>
 800c2ee:	0758      	lsls	r0, r3, #29
 800c2f0:	d512      	bpl.n	800c318 <__swsetup_r+0x5c>
 800c2f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2f4:	b141      	cbz	r1, 800c308 <__swsetup_r+0x4c>
 800c2f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2fa:	4299      	cmp	r1, r3
 800c2fc:	d002      	beq.n	800c304 <__swsetup_r+0x48>
 800c2fe:	4628      	mov	r0, r5
 800c300:	f000 f8d6 	bl	800c4b0 <_free_r>
 800c304:	2300      	movs	r3, #0
 800c306:	6363      	str	r3, [r4, #52]	; 0x34
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c30e:	81a3      	strh	r3, [r4, #12]
 800c310:	2300      	movs	r3, #0
 800c312:	6063      	str	r3, [r4, #4]
 800c314:	6923      	ldr	r3, [r4, #16]
 800c316:	6023      	str	r3, [r4, #0]
 800c318:	89a3      	ldrh	r3, [r4, #12]
 800c31a:	f043 0308 	orr.w	r3, r3, #8
 800c31e:	81a3      	strh	r3, [r4, #12]
 800c320:	6923      	ldr	r3, [r4, #16]
 800c322:	b94b      	cbnz	r3, 800c338 <__swsetup_r+0x7c>
 800c324:	89a3      	ldrh	r3, [r4, #12]
 800c326:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c32a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c32e:	d003      	beq.n	800c338 <__swsetup_r+0x7c>
 800c330:	4621      	mov	r1, r4
 800c332:	4628      	mov	r0, r5
 800c334:	f000 fd5c 	bl	800cdf0 <__smakebuf_r>
 800c338:	89a0      	ldrh	r0, [r4, #12]
 800c33a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c33e:	f010 0301 	ands.w	r3, r0, #1
 800c342:	d00a      	beq.n	800c35a <__swsetup_r+0x9e>
 800c344:	2300      	movs	r3, #0
 800c346:	60a3      	str	r3, [r4, #8]
 800c348:	6963      	ldr	r3, [r4, #20]
 800c34a:	425b      	negs	r3, r3
 800c34c:	61a3      	str	r3, [r4, #24]
 800c34e:	6923      	ldr	r3, [r4, #16]
 800c350:	b943      	cbnz	r3, 800c364 <__swsetup_r+0xa8>
 800c352:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c356:	d1c4      	bne.n	800c2e2 <__swsetup_r+0x26>
 800c358:	bd38      	pop	{r3, r4, r5, pc}
 800c35a:	0781      	lsls	r1, r0, #30
 800c35c:	bf58      	it	pl
 800c35e:	6963      	ldrpl	r3, [r4, #20]
 800c360:	60a3      	str	r3, [r4, #8]
 800c362:	e7f4      	b.n	800c34e <__swsetup_r+0x92>
 800c364:	2000      	movs	r0, #0
 800c366:	e7f7      	b.n	800c358 <__swsetup_r+0x9c>
 800c368:	20000074 	.word	0x20000074

0800c36c <memset>:
 800c36c:	4402      	add	r2, r0
 800c36e:	4603      	mov	r3, r0
 800c370:	4293      	cmp	r3, r2
 800c372:	d100      	bne.n	800c376 <memset+0xa>
 800c374:	4770      	bx	lr
 800c376:	f803 1b01 	strb.w	r1, [r3], #1
 800c37a:	e7f9      	b.n	800c370 <memset+0x4>

0800c37c <strrchr>:
 800c37c:	b513      	push	{r0, r1, r4, lr}
 800c37e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800c382:	4603      	mov	r3, r0
 800c384:	d110      	bne.n	800c3a8 <strrchr+0x2c>
 800c386:	b002      	add	sp, #8
 800c388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c38c:	f000 bda0 	b.w	800ced0 <strchr>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	4604      	mov	r4, r0
 800c394:	4618      	mov	r0, r3
 800c396:	9101      	str	r1, [sp, #4]
 800c398:	f000 fd9a 	bl	800ced0 <strchr>
 800c39c:	9901      	ldr	r1, [sp, #4]
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d1f6      	bne.n	800c390 <strrchr+0x14>
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	b002      	add	sp, #8
 800c3a6:	bd10      	pop	{r4, pc}
 800c3a8:	2400      	movs	r4, #0
 800c3aa:	e7f3      	b.n	800c394 <strrchr+0x18>

0800c3ac <_close_r>:
 800c3ac:	b538      	push	{r3, r4, r5, lr}
 800c3ae:	4d06      	ldr	r5, [pc, #24]	; (800c3c8 <_close_r+0x1c>)
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	4604      	mov	r4, r0
 800c3b4:	4608      	mov	r0, r1
 800c3b6:	602b      	str	r3, [r5, #0]
 800c3b8:	f7f6 f8e3 	bl	8002582 <_close>
 800c3bc:	1c43      	adds	r3, r0, #1
 800c3be:	d102      	bne.n	800c3c6 <_close_r+0x1a>
 800c3c0:	682b      	ldr	r3, [r5, #0]
 800c3c2:	b103      	cbz	r3, 800c3c6 <_close_r+0x1a>
 800c3c4:	6023      	str	r3, [r4, #0]
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	200018f8 	.word	0x200018f8

0800c3cc <_lseek_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4d07      	ldr	r5, [pc, #28]	; (800c3ec <_lseek_r+0x20>)
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	4608      	mov	r0, r1
 800c3d4:	4611      	mov	r1, r2
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	602a      	str	r2, [r5, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	f7f6 f8f8 	bl	80025d0 <_lseek>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d102      	bne.n	800c3ea <_lseek_r+0x1e>
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	b103      	cbz	r3, 800c3ea <_lseek_r+0x1e>
 800c3e8:	6023      	str	r3, [r4, #0]
 800c3ea:	bd38      	pop	{r3, r4, r5, pc}
 800c3ec:	200018f8 	.word	0x200018f8

0800c3f0 <_read_r>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4d07      	ldr	r5, [pc, #28]	; (800c410 <_read_r+0x20>)
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	4608      	mov	r0, r1
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	602a      	str	r2, [r5, #0]
 800c3fe:	461a      	mov	r2, r3
 800c400:	f7f6 f8a2 	bl	8002548 <_read>
 800c404:	1c43      	adds	r3, r0, #1
 800c406:	d102      	bne.n	800c40e <_read_r+0x1e>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	b103      	cbz	r3, 800c40e <_read_r+0x1e>
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	200018f8 	.word	0x200018f8

0800c414 <_write_r>:
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	4d07      	ldr	r5, [pc, #28]	; (800c434 <_write_r+0x20>)
 800c418:	4604      	mov	r4, r0
 800c41a:	4608      	mov	r0, r1
 800c41c:	4611      	mov	r1, r2
 800c41e:	2200      	movs	r2, #0
 800c420:	602a      	str	r2, [r5, #0]
 800c422:	461a      	mov	r2, r3
 800c424:	f7fc fe42 	bl	80090ac <_write>
 800c428:	1c43      	adds	r3, r0, #1
 800c42a:	d102      	bne.n	800c432 <_write_r+0x1e>
 800c42c:	682b      	ldr	r3, [r5, #0]
 800c42e:	b103      	cbz	r3, 800c432 <_write_r+0x1e>
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	bd38      	pop	{r3, r4, r5, pc}
 800c434:	200018f8 	.word	0x200018f8

0800c438 <__errno>:
 800c438:	4b01      	ldr	r3, [pc, #4]	; (800c440 <__errno+0x8>)
 800c43a:	6818      	ldr	r0, [r3, #0]
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	20000074 	.word	0x20000074

0800c444 <__libc_init_array>:
 800c444:	b570      	push	{r4, r5, r6, lr}
 800c446:	4d0d      	ldr	r5, [pc, #52]	; (800c47c <__libc_init_array+0x38>)
 800c448:	4c0d      	ldr	r4, [pc, #52]	; (800c480 <__libc_init_array+0x3c>)
 800c44a:	1b64      	subs	r4, r4, r5
 800c44c:	10a4      	asrs	r4, r4, #2
 800c44e:	2600      	movs	r6, #0
 800c450:	42a6      	cmp	r6, r4
 800c452:	d109      	bne.n	800c468 <__libc_init_array+0x24>
 800c454:	4d0b      	ldr	r5, [pc, #44]	; (800c484 <__libc_init_array+0x40>)
 800c456:	4c0c      	ldr	r4, [pc, #48]	; (800c488 <__libc_init_array+0x44>)
 800c458:	f000 fd7a 	bl	800cf50 <_init>
 800c45c:	1b64      	subs	r4, r4, r5
 800c45e:	10a4      	asrs	r4, r4, #2
 800c460:	2600      	movs	r6, #0
 800c462:	42a6      	cmp	r6, r4
 800c464:	d105      	bne.n	800c472 <__libc_init_array+0x2e>
 800c466:	bd70      	pop	{r4, r5, r6, pc}
 800c468:	f855 3b04 	ldr.w	r3, [r5], #4
 800c46c:	4798      	blx	r3
 800c46e:	3601      	adds	r6, #1
 800c470:	e7ee      	b.n	800c450 <__libc_init_array+0xc>
 800c472:	f855 3b04 	ldr.w	r3, [r5], #4
 800c476:	4798      	blx	r3
 800c478:	3601      	adds	r6, #1
 800c47a:	e7f2      	b.n	800c462 <__libc_init_array+0x1e>
 800c47c:	0800e274 	.word	0x0800e274
 800c480:	0800e274 	.word	0x0800e274
 800c484:	0800e274 	.word	0x0800e274
 800c488:	0800e278 	.word	0x0800e278

0800c48c <__retarget_lock_init_recursive>:
 800c48c:	4770      	bx	lr

0800c48e <__retarget_lock_acquire_recursive>:
 800c48e:	4770      	bx	lr

0800c490 <__retarget_lock_release_recursive>:
 800c490:	4770      	bx	lr

0800c492 <memcpy>:
 800c492:	440a      	add	r2, r1
 800c494:	4291      	cmp	r1, r2
 800c496:	f100 33ff 	add.w	r3, r0, #4294967295
 800c49a:	d100      	bne.n	800c49e <memcpy+0xc>
 800c49c:	4770      	bx	lr
 800c49e:	b510      	push	{r4, lr}
 800c4a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4a8:	4291      	cmp	r1, r2
 800c4aa:	d1f9      	bne.n	800c4a0 <memcpy+0xe>
 800c4ac:	bd10      	pop	{r4, pc}
	...

0800c4b0 <_free_r>:
 800c4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4b2:	2900      	cmp	r1, #0
 800c4b4:	d044      	beq.n	800c540 <_free_r+0x90>
 800c4b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ba:	9001      	str	r0, [sp, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f1a1 0404 	sub.w	r4, r1, #4
 800c4c2:	bfb8      	it	lt
 800c4c4:	18e4      	addlt	r4, r4, r3
 800c4c6:	f000 f8df 	bl	800c688 <__malloc_lock>
 800c4ca:	4a1e      	ldr	r2, [pc, #120]	; (800c544 <_free_r+0x94>)
 800c4cc:	9801      	ldr	r0, [sp, #4]
 800c4ce:	6813      	ldr	r3, [r2, #0]
 800c4d0:	b933      	cbnz	r3, 800c4e0 <_free_r+0x30>
 800c4d2:	6063      	str	r3, [r4, #4]
 800c4d4:	6014      	str	r4, [r2, #0]
 800c4d6:	b003      	add	sp, #12
 800c4d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4dc:	f000 b8da 	b.w	800c694 <__malloc_unlock>
 800c4e0:	42a3      	cmp	r3, r4
 800c4e2:	d908      	bls.n	800c4f6 <_free_r+0x46>
 800c4e4:	6825      	ldr	r5, [r4, #0]
 800c4e6:	1961      	adds	r1, r4, r5
 800c4e8:	428b      	cmp	r3, r1
 800c4ea:	bf01      	itttt	eq
 800c4ec:	6819      	ldreq	r1, [r3, #0]
 800c4ee:	685b      	ldreq	r3, [r3, #4]
 800c4f0:	1949      	addeq	r1, r1, r5
 800c4f2:	6021      	streq	r1, [r4, #0]
 800c4f4:	e7ed      	b.n	800c4d2 <_free_r+0x22>
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	b10b      	cbz	r3, 800c500 <_free_r+0x50>
 800c4fc:	42a3      	cmp	r3, r4
 800c4fe:	d9fa      	bls.n	800c4f6 <_free_r+0x46>
 800c500:	6811      	ldr	r1, [r2, #0]
 800c502:	1855      	adds	r5, r2, r1
 800c504:	42a5      	cmp	r5, r4
 800c506:	d10b      	bne.n	800c520 <_free_r+0x70>
 800c508:	6824      	ldr	r4, [r4, #0]
 800c50a:	4421      	add	r1, r4
 800c50c:	1854      	adds	r4, r2, r1
 800c50e:	42a3      	cmp	r3, r4
 800c510:	6011      	str	r1, [r2, #0]
 800c512:	d1e0      	bne.n	800c4d6 <_free_r+0x26>
 800c514:	681c      	ldr	r4, [r3, #0]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	6053      	str	r3, [r2, #4]
 800c51a:	440c      	add	r4, r1
 800c51c:	6014      	str	r4, [r2, #0]
 800c51e:	e7da      	b.n	800c4d6 <_free_r+0x26>
 800c520:	d902      	bls.n	800c528 <_free_r+0x78>
 800c522:	230c      	movs	r3, #12
 800c524:	6003      	str	r3, [r0, #0]
 800c526:	e7d6      	b.n	800c4d6 <_free_r+0x26>
 800c528:	6825      	ldr	r5, [r4, #0]
 800c52a:	1961      	adds	r1, r4, r5
 800c52c:	428b      	cmp	r3, r1
 800c52e:	bf04      	itt	eq
 800c530:	6819      	ldreq	r1, [r3, #0]
 800c532:	685b      	ldreq	r3, [r3, #4]
 800c534:	6063      	str	r3, [r4, #4]
 800c536:	bf04      	itt	eq
 800c538:	1949      	addeq	r1, r1, r5
 800c53a:	6021      	streq	r1, [r4, #0]
 800c53c:	6054      	str	r4, [r2, #4]
 800c53e:	e7ca      	b.n	800c4d6 <_free_r+0x26>
 800c540:	b003      	add	sp, #12
 800c542:	bd30      	pop	{r4, r5, pc}
 800c544:	20001900 	.word	0x20001900

0800c548 <sbrk_aligned>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	4e0e      	ldr	r6, [pc, #56]	; (800c584 <sbrk_aligned+0x3c>)
 800c54c:	460c      	mov	r4, r1
 800c54e:	6831      	ldr	r1, [r6, #0]
 800c550:	4605      	mov	r5, r0
 800c552:	b911      	cbnz	r1, 800c55a <sbrk_aligned+0x12>
 800c554:	f000 fcec 	bl	800cf30 <_sbrk_r>
 800c558:	6030      	str	r0, [r6, #0]
 800c55a:	4621      	mov	r1, r4
 800c55c:	4628      	mov	r0, r5
 800c55e:	f000 fce7 	bl	800cf30 <_sbrk_r>
 800c562:	1c43      	adds	r3, r0, #1
 800c564:	d00a      	beq.n	800c57c <sbrk_aligned+0x34>
 800c566:	1cc4      	adds	r4, r0, #3
 800c568:	f024 0403 	bic.w	r4, r4, #3
 800c56c:	42a0      	cmp	r0, r4
 800c56e:	d007      	beq.n	800c580 <sbrk_aligned+0x38>
 800c570:	1a21      	subs	r1, r4, r0
 800c572:	4628      	mov	r0, r5
 800c574:	f000 fcdc 	bl	800cf30 <_sbrk_r>
 800c578:	3001      	adds	r0, #1
 800c57a:	d101      	bne.n	800c580 <sbrk_aligned+0x38>
 800c57c:	f04f 34ff 	mov.w	r4, #4294967295
 800c580:	4620      	mov	r0, r4
 800c582:	bd70      	pop	{r4, r5, r6, pc}
 800c584:	20001904 	.word	0x20001904

0800c588 <_malloc_r>:
 800c588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c58c:	1ccd      	adds	r5, r1, #3
 800c58e:	f025 0503 	bic.w	r5, r5, #3
 800c592:	3508      	adds	r5, #8
 800c594:	2d0c      	cmp	r5, #12
 800c596:	bf38      	it	cc
 800c598:	250c      	movcc	r5, #12
 800c59a:	2d00      	cmp	r5, #0
 800c59c:	4607      	mov	r7, r0
 800c59e:	db01      	blt.n	800c5a4 <_malloc_r+0x1c>
 800c5a0:	42a9      	cmp	r1, r5
 800c5a2:	d905      	bls.n	800c5b0 <_malloc_r+0x28>
 800c5a4:	230c      	movs	r3, #12
 800c5a6:	603b      	str	r3, [r7, #0]
 800c5a8:	2600      	movs	r6, #0
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c684 <_malloc_r+0xfc>
 800c5b4:	f000 f868 	bl	800c688 <__malloc_lock>
 800c5b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c5bc:	461c      	mov	r4, r3
 800c5be:	bb5c      	cbnz	r4, 800c618 <_malloc_r+0x90>
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	f7ff ffc0 	bl	800c548 <sbrk_aligned>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	d155      	bne.n	800c67a <_malloc_r+0xf2>
 800c5ce:	f8d8 4000 	ldr.w	r4, [r8]
 800c5d2:	4626      	mov	r6, r4
 800c5d4:	2e00      	cmp	r6, #0
 800c5d6:	d145      	bne.n	800c664 <_malloc_r+0xdc>
 800c5d8:	2c00      	cmp	r4, #0
 800c5da:	d048      	beq.n	800c66e <_malloc_r+0xe6>
 800c5dc:	6823      	ldr	r3, [r4, #0]
 800c5de:	4631      	mov	r1, r6
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	eb04 0903 	add.w	r9, r4, r3
 800c5e6:	f000 fca3 	bl	800cf30 <_sbrk_r>
 800c5ea:	4581      	cmp	r9, r0
 800c5ec:	d13f      	bne.n	800c66e <_malloc_r+0xe6>
 800c5ee:	6821      	ldr	r1, [r4, #0]
 800c5f0:	1a6d      	subs	r5, r5, r1
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	f7ff ffa7 	bl	800c548 <sbrk_aligned>
 800c5fa:	3001      	adds	r0, #1
 800c5fc:	d037      	beq.n	800c66e <_malloc_r+0xe6>
 800c5fe:	6823      	ldr	r3, [r4, #0]
 800c600:	442b      	add	r3, r5
 800c602:	6023      	str	r3, [r4, #0]
 800c604:	f8d8 3000 	ldr.w	r3, [r8]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d038      	beq.n	800c67e <_malloc_r+0xf6>
 800c60c:	685a      	ldr	r2, [r3, #4]
 800c60e:	42a2      	cmp	r2, r4
 800c610:	d12b      	bne.n	800c66a <_malloc_r+0xe2>
 800c612:	2200      	movs	r2, #0
 800c614:	605a      	str	r2, [r3, #4]
 800c616:	e00f      	b.n	800c638 <_malloc_r+0xb0>
 800c618:	6822      	ldr	r2, [r4, #0]
 800c61a:	1b52      	subs	r2, r2, r5
 800c61c:	d41f      	bmi.n	800c65e <_malloc_r+0xd6>
 800c61e:	2a0b      	cmp	r2, #11
 800c620:	d917      	bls.n	800c652 <_malloc_r+0xca>
 800c622:	1961      	adds	r1, r4, r5
 800c624:	42a3      	cmp	r3, r4
 800c626:	6025      	str	r5, [r4, #0]
 800c628:	bf18      	it	ne
 800c62a:	6059      	strne	r1, [r3, #4]
 800c62c:	6863      	ldr	r3, [r4, #4]
 800c62e:	bf08      	it	eq
 800c630:	f8c8 1000 	streq.w	r1, [r8]
 800c634:	5162      	str	r2, [r4, r5]
 800c636:	604b      	str	r3, [r1, #4]
 800c638:	4638      	mov	r0, r7
 800c63a:	f104 060b 	add.w	r6, r4, #11
 800c63e:	f000 f829 	bl	800c694 <__malloc_unlock>
 800c642:	f026 0607 	bic.w	r6, r6, #7
 800c646:	1d23      	adds	r3, r4, #4
 800c648:	1af2      	subs	r2, r6, r3
 800c64a:	d0ae      	beq.n	800c5aa <_malloc_r+0x22>
 800c64c:	1b9b      	subs	r3, r3, r6
 800c64e:	50a3      	str	r3, [r4, r2]
 800c650:	e7ab      	b.n	800c5aa <_malloc_r+0x22>
 800c652:	42a3      	cmp	r3, r4
 800c654:	6862      	ldr	r2, [r4, #4]
 800c656:	d1dd      	bne.n	800c614 <_malloc_r+0x8c>
 800c658:	f8c8 2000 	str.w	r2, [r8]
 800c65c:	e7ec      	b.n	800c638 <_malloc_r+0xb0>
 800c65e:	4623      	mov	r3, r4
 800c660:	6864      	ldr	r4, [r4, #4]
 800c662:	e7ac      	b.n	800c5be <_malloc_r+0x36>
 800c664:	4634      	mov	r4, r6
 800c666:	6876      	ldr	r6, [r6, #4]
 800c668:	e7b4      	b.n	800c5d4 <_malloc_r+0x4c>
 800c66a:	4613      	mov	r3, r2
 800c66c:	e7cc      	b.n	800c608 <_malloc_r+0x80>
 800c66e:	230c      	movs	r3, #12
 800c670:	603b      	str	r3, [r7, #0]
 800c672:	4638      	mov	r0, r7
 800c674:	f000 f80e 	bl	800c694 <__malloc_unlock>
 800c678:	e797      	b.n	800c5aa <_malloc_r+0x22>
 800c67a:	6025      	str	r5, [r4, #0]
 800c67c:	e7dc      	b.n	800c638 <_malloc_r+0xb0>
 800c67e:	605b      	str	r3, [r3, #4]
 800c680:	deff      	udf	#255	; 0xff
 800c682:	bf00      	nop
 800c684:	20001900 	.word	0x20001900

0800c688 <__malloc_lock>:
 800c688:	4801      	ldr	r0, [pc, #4]	; (800c690 <__malloc_lock+0x8>)
 800c68a:	f7ff bf00 	b.w	800c48e <__retarget_lock_acquire_recursive>
 800c68e:	bf00      	nop
 800c690:	200018fc 	.word	0x200018fc

0800c694 <__malloc_unlock>:
 800c694:	4801      	ldr	r0, [pc, #4]	; (800c69c <__malloc_unlock+0x8>)
 800c696:	f7ff befb 	b.w	800c490 <__retarget_lock_release_recursive>
 800c69a:	bf00      	nop
 800c69c:	200018fc 	.word	0x200018fc

0800c6a0 <__sfputc_r>:
 800c6a0:	6893      	ldr	r3, [r2, #8]
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	b410      	push	{r4}
 800c6a8:	6093      	str	r3, [r2, #8]
 800c6aa:	da08      	bge.n	800c6be <__sfputc_r+0x1e>
 800c6ac:	6994      	ldr	r4, [r2, #24]
 800c6ae:	42a3      	cmp	r3, r4
 800c6b0:	db01      	blt.n	800c6b6 <__sfputc_r+0x16>
 800c6b2:	290a      	cmp	r1, #10
 800c6b4:	d103      	bne.n	800c6be <__sfputc_r+0x1e>
 800c6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6ba:	f7ff bdc2 	b.w	800c242 <__swbuf_r>
 800c6be:	6813      	ldr	r3, [r2, #0]
 800c6c0:	1c58      	adds	r0, r3, #1
 800c6c2:	6010      	str	r0, [r2, #0]
 800c6c4:	7019      	strb	r1, [r3, #0]
 800c6c6:	4608      	mov	r0, r1
 800c6c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <__sfputs_r>:
 800c6ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d0:	4606      	mov	r6, r0
 800c6d2:	460f      	mov	r7, r1
 800c6d4:	4614      	mov	r4, r2
 800c6d6:	18d5      	adds	r5, r2, r3
 800c6d8:	42ac      	cmp	r4, r5
 800c6da:	d101      	bne.n	800c6e0 <__sfputs_r+0x12>
 800c6dc:	2000      	movs	r0, #0
 800c6de:	e007      	b.n	800c6f0 <__sfputs_r+0x22>
 800c6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6e4:	463a      	mov	r2, r7
 800c6e6:	4630      	mov	r0, r6
 800c6e8:	f7ff ffda 	bl	800c6a0 <__sfputc_r>
 800c6ec:	1c43      	adds	r3, r0, #1
 800c6ee:	d1f3      	bne.n	800c6d8 <__sfputs_r+0xa>
 800c6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6f4 <_vfiprintf_r>:
 800c6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f8:	460d      	mov	r5, r1
 800c6fa:	b09d      	sub	sp, #116	; 0x74
 800c6fc:	4614      	mov	r4, r2
 800c6fe:	4698      	mov	r8, r3
 800c700:	4606      	mov	r6, r0
 800c702:	b118      	cbz	r0, 800c70c <_vfiprintf_r+0x18>
 800c704:	6a03      	ldr	r3, [r0, #32]
 800c706:	b90b      	cbnz	r3, 800c70c <_vfiprintf_r+0x18>
 800c708:	f7ff fcac 	bl	800c064 <__sinit>
 800c70c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c70e:	07d9      	lsls	r1, r3, #31
 800c710:	d405      	bmi.n	800c71e <_vfiprintf_r+0x2a>
 800c712:	89ab      	ldrh	r3, [r5, #12]
 800c714:	059a      	lsls	r2, r3, #22
 800c716:	d402      	bmi.n	800c71e <_vfiprintf_r+0x2a>
 800c718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c71a:	f7ff feb8 	bl	800c48e <__retarget_lock_acquire_recursive>
 800c71e:	89ab      	ldrh	r3, [r5, #12]
 800c720:	071b      	lsls	r3, r3, #28
 800c722:	d501      	bpl.n	800c728 <_vfiprintf_r+0x34>
 800c724:	692b      	ldr	r3, [r5, #16]
 800c726:	b99b      	cbnz	r3, 800c750 <_vfiprintf_r+0x5c>
 800c728:	4629      	mov	r1, r5
 800c72a:	4630      	mov	r0, r6
 800c72c:	f7ff fdc6 	bl	800c2bc <__swsetup_r>
 800c730:	b170      	cbz	r0, 800c750 <_vfiprintf_r+0x5c>
 800c732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c734:	07dc      	lsls	r4, r3, #31
 800c736:	d504      	bpl.n	800c742 <_vfiprintf_r+0x4e>
 800c738:	f04f 30ff 	mov.w	r0, #4294967295
 800c73c:	b01d      	add	sp, #116	; 0x74
 800c73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c742:	89ab      	ldrh	r3, [r5, #12]
 800c744:	0598      	lsls	r0, r3, #22
 800c746:	d4f7      	bmi.n	800c738 <_vfiprintf_r+0x44>
 800c748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c74a:	f7ff fea1 	bl	800c490 <__retarget_lock_release_recursive>
 800c74e:	e7f3      	b.n	800c738 <_vfiprintf_r+0x44>
 800c750:	2300      	movs	r3, #0
 800c752:	9309      	str	r3, [sp, #36]	; 0x24
 800c754:	2320      	movs	r3, #32
 800c756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c75a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c75e:	2330      	movs	r3, #48	; 0x30
 800c760:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c914 <_vfiprintf_r+0x220>
 800c764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c768:	f04f 0901 	mov.w	r9, #1
 800c76c:	4623      	mov	r3, r4
 800c76e:	469a      	mov	sl, r3
 800c770:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c774:	b10a      	cbz	r2, 800c77a <_vfiprintf_r+0x86>
 800c776:	2a25      	cmp	r2, #37	; 0x25
 800c778:	d1f9      	bne.n	800c76e <_vfiprintf_r+0x7a>
 800c77a:	ebba 0b04 	subs.w	fp, sl, r4
 800c77e:	d00b      	beq.n	800c798 <_vfiprintf_r+0xa4>
 800c780:	465b      	mov	r3, fp
 800c782:	4622      	mov	r2, r4
 800c784:	4629      	mov	r1, r5
 800c786:	4630      	mov	r0, r6
 800c788:	f7ff ffa1 	bl	800c6ce <__sfputs_r>
 800c78c:	3001      	adds	r0, #1
 800c78e:	f000 80a9 	beq.w	800c8e4 <_vfiprintf_r+0x1f0>
 800c792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c794:	445a      	add	r2, fp
 800c796:	9209      	str	r2, [sp, #36]	; 0x24
 800c798:	f89a 3000 	ldrb.w	r3, [sl]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 80a1 	beq.w	800c8e4 <_vfiprintf_r+0x1f0>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7ac:	f10a 0a01 	add.w	sl, sl, #1
 800c7b0:	9304      	str	r3, [sp, #16]
 800c7b2:	9307      	str	r3, [sp, #28]
 800c7b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7b8:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ba:	4654      	mov	r4, sl
 800c7bc:	2205      	movs	r2, #5
 800c7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c2:	4854      	ldr	r0, [pc, #336]	; (800c914 <_vfiprintf_r+0x220>)
 800c7c4:	f7f3 fce4 	bl	8000190 <memchr>
 800c7c8:	9a04      	ldr	r2, [sp, #16]
 800c7ca:	b9d8      	cbnz	r0, 800c804 <_vfiprintf_r+0x110>
 800c7cc:	06d1      	lsls	r1, r2, #27
 800c7ce:	bf44      	itt	mi
 800c7d0:	2320      	movmi	r3, #32
 800c7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7d6:	0713      	lsls	r3, r2, #28
 800c7d8:	bf44      	itt	mi
 800c7da:	232b      	movmi	r3, #43	; 0x2b
 800c7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c7e6:	d015      	beq.n	800c814 <_vfiprintf_r+0x120>
 800c7e8:	9a07      	ldr	r2, [sp, #28]
 800c7ea:	4654      	mov	r4, sl
 800c7ec:	2000      	movs	r0, #0
 800c7ee:	f04f 0c0a 	mov.w	ip, #10
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7f8:	3b30      	subs	r3, #48	; 0x30
 800c7fa:	2b09      	cmp	r3, #9
 800c7fc:	d94d      	bls.n	800c89a <_vfiprintf_r+0x1a6>
 800c7fe:	b1b0      	cbz	r0, 800c82e <_vfiprintf_r+0x13a>
 800c800:	9207      	str	r2, [sp, #28]
 800c802:	e014      	b.n	800c82e <_vfiprintf_r+0x13a>
 800c804:	eba0 0308 	sub.w	r3, r0, r8
 800c808:	fa09 f303 	lsl.w	r3, r9, r3
 800c80c:	4313      	orrs	r3, r2
 800c80e:	9304      	str	r3, [sp, #16]
 800c810:	46a2      	mov	sl, r4
 800c812:	e7d2      	b.n	800c7ba <_vfiprintf_r+0xc6>
 800c814:	9b03      	ldr	r3, [sp, #12]
 800c816:	1d19      	adds	r1, r3, #4
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	9103      	str	r1, [sp, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	bfbb      	ittet	lt
 800c820:	425b      	neglt	r3, r3
 800c822:	f042 0202 	orrlt.w	r2, r2, #2
 800c826:	9307      	strge	r3, [sp, #28]
 800c828:	9307      	strlt	r3, [sp, #28]
 800c82a:	bfb8      	it	lt
 800c82c:	9204      	strlt	r2, [sp, #16]
 800c82e:	7823      	ldrb	r3, [r4, #0]
 800c830:	2b2e      	cmp	r3, #46	; 0x2e
 800c832:	d10c      	bne.n	800c84e <_vfiprintf_r+0x15a>
 800c834:	7863      	ldrb	r3, [r4, #1]
 800c836:	2b2a      	cmp	r3, #42	; 0x2a
 800c838:	d134      	bne.n	800c8a4 <_vfiprintf_r+0x1b0>
 800c83a:	9b03      	ldr	r3, [sp, #12]
 800c83c:	1d1a      	adds	r2, r3, #4
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	9203      	str	r2, [sp, #12]
 800c842:	2b00      	cmp	r3, #0
 800c844:	bfb8      	it	lt
 800c846:	f04f 33ff 	movlt.w	r3, #4294967295
 800c84a:	3402      	adds	r4, #2
 800c84c:	9305      	str	r3, [sp, #20]
 800c84e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c924 <_vfiprintf_r+0x230>
 800c852:	7821      	ldrb	r1, [r4, #0]
 800c854:	2203      	movs	r2, #3
 800c856:	4650      	mov	r0, sl
 800c858:	f7f3 fc9a 	bl	8000190 <memchr>
 800c85c:	b138      	cbz	r0, 800c86e <_vfiprintf_r+0x17a>
 800c85e:	9b04      	ldr	r3, [sp, #16]
 800c860:	eba0 000a 	sub.w	r0, r0, sl
 800c864:	2240      	movs	r2, #64	; 0x40
 800c866:	4082      	lsls	r2, r0
 800c868:	4313      	orrs	r3, r2
 800c86a:	3401      	adds	r4, #1
 800c86c:	9304      	str	r3, [sp, #16]
 800c86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c872:	4829      	ldr	r0, [pc, #164]	; (800c918 <_vfiprintf_r+0x224>)
 800c874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c878:	2206      	movs	r2, #6
 800c87a:	f7f3 fc89 	bl	8000190 <memchr>
 800c87e:	2800      	cmp	r0, #0
 800c880:	d03f      	beq.n	800c902 <_vfiprintf_r+0x20e>
 800c882:	4b26      	ldr	r3, [pc, #152]	; (800c91c <_vfiprintf_r+0x228>)
 800c884:	bb1b      	cbnz	r3, 800c8ce <_vfiprintf_r+0x1da>
 800c886:	9b03      	ldr	r3, [sp, #12]
 800c888:	3307      	adds	r3, #7
 800c88a:	f023 0307 	bic.w	r3, r3, #7
 800c88e:	3308      	adds	r3, #8
 800c890:	9303      	str	r3, [sp, #12]
 800c892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c894:	443b      	add	r3, r7
 800c896:	9309      	str	r3, [sp, #36]	; 0x24
 800c898:	e768      	b.n	800c76c <_vfiprintf_r+0x78>
 800c89a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c89e:	460c      	mov	r4, r1
 800c8a0:	2001      	movs	r0, #1
 800c8a2:	e7a6      	b.n	800c7f2 <_vfiprintf_r+0xfe>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	3401      	adds	r4, #1
 800c8a8:	9305      	str	r3, [sp, #20]
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	f04f 0c0a 	mov.w	ip, #10
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8b6:	3a30      	subs	r2, #48	; 0x30
 800c8b8:	2a09      	cmp	r2, #9
 800c8ba:	d903      	bls.n	800c8c4 <_vfiprintf_r+0x1d0>
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d0c6      	beq.n	800c84e <_vfiprintf_r+0x15a>
 800c8c0:	9105      	str	r1, [sp, #20]
 800c8c2:	e7c4      	b.n	800c84e <_vfiprintf_r+0x15a>
 800c8c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8c8:	4604      	mov	r4, r0
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e7f0      	b.n	800c8b0 <_vfiprintf_r+0x1bc>
 800c8ce:	ab03      	add	r3, sp, #12
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	462a      	mov	r2, r5
 800c8d4:	4b12      	ldr	r3, [pc, #72]	; (800c920 <_vfiprintf_r+0x22c>)
 800c8d6:	a904      	add	r1, sp, #16
 800c8d8:	4630      	mov	r0, r6
 800c8da:	f3af 8000 	nop.w
 800c8de:	4607      	mov	r7, r0
 800c8e0:	1c78      	adds	r0, r7, #1
 800c8e2:	d1d6      	bne.n	800c892 <_vfiprintf_r+0x19e>
 800c8e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8e6:	07d9      	lsls	r1, r3, #31
 800c8e8:	d405      	bmi.n	800c8f6 <_vfiprintf_r+0x202>
 800c8ea:	89ab      	ldrh	r3, [r5, #12]
 800c8ec:	059a      	lsls	r2, r3, #22
 800c8ee:	d402      	bmi.n	800c8f6 <_vfiprintf_r+0x202>
 800c8f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8f2:	f7ff fdcd 	bl	800c490 <__retarget_lock_release_recursive>
 800c8f6:	89ab      	ldrh	r3, [r5, #12]
 800c8f8:	065b      	lsls	r3, r3, #25
 800c8fa:	f53f af1d 	bmi.w	800c738 <_vfiprintf_r+0x44>
 800c8fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c900:	e71c      	b.n	800c73c <_vfiprintf_r+0x48>
 800c902:	ab03      	add	r3, sp, #12
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	462a      	mov	r2, r5
 800c908:	4b05      	ldr	r3, [pc, #20]	; (800c920 <_vfiprintf_r+0x22c>)
 800c90a:	a904      	add	r1, sp, #16
 800c90c:	4630      	mov	r0, r6
 800c90e:	f000 f879 	bl	800ca04 <_printf_i>
 800c912:	e7e4      	b.n	800c8de <_vfiprintf_r+0x1ea>
 800c914:	0800e238 	.word	0x0800e238
 800c918:	0800e242 	.word	0x0800e242
 800c91c:	00000000 	.word	0x00000000
 800c920:	0800c6cf 	.word	0x0800c6cf
 800c924:	0800e23e 	.word	0x0800e23e

0800c928 <_printf_common>:
 800c928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c92c:	4616      	mov	r6, r2
 800c92e:	4699      	mov	r9, r3
 800c930:	688a      	ldr	r2, [r1, #8]
 800c932:	690b      	ldr	r3, [r1, #16]
 800c934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c938:	4293      	cmp	r3, r2
 800c93a:	bfb8      	it	lt
 800c93c:	4613      	movlt	r3, r2
 800c93e:	6033      	str	r3, [r6, #0]
 800c940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c944:	4607      	mov	r7, r0
 800c946:	460c      	mov	r4, r1
 800c948:	b10a      	cbz	r2, 800c94e <_printf_common+0x26>
 800c94a:	3301      	adds	r3, #1
 800c94c:	6033      	str	r3, [r6, #0]
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	0699      	lsls	r1, r3, #26
 800c952:	bf42      	ittt	mi
 800c954:	6833      	ldrmi	r3, [r6, #0]
 800c956:	3302      	addmi	r3, #2
 800c958:	6033      	strmi	r3, [r6, #0]
 800c95a:	6825      	ldr	r5, [r4, #0]
 800c95c:	f015 0506 	ands.w	r5, r5, #6
 800c960:	d106      	bne.n	800c970 <_printf_common+0x48>
 800c962:	f104 0a19 	add.w	sl, r4, #25
 800c966:	68e3      	ldr	r3, [r4, #12]
 800c968:	6832      	ldr	r2, [r6, #0]
 800c96a:	1a9b      	subs	r3, r3, r2
 800c96c:	42ab      	cmp	r3, r5
 800c96e:	dc26      	bgt.n	800c9be <_printf_common+0x96>
 800c970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c974:	1e13      	subs	r3, r2, #0
 800c976:	6822      	ldr	r2, [r4, #0]
 800c978:	bf18      	it	ne
 800c97a:	2301      	movne	r3, #1
 800c97c:	0692      	lsls	r2, r2, #26
 800c97e:	d42b      	bmi.n	800c9d8 <_printf_common+0xb0>
 800c980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c984:	4649      	mov	r1, r9
 800c986:	4638      	mov	r0, r7
 800c988:	47c0      	blx	r8
 800c98a:	3001      	adds	r0, #1
 800c98c:	d01e      	beq.n	800c9cc <_printf_common+0xa4>
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	6922      	ldr	r2, [r4, #16]
 800c992:	f003 0306 	and.w	r3, r3, #6
 800c996:	2b04      	cmp	r3, #4
 800c998:	bf02      	ittt	eq
 800c99a:	68e5      	ldreq	r5, [r4, #12]
 800c99c:	6833      	ldreq	r3, [r6, #0]
 800c99e:	1aed      	subeq	r5, r5, r3
 800c9a0:	68a3      	ldr	r3, [r4, #8]
 800c9a2:	bf0c      	ite	eq
 800c9a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9a8:	2500      	movne	r5, #0
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	bfc4      	itt	gt
 800c9ae:	1a9b      	subgt	r3, r3, r2
 800c9b0:	18ed      	addgt	r5, r5, r3
 800c9b2:	2600      	movs	r6, #0
 800c9b4:	341a      	adds	r4, #26
 800c9b6:	42b5      	cmp	r5, r6
 800c9b8:	d11a      	bne.n	800c9f0 <_printf_common+0xc8>
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	e008      	b.n	800c9d0 <_printf_common+0xa8>
 800c9be:	2301      	movs	r3, #1
 800c9c0:	4652      	mov	r2, sl
 800c9c2:	4649      	mov	r1, r9
 800c9c4:	4638      	mov	r0, r7
 800c9c6:	47c0      	blx	r8
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	d103      	bne.n	800c9d4 <_printf_common+0xac>
 800c9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d4:	3501      	adds	r5, #1
 800c9d6:	e7c6      	b.n	800c966 <_printf_common+0x3e>
 800c9d8:	18e1      	adds	r1, r4, r3
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	2030      	movs	r0, #48	; 0x30
 800c9de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9e2:	4422      	add	r2, r4
 800c9e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9ec:	3302      	adds	r3, #2
 800c9ee:	e7c7      	b.n	800c980 <_printf_common+0x58>
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	4622      	mov	r2, r4
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	4638      	mov	r0, r7
 800c9f8:	47c0      	blx	r8
 800c9fa:	3001      	adds	r0, #1
 800c9fc:	d0e6      	beq.n	800c9cc <_printf_common+0xa4>
 800c9fe:	3601      	adds	r6, #1
 800ca00:	e7d9      	b.n	800c9b6 <_printf_common+0x8e>
	...

0800ca04 <_printf_i>:
 800ca04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca08:	7e0f      	ldrb	r7, [r1, #24]
 800ca0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca0c:	2f78      	cmp	r7, #120	; 0x78
 800ca0e:	4691      	mov	r9, r2
 800ca10:	4680      	mov	r8, r0
 800ca12:	460c      	mov	r4, r1
 800ca14:	469a      	mov	sl, r3
 800ca16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca1a:	d807      	bhi.n	800ca2c <_printf_i+0x28>
 800ca1c:	2f62      	cmp	r7, #98	; 0x62
 800ca1e:	d80a      	bhi.n	800ca36 <_printf_i+0x32>
 800ca20:	2f00      	cmp	r7, #0
 800ca22:	f000 80d4 	beq.w	800cbce <_printf_i+0x1ca>
 800ca26:	2f58      	cmp	r7, #88	; 0x58
 800ca28:	f000 80c0 	beq.w	800cbac <_printf_i+0x1a8>
 800ca2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca34:	e03a      	b.n	800caac <_printf_i+0xa8>
 800ca36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca3a:	2b15      	cmp	r3, #21
 800ca3c:	d8f6      	bhi.n	800ca2c <_printf_i+0x28>
 800ca3e:	a101      	add	r1, pc, #4	; (adr r1, 800ca44 <_printf_i+0x40>)
 800ca40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca44:	0800ca9d 	.word	0x0800ca9d
 800ca48:	0800cab1 	.word	0x0800cab1
 800ca4c:	0800ca2d 	.word	0x0800ca2d
 800ca50:	0800ca2d 	.word	0x0800ca2d
 800ca54:	0800ca2d 	.word	0x0800ca2d
 800ca58:	0800ca2d 	.word	0x0800ca2d
 800ca5c:	0800cab1 	.word	0x0800cab1
 800ca60:	0800ca2d 	.word	0x0800ca2d
 800ca64:	0800ca2d 	.word	0x0800ca2d
 800ca68:	0800ca2d 	.word	0x0800ca2d
 800ca6c:	0800ca2d 	.word	0x0800ca2d
 800ca70:	0800cbb5 	.word	0x0800cbb5
 800ca74:	0800cadd 	.word	0x0800cadd
 800ca78:	0800cb6f 	.word	0x0800cb6f
 800ca7c:	0800ca2d 	.word	0x0800ca2d
 800ca80:	0800ca2d 	.word	0x0800ca2d
 800ca84:	0800cbd7 	.word	0x0800cbd7
 800ca88:	0800ca2d 	.word	0x0800ca2d
 800ca8c:	0800cadd 	.word	0x0800cadd
 800ca90:	0800ca2d 	.word	0x0800ca2d
 800ca94:	0800ca2d 	.word	0x0800ca2d
 800ca98:	0800cb77 	.word	0x0800cb77
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	1d1a      	adds	r2, r3, #4
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	602a      	str	r2, [r5, #0]
 800caa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800caac:	2301      	movs	r3, #1
 800caae:	e09f      	b.n	800cbf0 <_printf_i+0x1ec>
 800cab0:	6820      	ldr	r0, [r4, #0]
 800cab2:	682b      	ldr	r3, [r5, #0]
 800cab4:	0607      	lsls	r7, r0, #24
 800cab6:	f103 0104 	add.w	r1, r3, #4
 800caba:	6029      	str	r1, [r5, #0]
 800cabc:	d501      	bpl.n	800cac2 <_printf_i+0xbe>
 800cabe:	681e      	ldr	r6, [r3, #0]
 800cac0:	e003      	b.n	800caca <_printf_i+0xc6>
 800cac2:	0646      	lsls	r6, r0, #25
 800cac4:	d5fb      	bpl.n	800cabe <_printf_i+0xba>
 800cac6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800caca:	2e00      	cmp	r6, #0
 800cacc:	da03      	bge.n	800cad6 <_printf_i+0xd2>
 800cace:	232d      	movs	r3, #45	; 0x2d
 800cad0:	4276      	negs	r6, r6
 800cad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cad6:	485a      	ldr	r0, [pc, #360]	; (800cc40 <_printf_i+0x23c>)
 800cad8:	230a      	movs	r3, #10
 800cada:	e012      	b.n	800cb02 <_printf_i+0xfe>
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	6820      	ldr	r0, [r4, #0]
 800cae0:	1d19      	adds	r1, r3, #4
 800cae2:	6029      	str	r1, [r5, #0]
 800cae4:	0605      	lsls	r5, r0, #24
 800cae6:	d501      	bpl.n	800caec <_printf_i+0xe8>
 800cae8:	681e      	ldr	r6, [r3, #0]
 800caea:	e002      	b.n	800caf2 <_printf_i+0xee>
 800caec:	0641      	lsls	r1, r0, #25
 800caee:	d5fb      	bpl.n	800cae8 <_printf_i+0xe4>
 800caf0:	881e      	ldrh	r6, [r3, #0]
 800caf2:	4853      	ldr	r0, [pc, #332]	; (800cc40 <_printf_i+0x23c>)
 800caf4:	2f6f      	cmp	r7, #111	; 0x6f
 800caf6:	bf0c      	ite	eq
 800caf8:	2308      	moveq	r3, #8
 800cafa:	230a      	movne	r3, #10
 800cafc:	2100      	movs	r1, #0
 800cafe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb02:	6865      	ldr	r5, [r4, #4]
 800cb04:	60a5      	str	r5, [r4, #8]
 800cb06:	2d00      	cmp	r5, #0
 800cb08:	bfa2      	ittt	ge
 800cb0a:	6821      	ldrge	r1, [r4, #0]
 800cb0c:	f021 0104 	bicge.w	r1, r1, #4
 800cb10:	6021      	strge	r1, [r4, #0]
 800cb12:	b90e      	cbnz	r6, 800cb18 <_printf_i+0x114>
 800cb14:	2d00      	cmp	r5, #0
 800cb16:	d04b      	beq.n	800cbb0 <_printf_i+0x1ac>
 800cb18:	4615      	mov	r5, r2
 800cb1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb1e:	fb03 6711 	mls	r7, r3, r1, r6
 800cb22:	5dc7      	ldrb	r7, [r0, r7]
 800cb24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb28:	4637      	mov	r7, r6
 800cb2a:	42bb      	cmp	r3, r7
 800cb2c:	460e      	mov	r6, r1
 800cb2e:	d9f4      	bls.n	800cb1a <_printf_i+0x116>
 800cb30:	2b08      	cmp	r3, #8
 800cb32:	d10b      	bne.n	800cb4c <_printf_i+0x148>
 800cb34:	6823      	ldr	r3, [r4, #0]
 800cb36:	07de      	lsls	r6, r3, #31
 800cb38:	d508      	bpl.n	800cb4c <_printf_i+0x148>
 800cb3a:	6923      	ldr	r3, [r4, #16]
 800cb3c:	6861      	ldr	r1, [r4, #4]
 800cb3e:	4299      	cmp	r1, r3
 800cb40:	bfde      	ittt	le
 800cb42:	2330      	movle	r3, #48	; 0x30
 800cb44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb48:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb4c:	1b52      	subs	r2, r2, r5
 800cb4e:	6122      	str	r2, [r4, #16]
 800cb50:	f8cd a000 	str.w	sl, [sp]
 800cb54:	464b      	mov	r3, r9
 800cb56:	aa03      	add	r2, sp, #12
 800cb58:	4621      	mov	r1, r4
 800cb5a:	4640      	mov	r0, r8
 800cb5c:	f7ff fee4 	bl	800c928 <_printf_common>
 800cb60:	3001      	adds	r0, #1
 800cb62:	d14a      	bne.n	800cbfa <_printf_i+0x1f6>
 800cb64:	f04f 30ff 	mov.w	r0, #4294967295
 800cb68:	b004      	add	sp, #16
 800cb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	f043 0320 	orr.w	r3, r3, #32
 800cb74:	6023      	str	r3, [r4, #0]
 800cb76:	4833      	ldr	r0, [pc, #204]	; (800cc44 <_printf_i+0x240>)
 800cb78:	2778      	movs	r7, #120	; 0x78
 800cb7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb7e:	6823      	ldr	r3, [r4, #0]
 800cb80:	6829      	ldr	r1, [r5, #0]
 800cb82:	061f      	lsls	r7, r3, #24
 800cb84:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb88:	d402      	bmi.n	800cb90 <_printf_i+0x18c>
 800cb8a:	065f      	lsls	r7, r3, #25
 800cb8c:	bf48      	it	mi
 800cb8e:	b2b6      	uxthmi	r6, r6
 800cb90:	07df      	lsls	r7, r3, #31
 800cb92:	bf48      	it	mi
 800cb94:	f043 0320 	orrmi.w	r3, r3, #32
 800cb98:	6029      	str	r1, [r5, #0]
 800cb9a:	bf48      	it	mi
 800cb9c:	6023      	strmi	r3, [r4, #0]
 800cb9e:	b91e      	cbnz	r6, 800cba8 <_printf_i+0x1a4>
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	f023 0320 	bic.w	r3, r3, #32
 800cba6:	6023      	str	r3, [r4, #0]
 800cba8:	2310      	movs	r3, #16
 800cbaa:	e7a7      	b.n	800cafc <_printf_i+0xf8>
 800cbac:	4824      	ldr	r0, [pc, #144]	; (800cc40 <_printf_i+0x23c>)
 800cbae:	e7e4      	b.n	800cb7a <_printf_i+0x176>
 800cbb0:	4615      	mov	r5, r2
 800cbb2:	e7bd      	b.n	800cb30 <_printf_i+0x12c>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	6826      	ldr	r6, [r4, #0]
 800cbb8:	6961      	ldr	r1, [r4, #20]
 800cbba:	1d18      	adds	r0, r3, #4
 800cbbc:	6028      	str	r0, [r5, #0]
 800cbbe:	0635      	lsls	r5, r6, #24
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	d501      	bpl.n	800cbc8 <_printf_i+0x1c4>
 800cbc4:	6019      	str	r1, [r3, #0]
 800cbc6:	e002      	b.n	800cbce <_printf_i+0x1ca>
 800cbc8:	0670      	lsls	r0, r6, #25
 800cbca:	d5fb      	bpl.n	800cbc4 <_printf_i+0x1c0>
 800cbcc:	8019      	strh	r1, [r3, #0]
 800cbce:	2300      	movs	r3, #0
 800cbd0:	6123      	str	r3, [r4, #16]
 800cbd2:	4615      	mov	r5, r2
 800cbd4:	e7bc      	b.n	800cb50 <_printf_i+0x14c>
 800cbd6:	682b      	ldr	r3, [r5, #0]
 800cbd8:	1d1a      	adds	r2, r3, #4
 800cbda:	602a      	str	r2, [r5, #0]
 800cbdc:	681d      	ldr	r5, [r3, #0]
 800cbde:	6862      	ldr	r2, [r4, #4]
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f7f3 fad4 	bl	8000190 <memchr>
 800cbe8:	b108      	cbz	r0, 800cbee <_printf_i+0x1ea>
 800cbea:	1b40      	subs	r0, r0, r5
 800cbec:	6060      	str	r0, [r4, #4]
 800cbee:	6863      	ldr	r3, [r4, #4]
 800cbf0:	6123      	str	r3, [r4, #16]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbf8:	e7aa      	b.n	800cb50 <_printf_i+0x14c>
 800cbfa:	6923      	ldr	r3, [r4, #16]
 800cbfc:	462a      	mov	r2, r5
 800cbfe:	4649      	mov	r1, r9
 800cc00:	4640      	mov	r0, r8
 800cc02:	47d0      	blx	sl
 800cc04:	3001      	adds	r0, #1
 800cc06:	d0ad      	beq.n	800cb64 <_printf_i+0x160>
 800cc08:	6823      	ldr	r3, [r4, #0]
 800cc0a:	079b      	lsls	r3, r3, #30
 800cc0c:	d413      	bmi.n	800cc36 <_printf_i+0x232>
 800cc0e:	68e0      	ldr	r0, [r4, #12]
 800cc10:	9b03      	ldr	r3, [sp, #12]
 800cc12:	4298      	cmp	r0, r3
 800cc14:	bfb8      	it	lt
 800cc16:	4618      	movlt	r0, r3
 800cc18:	e7a6      	b.n	800cb68 <_printf_i+0x164>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	4632      	mov	r2, r6
 800cc1e:	4649      	mov	r1, r9
 800cc20:	4640      	mov	r0, r8
 800cc22:	47d0      	blx	sl
 800cc24:	3001      	adds	r0, #1
 800cc26:	d09d      	beq.n	800cb64 <_printf_i+0x160>
 800cc28:	3501      	adds	r5, #1
 800cc2a:	68e3      	ldr	r3, [r4, #12]
 800cc2c:	9903      	ldr	r1, [sp, #12]
 800cc2e:	1a5b      	subs	r3, r3, r1
 800cc30:	42ab      	cmp	r3, r5
 800cc32:	dcf2      	bgt.n	800cc1a <_printf_i+0x216>
 800cc34:	e7eb      	b.n	800cc0e <_printf_i+0x20a>
 800cc36:	2500      	movs	r5, #0
 800cc38:	f104 0619 	add.w	r6, r4, #25
 800cc3c:	e7f5      	b.n	800cc2a <_printf_i+0x226>
 800cc3e:	bf00      	nop
 800cc40:	0800e249 	.word	0x0800e249
 800cc44:	0800e25a 	.word	0x0800e25a

0800cc48 <__sflush_r>:
 800cc48:	898a      	ldrh	r2, [r1, #12]
 800cc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4e:	4605      	mov	r5, r0
 800cc50:	0710      	lsls	r0, r2, #28
 800cc52:	460c      	mov	r4, r1
 800cc54:	d458      	bmi.n	800cd08 <__sflush_r+0xc0>
 800cc56:	684b      	ldr	r3, [r1, #4]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	dc05      	bgt.n	800cc68 <__sflush_r+0x20>
 800cc5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	dc02      	bgt.n	800cc68 <__sflush_r+0x20>
 800cc62:	2000      	movs	r0, #0
 800cc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc6a:	2e00      	cmp	r6, #0
 800cc6c:	d0f9      	beq.n	800cc62 <__sflush_r+0x1a>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc74:	682f      	ldr	r7, [r5, #0]
 800cc76:	6a21      	ldr	r1, [r4, #32]
 800cc78:	602b      	str	r3, [r5, #0]
 800cc7a:	d032      	beq.n	800cce2 <__sflush_r+0x9a>
 800cc7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc7e:	89a3      	ldrh	r3, [r4, #12]
 800cc80:	075a      	lsls	r2, r3, #29
 800cc82:	d505      	bpl.n	800cc90 <__sflush_r+0x48>
 800cc84:	6863      	ldr	r3, [r4, #4]
 800cc86:	1ac0      	subs	r0, r0, r3
 800cc88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc8a:	b10b      	cbz	r3, 800cc90 <__sflush_r+0x48>
 800cc8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc8e:	1ac0      	subs	r0, r0, r3
 800cc90:	2300      	movs	r3, #0
 800cc92:	4602      	mov	r2, r0
 800cc94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc96:	6a21      	ldr	r1, [r4, #32]
 800cc98:	4628      	mov	r0, r5
 800cc9a:	47b0      	blx	r6
 800cc9c:	1c43      	adds	r3, r0, #1
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	d106      	bne.n	800ccb0 <__sflush_r+0x68>
 800cca2:	6829      	ldr	r1, [r5, #0]
 800cca4:	291d      	cmp	r1, #29
 800cca6:	d82b      	bhi.n	800cd00 <__sflush_r+0xb8>
 800cca8:	4a29      	ldr	r2, [pc, #164]	; (800cd50 <__sflush_r+0x108>)
 800ccaa:	410a      	asrs	r2, r1
 800ccac:	07d6      	lsls	r6, r2, #31
 800ccae:	d427      	bmi.n	800cd00 <__sflush_r+0xb8>
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	6062      	str	r2, [r4, #4]
 800ccb4:	04d9      	lsls	r1, r3, #19
 800ccb6:	6922      	ldr	r2, [r4, #16]
 800ccb8:	6022      	str	r2, [r4, #0]
 800ccba:	d504      	bpl.n	800ccc6 <__sflush_r+0x7e>
 800ccbc:	1c42      	adds	r2, r0, #1
 800ccbe:	d101      	bne.n	800ccc4 <__sflush_r+0x7c>
 800ccc0:	682b      	ldr	r3, [r5, #0]
 800ccc2:	b903      	cbnz	r3, 800ccc6 <__sflush_r+0x7e>
 800ccc4:	6560      	str	r0, [r4, #84]	; 0x54
 800ccc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccc8:	602f      	str	r7, [r5, #0]
 800ccca:	2900      	cmp	r1, #0
 800cccc:	d0c9      	beq.n	800cc62 <__sflush_r+0x1a>
 800ccce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccd2:	4299      	cmp	r1, r3
 800ccd4:	d002      	beq.n	800ccdc <__sflush_r+0x94>
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	f7ff fbea 	bl	800c4b0 <_free_r>
 800ccdc:	2000      	movs	r0, #0
 800ccde:	6360      	str	r0, [r4, #52]	; 0x34
 800cce0:	e7c0      	b.n	800cc64 <__sflush_r+0x1c>
 800cce2:	2301      	movs	r3, #1
 800cce4:	4628      	mov	r0, r5
 800cce6:	47b0      	blx	r6
 800cce8:	1c41      	adds	r1, r0, #1
 800ccea:	d1c8      	bne.n	800cc7e <__sflush_r+0x36>
 800ccec:	682b      	ldr	r3, [r5, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d0c5      	beq.n	800cc7e <__sflush_r+0x36>
 800ccf2:	2b1d      	cmp	r3, #29
 800ccf4:	d001      	beq.n	800ccfa <__sflush_r+0xb2>
 800ccf6:	2b16      	cmp	r3, #22
 800ccf8:	d101      	bne.n	800ccfe <__sflush_r+0xb6>
 800ccfa:	602f      	str	r7, [r5, #0]
 800ccfc:	e7b1      	b.n	800cc62 <__sflush_r+0x1a>
 800ccfe:	89a3      	ldrh	r3, [r4, #12]
 800cd00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd04:	81a3      	strh	r3, [r4, #12]
 800cd06:	e7ad      	b.n	800cc64 <__sflush_r+0x1c>
 800cd08:	690f      	ldr	r7, [r1, #16]
 800cd0a:	2f00      	cmp	r7, #0
 800cd0c:	d0a9      	beq.n	800cc62 <__sflush_r+0x1a>
 800cd0e:	0793      	lsls	r3, r2, #30
 800cd10:	680e      	ldr	r6, [r1, #0]
 800cd12:	bf08      	it	eq
 800cd14:	694b      	ldreq	r3, [r1, #20]
 800cd16:	600f      	str	r7, [r1, #0]
 800cd18:	bf18      	it	ne
 800cd1a:	2300      	movne	r3, #0
 800cd1c:	eba6 0807 	sub.w	r8, r6, r7
 800cd20:	608b      	str	r3, [r1, #8]
 800cd22:	f1b8 0f00 	cmp.w	r8, #0
 800cd26:	dd9c      	ble.n	800cc62 <__sflush_r+0x1a>
 800cd28:	6a21      	ldr	r1, [r4, #32]
 800cd2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd2c:	4643      	mov	r3, r8
 800cd2e:	463a      	mov	r2, r7
 800cd30:	4628      	mov	r0, r5
 800cd32:	47b0      	blx	r6
 800cd34:	2800      	cmp	r0, #0
 800cd36:	dc06      	bgt.n	800cd46 <__sflush_r+0xfe>
 800cd38:	89a3      	ldrh	r3, [r4, #12]
 800cd3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd3e:	81a3      	strh	r3, [r4, #12]
 800cd40:	f04f 30ff 	mov.w	r0, #4294967295
 800cd44:	e78e      	b.n	800cc64 <__sflush_r+0x1c>
 800cd46:	4407      	add	r7, r0
 800cd48:	eba8 0800 	sub.w	r8, r8, r0
 800cd4c:	e7e9      	b.n	800cd22 <__sflush_r+0xda>
 800cd4e:	bf00      	nop
 800cd50:	dfbffffe 	.word	0xdfbffffe

0800cd54 <_fflush_r>:
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	690b      	ldr	r3, [r1, #16]
 800cd58:	4605      	mov	r5, r0
 800cd5a:	460c      	mov	r4, r1
 800cd5c:	b913      	cbnz	r3, 800cd64 <_fflush_r+0x10>
 800cd5e:	2500      	movs	r5, #0
 800cd60:	4628      	mov	r0, r5
 800cd62:	bd38      	pop	{r3, r4, r5, pc}
 800cd64:	b118      	cbz	r0, 800cd6e <_fflush_r+0x1a>
 800cd66:	6a03      	ldr	r3, [r0, #32]
 800cd68:	b90b      	cbnz	r3, 800cd6e <_fflush_r+0x1a>
 800cd6a:	f7ff f97b 	bl	800c064 <__sinit>
 800cd6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d0f3      	beq.n	800cd5e <_fflush_r+0xa>
 800cd76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd78:	07d0      	lsls	r0, r2, #31
 800cd7a:	d404      	bmi.n	800cd86 <_fflush_r+0x32>
 800cd7c:	0599      	lsls	r1, r3, #22
 800cd7e:	d402      	bmi.n	800cd86 <_fflush_r+0x32>
 800cd80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd82:	f7ff fb84 	bl	800c48e <__retarget_lock_acquire_recursive>
 800cd86:	4628      	mov	r0, r5
 800cd88:	4621      	mov	r1, r4
 800cd8a:	f7ff ff5d 	bl	800cc48 <__sflush_r>
 800cd8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd90:	07da      	lsls	r2, r3, #31
 800cd92:	4605      	mov	r5, r0
 800cd94:	d4e4      	bmi.n	800cd60 <_fflush_r+0xc>
 800cd96:	89a3      	ldrh	r3, [r4, #12]
 800cd98:	059b      	lsls	r3, r3, #22
 800cd9a:	d4e1      	bmi.n	800cd60 <_fflush_r+0xc>
 800cd9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd9e:	f7ff fb77 	bl	800c490 <__retarget_lock_release_recursive>
 800cda2:	e7dd      	b.n	800cd60 <_fflush_r+0xc>

0800cda4 <__swhatbuf_r>:
 800cda4:	b570      	push	{r4, r5, r6, lr}
 800cda6:	460c      	mov	r4, r1
 800cda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdac:	2900      	cmp	r1, #0
 800cdae:	b096      	sub	sp, #88	; 0x58
 800cdb0:	4615      	mov	r5, r2
 800cdb2:	461e      	mov	r6, r3
 800cdb4:	da0d      	bge.n	800cdd2 <__swhatbuf_r+0x2e>
 800cdb6:	89a3      	ldrh	r3, [r4, #12]
 800cdb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdbc:	f04f 0100 	mov.w	r1, #0
 800cdc0:	bf0c      	ite	eq
 800cdc2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cdc6:	2340      	movne	r3, #64	; 0x40
 800cdc8:	2000      	movs	r0, #0
 800cdca:	6031      	str	r1, [r6, #0]
 800cdcc:	602b      	str	r3, [r5, #0]
 800cdce:	b016      	add	sp, #88	; 0x58
 800cdd0:	bd70      	pop	{r4, r5, r6, pc}
 800cdd2:	466a      	mov	r2, sp
 800cdd4:	f000 f88a 	bl	800ceec <_fstat_r>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	dbec      	blt.n	800cdb6 <__swhatbuf_r+0x12>
 800cddc:	9901      	ldr	r1, [sp, #4]
 800cdde:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cde2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cde6:	4259      	negs	r1, r3
 800cde8:	4159      	adcs	r1, r3
 800cdea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdee:	e7eb      	b.n	800cdc8 <__swhatbuf_r+0x24>

0800cdf0 <__smakebuf_r>:
 800cdf0:	898b      	ldrh	r3, [r1, #12]
 800cdf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdf4:	079d      	lsls	r5, r3, #30
 800cdf6:	4606      	mov	r6, r0
 800cdf8:	460c      	mov	r4, r1
 800cdfa:	d507      	bpl.n	800ce0c <__smakebuf_r+0x1c>
 800cdfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	6123      	str	r3, [r4, #16]
 800ce04:	2301      	movs	r3, #1
 800ce06:	6163      	str	r3, [r4, #20]
 800ce08:	b002      	add	sp, #8
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
 800ce0c:	ab01      	add	r3, sp, #4
 800ce0e:	466a      	mov	r2, sp
 800ce10:	f7ff ffc8 	bl	800cda4 <__swhatbuf_r>
 800ce14:	9900      	ldr	r1, [sp, #0]
 800ce16:	4605      	mov	r5, r0
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f7ff fbb5 	bl	800c588 <_malloc_r>
 800ce1e:	b948      	cbnz	r0, 800ce34 <__smakebuf_r+0x44>
 800ce20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce24:	059a      	lsls	r2, r3, #22
 800ce26:	d4ef      	bmi.n	800ce08 <__smakebuf_r+0x18>
 800ce28:	f023 0303 	bic.w	r3, r3, #3
 800ce2c:	f043 0302 	orr.w	r3, r3, #2
 800ce30:	81a3      	strh	r3, [r4, #12]
 800ce32:	e7e3      	b.n	800cdfc <__smakebuf_r+0xc>
 800ce34:	89a3      	ldrh	r3, [r4, #12]
 800ce36:	6020      	str	r0, [r4, #0]
 800ce38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce3c:	81a3      	strh	r3, [r4, #12]
 800ce3e:	9b00      	ldr	r3, [sp, #0]
 800ce40:	6163      	str	r3, [r4, #20]
 800ce42:	9b01      	ldr	r3, [sp, #4]
 800ce44:	6120      	str	r0, [r4, #16]
 800ce46:	b15b      	cbz	r3, 800ce60 <__smakebuf_r+0x70>
 800ce48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f000 f85f 	bl	800cf10 <_isatty_r>
 800ce52:	b128      	cbz	r0, 800ce60 <__smakebuf_r+0x70>
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	f023 0303 	bic.w	r3, r3, #3
 800ce5a:	f043 0301 	orr.w	r3, r3, #1
 800ce5e:	81a3      	strh	r3, [r4, #12]
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	431d      	orrs	r5, r3
 800ce64:	81a5      	strh	r5, [r4, #12]
 800ce66:	e7cf      	b.n	800ce08 <__smakebuf_r+0x18>

0800ce68 <_putc_r>:
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	460d      	mov	r5, r1
 800ce6c:	4614      	mov	r4, r2
 800ce6e:	4606      	mov	r6, r0
 800ce70:	b118      	cbz	r0, 800ce7a <_putc_r+0x12>
 800ce72:	6a03      	ldr	r3, [r0, #32]
 800ce74:	b90b      	cbnz	r3, 800ce7a <_putc_r+0x12>
 800ce76:	f7ff f8f5 	bl	800c064 <__sinit>
 800ce7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce7c:	07d8      	lsls	r0, r3, #31
 800ce7e:	d405      	bmi.n	800ce8c <_putc_r+0x24>
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	0599      	lsls	r1, r3, #22
 800ce84:	d402      	bmi.n	800ce8c <_putc_r+0x24>
 800ce86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce88:	f7ff fb01 	bl	800c48e <__retarget_lock_acquire_recursive>
 800ce8c:	68a3      	ldr	r3, [r4, #8]
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	60a3      	str	r3, [r4, #8]
 800ce94:	da05      	bge.n	800cea2 <_putc_r+0x3a>
 800ce96:	69a2      	ldr	r2, [r4, #24]
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	db12      	blt.n	800cec2 <_putc_r+0x5a>
 800ce9c:	b2eb      	uxtb	r3, r5
 800ce9e:	2b0a      	cmp	r3, #10
 800cea0:	d00f      	beq.n	800cec2 <_putc_r+0x5a>
 800cea2:	6823      	ldr	r3, [r4, #0]
 800cea4:	1c5a      	adds	r2, r3, #1
 800cea6:	6022      	str	r2, [r4, #0]
 800cea8:	701d      	strb	r5, [r3, #0]
 800ceaa:	b2ed      	uxtb	r5, r5
 800ceac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ceae:	07da      	lsls	r2, r3, #31
 800ceb0:	d405      	bmi.n	800cebe <_putc_r+0x56>
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	059b      	lsls	r3, r3, #22
 800ceb6:	d402      	bmi.n	800cebe <_putc_r+0x56>
 800ceb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceba:	f7ff fae9 	bl	800c490 <__retarget_lock_release_recursive>
 800cebe:	4628      	mov	r0, r5
 800cec0:	bd70      	pop	{r4, r5, r6, pc}
 800cec2:	4629      	mov	r1, r5
 800cec4:	4622      	mov	r2, r4
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7ff f9bb 	bl	800c242 <__swbuf_r>
 800cecc:	4605      	mov	r5, r0
 800cece:	e7ed      	b.n	800ceac <_putc_r+0x44>

0800ced0 <strchr>:
 800ced0:	b2c9      	uxtb	r1, r1
 800ced2:	4603      	mov	r3, r0
 800ced4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ced8:	b11a      	cbz	r2, 800cee2 <strchr+0x12>
 800ceda:	428a      	cmp	r2, r1
 800cedc:	d1f9      	bne.n	800ced2 <strchr+0x2>
 800cede:	4618      	mov	r0, r3
 800cee0:	4770      	bx	lr
 800cee2:	2900      	cmp	r1, #0
 800cee4:	bf18      	it	ne
 800cee6:	2300      	movne	r3, #0
 800cee8:	e7f9      	b.n	800cede <strchr+0xe>
	...

0800ceec <_fstat_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4d07      	ldr	r5, [pc, #28]	; (800cf0c <_fstat_r+0x20>)
 800cef0:	2300      	movs	r3, #0
 800cef2:	4604      	mov	r4, r0
 800cef4:	4608      	mov	r0, r1
 800cef6:	4611      	mov	r1, r2
 800cef8:	602b      	str	r3, [r5, #0]
 800cefa:	f7f5 fb4e 	bl	800259a <_fstat>
 800cefe:	1c43      	adds	r3, r0, #1
 800cf00:	d102      	bne.n	800cf08 <_fstat_r+0x1c>
 800cf02:	682b      	ldr	r3, [r5, #0]
 800cf04:	b103      	cbz	r3, 800cf08 <_fstat_r+0x1c>
 800cf06:	6023      	str	r3, [r4, #0]
 800cf08:	bd38      	pop	{r3, r4, r5, pc}
 800cf0a:	bf00      	nop
 800cf0c:	200018f8 	.word	0x200018f8

0800cf10 <_isatty_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d06      	ldr	r5, [pc, #24]	; (800cf2c <_isatty_r+0x1c>)
 800cf14:	2300      	movs	r3, #0
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	602b      	str	r3, [r5, #0]
 800cf1c:	f7f5 fb4d 	bl	80025ba <_isatty>
 800cf20:	1c43      	adds	r3, r0, #1
 800cf22:	d102      	bne.n	800cf2a <_isatty_r+0x1a>
 800cf24:	682b      	ldr	r3, [r5, #0]
 800cf26:	b103      	cbz	r3, 800cf2a <_isatty_r+0x1a>
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	bd38      	pop	{r3, r4, r5, pc}
 800cf2c:	200018f8 	.word	0x200018f8

0800cf30 <_sbrk_r>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4d06      	ldr	r5, [pc, #24]	; (800cf4c <_sbrk_r+0x1c>)
 800cf34:	2300      	movs	r3, #0
 800cf36:	4604      	mov	r4, r0
 800cf38:	4608      	mov	r0, r1
 800cf3a:	602b      	str	r3, [r5, #0]
 800cf3c:	f7f5 fb56 	bl	80025ec <_sbrk>
 800cf40:	1c43      	adds	r3, r0, #1
 800cf42:	d102      	bne.n	800cf4a <_sbrk_r+0x1a>
 800cf44:	682b      	ldr	r3, [r5, #0]
 800cf46:	b103      	cbz	r3, 800cf4a <_sbrk_r+0x1a>
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	200018f8 	.word	0x200018f8

0800cf50 <_init>:
 800cf50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf52:	bf00      	nop
 800cf54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf56:	bc08      	pop	{r3}
 800cf58:	469e      	mov	lr, r3
 800cf5a:	4770      	bx	lr

0800cf5c <_fini>:
 800cf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5e:	bf00      	nop
 800cf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf62:	bc08      	pop	{r3}
 800cf64:	469e      	mov	lr, r3
 800cf66:	4770      	bx	lr
