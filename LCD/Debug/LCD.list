
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000008  08004138  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000398  20000214  08004344  00020214  2**2
                  ALLOC
  8 ._user_heap_stack 00001404  200005ac  08004344  000205ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013b18  00000000  00000000  00020287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002a76  00000000  00000000  00033d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001518  00000000  00000000  00036818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001006  00000000  00000000  00037d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021295  00000000  00000000  00038d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000128b3  00000000  00000000  00059fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d5088  00000000  00000000  0006c87e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000579c  00000000  00000000  00141908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001470a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000214 	.word	0x20000214
 8000158:	00000000 	.word	0x00000000
 800015c:	0800401c 	.word	0x0800401c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000218 	.word	0x20000218
 8000178:	0800401c 	.word	0x0800401c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <Init_LCD>:
void comm_Col_Lower_Addr();
void comm_Page_Addr(unsigned char addr);


void Init_LCD()
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	void comm_Power_Control();
	void comm_Resistor_Ratio();
	void comm_Volume_Mode();
	void comm_Volume_Register();
	void comm_Display_On();
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <Disp_Pic>:

void Disp_Pic(unsigned char *lcd_string)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b086      	sub	sp, #24
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
	//LCD organized into 4 pages(rows), each of 128 pixels wide and 8 pixels high.
	//Each element in lcd_string is a vertical column of 8 pixels.
	//pages are populated left to right in columns of 8 pixels
    unsigned int i,j;
    unsigned char page = 0x00; //starting page address at 0xB0 + 0
 800048e:	2300      	movs	r3, #0
 8000490:	73fb      	strb	r3, [r7, #15]

    comm_Display_Off();
 8000492:	f000 f925 	bl	80006e0 <comm_Display_Off>
    comm_Display_Start_Addr_0();
 8000496:	f000 f931 	bl	80006fc <comm_Display_Start_Addr_0>

    for(i=0; i<4; i++) //32 pixel high display / 8 pixels per page = 4 pages
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
 800049e:	e01e      	b.n	80004de <Disp_Pic+0x58>
    {
    	comm_Page_Addr(page);       //set current page address
 80004a0:	7bfb      	ldrb	r3, [r7, #15]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f93f 	bl	8000726 <comm_Page_Addr>
    	comm_Col_Upper_Addr();
 80004a8:	f000 f92f 	bl	800070a <comm_Col_Upper_Addr>
    	comm_Col_Lower_Addr();
 80004ac:	f000 f934 	bl	8000718 <comm_Col_Lower_Addr>

        for(j=0; j<128; j++) //128 columns wide
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]
 80004b4:	e00a      	b.n	80004cc <Disp_Pic+0x46>
        {
        	data_write(*lcd_string);    //send picture data
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f876 	bl	80005ac <data_write>
        	lcd_string++; //goes to next element/column
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	3301      	adds	r3, #1
 80004c4:	607b      	str	r3, [r7, #4]
        for(j=0; j<128; j++) //128 columns wide
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	3301      	adds	r3, #1
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	693b      	ldr	r3, [r7, #16]
 80004ce:	2b7f      	cmp	r3, #127	; 0x7f
 80004d0:	d9f1      	bls.n	80004b6 <Disp_Pic+0x30>
        }

        page++;         //after 128 columns, go to next page
 80004d2:	7bfb      	ldrb	r3, [r7, #15]
 80004d4:	3301      	adds	r3, #1
 80004d6:	73fb      	strb	r3, [r7, #15]
    for(i=0; i<4; i++) //32 pixel high display / 8 pixels per page = 4 pages
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	3301      	adds	r3, #1
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d9dd      	bls.n	80004a0 <Disp_Pic+0x1a>
    }
    comm_Display_On();
 80004e4:	f000 f903 	bl	80006ee <comm_Display_On>
}
 80004e8:	bf00      	nop
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <Clear_LCD>:

void Clear_LCD()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
    unsigned int i,j;
    unsigned char page = 0x00;
 80004f6:	2300      	movs	r3, #0
 80004f8:	71fb      	strb	r3, [r7, #7]
    comm_Display_Off();
 80004fa:	f000 f8f1 	bl	80006e0 <comm_Display_Off>
    comm_Display_Start_Addr_0();
 80004fe:	f000 f8fd 	bl	80006fc <comm_Display_Start_Addr_0>

    for(i = 0; i < 4; i++) //32pixel display / 8 pixels per page = 4 pages
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	e019      	b.n	800053c <Clear_LCD+0x4c>
    {
    	comm_Page_Addr(page);       //set current page address
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	4618      	mov	r0, r3
 800050c:	f000 f90b 	bl	8000726 <comm_Page_Addr>
    	comm_Col_Upper_Addr();
 8000510:	f000 f8fb 	bl	800070a <comm_Col_Upper_Addr>
    	comm_Col_Lower_Addr();
 8000514:	f000 f900 	bl	8000718 <comm_Col_Lower_Addr>

        for(j = 0; j < 128; j++) //128 columns wide
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	e005      	b.n	800052a <Clear_LCD+0x3a>
        {
    	    data_write(0x00);    //send picture data
 800051e:	2000      	movs	r0, #0
 8000520:	f000 f844 	bl	80005ac <data_write>
        for(j = 0; j < 128; j++) //128 columns wide
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	3301      	adds	r3, #1
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	2b7f      	cmp	r3, #127	; 0x7f
 800052e:	d9f6      	bls.n	800051e <Clear_LCD+0x2e>
        }
        page++;         //after 128 columns, go to next page
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	3301      	adds	r3, #1
 8000534:	71fb      	strb	r3, [r7, #7]
    for(i = 0; i < 4; i++) //32pixel display / 8 pixels per page = 4 pages
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3301      	adds	r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2b03      	cmp	r3, #3
 8000540:	d9e2      	bls.n	8000508 <Clear_LCD+0x18>
    }
    comm_Display_On();
 8000542:	f000 f8d4 	bl	80006ee <comm_Display_On>
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <Black_LCD>:

void Black_LCD()
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b084      	sub	sp, #16
 8000552:	af00      	add	r7, sp, #0
    unsigned int i,j;
    unsigned char page = 0x00;
 8000554:	2300      	movs	r3, #0
 8000556:	71fb      	strb	r3, [r7, #7]
    comm_Display_Off();
 8000558:	f000 f8c2 	bl	80006e0 <comm_Display_Off>
    comm_Display_Start_Addr_0();
 800055c:	f000 f8ce 	bl	80006fc <comm_Display_Start_Addr_0>

    for(i = 0; i < 4; i++) //32pixel display / 8 pixels per page = 4 pages
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e019      	b.n	800059a <Black_LCD+0x4c>
    {
    	comm_Page_Addr(page);       //set current page address
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f8dc 	bl	8000726 <comm_Page_Addr>
    	comm_Col_Upper_Addr();
 800056e:	f000 f8cc 	bl	800070a <comm_Col_Upper_Addr>
    	comm_Col_Lower_Addr();
 8000572:	f000 f8d1 	bl	8000718 <comm_Col_Lower_Addr>

        for(j = 0; j < 128; j++) //128 columns wide
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	e005      	b.n	8000588 <Black_LCD+0x3a>
        {
    	    data_write(0xFF);    //send picture data
 800057c:	20ff      	movs	r0, #255	; 0xff
 800057e:	f000 f815 	bl	80005ac <data_write>
        for(j = 0; j < 128; j++) //128 columns wide
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	3301      	adds	r3, #1
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	2b7f      	cmp	r3, #127	; 0x7f
 800058c:	d9f6      	bls.n	800057c <Black_LCD+0x2e>
        }
        page++;         //after 128 columns, go to next page
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	3301      	adds	r3, #1
 8000592:	71fb      	strb	r3, [r7, #7]
    for(i = 0; i < 4; i++) //32pixel display / 8 pixels per page = 4 pages
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3301      	adds	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d9e2      	bls.n	8000566 <Black_LCD+0x18>
    }
    comm_Display_On();
 80005a0:	f000 f8a5 	bl	80006ee <comm_Display_On>
}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <data_write>:

void data_write(unsigned char data) //Data Output Serial Interface
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	unsigned int n;

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2110      	movs	r1, #16
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f001 f803 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_SET); //data type
 80005c2:	2201      	movs	r2, #1
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f000 fffd 	bl	80015c8 <HAL_GPIO_WritePin>

	for(n=0; n<8; n++) //each pixel in the column
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	e02b      	b.n	800062c <data_write+0x80>
	{
		if((data&0x80)==0x80)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	da06      	bge.n	80005ea <data_write+0x3e>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	f000 fff0 	bl	80015c8 <HAL_GPIO_WritePin>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
		}


		while(0);
 80005e8:	e005      	b.n	80005f6 <data_write+0x4a>
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f000 ffe9 	bl	80015c8 <HAL_GPIO_WritePin>
		while(0);
 80005f6:	bf00      	nop
		data = (data<<1);
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2120      	movs	r1, #32
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f000 ffdf 	bl	80015c8 <HAL_GPIO_WritePin>
		while(0);
 800060a:	bf00      	nop
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2120      	movs	r1, #32
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f000 ffd8 	bl	80015c8 <HAL_GPIO_WritePin>
		while(0);
 8000618:	bf00      	nop
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2120      	movs	r1, #32
 800061e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000622:	f000 ffd1 	bl	80015c8 <HAL_GPIO_WritePin>
	for(n=0; n<8; n++) //each pixel in the column
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	3301      	adds	r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b07      	cmp	r3, #7
 8000630:	d9d0      	bls.n	80005d4 <data_write+0x28>
	}
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2110      	movs	r1, #16
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f000 ffc5 	bl	80015c8 <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <comm_write>:

void comm_write(unsigned char command)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b084      	sub	sp, #16
 800064a:	af00      	add	r7, sp, #0
 800064c:	4603      	mov	r3, r0
 800064e:	71fb      	strb	r3, [r7, #7]
	unsigned int n;

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); //CS //activating LCD control
 8000650:	2200      	movs	r2, #0
 8000652:	2110      	movs	r1, #16
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000658:	f000 ffb6 	bl	80015c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET); //RS //instruction/setting type
 800065c:	2200      	movs	r2, #0
 800065e:	2140      	movs	r1, #64	; 0x40
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f000 ffb0 	bl	80015c8 <HAL_GPIO_WritePin>

	for(n=0; n<8; n++)
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	e02b      	b.n	80006c6 <comm_write+0x80>
	{
		//sends each bit of the command 1 at a time, starting at most significant (left to right)
		if((command&0x80)==0x80)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	da06      	bge.n	8000684 <comm_write+0x3e>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_SET); //SI
 8000676:	2201      	movs	r2, #1
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f000 ffa3 	bl	80015c8 <HAL_GPIO_WritePin>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
		}


		while(0);
 8000682:	e005      	b.n	8000690 <comm_write+0x4a>
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2180      	movs	r1, #128	; 0x80
 8000688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068c:	f000 ff9c 	bl	80015c8 <HAL_GPIO_WritePin>
		while(0);
 8000690:	bf00      	nop
		command = (command<<1);
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET); //SC
 8000698:	2200      	movs	r2, #0
 800069a:	2120      	movs	r1, #32
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f000 ff92 	bl	80015c8 <HAL_GPIO_WritePin>
		while(0);
 80006a4:	bf00      	nop
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2120      	movs	r1, #32
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ae:	f000 ff8b 	bl	80015c8 <HAL_GPIO_WritePin>
		while(0);
 80006b2:	bf00      	nop
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2120      	movs	r1, #32
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006bc:	f000 ff84 	bl	80015c8 <HAL_GPIO_WritePin>
	for(n=0; n<8; n++)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b07      	cmp	r3, #7
 80006ca:	d9d0      	bls.n	800066e <comm_write+0x28>
	}

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2110      	movs	r1, #16
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d4:	f000 ff78 	bl	80015c8 <HAL_GPIO_WritePin>
}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <comm_Display_Off>:
{
	comm_write(0xA0); //see manual to get binary commands
}

void comm_Display_Off()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	comm_write(0xAE);
 80006e4:	20ae      	movs	r0, #174	; 0xae
 80006e6:	f7ff ffae 	bl	8000646 <comm_write>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}

080006ee <comm_Display_On>:

void comm_Display_On()
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
	comm_write(0xAF);
 80006f2:	20af      	movs	r0, #175	; 0xaf
 80006f4:	f7ff ffa7 	bl	8000646 <comm_write>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <comm_Display_Start_Addr_0>:
{
	comm_write(0x20);
}

void comm_Display_Start_Addr_0()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	comm_write(0x40);
 8000700:	2040      	movs	r0, #64	; 0x40
 8000702:	f7ff ffa0 	bl	8000646 <comm_write>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}

0800070a <comm_Col_Upper_Addr>:

void comm_Col_Upper_Addr()
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0
	comm_write(0x10);
 800070e:	2010      	movs	r0, #16
 8000710:	f7ff ff99 	bl	8000646 <comm_write>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <comm_Col_Lower_Addr>:

void comm_Col_Lower_Addr()
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	comm_write(0x00);
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff92 	bl	8000646 <comm_write>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <comm_Page_Addr>:

void comm_Page_Addr(unsigned char addr)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	71fb      	strb	r3, [r7, #7]
	comm_write(0xB0 + addr);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	3b50      	subs	r3, #80	; 0x50
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff85 	bl	8000646 <comm_write>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800074c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000754:	f023 0218 	bic.w	r2, r3, #24
 8000758:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4313      	orrs	r3, r2
 8000760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800077c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800077e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4313      	orrs	r3, r2
 8000786:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800078c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4013      	ands	r3, r2
 8000792:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000794:	68fb      	ldr	r3, [r7, #12]
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fc08 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f858 	bl	8000860 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007b0:	f000 f8cc 	bl	800094c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 f95e 	bl	8000a74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007b8:	f000 f8e6 	bl	8000988 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80007bc:	f000 f932 	bl	8000a24 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  Init_LCD();
 80007c0:	f7ff fe5a 	bl	8000478 <Init_LCD>
  state = 0;
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <main+0xb0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
  state_changed = 0;
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <main+0xb4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (state == 0){
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <main+0xb0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d110      	bne.n	80007fa <main+0x56>
		  if (state_changed == 1)
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <main+0xb4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d105      	bne.n	80007ec <main+0x48>
		  {
			  Disp_Pic(DiscBotLogo);
 80007e0:	481e      	ldr	r0, [pc, #120]	; (800085c <main+0xb8>)
 80007e2:	f7ff fe50 	bl	8000486 <Disp_Pic>
			  state_changed = 0;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <main+0xb4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
		  }

		  Blue_On();
 80007ec:	f000 f9e8 	bl	8000bc0 <Blue_On>
		  Green_Off();
 80007f0:	f000 f9da 	bl	8000ba8 <Green_Off>
		  Red_Off();
 80007f4:	f000 f9c0 	bl	8000b78 <Red_Off>
 80007f8:	e7ea      	b.n	80007d0 <main+0x2c>
	  }
	  else if (state == 1){
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <main+0xb0>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d10f      	bne.n	8000822 <main+0x7e>
		  if (state_changed == 1)
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <main+0xb4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d104      	bne.n	8000814 <main+0x70>
		  {
			  Clear_LCD();
 800080a:	f7ff fe71 	bl	80004f0 <Clear_LCD>
			  state_changed = 0;
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <main+0xb4>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
		  }

		  Blue_Off();
 8000814:	f000 f9e0 	bl	8000bd8 <Blue_Off>
		  Green_On();
 8000818:	f000 f9ba 	bl	8000b90 <Green_On>
		  Red_Off();
 800081c:	f000 f9ac 	bl	8000b78 <Red_Off>
 8000820:	e7d6      	b.n	80007d0 <main+0x2c>
	  }
	  else if (state == 2){
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <main+0xb0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d10f      	bne.n	800084a <main+0xa6>
		  if (state_changed == 1)
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <main+0xb4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d104      	bne.n	800083c <main+0x98>
		  {
			  Black_LCD();
 8000832:	f7ff fe8c 	bl	800054e <Black_LCD>
			  state_changed = 0;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <main+0xb4>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
		  }

		  Blue_Off();
 800083c:	f000 f9cc 	bl	8000bd8 <Blue_Off>
		  Green_Off();
 8000840:	f000 f9b2 	bl	8000ba8 <Green_Off>
		  Red_On();
 8000844:	f000 f98c 	bl	8000b60 <Red_On>
 8000848:	e7c2      	b.n	80007d0 <main+0x2c>
	  }
	  else{
		  state = 0;
 800084a:	4b02      	ldr	r3, [pc, #8]	; (8000854 <main+0xb0>)
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
	  if (state == 0){
 8000850:	e7be      	b.n	80007d0 <main+0x2c>
 8000852:	bf00      	nop
 8000854:	200005a0 	.word	0x200005a0
 8000858:	200005a4 	.word	0x200005a4
 800085c:	20000008 	.word	0x20000008

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b09a      	sub	sp, #104	; 0x68
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2248      	movs	r2, #72	; 0x48
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 fba7 	bl	8003fc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000894:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	f023 0303 	bic.w	r3, r3, #3
 80008a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008aa:	f000 ffb5 	bl	8001818 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff ff48 	bl	8000744 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b4:	4b24      	ldr	r3, [pc, #144]	; (8000948 <SystemClock_Config+0xe8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008bc:	4a22      	ldr	r2, [pc, #136]	; (8000948 <SystemClock_Config+0xe8>)
 80008be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b20      	ldr	r3, [pc, #128]	; (8000948 <SystemClock_Config+0xe8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80008d0:	2327      	movs	r3, #39	; 0x27
 80008d2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008da:	2301      	movs	r3, #1
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e8:	2340      	movs	r3, #64	; 0x40
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008f0:	2360      	movs	r3, #96	; 0x60
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fb1f 	bl	8001f40 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000908:	f000 f998 	bl	8000c3c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800090c:	236f      	movs	r3, #111	; 0x6f
 800090e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000910:	2302      	movs	r3, #2
 8000912:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fe7b 	bl	8002628 <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000938:	f000 f980 	bl	8000c3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800093c:	f002 fc36 	bl	80031ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8000940:	bf00      	nop
 8000942:	3768      	adds	r7, #104	; 0x68
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58000400 	.word	0x58000400

0800094c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000952:	463b      	mov	r3, r7
 8000954:	2250      	movs	r2, #80	; 0x50
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f003 fb32 	bl	8003fc2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800095e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000962:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000964:	2300      	movs	r3, #0
 8000966:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000968:	2300      	movs	r3, #0
 800096a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4618      	mov	r0, r3
 8000970:	f002 faa6 	bl	8002ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800097a:	f000 f95f 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	; 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 800098e:	4a24      	ldr	r2, [pc, #144]	; (8000a20 <MX_USART1_UART_Init+0x98>)
 8000990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 800099c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009a0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009b0:	220c      	movs	r2, #12
 80009b2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d2:	4812      	ldr	r0, [pc, #72]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009d4:	f002 fd21 	bl	800341a <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80009de:	f000 f92d 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009e6:	f003 f9e9 	bl	8003dbc <HAL_UARTEx_SetTxFifoThreshold>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80009f0:	f000 f924 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 80009f8:	f003 fa1e 	bl	8003e38 <HAL_UARTEx_SetRxFifoThreshold>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000a02:	f000 f91b 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART1_UART_Init+0x94>)
 8000a08:	f003 f99f 	bl	8003d4a <HAL_UARTEx_DisableFifoMode>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000a12:	f000 f913 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000230 	.word	0x20000230
 8000a20:	40013800 	.word	0x40013800

08000a24 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a2a:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <MX_USB_PCD_Init+0x4c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a30:	2208      	movs	r2, #8
 8000a32:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_USB_PCD_Init+0x48>)
 8000a5a:	f000 fde5 	bl	8001628 <HAL_PCD_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a64:	f000 f8ea 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200002c4 	.word	0x200002c4
 8000a70:	40006800 	.word	0x40006800

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a88:	2004      	movs	r0, #4
 8000a8a:	f7ff fe71 	bl	8000770 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fe6e 	bl	8000770 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	2002      	movs	r0, #2
 8000a96:	f7ff fe6b 	bl	8000770 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	2008      	movs	r0, #8
 8000a9c:	f7ff fe68 	bl	8000770 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|SCL_Pin|A0_Pin|SI_Pin, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	21f0      	movs	r1, #240	; 0xf0
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f000 fd8e 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2123      	movs	r1, #35	; 0x23
 8000ab0:	4828      	ldr	r0, [pc, #160]	; (8000b54 <MX_GPIO_Init+0xe0>)
 8000ab2:	f000 fd89 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS1_Pin SCL_Pin A0_Pin SI_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|SCL_Pin|A0_Pin|SI_Pin;
 8000ab6:	23f0      	movs	r3, #240	; 0xf0
 8000ab8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f000 fc0b 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ada:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481c      	ldr	r0, [pc, #112]	; (8000b58 <MX_GPIO_Init+0xe4>)
 8000ae6:	f000 fbff 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000aea:	2323      	movs	r3, #35	; 0x23
 8000aec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4815      	ldr	r0, [pc, #84]	; (8000b54 <MX_GPIO_Init+0xe0>)
 8000b00:	f000 fbf2 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000b04:	2303      	movs	r3, #3
 8000b06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4811      	ldr	r0, [pc, #68]	; (8000b5c <MX_GPIO_Init+0xe8>)
 8000b18:	f000 fbe6 	bl	80012e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2006      	movs	r0, #6
 8000b22:	f000 fbac 	bl	800127e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b26:	2006      	movs	r0, #6
 8000b28:	f000 fbc3 	bl	80012b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2007      	movs	r0, #7
 8000b32:	f000 fba4 	bl	800127e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 fbbb 	bl	80012b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	200a      	movs	r0, #10
 8000b42:	f000 fb9c 	bl	800127e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b46:	200a      	movs	r0, #10
 8000b48:	f000 fbb3 	bl	80012b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	48000400 	.word	0x48000400
 8000b58:	48000800 	.word	0x48000800
 8000b5c:	48000c00 	.word	0x48000c00

08000b60 <Red_On>:

/* USER CODE BEGIN 4 */
void Red_On()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	2102      	movs	r1, #2
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <Red_On+0x14>)
 8000b6a:	f000 fd2d 	bl	80015c8 <HAL_GPIO_WritePin>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	48000400 	.word	0x48000400

08000b78 <Red_Off>:

void Red_Off()
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2102      	movs	r1, #2
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <Red_Off+0x14>)
 8000b82:	f000 fd21 	bl	80015c8 <HAL_GPIO_WritePin>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	48000400 	.word	0x48000400

08000b90 <Green_On>:

void Green_On()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2101      	movs	r1, #1
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <Green_On+0x14>)
 8000b9a:	f000 fd15 	bl	80015c8 <HAL_GPIO_WritePin>
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	48000400 	.word	0x48000400

08000ba8 <Green_Off>:

void Green_Off()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <Green_Off+0x14>)
 8000bb2:	f000 fd09 	bl	80015c8 <HAL_GPIO_WritePin>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	48000400 	.word	0x48000400

08000bc0 <Blue_On>:

void Blue_On()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <Blue_On+0x14>)
 8000bca:	f000 fcfd 	bl	80015c8 <HAL_GPIO_WritePin>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	48000400 	.word	0x48000400

08000bd8 <Blue_Off>:

void Blue_Off()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2120      	movs	r1, #32
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <Blue_Off+0x14>)
 8000be2:	f000 fcf1 	bl	80015c8 <HAL_GPIO_WritePin>
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	48000400 	.word	0x48000400

08000bf0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == B1_Pin){state = 0;}      //10
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	2b10      	cmp	r3, #16
 8000bfe:	d103      	bne.n	8000c08 <HAL_GPIO_EXTI_Callback+0x18>
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e00c      	b.n	8000c22 <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_PIN == B2_Pin){state = 1;} //1
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d103      	bne.n	8000c16 <HAL_GPIO_EXTI_Callback+0x26>
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	e005      	b.n	8000c22 <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_PIN == B3_Pin){state = 2;} //2
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d102      	bne.n	8000c22 <HAL_GPIO_EXTI_Callback+0x32>
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	601a      	str	r2, [r3, #0]
	state_changed = 1;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x48>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	200005a0 	.word	0x200005a0
 8000c38:	200005a4 	.word	0x200005a4

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>

08000c46 <LL_AHB2_GRP1_EnableClock>:
{
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4013      	ands	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b09c      	sub	sp, #112	; 0x70
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2250      	movs	r2, #80	; 0x50
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 f958 	bl	8003fc2 <memset>
  if(huart->Instance==USART1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <HAL_UART_MspInit+0x84>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d124      	bne.n	8000d66 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 f8c9 	bl	8002ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d34:	f7ff ff82 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d3c:	f7ff ffb5 	bl	8000caa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d40:	2002      	movs	r0, #2
 8000d42:	f7ff ff80 	bl	8000c46 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d46:	23c0      	movs	r3, #192	; 0xc0
 8000d48:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d56:	2307      	movs	r3, #7
 8000d58:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <HAL_UART_MspInit+0x88>)
 8000d62:	f000 fac1 	bl	80012e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3770      	adds	r7, #112	; 0x70
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40013800 	.word	0x40013800
 8000d74:	48000400 	.word	0x48000400

08000d78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b09c      	sub	sp, #112	; 0x70
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2250      	movs	r2, #80	; 0x50
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 f912 	bl	8003fc2 <memset>
  if(hpcd->Instance==USB)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <HAL_PCD_MspInit+0xa8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d136      	bne.n	8000e16 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000dae:	2318      	movs	r3, #24
 8000db0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000db2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000dbe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000dc2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000dc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dc8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000dca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000dce:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 f873 	bl	8002ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000de0:	f7ff ff2c 	bl	8000c3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff ff2e 	bl	8000c46 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f000 fa6d 	bl	80012e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e0e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e12:	f7ff ff31 	bl	8000c78 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3770      	adds	r7, #112	; 0x70
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40006800 	.word	0x40006800

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 f8fe 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f000 fbbb 	bl	80015f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f000 fbb4 	bl	80015f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e98:	2010      	movs	r0, #16
 8000e9a:	f000 fbad 	bl	80015f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <SystemInit+0x98>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <SystemInit+0x98>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ecc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ed0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <SystemInit+0x9c>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eee:	f023 0305 	bic.w	r3, r3, #5
 8000ef2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <SystemInit+0xa0>)
 8000f10:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <SystemInit+0xa0>)
 8000f18:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	faf6fefb 	.word	0xfaf6fefb
 8000f44:	22041000 	.word	0x22041000

08000f48 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f48:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4c:	3304      	adds	r3, #4

08000f4e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f50:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f52:	d3f9      	bcc.n	8000f48 <CopyDataInit>
  bx lr
 8000f54:	4770      	bx	lr

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f56:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f58:	3004      	adds	r0, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f5a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>
  bx lr
 8000f5e:	4770      	bx	lr

08000f60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f64:	f7ff ff9e 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LoopForever+0x6>)
 8000f6a:	490c      	ldr	r1, [pc, #48]	; (8000f9c <LoopForever+0xa>)
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <LoopForever+0xe>)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f7ff ffed 	bl	8000f4e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <LoopForever+0x12>)
 8000f76:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <LoopForever+0x16>)
 8000f78:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <LoopForever+0x1a>)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f7ff ffe7 	bl	8000f4e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000f80:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <LoopForever+0x1e>)
 8000f82:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <LoopForever+0x22>)
 8000f84:	2300      	movs	r3, #0
 8000f86:	f7ff ffe8 	bl	8000f5a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f8a:	f003 f823 	bl	8003fd4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f8e:	f7ff fc09 	bl	80007a4 <main>

08000f92 <LoopForever>:

LoopForever:
  b LoopForever
 8000f92:	e7fe      	b.n	8000f92 <LoopForever>
  ldr   r0, =_estack
 8000f94:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000214 	.word	0x20000214
 8000fa0:	08004138 	.word	0x08004138
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fa4:	20030000 	.word	0x20030000
 8000fa8:	20030000 	.word	0x20030000
 8000fac:	08004344 	.word	0x08004344
  INIT_BSS _sbss, _ebss
 8000fb0:	20000214 	.word	0x20000214
 8000fb4:	200005ac 	.word	0x200005ac

08000fb8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_Init+0x3c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_Init+0x3c>)
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd2:	2003      	movs	r0, #3
 8000fd4:	f000 f948 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 f80f 	bl	8000ffc <HAL_InitTick>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	e001      	b.n	8000fee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fea:	f7ff fe77 	bl	8000cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fee:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	58004000 	.word	0x58004000

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_InitTick+0x6c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d024      	beq.n	800105a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001010:	f001 fcb6 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 8001014:	4602      	mov	r2, r0
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_InitTick+0x6c>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001020:	fbb3 f3f1 	udiv	r3, r3, r1
 8001024:	fbb2 f3f3 	udiv	r3, r2, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f950 	bl	80012ce <HAL_SYSTICK_Config>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d10f      	bne.n	8001054 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b0f      	cmp	r3, #15
 8001038:	d809      	bhi.n	800104e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103a:	2200      	movs	r2, #0
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	f04f 30ff 	mov.w	r0, #4294967295
 8001042:	f000 f91c 	bl	800127e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_InitTick+0x70>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	e007      	b.n	800105e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e004      	b.n	800105e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e001      	b.n	800105e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000210 	.word	0x20000210
 800106c:	2000020c 	.word	0x2000020c

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000210 	.word	0x20000210
 8001094:	200005a8 	.word	0x200005a8

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200005a8 	.word	0x200005a8

080010b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_GetTickPrio+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000020c 	.word	0x2000020c

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff29 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff40 	bl	8001110 <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff90 	bl	80011bc <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5f 	bl	8001168 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff33 	bl	800112c <__NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffa4 	bl	8001224 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f6:	e14c      	b.n	8001592 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 813e 	beq.w	800158c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d005      	beq.n	8001328 <HAL_GPIO_Init+0x40>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 0201 	and.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b03      	cmp	r3, #3
 8001394:	d017      	beq.n	80013c6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2203      	movs	r2, #3
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d123      	bne.n	800141a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	08da      	lsrs	r2, r3, #3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	3208      	adds	r2, #8
 80013da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	08da      	lsrs	r2, r3, #3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3208      	adds	r2, #8
 8001414:	6939      	ldr	r1, [r7, #16]
 8001416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	2203      	movs	r2, #3
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0203 	and.w	r2, r3, #3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8098 	beq.w	800158c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800145c:	4a54      	ldr	r2, [pc, #336]	; (80015b0 <HAL_GPIO_Init+0x2c8>)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	220f      	movs	r2, #15
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001486:	d019      	beq.n	80014bc <HAL_GPIO_Init+0x1d4>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a4a      	ldr	r2, [pc, #296]	; (80015b4 <HAL_GPIO_Init+0x2cc>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d013      	beq.n	80014b8 <HAL_GPIO_Init+0x1d0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a49      	ldr	r2, [pc, #292]	; (80015b8 <HAL_GPIO_Init+0x2d0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d00d      	beq.n	80014b4 <HAL_GPIO_Init+0x1cc>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a48      	ldr	r2, [pc, #288]	; (80015bc <HAL_GPIO_Init+0x2d4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d007      	beq.n	80014b0 <HAL_GPIO_Init+0x1c8>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a47      	ldr	r2, [pc, #284]	; (80015c0 <HAL_GPIO_Init+0x2d8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d101      	bne.n	80014ac <HAL_GPIO_Init+0x1c4>
 80014a8:	2304      	movs	r3, #4
 80014aa:	e008      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014ac:	2307      	movs	r3, #7
 80014ae:	e006      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014b0:	2303      	movs	r3, #3
 80014b2:	e004      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_GPIO_Init+0x1d6>
 80014bc:	2300      	movs	r3, #0
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ce:	4938      	ldr	r1, [pc, #224]	; (80015b0 <HAL_GPIO_Init+0x2c8>)
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <HAL_GPIO_Init+0x2dc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001500:	4a30      	ldr	r2, [pc, #192]	; (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800152a:	4a26      	ldr	r2, [pc, #152]	; (80015c4 <HAL_GPIO_Init+0x2dc>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001556:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <HAL_GPIO_Init+0x2dc>)
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	f47f aeab 	bne.w	80012f8 <HAL_GPIO_Init+0x10>
  }
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40010000 	.word	0x40010000
 80015b4:	48000400 	.word	0x48000400
 80015b8:	48000800 	.word	0x48000800
 80015bc:	48000c00 	.word	0x48000c00
 80015c0:	48001000 	.word	0x48001000
 80015c4:	58000800 	.word	0x58000800

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015e4:	e002      	b.n	80015ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d006      	beq.n	800161c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff faea 	bl	8000bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	58000800 	.word	0x58000800

08001628 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e0c0      	b.n	80017bc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d106      	bne.n	8001654 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fb92 	bl	8000d78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2203      	movs	r2, #3
 8001658:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fc75 	bl	8003f50 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	e03e      	b.n	80016ea <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	440b      	add	r3, r1
 800167a:	3311      	adds	r3, #17
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	3310      	adds	r3, #16
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	3313      	adds	r3, #19
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	3320      	adds	r3, #32
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	3324      	adds	r3, #36	; 0x24
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	3301      	adds	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	791b      	ldrb	r3, [r3, #4]
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d3bb      	bcc.n	800166c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e044      	b.n	8001784 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	f203 1351 	addw	r3, r3, #337	; 0x151
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001722:	7bfa      	ldrb	r2, [r7, #15]
 8001724:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	f203 1353 	addw	r3, r3, #339	; 0x153
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3301      	adds	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	791b      	ldrb	r3, [r3, #4]
 8001788:	7bfa      	ldrb	r2, [r7, #15]
 800178a:	429a      	cmp	r2, r3
 800178c:	d3b5      	bcc.n	80016fa <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3304      	adds	r3, #4
 8001796:	e893 0006 	ldmia.w	r3, {r1, r2}
 800179a:	f002 fbf4 	bl	8003f86 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7a9b      	ldrb	r3, [r3, #10]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d102      	bne.n	80017ba <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f805 	bl	80017c4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	f043 0302 	orr.w	r3, r3, #2
 8001802:	b29a      	uxth	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a04      	ldr	r2, [pc, #16]	; (8001834 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	58000400 	.word	0x58000400

08001838 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <HAL_PWREx_GetVoltageRange+0x18>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	58000400 	.word	0x58000400

08001854 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001866:	d101      	bne.n	800186c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_RCC_HSE_Enable>:
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_RCC_HSE_Disable>:
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_RCC_HSE_IsReady>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80018b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018c6:	d101      	bne.n	80018cc <LL_RCC_HSE_IsReady+0x18>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <LL_RCC_HSE_IsReady+0x1a>
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_RCC_HSI_Enable>:
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_RCC_HSI_Disable>:
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_RCC_HSI_IsReady>:
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001926:	d101      	bne.n	800192c <LL_RCC_HSI_IsReady+0x18>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <LL_RCC_HSI_IsReady+0x1a>
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_RCC_HSI48_Enable>:
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800196e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_RCC_HSI48_Disable>:
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_RCC_HSI48_IsReady>:
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d101      	bne.n	80019be <LL_RCC_HSI48_IsReady+0x18>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_RCC_HSI48_IsReady+0x1a>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_RCC_LSE_Enable>:
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_RCC_LSE_Disable>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_RCC_LSE_EnableBypass>:
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_RCC_LSE_DisableBypass>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d101      	bne.n	8001a6a <LL_RCC_LSE_IsReady+0x18>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <LL_RCC_LSE_IsReady+0x1a>
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d101      	bne.n	8001ad2 <LL_RCC_LSI1_IsReady+0x18>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <LL_RCC_LSI1_IsReady+0x1a>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aee:	f043 0304 	orr.w	r3, r3, #4
 8001af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d101      	bne.n	8001b3a <LL_RCC_LSI2_IsReady+0x18>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <LL_RCC_LSI2_IsReady+0x1a>
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b62:	4313      	orrs	r3, r2
 8001b64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6013      	str	r3, [r2, #0]
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d101      	bne.n	8001bc6 <LL_RCC_MSI_IsReady+0x16>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <LL_RCC_MSI_IsReady+0x18>
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c0a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2bb0      	cmp	r3, #176	; 0xb0
 8001c10:	d901      	bls.n	8001c16 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001c12:	23b0      	movs	r3, #176	; 0xb0
 8001c14:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001c16:	687b      	ldr	r3, [r7, #4]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 0203 	bic.w	r2, r3, #3
 8001c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 030c 	and.w	r3, r3, #12
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cf2:	f023 020f 	bic.w	r2, r3, #15
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	608b      	str	r3, [r1, #8]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df4:	6013      	str	r3, [r2, #0]
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e12:	d101      	bne.n	8001e18 <LL_RCC_PLL_IsReady+0x18>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <LL_RCC_PLL_IsReady+0x1a>
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0303 	and.w	r3, r3, #3
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d101      	bne.n	8001e9e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ebe:	d101      	bne.n	8001ec4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d101      	bne.n	8001eea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f08:	d101      	bne.n	8001f0e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f2c:	d101      	bne.n	8001f32 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b08d      	sub	sp, #52	; 0x34
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e363      	b.n	800261a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 808d 	beq.w	800207a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f60:	f7ff fe89 	bl	8001c76 <LL_RCC_GetSysClkSource>
 8001f64:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f66:	f7ff ff82 	bl	8001e6e <LL_RCC_PLL_GetMainSource>
 8001f6a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x3e>
 8001f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	d147      	bne.n	8002008 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d144      	bne.n	8002008 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e347      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f8e:	f7ff fe34 	bl	8001bfa <LL_RCC_MSI_GetRange>
 8001f92:	4603      	mov	r3, r0
 8001f94:	429c      	cmp	r4, r3
 8001f96:	d914      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fd2f 	bl	8002a00 <RCC_SetFlashLatencyFromMSIRange>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e336      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fe0e 	bl	8001bd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe32 	bl	8001c24 <LL_RCC_MSI_SetCalibTrimming>
 8001fc0:	e013      	b.n	8001fea <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fe03 	bl	8001bd2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fe27 	bl	8001c24 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fd10 	bl	8002a00 <RCC_SetFlashLatencyFromMSIRange>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e317      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fea:	f000 fcc9 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4aa4      	ldr	r2, [pc, #656]	; (8002284 <HAL_RCC_OscConfig+0x344>)
 8001ff2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ff4:	4ba4      	ldr	r3, [pc, #656]	; (8002288 <HAL_RCC_OscConfig+0x348>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe ffff 	bl	8000ffc <HAL_InitTick>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d039      	beq.n	8002078 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e308      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01e      	beq.n	800204e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002010:	f7ff fdb0 	bl	8001b74 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002014:	f7ff f840 	bl	8001098 <HAL_GetTick>
 8002018:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800201c:	f7ff f83c 	bl	8001098 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e2f5      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800202e:	f7ff fdbf 	bl	8001bb0 <LL_RCC_MSI_IsReady>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f1      	beq.n	800201c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fdc8 	bl	8001bd2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fdec 	bl	8001c24 <LL_RCC_MSI_SetCalibTrimming>
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800204e:	f7ff fda0 	bl	8001b92 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002052:	f7ff f821 	bl	8001098 <HAL_GetTick>
 8002056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800205a:	f7ff f81d 	bl	8001098 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e2d6      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800206c:	f7ff fda0 	bl	8001bb0 <LL_RCC_MSI_IsReady>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f1      	bne.n	800205a <HAL_RCC_OscConfig+0x11a>
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002078:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d047      	beq.n	8002116 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002086:	f7ff fdf6 	bl	8001c76 <LL_RCC_GetSysClkSource>
 800208a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800208c:	f7ff feef 	bl	8001e6e <LL_RCC_PLL_GetMainSource>
 8002090:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x164>
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d108      	bne.n	80020b0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d134      	bne.n	8002116 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e2b4      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b8:	d102      	bne.n	80020c0 <HAL_RCC_OscConfig+0x180>
 80020ba:	f7ff fbdd 	bl	8001878 <LL_RCC_HSE_Enable>
 80020be:	e001      	b.n	80020c4 <HAL_RCC_OscConfig+0x184>
 80020c0:	f7ff fbe9 	bl	8001896 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d012      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe ffe4 	bl	8001098 <HAL_GetTick>
 80020d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe ffe0 	bl	8001098 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e299      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80020e6:	f7ff fbe5 	bl	80018b4 <LL_RCC_HSE_IsReady>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f1      	beq.n	80020d4 <HAL_RCC_OscConfig+0x194>
 80020f0:	e011      	b.n	8002116 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe ffd1 	bl	8001098 <HAL_GetTick>
 80020f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fa:	f7fe ffcd 	bl	8001098 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b64      	cmp	r3, #100	; 0x64
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e286      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800210c:	f7ff fbd2 	bl	80018b4 <LL_RCC_HSE_IsReady>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f1      	bne.n	80020fa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d04c      	beq.n	80021bc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002122:	f7ff fda8 	bl	8001c76 <LL_RCC_GetSysClkSource>
 8002126:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002128:	f7ff fea1 	bl	8001e6e <LL_RCC_PLL_GetMainSource>
 800212c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d005      	beq.n	8002140 <HAL_RCC_OscConfig+0x200>
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d10e      	bne.n	8002158 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d10b      	bne.n	8002158 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e266      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fbf1 	bl	8001938 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002156:	e031      	b.n	80021bc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d019      	beq.n	8002194 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	f7ff fbba 	bl	80018d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe ff98 	bl	8001098 <HAL_GetTick>
 8002168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216c:	f7fe ff94 	bl	8001098 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e24d      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800217e:	f7ff fbc9 	bl	8001914 <LL_RCC_HSI_IsReady>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f1      	beq.n	800216c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fbd3 	bl	8001938 <LL_RCC_HSI_SetCalibTrimming>
 8002192:	e013      	b.n	80021bc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002194:	f7ff fbaf 	bl	80018f6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe ff7e 	bl	8001098 <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a0:	f7fe ff7a 	bl	8001098 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e233      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80021b2:	f7ff fbaf 	bl	8001914 <LL_RCC_HSI_IsReady>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f1      	bne.n	80021a0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80a3 	beq.w	800231c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	695b      	ldr	r3, [r3, #20]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d076      	beq.n	80022cc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d046      	beq.n	8002278 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80021ea:	f7ff fc66 	bl	8001aba <LL_RCC_LSI1_IsReady>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d113      	bne.n	800221c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80021f4:	f7ff fc3f 	bl	8001a76 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021f8:	f7fe ff4e 	bl	8001098 <HAL_GetTick>
 80021fc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002200:	f7fe ff4a 	bl	8001098 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e203      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002212:	f7ff fc52 	bl	8001aba <LL_RCC_LSI1_IsReady>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f1      	beq.n	8002200 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800221c:	f7ff fc5f 	bl	8001ade <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe ff3a 	bl	8001098 <HAL_GetTick>
 8002224:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002228:	f7fe ff36 	bl	8001098 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b03      	cmp	r3, #3
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1ef      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800223a:	f7ff fc72 	bl	8001b22 <LL_RCC_LSI2_IsReady>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f1      	beq.n	8002228 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fc7c 	bl	8001b46 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800224e:	f7ff fc23 	bl	8001a98 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7fe ff21 	bl	8001098 <HAL_GetTick>
 8002256:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800225a:	f7fe ff1d 	bl	8001098 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e1d6      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800226c:	f7ff fc25 	bl	8001aba <LL_RCC_LSI1_IsReady>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f1      	bne.n	800225a <HAL_RCC_OscConfig+0x31a>
 8002276:	e051      	b.n	800231c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002278:	f7ff fbfd 	bl	8001a76 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe ff0c 	bl	8001098 <HAL_GetTick>
 8002280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002282:	e00c      	b.n	800229e <HAL_RCC_OscConfig+0x35e>
 8002284:	20000208 	.word	0x20000208
 8002288:	2000020c 	.word	0x2000020c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800228c:	f7fe ff04 	bl	8001098 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e1bd      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800229e:	f7ff fc0c 	bl	8001aba <LL_RCC_LSI1_IsReady>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f1      	beq.n	800228c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80022a8:	f7ff fc2a 	bl	8001b00 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022ae:	f7fe fef3 	bl	8001098 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1ac      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80022c0:	f7ff fc2f 	bl	8001b22 <LL_RCC_LSI2_IsReady>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f1      	bne.n	80022ae <HAL_RCC_OscConfig+0x36e>
 80022ca:	e027      	b.n	800231c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80022cc:	f7ff fc18 	bl	8001b00 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7fe fee2 	bl	8001098 <HAL_GetTick>
 80022d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022d8:	f7fe fede 	bl	8001098 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e197      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80022ea:	f7ff fc1a 	bl	8001b22 <LL_RCC_LSI2_IsReady>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f1      	bne.n	80022d8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80022f4:	f7ff fbd0 	bl	8001a98 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe fece 	bl	8001098 <HAL_GetTick>
 80022fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002300:	f7fe feca 	bl	8001098 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e183      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002312:	f7ff fbd2 	bl	8001aba <LL_RCC_LSI1_IsReady>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f1      	bne.n	8002300 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d05b      	beq.n	80023e0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002328:	4ba7      	ldr	r3, [pc, #668]	; (80025c8 <HAL_RCC_OscConfig+0x688>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d114      	bne.n	800235e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002334:	f7ff fa70 	bl	8001818 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002338:	f7fe feae 	bl	8001098 <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002340:	f7fe feaa 	bl	8001098 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e163      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002352:	4b9d      	ldr	r3, [pc, #628]	; (80025c8 <HAL_RCC_OscConfig+0x688>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d102      	bne.n	800236c <HAL_RCC_OscConfig+0x42c>
 8002366:	f7ff fb30 	bl	80019ca <LL_RCC_LSE_Enable>
 800236a:	e00c      	b.n	8002386 <HAL_RCC_OscConfig+0x446>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b05      	cmp	r3, #5
 8002372:	d104      	bne.n	800237e <HAL_RCC_OscConfig+0x43e>
 8002374:	f7ff fb4b 	bl	8001a0e <LL_RCC_LSE_EnableBypass>
 8002378:	f7ff fb27 	bl	80019ca <LL_RCC_LSE_Enable>
 800237c:	e003      	b.n	8002386 <HAL_RCC_OscConfig+0x446>
 800237e:	f7ff fb35 	bl	80019ec <LL_RCC_LSE_Disable>
 8002382:	f7ff fb55 	bl	8001a30 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d014      	beq.n	80023b8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7fe fe83 	bl	8001098 <HAL_GetTick>
 8002392:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7fe fe7f 	bl	8001098 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e136      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80023ac:	f7ff fb51 	bl	8001a52 <LL_RCC_LSE_IsReady>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0ef      	beq.n	8002396 <HAL_RCC_OscConfig+0x456>
 80023b6:	e013      	b.n	80023e0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe fe6e 	bl	8001098 <HAL_GetTick>
 80023bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f7fe fe6a 	bl	8001098 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e121      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80023d6:	f7ff fb3c 	bl	8001a52 <LL_RCC_LSE_IsReady>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ef      	bne.n	80023c0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02c      	beq.n	8002446 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d014      	beq.n	800241e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023f4:	f7ff fab5 	bl	8001962 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f8:	f7fe fe4e 	bl	8001098 <HAL_GetTick>
 80023fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002400:	f7fe fe4a 	bl	8001098 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e103      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002412:	f7ff fac8 	bl	80019a6 <LL_RCC_HSI48_IsReady>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f1      	beq.n	8002400 <HAL_RCC_OscConfig+0x4c0>
 800241c:	e013      	b.n	8002446 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800241e:	f7ff fab1 	bl	8001984 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7fe fe39 	bl	8001098 <HAL_GetTick>
 8002426:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800242a:	f7fe fe35 	bl	8001098 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0ee      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800243c:	f7ff fab3 	bl	80019a6 <LL_RCC_HSI48_IsReady>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f1      	bne.n	800242a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80e4 	beq.w	8002618 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002450:	f7ff fc11 	bl	8001c76 <LL_RCC_GetSysClkSource>
 8002454:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	2b02      	cmp	r3, #2
 8002464:	f040 80b4 	bne.w	80025d0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0203 	and.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	429a      	cmp	r2, r3
 8002474:	d123      	bne.n	80024be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d11c      	bne.n	80024be <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d114      	bne.n	80024be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d10d      	bne.n	80024be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d05d      	beq.n	800257a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d058      	beq.n	8002576 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0a1      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024d6:	f7ff fc84 	bl	8001de2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024da:	f7fe fddd 	bl	8001098 <HAL_GetTick>
 80024de:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e2:	f7fe fdd9 	bl	8001098 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e092      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ef      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	4b30      	ldr	r3, [pc, #192]	; (80025cc <HAL_RCC_OscConfig+0x68c>)
 800250a:	4013      	ands	r3, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002514:	4311      	orrs	r1, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800251a:	0212      	lsls	r2, r2, #8
 800251c:	4311      	orrs	r1, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002522:	4311      	orrs	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002528:	4311      	orrs	r1, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800252e:	430a      	orrs	r2, r1
 8002530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002534:	4313      	orrs	r3, r2
 8002536:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002538:	f7ff fc44 	bl	8001dc4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800254c:	f7fe fda4 	bl	8001098 <HAL_GetTick>
 8002550:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe fda0 	bl	8001098 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e059      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ef      	beq.n	8002554 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002574:	e050      	b.n	8002618 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e04f      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d147      	bne.n	8002618 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002588:	f7ff fc1c 	bl	8001dc4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800259c:	f7fe fd7c 	bl	8001098 <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe fd78 	bl	8001098 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e031      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ef      	beq.n	80025a4 <HAL_RCC_OscConfig+0x664>
 80025c4:	e028      	b.n	8002618 <HAL_RCC_OscConfig+0x6d8>
 80025c6:	bf00      	nop
 80025c8:	58000400 	.word	0x58000400
 80025cc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d01e      	beq.n	8002614 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	f7ff fc04 	bl	8001de2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7fe fd5d 	bl	8001098 <HAL_GetTick>
 80025de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe fd59 	bl	8001098 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e012      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1ef      	bne.n	80025e2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_OscConfig+0x6e4>)
 800260e:	4013      	ands	r3, r2
 8002610:	60cb      	str	r3, [r1, #12]
 8002612:	e001      	b.n	8002618 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3734      	adds	r7, #52	; 0x34
 800261e:	46bd      	mov	sp, r7
 8002620:	bd90      	pop	{r4, r7, pc}
 8002622:	bf00      	nop
 8002624:	eefefffc 	.word	0xeefefffc

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e12d      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b98      	ldr	r3, [pc, #608]	; (80028a0 <HAL_RCC_ClockConfig+0x278>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d91b      	bls.n	8002682 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b95      	ldr	r3, [pc, #596]	; (80028a0 <HAL_RCC_ClockConfig+0x278>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 0207 	bic.w	r2, r3, #7
 8002652:	4993      	ldr	r1, [pc, #588]	; (80028a0 <HAL_RCC_ClockConfig+0x278>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265a:	f7fe fd1d 	bl	8001098 <HAL_GetTick>
 800265e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002660:	e008      	b.n	8002674 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002662:	f7fe fd19 	bl	8001098 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e111      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002674:	4b8a      	ldr	r3, [pc, #552]	; (80028a0 <HAL_RCC_ClockConfig+0x278>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d1ef      	bne.n	8002662 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d016      	beq.n	80026bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fafb 	bl	8001c8e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002698:	f7fe fcfe 	bl	8001098 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026a0:	f7fe fcfa 	bl	8001098 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0f2      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026b2:	f7ff fbe8 	bl	8001e86 <LL_RCC_IsActiveFlag_HPRE>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f1      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d016      	beq.n	80026f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff faf2 	bl	8001cb6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026d2:	f7fe fce1 	bl	8001098 <HAL_GetTick>
 80026d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026da:	f7fe fcdd 	bl	8001098 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e0d5      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80026ec:	f7ff fbdd 	bl	8001eaa <LL_RCC_IsActiveFlag_C2HPRE>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f1      	beq.n	80026da <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff faeb 	bl	8001ce2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800270c:	f7fe fcc4 	bl	8001098 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002714:	f7fe fcc0 	bl	8001098 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0b8      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002726:	f7ff fbd3 	bl	8001ed0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f1      	beq.n	8002714 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d016      	beq.n	800276a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fae5 	bl	8001d10 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002746:	f7fe fca7 	bl	8001098 <HAL_GetTick>
 800274a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800274e:	f7fe fca3 	bl	8001098 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e09b      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002760:	f7ff fbc9 	bl	8001ef6 <LL_RCC_IsActiveFlag_PPRE1>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f1      	beq.n	800274e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d017      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fadb 	bl	8001d38 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002782:	f7fe fc89 	bl	8001098 <HAL_GetTick>
 8002786:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800278a:	f7fe fc85 	bl	8001098 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e07d      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800279c:	f7ff fbbd 	bl	8001f1a <LL_RCC_IsActiveFlag_PPRE2>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f1      	beq.n	800278a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d043      	beq.n	800283a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d106      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80027ba:	f7ff f87b 	bl	80018b4 <LL_RCC_HSE_IsReady>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11e      	bne.n	8002802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e067      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d106      	bne.n	80027de <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80027d0:	f7ff fb16 	bl	8001e00 <LL_RCC_PLL_IsReady>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d113      	bne.n	8002802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e05c      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80027e6:	f7ff f9e3 	bl	8001bb0 <LL_RCC_MSI_IsReady>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d108      	bne.n	8002802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e051      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80027f4:	f7ff f88e 	bl	8001914 <LL_RCC_HSI_IsReady>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e04a      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fa21 	bl	8001c4e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800280c:	f7fe fc44 	bl	8001098 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	e00a      	b.n	800282a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002814:	f7fe fc40 	bl	8001098 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002822:	4293      	cmp	r3, r2
 8002824:	d901      	bls.n	800282a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e036      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	f7ff fa24 	bl	8001c76 <LL_RCC_GetSysClkSource>
 800282e:	4602      	mov	r2, r0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	429a      	cmp	r2, r3
 8002838:	d1ec      	bne.n	8002814 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800283a:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_ClockConfig+0x278>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d21b      	bcs.n	8002880 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002848:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_RCC_ClockConfig+0x278>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f023 0207 	bic.w	r2, r3, #7
 8002850:	4913      	ldr	r1, [pc, #76]	; (80028a0 <HAL_RCC_ClockConfig+0x278>)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7fe fc1e 	bl	8001098 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	e008      	b.n	8002872 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002860:	f7fe fc1a 	bl	8001098 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e012      	b.n	8002898 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_ClockConfig+0x278>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d1ef      	bne.n	8002860 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002880:	f000 f87e 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 8002884:	4603      	mov	r3, r0
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <HAL_RCC_ClockConfig+0x27c>)
 8002888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800288a:	f7fe fc11 	bl	80010b0 <HAL_GetTickPrio>
 800288e:	4603      	mov	r3, r0
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe fbb3 	bl	8000ffc <HAL_InitTick>
 8002896:	4603      	mov	r3, r0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	58004000 	.word	0x58004000
 80028a4:	20000208 	.word	0x20000208

080028a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ae:	f7ff f9e2 	bl	8001c76 <LL_RCC_GetSysClkSource>
 80028b2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80028ba:	f7ff f99e 	bl	8001bfa <LL_RCC_MSI_GetRange>
 80028be:	4603      	mov	r3, r0
 80028c0:	091b      	lsrs	r3, r3, #4
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e04b      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028d6:	4b28      	ldr	r3, [pc, #160]	; (8002978 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	e045      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d10a      	bne.n	80028f8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028e2:	f7fe ffb7 	bl	8001854 <LL_RCC_HSE_IsEnabledDiv2>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d102      	bne.n	80028f2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80028ec:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e03a      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_RCC_GetSysClockFreq+0xd4>)
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e037      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80028f8:	f7ff fab9 	bl	8001e6e <LL_RCC_PLL_GetMainSource>
 80028fc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d003      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x64>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x6a>
 800290a:	e00d      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_RCC_GetSysClockFreq+0xd0>)
 800290e:	60bb      	str	r3, [r7, #8]
        break;
 8002910:	e015      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002912:	f7fe ff9f 	bl	8001854 <LL_RCC_HSE_IsEnabledDiv2>
 8002916:	4603      	mov	r3, r0
 8002918:	2b01      	cmp	r3, #1
 800291a:	d102      	bne.n	8002922 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800291c:	4b16      	ldr	r3, [pc, #88]	; (8002978 <HAL_RCC_GetSysClockFreq+0xd0>)
 800291e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002920:	e00d      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002922:	4b16      	ldr	r3, [pc, #88]	; (800297c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002924:	60bb      	str	r3, [r7, #8]
        break;
 8002926:	e00a      	b.n	800293e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002928:	f7ff f967 	bl	8001bfa <LL_RCC_MSI_GetRange>
 800292c:	4603      	mov	r3, r0
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	4a0f      	ldr	r2, [pc, #60]	; (8002974 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293a:	60bb      	str	r3, [r7, #8]
        break;
 800293c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800293e:	f7ff fa71 	bl	8001e24 <LL_RCC_PLL_GetN>
 8002942:	4602      	mov	r2, r0
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	fb03 f402 	mul.w	r4, r3, r2
 800294a:	f7ff fa84 	bl	8001e56 <LL_RCC_PLL_GetDivider>
 800294e:	4603      	mov	r3, r0
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	3301      	adds	r3, #1
 8002954:	fbb4 f4f3 	udiv	r4, r4, r3
 8002958:	f7ff fa71 	bl	8001e3e <LL_RCC_PLL_GetR>
 800295c:	4603      	mov	r3, r0
 800295e:	0f5b      	lsrs	r3, r3, #29
 8002960:	3301      	adds	r3, #1
 8002962:	fbb4 f3f3 	udiv	r3, r4, r3
 8002966:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002968:	68fb      	ldr	r3, [r7, #12]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}
 8002972:	bf00      	nop
 8002974:	080040c0 	.word	0x080040c0
 8002978:	00f42400 	.word	0x00f42400
 800297c:	01e84800 	.word	0x01e84800

08002980 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b598      	push	{r3, r4, r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002984:	f7ff ff90 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002988:	4604      	mov	r4, r0
 800298a:	f7ff f9e9 	bl	8001d60 <LL_RCC_GetAHBPrescaler>
 800298e:	4603      	mov	r3, r0
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	4a03      	ldr	r2, [pc, #12]	; (80029a4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd98      	pop	{r3, r4, r7, pc}
 80029a4:	08004060 	.word	0x08004060

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b598      	push	{r3, r4, r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029ac:	f7ff ffe8 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029b0:	4604      	mov	r4, r0
 80029b2:	f7ff f9ef 	bl	8001d94 <LL_RCC_GetAPB1Prescaler>
 80029b6:	4603      	mov	r3, r0
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd98      	pop	{r3, r4, r7, pc}
 80029d0:	080040a0 	.word	0x080040a0

080029d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d4:	b598      	push	{r3, r4, r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80029d8:	f7ff ffd2 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029dc:	4604      	mov	r4, r0
 80029de:	f7ff f9e5 	bl	8001dac <LL_RCC_GetAPB2Prescaler>
 80029e2:	4603      	mov	r3, r0
 80029e4:	0adb      	lsrs	r3, r3, #11
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd98      	pop	{r3, r4, r7, pc}
 80029fc:	080040a0 	.word	0x080040a0

08002a00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2bb0      	cmp	r3, #176	; 0xb0
 8002a0c:	d903      	bls.n	8002a16 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002a0e:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e007      	b.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	4a11      	ldr	r2, [pc, #68]	; (8002a64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a24:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002a26:	f7ff f9a7 	bl	8001d78 <LL_RCC_GetAHB4Prescaler>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	4a0d      	ldr	r2, [pc, #52]	; (8002a68 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	0c9c      	lsrs	r4, r3, #18
 8002a4a:	f7fe fef5 	bl	8001838 <HAL_PWREx_GetVoltageRange>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4619      	mov	r1, r3
 8002a52:	4620      	mov	r0, r4
 8002a54:	f000 f80c 	bl	8002a70 <RCC_SetFlashLatency>
 8002a58:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	080040c0 	.word	0x080040c0
 8002a68:	08004060 	.word	0x08004060
 8002a6c:	431bde83 	.word	0x431bde83

08002a70 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b093      	sub	sp, #76	; 0x4c
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <RCC_SetFlashLatency+0xe8>)
 8002a7c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002a80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002a86:	4a35      	ldr	r2, [pc, #212]	; (8002b5c <RCC_SetFlashLatency+0xec>)
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002a92:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <RCC_SetFlashLatency+0xf0>)
 8002a94:	f107 040c 	add.w	r4, r7, #12
 8002a98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa8:	d11a      	bne.n	8002ae0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	643b      	str	r3, [r7, #64]	; 0x40
 8002aae:	e013      	b.n	8002ad8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	3348      	adds	r3, #72	; 0x48
 8002ab6:	443b      	add	r3, r7
 8002ab8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d807      	bhi.n	8002ad2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	3348      	adds	r3, #72	; 0x48
 8002ac8:	443b      	add	r3, r7
 8002aca:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ace:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002ad0:	e020      	b.n	8002b14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d9e8      	bls.n	8002ab0 <RCC_SetFlashLatency+0x40>
 8002ade:	e019      	b.n	8002b14 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae4:	e013      	b.n	8002b0e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	3348      	adds	r3, #72	; 0x48
 8002aec:	443b      	add	r3, r7
 8002aee:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d807      	bhi.n	8002b08 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	3348      	adds	r3, #72	; 0x48
 8002afe:	443b      	add	r3, r7
 8002b00:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b04:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b06:	e005      	b.n	8002b14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d9e8      	bls.n	8002ae6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <RCC_SetFlashLatency+0xf4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f023 0207 	bic.w	r2, r3, #7
 8002b1c:	4911      	ldr	r1, [pc, #68]	; (8002b64 <RCC_SetFlashLatency+0xf4>)
 8002b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b20:	4313      	orrs	r3, r2
 8002b22:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b24:	f7fe fab8 	bl	8001098 <HAL_GetTick>
 8002b28:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b2a:	e008      	b.n	8002b3e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b2c:	f7fe fab4 	bl	8001098 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e007      	b.n	8002b4e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <RCC_SetFlashLatency+0xf4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1ef      	bne.n	8002b2c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	374c      	adds	r7, #76	; 0x4c
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd90      	pop	{r4, r7, pc}
 8002b56:	bf00      	nop
 8002b58:	08004034 	.word	0x08004034
 8002b5c:	08004044 	.word	0x08004044
 8002b60:	08004050 	.word	0x08004050
 8002b64:	58004000 	.word	0x58004000

08002b68 <LL_RCC_LSE_IsEnabled>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <LL_RCC_LSE_IsEnabled+0x18>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <LL_RCC_LSE_IsEnabled+0x1a>
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_LSE_IsReady>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d101      	bne.n	8002ba4 <LL_RCC_LSE_IsReady+0x18>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <LL_RCC_LSE_IsReady+0x1a>
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_RCC_MSI_EnablePLLMode>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	6013      	str	r3, [r2, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_RCC_SetRFWKPClockSource>:
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_RCC_SetSMPSClockSource>:
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f023 0203 	bic.w	r2, r3, #3
 8002c0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_RCC_SetSMPSPrescaler>:
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_RCC_SetUSARTClockSource>:
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_SetLPUARTClockSource>:
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <LL_RCC_SetI2CClockSource>:
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_RCC_SetLPTIMClockSource>:
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0c1b      	lsrs	r3, r3, #16
 8002cf0:	041b      	lsls	r3, r3, #16
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_RCC_SetSAIClockSource>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_RCC_SetRNGClockSource>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_RCC_SetCLK48ClockSource>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_RCC_SetUSBClockSource>:
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ffe3 	bl	8002d68 <LL_RCC_SetCLK48ClockSource>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <LL_RCC_SetADCClockSource>:
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_RCC_SetRTCClockSource>:
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_GetRTCClockSource>:
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_RCC_ForceBackupDomainReset>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_RCC_ReleaseBackupDomainReset>:
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_RCC_PLLSAI1_Enable>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e72:	6013      	str	r3, [r2, #0]
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_PLLSAI1_Disable>:
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e90:	6013      	str	r3, [r2, #0]
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_RCC_PLLSAI1_IsReady>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eae:	d101      	bne.n	8002eb4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002ec8:	2300      	movs	r3, #0
 8002eca:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002ecc:	2300      	movs	r3, #0
 8002ece:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d034      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ee4:	d021      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002ee6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eea:	d81b      	bhi.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ef0:	d01d      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ef6:	d815      	bhi.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f00:	d110      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f12:	e00d      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3304      	adds	r3, #4
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f94d 	bl	80031b8 <RCCEx_PLLSAI1_ConfigNP>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f22:	e005      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	77fb      	strb	r3, [r7, #31]
        break;
 8002f28:	e002      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002f2a:	bf00      	nop
 8002f2c:	e000      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f30:	7ffb      	ldrb	r3, [r7, #31]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d105      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fee8 	bl	8002d10 <LL_RCC_SetSAIClockSource>
 8002f40:	e001      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f42:	7ffb      	ldrb	r3, [r7, #31]
 8002f44:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d046      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002f52:	f7ff ff56 	bl	8002e02 <LL_RCC_GetRTCClockSource>
 8002f56:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d03c      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f62:	f7fe fc59 	bl	8001818 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff30 	bl	8002dd6 <LL_RCC_SetRTCClockSource>
 8002f76:	e02e      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f80:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002f82:	f7ff ff4b 	bl	8002e1c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002f86:	f7ff ff5a 	bl	8002e3e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002fa2:	f7ff fde1 	bl	8002b68 <LL_RCC_LSE_IsEnabled>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d114      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fac:	f7fe f874 	bl	8001098 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fe f870 	bl	8001098 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d902      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	77fb      	strb	r3, [r7, #31]
              break;
 8002fca:	e004      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002fcc:	f7ff fdde 	bl	8002b8c <LL_RCC_LSE_IsReady>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d1ee      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002fd6:	7ffb      	ldrb	r3, [r7, #31]
 8002fd8:	77bb      	strb	r3, [r7, #30]
 8002fda:	e001      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fdc:	7ffb      	ldrb	r3, [r7, #31]
 8002fde:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fe2a 	bl	8002c4a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fe35 	bl	8002c76 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d004      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fe5d 	bl	8002cdc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d004      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fe52 	bl	8002cdc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fe2a 	bl	8002ca2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d004      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fe1f 	bl	8002ca2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d022      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fe8d 	bl	8002d94 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003082:	d107      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800308e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003092:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800309c:	d10b      	bne.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3304      	adds	r3, #4
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f8e3 	bl	800326e <RCCEx_PLLSAI1_ConfigNQ>
 80030a8:	4603      	mov	r3, r0
 80030aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80030ac:	7ffb      	ldrb	r3, [r7, #31]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80030b2:	7ffb      	ldrb	r3, [r7, #31]
 80030b4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d02b      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ca:	d008      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d4:	d003      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d105      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff fe2a 	bl	8002d3c <LL_RCC_SetRNGClockSource>
 80030e8:	e00a      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7ff fe21 	bl	8002d3c <LL_RCC_SetRNGClockSource>
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f7ff fe34 	bl	8002d68 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003108:	d107      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003118:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003122:	2b00      	cmp	r3, #0
 8003124:	d022      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fe3d 	bl	8002daa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003138:	d107      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800313a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003152:	d10b      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3304      	adds	r3, #4
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f8e3 	bl	8003324 <RCCEx_PLLSAI1_ConfigNR>
 800315e:	4603      	mov	r3, r0
 8003160:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003162:	7ffb      	ldrb	r3, [r7, #31]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003168:	7ffb      	ldrb	r3, [r7, #31]
 800316a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d004      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fd26 	bl	8002bce <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fd45 	bl	8002c22 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fd2c 	bl	8002bfa <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80031a2:	7fbb      	ldrb	r3, [r7, #30]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80031b0:	f7ff fcfe 	bl	8002bb0 <LL_RCC_MSI_EnablePLLMode>
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031c4:	f7ff fe5b 	bl	8002e7e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031c8:	f7fd ff66 	bl	8001098 <HAL_GetTick>
 80031cc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031ce:	e009      	b.n	80031e4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031d0:	f7fd ff62 	bl	8001098 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d902      	bls.n	80031e4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	73fb      	strb	r3, [r7, #15]
      break;
 80031e2:	e004      	b.n	80031ee <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031e4:	f7ff fe5a 	bl	8002e9c <LL_RCC_PLLSAI1_IsReady>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d137      	bne.n	8003264 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003208:	4313      	orrs	r3, r2
 800320a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800320c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800321e:	4313      	orrs	r3, r2
 8003220:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003222:	f7ff fe1d 	bl	8002e60 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003226:	f7fd ff37 	bl	8001098 <HAL_GetTick>
 800322a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800322c:	e009      	b.n	8003242 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800322e:	f7fd ff33 	bl	8001098 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d902      	bls.n	8003242 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	73fb      	strb	r3, [r7, #15]
        break;
 8003240:	e004      	b.n	800324c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003242:	f7ff fe2b 	bl	8002e9c <LL_RCC_PLLSAI1_IsReady>
 8003246:	4603      	mov	r3, r0
 8003248:	2b01      	cmp	r3, #1
 800324a:	d1f0      	bne.n	800322e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d108      	bne.n	8003264 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003260:	4313      	orrs	r3, r2
 8003262:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800327a:	f7ff fe00 	bl	8002e7e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800327e:	f7fd ff0b 	bl	8001098 <HAL_GetTick>
 8003282:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003284:	e009      	b.n	800329a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003286:	f7fd ff07 	bl	8001098 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d902      	bls.n	800329a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	e004      	b.n	80032a4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800329a:	f7ff fdff 	bl	8002e9c <LL_RCC_PLLSAI1_IsReady>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d137      	bne.n	800331a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032be:	4313      	orrs	r3, r2
 80032c0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d4:	4313      	orrs	r3, r2
 80032d6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032d8:	f7ff fdc2 	bl	8002e60 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032dc:	f7fd fedc 	bl	8001098 <HAL_GetTick>
 80032e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032e2:	e009      	b.n	80032f8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032e4:	f7fd fed8 	bl	8001098 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d902      	bls.n	80032f8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	73fb      	strb	r3, [r7, #15]
        break;
 80032f6:	e004      	b.n	8003302 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032f8:	f7ff fdd0 	bl	8002e9c <LL_RCC_PLLSAI1_IsReady>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d1f0      	bne.n	80032e4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d108      	bne.n	800331a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003316:	4313      	orrs	r3, r2
 8003318:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003330:	f7ff fda5 	bl	8002e7e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003334:	f7fd feb0 	bl	8001098 <HAL_GetTick>
 8003338:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800333a:	e009      	b.n	8003350 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800333c:	f7fd feac 	bl	8001098 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d902      	bls.n	8003350 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	73fb      	strb	r3, [r7, #15]
      break;
 800334e:	e004      	b.n	800335a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003350:	f7ff fda4 	bl	8002e9c <LL_RCC_PLLSAI1_IsReady>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d137      	bne.n	80033d0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003374:	4313      	orrs	r3, r2
 8003376:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800338a:	4313      	orrs	r3, r2
 800338c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800338e:	f7ff fd67 	bl	8002e60 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003392:	f7fd fe81 	bl	8001098 <HAL_GetTick>
 8003396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003398:	e009      	b.n	80033ae <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800339a:	f7fd fe7d 	bl	8001098 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d902      	bls.n	80033ae <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	73fb      	strb	r3, [r7, #15]
        break;
 80033ac:	e004      	b.n	80033b8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033ae:	f7ff fd75 	bl	8002e9c <LL_RCC_PLLSAI1_IsReady>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d1f0      	bne.n	800339a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d108      	bne.n	80033d0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033cc:	4313      	orrs	r3, r2
 80033ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <LL_RCC_GetUSARTClockSource>:
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4013      	ands	r3, r2
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <LL_RCC_GetLPUARTClockSource>:
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003406:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4013      	ands	r3, r2
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e042      	b.n	80034b2 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fc54 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2224      	movs	r2, #36	; 0x24
 8003448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fa51 	bl	800390c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f826 	bl	80034bc <UART_SetConfig>
 8003470:	4603      	mov	r3, r0
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e01b      	b.n	80034b2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003488:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003498:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fad0 	bl	8003a50 <UART_CheckIdleState>
 80034b0:	4603      	mov	r3, r0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c0:	b08c      	sub	sp, #48	; 0x30
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	431a      	orrs	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4baf      	ldr	r3, [pc, #700]	; (80037a8 <UART_SetConfig+0x2ec>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4aa4      	ldr	r2, [pc, #656]	; (80037ac <UART_SetConfig+0x2f0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003524:	4313      	orrs	r3, r2
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003532:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800353c:	430b      	orrs	r3, r1
 800353e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	f023 010f 	bic.w	r1, r3, #15
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a95      	ldr	r2, [pc, #596]	; (80037b0 <UART_SetConfig+0x2f4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d125      	bne.n	80035ac <UART_SetConfig+0xf0>
 8003560:	2003      	movs	r0, #3
 8003562:	f7ff ff3a 	bl	80033da <LL_RCC_GetUSARTClockSource>
 8003566:	4603      	mov	r3, r0
 8003568:	2b03      	cmp	r3, #3
 800356a:	d81b      	bhi.n	80035a4 <UART_SetConfig+0xe8>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <UART_SetConfig+0xb8>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003585 	.word	0x08003585
 8003578:	08003595 	.word	0x08003595
 800357c:	0800358d 	.word	0x0800358d
 8003580:	0800359d 	.word	0x0800359d
 8003584:	2301      	movs	r3, #1
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800358a:	e042      	b.n	8003612 <UART_SetConfig+0x156>
 800358c:	2302      	movs	r3, #2
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003592:	e03e      	b.n	8003612 <UART_SetConfig+0x156>
 8003594:	2304      	movs	r3, #4
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800359a:	e03a      	b.n	8003612 <UART_SetConfig+0x156>
 800359c:	2308      	movs	r3, #8
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a2:	e036      	b.n	8003612 <UART_SetConfig+0x156>
 80035a4:	2310      	movs	r3, #16
 80035a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035aa:	e032      	b.n	8003612 <UART_SetConfig+0x156>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a7e      	ldr	r2, [pc, #504]	; (80037ac <UART_SetConfig+0x2f0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d12a      	bne.n	800360c <UART_SetConfig+0x150>
 80035b6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80035ba:	f7ff ff1e 	bl	80033fa <LL_RCC_GetLPUARTClockSource>
 80035be:	4603      	mov	r3, r0
 80035c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035c4:	d01a      	beq.n	80035fc <UART_SetConfig+0x140>
 80035c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ca:	d81b      	bhi.n	8003604 <UART_SetConfig+0x148>
 80035cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d0:	d00c      	beq.n	80035ec <UART_SetConfig+0x130>
 80035d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d6:	d815      	bhi.n	8003604 <UART_SetConfig+0x148>
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <UART_SetConfig+0x128>
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d008      	beq.n	80035f4 <UART_SetConfig+0x138>
 80035e2:	e00f      	b.n	8003604 <UART_SetConfig+0x148>
 80035e4:	2300      	movs	r3, #0
 80035e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ea:	e012      	b.n	8003612 <UART_SetConfig+0x156>
 80035ec:	2302      	movs	r3, #2
 80035ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035f2:	e00e      	b.n	8003612 <UART_SetConfig+0x156>
 80035f4:	2304      	movs	r3, #4
 80035f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035fa:	e00a      	b.n	8003612 <UART_SetConfig+0x156>
 80035fc:	2308      	movs	r3, #8
 80035fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003602:	e006      	b.n	8003612 <UART_SetConfig+0x156>
 8003604:	2310      	movs	r3, #16
 8003606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800360a:	e002      	b.n	8003612 <UART_SetConfig+0x156>
 800360c:	2310      	movs	r3, #16
 800360e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a65      	ldr	r2, [pc, #404]	; (80037ac <UART_SetConfig+0x2f0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	f040 8097 	bne.w	800374c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800361e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003622:	2b08      	cmp	r3, #8
 8003624:	d823      	bhi.n	800366e <UART_SetConfig+0x1b2>
 8003626:	a201      	add	r2, pc, #4	; (adr r2, 800362c <UART_SetConfig+0x170>)
 8003628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362c:	08003651 	.word	0x08003651
 8003630:	0800366f 	.word	0x0800366f
 8003634:	08003659 	.word	0x08003659
 8003638:	0800366f 	.word	0x0800366f
 800363c:	0800365f 	.word	0x0800365f
 8003640:	0800366f 	.word	0x0800366f
 8003644:	0800366f 	.word	0x0800366f
 8003648:	0800366f 	.word	0x0800366f
 800364c:	08003667 	.word	0x08003667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003650:	f7ff f9aa 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8003654:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003656:	e010      	b.n	800367a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003658:	4b56      	ldr	r3, [pc, #344]	; (80037b4 <UART_SetConfig+0x2f8>)
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800365c:	e00d      	b.n	800367a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365e:	f7ff f923 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8003662:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003664:	e009      	b.n	800367a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800366c:	e005      	b.n	800367a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003678:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 812b 	beq.w	80038d8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	4a4c      	ldr	r2, [pc, #304]	; (80037b8 <UART_SetConfig+0x2fc>)
 8003688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800368c:	461a      	mov	r2, r3
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	fbb3 f3f2 	udiv	r3, r3, r2
 8003694:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d305      	bcc.n	80036b2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d903      	bls.n	80036ba <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80036b8:	e10e      	b.n	80038d8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	2200      	movs	r2, #0
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	60fa      	str	r2, [r7, #12]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <UART_SetConfig+0x2fc>)
 80036c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2200      	movs	r2, #0
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036dc:	f7fc fd4e 	bl	800017c <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	020b      	lsls	r3, r1, #8
 80036f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036f6:	0202      	lsls	r2, r0, #8
 80036f8:	6979      	ldr	r1, [r7, #20]
 80036fa:	6849      	ldr	r1, [r1, #4]
 80036fc:	0849      	lsrs	r1, r1, #1
 80036fe:	2000      	movs	r0, #0
 8003700:	460c      	mov	r4, r1
 8003702:	4605      	mov	r5, r0
 8003704:	eb12 0804 	adds.w	r8, r2, r4
 8003708:	eb43 0905 	adc.w	r9, r3, r5
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	469a      	mov	sl, r3
 8003714:	4693      	mov	fp, r2
 8003716:	4652      	mov	r2, sl
 8003718:	465b      	mov	r3, fp
 800371a:	4640      	mov	r0, r8
 800371c:	4649      	mov	r1, r9
 800371e:	f7fc fd2d 	bl	800017c <__aeabi_uldivmod>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4613      	mov	r3, r2
 8003728:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003730:	d308      	bcc.n	8003744 <UART_SetConfig+0x288>
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003738:	d204      	bcs.n	8003744 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a3a      	ldr	r2, [r7, #32]
 8003740:	60da      	str	r2, [r3, #12]
 8003742:	e0c9      	b.n	80038d8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800374a:	e0c5      	b.n	80038d8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003754:	d16d      	bne.n	8003832 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003756:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800375a:	3b01      	subs	r3, #1
 800375c:	2b07      	cmp	r3, #7
 800375e:	d82d      	bhi.n	80037bc <UART_SetConfig+0x300>
 8003760:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <UART_SetConfig+0x2ac>)
 8003762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003766:	bf00      	nop
 8003768:	08003789 	.word	0x08003789
 800376c:	08003791 	.word	0x08003791
 8003770:	080037bd 	.word	0x080037bd
 8003774:	08003797 	.word	0x08003797
 8003778:	080037bd 	.word	0x080037bd
 800377c:	080037bd 	.word	0x080037bd
 8003780:	080037bd 	.word	0x080037bd
 8003784:	0800379f 	.word	0x0800379f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003788:	f7ff f924 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 800378c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800378e:	e01b      	b.n	80037c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <UART_SetConfig+0x2f8>)
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003794:	e018      	b.n	80037c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003796:	f7ff f887 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 800379a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800379c:	e014      	b.n	80037c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037a4:	e010      	b.n	80037c8 <UART_SetConfig+0x30c>
 80037a6:	bf00      	nop
 80037a8:	cfff69f3 	.word	0xcfff69f3
 80037ac:	40008000 	.word	0x40008000
 80037b0:	40013800 	.word	0x40013800
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	08004100 	.word	0x08004100
      default:
        pclk = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 8084 	beq.w	80038d8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	4a4b      	ldr	r2, [pc, #300]	; (8003904 <UART_SetConfig+0x448>)
 80037d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037da:	461a      	mov	r2, r3
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	fbb3 f3f2 	udiv	r3, r3, r2
 80037e2:	005a      	lsls	r2, r3, #1
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	441a      	add	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d916      	bls.n	800382a <UART_SetConfig+0x36e>
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003802:	d212      	bcs.n	800382a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003804:	6a3b      	ldr	r3, [r7, #32]
 8003806:	b29b      	uxth	r3, r3
 8003808:	f023 030f 	bic.w	r3, r3, #15
 800380c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	085b      	lsrs	r3, r3, #1
 8003812:	b29b      	uxth	r3, r3
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	b29a      	uxth	r2, r3
 800381a:	8bfb      	ldrh	r3, [r7, #30]
 800381c:	4313      	orrs	r3, r2
 800381e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	8bfa      	ldrh	r2, [r7, #30]
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	e056      	b.n	80038d8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003830:	e052      	b.n	80038d8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003832:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003836:	3b01      	subs	r3, #1
 8003838:	2b07      	cmp	r3, #7
 800383a:	d822      	bhi.n	8003882 <UART_SetConfig+0x3c6>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <UART_SetConfig+0x388>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003865 	.word	0x08003865
 8003848:	0800386d 	.word	0x0800386d
 800384c:	08003883 	.word	0x08003883
 8003850:	08003873 	.word	0x08003873
 8003854:	08003883 	.word	0x08003883
 8003858:	08003883 	.word	0x08003883
 800385c:	08003883 	.word	0x08003883
 8003860:	0800387b 	.word	0x0800387b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003864:	f7ff f8b6 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8003868:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800386a:	e010      	b.n	800388e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800386c:	4b26      	ldr	r3, [pc, #152]	; (8003908 <UART_SetConfig+0x44c>)
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003870:	e00d      	b.n	800388e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003872:	f7ff f819 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8003876:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003878:	e009      	b.n	800388e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003880:	e005      	b.n	800388e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800388c:	bf00      	nop
    }

    if (pclk != 0U)
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d021      	beq.n	80038d8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <UART_SetConfig+0x448>)
 800389a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800389e:	461a      	mov	r2, r3
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	441a      	add	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	d909      	bls.n	80038d2 <UART_SetConfig+0x416>
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c4:	d205      	bcs.n	80038d2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60da      	str	r2, [r3, #12]
 80038d0:	e002      	b.n	80038d8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2201      	movs	r2, #1
 80038dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2200      	movs	r2, #0
 80038ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80038f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3730      	adds	r7, #48	; 0x30
 80038fc:	46bd      	mov	sp, r7
 80038fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003902:	bf00      	nop
 8003904:	08004100 	.word	0x08004100
 8003908:	00f42400 	.word	0x00f42400

0800390c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01a      	beq.n	8003a22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a0a:	d10a      	bne.n	8003a22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
  }
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b098      	sub	sp, #96	; 0x60
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a60:	f7fd fb1a 	bl	8001098 <HAL_GetTick>
 8003a64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d12f      	bne.n	8003ad4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f88e 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d022      	beq.n	8003ad4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aac:	647b      	str	r3, [r7, #68]	; 0x44
 8003aae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ab4:	e841 2300 	strex	r3, r2, [r1]
 8003ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e6      	bne.n	8003a8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e063      	b.n	8003b9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d149      	bne.n	8003b76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aea:	2200      	movs	r2, #0
 8003aec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f857 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d03c      	beq.n	8003b76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	623b      	str	r3, [r7, #32]
   return(result);
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e6      	bne.n	8003afc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3308      	adds	r3, #8
 8003b34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b4e:	61fa      	str	r2, [r7, #28]
 8003b50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	69b9      	ldr	r1, [r7, #24]
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	617b      	str	r3, [r7, #20]
   return(result);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e5      	bne.n	8003b2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e012      	b.n	8003b9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3758      	adds	r7, #88	; 0x58
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb4:	e04f      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d04b      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbe:	f7fd fa6b 	bl	8001098 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d302      	bcc.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e04e      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d037      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d034      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d031      	beq.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d110      	bne.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2208      	movs	r2, #8
 8003c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 f838 	bl	8003c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2208      	movs	r2, #8
 8003c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e029      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c30:	d111      	bne.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f81e 	bl	8003c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e00f      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	bf0c      	ite	eq
 8003c66:	2301      	moveq	r3, #1
 8003c68:	2300      	movne	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d0a0      	beq.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b095      	sub	sp, #84	; 0x54
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e6      	bne.n	8003c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e3      	bne.n	8003cb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d118      	bne.n	8003d2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f023 0310 	bic.w	r3, r3, #16
 8003d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6979      	ldr	r1, [r7, #20]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	613b      	str	r3, [r7, #16]
   return(result);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e6      	bne.n	8003cf8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003d3e:	bf00      	nop
 8003d40:	3754      	adds	r7, #84	; 0x54
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e027      	b.n	8003db0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2224      	movs	r2, #36	; 0x24
 8003d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e02d      	b.n	8003e30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2224      	movs	r2, #36	; 0x24
 8003de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f84f 	bl	8003eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e02d      	b.n	8003eac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2224      	movs	r2, #36	; 0x24
 8003e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f811 	bl	8003eb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d108      	bne.n	8003ed6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ed4:	e031      	b.n	8003f3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003eda:	2308      	movs	r3, #8
 8003edc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	0e5b      	lsrs	r3, r3, #25
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	0f5b      	lsrs	r3, r3, #29
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003efe:	7bbb      	ldrb	r3, [r7, #14]
 8003f00:	7b3a      	ldrb	r2, [r7, #12]
 8003f02:	4911      	ldr	r1, [pc, #68]	; (8003f48 <UARTEx_SetNbDataToProcess+0x94>)
 8003f04:	5c8a      	ldrb	r2, [r1, r2]
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f0a:	7b3a      	ldrb	r2, [r7, #12]
 8003f0c:	490f      	ldr	r1, [pc, #60]	; (8003f4c <UARTEx_SetNbDataToProcess+0x98>)
 8003f0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f10:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	7b7a      	ldrb	r2, [r7, #13]
 8003f20:	4909      	ldr	r1, [pc, #36]	; (8003f48 <UARTEx_SetNbDataToProcess+0x94>)
 8003f22:	5c8a      	ldrb	r2, [r1, r2]
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f28:	7b7a      	ldrb	r2, [r7, #13]
 8003f2a:	4908      	ldr	r1, [pc, #32]	; (8003f4c <UARTEx_SetNbDataToProcess+0x98>)
 8003f2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	08004118 	.word	0x08004118
 8003f4c:	08004120 	.word	0x08004120

08003f50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f58:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003f5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	4013      	ands	r3, r2
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <memset>:
 8003fc2:	4402      	add	r2, r0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d100      	bne.n	8003fcc <memset+0xa>
 8003fca:	4770      	bx	lr
 8003fcc:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd0:	e7f9      	b.n	8003fc6 <memset+0x4>
	...

08003fd4 <__libc_init_array>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4d0d      	ldr	r5, [pc, #52]	; (800400c <__libc_init_array+0x38>)
 8003fd8:	4c0d      	ldr	r4, [pc, #52]	; (8004010 <__libc_init_array+0x3c>)
 8003fda:	1b64      	subs	r4, r4, r5
 8003fdc:	10a4      	asrs	r4, r4, #2
 8003fde:	2600      	movs	r6, #0
 8003fe0:	42a6      	cmp	r6, r4
 8003fe2:	d109      	bne.n	8003ff8 <__libc_init_array+0x24>
 8003fe4:	4d0b      	ldr	r5, [pc, #44]	; (8004014 <__libc_init_array+0x40>)
 8003fe6:	4c0c      	ldr	r4, [pc, #48]	; (8004018 <__libc_init_array+0x44>)
 8003fe8:	f000 f818 	bl	800401c <_init>
 8003fec:	1b64      	subs	r4, r4, r5
 8003fee:	10a4      	asrs	r4, r4, #2
 8003ff0:	2600      	movs	r6, #0
 8003ff2:	42a6      	cmp	r6, r4
 8003ff4:	d105      	bne.n	8004002 <__libc_init_array+0x2e>
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffc:	4798      	blx	r3
 8003ffe:	3601      	adds	r6, #1
 8004000:	e7ee      	b.n	8003fe0 <__libc_init_array+0xc>
 8004002:	f855 3b04 	ldr.w	r3, [r5], #4
 8004006:	4798      	blx	r3
 8004008:	3601      	adds	r6, #1
 800400a:	e7f2      	b.n	8003ff2 <__libc_init_array+0x1e>
 800400c:	08004130 	.word	0x08004130
 8004010:	08004130 	.word	0x08004130
 8004014:	08004130 	.word	0x08004130
 8004018:	08004134 	.word	0x08004134

0800401c <_init>:
 800401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401e:	bf00      	nop
 8004020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004022:	bc08      	pop	{r3}
 8004024:	469e      	mov	lr, r3
 8004026:	4770      	bx	lr

08004028 <_fini>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr
