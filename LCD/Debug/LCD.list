
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f90  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080041c8  080041c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000008  080041d0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000398  20000214  080043dc  00020214  2**2
                  ALLOC
  8 ._user_heap_stack 00001404  200005ac  080043dc  000205ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013b26  00000000  00000000  00020287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002abb  00000000  00000000  00033dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001518  00000000  00000000  00036868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001009  00000000  00000000  00037d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021295  00000000  00000000  00038d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000128eb  00000000  00000000  0005a01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d5088  00000000  00000000  0006c909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005798  00000000  00000000  00141994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  0014712c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000214 	.word	0x20000214
 8000158:	00000000 	.word	0x00000000
 800015c:	080040b4 	.word	0x080040b4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000218 	.word	0x20000218
 8000178:	080040b4 	.word	0x080040b4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <Init_LCD>:
void comm_Col_Lower_Addr();
void comm_Page_Addr(unsigned char addr);


void Init_LCD()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	void comm_ADC_Select();
	HAL_Delay(5);
 800047c:	2005      	movs	r0, #5
 800047e:	f000 fe4b 	bl	8001118 <HAL_Delay>
	void comm_Display_Off();
	HAL_Delay(5);
 8000482:	2005      	movs	r0, #5
 8000484:	f000 fe48 	bl	8001118 <HAL_Delay>
	void comm_Com_Output_Scan_Reverse();
	HAL_Delay(5);
 8000488:	2005      	movs	r0, #5
 800048a:	f000 fe45 	bl	8001118 <HAL_Delay>
	void comm_LCD_Bias_1_9();
	HAL_Delay(5);
 800048e:	2005      	movs	r0, #5
 8000490:	f000 fe42 	bl	8001118 <HAL_Delay>
	void comm_Power_Control();
	HAL_Delay(5);
 8000494:	2005      	movs	r0, #5
 8000496:	f000 fe3f 	bl	8001118 <HAL_Delay>
	void comm_Resistor_Ratio();
	HAL_Delay(5);
 800049a:	2005      	movs	r0, #5
 800049c:	f000 fe3c 	bl	8001118 <HAL_Delay>
	void comm_Volume_Mode();
	HAL_Delay(5);
 80004a0:	2005      	movs	r0, #5
 80004a2:	f000 fe39 	bl	8001118 <HAL_Delay>
	void comm_Volume_Register();
	HAL_Delay(5);
 80004a6:	2005      	movs	r0, #5
 80004a8:	f000 fe36 	bl	8001118 <HAL_Delay>
	void comm_Display_On();
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <Disp_Pic>:

void Disp_Pic(unsigned char *lcd_string)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	//LCD organized into 4 pages(rows), each of 128 pixels wide and 8 pixels high.
	//Each element in lcd_string is a vertical column of 8 pixels.
	//pages are populated left to right in columns of 8 pixels
    unsigned int i,j;
    unsigned char page = 0x00; //starting page address at 0xB0 + 0
 80004b8:	2300      	movs	r3, #0
 80004ba:	73fb      	strb	r3, [r7, #15]

    comm_Display_Off();
 80004bc:	f000 f932 	bl	8000724 <comm_Display_Off>
    HAL_Delay(5);
 80004c0:	2005      	movs	r0, #5
 80004c2:	f000 fe29 	bl	8001118 <HAL_Delay>
    comm_Display_Start_Addr_0();
 80004c6:	f000 f93b 	bl	8000740 <comm_Display_Start_Addr_0>
    HAL_Delay(5);
 80004ca:	2005      	movs	r0, #5
 80004cc:	f000 fe24 	bl	8001118 <HAL_Delay>

    for(i=0; i<4; i++) //32 pixel high display / 8 pixels per page = 4 pages
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	e02a      	b.n	800052c <Disp_Pic+0x7c>
    {
    	comm_Page_Addr(page);       //set current page address
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 f946 	bl	800076a <comm_Page_Addr>
    	HAL_Delay(5);
 80004de:	2005      	movs	r0, #5
 80004e0:	f000 fe1a 	bl	8001118 <HAL_Delay>
    	comm_Col_Upper_Addr();
 80004e4:	f000 f933 	bl	800074e <comm_Col_Upper_Addr>
    	HAL_Delay(5);
 80004e8:	2005      	movs	r0, #5
 80004ea:	f000 fe15 	bl	8001118 <HAL_Delay>
    	comm_Col_Lower_Addr();
 80004ee:	f000 f935 	bl	800075c <comm_Col_Lower_Addr>
    	HAL_Delay(5);
 80004f2:	2005      	movs	r0, #5
 80004f4:	f000 fe10 	bl	8001118 <HAL_Delay>

        for(j=0; j<128; j++) //128 columns wide
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	e00d      	b.n	800051a <Disp_Pic+0x6a>
        {
        	data_write(*lcd_string);    //send picture data
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f862 	bl	80005cc <data_write>
        	HAL_Delay(5);
 8000508:	2005      	movs	r0, #5
 800050a:	f000 fe05 	bl	8001118 <HAL_Delay>
        	lcd_string++; //goes to next element/column
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3301      	adds	r3, #1
 8000512:	607b      	str	r3, [r7, #4]
        for(j=0; j<128; j++) //128 columns wide
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	3301      	adds	r3, #1
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	2b7f      	cmp	r3, #127	; 0x7f
 800051e:	d9ee      	bls.n	80004fe <Disp_Pic+0x4e>
        }

        page++;         //after 128 columns, go to next page
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	3301      	adds	r3, #1
 8000524:	73fb      	strb	r3, [r7, #15]
    for(i=0; i<4; i++) //32 pixel high display / 8 pixels per page = 4 pages
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	2b03      	cmp	r3, #3
 8000530:	d9d1      	bls.n	80004d6 <Disp_Pic+0x26>
    }
    comm_Display_On();
 8000532:	f000 f8fe 	bl	8000732 <comm_Display_On>
    HAL_Delay(5);
 8000536:	2005      	movs	r0, #5
 8000538:	f000 fdee 	bl	8001118 <HAL_Delay>
}
 800053c:	bf00      	nop
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <Clear_LCD>:

void Clear_LCD()
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
    unsigned int i,j;
    unsigned char page = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	71fb      	strb	r3, [r7, #7]
    comm_Display_Off();
 800054e:	f000 f8e9 	bl	8000724 <comm_Display_Off>
    HAL_Delay(5);
 8000552:	2005      	movs	r0, #5
 8000554:	f000 fde0 	bl	8001118 <HAL_Delay>
    comm_Display_Start_Addr_0();
 8000558:	f000 f8f2 	bl	8000740 <comm_Display_Start_Addr_0>
    HAL_Delay(5);
 800055c:	2005      	movs	r0, #5
 800055e:	f000 fddb 	bl	8001118 <HAL_Delay>

    for(i = 0; i < 4; i++) //32pixel display / 8 pixels per page = 4 pages
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	e025      	b.n	80005b4 <Clear_LCD+0x70>
    {
    	comm_Page_Addr(page);       //set current page address
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f8fd 	bl	800076a <comm_Page_Addr>
    	HAL_Delay(5);
 8000570:	2005      	movs	r0, #5
 8000572:	f000 fdd1 	bl	8001118 <HAL_Delay>
    	comm_Col_Upper_Addr();
 8000576:	f000 f8ea 	bl	800074e <comm_Col_Upper_Addr>
    	HAL_Delay(5);
 800057a:	2005      	movs	r0, #5
 800057c:	f000 fdcc 	bl	8001118 <HAL_Delay>
    	comm_Col_Lower_Addr();
 8000580:	f000 f8ec 	bl	800075c <comm_Col_Lower_Addr>
    	HAL_Delay(5);
 8000584:	2005      	movs	r0, #5
 8000586:	f000 fdc7 	bl	8001118 <HAL_Delay>

        for(j = 0; j < 128; j++) //128 columns wide
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	e008      	b.n	80005a2 <Clear_LCD+0x5e>
        {
    	    data_write(0x00);    //send picture data
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f81b 	bl	80005cc <data_write>
    	    HAL_Delay(5);
 8000596:	2005      	movs	r0, #5
 8000598:	f000 fdbe 	bl	8001118 <HAL_Delay>
        for(j = 0; j < 128; j++) //128 columns wide
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	3301      	adds	r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	2b7f      	cmp	r3, #127	; 0x7f
 80005a6:	d9f3      	bls.n	8000590 <Clear_LCD+0x4c>
        }
        page++;         //after 128 columns, go to next page
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	3301      	adds	r3, #1
 80005ac:	71fb      	strb	r3, [r7, #7]
    for(i = 0; i < 4; i++) //32pixel display / 8 pixels per page = 4 pages
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d9d6      	bls.n	8000568 <Clear_LCD+0x24>
    }
    comm_Display_On();
 80005ba:	f000 f8ba 	bl	8000732 <comm_Display_On>
    HAL_Delay(5);
 80005be:	2005      	movs	r0, #5
 80005c0:	f000 fdaa 	bl	8001118 <HAL_Delay>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <data_write>:
    comm_Display_On();
    HAL_Delay(5);
}

void data_write(unsigned char data) //Data Output Serial Interface
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	unsigned int n;

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2110      	movs	r1, #16
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f001 f83f 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_SET); //data type
 80005e2:	2201      	movs	r2, #1
 80005e4:	2140      	movs	r1, #64	; 0x40
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f001 f839 	bl	8001660 <HAL_GPIO_WritePin>

	for(n=0; n<8; n++) //each pixel in the column
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	e034      	b.n	800065e <data_write+0x92>
	{
		if((data&0x80)==0x80)
 80005f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	da06      	bge.n	800060a <data_write+0x3e>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f001 f82c 	bl	8001660 <HAL_GPIO_WritePin>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
		}


		while(0);
 8000608:	e005      	b.n	8000616 <data_write+0x4a>
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f001 f825 	bl	8001660 <HAL_GPIO_WritePin>
		while(0);
 8000616:	bf00      	nop
		HAL_Delay(5);
 8000618:	2005      	movs	r0, #5
 800061a:	f000 fd7d 	bl	8001118 <HAL_Delay>
		data = (data<<1);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2120      	movs	r1, #32
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f001 f818 	bl	8001660 <HAL_GPIO_WritePin>
		while(0);
 8000630:	bf00      	nop
		HAL_Delay(5);
 8000632:	2005      	movs	r0, #5
 8000634:	f000 fd70 	bl	8001118 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2120      	movs	r1, #32
 800063c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000640:	f001 f80e 	bl	8001660 <HAL_GPIO_WritePin>
		while(0);
 8000644:	bf00      	nop
		HAL_Delay(5);
 8000646:	2005      	movs	r0, #5
 8000648:	f000 fd66 	bl	8001118 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f804 	bl	8001660 <HAL_GPIO_WritePin>
	for(n=0; n<8; n++) //each pixel in the column
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	2b07      	cmp	r3, #7
 8000662:	d9c7      	bls.n	80005f4 <data_write+0x28>
	}
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2110      	movs	r1, #16
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f000 fff8 	bl	8001660 <HAL_GPIO_WritePin>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <comm_write>:

void comm_write(unsigned char command)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	unsigned int n;

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); //CS //activating LCD control
 8000682:	2200      	movs	r2, #0
 8000684:	2110      	movs	r1, #16
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f000 ffe9 	bl	8001660 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET); //RS //instruction/setting type
 800068e:	2200      	movs	r2, #0
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f000 ffe3 	bl	8001660 <HAL_GPIO_WritePin>

	for(n=0; n<8; n++)
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e034      	b.n	800070a <comm_write+0x92>
	{
		//sends each bit of the command 1 at a time, starting at most significant (left to right)
		if((command&0x80)==0x80)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da06      	bge.n	80006b6 <comm_write+0x3e>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_SET); //SI
 80006a8:	2201      	movs	r2, #1
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 ffd6 	bl	8001660 <HAL_GPIO_WritePin>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
		}


		while(0);
 80006b4:	e005      	b.n	80006c2 <comm_write+0x4a>
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f000 ffcf 	bl	8001660 <HAL_GPIO_WritePin>
		while(0);
 80006c2:	bf00      	nop
		HAL_Delay(5);
 80006c4:	2005      	movs	r0, #5
 80006c6:	f000 fd27 	bl	8001118 <HAL_Delay>
		command = (command<<1);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET); //SC
 80006d0:	2200      	movs	r2, #0
 80006d2:	2120      	movs	r1, #32
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f000 ffc2 	bl	8001660 <HAL_GPIO_WritePin>
		while(0);
 80006dc:	bf00      	nop
		HAL_Delay(5);
 80006de:	2005      	movs	r0, #5
 80006e0:	f000 fd1a 	bl	8001118 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2120      	movs	r1, #32
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f000 ffb8 	bl	8001660 <HAL_GPIO_WritePin>
		while(0);
 80006f0:	bf00      	nop
		HAL_Delay(5);
 80006f2:	2005      	movs	r0, #5
 80006f4:	f000 fd10 	bl	8001118 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2120      	movs	r1, #32
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f000 ffae 	bl	8001660 <HAL_GPIO_WritePin>
	for(n=0; n<8; n++)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3301      	adds	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b07      	cmp	r3, #7
 800070e:	d9c7      	bls.n	80006a0 <comm_write+0x28>
	}

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2110      	movs	r1, #16
 8000714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000718:	f000 ffa2 	bl	8001660 <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <comm_Display_Off>:
{
	comm_write(0xA0); //see manual to get binary commands
}

void comm_Display_Off()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	comm_write(0xAE);
 8000728:	20ae      	movs	r0, #174	; 0xae
 800072a:	f7ff ffa5 	bl	8000678 <comm_write>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}

08000732 <comm_Display_On>:

void comm_Display_On()
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
	comm_write(0xAF);
 8000736:	20af      	movs	r0, #175	; 0xaf
 8000738:	f7ff ff9e 	bl	8000678 <comm_write>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <comm_Display_Start_Addr_0>:
{
	comm_write(0x20);
}

void comm_Display_Start_Addr_0()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	comm_write(0x40);
 8000744:	2040      	movs	r0, #64	; 0x40
 8000746:	f7ff ff97 	bl	8000678 <comm_write>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}

0800074e <comm_Col_Upper_Addr>:

void comm_Col_Upper_Addr()
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
	comm_write(0x10);
 8000752:	2010      	movs	r0, #16
 8000754:	f7ff ff90 	bl	8000678 <comm_write>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <comm_Col_Lower_Addr>:

void comm_Col_Lower_Addr()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	comm_write(0x00);
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff89 	bl	8000678 <comm_write>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}

0800076a <comm_Page_Addr>:

void comm_Page_Addr(unsigned char addr)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
	comm_write(0xB0 + addr);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	3b50      	subs	r3, #80	; 0x50
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff7c 	bl	8000678 <comm_write>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000798:	f023 0218 	bic.w	r2, r3, #24
 800079c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007d8:	68fb      	ldr	r3, [r7, #12]
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 fc0e 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f858 	bl	80008a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007f4:	f000 f8cc 	bl	8000990 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f000 f95e 	bl	8000ab8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007fc:	f000 f8e6 	bl	80009cc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000800:	f000 f932 	bl	8000a68 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  Init_LCD();
 8000804:	f7ff fe38 	bl	8000478 <Init_LCD>
  state = 0;
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <main+0xb0>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
  state_changed = 0;
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <main+0xb4>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (state == 0){
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <main+0xb0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d110      	bne.n	800083e <main+0x56>
		  if (state_changed == 1)
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <main+0xb4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d105      	bne.n	8000830 <main+0x48>
		  {
			  Disp_Pic(DiscBotLogo);
 8000824:	481e      	ldr	r0, [pc, #120]	; (80008a0 <main+0xb8>)
 8000826:	f7ff fe43 	bl	80004b0 <Disp_Pic>
			  state_changed = 0;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <main+0xb4>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
		  }

		  Blue_On();
 8000830:	f000 f9ee 	bl	8000c10 <Blue_On>
		  Green_Off();
 8000834:	f000 f9e0 	bl	8000bf8 <Green_Off>
		  Red_Off();
 8000838:	f000 f9c6 	bl	8000bc8 <Red_Off>
 800083c:	e7ea      	b.n	8000814 <main+0x2c>
	  }
	  else if (state == 1){
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <main+0xb0>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d10f      	bne.n	8000866 <main+0x7e>
		  if (state_changed == 1)
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <main+0xb4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d104      	bne.n	8000858 <main+0x70>
		  {
			  Clear_LCD();
 800084e:	f7ff fe79 	bl	8000544 <Clear_LCD>
			  state_changed = 0;
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <main+0xb4>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
		  }

		  Blue_Off();
 8000858:	f000 f9e6 	bl	8000c28 <Blue_Off>
		  Green_On();
 800085c:	f000 f9c0 	bl	8000be0 <Green_On>
		  Red_Off();
 8000860:	f000 f9b2 	bl	8000bc8 <Red_Off>
 8000864:	e7d6      	b.n	8000814 <main+0x2c>
	  }
	  else if (state == 2){
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <main+0xb0>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d10f      	bne.n	800088e <main+0xa6>
		  if (state_changed == 1)
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <main+0xb4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d104      	bne.n	8000880 <main+0x98>
		  {
			  Init_LCD();
 8000876:	f7ff fdff 	bl	8000478 <Init_LCD>
			  //Black_LCD();
			  state_changed = 0;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <main+0xb4>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
		  }

		  Blue_Off();
 8000880:	f000 f9d2 	bl	8000c28 <Blue_Off>
		  Green_Off();
 8000884:	f000 f9b8 	bl	8000bf8 <Green_Off>
		  Red_On();
 8000888:	f000 f992 	bl	8000bb0 <Red_On>
 800088c:	e7c2      	b.n	8000814 <main+0x2c>
	  }
	  else{
		  state = 0;
 800088e:	4b02      	ldr	r3, [pc, #8]	; (8000898 <main+0xb0>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
	  if (state == 0){
 8000894:	e7be      	b.n	8000814 <main+0x2c>
 8000896:	bf00      	nop
 8000898:	200005a0 	.word	0x200005a0
 800089c:	200005a4 	.word	0x200005a4
 80008a0:	20000008 	.word	0x20000008

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09a      	sub	sp, #104	; 0x68
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0320 	add.w	r3, r7, #32
 80008ae:	2248      	movs	r2, #72	; 0x48
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fbd1 	bl	800405a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80008ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008d8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80008da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	f023 0303 	bic.w	r3, r3, #3
 80008e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008ee:	f000 ffdf 	bl	80018b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff ff48 	bl	8000788 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <SystemClock_Config+0xe8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000900:	4a22      	ldr	r2, [pc, #136]	; (800098c <SystemClock_Config+0xe8>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <SystemClock_Config+0xe8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000914:	2327      	movs	r3, #39	; 0x27
 8000916:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000918:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800091e:	2301      	movs	r3, #1
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000928:	2301      	movs	r3, #1
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000930:	2300      	movs	r3, #0
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000934:	2360      	movs	r3, #96	; 0x60
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000938:	2300      	movs	r3, #0
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	4618      	mov	r0, r3
 8000942:	f001 fb49 	bl	8001fd8 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800094c:	f000 f99e 	bl	8000c8c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000950:	236f      	movs	r3, #111	; 0x6f
 8000952:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000954:	2302      	movs	r3, #2
 8000956:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2101      	movs	r1, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fea5 	bl	80026c0 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800097c:	f000 f986 	bl	8000c8c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000980:	f002 fc60 	bl	8003244 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000984:	bf00      	nop
 8000986:	3768      	adds	r7, #104	; 0x68
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	58000400 	.word	0x58000400

08000990 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b094      	sub	sp, #80	; 0x50
 8000994:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2250      	movs	r2, #80	; 0x50
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f003 fb5c 	bl	800405a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80009a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80009a8:	2300      	movs	r3, #0
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b0:	463b      	mov	r3, r7
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fad0 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80009be:	f000 f965 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80009c2:	bf00      	nop
 80009c4:	3750      	adds	r7, #80	; 0x50
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <MX_USART1_UART_Init+0x98>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 80009e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009e4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 80009f4:	220c      	movs	r2, #12
 80009f6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a16:	4812      	ldr	r0, [pc, #72]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 8000a18:	f002 fd4b 	bl	80034b2 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000a22:	f000 f933 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 8000a2a:	f003 fa13 	bl	8003e54 <HAL_UARTEx_SetTxFifoThreshold>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000a34:	f000 f92a 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4809      	ldr	r0, [pc, #36]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 8000a3c:	f003 fa48 	bl	8003ed0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000a46:	f000 f921 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USART1_UART_Init+0x94>)
 8000a4c:	f003 f9c9 	bl	8003de2 <HAL_UARTEx_DisableFifoMode>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000a56:	f000 f919 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000230 	.word	0x20000230
 8000a64:	40013800 	.word	0x40013800

08000a68 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_USB_PCD_Init+0x48>)
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <MX_USB_PCD_Init+0x4c>)
 8000a70:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_USB_PCD_Init+0x48>)
 8000a74:	2208      	movs	r2, #8
 8000a76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <MX_USB_PCD_Init+0x48>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_USB_PCD_Init+0x48>)
 8000a80:	2202      	movs	r2, #2
 8000a82:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_USB_PCD_Init+0x48>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_USB_PCD_Init+0x48>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_USB_PCD_Init+0x48>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_USB_PCD_Init+0x48>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_USB_PCD_Init+0x48>)
 8000a9e:	f000 fe0f 	bl	80016c0 <HAL_PCD_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000aa8:	f000 f8f0 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200002c4 	.word	0x200002c4
 8000ab4:	40006800 	.word	0x40006800

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	2004      	movs	r0, #4
 8000ace:	f7ff fe71 	bl	80007b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f7ff fe6e 	bl	80007b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	2002      	movs	r0, #2
 8000ada:	f7ff fe6b 	bl	80007b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff fe68 	bl	80007b4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f000 fdb8 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCL_Pin|A0_Pin|SI_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	21e0      	movs	r1, #224	; 0xe0
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fdb2 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2123      	movs	r1, #35	; 0x23
 8000b00:	4828      	ldr	r0, [pc, #160]	; (8000ba4 <MX_GPIO_Init+0xec>)
 8000b02:	f000 fdad 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS1_Pin SCL_Pin A0_Pin SI_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|SCL_Pin|A0_Pin|SI_Pin;
 8000b06:	23f0      	movs	r3, #240	; 0xf0
 8000b08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f000 fc2f 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b22:	2310      	movs	r3, #16
 8000b24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b26:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b36:	f000 fc23 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000b3a:	2323      	movs	r3, #35	; 0x23
 8000b3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <MX_GPIO_Init+0xec>)
 8000b50:	f000 fc16 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000b54:	2303      	movs	r3, #3
 8000b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <MX_GPIO_Init+0xf4>)
 8000b68:	f000 fc0a 	bl	8001380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2006      	movs	r0, #6
 8000b72:	f000 fbd0 	bl	8001316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b76:	2006      	movs	r0, #6
 8000b78:	f000 fbe7 	bl	800134a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2007      	movs	r0, #7
 8000b82:	f000 fbc8 	bl	8001316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b86:	2007      	movs	r0, #7
 8000b88:	f000 fbdf 	bl	800134a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	200a      	movs	r0, #10
 8000b92:	f000 fbc0 	bl	8001316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b96:	200a      	movs	r0, #10
 8000b98:	f000 fbd7 	bl	800134a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	48000800 	.word	0x48000800
 8000bac:	48000c00 	.word	0x48000c00

08000bb0 <Red_On>:

/* USER CODE BEGIN 4 */
void Red_On()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <Red_On+0x14>)
 8000bba:	f000 fd51 	bl	8001660 <HAL_GPIO_WritePin>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <Red_Off>:

void Red_Off()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2102      	movs	r1, #2
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <Red_Off+0x14>)
 8000bd2:	f000 fd45 	bl	8001660 <HAL_GPIO_WritePin>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	48000400 	.word	0x48000400

08000be0 <Green_On>:

void Green_On()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2101      	movs	r1, #1
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <Green_On+0x14>)
 8000bea:	f000 fd39 	bl	8001660 <HAL_GPIO_WritePin>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	48000400 	.word	0x48000400

08000bf8 <Green_Off>:

void Green_Off()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <Green_Off+0x14>)
 8000c02:	f000 fd2d 	bl	8001660 <HAL_GPIO_WritePin>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	48000400 	.word	0x48000400

08000c10 <Blue_On>:

void Blue_On()
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	2120      	movs	r1, #32
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <Blue_On+0x14>)
 8000c1a:	f000 fd21 	bl	8001660 <HAL_GPIO_WritePin>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	48000400 	.word	0x48000400

08000c28 <Blue_Off>:

void Blue_Off()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2120      	movs	r1, #32
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <Blue_Off+0x14>)
 8000c32:	f000 fd15 	bl	8001660 <HAL_GPIO_WritePin>
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	48000400 	.word	0x48000400

08000c40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == B1_Pin){state = 0;}      //10
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	2b10      	cmp	r3, #16
 8000c4e:	d103      	bne.n	8000c58 <HAL_GPIO_EXTI_Callback+0x18>
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e00c      	b.n	8000c72 <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_PIN == B2_Pin){state = 1;} //1
 8000c58:	88fb      	ldrh	r3, [r7, #6]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d103      	bne.n	8000c66 <HAL_GPIO_EXTI_Callback+0x26>
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	e005      	b.n	8000c72 <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_PIN == B3_Pin){state = 2;} //2
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d102      	bne.n	8000c72 <HAL_GPIO_EXTI_Callback+0x32>
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c6e:	2202      	movs	r2, #2
 8000c70:	601a      	str	r2, [r3, #0]
	state_changed = 1;
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_GPIO_EXTI_Callback+0x48>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	200005a0 	.word	0x200005a0
 8000c88:	200005a4 	.word	0x200005a4

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>

08000c96 <LL_AHB2_GRP1_EnableClock>:
{
 8000c96:	b480      	push	{r7}
 8000c98:	b085      	sub	sp, #20
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cec:	68fb      	ldr	r3, [r7, #12]
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b09c      	sub	sp, #112	; 0x70
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2250      	movs	r2, #80	; 0x50
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 f97c 	bl	800405a <memset>
  if(huart->Instance==USART1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <HAL_UART_MspInit+0x84>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d124      	bne.n	8000db6 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 f8ed 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d84:	f7ff ff82 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d88:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d8c:	f7ff ffb5 	bl	8000cfa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	2002      	movs	r0, #2
 8000d92:	f7ff ff80 	bl	8000c96 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d96:	23c0      	movs	r3, #192	; 0xc0
 8000d98:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da6:	2307      	movs	r3, #7
 8000da8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dae:	4619      	mov	r1, r3
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <HAL_UART_MspInit+0x88>)
 8000db2:	f000 fae5 	bl	8001380 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3770      	adds	r7, #112	; 0x70
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09c      	sub	sp, #112	; 0x70
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2250      	movs	r2, #80	; 0x50
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 f936 	bl	800405a <memset>
  if(hpcd->Instance==USB)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1f      	ldr	r2, [pc, #124]	; (8000e70 <HAL_PCD_MspInit+0xa8>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d136      	bne.n	8000e66 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000df8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000dfe:	2318      	movs	r3, #24
 8000e00:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000e02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e06:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000e0e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e12:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e18:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e1e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 f897 	bl	8002f58 <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000e30:	f7ff ff2c 	bl	8000c8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	2001      	movs	r0, #1
 8000e36:	f7ff ff2e 	bl	8000c96 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f000 fa91 	bl	8001380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e5e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e62:	f7ff ff31 	bl	8000cc8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e66:	bf00      	nop
 8000e68:	3770      	adds	r7, #112	; 0x70
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40006800 	.word	0x40006800

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f8fe 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 fbdf 	bl	8001690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8000eda:	2002      	movs	r0, #2
 8000edc:	f000 fbd8 	bl	8001690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ee8:	2010      	movs	r0, #16
 8000eea:	f000 fbd1 	bl	8001690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <SystemInit+0x98>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efe:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <SystemInit+0x98>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f20:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <SystemInit+0x9c>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f3e:	f023 0305 	bic.w	r3, r3, #5
 8000f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f52:	f023 0301 	bic.w	r3, r3, #1
 8000f56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <SystemInit+0xa0>)
 8000f60:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <SystemInit+0xa0>)
 8000f68:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	faf6fefb 	.word	0xfaf6fefb
 8000f94:	22041000 	.word	0x22041000

08000f98 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f98:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9c:	3304      	adds	r3, #4

08000f9e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000fa2:	d3f9      	bcc.n	8000f98 <CopyDataInit>
  bx lr
 8000fa4:	4770      	bx	lr

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000fa6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000fa8:	3004      	adds	r0, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000faa:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>
  bx lr
 8000fae:	4770      	bx	lr

08000fb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb4:	f7ff ff9e 	bl	8000ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000fb8:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <LoopForever+0x6>)
 8000fba:	490c      	ldr	r1, [pc, #48]	; (8000fec <LoopForever+0xa>)
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <LoopForever+0xe>)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f7ff ffed 	bl	8000f9e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <LoopForever+0x12>)
 8000fc6:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <LoopForever+0x16>)
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <LoopForever+0x1a>)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f7ff ffe7 	bl	8000f9e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <LoopForever+0x1e>)
 8000fd2:	490c      	ldr	r1, [pc, #48]	; (8001004 <LoopForever+0x22>)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f7ff ffe8 	bl	8000faa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fda:	f003 f847 	bl	800406c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fde:	f7ff fc03 	bl	80007e8 <main>

08000fe2 <LoopForever>:

LoopForever:
  b LoopForever
 8000fe2:	e7fe      	b.n	8000fe2 <LoopForever>
  ldr   r0, =_estack
 8000fe4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000214 	.word	0x20000214
 8000ff0:	080041d0 	.word	0x080041d0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ff4:	20030000 	.word	0x20030000
 8000ff8:	20030000 	.word	0x20030000
 8000ffc:	080043dc 	.word	0x080043dc
  INIT_BSS _sbss, _ebss
 8001000:	20000214 	.word	0x20000214
 8001004:	200005ac 	.word	0x200005ac

08001008 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_Init+0x3c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_Init+0x3c>)
 800101c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001020:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001022:	2003      	movs	r0, #3
 8001024:	f000 f96c 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001028:	2000      	movs	r0, #0
 800102a:	f000 f80f 	bl	800104c <HAL_InitTick>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	e001      	b.n	800103e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800103a:	f7ff fe77 	bl	8000d2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103e:	79fb      	ldrb	r3, [r7, #7]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	58004000 	.word	0x58004000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <HAL_InitTick+0x6c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d024      	beq.n	80010aa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001060:	f001 fcda 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8001064:	4602      	mov	r2, r0
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_InitTick+0x6c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001070:	fbb3 f3f1 	udiv	r3, r3, r1
 8001074:	fbb2 f3f3 	udiv	r3, r2, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f974 	bl	8001366 <HAL_SYSTICK_Config>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10f      	bne.n	80010a4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	d809      	bhi.n	800109e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108a:	2200      	movs	r2, #0
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	f000 f940 	bl	8001316 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001096:	4a09      	ldr	r2, [pc, #36]	; (80010bc <HAL_InitTick+0x70>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e007      	b.n	80010ae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e004      	b.n	80010ae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e001      	b.n	80010ae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000210 	.word	0x20000210
 80010bc:	2000020c 	.word	0x2000020c

080010c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000210 	.word	0x20000210
 80010e4:	200005a8 	.word	0x200005a8

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200005a8 	.word	0x200005a8

08001100 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTickPrio+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2000020c 	.word	0x2000020c

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffe2 	bl	80010e8 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffd2 	bl	80010e8 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000210 	.word	0x20000210

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	; (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff29 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001324:	f7ff ff40 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 8001328:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	68b9      	ldr	r1, [r7, #8]
 800132e:	6978      	ldr	r0, [r7, #20]
 8001330:	f7ff ff90 	bl	8001254 <NVIC_EncodePriority>
 8001334:	4602      	mov	r2, r0
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff5f 	bl	8001200 <__NVIC_SetPriority>
}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff33 	bl	80011c4 <__NVIC_EnableIRQ>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff ffa4 	bl	80012bc <SysTick_Config>
 8001374:	4603      	mov	r3, r0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138e:	e14c      	b.n	800162a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 813e 	beq.w	8001624 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d005      	beq.n	80013c0 <HAL_GPIO_Init+0x40>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d130      	bne.n	8001422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013f6:	2201      	movs	r2, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	f003 0201 	and.w	r2, r3, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b03      	cmp	r3, #3
 800142c:	d017      	beq.n	800145e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d123      	bne.n	80014b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	6939      	ldr	r1, [r7, #16]
 80014ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0203 	and.w	r2, r3, #3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8098 	beq.w	8001624 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80014f4:	4a54      	ldr	r2, [pc, #336]	; (8001648 <HAL_GPIO_Init+0x2c8>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800151e:	d019      	beq.n	8001554 <HAL_GPIO_Init+0x1d4>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a4a      	ldr	r2, [pc, #296]	; (800164c <HAL_GPIO_Init+0x2cc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d013      	beq.n	8001550 <HAL_GPIO_Init+0x1d0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a49      	ldr	r2, [pc, #292]	; (8001650 <HAL_GPIO_Init+0x2d0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d00d      	beq.n	800154c <HAL_GPIO_Init+0x1cc>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a48      	ldr	r2, [pc, #288]	; (8001654 <HAL_GPIO_Init+0x2d4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d007      	beq.n	8001548 <HAL_GPIO_Init+0x1c8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a47      	ldr	r2, [pc, #284]	; (8001658 <HAL_GPIO_Init+0x2d8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d101      	bne.n	8001544 <HAL_GPIO_Init+0x1c4>
 8001540:	2304      	movs	r3, #4
 8001542:	e008      	b.n	8001556 <HAL_GPIO_Init+0x1d6>
 8001544:	2307      	movs	r3, #7
 8001546:	e006      	b.n	8001556 <HAL_GPIO_Init+0x1d6>
 8001548:	2303      	movs	r3, #3
 800154a:	e004      	b.n	8001556 <HAL_GPIO_Init+0x1d6>
 800154c:	2302      	movs	r3, #2
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x1d6>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_GPIO_Init+0x1d6>
 8001554:	2300      	movs	r3, #0
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	f002 0203 	and.w	r2, r2, #3
 800155c:	0092      	lsls	r2, r2, #2
 800155e:	4093      	lsls	r3, r2
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001566:	4938      	ldr	r1, [pc, #224]	; (8001648 <HAL_GPIO_Init+0x2c8>)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001574:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_GPIO_Init+0x2dc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001598:	4a30      	ldr	r2, [pc, #192]	; (800165c <HAL_GPIO_Init+0x2dc>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800159e:	4b2f      	ldr	r3, [pc, #188]	; (800165c <HAL_GPIO_Init+0x2dc>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015c2:	4a26      	ldr	r2, [pc, #152]	; (800165c <HAL_GPIO_Init+0x2dc>)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_GPIO_Init+0x2dc>)
 80015ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ee:	4a1b      	ldr	r2, [pc, #108]	; (800165c <HAL_GPIO_Init+0x2dc>)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_GPIO_Init+0x2dc>)
 80015f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800161c:	4a0f      	ldr	r2, [pc, #60]	; (800165c <HAL_GPIO_Init+0x2dc>)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3301      	adds	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	f47f aeab 	bne.w	8001390 <HAL_GPIO_Init+0x10>
  }
}
 800163a:	bf00      	nop
 800163c:	bf00      	nop
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40010000 	.word	0x40010000
 800164c:	48000400 	.word	0x48000400
 8001650:	48000800 	.word	0x48000800
 8001654:	48000c00 	.word	0x48000c00
 8001658:	48001000 	.word	0x48001000
 800165c:	58000800 	.word	0x58000800

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
 800166c:	4613      	mov	r3, r2
 800166e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800167c:	e002      	b.n	8001684 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fac6 	bl	8000c40 <HAL_GPIO_EXTI_Callback>
  }
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	58000800 	.word	0x58000800

080016c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0c0      	b.n	8001854 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d106      	bne.n	80016ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fb6e 	bl	8000dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2203      	movs	r2, #3
 80016f0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fc75 	bl	8003fe8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	e03e      	b.n	8001782 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	3311      	adds	r3, #17
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	3310      	adds	r3, #16
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	3313      	adds	r3, #19
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	3320      	adds	r3, #32
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001754:	7bfa      	ldrb	r2, [r7, #15]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3324      	adds	r3, #36	; 0x24
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	3301      	adds	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	791b      	ldrb	r3, [r3, #4]
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	429a      	cmp	r2, r3
 800178a:	d3bb      	bcc.n	8001704 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	e044      	b.n	800181c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	f203 1351 	addw	r3, r3, #337	; 0x151
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	f203 1353 	addw	r3, r3, #339	; 0x153
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001800:	7bfa      	ldrb	r2, [r7, #15]
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	3301      	adds	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	791b      	ldrb	r3, [r3, #4]
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	429a      	cmp	r2, r3
 8001824:	d3b5      	bcc.n	8001792 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3304      	adds	r3, #4
 800182e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001832:	f002 fbf4 	bl	800401e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7a9b      	ldrb	r3, [r3, #10]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d102      	bne.n	8001852 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f805 	bl	800185c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001880:	b29b      	uxth	r3, r3
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001894:	b29b      	uxth	r3, r3
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	58000400 	.word	0x58000400

080018d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	58000400 	.word	0x58000400

080018ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018fe:	d101      	bne.n	8001904 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_RCC_HSE_Enable>:
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800191e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_RCC_HSE_Disable>:
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_RCC_HSE_IsReady>:
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800195e:	d101      	bne.n	8001964 <LL_RCC_HSE_IsReady+0x18>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <LL_RCC_HSE_IsReady+0x1a>
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_RCC_HSI_Enable>:
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800197e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_RCC_HSI_Disable>:
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_RCC_HSI_IsReady>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019be:	d101      	bne.n	80019c4 <LL_RCC_HSI_IsReady+0x18>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <LL_RCC_HSI_IsReady+0x1a>
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	061b      	lsls	r3, r3, #24
 80019e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ea:	4313      	orrs	r3, r2
 80019ec:	604b      	str	r3, [r1, #4]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <LL_RCC_HSI48_Enable>:
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_RCC_HSI48_Disable>:
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2c:	f023 0301 	bic.w	r3, r3, #1
 8001a30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_RCC_HSI48_IsReady>:
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d101      	bne.n	8001a56 <LL_RCC_HSI48_IsReady+0x18>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_RCC_HSI48_IsReady+0x1a>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_RCC_LSE_Enable>:
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_RCC_LSE_Disable>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_RCC_LSE_EnableBypass>:
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab6:	f043 0304 	orr.w	r3, r3, #4
 8001aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_RCC_LSE_DisableBypass>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad8:	f023 0304 	bic.w	r3, r3, #4
 8001adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d101      	bne.n	8001b02 <LL_RCC_LSE_IsReady+0x18>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <LL_RCC_LSE_IsReady+0x1a>
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d101      	bne.n	8001b6a <LL_RCC_LSI1_IsReady+0x18>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_RCC_LSI1_IsReady+0x1a>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d101      	bne.n	8001bd2 <LL_RCC_LSI2_IsReady+0x18>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <LL_RCC_LSI2_IsReady+0x1a>
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6013      	str	r3, [r2, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d101      	bne.n	8001c5e <LL_RCC_MSI_IsReady+0x16>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <LL_RCC_MSI_IsReady+0x18>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2bb0      	cmp	r3, #176	; 0xb0
 8001ca8:	d901      	bls.n	8001cae <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001caa:	23b0      	movs	r3, #176	; 0xb0
 8001cac:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001cae:	687b      	ldr	r3, [r7, #4]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 0203 	bic.w	r2, r3, #3
 8001cf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d8a:	f023 020f 	bic.w	r2, r3, #15
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	6013      	str	r3, [r2, #0]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e8c:	6013      	str	r3, [r2, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eaa:	d101      	bne.n	8001eb0 <LL_RCC_PLL_IsReady+0x18>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <LL_RCC_PLL_IsReady+0x1a>
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0303 	and.w	r3, r3, #3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f30:	d101      	bne.n	8001f36 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f56:	d101      	bne.n	8001f5c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7c:	d101      	bne.n	8001f82 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fa0:	d101      	bne.n	8001fa6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fc4:	d101      	bne.n	8001fca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b08d      	sub	sp, #52	; 0x34
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e363      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 808d 	beq.w	8002112 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff8:	f7ff fe89 	bl	8001d0e <LL_RCC_GetSysClkSource>
 8001ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ffe:	f7ff ff82 	bl	8001f06 <LL_RCC_PLL_GetMainSource>
 8002002:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_RCC_OscConfig+0x3e>
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	2b0c      	cmp	r3, #12
 800200e:	d147      	bne.n	80020a0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	2b01      	cmp	r3, #1
 8002014:	d144      	bne.n	80020a0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e347      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002026:	f7ff fe34 	bl	8001c92 <LL_RCC_MSI_GetRange>
 800202a:	4603      	mov	r3, r0
 800202c:	429c      	cmp	r4, r3
 800202e:	d914      	bls.n	800205a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fd2f 	bl	8002a98 <RCC_SetFlashLatencyFromMSIRange>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e336      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fe0e 	bl	8001c6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fe32 	bl	8001cbc <LL_RCC_MSI_SetCalibTrimming>
 8002058:	e013      	b.n	8002082 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fe03 	bl	8001c6a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fe27 	bl	8001cbc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	4618      	mov	r0, r3
 8002074:	f000 fd10 	bl	8002a98 <RCC_SetFlashLatencyFromMSIRange>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e317      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002082:	f000 fcc9 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002086:	4603      	mov	r3, r0
 8002088:	4aa4      	ldr	r2, [pc, #656]	; (800231c <HAL_RCC_OscConfig+0x344>)
 800208a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800208c:	4ba4      	ldr	r3, [pc, #656]	; (8002320 <HAL_RCC_OscConfig+0x348>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe ffdb 	bl	800104c <HAL_InitTick>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d039      	beq.n	8002110 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e308      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01e      	beq.n	80020e6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020a8:	f7ff fdb0 	bl	8001c0c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020ac:	f7ff f81c 	bl	80010e8 <HAL_GetTick>
 80020b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b4:	f7ff f818 	bl	80010e8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e2f5      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80020c6:	f7ff fdbf 	bl	8001c48 <LL_RCC_MSI_IsReady>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f1      	beq.n	80020b4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fdc8 	bl	8001c6a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fdec 	bl	8001cbc <LL_RCC_MSI_SetCalibTrimming>
 80020e4:	e015      	b.n	8002112 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020e6:	f7ff fda0 	bl	8001c2a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020ea:	f7fe fffd 	bl	80010e8 <HAL_GetTick>
 80020ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020f2:	f7fe fff9 	bl	80010e8 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e2d6      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002104:	f7ff fda0 	bl	8001c48 <LL_RCC_MSI_IsReady>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f1      	bne.n	80020f2 <HAL_RCC_OscConfig+0x11a>
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002110:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d047      	beq.n	80021ae <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211e:	f7ff fdf6 	bl	8001d0e <LL_RCC_GetSysClkSource>
 8002122:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002124:	f7ff feef 	bl	8001f06 <LL_RCC_PLL_GetMainSource>
 8002128:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	2b08      	cmp	r3, #8
 800212e:	d005      	beq.n	800213c <HAL_RCC_OscConfig+0x164>
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d108      	bne.n	8002148 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d105      	bne.n	8002148 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d134      	bne.n	80021ae <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e2b4      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002150:	d102      	bne.n	8002158 <HAL_RCC_OscConfig+0x180>
 8002152:	f7ff fbdd 	bl	8001910 <LL_RCC_HSE_Enable>
 8002156:	e001      	b.n	800215c <HAL_RCC_OscConfig+0x184>
 8002158:	f7ff fbe9 	bl	800192e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d012      	beq.n	800218a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe ffc0 	bl	80010e8 <HAL_GetTick>
 8002168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216c:	f7fe ffbc 	bl	80010e8 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e299      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800217e:	f7ff fbe5 	bl	800194c <LL_RCC_HSE_IsReady>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f1      	beq.n	800216c <HAL_RCC_OscConfig+0x194>
 8002188:	e011      	b.n	80021ae <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7fe ffad 	bl	80010e8 <HAL_GetTick>
 800218e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002192:	f7fe ffa9 	bl	80010e8 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b64      	cmp	r3, #100	; 0x64
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e286      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80021a4:	f7ff fbd2 	bl	800194c <LL_RCC_HSE_IsReady>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f1      	bne.n	8002192 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d04c      	beq.n	8002254 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ba:	f7ff fda8 	bl	8001d0e <LL_RCC_GetSysClkSource>
 80021be:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c0:	f7ff fea1 	bl	8001f06 <LL_RCC_PLL_GetMainSource>
 80021c4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x200>
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d10e      	bne.n	80021f0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d10b      	bne.n	80021f0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e266      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fbf1 	bl	80019d0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021ee:	e031      	b.n	8002254 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d019      	beq.n	800222c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f8:	f7ff fbba 	bl	8001970 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe ff74 	bl	80010e8 <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002204:	f7fe ff70 	bl	80010e8 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e24d      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002216:	f7ff fbc9 	bl	80019ac <LL_RCC_HSI_IsReady>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f1      	beq.n	8002204 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fbd3 	bl	80019d0 <LL_RCC_HSI_SetCalibTrimming>
 800222a:	e013      	b.n	8002254 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222c:	f7ff fbaf 	bl	800198e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe ff5a 	bl	80010e8 <HAL_GetTick>
 8002234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002238:	f7fe ff56 	bl	80010e8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e233      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800224a:	f7ff fbaf 	bl	80019ac <LL_RCC_HSI_IsReady>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f1      	bne.n	8002238 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80a3 	beq.w	80023b4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d076      	beq.n	8002364 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	2b00      	cmp	r3, #0
 8002280:	d046      	beq.n	8002310 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002282:	f7ff fc66 	bl	8001b52 <LL_RCC_LSI1_IsReady>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d113      	bne.n	80022b4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800228c:	f7ff fc3f 	bl	8001b0e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002290:	f7fe ff2a 	bl	80010e8 <HAL_GetTick>
 8002294:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002298:	f7fe ff26 	bl	80010e8 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e203      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80022aa:	f7ff fc52 	bl	8001b52 <LL_RCC_LSI1_IsReady>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f1      	beq.n	8002298 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80022b4:	f7ff fc5f 	bl	8001b76 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe ff16 	bl	80010e8 <HAL_GetTick>
 80022bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022c0:	f7fe ff12 	bl	80010e8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1ef      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80022d2:	f7ff fc72 	bl	8001bba <LL_RCC_LSI2_IsReady>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f1      	beq.n	80022c0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fc7c 	bl	8001bde <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80022e6:	f7ff fc23 	bl	8001b30 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7fe fefd 	bl	80010e8 <HAL_GetTick>
 80022ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022f2:	f7fe fef9 	bl	80010e8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1d6      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002304:	f7ff fc25 	bl	8001b52 <LL_RCC_LSI1_IsReady>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f1      	bne.n	80022f2 <HAL_RCC_OscConfig+0x31a>
 800230e:	e051      	b.n	80023b4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002310:	f7ff fbfd 	bl	8001b0e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe fee8 	bl	80010e8 <HAL_GetTick>
 8002318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800231a:	e00c      	b.n	8002336 <HAL_RCC_OscConfig+0x35e>
 800231c:	20000208 	.word	0x20000208
 8002320:	2000020c 	.word	0x2000020c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002324:	f7fe fee0 	bl	80010e8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1bd      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002336:	f7ff fc0c 	bl	8001b52 <LL_RCC_LSI1_IsReady>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f1      	beq.n	8002324 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002340:	f7ff fc2a 	bl	8001b98 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002346:	f7fe fecf 	bl	80010e8 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b03      	cmp	r3, #3
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e1ac      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002358:	f7ff fc2f 	bl	8001bba <LL_RCC_LSI2_IsReady>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f1      	bne.n	8002346 <HAL_RCC_OscConfig+0x36e>
 8002362:	e027      	b.n	80023b4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002364:	f7ff fc18 	bl	8001b98 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7fe febe 	bl	80010e8 <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002370:	f7fe feba 	bl	80010e8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b03      	cmp	r3, #3
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e197      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002382:	f7ff fc1a 	bl	8001bba <LL_RCC_LSI2_IsReady>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f1      	bne.n	8002370 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800238c:	f7ff fbd0 	bl	8001b30 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002390:	f7fe feaa 	bl	80010e8 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002398:	f7fe fea6 	bl	80010e8 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e183      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80023aa:	f7ff fbd2 	bl	8001b52 <LL_RCC_LSI1_IsReady>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f1      	bne.n	8002398 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d05b      	beq.n	8002478 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c0:	4ba7      	ldr	r3, [pc, #668]	; (8002660 <HAL_RCC_OscConfig+0x688>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d114      	bne.n	80023f6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80023cc:	f7ff fa70 	bl	80018b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d0:	f7fe fe8a 	bl	80010e8 <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7fe fe86 	bl	80010e8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e163      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ea:	4b9d      	ldr	r3, [pc, #628]	; (8002660 <HAL_RCC_OscConfig+0x688>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d102      	bne.n	8002404 <HAL_RCC_OscConfig+0x42c>
 80023fe:	f7ff fb30 	bl	8001a62 <LL_RCC_LSE_Enable>
 8002402:	e00c      	b.n	800241e <HAL_RCC_OscConfig+0x446>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d104      	bne.n	8002416 <HAL_RCC_OscConfig+0x43e>
 800240c:	f7ff fb4b 	bl	8001aa6 <LL_RCC_LSE_EnableBypass>
 8002410:	f7ff fb27 	bl	8001a62 <LL_RCC_LSE_Enable>
 8002414:	e003      	b.n	800241e <HAL_RCC_OscConfig+0x446>
 8002416:	f7ff fb35 	bl	8001a84 <LL_RCC_LSE_Disable>
 800241a:	f7ff fb55 	bl	8001ac8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d014      	beq.n	8002450 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7fe fe5f 	bl	80010e8 <HAL_GetTick>
 800242a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe fe5b 	bl	80010e8 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e136      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002444:	f7ff fb51 	bl	8001aea <LL_RCC_LSE_IsReady>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0ef      	beq.n	800242e <HAL_RCC_OscConfig+0x456>
 800244e:	e013      	b.n	8002478 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7fe fe4a 	bl	80010e8 <HAL_GetTick>
 8002454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002456:	e00a      	b.n	800246e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002458:	f7fe fe46 	bl	80010e8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e121      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800246e:	f7ff fb3c 	bl	8001aea <LL_RCC_LSE_IsReady>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ef      	bne.n	8002458 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02c      	beq.n	80024de <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	d014      	beq.n	80024b6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800248c:	f7ff fab5 	bl	80019fa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002490:	f7fe fe2a 	bl	80010e8 <HAL_GetTick>
 8002494:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002498:	f7fe fe26 	bl	80010e8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e103      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80024aa:	f7ff fac8 	bl	8001a3e <LL_RCC_HSI48_IsReady>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f1      	beq.n	8002498 <HAL_RCC_OscConfig+0x4c0>
 80024b4:	e013      	b.n	80024de <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024b6:	f7ff fab1 	bl	8001a1c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ba:	f7fe fe15 	bl	80010e8 <HAL_GetTick>
 80024be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c2:	f7fe fe11 	bl	80010e8 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0ee      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80024d4:	f7ff fab3 	bl	8001a3e <LL_RCC_HSI48_IsReady>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f1      	bne.n	80024c2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80e4 	beq.w	80026b0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e8:	f7ff fc11 	bl	8001d0e <LL_RCC_GetSysClkSource>
 80024ec:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	f040 80b4 	bne.w	8002668 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0203 	and.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	429a      	cmp	r2, r3
 800250c:	d123      	bne.n	8002556 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002518:	429a      	cmp	r2, r3
 800251a:	d11c      	bne.n	8002556 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002528:	429a      	cmp	r2, r3
 800252a:	d114      	bne.n	8002556 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d10d      	bne.n	8002556 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d05d      	beq.n	8002612 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b0c      	cmp	r3, #12
 800255a:	d058      	beq.n	800260e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0a1      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800256e:	f7ff fc84 	bl	8001e7a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002572:	f7fe fdb9 	bl	80010e8 <HAL_GetTick>
 8002576:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe fdb5 	bl	80010e8 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e092      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ef      	bne.n	800257a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	4b30      	ldr	r3, [pc, #192]	; (8002664 <HAL_RCC_OscConfig+0x68c>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025ac:	4311      	orrs	r1, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025b2:	0212      	lsls	r2, r2, #8
 80025b4:	4311      	orrs	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ba:	4311      	orrs	r1, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025c6:	430a      	orrs	r2, r1
 80025c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025d0:	f7ff fc44 	bl	8001e5c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025e4:	f7fe fd80 	bl	80010e8 <HAL_GetTick>
 80025e8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fd7c 	bl	80010e8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e059      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ef      	beq.n	80025ec <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800260c:	e050      	b.n	80026b0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e04f      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d147      	bne.n	80026b0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002620:	f7ff fc1c 	bl	8001e5c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002632:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002634:	f7fe fd58 	bl	80010e8 <HAL_GetTick>
 8002638:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fd54 	bl	80010e8 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e031      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ef      	beq.n	800263c <HAL_RCC_OscConfig+0x664>
 800265c:	e028      	b.n	80026b0 <HAL_RCC_OscConfig+0x6d8>
 800265e:	bf00      	nop
 8002660:	58000400 	.word	0x58000400
 8002664:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d01e      	beq.n	80026ac <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266e:	f7ff fc04 	bl	8001e7a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002672:	f7fe fd39 	bl	80010e8 <HAL_GetTick>
 8002676:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7fe fd35 	bl	80010e8 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e012      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1ef      	bne.n	800267a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCC_OscConfig+0x6e4>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	60cb      	str	r3, [r1, #12]
 80026aa:	e001      	b.n	80026b0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3734      	adds	r7, #52	; 0x34
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd90      	pop	{r4, r7, pc}
 80026ba:	bf00      	nop
 80026bc:	eefefffc 	.word	0xeefefffc

080026c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e12d      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d4:	4b98      	ldr	r3, [pc, #608]	; (8002938 <HAL_RCC_ClockConfig+0x278>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d91b      	bls.n	800271a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b95      	ldr	r3, [pc, #596]	; (8002938 <HAL_RCC_ClockConfig+0x278>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4993      	ldr	r1, [pc, #588]	; (8002938 <HAL_RCC_ClockConfig+0x278>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f2:	f7fe fcf9 	bl	80010e8 <HAL_GetTick>
 80026f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f8:	e008      	b.n	800270c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026fa:	f7fe fcf5 	bl	80010e8 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e111      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270c:	4b8a      	ldr	r3, [pc, #552]	; (8002938 <HAL_RCC_ClockConfig+0x278>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d1ef      	bne.n	80026fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d016      	beq.n	8002754 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fafb 	bl	8001d26 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002730:	f7fe fcda 	bl	80010e8 <HAL_GetTick>
 8002734:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002738:	f7fe fcd6 	bl	80010e8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0f2      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800274a:	f7ff fbe8 	bl	8001f1e <LL_RCC_IsActiveFlag_HPRE>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f1      	beq.n	8002738 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b00      	cmp	r3, #0
 800275e:	d016      	beq.n	800278e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff faf2 	bl	8001d4e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800276a:	f7fe fcbd 	bl	80010e8 <HAL_GetTick>
 800276e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002772:	f7fe fcb9 	bl	80010e8 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e0d5      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002784:	f7ff fbdd 	bl	8001f42 <LL_RCC_IsActiveFlag_C2HPRE>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f1      	beq.n	8002772 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	d016      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff faeb 	bl	8001d7a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027a4:	f7fe fca0 	bl	80010e8 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027ac:	f7fe fc9c 	bl	80010e8 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0b8      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027be:	f7ff fbd3 	bl	8001f68 <LL_RCC_IsActiveFlag_SHDHPRE>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f1      	beq.n	80027ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d016      	beq.n	8002802 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fae5 	bl	8001da8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027de:	f7fe fc83 	bl	80010e8 <HAL_GetTick>
 80027e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027e6:	f7fe fc7f 	bl	80010e8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e09b      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027f8:	f7ff fbc9 	bl	8001f8e <LL_RCC_IsActiveFlag_PPRE1>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f1      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d017      	beq.n	800283e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fadb 	bl	8001dd0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800281a:	f7fe fc65 	bl	80010e8 <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002822:	f7fe fc61 	bl	80010e8 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e07d      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002834:	f7ff fbbd 	bl	8001fb2 <LL_RCC_IsActiveFlag_PPRE2>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f1      	beq.n	8002822 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d043      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d106      	bne.n	8002860 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002852:	f7ff f87b 	bl	800194c <LL_RCC_HSE_IsReady>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d11e      	bne.n	800289a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e067      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d106      	bne.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002868:	f7ff fb16 	bl	8001e98 <LL_RCC_PLL_IsReady>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d113      	bne.n	800289a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e05c      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800287e:	f7ff f9e3 	bl	8001c48 <LL_RCC_MSI_IsReady>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d108      	bne.n	800289a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e051      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800288c:	f7ff f88e 	bl	80019ac <LL_RCC_HSI_IsReady>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e04a      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fa21 	bl	8001ce6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a4:	f7fe fc20 	bl	80010e8 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ac:	f7fe fc1c 	bl	80010e8 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e036      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c2:	f7ff fa24 	bl	8001d0e <LL_RCC_GetSysClkSource>
 80028c6:	4602      	mov	r2, r0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d1ec      	bne.n	80028ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCC_ClockConfig+0x278>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d21b      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e0:	4b15      	ldr	r3, [pc, #84]	; (8002938 <HAL_RCC_ClockConfig+0x278>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 0207 	bic.w	r2, r3, #7
 80028e8:	4913      	ldr	r1, [pc, #76]	; (8002938 <HAL_RCC_ClockConfig+0x278>)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f0:	f7fe fbfa 	bl	80010e8 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	e008      	b.n	800290a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028f8:	f7fe fbf6 	bl	80010e8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e012      	b.n	8002930 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_ClockConfig+0x278>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d1ef      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002918:	f000 f87e 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 800291c:	4603      	mov	r3, r0
 800291e:	4a07      	ldr	r2, [pc, #28]	; (800293c <HAL_RCC_ClockConfig+0x27c>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002922:	f7fe fbed 	bl	8001100 <HAL_GetTickPrio>
 8002926:	4603      	mov	r3, r0
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fb8f 	bl	800104c <HAL_InitTick>
 800292e:	4603      	mov	r3, r0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	58004000 	.word	0x58004000
 800293c:	20000208 	.word	0x20000208

08002940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002946:	f7ff f9e2 	bl	8001d0e <LL_RCC_GetSysClkSource>
 800294a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002952:	f7ff f99e 	bl	8001c92 <LL_RCC_MSI_GetRange>
 8002956:	4603      	mov	r3, r0
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	4a2b      	ldr	r2, [pc, #172]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e04b      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b04      	cmp	r3, #4
 800296c:	d102      	bne.n	8002974 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800296e:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	e045      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b08      	cmp	r3, #8
 8002978:	d10a      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800297a:	f7fe ffb7 	bl	80018ec <LL_RCC_HSE_IsEnabledDiv2>
 800297e:	4603      	mov	r3, r0
 8002980:	2b01      	cmp	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	e03a      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xd4>)
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e037      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002990:	f7ff fab9 	bl	8001f06 <LL_RCC_PLL_GetMainSource>
 8002994:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d003      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x64>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d003      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0x6a>
 80029a2:	e00d      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029a6:	60bb      	str	r3, [r7, #8]
        break;
 80029a8:	e015      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029aa:	f7fe ff9f 	bl	80018ec <LL_RCC_HSE_IsEnabledDiv2>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d102      	bne.n	80029ba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029b6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80029b8:	e00d      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029bc:	60bb      	str	r3, [r7, #8]
        break;
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80029c0:	f7ff f967 	bl	8001c92 <LL_RCC_MSI_GetRange>
 80029c4:	4603      	mov	r3, r0
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xcc>)
 80029ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d2:	60bb      	str	r3, [r7, #8]
        break;
 80029d4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80029d6:	f7ff fa71 	bl	8001ebc <LL_RCC_PLL_GetN>
 80029da:	4602      	mov	r2, r0
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	fb03 f402 	mul.w	r4, r3, r2
 80029e2:	f7ff fa84 	bl	8001eee <LL_RCC_PLL_GetDivider>
 80029e6:	4603      	mov	r3, r0
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	3301      	adds	r3, #1
 80029ec:	fbb4 f4f3 	udiv	r4, r4, r3
 80029f0:	f7ff fa71 	bl	8001ed6 <LL_RCC_PLL_GetR>
 80029f4:	4603      	mov	r3, r0
 80029f6:	0f5b      	lsrs	r3, r3, #29
 80029f8:	3301      	adds	r3, #1
 80029fa:	fbb4 f3f3 	udiv	r3, r4, r3
 80029fe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a00:	68fb      	ldr	r3, [r7, #12]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd90      	pop	{r4, r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	08004158 	.word	0x08004158
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	01e84800 	.word	0x01e84800

08002a18 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b598      	push	{r3, r4, r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002a1c:	f7ff ff90 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 8002a20:	4604      	mov	r4, r0
 8002a22:	f7ff f9e9 	bl	8001df8 <LL_RCC_GetAHBPrescaler>
 8002a26:	4603      	mov	r3, r0
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	4a03      	ldr	r2, [pc, #12]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x24>)
 8002a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a34:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd98      	pop	{r3, r4, r7, pc}
 8002a3c:	080040f8 	.word	0x080040f8

08002a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a40:	b598      	push	{r3, r4, r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a44:	f7ff ffe8 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a48:	4604      	mov	r4, r0
 8002a4a:	f7ff f9ef 	bl	8001e2c <LL_RCC_GetAPB1Prescaler>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd98      	pop	{r3, r4, r7, pc}
 8002a68:	08004138 	.word	0x08004138

08002a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a6c:	b598      	push	{r3, r4, r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a70:	f7ff ffd2 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a74:	4604      	mov	r4, r0
 8002a76:	f7ff f9e5 	bl	8001e44 <LL_RCC_GetAPB2Prescaler>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	0adb      	lsrs	r3, r3, #11
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd98      	pop	{r3, r4, r7, pc}
 8002a94:	08004138 	.word	0x08004138

08002a98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2bb0      	cmp	r3, #176	; 0xb0
 8002aa4:	d903      	bls.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e007      	b.n	8002abe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	4a11      	ldr	r2, [pc, #68]	; (8002afc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002abe:	f7ff f9a7 	bl	8001e10 <LL_RCC_GetAHB4Prescaler>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	0c9c      	lsrs	r4, r3, #18
 8002ae2:	f7fe fef5 	bl	80018d0 <HAL_PWREx_GetVoltageRange>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4620      	mov	r0, r4
 8002aec:	f000 f80c 	bl	8002b08 <RCC_SetFlashLatency>
 8002af0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd90      	pop	{r4, r7, pc}
 8002afa:	bf00      	nop
 8002afc:	08004158 	.word	0x08004158
 8002b00:	080040f8 	.word	0x080040f8
 8002b04:	431bde83 	.word	0x431bde83

08002b08 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b093      	sub	sp, #76	; 0x4c
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b12:	4b37      	ldr	r3, [pc, #220]	; (8002bf0 <RCC_SetFlashLatency+0xe8>)
 8002b14:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b1e:	4a35      	ldr	r2, [pc, #212]	; (8002bf4 <RCC_SetFlashLatency+0xec>)
 8002b20:	f107 031c 	add.w	r3, r7, #28
 8002b24:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b2a:	4b33      	ldr	r3, [pc, #204]	; (8002bf8 <RCC_SetFlashLatency+0xf0>)
 8002b2c:	f107 040c 	add.w	r4, r7, #12
 8002b30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b36:	2300      	movs	r3, #0
 8002b38:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b40:	d11a      	bne.n	8002b78 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b42:	2300      	movs	r3, #0
 8002b44:	643b      	str	r3, [r7, #64]	; 0x40
 8002b46:	e013      	b.n	8002b70 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	3348      	adds	r3, #72	; 0x48
 8002b4e:	443b      	add	r3, r7
 8002b50:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d807      	bhi.n	8002b6a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	3348      	adds	r3, #72	; 0x48
 8002b60:	443b      	add	r3, r7
 8002b62:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b66:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b68:	e020      	b.n	8002bac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d9e8      	bls.n	8002b48 <RCC_SetFlashLatency+0x40>
 8002b76:	e019      	b.n	8002bac <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b7c:	e013      	b.n	8002ba6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	3348      	adds	r3, #72	; 0x48
 8002b84:	443b      	add	r3, r7
 8002b86:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d807      	bhi.n	8002ba0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	3348      	adds	r3, #72	; 0x48
 8002b96:	443b      	add	r3, r7
 8002b98:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b9c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b9e:	e005      	b.n	8002bac <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d9e8      	bls.n	8002b7e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002bac:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <RCC_SetFlashLatency+0xf4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f023 0207 	bic.w	r2, r3, #7
 8002bb4:	4911      	ldr	r1, [pc, #68]	; (8002bfc <RCC_SetFlashLatency+0xf4>)
 8002bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bbc:	f7fe fa94 	bl	80010e8 <HAL_GetTick>
 8002bc0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bc2:	e008      	b.n	8002bd6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bc4:	f7fe fa90 	bl	80010e8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e007      	b.n	8002be6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <RCC_SetFlashLatency+0xf4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d1ef      	bne.n	8002bc4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	374c      	adds	r7, #76	; 0x4c
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd90      	pop	{r4, r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	080040cc 	.word	0x080040cc
 8002bf4:	080040dc 	.word	0x080040dc
 8002bf8:	080040e8 	.word	0x080040e8
 8002bfc:	58004000 	.word	0x58004000

08002c00 <LL_RCC_LSE_IsEnabled>:
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <LL_RCC_LSE_IsEnabled+0x18>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <LL_RCC_LSE_IsEnabled+0x1a>
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_RCC_LSE_IsReady>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d101      	bne.n	8002c3c <LL_RCC_LSE_IsReady+0x18>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <LL_RCC_LSE_IsReady+0x1a>
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <LL_RCC_MSI_EnablePLLMode>:
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_RCC_SetRFWKPClockSource>:
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_SetSMPSClockSource>:
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	f023 0203 	bic.w	r2, r3, #3
 8002ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_SetSMPSPrescaler>:
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_RCC_SetUSARTClockSource>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_RCC_SetLPUARTClockSource>:
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_RCC_SetI2CClockSource>:
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d52:	43db      	mvns	r3, r3
 8002d54:	401a      	ands	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_RCC_SetLPTIMClockSource>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	0c1b      	lsrs	r3, r3, #16
 8002d88:	041b      	lsls	r3, r3, #16
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_RCC_SetSAIClockSource>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_RCC_SetRNGClockSource>:
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_RCC_SetCLK48ClockSource>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e10:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_RCC_SetUSBClockSource>:
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ffe3 	bl	8002e00 <LL_RCC_SetCLK48ClockSource>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <LL_RCC_SetADCClockSource>:
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_RCC_SetRTCClockSource>:
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <LL_RCC_GetRTCClockSource>:
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_RCC_ForceBackupDomainReset>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_RCC_PLLSAI1_Enable>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_RCC_PLLSAI1_Disable>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f28:	6013      	str	r3, [r2, #0]
}
 8002f2a:	bf00      	nop
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_RCC_PLLSAI1_IsReady>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f46:	d101      	bne.n	8002f4c <LL_RCC_PLLSAI1_IsReady+0x18>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002f60:	2300      	movs	r3, #0
 8002f62:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f64:	2300      	movs	r3, #0
 8002f66:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d034      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f7c:	d021      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002f7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f82:	d81b      	bhi.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f88:	d01d      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002f8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f8e:	d815      	bhi.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f98:	d110      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002faa:	e00d      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 f94d 	bl	8003250 <RCCEx_PLLSAI1_ConfigNP>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fba:	e005      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]
        break;
 8002fc0:	e002      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fc2:	bf00      	nop
 8002fc4:	e000      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc8:	7ffb      	ldrb	r3, [r7, #31]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d105      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fee8 	bl	8002da8 <LL_RCC_SetSAIClockSource>
 8002fd8:	e001      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
 8002fdc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d046      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002fea:	f7ff ff56 	bl	8002e9a <LL_RCC_GetRTCClockSource>
 8002fee:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d03c      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ffa:	f7fe fc59 	bl	80018b0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff30 	bl	8002e6e <LL_RCC_SetRTCClockSource>
 800300e:	e02e      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800301a:	f7ff ff4b 	bl	8002eb4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800301e:	f7ff ff5a 	bl	8002ed6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800303a:	f7ff fde1 	bl	8002c00 <LL_RCC_LSE_IsEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	2b01      	cmp	r3, #1
 8003042:	d114      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003044:	f7fe f850 	bl	80010e8 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800304a:	e00b      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fe f84c 	bl	80010e8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	; 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d902      	bls.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	77fb      	strb	r3, [r7, #31]
              break;
 8003062:	e004      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003064:	f7ff fdde 	bl	8002c24 <LL_RCC_LSE_IsReady>
 8003068:	4603      	mov	r3, r0
 800306a:	2b01      	cmp	r3, #1
 800306c:	d1ee      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800306e:	7ffb      	ldrb	r3, [r7, #31]
 8003070:	77bb      	strb	r3, [r7, #30]
 8003072:	e001      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003074:	7ffb      	ldrb	r3, [r7, #31]
 8003076:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fe2a 	bl	8002ce2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fe35 	bl	8002d0e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fe5d 	bl	8002d74 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fe52 	bl	8002d74 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fe2a 	bl	8002d3a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fe1f 	bl	8002d3a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d022      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fe8d 	bl	8002e2c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800311a:	d107      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003134:	d10b      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3304      	adds	r3, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f8e3 	bl	8003306 <RCCEx_PLLSAI1_ConfigNQ>
 8003140:	4603      	mov	r3, r0
 8003142:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003144:	7ffb      	ldrb	r3, [r7, #31]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800314a:	7ffb      	ldrb	r3, [r7, #31]
 800314c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02b      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003162:	d008      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800316c:	d003      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	2b00      	cmp	r3, #0
 8003174:	d105      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fe2a 	bl	8002dd4 <LL_RCC_SetRNGClockSource>
 8003180:	e00a      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	2000      	movs	r0, #0
 800318e:	f7ff fe21 	bl	8002dd4 <LL_RCC_SetRNGClockSource>
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7ff fe34 	bl	8002e00 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80031a0:	d107      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d022      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fe3d 	bl	8002e42 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d0:	d107      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031ea:	d10b      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3304      	adds	r3, #4
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 f8e3 	bl	80033bc <RCCEx_PLLSAI1_ConfigNR>
 80031f6:	4603      	mov	r3, r0
 80031f8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80031fa:	7ffb      	ldrb	r3, [r7, #31]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003200:	7ffb      	ldrb	r3, [r7, #31]
 8003202:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fd26 	bl	8002c66 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fd45 	bl	8002cba <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fd2c 	bl	8002c92 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800323a:	7fbb      	ldrb	r3, [r7, #30]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3720      	adds	r7, #32
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003248:	f7ff fcfe 	bl	8002c48 <LL_RCC_MSI_EnablePLLMode>
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}

08003250 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800325c:	f7ff fe5b 	bl	8002f16 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003260:	f7fd ff42 	bl	80010e8 <HAL_GetTick>
 8003264:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003266:	e009      	b.n	800327c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003268:	f7fd ff3e 	bl	80010e8 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d902      	bls.n	800327c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	73fb      	strb	r3, [r7, #15]
      break;
 800327a:	e004      	b.n	8003286 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800327c:	f7ff fe5a 	bl	8002f34 <LL_RCC_PLLSAI1_IsReady>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d137      	bne.n	80032fc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800328c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032a0:	4313      	orrs	r3, r2
 80032a2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b6:	4313      	orrs	r3, r2
 80032b8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032ba:	f7ff fe1d 	bl	8002ef8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032be:	f7fd ff13 	bl	80010e8 <HAL_GetTick>
 80032c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032c4:	e009      	b.n	80032da <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032c6:	f7fd ff0f 	bl	80010e8 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d902      	bls.n	80032da <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	73fb      	strb	r3, [r7, #15]
        break;
 80032d8:	e004      	b.n	80032e4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032da:	f7ff fe2b 	bl	8002f34 <LL_RCC_PLLSAI1_IsReady>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d1f0      	bne.n	80032c6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d108      	bne.n	80032fc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f8:	4313      	orrs	r3, r2
 80032fa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003312:	f7ff fe00 	bl	8002f16 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003316:	f7fd fee7 	bl	80010e8 <HAL_GetTick>
 800331a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800331c:	e009      	b.n	8003332 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800331e:	f7fd fee3 	bl	80010e8 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d902      	bls.n	8003332 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	e004      	b.n	800333c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003332:	f7ff fdff 	bl	8002f34 <LL_RCC_PLLSAI1_IsReady>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d137      	bne.n	80033b2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003356:	4313      	orrs	r3, r2
 8003358:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800335a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800336c:	4313      	orrs	r3, r2
 800336e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003370:	f7ff fdc2 	bl	8002ef8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003374:	f7fd feb8 	bl	80010e8 <HAL_GetTick>
 8003378:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800337a:	e009      	b.n	8003390 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800337c:	f7fd feb4 	bl	80010e8 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d902      	bls.n	8003390 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	73fb      	strb	r3, [r7, #15]
        break;
 800338e:	e004      	b.n	800339a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003390:	f7ff fdd0 	bl	8002f34 <LL_RCC_PLLSAI1_IsReady>
 8003394:	4603      	mov	r3, r0
 8003396:	2b01      	cmp	r3, #1
 8003398:	d1f0      	bne.n	800337c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d108      	bne.n	80033b2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ae:	4313      	orrs	r3, r2
 80033b0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033c8:	f7ff fda5 	bl	8002f16 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033cc:	f7fd fe8c 	bl	80010e8 <HAL_GetTick>
 80033d0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033d2:	e009      	b.n	80033e8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d4:	f7fd fe88 	bl	80010e8 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d902      	bls.n	80033e8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	73fb      	strb	r3, [r7, #15]
      break;
 80033e6:	e004      	b.n	80033f2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033e8:	f7ff fda4 	bl	8002f34 <LL_RCC_PLLSAI1_IsReady>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d137      	bne.n	8003468 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800340c:	4313      	orrs	r3, r2
 800340e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003422:	4313      	orrs	r3, r2
 8003424:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003426:	f7ff fd67 	bl	8002ef8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342a:	f7fd fe5d 	bl	80010e8 <HAL_GetTick>
 800342e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003430:	e009      	b.n	8003446 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003432:	f7fd fe59 	bl	80010e8 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d902      	bls.n	8003446 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	73fb      	strb	r3, [r7, #15]
        break;
 8003444:	e004      	b.n	8003450 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003446:	f7ff fd75 	bl	8002f34 <LL_RCC_PLLSAI1_IsReady>
 800344a:	4603      	mov	r3, r0
 800344c:	2b01      	cmp	r3, #1
 800344e:	d1f0      	bne.n	8003432 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003464:	4313      	orrs	r3, r2
 8003466:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <LL_RCC_GetUSARTClockSource>:
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800347a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4013      	ands	r3, r2
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_RCC_GetLPUARTClockSource>:
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800349a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800349e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4013      	ands	r3, r2
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e042      	b.n	800354a <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fc30 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fa51 	bl	80039a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f826 	bl	8003554 <UART_SetConfig>
 8003508:	4603      	mov	r3, r0
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e01b      	b.n	800354a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003520:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003530:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fad0 	bl	8003ae8 <UART_CheckIdleState>
 8003548:	4603      	mov	r3, r0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003558:	b08c      	sub	sp, #48	; 0x30
 800355a:	af00      	add	r7, sp, #0
 800355c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	431a      	orrs	r2, r3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	431a      	orrs	r2, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	4313      	orrs	r3, r2
 800357a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4baf      	ldr	r3, [pc, #700]	; (8003840 <UART_SetConfig+0x2ec>)
 8003584:	4013      	ands	r3, r2
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800358c:	430b      	orrs	r3, r1
 800358e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4aa4      	ldr	r2, [pc, #656]	; (8003844 <UART_SetConfig+0x2f0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035bc:	4313      	orrs	r3, r2
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80035ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	f023 010f 	bic.w	r1, r3, #15
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a95      	ldr	r2, [pc, #596]	; (8003848 <UART_SetConfig+0x2f4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d125      	bne.n	8003644 <UART_SetConfig+0xf0>
 80035f8:	2003      	movs	r0, #3
 80035fa:	f7ff ff3a 	bl	8003472 <LL_RCC_GetUSARTClockSource>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b03      	cmp	r3, #3
 8003602:	d81b      	bhi.n	800363c <UART_SetConfig+0xe8>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <UART_SetConfig+0xb8>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362d 	.word	0x0800362d
 8003614:	08003625 	.word	0x08003625
 8003618:	08003635 	.word	0x08003635
 800361c:	2301      	movs	r3, #1
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003622:	e042      	b.n	80036aa <UART_SetConfig+0x156>
 8003624:	2302      	movs	r3, #2
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362a:	e03e      	b.n	80036aa <UART_SetConfig+0x156>
 800362c:	2304      	movs	r3, #4
 800362e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003632:	e03a      	b.n	80036aa <UART_SetConfig+0x156>
 8003634:	2308      	movs	r3, #8
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363a:	e036      	b.n	80036aa <UART_SetConfig+0x156>
 800363c:	2310      	movs	r3, #16
 800363e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003642:	e032      	b.n	80036aa <UART_SetConfig+0x156>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a7e      	ldr	r2, [pc, #504]	; (8003844 <UART_SetConfig+0x2f0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d12a      	bne.n	80036a4 <UART_SetConfig+0x150>
 800364e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003652:	f7ff ff1e 	bl	8003492 <LL_RCC_GetLPUARTClockSource>
 8003656:	4603      	mov	r3, r0
 8003658:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800365c:	d01a      	beq.n	8003694 <UART_SetConfig+0x140>
 800365e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003662:	d81b      	bhi.n	800369c <UART_SetConfig+0x148>
 8003664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003668:	d00c      	beq.n	8003684 <UART_SetConfig+0x130>
 800366a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366e:	d815      	bhi.n	800369c <UART_SetConfig+0x148>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <UART_SetConfig+0x128>
 8003674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003678:	d008      	beq.n	800368c <UART_SetConfig+0x138>
 800367a:	e00f      	b.n	800369c <UART_SetConfig+0x148>
 800367c:	2300      	movs	r3, #0
 800367e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003682:	e012      	b.n	80036aa <UART_SetConfig+0x156>
 8003684:	2302      	movs	r3, #2
 8003686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800368a:	e00e      	b.n	80036aa <UART_SetConfig+0x156>
 800368c:	2304      	movs	r3, #4
 800368e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003692:	e00a      	b.n	80036aa <UART_SetConfig+0x156>
 8003694:	2308      	movs	r3, #8
 8003696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800369a:	e006      	b.n	80036aa <UART_SetConfig+0x156>
 800369c:	2310      	movs	r3, #16
 800369e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036a2:	e002      	b.n	80036aa <UART_SetConfig+0x156>
 80036a4:	2310      	movs	r3, #16
 80036a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a65      	ldr	r2, [pc, #404]	; (8003844 <UART_SetConfig+0x2f0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	f040 8097 	bne.w	80037e4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d823      	bhi.n	8003706 <UART_SetConfig+0x1b2>
 80036be:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <UART_SetConfig+0x170>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	080036e9 	.word	0x080036e9
 80036c8:	08003707 	.word	0x08003707
 80036cc:	080036f1 	.word	0x080036f1
 80036d0:	08003707 	.word	0x08003707
 80036d4:	080036f7 	.word	0x080036f7
 80036d8:	08003707 	.word	0x08003707
 80036dc:	08003707 	.word	0x08003707
 80036e0:	08003707 	.word	0x08003707
 80036e4:	080036ff 	.word	0x080036ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e8:	f7ff f9aa 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 80036ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036ee:	e010      	b.n	8003712 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f0:	4b56      	ldr	r3, [pc, #344]	; (800384c <UART_SetConfig+0x2f8>)
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036f4:	e00d      	b.n	8003712 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f6:	f7ff f923 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80036fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036fc:	e009      	b.n	8003712 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003704:	e005      	b.n	8003712 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003710:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 812b 	beq.w	8003970 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	4a4c      	ldr	r2, [pc, #304]	; (8003850 <UART_SetConfig+0x2fc>)
 8003720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003724:	461a      	mov	r2, r3
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	fbb3 f3f2 	udiv	r3, r3, r2
 800372c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	429a      	cmp	r2, r3
 800373c:	d305      	bcc.n	800374a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	429a      	cmp	r2, r3
 8003748:	d903      	bls.n	8003752 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003750:	e10e      	b.n	8003970 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	2200      	movs	r2, #0
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	60fa      	str	r2, [r7, #12]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	4a3c      	ldr	r2, [pc, #240]	; (8003850 <UART_SetConfig+0x2fc>)
 8003760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003764:	b29b      	uxth	r3, r3
 8003766:	2200      	movs	r2, #0
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003770:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003774:	f7fc fd02 	bl	800017c <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	020b      	lsls	r3, r1, #8
 800378a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800378e:	0202      	lsls	r2, r0, #8
 8003790:	6979      	ldr	r1, [r7, #20]
 8003792:	6849      	ldr	r1, [r1, #4]
 8003794:	0849      	lsrs	r1, r1, #1
 8003796:	2000      	movs	r0, #0
 8003798:	460c      	mov	r4, r1
 800379a:	4605      	mov	r5, r0
 800379c:	eb12 0804 	adds.w	r8, r2, r4
 80037a0:	eb43 0905 	adc.w	r9, r3, r5
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	469a      	mov	sl, r3
 80037ac:	4693      	mov	fp, r2
 80037ae:	4652      	mov	r2, sl
 80037b0:	465b      	mov	r3, fp
 80037b2:	4640      	mov	r0, r8
 80037b4:	4649      	mov	r1, r9
 80037b6:	f7fc fce1 	bl	800017c <__aeabi_uldivmod>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4613      	mov	r3, r2
 80037c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037c8:	d308      	bcc.n	80037dc <UART_SetConfig+0x288>
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d0:	d204      	bcs.n	80037dc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6a3a      	ldr	r2, [r7, #32]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	e0c9      	b.n	8003970 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037e2:	e0c5      	b.n	8003970 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ec:	d16d      	bne.n	80038ca <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80037ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037f2:	3b01      	subs	r3, #1
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	d82d      	bhi.n	8003854 <UART_SetConfig+0x300>
 80037f8:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <UART_SetConfig+0x2ac>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003821 	.word	0x08003821
 8003804:	08003829 	.word	0x08003829
 8003808:	08003855 	.word	0x08003855
 800380c:	0800382f 	.word	0x0800382f
 8003810:	08003855 	.word	0x08003855
 8003814:	08003855 	.word	0x08003855
 8003818:	08003855 	.word	0x08003855
 800381c:	08003837 	.word	0x08003837
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003820:	f7ff f924 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8003824:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003826:	e01b      	b.n	8003860 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <UART_SetConfig+0x2f8>)
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800382c:	e018      	b.n	8003860 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382e:	f7ff f887 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 8003832:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003834:	e014      	b.n	8003860 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800383c:	e010      	b.n	8003860 <UART_SetConfig+0x30c>
 800383e:	bf00      	nop
 8003840:	cfff69f3 	.word	0xcfff69f3
 8003844:	40008000 	.word	0x40008000
 8003848:	40013800 	.word	0x40013800
 800384c:	00f42400 	.word	0x00f42400
 8003850:	08004198 	.word	0x08004198
      default:
        pclk = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800385e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8084 	beq.w	8003970 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	4a4b      	ldr	r2, [pc, #300]	; (800399c <UART_SetConfig+0x448>)
 800386e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003872:	461a      	mov	r2, r3
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	fbb3 f3f2 	udiv	r3, r3, r2
 800387a:	005a      	lsls	r2, r3, #1
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	441a      	add	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	2b0f      	cmp	r3, #15
 8003892:	d916      	bls.n	80038c2 <UART_SetConfig+0x36e>
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389a:	d212      	bcs.n	80038c2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f023 030f 	bic.w	r3, r3, #15
 80038a4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	8bfb      	ldrh	r3, [r7, #30]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	8bfa      	ldrh	r2, [r7, #30]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	e056      	b.n	8003970 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038c8:	e052      	b.n	8003970 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038ce:	3b01      	subs	r3, #1
 80038d0:	2b07      	cmp	r3, #7
 80038d2:	d822      	bhi.n	800391a <UART_SetConfig+0x3c6>
 80038d4:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <UART_SetConfig+0x388>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	080038fd 	.word	0x080038fd
 80038e0:	08003905 	.word	0x08003905
 80038e4:	0800391b 	.word	0x0800391b
 80038e8:	0800390b 	.word	0x0800390b
 80038ec:	0800391b 	.word	0x0800391b
 80038f0:	0800391b 	.word	0x0800391b
 80038f4:	0800391b 	.word	0x0800391b
 80038f8:	08003913 	.word	0x08003913
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038fc:	f7ff f8b6 	bl	8002a6c <HAL_RCC_GetPCLK2Freq>
 8003900:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003902:	e010      	b.n	8003926 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003904:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <UART_SetConfig+0x44c>)
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003908:	e00d      	b.n	8003926 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390a:	f7ff f819 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 800390e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003910:	e009      	b.n	8003926 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003918:	e005      	b.n	8003926 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003924:	bf00      	nop
    }

    if (pclk != 0U)
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	2b00      	cmp	r3, #0
 800392a:	d021      	beq.n	8003970 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	4a1a      	ldr	r2, [pc, #104]	; (800399c <UART_SetConfig+0x448>)
 8003932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003936:	461a      	mov	r2, r3
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	fbb3 f2f2 	udiv	r2, r3, r2
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	085b      	lsrs	r3, r3, #1
 8003944:	441a      	add	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	d909      	bls.n	800396a <UART_SetConfig+0x416>
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d205      	bcs.n	800396a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	b29a      	uxth	r2, r3
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	e002      	b.n	8003970 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2201      	movs	r2, #1
 8003974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2201      	movs	r2, #1
 800397c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2200      	movs	r2, #0
 8003984:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2200      	movs	r2, #0
 800398a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800398c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003990:	4618      	mov	r0, r3
 8003992:	3730      	adds	r7, #48	; 0x30
 8003994:	46bd      	mov	sp, r7
 8003996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399a:	bf00      	nop
 800399c:	08004198 	.word	0x08004198
 80039a0:	00f42400 	.word	0x00f42400

080039a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01a      	beq.n	8003aba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa2:	d10a      	bne.n	8003aba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]
  }
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b098      	sub	sp, #96	; 0x60
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003af8:	f7fd faf6 	bl	80010e8 <HAL_GetTick>
 8003afc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d12f      	bne.n	8003b6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b14:	2200      	movs	r2, #0
 8003b16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f88e 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d022      	beq.n	8003b6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b44:	647b      	str	r3, [r7, #68]	; 0x44
 8003b46:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e6      	bne.n	8003b26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e063      	b.n	8003c34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d149      	bne.n	8003c0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b82:	2200      	movs	r2, #0
 8003b84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f857 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d03c      	beq.n	8003c0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ba2:	6a3b      	ldr	r3, [r7, #32]
 8003ba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e6      	bne.n	8003b94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3308      	adds	r3, #8
 8003be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be6:	61fa      	str	r2, [r7, #28]
 8003be8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	69b9      	ldr	r1, [r7, #24]
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	617b      	str	r3, [r7, #20]
   return(result);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e5      	bne.n	8003bc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e012      	b.n	8003c34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3758      	adds	r7, #88	; 0x58
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4c:	e04f      	b.n	8003cee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d04b      	beq.n	8003cee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c56:	f7fd fa47 	bl	80010e8 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d302      	bcc.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e04e      	b.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d037      	beq.n	8003cee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b80      	cmp	r3, #128	; 0x80
 8003c82:	d034      	beq.n	8003cee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	d031      	beq.n	8003cee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d110      	bne.n	8003cba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f838 	bl	8003d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e029      	b.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc8:	d111      	bne.n	8003cee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f81e 	bl	8003d16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e00f      	b.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	bf0c      	ite	eq
 8003cfe:	2301      	moveq	r3, #1
 8003d00:	2300      	movne	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d0a0      	beq.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b095      	sub	sp, #84	; 0x54
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d44:	e841 2300 	strex	r3, r2, [r1]
 8003d48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1e6      	bne.n	8003d1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3308      	adds	r3, #8
 8003d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3308      	adds	r3, #8
 8003d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7c:	e841 2300 	strex	r3, r2, [r1]
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e3      	bne.n	8003d50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d118      	bne.n	8003dc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f023 0310 	bic.w	r3, r3, #16
 8003da4:	647b      	str	r3, [r7, #68]	; 0x44
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6979      	ldr	r1, [r7, #20]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	613b      	str	r3, [r7, #16]
   return(result);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e6      	bne.n	8003d90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003dd6:	bf00      	nop
 8003dd8:	3754      	adds	r7, #84	; 0x54
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_UARTEx_DisableFifoMode+0x16>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e027      	b.n	8003e48 <HAL_UARTEx_DisableFifoMode+0x66>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e02d      	b.n	8003ec8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2224      	movs	r2, #36	; 0x24
 8003e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f84f 	bl	8003f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e02d      	b.n	8003f44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2224      	movs	r2, #36	; 0x24
 8003ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f811 	bl	8003f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d108      	bne.n	8003f6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f6c:	e031      	b.n	8003fd2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f6e:	2308      	movs	r3, #8
 8003f70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f72:	2308      	movs	r3, #8
 8003f74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	0e5b      	lsrs	r3, r3, #25
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	0f5b      	lsrs	r3, r3, #29
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f96:	7bbb      	ldrb	r3, [r7, #14]
 8003f98:	7b3a      	ldrb	r2, [r7, #12]
 8003f9a:	4911      	ldr	r1, [pc, #68]	; (8003fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8003f9c:	5c8a      	ldrb	r2, [r1, r2]
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003fa2:	7b3a      	ldrb	r2, [r7, #12]
 8003fa4:	490f      	ldr	r1, [pc, #60]	; (8003fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8003fa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	7b7a      	ldrb	r2, [r7, #13]
 8003fb8:	4909      	ldr	r1, [pc, #36]	; (8003fe0 <UARTEx_SetNbDataToProcess+0x94>)
 8003fba:	5c8a      	ldrb	r2, [r1, r2]
 8003fbc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003fc0:	7b7a      	ldrb	r2, [r7, #13]
 8003fc2:	4908      	ldr	r1, [pc, #32]	; (8003fe4 <UARTEx_SetNbDataToProcess+0x98>)
 8003fc4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	080041b0 	.word	0x080041b0
 8003fe4:	080041b8 	.word	0x080041b8

08003fe8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ff0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003ff4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	b29b      	uxth	r3, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	4013      	ands	r3, r2
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	1d3b      	adds	r3, r7, #4
 8004028:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <memset>:
 800405a:	4402      	add	r2, r0
 800405c:	4603      	mov	r3, r0
 800405e:	4293      	cmp	r3, r2
 8004060:	d100      	bne.n	8004064 <memset+0xa>
 8004062:	4770      	bx	lr
 8004064:	f803 1b01 	strb.w	r1, [r3], #1
 8004068:	e7f9      	b.n	800405e <memset+0x4>
	...

0800406c <__libc_init_array>:
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	4d0d      	ldr	r5, [pc, #52]	; (80040a4 <__libc_init_array+0x38>)
 8004070:	4c0d      	ldr	r4, [pc, #52]	; (80040a8 <__libc_init_array+0x3c>)
 8004072:	1b64      	subs	r4, r4, r5
 8004074:	10a4      	asrs	r4, r4, #2
 8004076:	2600      	movs	r6, #0
 8004078:	42a6      	cmp	r6, r4
 800407a:	d109      	bne.n	8004090 <__libc_init_array+0x24>
 800407c:	4d0b      	ldr	r5, [pc, #44]	; (80040ac <__libc_init_array+0x40>)
 800407e:	4c0c      	ldr	r4, [pc, #48]	; (80040b0 <__libc_init_array+0x44>)
 8004080:	f000 f818 	bl	80040b4 <_init>
 8004084:	1b64      	subs	r4, r4, r5
 8004086:	10a4      	asrs	r4, r4, #2
 8004088:	2600      	movs	r6, #0
 800408a:	42a6      	cmp	r6, r4
 800408c:	d105      	bne.n	800409a <__libc_init_array+0x2e>
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	f855 3b04 	ldr.w	r3, [r5], #4
 8004094:	4798      	blx	r3
 8004096:	3601      	adds	r6, #1
 8004098:	e7ee      	b.n	8004078 <__libc_init_array+0xc>
 800409a:	f855 3b04 	ldr.w	r3, [r5], #4
 800409e:	4798      	blx	r3
 80040a0:	3601      	adds	r6, #1
 80040a2:	e7f2      	b.n	800408a <__libc_init_array+0x1e>
 80040a4:	080041c8 	.word	0x080041c8
 80040a8:	080041c8 	.word	0x080041c8
 80040ac:	080041c8 	.word	0x080041c8
 80040b0:	080041cc 	.word	0x080041cc

080040b4 <_init>:
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	bf00      	nop
 80040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ba:	bc08      	pop	{r3}
 80040bc:	469e      	mov	lr, r3
 80040be:	4770      	bx	lr

080040c0 <_fini>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	bf00      	nop
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr
