
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f9c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000008  080041dc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000398  20000214  080043e8  00020214  2**2
                  ALLOC
  8 ._user_heap_stack 00001404  200005ac  080043e8  000205ac  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013f42  00000000  00000000  00020287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002b18  00000000  00000000  000341c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001528  00000000  00000000  00036ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001016  00000000  00000000  00038210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021299  00000000  00000000  00039226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000129f7  00000000  00000000  0005a4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d520e  00000000  00000000  0006ceb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000057e8  00000000  00000000  001420c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000049  00000000  00000000  001478ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000214 	.word	0x20000214
 8000158:	00000000 	.word	0x00000000
 800015c:	080040c0 	.word	0x080040c0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000218 	.word	0x20000218
 8000178:	080040c0 	.word	0x080040c0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <Init_LCD>:
void comm_Page_Addr(unsigned char addr);
uint8_t Find_Char_Index(unsigned char, uint8_t);


void Init_LCD()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	void comm_ADC_Select();
	HAL_Delay(5);
 800047c:	2005      	movs	r0, #5
 800047e:	f000 fe51 	bl	8001124 <HAL_Delay>
	void comm_Display_Off();
	HAL_Delay(5);
 8000482:	2005      	movs	r0, #5
 8000484:	f000 fe4e 	bl	8001124 <HAL_Delay>
	void comm_Com_Output_Scan_Reverse();
	HAL_Delay(5);
 8000488:	2005      	movs	r0, #5
 800048a:	f000 fe4b 	bl	8001124 <HAL_Delay>
	void comm_LCD_Bias_1_9();
	HAL_Delay(5);
 800048e:	2005      	movs	r0, #5
 8000490:	f000 fe48 	bl	8001124 <HAL_Delay>
	void comm_Power_Control();
	HAL_Delay(5);
 8000494:	2005      	movs	r0, #5
 8000496:	f000 fe45 	bl	8001124 <HAL_Delay>
	void comm_Resistor_Ratio();
	HAL_Delay(5);
 800049a:	2005      	movs	r0, #5
 800049c:	f000 fe42 	bl	8001124 <HAL_Delay>
	void comm_Volume_Mode();
	HAL_Delay(5);
 80004a0:	2005      	movs	r0, #5
 80004a2:	f000 fe3f 	bl	8001124 <HAL_Delay>
	void comm_Volume_Register();
	HAL_Delay(5);
 80004a6:	2005      	movs	r0, #5
 80004a8:	f000 fe3c 	bl	8001124 <HAL_Delay>
	void comm_Display_On();
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <Disp_Pic>:

void Disp_Pic(unsigned char *lcd_string)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	//LCD organized into 4 pages(rows), each of 128 pixels wide and 8 pixels high.
	//Each element in lcd_string is a vertical column of 8 pixels.
	//pages are populated left to right in columns of 8 pixels
    unsigned int i,j;
    unsigned char page = 0x00; //starting page address at 0xB0 + 0
 80004b8:	2300      	movs	r3, #0
 80004ba:	73fb      	strb	r3, [r7, #15]

    comm_Display_Off();
 80004bc:	f000 f932 	bl	8000724 <comm_Display_Off>
    HAL_Delay(5);
 80004c0:	2005      	movs	r0, #5
 80004c2:	f000 fe2f 	bl	8001124 <HAL_Delay>
    comm_Display_Start_Addr_0();
 80004c6:	f000 f93b 	bl	8000740 <comm_Display_Start_Addr_0>
    HAL_Delay(5);
 80004ca:	2005      	movs	r0, #5
 80004cc:	f000 fe2a 	bl	8001124 <HAL_Delay>

    for(i=0; i<4; i++) //32 pixel high display / 8 pixels per page = 4 pages
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	e02a      	b.n	800052c <Disp_Pic+0x7c>
    {
    	comm_Page_Addr(page);       //set current page address
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 f946 	bl	800076a <comm_Page_Addr>
    	HAL_Delay(5);
 80004de:	2005      	movs	r0, #5
 80004e0:	f000 fe20 	bl	8001124 <HAL_Delay>
    	comm_Col_Upper_Addr();
 80004e4:	f000 f933 	bl	800074e <comm_Col_Upper_Addr>
    	HAL_Delay(5);
 80004e8:	2005      	movs	r0, #5
 80004ea:	f000 fe1b 	bl	8001124 <HAL_Delay>
    	comm_Col_Lower_Addr();
 80004ee:	f000 f935 	bl	800075c <comm_Col_Lower_Addr>
    	HAL_Delay(5);
 80004f2:	2005      	movs	r0, #5
 80004f4:	f000 fe16 	bl	8001124 <HAL_Delay>

        for(j=0; j<128; j++) //128 columns wide
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	e00d      	b.n	800051a <Disp_Pic+0x6a>
        {
        	data_write(*lcd_string);    //send picture data
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f000 f862 	bl	80005cc <data_write>
        	HAL_Delay(5);
 8000508:	2005      	movs	r0, #5
 800050a:	f000 fe0b 	bl	8001124 <HAL_Delay>
        	lcd_string++; //goes to next element/column
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3301      	adds	r3, #1
 8000512:	607b      	str	r3, [r7, #4]
        for(j=0; j<128; j++) //128 columns wide
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	3301      	adds	r3, #1
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	2b7f      	cmp	r3, #127	; 0x7f
 800051e:	d9ee      	bls.n	80004fe <Disp_Pic+0x4e>
        }

        page++;         //after 128 columns, go to next page
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	3301      	adds	r3, #1
 8000524:	73fb      	strb	r3, [r7, #15]
    for(i=0; i<4; i++) //32 pixel high display / 8 pixels per page = 4 pages
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	2b03      	cmp	r3, #3
 8000530:	d9d1      	bls.n	80004d6 <Disp_Pic+0x26>
    }
    comm_Display_On();
 8000532:	f000 f8fe 	bl	8000732 <comm_Display_On>
    HAL_Delay(5);
 8000536:	2005      	movs	r0, #5
 8000538:	f000 fdf4 	bl	8001124 <HAL_Delay>
}
 800053c:	bf00      	nop
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <Clear_LCD>:

void Clear_LCD()
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
    unsigned int i,j;
    unsigned char page = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	71fb      	strb	r3, [r7, #7]
    comm_Display_Off();
 800054e:	f000 f8e9 	bl	8000724 <comm_Display_Off>
    HAL_Delay(5);
 8000552:	2005      	movs	r0, #5
 8000554:	f000 fde6 	bl	8001124 <HAL_Delay>
    comm_Display_Start_Addr_0();
 8000558:	f000 f8f2 	bl	8000740 <comm_Display_Start_Addr_0>
    HAL_Delay(5);
 800055c:	2005      	movs	r0, #5
 800055e:	f000 fde1 	bl	8001124 <HAL_Delay>

    for(i = 0; i < 4; i++) //32pixel display / 8 pixels per page = 4 pages
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	e025      	b.n	80005b4 <Clear_LCD+0x70>
    {
    	comm_Page_Addr(page);       //set current page address
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f8fd 	bl	800076a <comm_Page_Addr>
    	HAL_Delay(5);
 8000570:	2005      	movs	r0, #5
 8000572:	f000 fdd7 	bl	8001124 <HAL_Delay>
    	comm_Col_Upper_Addr();
 8000576:	f000 f8ea 	bl	800074e <comm_Col_Upper_Addr>
    	HAL_Delay(5);
 800057a:	2005      	movs	r0, #5
 800057c:	f000 fdd2 	bl	8001124 <HAL_Delay>
    	comm_Col_Lower_Addr();
 8000580:	f000 f8ec 	bl	800075c <comm_Col_Lower_Addr>
    	HAL_Delay(5);
 8000584:	2005      	movs	r0, #5
 8000586:	f000 fdcd 	bl	8001124 <HAL_Delay>

        for(j = 0; j < 128; j++) //128 columns wide
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	e008      	b.n	80005a2 <Clear_LCD+0x5e>
        {
    	    data_write(0x00);    //send picture data
 8000590:	2000      	movs	r0, #0
 8000592:	f000 f81b 	bl	80005cc <data_write>
    	    HAL_Delay(5);
 8000596:	2005      	movs	r0, #5
 8000598:	f000 fdc4 	bl	8001124 <HAL_Delay>
        for(j = 0; j < 128; j++) //128 columns wide
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	3301      	adds	r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	2b7f      	cmp	r3, #127	; 0x7f
 80005a6:	d9f3      	bls.n	8000590 <Clear_LCD+0x4c>
        }
        page++;         //after 128 columns, go to next page
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	3301      	adds	r3, #1
 80005ac:	71fb      	strb	r3, [r7, #7]
    for(i = 0; i < 4; i++) //32pixel display / 8 pixels per page = 4 pages
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d9d6      	bls.n	8000568 <Clear_LCD+0x24>
    }
    comm_Display_On();
 80005ba:	f000 f8ba 	bl	8000732 <comm_Display_On>
    HAL_Delay(5);
 80005be:	2005      	movs	r0, #5
 80005c0:	f000 fdb0 	bl	8001124 <HAL_Delay>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <data_write>:
	}
	return 255;
}

void data_write(unsigned char data) //Data Output Serial Interface
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	unsigned int n;

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2110      	movs	r1, #16
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f001 f845 	bl	800166c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_SET); //data type
 80005e2:	2201      	movs	r2, #1
 80005e4:	2180      	movs	r1, #128	; 0x80
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f001 f83f 	bl	800166c <HAL_GPIO_WritePin>

	for(n=0; n<8; n++) //each pixel in the column
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	e034      	b.n	800065e <data_write+0x92>
	{
		if((data&0x80)==0x80)
 80005f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	da06      	bge.n	800060a <data_write+0x3e>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2140      	movs	r1, #64	; 0x40
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f001 f832 	bl	800166c <HAL_GPIO_WritePin>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
		}


		while(0);
 8000608:	e005      	b.n	8000616 <data_write+0x4a>
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f001 f82b 	bl	800166c <HAL_GPIO_WritePin>
		while(0);
 8000616:	bf00      	nop
		HAL_Delay(5);
 8000618:	2005      	movs	r0, #5
 800061a:	f000 fd83 	bl	8001124 <HAL_Delay>
		data = (data<<1);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2120      	movs	r1, #32
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f001 f81e 	bl	800166c <HAL_GPIO_WritePin>
		while(0);
 8000630:	bf00      	nop
		HAL_Delay(5);
 8000632:	2005      	movs	r0, #5
 8000634:	f000 fd76 	bl	8001124 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2120      	movs	r1, #32
 800063c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000640:	f001 f814 	bl	800166c <HAL_GPIO_WritePin>
		while(0);
 8000644:	bf00      	nop
		HAL_Delay(5);
 8000646:	2005      	movs	r0, #5
 8000648:	f000 fd6c 	bl	8001124 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f80a 	bl	800166c <HAL_GPIO_WritePin>
	for(n=0; n<8; n++) //each pixel in the column
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	2b07      	cmp	r3, #7
 8000662:	d9c7      	bls.n	80005f4 <data_write+0x28>
	}
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2110      	movs	r1, #16
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f000 fffe 	bl	800166c <HAL_GPIO_WritePin>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <comm_write>:

void comm_write(unsigned char command)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	unsigned int n;

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_RESET); //CS //activating LCD control
 8000682:	2200      	movs	r2, #0
 8000684:	2110      	movs	r1, #16
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f000 ffef 	bl	800166c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A0_GPIO_Port, A0_Pin, GPIO_PIN_RESET); //RS //instruction/setting type
 800068e:	2200      	movs	r2, #0
 8000690:	2180      	movs	r1, #128	; 0x80
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f000 ffe9 	bl	800166c <HAL_GPIO_WritePin>

	for(n=0; n<8; n++)
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e034      	b.n	800070a <comm_write+0x92>
	{
		//sends each bit of the command 1 at a time, starting at most significant (left to right)
		if((command&0x80)==0x80)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da06      	bge.n	80006b6 <comm_write+0x3e>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_SET); //SI
 80006a8:	2201      	movs	r2, #1
 80006aa:	2140      	movs	r1, #64	; 0x40
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 ffdc 	bl	800166c <HAL_GPIO_WritePin>
		{
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
		}


		while(0);
 80006b4:	e005      	b.n	80006c2 <comm_write+0x4a>
			HAL_GPIO_WritePin(SI_GPIO_Port, SI_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f000 ffd5 	bl	800166c <HAL_GPIO_WritePin>
		while(0);
 80006c2:	bf00      	nop
		HAL_Delay(5);
 80006c4:	2005      	movs	r0, #5
 80006c6:	f000 fd2d 	bl	8001124 <HAL_Delay>
		command = (command<<1);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET); //SC
 80006d0:	2200      	movs	r2, #0
 80006d2:	2120      	movs	r1, #32
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f000 ffc8 	bl	800166c <HAL_GPIO_WritePin>
		while(0);
 80006dc:	bf00      	nop
		HAL_Delay(5);
 80006de:	2005      	movs	r0, #5
 80006e0:	f000 fd20 	bl	8001124 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2120      	movs	r1, #32
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f000 ffbe 	bl	800166c <HAL_GPIO_WritePin>
		while(0);
 80006f0:	bf00      	nop
		HAL_Delay(5);
 80006f2:	2005      	movs	r0, #5
 80006f4:	f000 fd16 	bl	8001124 <HAL_Delay>
		HAL_GPIO_WritePin(SCL_GPIO_Port, SCL_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2120      	movs	r1, #32
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f000 ffb4 	bl	800166c <HAL_GPIO_WritePin>
	for(n=0; n<8; n++)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3301      	adds	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b07      	cmp	r3, #7
 800070e:	d9c7      	bls.n	80006a0 <comm_write+0x28>
	}

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2110      	movs	r1, #16
 8000714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000718:	f000 ffa8 	bl	800166c <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <comm_Display_Off>:
{
	comm_write(0xA0); //see manual to get binary commands
}

void comm_Display_Off()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	comm_write(0xAE);
 8000728:	20ae      	movs	r0, #174	; 0xae
 800072a:	f7ff ffa5 	bl	8000678 <comm_write>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}

08000732 <comm_Display_On>:

void comm_Display_On()
{
 8000732:	b580      	push	{r7, lr}
 8000734:	af00      	add	r7, sp, #0
	comm_write(0xAF);
 8000736:	20af      	movs	r0, #175	; 0xaf
 8000738:	f7ff ff9e 	bl	8000678 <comm_write>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <comm_Display_Start_Addr_0>:
{
	comm_write(0x20);
}

void comm_Display_Start_Addr_0()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	comm_write(0x40);
 8000744:	2040      	movs	r0, #64	; 0x40
 8000746:	f7ff ff97 	bl	8000678 <comm_write>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}

0800074e <comm_Col_Upper_Addr>:

void comm_Col_Upper_Addr()
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
	comm_write(0x10);
 8000752:	2010      	movs	r0, #16
 8000754:	f7ff ff90 	bl	8000678 <comm_write>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <comm_Col_Lower_Addr>:

void comm_Col_Lower_Addr()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	comm_write(0x00);
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff89 	bl	8000678 <comm_write>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}

0800076a <comm_Page_Addr>:

void comm_Page_Addr(unsigned char addr)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
	comm_write(0xB0 + addr);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	3b50      	subs	r3, #80	; 0x50
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff7c 	bl	8000678 <comm_write>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000798:	f023 0218 	bic.w	r2, r3, #24
 800079c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4013      	ands	r3, r2
 80007d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007d8:	68fb      	ldr	r3, [r7, #12]
}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 fc14 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f85e 	bl	80008b0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007f4:	f000 f8d2 	bl	800099c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f000 f964 	bl	8000ac4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007fc:	f000 f8ec 	bl	80009d8 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000800:	f000 f938 	bl	8000a74 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  Init_LCD();
 8000804:	f7ff fe38 	bl	8000478 <Init_LCD>
  state = 0;
 8000808:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <main+0xbc>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
  state_changed = 0;
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <main+0xc0>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (state == 0){
 8000814:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <main+0xbc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d113      	bne.n	8000844 <main+0x5c>
		  if (state_changed == 1)
 800081c:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <main+0xc0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d105      	bne.n	8000830 <main+0x48>
		  {
			  Disp_Pic(DiscBotLogo);
 8000824:	4821      	ldr	r0, [pc, #132]	; (80008ac <main+0xc4>)
 8000826:	f7ff fe43 	bl	80004b0 <Disp_Pic>
			  state_changed = 0;
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <main+0xc0>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
		  }


		  HAL_Delay(100);
 8000830:	2064      	movs	r0, #100	; 0x64
 8000832:	f000 fc77 	bl	8001124 <HAL_Delay>

		  Blue_On();
 8000836:	f000 f9f1 	bl	8000c1c <Blue_On>
		  Green_Off();
 800083a:	f000 f9e3 	bl	8000c04 <Green_Off>
		  Red_Off();
 800083e:	f000 f9c9 	bl	8000bd4 <Red_Off>
 8000842:	e7e7      	b.n	8000814 <main+0x2c>
	  }
	  else if (state == 1){
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <main+0xbc>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d112      	bne.n	8000872 <main+0x8a>
		  if (state_changed == 1)
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <main+0xc0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d102      	bne.n	800085a <main+0x72>
		  {
			  state_changed = 0;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <main+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
		  }

		  Clear_LCD();
 800085a:	f7ff fe73 	bl	8000544 <Clear_LCD>
		  HAL_Delay(200);
 800085e:	20c8      	movs	r0, #200	; 0xc8
 8000860:	f000 fc60 	bl	8001124 <HAL_Delay>

		  Blue_Off();
 8000864:	f000 f9e6 	bl	8000c34 <Blue_Off>
		  Green_On();
 8000868:	f000 f9c0 	bl	8000bec <Green_On>
		  Red_Off();
 800086c:	f000 f9b2 	bl	8000bd4 <Red_Off>
 8000870:	e7d0      	b.n	8000814 <main+0x2c>
	  }
	  else if (state == 2){
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <main+0xbc>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b02      	cmp	r3, #2
 8000878:	d10f      	bne.n	800089a <main+0xb2>
		  if (state_changed == 1)
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <main+0xc0>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d104      	bne.n	800088c <main+0xa4>
		  {
			  Init_LCD();
 8000882:	f7ff fdf9 	bl	8000478 <Init_LCD>
			  //Black_LCD();
			  state_changed = 0;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <main+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
		  }

		  Blue_Off();
 800088c:	f000 f9d2 	bl	8000c34 <Blue_Off>
		  Green_Off();
 8000890:	f000 f9b8 	bl	8000c04 <Green_Off>
		  Red_On();
 8000894:	f000 f992 	bl	8000bbc <Red_On>
 8000898:	e7bc      	b.n	8000814 <main+0x2c>
	  }
	  else{
		  state = 0;
 800089a:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <main+0xbc>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
	  if (state == 0){
 80008a0:	e7b8      	b.n	8000814 <main+0x2c>
 80008a2:	bf00      	nop
 80008a4:	200005a0 	.word	0x200005a0
 80008a8:	200005a4 	.word	0x200005a4
 80008ac:	20000008 	.word	0x20000008

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09a      	sub	sp, #104	; 0x68
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	2248      	movs	r2, #72	; 0x48
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 fbd1 	bl	8004066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80008d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008e4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80008e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	f023 0303 	bic.w	r3, r3, #3
 80008f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008fa:	f000 ffdf 	bl	80018bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff ff42 	bl	8000788 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <SystemClock_Config+0xe8>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800090c:	4a22      	ldr	r2, [pc, #136]	; (8000998 <SystemClock_Config+0xe8>)
 800090e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <SystemClock_Config+0xe8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000920:	2327      	movs	r3, #39	; 0x27
 8000922:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000924:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800092a:	2301      	movs	r3, #1
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000938:	2340      	movs	r3, #64	; 0x40
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800093c:	2300      	movs	r3, #0
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000940:	2360      	movs	r3, #96	; 0x60
 8000942:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000944:	2300      	movs	r3, #0
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fb49 	bl	8001fe4 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000958:	f000 f99e 	bl	8000c98 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800095c:	236f      	movs	r3, #111	; 0x6f
 800095e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000960:	2302      	movs	r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2101      	movs	r1, #1
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fea5 	bl	80026cc <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000988:	f000 f986 	bl	8000c98 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800098c:	f002 fc60 	bl	8003250 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000990:	bf00      	nop
 8000992:	3768      	adds	r7, #104	; 0x68
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58000400 	.word	0x58000400

0800099c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	; 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2250      	movs	r2, #80	; 0x50
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fb5c 	bl	8004066 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80009ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80009b4:	2300      	movs	r3, #0
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fad0 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80009ca:	f000 f965 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80009ce:	bf00      	nop
 80009d0:	3750      	adds	r7, #80	; 0x50
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 80009de:	4a24      	ldr	r2, [pc, #144]	; (8000a70 <MX_USART1_UART_Init+0x98>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009e2:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 80009ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 8000a00:	220c      	movs	r2, #12
 8000a02:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 8000a24:	f002 fd4b 	bl	80034be <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000a2e:	f000 f933 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 8000a36:	f003 fa13 	bl	8003e60 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000a40:	f000 f92a 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 8000a48:	f003 fa48 	bl	8003edc <HAL_UARTEx_SetRxFifoThreshold>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000a52:	f000 f921 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 8000a58:	f003 f9c9 	bl	8003dee <HAL_UARTEx_DisableFifoMode>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000a62:	f000 f919 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000230 	.word	0x20000230
 8000a70:	40013800 	.word	0x40013800

08000a74 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_USB_PCD_Init+0x48>)
 8000a7a:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <MX_USB_PCD_Init+0x4c>)
 8000a7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_USB_PCD_Init+0x48>)
 8000a80:	2208      	movs	r2, #8
 8000a82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MX_USB_PCD_Init+0x48>)
 8000a86:	2202      	movs	r2, #2
 8000a88:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_USB_PCD_Init+0x48>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <MX_USB_PCD_Init+0x48>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_USB_PCD_Init+0x48>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <MX_USB_PCD_Init+0x48>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_USB_PCD_Init+0x48>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_USB_PCD_Init+0x48>)
 8000aaa:	f000 fe0f 	bl	80016cc <HAL_PCD_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ab4:	f000 f8f0 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200002c4 	.word	0x200002c4
 8000ac0:	40006800 	.word	0x40006800

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad8:	2004      	movs	r0, #4
 8000ada:	f7ff fe6b 	bl	80007b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff fe68 	bl	80007b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f7ff fe65 	bl	80007b4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	2008      	movs	r0, #8
 8000aec:	f7ff fe62 	bl	80007b4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2110      	movs	r1, #16
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fdb8 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SCL_Pin|A0_Pin|SI_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	21e0      	movs	r1, #224	; 0xe0
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f000 fdb2 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2123      	movs	r1, #35	; 0x23
 8000b0c:	4828      	ldr	r0, [pc, #160]	; (8000bb0 <MX_GPIO_Init+0xec>)
 8000b0e:	f000 fdad 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS1_Pin SCL_Pin A0_Pin SI_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|SCL_Pin|A0_Pin|SI_Pin;
 8000b12:	23f0      	movs	r3, #240	; 0xf0
 8000b14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2a:	f000 fc2f 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2e:	2310      	movs	r3, #16
 8000b30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	481c      	ldr	r0, [pc, #112]	; (8000bb4 <MX_GPIO_Init+0xf0>)
 8000b42:	f000 fc23 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000b46:	2323      	movs	r3, #35	; 0x23
 8000b48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4815      	ldr	r0, [pc, #84]	; (8000bb0 <MX_GPIO_Init+0xec>)
 8000b5c:	f000 fc16 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000b60:	2303      	movs	r3, #3
 8000b62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4619      	mov	r1, r3
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_GPIO_Init+0xf4>)
 8000b74:	f000 fc0a 	bl	800138c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2006      	movs	r0, #6
 8000b7e:	f000 fbd0 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b82:	2006      	movs	r0, #6
 8000b84:	f000 fbe7 	bl	8001356 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2007      	movs	r0, #7
 8000b8e:	f000 fbc8 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b92:	2007      	movs	r0, #7
 8000b94:	f000 fbdf 	bl	8001356 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	200a      	movs	r0, #10
 8000b9e:	f000 fbc0 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ba2:	200a      	movs	r0, #10
 8000ba4:	f000 fbd7 	bl	8001356 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	48000800 	.word	0x48000800
 8000bb8:	48000c00 	.word	0x48000c00

08000bbc <Red_On>:

/* USER CODE BEGIN 4 */
void Red_On()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <Red_On+0x14>)
 8000bc6:	f000 fd51 	bl	800166c <HAL_GPIO_WritePin>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	48000400 	.word	0x48000400

08000bd4 <Red_Off>:

void Red_Off()
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2102      	movs	r1, #2
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <Red_Off+0x14>)
 8000bde:	f000 fd45 	bl	800166c <HAL_GPIO_WritePin>
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	48000400 	.word	0x48000400

08000bec <Green_On>:

void Green_On()
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <Green_On+0x14>)
 8000bf6:	f000 fd39 	bl	800166c <HAL_GPIO_WritePin>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	48000400 	.word	0x48000400

08000c04 <Green_Off>:

void Green_Off()
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <Green_Off+0x14>)
 8000c0e:	f000 fd2d 	bl	800166c <HAL_GPIO_WritePin>
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	48000400 	.word	0x48000400

08000c1c <Blue_On>:

void Blue_On()
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2120      	movs	r1, #32
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <Blue_On+0x14>)
 8000c26:	f000 fd21 	bl	800166c <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	48000400 	.word	0x48000400

08000c34 <Blue_Off>:

void Blue_Off()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <Blue_Off+0x14>)
 8000c3e:	f000 fd15 	bl	800166c <HAL_GPIO_WritePin>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	48000400 	.word	0x48000400

08000c4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == B1_Pin){state = 0;}      //10
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	2b10      	cmp	r3, #16
 8000c5a:	d103      	bne.n	8000c64 <HAL_GPIO_EXTI_Callback+0x18>
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	e00c      	b.n	8000c7e <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_PIN == B2_Pin){state = 1;} //1
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d103      	bne.n	8000c72 <HAL_GPIO_EXTI_Callback+0x26>
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e005      	b.n	8000c7e <HAL_GPIO_EXTI_Callback+0x32>
	else if(GPIO_PIN == B3_Pin){state = 2;} //2
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d102      	bne.n	8000c7e <HAL_GPIO_EXTI_Callback+0x32>
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	601a      	str	r2, [r3, #0]
	state_changed = 1;
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_GPIO_EXTI_Callback+0x48>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	200005a0 	.word	0x200005a0
 8000c94:	200005a4 	.word	0x200005a4

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <Error_Handler+0x8>

08000ca2 <LL_AHB2_GRP1_EnableClock>:
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b085      	sub	sp, #20
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4013      	ands	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b09c      	sub	sp, #112	; 0x70
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2250      	movs	r2, #80	; 0x50
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 f97c 	bl	8004066 <memset>
  if(huart->Instance==USART1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <HAL_UART_MspInit+0x84>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d124      	bne.n	8000dc2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 f8ed 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d90:	f7ff ff82 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d98:	f7ff ffb5 	bl	8000d06 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f7ff ff80 	bl	8000ca2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000da2:	23c0      	movs	r3, #192	; 0xc0
 8000da4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000db2:	2307      	movs	r3, #7
 8000db4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <HAL_UART_MspInit+0x88>)
 8000dbe:	f000 fae5 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3770      	adds	r7, #112	; 0x70
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40013800 	.word	0x40013800
 8000dd0:	48000400 	.word	0x48000400

08000dd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b09c      	sub	sp, #112	; 0x70
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2250      	movs	r2, #80	; 0x50
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 f936 	bl	8004066 <memset>
  if(hpcd->Instance==USB)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <HAL_PCD_MspInit+0xa8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d136      	bne.n	8000e72 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e08:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000e0a:	2318      	movs	r3, #24
 8000e0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e12:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000e14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e18:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000e1a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000e20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e24:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e2a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4618      	mov	r0, r3
 8000e32:	f002 f897 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000e3c:	f7ff ff2c 	bl	8000c98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff ff2e 	bl	8000ca2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e58:	230a      	movs	r3, #10
 8000e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e60:	4619      	mov	r1, r3
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f000 fa91 	bl	800138c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e6a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e6e:	f7ff ff31 	bl	8000cd4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3770      	adds	r7, #112	; 0x70
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40006800 	.word	0x40006800

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ecc:	f000 f8fe 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f000 fbdf 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f000 fbd8 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ef4:	2010      	movs	r0, #16
 8000ef6:	f000 fbd1 	bl	800169c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <SystemInit+0x98>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <SystemInit+0x98>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f28:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f2c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <SystemInit+0x9c>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f4a:	f023 0305 	bic.w	r3, r3, #5
 8000f4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f5e:	f023 0301 	bic.w	r3, r3, #1
 8000f62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6a:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <SystemInit+0xa0>)
 8000f6c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <SystemInit+0xa0>)
 8000f74:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f84:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00
 8000f9c:	faf6fefb 	.word	0xfaf6fefb
 8000fa0:	22041000 	.word	0x22041000

08000fa4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000fa4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa8:	3304      	adds	r3, #4

08000faa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000faa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fac:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000fae:	d3f9      	bcc.n	8000fa4 <CopyDataInit>
  bx lr
 8000fb0:	4770      	bx	lr

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000fb2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000fb4:	3004      	adds	r0, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000fb6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>
  bx lr
 8000fba:	4770      	bx	lr

08000fbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fbe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc0:	f7ff ff9e 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <LoopForever+0x6>)
 8000fc6:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <LoopForever+0xa>)
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <LoopForever+0xe>)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f7ff ffed 	bl	8000faa <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <LoopForever+0x12>)
 8000fd2:	490c      	ldr	r1, [pc, #48]	; (8001004 <LoopForever+0x16>)
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <LoopForever+0x1a>)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f7ff ffe7 	bl	8000faa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fdc:	480b      	ldr	r0, [pc, #44]	; (800100c <LoopForever+0x1e>)
 8000fde:	490c      	ldr	r1, [pc, #48]	; (8001010 <LoopForever+0x22>)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f7ff ffe8 	bl	8000fb6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fe6:	f003 f847 	bl	8004078 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fea:	f7ff fbfd 	bl	80007e8 <main>

08000fee <LoopForever>:

LoopForever:
  b LoopForever
 8000fee:	e7fe      	b.n	8000fee <LoopForever>
  ldr   r0, =_estack
 8000ff0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000214 	.word	0x20000214
 8000ffc:	080041dc 	.word	0x080041dc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001000:	20030000 	.word	0x20030000
 8001004:	20030000 	.word	0x20030000
 8001008:	080043e8 	.word	0x080043e8
  INIT_BSS _sbss, _ebss
 800100c:	20000214 	.word	0x20000214
 8001010:	200005ac 	.word	0x200005ac

08001014 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC1_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_Init+0x3c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <HAL_Init+0x3c>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102e:	2003      	movs	r0, #3
 8001030:	f000 f96c 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f80f 	bl	8001058 <HAL_InitTick>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	e001      	b.n	800104a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001046:	f7ff fe77 	bl	8000d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104a:	79fb      	ldrb	r3, [r7, #7]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	58004000 	.word	0x58004000

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_InitTick+0x6c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d024      	beq.n	80010b6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800106c:	f001 fcda 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8001070:	4602      	mov	r2, r0
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_InitTick+0x6c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4619      	mov	r1, r3
 8001078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001080:	fbb2 f3f3 	udiv	r3, r2, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f974 	bl	8001372 <HAL_SYSTICK_Config>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10f      	bne.n	80010b0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	d809      	bhi.n	80010aa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001096:	2200      	movs	r2, #0
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	f000 f940 	bl	8001322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <HAL_InitTick+0x70>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	e007      	b.n	80010ba <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	e004      	b.n	80010ba <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	e001      	b.n	80010ba <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000210 	.word	0x20000210
 80010c8:	2000020c 	.word	0x2000020c

080010cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000210 	.word	0x20000210
 80010f0:	200005a8 	.word	0x200005a8

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	200005a8 	.word	0x200005a8

0800110c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <HAL_GetTickPrio+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2000020c 	.word	0x2000020c

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffe2 	bl	80010f4 <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffd2 	bl	80010f4 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000210 	.word	0x20000210

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	; (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff8e 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff29 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff40 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff90 	bl	8001260 <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5f 	bl	800120c <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff33 	bl	80011d0 <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa4 	bl	80012c8 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139a:	e14c      	b.n	8001636 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2101      	movs	r1, #1
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	4013      	ands	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 813e 	beq.w	8001630 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d005      	beq.n	80013cc <HAL_GPIO_Init+0x40>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d130      	bne.n	800142e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001402:	2201      	movs	r2, #1
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f003 0201 	and.w	r2, r3, #1
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b03      	cmp	r3, #3
 8001438:	d017      	beq.n	800146a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d123      	bne.n	80014be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	08da      	lsrs	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3208      	adds	r2, #8
 800147e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001482:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	691a      	ldr	r2, [r3, #16]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	08da      	lsrs	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	6939      	ldr	r1, [r7, #16]
 80014ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0203 	and.w	r2, r3, #3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8098 	beq.w	8001630 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001500:	4a54      	ldr	r2, [pc, #336]	; (8001654 <HAL_GPIO_Init+0x2c8>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800152a:	d019      	beq.n	8001560 <HAL_GPIO_Init+0x1d4>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a4a      	ldr	r2, [pc, #296]	; (8001658 <HAL_GPIO_Init+0x2cc>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d013      	beq.n	800155c <HAL_GPIO_Init+0x1d0>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a49      	ldr	r2, [pc, #292]	; (800165c <HAL_GPIO_Init+0x2d0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d00d      	beq.n	8001558 <HAL_GPIO_Init+0x1cc>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a48      	ldr	r2, [pc, #288]	; (8001660 <HAL_GPIO_Init+0x2d4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d007      	beq.n	8001554 <HAL_GPIO_Init+0x1c8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a47      	ldr	r2, [pc, #284]	; (8001664 <HAL_GPIO_Init+0x2d8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d101      	bne.n	8001550 <HAL_GPIO_Init+0x1c4>
 800154c:	2304      	movs	r3, #4
 800154e:	e008      	b.n	8001562 <HAL_GPIO_Init+0x1d6>
 8001550:	2307      	movs	r3, #7
 8001552:	e006      	b.n	8001562 <HAL_GPIO_Init+0x1d6>
 8001554:	2303      	movs	r3, #3
 8001556:	e004      	b.n	8001562 <HAL_GPIO_Init+0x1d6>
 8001558:	2302      	movs	r3, #2
 800155a:	e002      	b.n	8001562 <HAL_GPIO_Init+0x1d6>
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_GPIO_Init+0x1d6>
 8001560:	2300      	movs	r3, #0
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	f002 0203 	and.w	r2, r2, #3
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	4093      	lsls	r3, r2
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001572:	4938      	ldr	r1, [pc, #224]	; (8001654 <HAL_GPIO_Init+0x2c8>)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001580:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015a4:	4a30      	ldr	r2, [pc, #192]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ce:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 80015d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015fa:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 8001604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001628:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <HAL_GPIO_Init+0x2dc>)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	f47f aeab 	bne.w	800139c <HAL_GPIO_Init+0x10>
  }
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	371c      	adds	r7, #28
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40010000 	.word	0x40010000
 8001658:	48000400 	.word	0x48000400
 800165c:	48000800 	.word	0x48000800
 8001660:	48000c00 	.word	0x48000c00
 8001664:	48001000 	.word	0x48001000
 8001668:	58000800 	.word	0x58000800

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001688:	e002      	b.n	8001690 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fac6 	bl	8000c4c <HAL_GPIO_EXTI_Callback>
  }
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	58000800 	.word	0x58000800

080016cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0c0      	b.n	8001860 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d106      	bne.n	80016f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fb6e 	bl	8000dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2203      	movs	r2, #3
 80016fc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fc75 	bl	8003ff4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	e03e      	b.n	800178e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	3311      	adds	r3, #17
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3310      	adds	r3, #16
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	3313      	adds	r3, #19
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	440b      	add	r3, r1
 800175a:	3320      	adds	r3, #32
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	3324      	adds	r3, #36	; 0x24
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	3301      	adds	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	791b      	ldrb	r3, [r3, #4]
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	429a      	cmp	r2, r3
 8001796:	d3bb      	bcc.n	8001710 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e044      	b.n	8001828 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800179e:	7bfa      	ldrb	r2, [r7, #15]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	f203 1351 	addw	r3, r3, #337	; 0x151
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80017c6:	7bfa      	ldrb	r2, [r7, #15]
 80017c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	440b      	add	r3, r1
 80017d8:	f203 1353 	addw	r3, r3, #339	; 0x153
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017f6:	7bfa      	ldrb	r2, [r7, #15]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800180c:	7bfa      	ldrb	r2, [r7, #15]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	440b      	add	r3, r1
 800181a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	3301      	adds	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	429a      	cmp	r2, r3
 8001830:	d3b5      	bcc.n	800179e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3304      	adds	r3, #4
 800183a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800183e:	f002 fbf4 	bl	800402a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	7a9b      	ldrb	r3, [r3, #10]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d102      	bne.n	800185e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f805 	bl	8001868 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800188c:	b29b      	uxth	r3, r3
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	58000400 	.word	0x58000400

080018dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	58000400 	.word	0x58000400

080018f8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800190a:	d101      	bne.n	8001910 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_RCC_HSE_Enable>:
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800192a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_RCC_HSE_Disable>:
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_RCC_HSE_IsReady>:
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800196a:	d101      	bne.n	8001970 <LL_RCC_HSE_IsReady+0x18>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_RCC_HSE_IsReady+0x1a>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_RCC_HSI_Enable>:
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_RCC_HSI_Disable>:
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_RCC_HSI_IsReady>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ca:	d101      	bne.n	80019d0 <LL_RCC_HSI_IsReady+0x18>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <LL_RCC_HSI_IsReady+0x1a>
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_RCC_HSI_SetCalibTrimming>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_RCC_HSI48_Enable>:
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_RCC_HSI48_Disable>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a38:	f023 0301 	bic.w	r3, r3, #1
 8001a3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_RCC_HSI48_IsReady>:
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d101      	bne.n	8001a62 <LL_RCC_HSI48_IsReady+0x18>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <LL_RCC_HSI48_IsReady+0x1a>
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_RCC_LSE_Enable>:
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_RCC_LSE_Disable>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_RCC_LSE_EnableBypass>:
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_RCC_LSE_DisableBypass>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae4:	f023 0304 	bic.w	r3, r3, #4
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d101      	bne.n	8001b0e <LL_RCC_LSE_IsReady+0x18>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_RCC_LSE_IsReady+0x1a>
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d101      	bne.n	8001b76 <LL_RCC_LSI1_IsReady+0x18>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_RCC_LSI1_IsReady+0x1a>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d101      	bne.n	8001bde <LL_RCC_LSI2_IsReady+0x18>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <LL_RCC_LSI2_IsReady+0x1a>
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	6013      	str	r3, [r2, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d101      	bne.n	8001c6a <LL_RCC_MSI_IsReady+0x16>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <LL_RCC_MSI_IsReady+0x18>
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2bb0      	cmp	r3, #176	; 0xb0
 8001cb4:	d901      	bls.n	8001cba <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001cb6:	23b0      	movs	r3, #176	; 0xb0
 8001cb8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001cba:	687b      	ldr	r3, [r7, #4]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 0203 	bic.w	r2, r3, #3
 8001d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d96:	f023 020f 	bic.w	r2, r3, #15
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e98:	6013      	str	r3, [r2, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eb6:	d101      	bne.n	8001ebc <LL_RCC_PLL_IsReady+0x18>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <LL_RCC_PLL_IsReady+0x1a>
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d101      	bne.n	8001f42 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f62:	d101      	bne.n	8001f68 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f88:	d101      	bne.n	8001f8e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fac:	d101      	bne.n	8001fb2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fd0:	d101      	bne.n	8001fd6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b08d      	sub	sp, #52	; 0x34
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e363      	b.n	80026be <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 808d 	beq.w	800211e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002004:	f7ff fe89 	bl	8001d1a <LL_RCC_GetSysClkSource>
 8002008:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800200a:	f7ff ff82 	bl	8001f12 <LL_RCC_PLL_GetMainSource>
 800200e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_RCC_OscConfig+0x3e>
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	2b0c      	cmp	r3, #12
 800201a:	d147      	bne.n	80020ac <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800201c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201e:	2b01      	cmp	r3, #1
 8002020:	d144      	bne.n	80020ac <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e347      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002032:	f7ff fe34 	bl	8001c9e <LL_RCC_MSI_GetRange>
 8002036:	4603      	mov	r3, r0
 8002038:	429c      	cmp	r4, r3
 800203a:	d914      	bls.n	8002066 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fd2f 	bl	8002aa4 <RCC_SetFlashLatencyFromMSIRange>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e336      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fe0e 	bl	8001c76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fe32 	bl	8001cc8 <LL_RCC_MSI_SetCalibTrimming>
 8002064:	e013      	b.n	800208e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fe03 	bl	8001c76 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fe27 	bl	8001cc8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fd10 	bl	8002aa4 <RCC_SetFlashLatencyFromMSIRange>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e317      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800208e:	f000 fcc9 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8002092:	4603      	mov	r3, r0
 8002094:	4aa4      	ldr	r2, [pc, #656]	; (8002328 <HAL_RCC_OscConfig+0x344>)
 8002096:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002098:	4ba4      	ldr	r3, [pc, #656]	; (800232c <HAL_RCC_OscConfig+0x348>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe ffdb 	bl	8001058 <HAL_InitTick>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d039      	beq.n	800211c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e308      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01e      	beq.n	80020f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020b4:	f7ff fdb0 	bl	8001c18 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020b8:	f7ff f81c 	bl	80010f4 <HAL_GetTick>
 80020bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c0:	f7ff f818 	bl	80010f4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e2f5      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80020d2:	f7ff fdbf 	bl	8001c54 <LL_RCC_MSI_IsReady>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f1      	beq.n	80020c0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fdc8 	bl	8001c76 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fdec 	bl	8001cc8 <LL_RCC_MSI_SetCalibTrimming>
 80020f0:	e015      	b.n	800211e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020f2:	f7ff fda0 	bl	8001c36 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020f6:	f7fe fffd 	bl	80010f4 <HAL_GetTick>
 80020fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020fe:	f7fe fff9 	bl	80010f4 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e2d6      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002110:	f7ff fda0 	bl	8001c54 <LL_RCC_MSI_IsReady>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f1      	bne.n	80020fe <HAL_RCC_OscConfig+0x11a>
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800211c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d047      	beq.n	80021ba <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212a:	f7ff fdf6 	bl	8001d1a <LL_RCC_GetSysClkSource>
 800212e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002130:	f7ff feef 	bl	8001f12 <LL_RCC_PLL_GetMainSource>
 8002134:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d005      	beq.n	8002148 <HAL_RCC_OscConfig+0x164>
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d108      	bne.n	8002154 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d105      	bne.n	8002154 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d134      	bne.n	80021ba <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e2b4      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0x180>
 800215e:	f7ff fbdd 	bl	800191c <LL_RCC_HSE_Enable>
 8002162:	e001      	b.n	8002168 <HAL_RCC_OscConfig+0x184>
 8002164:	f7ff fbe9 	bl	800193a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d012      	beq.n	8002196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe ffc0 	bl	80010f4 <HAL_GetTick>
 8002174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe ffbc 	bl	80010f4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e299      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800218a:	f7ff fbe5 	bl	8001958 <LL_RCC_HSE_IsReady>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f1      	beq.n	8002178 <HAL_RCC_OscConfig+0x194>
 8002194:	e011      	b.n	80021ba <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7fe ffad 	bl	80010f4 <HAL_GetTick>
 800219a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219e:	f7fe ffa9 	bl	80010f4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b64      	cmp	r3, #100	; 0x64
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e286      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80021b0:	f7ff fbd2 	bl	8001958 <LL_RCC_HSE_IsReady>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f1      	bne.n	800219e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d04c      	beq.n	8002260 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c6:	f7ff fda8 	bl	8001d1a <LL_RCC_GetSysClkSource>
 80021ca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021cc:	f7ff fea1 	bl	8001f12 <LL_RCC_PLL_GetMainSource>
 80021d0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_OscConfig+0x200>
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d10e      	bne.n	80021fc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d10b      	bne.n	80021fc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e266      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fbf1 	bl	80019dc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021fa:	e031      	b.n	8002260 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d019      	beq.n	8002238 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002204:	f7ff fbba 	bl	800197c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002208:	f7fe ff74 	bl	80010f4 <HAL_GetTick>
 800220c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002210:	f7fe ff70 	bl	80010f4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e24d      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002222:	f7ff fbc9 	bl	80019b8 <LL_RCC_HSI_IsReady>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f1      	beq.n	8002210 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fbd3 	bl	80019dc <LL_RCC_HSI_SetCalibTrimming>
 8002236:	e013      	b.n	8002260 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002238:	f7ff fbaf 	bl	800199a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe ff5a 	bl	80010f4 <HAL_GetTick>
 8002240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002244:	f7fe ff56 	bl	80010f4 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e233      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002256:	f7ff fbaf 	bl	80019b8 <LL_RCC_HSI_IsReady>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f1      	bne.n	8002244 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a3 	beq.w	80023c0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d076      	beq.n	8002370 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b00      	cmp	r3, #0
 800228c:	d046      	beq.n	800231c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800228e:	f7ff fc66 	bl	8001b5e <LL_RCC_LSI1_IsReady>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d113      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002298:	f7ff fc3f 	bl	8001b1a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800229c:	f7fe ff2a 	bl	80010f4 <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022a4:	f7fe ff26 	bl	80010f4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e203      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80022b6:	f7ff fc52 	bl	8001b5e <LL_RCC_LSI1_IsReady>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f1      	beq.n	80022a4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80022c0:	f7ff fc5f 	bl	8001b82 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe ff16 	bl	80010f4 <HAL_GetTick>
 80022c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022cc:	f7fe ff12 	bl	80010f4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1ef      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80022de:	f7ff fc72 	bl	8001bc6 <LL_RCC_LSI2_IsReady>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f1      	beq.n	80022cc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fc7c 	bl	8001bea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80022f2:	f7ff fc23 	bl	8001b3c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe fefd 	bl	80010f4 <HAL_GetTick>
 80022fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022fe:	f7fe fef9 	bl	80010f4 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1d6      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002310:	f7ff fc25 	bl	8001b5e <LL_RCC_LSI1_IsReady>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f1      	bne.n	80022fe <HAL_RCC_OscConfig+0x31a>
 800231a:	e051      	b.n	80023c0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800231c:	f7ff fbfd 	bl	8001b1a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe fee8 	bl	80010f4 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002326:	e00c      	b.n	8002342 <HAL_RCC_OscConfig+0x35e>
 8002328:	20000208 	.word	0x20000208
 800232c:	2000020c 	.word	0x2000020c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002330:	f7fe fee0 	bl	80010f4 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1bd      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002342:	f7ff fc0c 	bl	8001b5e <LL_RCC_LSI1_IsReady>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f1      	beq.n	8002330 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800234c:	f7ff fc2a 	bl	8001ba4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002352:	f7fe fecf 	bl	80010f4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b03      	cmp	r3, #3
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e1ac      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002364:	f7ff fc2f 	bl	8001bc6 <LL_RCC_LSI2_IsReady>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f1      	bne.n	8002352 <HAL_RCC_OscConfig+0x36e>
 800236e:	e027      	b.n	80023c0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002370:	f7ff fc18 	bl	8001ba4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7fe febe 	bl	80010f4 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800237c:	f7fe feba 	bl	80010f4 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b03      	cmp	r3, #3
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e197      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800238e:	f7ff fc1a 	bl	8001bc6 <LL_RCC_LSI2_IsReady>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f1      	bne.n	800237c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002398:	f7ff fbd0 	bl	8001b3c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7fe feaa 	bl	80010f4 <HAL_GetTick>
 80023a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023a4:	f7fe fea6 	bl	80010f4 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e183      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80023b6:	f7ff fbd2 	bl	8001b5e <LL_RCC_LSI1_IsReady>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f1      	bne.n	80023a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d05b      	beq.n	8002484 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023cc:	4ba7      	ldr	r3, [pc, #668]	; (800266c <HAL_RCC_OscConfig+0x688>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d114      	bne.n	8002402 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80023d8:	f7ff fa70 	bl	80018bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023dc:	f7fe fe8a 	bl	80010f4 <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e4:	f7fe fe86 	bl	80010f4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e163      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f6:	4b9d      	ldr	r3, [pc, #628]	; (800266c <HAL_RCC_OscConfig+0x688>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d102      	bne.n	8002410 <HAL_RCC_OscConfig+0x42c>
 800240a:	f7ff fb30 	bl	8001a6e <LL_RCC_LSE_Enable>
 800240e:	e00c      	b.n	800242a <HAL_RCC_OscConfig+0x446>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d104      	bne.n	8002422 <HAL_RCC_OscConfig+0x43e>
 8002418:	f7ff fb4b 	bl	8001ab2 <LL_RCC_LSE_EnableBypass>
 800241c:	f7ff fb27 	bl	8001a6e <LL_RCC_LSE_Enable>
 8002420:	e003      	b.n	800242a <HAL_RCC_OscConfig+0x446>
 8002422:	f7ff fb35 	bl	8001a90 <LL_RCC_LSE_Disable>
 8002426:	f7ff fb55 	bl	8001ad4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d014      	beq.n	800245c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002432:	f7fe fe5f 	bl	80010f4 <HAL_GetTick>
 8002436:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7fe fe5b 	bl	80010f4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e136      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002450:	f7ff fb51 	bl	8001af6 <LL_RCC_LSE_IsReady>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0ef      	beq.n	800243a <HAL_RCC_OscConfig+0x456>
 800245a:	e013      	b.n	8002484 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe fe4a 	bl	80010f4 <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002464:	f7fe fe46 	bl	80010f4 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e121      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800247a:	f7ff fb3c 	bl	8001af6 <LL_RCC_LSE_IsReady>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ef      	bne.n	8002464 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	d02c      	beq.n	80024ea <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	2b00      	cmp	r3, #0
 8002496:	d014      	beq.n	80024c2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002498:	f7ff fab5 	bl	8001a06 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7fe fe2a 	bl	80010f4 <HAL_GetTick>
 80024a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a4:	f7fe fe26 	bl	80010f4 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e103      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80024b6:	f7ff fac8 	bl	8001a4a <LL_RCC_HSI48_IsReady>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f1      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4c0>
 80024c0:	e013      	b.n	80024ea <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024c2:	f7ff fab1 	bl	8001a28 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe fe15 	bl	80010f4 <HAL_GetTick>
 80024ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ce:	f7fe fe11 	bl	80010f4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0ee      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80024e0:	f7ff fab3 	bl	8001a4a <LL_RCC_HSI48_IsReady>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f1      	bne.n	80024ce <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80e4 	beq.w	80026bc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f4:	f7ff fc11 	bl	8001d1a <LL_RCC_GetSysClkSource>
 80024f8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	2b02      	cmp	r3, #2
 8002508:	f040 80b4 	bne.w	8002674 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0203 	and.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	429a      	cmp	r2, r3
 8002518:	d123      	bne.n	8002562 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d11c      	bne.n	8002562 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d114      	bne.n	8002562 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d10d      	bne.n	8002562 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d05d      	beq.n	800261e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d058      	beq.n	800261a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0a1      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800257a:	f7ff fc84 	bl	8001e86 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800257e:	f7fe fdb9 	bl	80010f4 <HAL_GetTick>
 8002582:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe fdb5 	bl	80010f4 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e092      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1ef      	bne.n	8002586 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	4b30      	ldr	r3, [pc, #192]	; (8002670 <HAL_RCC_OscConfig+0x68c>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025b8:	4311      	orrs	r1, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025be:	0212      	lsls	r2, r2, #8
 80025c0:	4311      	orrs	r1, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025d2:	430a      	orrs	r2, r1
 80025d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d8:	4313      	orrs	r3, r2
 80025da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025dc:	f7ff fc44 	bl	8001e68 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025f0:	f7fe fd80 	bl	80010f4 <HAL_GetTick>
 80025f4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fd7c 	bl	80010f4 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e059      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002618:	e050      	b.n	80026bc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e04f      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d147      	bne.n	80026bc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800262c:	f7ff fc1c 	bl	8001e68 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002640:	f7fe fd58 	bl	80010f4 <HAL_GetTick>
 8002644:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe fd54 	bl	80010f4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e031      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ef      	beq.n	8002648 <HAL_RCC_OscConfig+0x664>
 8002668:	e028      	b.n	80026bc <HAL_RCC_OscConfig+0x6d8>
 800266a:	bf00      	nop
 800266c:	58000400 	.word	0x58000400
 8002670:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d01e      	beq.n	80026b8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	f7ff fc04 	bl	8001e86 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7fe fd39 	bl	80010f4 <HAL_GetTick>
 8002682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002686:	f7fe fd35 	bl	80010f4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e012      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ef      	bne.n	8002686 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_OscConfig+0x6e4>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	60cb      	str	r3, [r1, #12]
 80026b6:	e001      	b.n	80026bc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3734      	adds	r7, #52	; 0x34
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd90      	pop	{r4, r7, pc}
 80026c6:	bf00      	nop
 80026c8:	eefefffc 	.word	0xeefefffc

080026cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e12d      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b98      	ldr	r3, [pc, #608]	; (8002944 <HAL_RCC_ClockConfig+0x278>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d91b      	bls.n	8002726 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b95      	ldr	r3, [pc, #596]	; (8002944 <HAL_RCC_ClockConfig+0x278>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4993      	ldr	r1, [pc, #588]	; (8002944 <HAL_RCC_ClockConfig+0x278>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fe:	f7fe fcf9 	bl	80010f4 <HAL_GetTick>
 8002702:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002704:	e008      	b.n	8002718 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002706:	f7fe fcf5 	bl	80010f4 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e111      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002718:	4b8a      	ldr	r3, [pc, #552]	; (8002944 <HAL_RCC_ClockConfig+0x278>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d1ef      	bne.n	8002706 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d016      	beq.n	8002760 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fafb 	bl	8001d32 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800273c:	f7fe fcda 	bl	80010f4 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002744:	f7fe fcd6 	bl	80010f4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e0f2      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002756:	f7ff fbe8 	bl	8001f2a <LL_RCC_IsActiveFlag_HPRE>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f1      	beq.n	8002744 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d016      	beq.n	800279a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff faf2 	bl	8001d5a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002776:	f7fe fcbd 	bl	80010f4 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800277e:	f7fe fcb9 	bl	80010f4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0d5      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002790:	f7ff fbdd 	bl	8001f4e <LL_RCC_IsActiveFlag_C2HPRE>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f1      	beq.n	800277e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff faeb 	bl	8001d86 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027b0:	f7fe fca0 	bl	80010f4 <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027b8:	f7fe fc9c 	bl	80010f4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0b8      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027ca:	f7ff fbd3 	bl	8001f74 <LL_RCC_IsActiveFlag_SHDHPRE>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f1      	beq.n	80027b8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d016      	beq.n	800280e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fae5 	bl	8001db4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027ea:	f7fe fc83 	bl	80010f4 <HAL_GetTick>
 80027ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027f2:	f7fe fc7f 	bl	80010f4 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e09b      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002804:	f7ff fbc9 	bl	8001f9a <LL_RCC_IsActiveFlag_PPRE1>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f1      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d017      	beq.n	800284a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fadb 	bl	8001ddc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002826:	f7fe fc65 	bl	80010f4 <HAL_GetTick>
 800282a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800282e:	f7fe fc61 	bl	80010f4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e07d      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002840:	f7ff fbbd 	bl	8001fbe <LL_RCC_IsActiveFlag_PPRE2>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f1      	beq.n	800282e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d043      	beq.n	80028de <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d106      	bne.n	800286c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800285e:	f7ff f87b 	bl	8001958 <LL_RCC_HSE_IsReady>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d11e      	bne.n	80028a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e067      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d106      	bne.n	8002882 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002874:	f7ff fb16 	bl	8001ea4 <LL_RCC_PLL_IsReady>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d113      	bne.n	80028a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e05c      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800288a:	f7ff f9e3 	bl	8001c54 <LL_RCC_MSI_IsReady>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d108      	bne.n	80028a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e051      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002898:	f7ff f88e 	bl	80019b8 <LL_RCC_HSI_IsReady>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e04a      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fa21 	bl	8001cf2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b0:	f7fe fc20 	bl	80010f4 <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b8:	f7fe fc1c 	bl	80010f4 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e036      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	f7ff fa24 	bl	8001d1a <LL_RCC_GetSysClkSource>
 80028d2:	4602      	mov	r2, r0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	429a      	cmp	r2, r3
 80028dc:	d1ec      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCC_ClockConfig+0x278>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d21b      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_RCC_ClockConfig+0x278>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f023 0207 	bic.w	r2, r3, #7
 80028f4:	4913      	ldr	r1, [pc, #76]	; (8002944 <HAL_RCC_ClockConfig+0x278>)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fe fbfa 	bl	80010f4 <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	e008      	b.n	8002916 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002904:	f7fe fbf6 	bl	80010f4 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e012      	b.n	800293c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_ClockConfig+0x278>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d1ef      	bne.n	8002904 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002924:	f000 f87e 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8002928:	4603      	mov	r3, r0
 800292a:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_RCC_ClockConfig+0x27c>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800292e:	f7fe fbed 	bl	800110c <HAL_GetTickPrio>
 8002932:	4603      	mov	r3, r0
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fb8f 	bl	8001058 <HAL_InitTick>
 800293a:	4603      	mov	r3, r0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	58004000 	.word	0x58004000
 8002948:	20000208 	.word	0x20000208

0800294c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002952:	f7ff f9e2 	bl	8001d1a <LL_RCC_GetSysClkSource>
 8002956:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800295e:	f7ff f99e 	bl	8001c9e <LL_RCC_MSI_GetRange>
 8002962:	4603      	mov	r3, r0
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	4a2b      	ldr	r2, [pc, #172]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xcc>)
 800296c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	e04b      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b04      	cmp	r3, #4
 8002978:	d102      	bne.n	8002980 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800297a:	4b28      	ldr	r3, [pc, #160]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xd0>)
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	e045      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b08      	cmp	r3, #8
 8002984:	d10a      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002986:	f7fe ffb7 	bl	80018f8 <LL_RCC_HSE_IsEnabledDiv2>
 800298a:	4603      	mov	r3, r0
 800298c:	2b01      	cmp	r3, #1
 800298e:	d102      	bne.n	8002996 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002990:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e03a      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	e037      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800299c:	f7ff fab9 	bl	8001f12 <LL_RCC_PLL_GetMainSource>
 80029a0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d003      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x64>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x6a>
 80029ae:	e00d      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029b2:	60bb      	str	r3, [r7, #8]
        break;
 80029b4:	e015      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029b6:	f7fe ff9f 	bl	80018f8 <LL_RCC_HSE_IsEnabledDiv2>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xd0>)
 80029c2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80029c4:	e00d      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_RCC_GetSysClockFreq+0xd4>)
 80029c8:	60bb      	str	r3, [r7, #8]
        break;
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80029cc:	f7ff f967 	bl	8001c9e <LL_RCC_MSI_GetRange>
 80029d0:	4603      	mov	r3, r0
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	4a0f      	ldr	r2, [pc, #60]	; (8002a18 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	60bb      	str	r3, [r7, #8]
        break;
 80029e0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80029e2:	f7ff fa71 	bl	8001ec8 <LL_RCC_PLL_GetN>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	fb03 f402 	mul.w	r4, r3, r2
 80029ee:	f7ff fa84 	bl	8001efa <LL_RCC_PLL_GetDivider>
 80029f2:	4603      	mov	r3, r0
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	3301      	adds	r3, #1
 80029f8:	fbb4 f4f3 	udiv	r4, r4, r3
 80029fc:	f7ff fa71 	bl	8001ee2 <LL_RCC_PLL_GetR>
 8002a00:	4603      	mov	r3, r0
 8002a02:	0f5b      	lsrs	r3, r3, #29
 8002a04:	3301      	adds	r3, #1
 8002a06:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd90      	pop	{r4, r7, pc}
 8002a16:	bf00      	nop
 8002a18:	08004164 	.word	0x08004164
 8002a1c:	00f42400 	.word	0x00f42400
 8002a20:	01e84800 	.word	0x01e84800

08002a24 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a24:	b598      	push	{r3, r4, r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002a28:	f7ff ff90 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	f7ff f9e9 	bl	8001e04 <LL_RCC_GetAHBPrescaler>
 8002a32:	4603      	mov	r3, r0
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	4a03      	ldr	r2, [pc, #12]	; (8002a48 <HAL_RCC_GetHCLKFreq+0x24>)
 8002a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a40:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd98      	pop	{r3, r4, r7, pc}
 8002a48:	08004104 	.word	0x08004104

08002a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a4c:	b598      	push	{r3, r4, r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a50:	f7ff ffe8 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8002a54:	4604      	mov	r4, r0
 8002a56:	f7ff f9ef 	bl	8001e38 <LL_RCC_GetAPB1Prescaler>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd98      	pop	{r3, r4, r7, pc}
 8002a74:	08004144 	.word	0x08004144

08002a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a78:	b598      	push	{r3, r4, r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a7c:	f7ff ffd2 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8002a80:	4604      	mov	r4, r0
 8002a82:	f7ff f9e5 	bl	8001e50 <LL_RCC_GetAPB2Prescaler>
 8002a86:	4603      	mov	r3, r0
 8002a88:	0adb      	lsrs	r3, r3, #11
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd98      	pop	{r3, r4, r7, pc}
 8002aa0:	08004144 	.word	0x08004144

08002aa4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2bb0      	cmp	r3, #176	; 0xb0
 8002ab0:	d903      	bls.n	8002aba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e007      	b.n	8002aca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002aca:	f7ff f9a7 	bl	8001e1c <LL_RCC_GetAHB4Prescaler>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	0c9c      	lsrs	r4, r3, #18
 8002aee:	f7fe fef5 	bl	80018dc <HAL_PWREx_GetVoltageRange>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4619      	mov	r1, r3
 8002af6:	4620      	mov	r0, r4
 8002af8:	f000 f80c 	bl	8002b14 <RCC_SetFlashLatency>
 8002afc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	08004164 	.word	0x08004164
 8002b0c:	08004104 	.word	0x08004104
 8002b10:	431bde83 	.word	0x431bde83

08002b14 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b093      	sub	sp, #76	; 0x4c
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b1e:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <RCC_SetFlashLatency+0xe8>)
 8002b20:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b2a:	4a35      	ldr	r2, [pc, #212]	; (8002c00 <RCC_SetFlashLatency+0xec>)
 8002b2c:	f107 031c 	add.w	r3, r7, #28
 8002b30:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b36:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <RCC_SetFlashLatency+0xf0>)
 8002b38:	f107 040c 	add.w	r4, r7, #12
 8002b3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b42:	2300      	movs	r3, #0
 8002b44:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4c:	d11a      	bne.n	8002b84 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	643b      	str	r3, [r7, #64]	; 0x40
 8002b52:	e013      	b.n	8002b7c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	3348      	adds	r3, #72	; 0x48
 8002b5a:	443b      	add	r3, r7
 8002b5c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d807      	bhi.n	8002b76 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	3348      	adds	r3, #72	; 0x48
 8002b6c:	443b      	add	r3, r7
 8002b6e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b72:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b74:	e020      	b.n	8002bb8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b78:	3301      	adds	r3, #1
 8002b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d9e8      	bls.n	8002b54 <RCC_SetFlashLatency+0x40>
 8002b82:	e019      	b.n	8002bb8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b88:	e013      	b.n	8002bb2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	3348      	adds	r3, #72	; 0x48
 8002b90:	443b      	add	r3, r7
 8002b92:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d807      	bhi.n	8002bac <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	3348      	adds	r3, #72	; 0x48
 8002ba2:	443b      	add	r3, r7
 8002ba4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ba8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002baa:	e005      	b.n	8002bb8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bae:	3301      	adds	r3, #1
 8002bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d9e8      	bls.n	8002b8a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <RCC_SetFlashLatency+0xf4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 0207 	bic.w	r2, r3, #7
 8002bc0:	4911      	ldr	r1, [pc, #68]	; (8002c08 <RCC_SetFlashLatency+0xf4>)
 8002bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bc8:	f7fe fa94 	bl	80010f4 <HAL_GetTick>
 8002bcc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bce:	e008      	b.n	8002be2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bd0:	f7fe fa90 	bl	80010f4 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e007      	b.n	8002bf2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <RCC_SetFlashLatency+0xf4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1ef      	bne.n	8002bd0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	374c      	adds	r7, #76	; 0x4c
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd90      	pop	{r4, r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	080040d8 	.word	0x080040d8
 8002c00:	080040e8 	.word	0x080040e8
 8002c04:	080040f4 	.word	0x080040f4
 8002c08:	58004000 	.word	0x58004000

08002c0c <LL_RCC_LSE_IsEnabled>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <LL_RCC_LSE_IsEnabled+0x18>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <LL_RCC_LSE_IsEnabled+0x1a>
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_RCC_LSE_IsReady>:
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d101      	bne.n	8002c48 <LL_RCC_LSE_IsReady+0x18>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <LL_RCC_LSE_IsReady+0x1a>
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_MSI_EnablePLLMode>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c62:	f043 0304 	orr.w	r3, r3, #4
 8002c66:	6013      	str	r3, [r2, #0]
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_RCC_SetRFWKPClockSource>:
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_RCC_SetSMPSClockSource>:
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f023 0203 	bic.w	r2, r3, #3
 8002cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_RCC_SetSMPSPrescaler>:
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_RCC_SetUSARTClockSource>:
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f023 0203 	bic.w	r2, r3, #3
 8002d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <LL_RCC_SetLPUARTClockSource>:
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_RCC_SetI2CClockSource>:
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	401a      	ands	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_RCC_SetLPTIMClockSource>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0c1b      	lsrs	r3, r3, #16
 8002d94:	041b      	lsls	r3, r3, #16
 8002d96:	43db      	mvns	r3, r3
 8002d98:	401a      	ands	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_RCC_SetSAIClockSource>:
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_RCC_SetRNGClockSource>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_RCC_SetCLK48ClockSource>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_RCC_SetUSBClockSource>:
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ffe3 	bl	8002e0c <LL_RCC_SetCLK48ClockSource>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <LL_RCC_SetADCClockSource>:
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_RCC_SetRTCClockSource>:
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <LL_RCC_GetRTCClockSource>:
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_RCC_ForceBackupDomainReset>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_PLLSAI1_Enable>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_RCC_PLLSAI1_Disable>:
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f34:	6013      	str	r3, [r2, #0]
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_RCC_PLLSAI1_IsReady>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f52:	d101      	bne.n	8002f58 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f70:	2300      	movs	r3, #0
 8002f72:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d034      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f88:	d021      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002f8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f8e:	d81b      	bhi.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f94:	d01d      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002f96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f9a:	d815      	bhi.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa4:	d110      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fb6:	e00d      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f94d 	bl	800325c <RCCEx_PLLSAI1_ConfigNP>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fc6:	e005      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	77fb      	strb	r3, [r7, #31]
        break;
 8002fcc:	e002      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fce:	bf00      	nop
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fee8 	bl	8002db4 <LL_RCC_SetSAIClockSource>
 8002fe4:	e001      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe6:	7ffb      	ldrb	r3, [r7, #31]
 8002fe8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d046      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002ff6:	f7ff ff56 	bl	8002ea6 <LL_RCC_GetRTCClockSource>
 8002ffa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	429a      	cmp	r2, r3
 8003004:	d03c      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003006:	f7fe fc59 	bl	80018bc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff30 	bl	8002e7a <LL_RCC_SetRTCClockSource>
 800301a:	e02e      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003026:	f7ff ff4b 	bl	8002ec0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800302a:	f7ff ff5a 	bl	8002ee2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800303c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003046:	f7ff fde1 	bl	8002c0c <LL_RCC_LSE_IsEnabled>
 800304a:	4603      	mov	r3, r0
 800304c:	2b01      	cmp	r3, #1
 800304e:	d114      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003050:	f7fe f850 	bl	80010f4 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003056:	e00b      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fe f84c 	bl	80010f4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d902      	bls.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	77fb      	strb	r3, [r7, #31]
              break;
 800306e:	e004      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003070:	f7ff fdde 	bl	8002c30 <LL_RCC_LSE_IsReady>
 8003074:	4603      	mov	r3, r0
 8003076:	2b01      	cmp	r3, #1
 8003078:	d1ee      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800307a:	7ffb      	ldrb	r3, [r7, #31]
 800307c:	77bb      	strb	r3, [r7, #30]
 800307e:	e001      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003080:	7ffb      	ldrb	r3, [r7, #31]
 8003082:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fe2a 	bl	8002cee <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fe35 	bl	8002d1a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fe5d 	bl	8002d80 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d004      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fe52 	bl	8002d80 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fe2a 	bl	8002d46 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fe1f 	bl	8002d46 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d022      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fe8d 	bl	8002e38 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003126:	d107      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003136:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003140:	d10b      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f8e3 	bl	8003312 <RCCEx_PLLSAI1_ConfigNQ>
 800314c:	4603      	mov	r3, r0
 800314e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003150:	7ffb      	ldrb	r3, [r7, #31]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003156:	7ffb      	ldrb	r3, [r7, #31]
 8003158:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	2b00      	cmp	r3, #0
 8003164:	d02b      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316e:	d008      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003178:	d003      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317e:	2b00      	cmp	r3, #0
 8003180:	d105      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fe2a 	bl	8002de0 <LL_RCC_SetRNGClockSource>
 800318c:	e00a      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	2000      	movs	r0, #0
 800319a:	f7ff fe21 	bl	8002de0 <LL_RCC_SetRNGClockSource>
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7ff fe34 	bl	8002e0c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80031ac:	d107      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d022      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fe3d 	bl	8002e4e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031dc:	d107      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031f6:	d10b      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3304      	adds	r3, #4
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f8e3 	bl	80033c8 <RCCEx_PLLSAI1_ConfigNR>
 8003202:	4603      	mov	r3, r0
 8003204:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003206:	7ffb      	ldrb	r3, [r7, #31]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800320c:	7ffb      	ldrb	r3, [r7, #31]
 800320e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d004      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fd26 	bl	8002c72 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fd45 	bl	8002cc6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fd2c 	bl	8002c9e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003246:	7fbb      	ldrb	r3, [r7, #30]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003254:	f7ff fcfe 	bl	8002c54 <LL_RCC_MSI_EnablePLLMode>
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}

0800325c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003268:	f7ff fe5b 	bl	8002f22 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800326c:	f7fd ff42 	bl	80010f4 <HAL_GetTick>
 8003270:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003272:	e009      	b.n	8003288 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003274:	f7fd ff3e 	bl	80010f4 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d902      	bls.n	8003288 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	73fb      	strb	r3, [r7, #15]
      break;
 8003286:	e004      	b.n	8003292 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003288:	f7ff fe5a 	bl	8002f40 <LL_RCC_PLLSAI1_IsReady>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d137      	bne.n	8003308 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ac:	4313      	orrs	r3, r2
 80032ae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80032b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c2:	4313      	orrs	r3, r2
 80032c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032c6:	f7ff fe1d 	bl	8002f04 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ca:	f7fd ff13 	bl	80010f4 <HAL_GetTick>
 80032ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032d0:	e009      	b.n	80032e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d2:	f7fd ff0f 	bl	80010f4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d902      	bls.n	80032e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	73fb      	strb	r3, [r7, #15]
        break;
 80032e4:	e004      	b.n	80032f0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032e6:	f7ff fe2b 	bl	8002f40 <LL_RCC_PLLSAI1_IsReady>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d1f0      	bne.n	80032d2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d108      	bne.n	8003308 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003304:	4313      	orrs	r3, r2
 8003306:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800331e:	f7ff fe00 	bl	8002f22 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003322:	f7fd fee7 	bl	80010f4 <HAL_GetTick>
 8003326:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003328:	e009      	b.n	800333e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800332a:	f7fd fee3 	bl	80010f4 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d902      	bls.n	800333e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	73fb      	strb	r3, [r7, #15]
      break;
 800333c:	e004      	b.n	8003348 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800333e:	f7ff fdff 	bl	8002f40 <LL_RCC_PLLSAI1_IsReady>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f0      	bne.n	800332a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d137      	bne.n	80033be <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003362:	4313      	orrs	r3, r2
 8003364:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003378:	4313      	orrs	r3, r2
 800337a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800337c:	f7ff fdc2 	bl	8002f04 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003380:	f7fd feb8 	bl	80010f4 <HAL_GetTick>
 8003384:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003386:	e009      	b.n	800339c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003388:	f7fd feb4 	bl	80010f4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d902      	bls.n	800339c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	73fb      	strb	r3, [r7, #15]
        break;
 800339a:	e004      	b.n	80033a6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800339c:	f7ff fdd0 	bl	8002f40 <LL_RCC_PLLSAI1_IsReady>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d1f0      	bne.n	8003388 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d108      	bne.n	80033be <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ba:	4313      	orrs	r3, r2
 80033bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80033be:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033d4:	f7ff fda5 	bl	8002f22 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033d8:	f7fd fe8c 	bl	80010f4 <HAL_GetTick>
 80033dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033de:	e009      	b.n	80033f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e0:	f7fd fe88 	bl	80010f4 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d902      	bls.n	80033f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	73fb      	strb	r3, [r7, #15]
      break;
 80033f2:	e004      	b.n	80033fe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033f4:	f7ff fda4 	bl	8002f40 <LL_RCC_PLLSAI1_IsReady>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d137      	bne.n	8003474 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003418:	4313      	orrs	r3, r2
 800341a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800342e:	4313      	orrs	r3, r2
 8003430:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003432:	f7ff fd67 	bl	8002f04 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003436:	f7fd fe5d 	bl	80010f4 <HAL_GetTick>
 800343a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800343c:	e009      	b.n	8003452 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800343e:	f7fd fe59 	bl	80010f4 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d902      	bls.n	8003452 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	73fb      	strb	r3, [r7, #15]
        break;
 8003450:	e004      	b.n	800345c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003452:	f7ff fd75 	bl	8002f40 <LL_RCC_PLLSAI1_IsReady>
 8003456:	4603      	mov	r3, r0
 8003458:	2b01      	cmp	r3, #1
 800345a:	d1f0      	bne.n	800343e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d108      	bne.n	8003474 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003470:	4313      	orrs	r3, r2
 8003472:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003474:	7bfb      	ldrb	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <LL_RCC_GetUSARTClockSource>:
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4013      	ands	r3, r2
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_RCC_GetLPUARTClockSource>:
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4013      	ands	r3, r2
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e042      	b.n	8003556 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd fc30 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2224      	movs	r2, #36	; 0x24
 80034ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0201 	bic.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fa51 	bl	80039b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f826 	bl	8003560 <UART_SetConfig>
 8003514:	4603      	mov	r3, r0
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e01b      	b.n	8003556 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800352c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800353c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fad0 	bl	8003af4 <UART_CheckIdleState>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003564:	b08c      	sub	sp, #48	; 0x30
 8003566:	af00      	add	r7, sp, #0
 8003568:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	431a      	orrs	r2, r3
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	431a      	orrs	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	4313      	orrs	r3, r2
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4baf      	ldr	r3, [pc, #700]	; (800384c <UART_SetConfig+0x2ec>)
 8003590:	4013      	ands	r3, r2
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003598:	430b      	orrs	r3, r1
 800359a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4aa4      	ldr	r2, [pc, #656]	; (8003850 <UART_SetConfig+0x2f0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035c8:	4313      	orrs	r3, r2
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80035d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035e0:	430b      	orrs	r3, r1
 80035e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	f023 010f 	bic.w	r1, r3, #15
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a95      	ldr	r2, [pc, #596]	; (8003854 <UART_SetConfig+0x2f4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d125      	bne.n	8003650 <UART_SetConfig+0xf0>
 8003604:	2003      	movs	r0, #3
 8003606:	f7ff ff3a 	bl	800347e <LL_RCC_GetUSARTClockSource>
 800360a:	4603      	mov	r3, r0
 800360c:	2b03      	cmp	r3, #3
 800360e:	d81b      	bhi.n	8003648 <UART_SetConfig+0xe8>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <UART_SetConfig+0xb8>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	08003639 	.word	0x08003639
 8003620:	08003631 	.word	0x08003631
 8003624:	08003641 	.word	0x08003641
 8003628:	2301      	movs	r3, #1
 800362a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362e:	e042      	b.n	80036b6 <UART_SetConfig+0x156>
 8003630:	2302      	movs	r3, #2
 8003632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003636:	e03e      	b.n	80036b6 <UART_SetConfig+0x156>
 8003638:	2304      	movs	r3, #4
 800363a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363e:	e03a      	b.n	80036b6 <UART_SetConfig+0x156>
 8003640:	2308      	movs	r3, #8
 8003642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003646:	e036      	b.n	80036b6 <UART_SetConfig+0x156>
 8003648:	2310      	movs	r3, #16
 800364a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364e:	e032      	b.n	80036b6 <UART_SetConfig+0x156>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a7e      	ldr	r2, [pc, #504]	; (8003850 <UART_SetConfig+0x2f0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d12a      	bne.n	80036b0 <UART_SetConfig+0x150>
 800365a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800365e:	f7ff ff1e 	bl	800349e <LL_RCC_GetLPUARTClockSource>
 8003662:	4603      	mov	r3, r0
 8003664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003668:	d01a      	beq.n	80036a0 <UART_SetConfig+0x140>
 800366a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800366e:	d81b      	bhi.n	80036a8 <UART_SetConfig+0x148>
 8003670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003674:	d00c      	beq.n	8003690 <UART_SetConfig+0x130>
 8003676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367a:	d815      	bhi.n	80036a8 <UART_SetConfig+0x148>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <UART_SetConfig+0x128>
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d008      	beq.n	8003698 <UART_SetConfig+0x138>
 8003686:	e00f      	b.n	80036a8 <UART_SetConfig+0x148>
 8003688:	2300      	movs	r3, #0
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800368e:	e012      	b.n	80036b6 <UART_SetConfig+0x156>
 8003690:	2302      	movs	r3, #2
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003696:	e00e      	b.n	80036b6 <UART_SetConfig+0x156>
 8003698:	2304      	movs	r3, #4
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800369e:	e00a      	b.n	80036b6 <UART_SetConfig+0x156>
 80036a0:	2308      	movs	r3, #8
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036a6:	e006      	b.n	80036b6 <UART_SetConfig+0x156>
 80036a8:	2310      	movs	r3, #16
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ae:	e002      	b.n	80036b6 <UART_SetConfig+0x156>
 80036b0:	2310      	movs	r3, #16
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a65      	ldr	r2, [pc, #404]	; (8003850 <UART_SetConfig+0x2f0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	f040 8097 	bne.w	80037f0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d823      	bhi.n	8003712 <UART_SetConfig+0x1b2>
 80036ca:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <UART_SetConfig+0x170>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	08003713 	.word	0x08003713
 80036d8:	080036fd 	.word	0x080036fd
 80036dc:	08003713 	.word	0x08003713
 80036e0:	08003703 	.word	0x08003703
 80036e4:	08003713 	.word	0x08003713
 80036e8:	08003713 	.word	0x08003713
 80036ec:	08003713 	.word	0x08003713
 80036f0:	0800370b 	.word	0x0800370b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7ff f9aa 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 80036f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036fa:	e010      	b.n	800371e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036fc:	4b56      	ldr	r3, [pc, #344]	; (8003858 <UART_SetConfig+0x2f8>)
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003700:	e00d      	b.n	800371e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003702:	f7ff f923 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8003706:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003708:	e009      	b.n	800371e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003710:	e005      	b.n	800371e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800371c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 812b 	beq.w	800397c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	4a4c      	ldr	r2, [pc, #304]	; (800385c <UART_SetConfig+0x2fc>)
 800372c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003730:	461a      	mov	r2, r3
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	fbb3 f3f2 	udiv	r3, r3, r2
 8003738:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4413      	add	r3, r2
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	429a      	cmp	r2, r3
 8003748:	d305      	bcc.n	8003756 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	429a      	cmp	r2, r3
 8003754:	d903      	bls.n	800375e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800375c:	e10e      	b.n	800397c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	2200      	movs	r2, #0
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	60fa      	str	r2, [r7, #12]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	4a3c      	ldr	r2, [pc, #240]	; (800385c <UART_SetConfig+0x2fc>)
 800376c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003770:	b29b      	uxth	r3, r3
 8003772:	2200      	movs	r2, #0
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800377c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003780:	f7fc fcfc 	bl	800017c <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	020b      	lsls	r3, r1, #8
 8003796:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800379a:	0202      	lsls	r2, r0, #8
 800379c:	6979      	ldr	r1, [r7, #20]
 800379e:	6849      	ldr	r1, [r1, #4]
 80037a0:	0849      	lsrs	r1, r1, #1
 80037a2:	2000      	movs	r0, #0
 80037a4:	460c      	mov	r4, r1
 80037a6:	4605      	mov	r5, r0
 80037a8:	eb12 0804 	adds.w	r8, r2, r4
 80037ac:	eb43 0905 	adc.w	r9, r3, r5
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	469a      	mov	sl, r3
 80037b8:	4693      	mov	fp, r2
 80037ba:	4652      	mov	r2, sl
 80037bc:	465b      	mov	r3, fp
 80037be:	4640      	mov	r0, r8
 80037c0:	4649      	mov	r1, r9
 80037c2:	f7fc fcdb 	bl	800017c <__aeabi_uldivmod>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4613      	mov	r3, r2
 80037cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037d4:	d308      	bcc.n	80037e8 <UART_SetConfig+0x288>
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037dc:	d204      	bcs.n	80037e8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a3a      	ldr	r2, [r7, #32]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	e0c9      	b.n	800397c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037ee:	e0c5      	b.n	800397c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f8:	d16d      	bne.n	80038d6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80037fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037fe:	3b01      	subs	r3, #1
 8003800:	2b07      	cmp	r3, #7
 8003802:	d82d      	bhi.n	8003860 <UART_SetConfig+0x300>
 8003804:	a201      	add	r2, pc, #4	; (adr r2, 800380c <UART_SetConfig+0x2ac>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	0800382d 	.word	0x0800382d
 8003810:	08003835 	.word	0x08003835
 8003814:	08003861 	.word	0x08003861
 8003818:	0800383b 	.word	0x0800383b
 800381c:	08003861 	.word	0x08003861
 8003820:	08003861 	.word	0x08003861
 8003824:	08003861 	.word	0x08003861
 8003828:	08003843 	.word	0x08003843
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800382c:	f7ff f924 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 8003830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003832:	e01b      	b.n	800386c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003834:	4b08      	ldr	r3, [pc, #32]	; (8003858 <UART_SetConfig+0x2f8>)
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003838:	e018      	b.n	800386c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383a:	f7ff f887 	bl	800294c <HAL_RCC_GetSysClockFreq>
 800383e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003840:	e014      	b.n	800386c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003848:	e010      	b.n	800386c <UART_SetConfig+0x30c>
 800384a:	bf00      	nop
 800384c:	cfff69f3 	.word	0xcfff69f3
 8003850:	40008000 	.word	0x40008000
 8003854:	40013800 	.word	0x40013800
 8003858:	00f42400 	.word	0x00f42400
 800385c:	080041a4 	.word	0x080041a4
      default:
        pclk = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800386a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8084 	beq.w	800397c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	4a4b      	ldr	r2, [pc, #300]	; (80039a8 <UART_SetConfig+0x448>)
 800387a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800387e:	461a      	mov	r2, r3
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	fbb3 f3f2 	udiv	r3, r3, r2
 8003886:	005a      	lsls	r2, r3, #1
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	441a      	add	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	2b0f      	cmp	r3, #15
 800389e:	d916      	bls.n	80038ce <UART_SetConfig+0x36e>
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a6:	d212      	bcs.n	80038ce <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f023 030f 	bic.w	r3, r3, #15
 80038b0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	b29a      	uxth	r2, r3
 80038be:	8bfb      	ldrh	r3, [r7, #30]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	8bfa      	ldrh	r2, [r7, #30]
 80038ca:	60da      	str	r2, [r3, #12]
 80038cc:	e056      	b.n	800397c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038d4:	e052      	b.n	800397c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038da:	3b01      	subs	r3, #1
 80038dc:	2b07      	cmp	r3, #7
 80038de:	d822      	bhi.n	8003926 <UART_SetConfig+0x3c6>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <UART_SetConfig+0x388>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	08003909 	.word	0x08003909
 80038ec:	08003911 	.word	0x08003911
 80038f0:	08003927 	.word	0x08003927
 80038f4:	08003917 	.word	0x08003917
 80038f8:	08003927 	.word	0x08003927
 80038fc:	08003927 	.word	0x08003927
 8003900:	08003927 	.word	0x08003927
 8003904:	0800391f 	.word	0x0800391f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7ff f8b6 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 800390c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800390e:	e010      	b.n	8003932 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003910:	4b26      	ldr	r3, [pc, #152]	; (80039ac <UART_SetConfig+0x44c>)
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003914:	e00d      	b.n	8003932 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003916:	f7ff f819 	bl	800294c <HAL_RCC_GetSysClockFreq>
 800391a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800391c:	e009      	b.n	8003932 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003924:	e005      	b.n	8003932 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003930:	bf00      	nop
    }

    if (pclk != 0U)
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	2b00      	cmp	r3, #0
 8003936:	d021      	beq.n	800397c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <UART_SetConfig+0x448>)
 800393e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003942:	461a      	mov	r2, r3
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	fbb3 f2f2 	udiv	r2, r3, r2
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	441a      	add	r2, r3
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	2b0f      	cmp	r3, #15
 8003960:	d909      	bls.n	8003976 <UART_SetConfig+0x416>
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003968:	d205      	bcs.n	8003976 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	b29a      	uxth	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60da      	str	r2, [r3, #12]
 8003974:	e002      	b.n	800397c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2201      	movs	r2, #1
 8003980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	2201      	movs	r2, #1
 8003988:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003998:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800399c:	4618      	mov	r0, r3
 800399e:	3730      	adds	r7, #48	; 0x30
 80039a0:	46bd      	mov	sp, r7
 80039a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a6:	bf00      	nop
 80039a8:	080041a4 	.word	0x080041a4
 80039ac:	00f42400 	.word	0x00f42400

080039b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01a      	beq.n	8003ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aae:	d10a      	bne.n	8003ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]
  }
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b098      	sub	sp, #96	; 0x60
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b04:	f7fd faf6 	bl	80010f4 <HAL_GetTick>
 8003b08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d12f      	bne.n	8003b78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b20:	2200      	movs	r2, #0
 8003b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f88e 	bl	8003c48 <UART_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d022      	beq.n	8003b78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b46:	653b      	str	r3, [r7, #80]	; 0x50
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b50:	647b      	str	r3, [r7, #68]	; 0x44
 8003b52:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e6      	bne.n	8003b32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e063      	b.n	8003c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d149      	bne.n	8003c1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f857 	bl	8003c48 <UART_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d03c      	beq.n	8003c1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	623b      	str	r3, [r7, #32]
   return(result);
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e6      	bne.n	8003ba0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bf2:	61fa      	str	r2, [r7, #28]
 8003bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	69b9      	ldr	r1, [r7, #24]
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e5      	bne.n	8003bd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e012      	b.n	8003c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3758      	adds	r7, #88	; 0x58
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c58:	e04f      	b.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d04b      	beq.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c62:	f7fd fa47 	bl	80010f4 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d302      	bcc.n	8003c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e04e      	b.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d037      	beq.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b80      	cmp	r3, #128	; 0x80
 8003c8e:	d034      	beq.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d031      	beq.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d110      	bne.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f838 	bl	8003d22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e029      	b.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd4:	d111      	bne.n	8003cfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f81e 	bl	8003d22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e00f      	b.n	8003d1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	bf0c      	ite	eq
 8003d0a:	2301      	moveq	r3, #1
 8003d0c:	2300      	movne	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d0a0      	beq.n	8003c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b095      	sub	sp, #84	; 0x54
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d48:	643b      	str	r3, [r7, #64]	; 0x40
 8003d4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e6      	bne.n	8003d2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e3      	bne.n	8003d5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d118      	bne.n	8003dce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f023 0310 	bic.w	r3, r3, #16
 8003db0:	647b      	str	r3, [r7, #68]	; 0x44
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dba:	61bb      	str	r3, [r7, #24]
 8003dbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6979      	ldr	r1, [r7, #20]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e6      	bne.n	8003d9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003de2:	bf00      	nop
 8003de4:	3754      	adds	r7, #84	; 0x54
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_UARTEx_DisableFifoMode+0x16>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e027      	b.n	8003e54 <HAL_UARTEx_DisableFifoMode+0x66>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2224      	movs	r2, #36	; 0x24
 8003e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003e32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e02d      	b.n	8003ed4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2224      	movs	r2, #36	; 0x24
 8003e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f84f 	bl	8003f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e02d      	b.n	8003f50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f811 	bl	8003f58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d108      	bne.n	8003f7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f78:	e031      	b.n	8003fde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003f7e:	2308      	movs	r3, #8
 8003f80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	0e5b      	lsrs	r3, r3, #25
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	0f5b      	lsrs	r3, r3, #29
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fa2:	7bbb      	ldrb	r3, [r7, #14]
 8003fa4:	7b3a      	ldrb	r2, [r7, #12]
 8003fa6:	4911      	ldr	r1, [pc, #68]	; (8003fec <UARTEx_SetNbDataToProcess+0x94>)
 8003fa8:	5c8a      	ldrb	r2, [r1, r2]
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003fae:	7b3a      	ldrb	r2, [r7, #12]
 8003fb0:	490f      	ldr	r1, [pc, #60]	; (8003ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8003fb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	7b7a      	ldrb	r2, [r7, #13]
 8003fc4:	4909      	ldr	r1, [pc, #36]	; (8003fec <UARTEx_SetNbDataToProcess+0x94>)
 8003fc6:	5c8a      	ldrb	r2, [r1, r2]
 8003fc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003fcc:	7b7a      	ldrb	r2, [r7, #13]
 8003fce:	4908      	ldr	r1, [pc, #32]	; (8003ff0 <UARTEx_SetNbDataToProcess+0x98>)
 8003fd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003fd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	080041bc 	.word	0x080041bc
 8003ff0:	080041c4 	.word	0x080041c4

08003ff4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ffc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004000:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	b29b      	uxth	r3, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	b29b      	uxth	r3, r3
 8004012:	4013      	ands	r3, r2
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <memset>:
 8004066:	4402      	add	r2, r0
 8004068:	4603      	mov	r3, r0
 800406a:	4293      	cmp	r3, r2
 800406c:	d100      	bne.n	8004070 <memset+0xa>
 800406e:	4770      	bx	lr
 8004070:	f803 1b01 	strb.w	r1, [r3], #1
 8004074:	e7f9      	b.n	800406a <memset+0x4>
	...

08004078 <__libc_init_array>:
 8004078:	b570      	push	{r4, r5, r6, lr}
 800407a:	4d0d      	ldr	r5, [pc, #52]	; (80040b0 <__libc_init_array+0x38>)
 800407c:	4c0d      	ldr	r4, [pc, #52]	; (80040b4 <__libc_init_array+0x3c>)
 800407e:	1b64      	subs	r4, r4, r5
 8004080:	10a4      	asrs	r4, r4, #2
 8004082:	2600      	movs	r6, #0
 8004084:	42a6      	cmp	r6, r4
 8004086:	d109      	bne.n	800409c <__libc_init_array+0x24>
 8004088:	4d0b      	ldr	r5, [pc, #44]	; (80040b8 <__libc_init_array+0x40>)
 800408a:	4c0c      	ldr	r4, [pc, #48]	; (80040bc <__libc_init_array+0x44>)
 800408c:	f000 f818 	bl	80040c0 <_init>
 8004090:	1b64      	subs	r4, r4, r5
 8004092:	10a4      	asrs	r4, r4, #2
 8004094:	2600      	movs	r6, #0
 8004096:	42a6      	cmp	r6, r4
 8004098:	d105      	bne.n	80040a6 <__libc_init_array+0x2e>
 800409a:	bd70      	pop	{r4, r5, r6, pc}
 800409c:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a0:	4798      	blx	r3
 80040a2:	3601      	adds	r6, #1
 80040a4:	e7ee      	b.n	8004084 <__libc_init_array+0xc>
 80040a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040aa:	4798      	blx	r3
 80040ac:	3601      	adds	r6, #1
 80040ae:	e7f2      	b.n	8004096 <__libc_init_array+0x1e>
 80040b0:	080041d4 	.word	0x080041d4
 80040b4:	080041d4 	.word	0x080041d4
 80040b8:	080041d4 	.word	0x080041d4
 80040bc:	080041d8 	.word	0x080041d8

080040c0 <_init>:
 80040c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c2:	bf00      	nop
 80040c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c6:	bc08      	pop	{r3}
 80040c8:	469e      	mov	lr, r3
 80040ca:	4770      	bx	lr

080040cc <_fini>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr
