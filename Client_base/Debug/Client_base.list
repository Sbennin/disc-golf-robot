
Client_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d600  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001288  0800d740  0800d740  0001d740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e9c8  0800e9c8  0001e9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e9d0  0800e9d0  0001e9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e9d4  0800e9d4  0001e9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000008  0800e9d8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000039  20000090  0800ea60  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000cc  0800ea99  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001770  200000e0  0800eaaa  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001850  0800eaaa  00021850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800eaaa  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002f10c  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000067cc  00000000  00000000  0004fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000029a8  00000000  00000000  000563b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001fda  00000000  00000000  00058d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002c1dd  00000000  00000000  0005ad3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002f3b5  00000000  00000000  00086f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f8f34  00000000  00000000  000b62cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000b5c0  00000000  00000000  001af200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007f  00000000  00000000  001ba7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d728 	.word	0x0800d728

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0800d728 	.word	0x0800d728

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b970 	b.w	8000548 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9e08      	ldr	r6, [sp, #32]
 8000286:	460d      	mov	r5, r1
 8000288:	4604      	mov	r4, r0
 800028a:	460f      	mov	r7, r1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d14a      	bne.n	8000326 <__udivmoddi4+0xa6>
 8000290:	428a      	cmp	r2, r1
 8000292:	4694      	mov	ip, r2
 8000294:	d965      	bls.n	8000362 <__udivmoddi4+0xe2>
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	b143      	cbz	r3, 80002ae <__udivmoddi4+0x2e>
 800029c:	fa02 fc03 	lsl.w	ip, r2, r3
 80002a0:	f1c3 0220 	rsb	r2, r3, #32
 80002a4:	409f      	lsls	r7, r3
 80002a6:	fa20 f202 	lsr.w	r2, r0, r2
 80002aa:	4317      	orrs	r7, r2
 80002ac:	409c      	lsls	r4, r3
 80002ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002b2:	fa1f f58c 	uxth.w	r5, ip
 80002b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ba:	0c22      	lsrs	r2, r4, #16
 80002bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002c4:	fb01 f005 	mul.w	r0, r1, r5
 80002c8:	4290      	cmp	r0, r2
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x62>
 80002cc:	eb1c 0202 	adds.w	r2, ip, r2
 80002d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002d4:	f080 811c 	bcs.w	8000510 <__udivmoddi4+0x290>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f240 8119 	bls.w	8000510 <__udivmoddi4+0x290>
 80002de:	3902      	subs	r1, #2
 80002e0:	4462      	add	r2, ip
 80002e2:	1a12      	subs	r2, r2, r0
 80002e4:	b2a4      	uxth	r4, r4
 80002e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f2:	fb00 f505 	mul.w	r5, r0, r5
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	d90a      	bls.n	8000310 <__udivmoddi4+0x90>
 80002fa:	eb1c 0404 	adds.w	r4, ip, r4
 80002fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000302:	f080 8107 	bcs.w	8000514 <__udivmoddi4+0x294>
 8000306:	42a5      	cmp	r5, r4
 8000308:	f240 8104 	bls.w	8000514 <__udivmoddi4+0x294>
 800030c:	4464      	add	r4, ip
 800030e:	3802      	subs	r0, #2
 8000310:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	2100      	movs	r1, #0
 8000318:	b11e      	cbz	r6, 8000322 <__udivmoddi4+0xa2>
 800031a:	40dc      	lsrs	r4, r3
 800031c:	2300      	movs	r3, #0
 800031e:	e9c6 4300 	strd	r4, r3, [r6]
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0xbc>
 800032a:	2e00      	cmp	r6, #0
 800032c:	f000 80ed 	beq.w	800050a <__udivmoddi4+0x28a>
 8000330:	2100      	movs	r1, #0
 8000332:	e9c6 0500 	strd	r0, r5, [r6]
 8000336:	4608      	mov	r0, r1
 8000338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033c:	fab3 f183 	clz	r1, r3
 8000340:	2900      	cmp	r1, #0
 8000342:	d149      	bne.n	80003d8 <__udivmoddi4+0x158>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d302      	bcc.n	800034e <__udivmoddi4+0xce>
 8000348:	4282      	cmp	r2, r0
 800034a:	f200 80f8 	bhi.w	800053e <__udivmoddi4+0x2be>
 800034e:	1a84      	subs	r4, r0, r2
 8000350:	eb65 0203 	sbc.w	r2, r5, r3
 8000354:	2001      	movs	r0, #1
 8000356:	4617      	mov	r7, r2
 8000358:	2e00      	cmp	r6, #0
 800035a:	d0e2      	beq.n	8000322 <__udivmoddi4+0xa2>
 800035c:	e9c6 4700 	strd	r4, r7, [r6]
 8000360:	e7df      	b.n	8000322 <__udivmoddi4+0xa2>
 8000362:	b902      	cbnz	r2, 8000366 <__udivmoddi4+0xe6>
 8000364:	deff      	udf	#255	; 0xff
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	2b00      	cmp	r3, #0
 800036c:	f040 8090 	bne.w	8000490 <__udivmoddi4+0x210>
 8000370:	1a8a      	subs	r2, r1, r2
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2101      	movs	r1, #1
 800037c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000380:	fb07 2015 	mls	r0, r7, r5, r2
 8000384:	0c22      	lsrs	r2, r4, #16
 8000386:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800038a:	fb0e f005 	mul.w	r0, lr, r5
 800038e:	4290      	cmp	r0, r2
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x124>
 8000392:	eb1c 0202 	adds.w	r2, ip, r2
 8000396:	f105 38ff 	add.w	r8, r5, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x122>
 800039c:	4290      	cmp	r0, r2
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2b8>
 80003a2:	4645      	mov	r5, r8
 80003a4:	1a12      	subs	r2, r2, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ac:	fb07 2210 	mls	r2, r7, r0, r2
 80003b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x14e>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x14c>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2c2>
 80003cc:	4610      	mov	r0, r2
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003d6:	e79f      	b.n	8000318 <__udivmoddi4+0x98>
 80003d8:	f1c1 0720 	rsb	r7, r1, #32
 80003dc:	408b      	lsls	r3, r1
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ea:	fa20 f307 	lsr.w	r3, r0, r7
 80003ee:	40fd      	lsrs	r5, r7
 80003f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f4:	4323      	orrs	r3, r4
 80003f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000402:	0c1c      	lsrs	r4, r3, #16
 8000404:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000408:	fb08 f50e 	mul.w	r5, r8, lr
 800040c:	42a5      	cmp	r5, r4
 800040e:	fa02 f201 	lsl.w	r2, r2, r1
 8000412:	fa00 f001 	lsl.w	r0, r0, r1
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b0>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2b4>
 8000424:	42a5      	cmp	r5, r4
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2b4>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4464      	add	r4, ip
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	b29d      	uxth	r5, r3
 8000434:	fbb4 f3f9 	udiv	r3, r4, r9
 8000438:	fb09 4413 	mls	r4, r9, r3, r4
 800043c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000440:	fb03 fe0e 	mul.w	lr, r3, lr
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1da>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2ac>
 8000452:	45a6      	cmp	lr, r4
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2ac>
 8000456:	3b02      	subs	r3, #2
 8000458:	4464      	add	r4, ip
 800045a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800045e:	fba3 9502 	umull	r9, r5, r3, r2
 8000462:	eba4 040e 	sub.w	r4, r4, lr
 8000466:	42ac      	cmp	r4, r5
 8000468:	46c8      	mov	r8, r9
 800046a:	46ae      	mov	lr, r5
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x29c>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x298>
 8000470:	b156      	cbz	r6, 8000488 <__udivmoddi4+0x208>
 8000472:	ebb0 0208 	subs.w	r2, r0, r8
 8000476:	eb64 040e 	sbc.w	r4, r4, lr
 800047a:	fa04 f707 	lsl.w	r7, r4, r7
 800047e:	40ca      	lsrs	r2, r1
 8000480:	40cc      	lsrs	r4, r1
 8000482:	4317      	orrs	r7, r2
 8000484:	e9c6 7400 	strd	r7, r4, [r6]
 8000488:	4618      	mov	r0, r3
 800048a:	2100      	movs	r1, #0
 800048c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000490:	f1c3 0120 	rsb	r1, r3, #32
 8000494:	fa02 fc03 	lsl.w	ip, r2, r3
 8000498:	fa20 f201 	lsr.w	r2, r0, r1
 800049c:	fa25 f101 	lsr.w	r1, r5, r1
 80004a0:	409d      	lsls	r5, r3
 80004a2:	432a      	orrs	r2, r5
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b0:	fb07 1510 	mls	r5, r7, r0, r1
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ba:	fb00 f50e 	mul.w	r5, r0, lr
 80004be:	428d      	cmp	r5, r1
 80004c0:	fa04 f403 	lsl.w	r4, r4, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x258>
 80004c6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 80004d0:	428d      	cmp	r5, r1
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b0>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1b49      	subs	r1, r1, r5
 80004da:	b292      	uxth	r2, r2
 80004dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004e0:	fb07 1115 	mls	r1, r7, r5, r1
 80004e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ec:	4291      	cmp	r1, r2
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x282>
 80004f0:	eb1c 0202 	adds.w	r2, ip, r2
 80004f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2a8>
 80004fa:	4291      	cmp	r1, r2
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2a8>
 80004fe:	3d02      	subs	r5, #2
 8000500:	4462      	add	r2, ip
 8000502:	1a52      	subs	r2, r2, r1
 8000504:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0xfc>
 800050a:	4631      	mov	r1, r6
 800050c:	4630      	mov	r0, r6
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xa2>
 8000510:	4639      	mov	r1, r7
 8000512:	e6e6      	b.n	80002e2 <__udivmoddi4+0x62>
 8000514:	4610      	mov	r0, r2
 8000516:	e6fb      	b.n	8000310 <__udivmoddi4+0x90>
 8000518:	4548      	cmp	r0, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f0>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000524:	3b01      	subs	r3, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f0>
 8000528:	4645      	mov	r5, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x282>
 800052c:	462b      	mov	r3, r5
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1da>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x258>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b0>
 8000538:	3d02      	subs	r5, #2
 800053a:	4462      	add	r2, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x124>
 800053e:	4608      	mov	r0, r1
 8000540:	e70a      	b.n	8000358 <__udivmoddi4+0xd8>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x14e>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <LL_EXTI_EnableIT_32_63+0x24>)
 8000556:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800055a:	4905      	ldr	r1, [pc, #20]	; (8000570 <LL_EXTI_EnableIT_32_63+0x24>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4313      	orrs	r3, r2
 8000560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	58000800 	.word	0x58000800

08000574 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800057c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4313      	orrs	r3, r2
 800058a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800058c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000590:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4013      	ands	r3, r2
 8000596:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000598:	68fb      	ldr	r3, [r7, #12]
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b085      	sub	sp, #20
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80005ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4313      	orrs	r3, r2
 80005be:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d0:	68fb      	ldr	r3, [r7, #12]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005e2:	f002 fb29 	bl	8002c38 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005e6:	f002 fb2d 	bl	8002c44 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005ee:	f7ff ffad 	bl	800054c <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005f2:	f009 fc33 	bl	8009e5c <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005f6:	f000 f821 	bl	800063c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005fa:	f000 f8c1 	bl	8000780 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005fe:	bf00      	nop
}
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <APPD_EnableCPU2+0x34>)
 800060c:	1d3c      	adds	r4, r7, #4
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	c403      	stmia	r4!, {r0, r1}
 800061a:	8022      	strh	r2, [r4, #0]
 800061c:	3402      	adds	r4, #2
 800061e:	0c13      	lsrs	r3, r2, #16
 8000620:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000622:	f009 fb57 	bl	8009cd4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f008 fde8 	bl	80091fe <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800062e:	bf00      	nop
}
 8000630:	3720      	adds	r7, #32
 8000632:	46bd      	mov	sp, r7
 8000634:	bdb0      	pop	{r4, r5, r7, pc}
 8000636:	bf00      	nop
 8000638:	0800d740 	.word	0x0800d740

0800063c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800065c:	2300      	movs	r3, #0
 800065e:	77fb      	strb	r3, [r7, #31]
 8000660:	e036      	b.n	80006d0 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000662:	7ffb      	ldrb	r3, [r7, #31]
 8000664:	4a43      	ldr	r2, [pc, #268]	; (8000774 <APPD_SetCPU2GpioConfig+0x138>)
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	4413      	add	r3, r2
 800066a:	799b      	ldrb	r3, [r3, #6]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d02c      	beq.n	80006ca <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000670:	7ffb      	ldrb	r3, [r7, #31]
 8000672:	4a40      	ldr	r2, [pc, #256]	; (8000774 <APPD_SetCPU2GpioConfig+0x138>)
 8000674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000678:	4a3f      	ldr	r2, [pc, #252]	; (8000778 <APPD_SetCPU2GpioConfig+0x13c>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d01b      	beq.n	80006b6 <APPD_SetCPU2GpioConfig+0x7a>
 800067e:	4a3e      	ldr	r2, [pc, #248]	; (8000778 <APPD_SetCPU2GpioConfig+0x13c>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d821      	bhi.n	80006c8 <APPD_SetCPU2GpioConfig+0x8c>
 8000684:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000688:	d003      	beq.n	8000692 <APPD_SetCPU2GpioConfig+0x56>
 800068a:	4a3c      	ldr	r2, [pc, #240]	; (800077c <APPD_SetCPU2GpioConfig+0x140>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d009      	beq.n	80006a4 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000690:	e01a      	b.n	80006c8 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000692:	7ffb      	ldrb	r3, [r7, #31]
 8000694:	4a37      	ldr	r2, [pc, #220]	; (8000774 <APPD_SetCPU2GpioConfig+0x138>)
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	889a      	ldrh	r2, [r3, #4]
 800069c:	8bbb      	ldrh	r3, [r7, #28]
 800069e:	4313      	orrs	r3, r2
 80006a0:	83bb      	strh	r3, [r7, #28]
          break;
 80006a2:	e012      	b.n	80006ca <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80006a4:	7ffb      	ldrb	r3, [r7, #31]
 80006a6:	4a33      	ldr	r2, [pc, #204]	; (8000774 <APPD_SetCPU2GpioConfig+0x138>)
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	4413      	add	r3, r2
 80006ac:	889a      	ldrh	r2, [r3, #4]
 80006ae:	8b7b      	ldrh	r3, [r7, #26]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	837b      	strh	r3, [r7, #26]
          break;
 80006b4:	e009      	b.n	80006ca <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80006b6:	7ffb      	ldrb	r3, [r7, #31]
 80006b8:	4a2e      	ldr	r2, [pc, #184]	; (8000774 <APPD_SetCPU2GpioConfig+0x138>)
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	4413      	add	r3, r2
 80006be:	889a      	ldrh	r2, [r3, #4]
 80006c0:	8b3b      	ldrh	r3, [r7, #24]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	833b      	strh	r3, [r7, #24]
          break;
 80006c6:	e000      	b.n	80006ca <APPD_SetCPU2GpioConfig+0x8e>
          break;
 80006c8:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006ca:	7ffb      	ldrb	r3, [r7, #31]
 80006cc:	3301      	adds	r3, #1
 80006ce:	77fb      	strb	r3, [r7, #31]
 80006d0:	7ffb      	ldrb	r3, [r7, #31]
 80006d2:	2b25      	cmp	r3, #37	; 0x25
 80006d4:	d9c5      	bls.n	8000662 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006e2:	8bbb      	ldrh	r3, [r7, #28]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d014      	beq.n	8000712 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006e8:	8bbb      	ldrh	r3, [r7, #28]
 80006ea:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ff41 	bl	8000574 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff ff57 	bl	80005a6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f002 ffd4 	bl	80036ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000704:	8bbb      	ldrh	r3, [r7, #28]
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f003 f93d 	bl	800398c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000712:	8b7b      	ldrh	r3, [r7, #26]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d012      	beq.n	800073e <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000718:	8b7b      	ldrh	r3, [r7, #26]
 800071a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	2002      	movs	r0, #2
 800071e:	f7ff ff29 	bl	8000574 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000722:	2002      	movs	r0, #2
 8000724:	f7ff ff3f 	bl	80005a6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4813      	ldr	r0, [pc, #76]	; (800077c <APPD_SetCPU2GpioConfig+0x140>)
 800072e:	f002 ffbd 	bl	80036ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000732:	8b7b      	ldrh	r3, [r7, #26]
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	4810      	ldr	r0, [pc, #64]	; (800077c <APPD_SetCPU2GpioConfig+0x140>)
 800073a:	f003 f927 	bl	800398c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800073e:	8b3b      	ldrh	r3, [r7, #24]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d013      	beq.n	800076c <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000744:	8b3b      	ldrh	r3, [r7, #24]
 8000746:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000748:	2004      	movs	r0, #4
 800074a:	f7ff ff13 	bl	8000574 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800074e:	2004      	movs	r0, #4
 8000750:	f7ff ff29 	bl	80005a6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <APPD_SetCPU2GpioConfig+0x13c>)
 800075a:	f002 ffa7 	bl	80036ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800075e:	8b3b      	ldrh	r3, [r7, #24]
 8000760:	2200      	movs	r2, #0
 8000762:	4619      	mov	r1, r3
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <APPD_SetCPU2GpioConfig+0x13c>)
 8000766:	f003 f911 	bl	800398c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800076a:	bf00      	nop
 800076c:	bf00      	nop
}
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	0800e750 	.word	0x0800e750
 8000778:	48000800 	.word	0x48000800
 800077c:	48000400 	.word	0x48000400

08000780 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000784:	bf00      	nop
}
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000792:	f001 fceb 	bl	800216c <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000796:	bf00      	nop
}
 8000798:	bd80      	pop	{r7, pc}

0800079a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	460b      	mov	r3, r1
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80007a8:	897a      	ldrh	r2, [r7, #10]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68f9      	ldr	r1, [r7, #12]
 80007ae:	2000      	movs	r0, #0
 80007b0:	f001 fb68 	bl	8001e84 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80007b4:	bf00      	nop
}
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007ca:	f023 0207 	bic.w	r2, r3, #7
 80007ce:	4905      	ldr	r1, [pc, #20]	; (80007e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	58000400 	.word	0x58000400

080007e8 <LL_EXTI_EnableIT_32_63>:
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <LL_EXTI_EnableIT_32_63+0x24>)
 80007f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007f6:	4905      	ldr	r1, [pc, #20]	; (800080c <LL_EXTI_EnableIT_32_63+0x24>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	58000800 	.word	0x58000800

08000810 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800081e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800082a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000836:	4313      	orrs	r3, r2
 8000838:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	cafecafe 	.word	0xcafecafe

0800084c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800085e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4313      	orrs	r3, r2
 8000866:	608b      	str	r3, [r1, #8]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008cc:	d101      	bne.n	80008d2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008ce:	2301      	movs	r3, #1
 80008d0:	e000      	b.n	80008d4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008f2:	d101      	bne.n	80008f8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008f4:	2301      	movs	r3, #1
 80008f6:	e000      	b.n	80008fa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <LL_AHB3_GRP1_EnableClock>:
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800090c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4313      	orrs	r3, r2
 800091a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800091c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000928:	68fb      	ldr	r3, [r7, #12]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <LL_DBGMCU_GetDeviceID+0x18>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e0042000 	.word	0xe0042000

08000954 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <LL_DBGMCU_GetRevisionID+0x18>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	0c1b      	lsrs	r3, r3, #16
 800095e:	b29b      	uxth	r3, r3
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e0042000 	.word	0xe0042000

08000970 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	041b      	lsls	r3, r3, #16
 8000982:	431a      	orrs	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	605a      	str	r2, [r3, #4]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	431a      	orrs	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	605a      	str	r2, [r3, #4]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	041b      	lsls	r3, r3, #16
 80009c8:	431a      	orrs	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	615a      	str	r2, [r3, #20]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	431a      	orrs	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	615a      	str	r2, [r3, #20]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	609a      	str	r2, [r3, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	619a      	str	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <LL_LPM_EnableSleep+0x1c>)
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <LL_LPM_EnableSleep+0x1c>)
 8000a3e:	f023 0304 	bic.w	r3, r3, #4
 8000a42:	6113      	str	r3, [r2, #16]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	22ff      	movs	r2, #255	; 0xff
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	22ca      	movs	r2, #202	; 0xca
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2253      	movs	r2, #83	; 0x53
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f023 0207 	bic.w	r2, r3, #7
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <MX_APPE_Config+0x18>)
 8000aba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000abe:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000ac0:	f000 f830 	bl	8000b24 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000ac4:	f000 f870 	bl	8000ba8 <Config_HSE>

  return;
 8000ac8:	bf00      	nop
}
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	58004000 	.word	0x58004000

08000ad0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000ad4:	f000 f87c 	bl	8000bd0 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000ad8:	f000 f894 	bl	8000c04 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000adc:	4909      	ldr	r1, [pc, #36]	; (8000b04 <MX_APPE_Init+0x34>)
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 ff40 	bl	8001964 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000ae4:	f7ff fd7b 	bl	80005de <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000ae8:	2101      	movs	r1, #1
 8000aea:	2001      	movs	r0, #1
 8000aec:	f00b fba2 	bl	800c234 <UTIL_LPM_SetOffMode>

  Led_Init();
 8000af0:	f000 f9ea 	bl	8000ec8 <Led_Init>

  Button_Init();
 8000af4:	f000 f9f8 	bl	8000ee8 <Button_Init>
  
  RxUART_Init();
 8000af8:	f000 fa88 	bl	800100c <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000afc:	f000 f890 	bl	8000c20 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000b00:	bf00      	nop
}
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200004dc 	.word	0x200004dc

08000b08 <Init_Smps>:

void Init_Smps(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000b0c:	bf00      	nop
}
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <Init_Exti>:

void Init_Exti(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000b1a:	2050      	movs	r0, #80	; 0x50
 8000b1c:	f7ff fe64 	bl	80007e8 <LL_EXTI_EnableIT_32_63>

  return;
 8000b20:	bf00      	nop
}
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000b28:	f000 f804 	bl	8000b34 <Reset_BackupDomain>

  Reset_IPCC();
 8000b2c:	f000 f81a 	bl	8000b64 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000b30:	bf00      	nop
}
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000b38:	f7ff febe 	bl	80008b8 <LL_RCC_IsActiveFlag_PINRST>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00d      	beq.n	8000b5e <Reset_BackupDomain+0x2a>
 8000b42:	f7ff fecc 	bl	80008de <LL_RCC_IsActiveFlag_SFTRST>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d108      	bne.n	8000b5e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000b4c:	f002 fff8 	bl	8003b40 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000b50:	f002 fff6 	bl	8003b40 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000b54:	f7ff fe8e 	bl	8000874 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b58:	f7ff fe9d 	bl	8000896 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
}
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b68:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b6c:	f7ff feca 	bl	8000904 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b70:	213f      	movs	r1, #63	; 0x3f
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b74:	f7ff ff42 	bl	80009fc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b78:	213f      	movs	r1, #63	; 0x3f
 8000b7a:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b7c:	f7ff ff4c 	bl	8000a18 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b80:	213f      	movs	r1, #63	; 0x3f
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b84:	f7ff fef4 	bl	8000970 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b88:	213f      	movs	r1, #63	; 0x3f
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b8c:	f7ff ff13 	bl	80009b6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b90:	213f      	movs	r1, #63	; 0x3f
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b94:	f7ff fefe 	bl	8000994 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b98:	213f      	movs	r1, #63	; 0x3f
 8000b9a:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b9c:	f7ff ff1d 	bl	80009da <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000ba0:	bf00      	nop
}
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	58000c00 	.word	0x58000c00

08000ba8 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f009 f9d2 	bl	8009f58 <OTP_Read>
 8000bb4:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	799b      	ldrb	r3, [r3, #6]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fe25 	bl	8000810 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
}
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <System_Init>:

static void System_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  Init_Smps();
 8000bd4:	f7ff ff98 	bl	8000b08 <Init_Smps>

  Init_Exti();
 8000bd8:	f7ff ff9d 	bl	8000b16 <Init_Exti>

  Init_Rtc();
 8000bdc:	f000 f802 	bl	8000be4 <Init_Rtc>

  return;
 8000be0:	bf00      	nop
}
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <Init_Rtc+0x1c>)
 8000bea:	f7ff ff40 	bl	8000a6e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <Init_Rtc+0x1c>)
 8000bf2:	f7ff ff4c 	bl	8000a8e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000bf6:	4802      	ldr	r0, [pc, #8]	; (8000c00 <Init_Rtc+0x1c>)
 8000bf8:	f7ff ff2c 	bl	8000a54 <LL_RTC_EnableWriteProtection>

  return;
 8000bfc:	bf00      	nop
}
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40002800 	.word	0x40002800

08000c04 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c0c:	f7ff fe1e 	bl	800084c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c10:	f00b fafe 	bl	800c210 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c14:	2004      	movs	r0, #4
 8000c16:	f7ff fdd1 	bl	80007bc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000c1a:	bf00      	nop
}
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000c26:	f008 fe9f 	bl	8009968 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000c2a:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <appe_Tl_Init+0x50>)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c32:	f00b fc2b 	bl	800c48c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <appe_Tl_Init+0x54>)
 8000c38:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <appe_Tl_Init+0x58>)
 8000c3c:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	480e      	ldr	r0, [pc, #56]	; (8000c7c <appe_Tl_Init+0x5c>)
 8000c44:	f008 fd52 	bl	80096ec <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <appe_Tl_Init+0x60>)
 8000c4a:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <appe_Tl_Init+0x64>)
 8000c4e:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <appe_Tl_Init+0x68>)
 8000c52:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c54:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c58:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f008 ffc4 	bl	8009bec <TL_MM_Init>

  TL_Enable();
 8000c64:	f008 fe7a 	bl	800995c <TL_Enable>

  return;
 8000c68:	bf00      	nop
}
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	08009725 	.word	0x08009725
 8000c74:	20030734 	.word	0x20030734
 8000c78:	08000c8d 	.word	0x08000c8d
 8000c7c:	08000ca5 	.word	0x08000ca5
 8000c80:	2003094c 	.word	0x2003094c
 8000c84:	20030840 	.word	0x20030840
 8000c88:	200301f8 	.word	0x200301f8

08000c8c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c96:	bf00      	nop
}
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	330b      	adds	r3, #11
 8000cb2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	d860      	bhi.n	8000d84 <APPE_SysUserEvtRx+0xe0>
 8000cc2:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <APPE_SysUserEvtRx+0x24>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000ce9 	.word	0x08000ce9
 8000ccc:	08000d2b 	.word	0x08000d2b
 8000cd0:	08000d39 	.word	0x08000d39
 8000cd4:	08000d85 	.word	0x08000d85
 8000cd8:	08000d55 	.word	0x08000d55
 8000cdc:	08000d65 	.word	0x08000d65
 8000ce0:	08000d6d 	.word	0x08000d6d
 8000ce4:	08000d7d 	.word	0x08000d7d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4618      	mov	r0, r3
 8000cee:	f008 fab3 	bl	8009258 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000cf2:	7b3b      	ldrb	r3, [r7, #12]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	7b7b      	ldrb	r3, [r7, #13]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	4824      	ldr	r0, [pc, #144]	; (8000d90 <APPE_SysUserEvtRx+0xec>)
 8000cfe:	f00b fdc9 	bl	800c894 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000d02:	7c3b      	ldrb	r3, [r7, #16]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4823      	ldr	r0, [pc, #140]	; (8000d94 <APPE_SysUserEvtRx+0xf0>)
 8000d08:	f00b fdc4 	bl	800c894 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000d0c:	7dbb      	ldrb	r3, [r7, #22]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	461a      	mov	r2, r3
 8000d14:	7e3b      	ldrb	r3, [r7, #24]
 8000d16:	4820      	ldr	r0, [pc, #128]	; (8000d98 <APPE_SysUserEvtRx+0xf4>)
 8000d18:	f00b fdbc 	bl	800c894 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000d1c:	481f      	ldr	r0, [pc, #124]	; (8000d9c <APPE_SysUserEvtRx+0xf8>)
 8000d1e:	f00b fdb9 	bl	800c894 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f870 	bl	8000e08 <APPE_SysEvtReadyProcessing>
    break;
 8000d28:	e02d      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000d2a:	481d      	ldr	r0, [pc, #116]	; (8000da0 <APPE_SysUserEvtRx+0xfc>)
 8000d2c:	f00b fdb2 	bl	800c894 <iprintf>
    APPE_SysEvtError(pPayload);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f843 	bl	8000dbc <APPE_SysEvtError>
    break;
 8000d36:	e026      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000d38:	481a      	ldr	r0, [pc, #104]	; (8000da4 <APPE_SysUserEvtRx+0x100>)
 8000d3a:	f00b fe19 	bl	800c970 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000d42:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4816      	ldr	r0, [pc, #88]	; (8000da8 <APPE_SysUserEvtRx+0x104>)
 8000d4e:	f00b fda1 	bl	800c894 <iprintf>
    break;
 8000d52:	e018      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4813      	ldr	r0, [pc, #76]	; (8000dac <APPE_SysUserEvtRx+0x108>)
 8000d5e:	f00b fd99 	bl	800c894 <iprintf>
    break;
 8000d62:	e010      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000d64:	4812      	ldr	r0, [pc, #72]	; (8000db0 <APPE_SysUserEvtRx+0x10c>)
 8000d66:	f00b fd95 	bl	800c894 <iprintf>
    break;
 8000d6a:	e00c      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4619      	mov	r1, r3
 8000d74:	480f      	ldr	r0, [pc, #60]	; (8000db4 <APPE_SysUserEvtRx+0x110>)
 8000d76:	f00b fd8d 	bl	800c894 <iprintf>
    break;
 8000d7a:	e004      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8000d7c:	480e      	ldr	r0, [pc, #56]	; (8000db8 <APPE_SysUserEvtRx+0x114>)
 8000d7e:	f00b fd89 	bl	800c894 <iprintf>
    break;
 8000d82:	e000      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8000d84:	bf00      	nop
  }

  return;
 8000d86:	bf00      	nop
}
 8000d88:	3720      	adds	r7, #32
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	0800d75c 	.word	0x0800d75c
 8000d94:	0800d780 	.word	0x0800d780
 8000d98:	0800d79c 	.word	0x0800d79c
 8000d9c:	0800d7b4 	.word	0x0800d7b4
 8000da0:	0800d7d4 	.word	0x0800d7d4
 8000da4:	0800d7f8 	.word	0x0800d7f8
 8000da8:	0800d848 	.word	0x0800d848
 8000dac:	0800d870 	.word	0x0800d870
 8000db0:	0800d8ac 	.word	0x0800d8ac
 8000db4:	0800d8d0 	.word	0x0800d8d0
 8000db8:	0800d90c 	.word	0x0800d90c

08000dbc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	330b      	adds	r3, #11
 8000dca:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3302      	adds	r3, #2
 8000dd0:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <APPE_SysEvtError+0x40>)
 8000dda:	f00b fd5b 	bl	800c894 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d103      	bne.n	8000dee <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <APPE_SysEvtError+0x44>)
 8000de8:	f00b fdc2 	bl	800c970 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000dec:	e003      	b.n	8000df6 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <APPE_SysEvtError+0x48>)
 8000df0:	f00b fdbe 	bl	800c970 <puts>
  return;
 8000df4:	bf00      	nop
}
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	0800d930 	.word	0x0800d930
 8000e00:	0800d960 	.word	0x0800d960
 8000e04:	0800d99c 	.word	0x0800d99c

08000e08 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	330b      	adds	r3, #11
 8000e2c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3302      	adds	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d128      	bne.n	8000e8e <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8000e3c:	481d      	ldr	r0, [pc, #116]	; (8000eb4 <APPE_SysEvtReadyProcessing+0xac>)
 8000e3e:	f00b fd97 	bl	800c970 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000e42:	f7ff fbdf 	bl	8000604 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000e46:	230f      	movs	r3, #15
 8000e48:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000e4a:	237f      	movs	r3, #127	; 0x7f
 8000e4c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000e4e:	f7ff fd81 	bl	8000954 <LL_DBGMCU_GetRevisionID>
 8000e52:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8000e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e56:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <APPE_SysEvtReadyProcessing+0xb0>)
 8000e58:	f00b fd1c 	bl	800c894 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000e62:	f7ff fd69 	bl	8000938 <LL_DBGMCU_GetDeviceID>
 8000e66:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8000e68:	6a39      	ldr	r1, [r7, #32]
 8000e6a:	4814      	ldr	r0, [pc, #80]	; (8000ebc <APPE_SysEvtReadyProcessing+0xb4>)
 8000e6c:	f00b fd12 	bl	800c894 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f008 f9d6 	bl	800922c <SHCI_C2_Config>

    APP_BLE_Init();
 8000e80:	f009 fd76 	bl	800a970 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000e84:	2100      	movs	r1, #0
 8000e86:	2001      	movs	r0, #1
 8000e88:	f00b f9d4 	bl	800c234 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000e8c:	e00e      	b.n	8000eac <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <APPE_SysEvtReadyProcessing+0xb8>)
 8000e98:	f00b fcfc 	bl	800c894 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
  return;
 8000ea2:	e003      	b.n	8000eac <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8000ea4:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <APPE_SysEvtReadyProcessing+0xbc>)
 8000ea6:	f00b fcf5 	bl	800c894 <iprintf>
  return;
 8000eaa:	bf00      	nop
}
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	0800d9d4 	.word	0x0800d9d4
 8000eb8:	0800d9f0 	.word	0x0800d9f0
 8000ebc:	0800da14 	.word	0x0800da14
 8000ec0:	0800da34 	.word	0x0800da34
 8000ec4:	0800da68 	.word	0x0800da68

08000ec8 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f001 fc93 	bl	80027f8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f001 fc90 	bl	80027f8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f001 fc8d 	bl	80027f8 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f001 fcc4 	bl	800286c <BSP_LED_On>
#endif

  return;
 8000ee4:	bf00      	nop
}
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <Button_Init>:

static void Button_Init( void )
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000eec:	2101      	movs	r1, #1
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f001 fcf0 	bl	80028d4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f001 fcec 	bl	80028d4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000efc:	2101      	movs	r1, #1
 8000efe:	2002      	movs	r0, #2
 8000f00:	f001 fce8 	bl	80028d4 <BSP_PB_Init>
#endif

  return;
 8000f04:	bf00      	nop
}
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f001 fe6e 	bl	8002bf0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d00a      	beq.n	8000f38 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000f22:	f001 fe7d 	bl	8002c20 <HAL_GetTickFreq>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f30:	e002      	b.n	8000f38 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000f32:	f7ff fd7f 	bl	8000a34 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000f36:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000f38:	f001 fe5a 	bl	8002bf0 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f4      	bhi.n	8000f32 <HAL_Delay+0x2a>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000f56:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5a:	f00b f99b 	bl	800c294 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000f66:	bf00      	nop
}
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7e:	f00b f989 	bl	800c294 <UTIL_SEQ_Run>

  return;
 8000f82:	bf00      	nop
}
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000f92:	2100      	movs	r1, #0
 8000f94:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f98:	f00b fa9a 	bl	800c4d0 <UTIL_SEQ_SetTask>
  return;
 8000f9c:	bf00      	nop
}
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000fac:	2002      	movs	r0, #2
 8000fae:	f00b fafb 	bl	800c5a8 <UTIL_SEQ_SetEvt>
  return;
 8000fb2:	bf00      	nop
}
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f00b fb10 	bl	800c5e8 <UTIL_SEQ_WaitEvt>
  return;
 8000fc8:	bf00      	nop
}
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	2b10      	cmp	r3, #16
 8000fde:	d006      	beq.n	8000fee <HAL_GPIO_EXTI_Callback+0x1e>
 8000fe0:	2b10      	cmp	r3, #16
 8000fe2:	dc0d      	bgt.n	8001000 <HAL_GPIO_EXTI_Callback+0x30>
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x24>
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000fec:	e008      	b.n	8001000 <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 8000fee:	f009 ff3b 	bl	800ae68 <APP_BLE_Key_Button1_Action>
      break; 
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8000ff4:	f009 ff48 	bl	800ae88 <APP_BLE_Key_Button2_Action>
      break; 
 8000ff8:	e003      	b.n	8001002 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8000ffa:	f009 ff4c 	bl	800ae96 <APP_BLE_Key_Button3_Action>
      break;
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001000:	bf00      	nop

  }
  return;
 8001002:	bf00      	nop
}
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <RxUART_Init>:

static void RxUART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <RxUART_Init+0x14>)
 8001012:	2201      	movs	r2, #1
 8001014:	4903      	ldr	r1, [pc, #12]	; (8001024 <RxUART_Init+0x18>)
 8001016:	2000      	movs	r0, #0
 8001018:	f000 ff10 	bl	8001e3c <HW_UART_Receive_IT>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	08001029 	.word	0x08001029
 8001024:	20000104 	.word	0x20000104

08001028 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <RxCpltCallback+0x5c>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2bff      	cmp	r3, #255	; 0xff
 8001032:	d81e      	bhi.n	8001072 <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <RxCpltCallback+0x60>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b0d      	cmp	r3, #13
 800103a:	d10f      	bne.n	800105c <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 800103c:	4913      	ldr	r1, [pc, #76]	; (800108c <RxCpltCallback+0x64>)
 800103e:	4814      	ldr	r0, [pc, #80]	; (8001090 <RxCpltCallback+0x68>)
 8001040:	f00b fc28 	bl	800c894 <iprintf>

      UartCmdExecute();
 8001044:	f000 f828 	bl	8001098 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <RxCpltCallback+0x5c>)
 800104a:	2200      	movs	r2, #0
 800104c:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 800104e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001052:	2100      	movs	r1, #0
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <RxCpltCallback+0x64>)
 8001056:	f00b fd6b 	bl	800cb30 <memset>
 800105a:	e00a      	b.n	8001072 <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <RxCpltCallback+0x5c>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	b291      	uxth	r1, r2
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <RxCpltCallback+0x5c>)
 8001066:	8011      	strh	r1, [r2, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <RxCpltCallback+0x60>)
 800106c:	7819      	ldrb	r1, [r3, #0]
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <RxCpltCallback+0x64>)
 8001070:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <RxCpltCallback+0x6c>)
 8001074:	2201      	movs	r2, #1
 8001076:	4904      	ldr	r1, [pc, #16]	; (8001088 <RxCpltCallback+0x60>)
 8001078:	2000      	movs	r0, #0
 800107a:	f000 fedf 	bl	8001e3c <HW_UART_Receive_IT>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000020c 	.word	0x2000020c
 8001088:	20000104 	.word	0x20000104
 800108c:	2000010c 	.word	0x2000010c
 8001090:	0800da9c 	.word	0x0800da9c
 8001094:	08001029 	.word	0x08001029

08001098 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 800109c:	491c      	ldr	r1, [pc, #112]	; (8001110 <UartCmdExecute+0x78>)
 800109e:	481d      	ldr	r0, [pc, #116]	; (8001114 <UartCmdExecute+0x7c>)
 80010a0:	f7ff f86e 	bl	8000180 <strcmp>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d109      	bne.n	80010be <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <UartCmdExecute+0x80>)
 80010ac:	f00b fc60 	bl	800c970 <puts>
    exti_handle.Line = EXTI_LINE_4;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <UartCmdExecute+0x84>)
 80010b2:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <UartCmdExecute+0x88>)
 80010b4:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80010b6:	4819      	ldr	r0, [pc, #100]	; (800111c <UartCmdExecute+0x84>)
 80010b8:	f002 fad6 	bl	8003668 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 80010bc:	e026      	b.n	800110c <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 80010be:	4919      	ldr	r1, [pc, #100]	; (8001124 <UartCmdExecute+0x8c>)
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <UartCmdExecute+0x7c>)
 80010c2:	f7ff f85d 	bl	8000180 <strcmp>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10a      	bne.n	80010e2 <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 80010cc:	4816      	ldr	r0, [pc, #88]	; (8001128 <UartCmdExecute+0x90>)
 80010ce:	f00b fc4f 	bl	800c970 <puts>
    exti_handle.Line = EXTI_LINE_0;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <UartCmdExecute+0x84>)
 80010d4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80010d8:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80010da:	4810      	ldr	r0, [pc, #64]	; (800111c <UartCmdExecute+0x84>)
 80010dc:	f002 fac4 	bl	8003668 <HAL_EXTI_GenerateSWI>
}
 80010e0:	e014      	b.n	800110c <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 80010e2:	4912      	ldr	r1, [pc, #72]	; (800112c <UartCmdExecute+0x94>)
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <UartCmdExecute+0x7c>)
 80010e6:	f7ff f84b 	bl	8000180 <strcmp>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 80010f0:	480f      	ldr	r0, [pc, #60]	; (8001130 <UartCmdExecute+0x98>)
 80010f2:	f00b fc3d 	bl	800c970 <puts>
    exti_handle.Line = EXTI_LINE_1;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <UartCmdExecute+0x84>)
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <UartCmdExecute+0x9c>)
 80010fa:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <UartCmdExecute+0x84>)
 80010fe:	f002 fab3 	bl	8003668 <HAL_EXTI_GenerateSWI>
}
 8001102:	e003      	b.n	800110c <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 8001104:	4903      	ldr	r1, [pc, #12]	; (8001114 <UartCmdExecute+0x7c>)
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <UartCmdExecute+0xa0>)
 8001108:	f00b fbc4 	bl	800c894 <iprintf>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0800daac 	.word	0x0800daac
 8001114:	2000010c 	.word	0x2000010c
 8001118:	0800dab0 	.word	0x0800dab0
 800111c:	200000fc 	.word	0x200000fc
 8001120:	16000004 	.word	0x16000004
 8001124:	0800dab8 	.word	0x0800dab8
 8001128:	0800dabc 	.word	0x0800dabc
 800112c:	0800dac4 	.word	0x0800dac4
 8001130:	0800dac8 	.word	0x0800dac8
 8001134:	16000001 	.word	0x16000001
 8001138:	0800dad0 	.word	0x0800dad0

0800113c <LL_EXTI_EnableIT_0_31>:
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <LL_EXTI_EnableIT_0_31+0x24>)
 8001146:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800114a:	4905      	ldr	r1, [pc, #20]	; (8001160 <LL_EXTI_EnableIT_0_31+0x24>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4313      	orrs	r3, r2
 8001150:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	58000800 	.word	0x58000800

08001164 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4904      	ldr	r1, [pc, #16]	; (8001184 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	600b      	str	r3, [r1, #0]

}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	58000800 	.word	0x58000800

08001188 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <ReadRtcSsrValue+0x3c>)
 8001190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001192:	b29b      	uxth	r3, r3
 8001194:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <ReadRtcSsrValue+0x3c>)
 8001198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119a:	b29b      	uxth	r3, r3
 800119c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800119e:	e005      	b.n	80011ac <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <ReadRtcSsrValue+0x3c>)
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d1f5      	bne.n	80011a0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80011b4:	683b      	ldr	r3, [r7, #0]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40002800 	.word	0x40002800

080011c8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	460a      	mov	r2, r1
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	4613      	mov	r3, r2
 80011d6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80011d8:	79ba      	ldrb	r2, [r7, #6]
 80011da:	491d      	ldr	r1, [pc, #116]	; (8001250 <LinkTimerAfter+0x88>)
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	440b      	add	r3, r1
 80011e6:	3315      	adds	r3, #21
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d009      	beq.n	8001206 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	4916      	ldr	r1, [pc, #88]	; (8001250 <LinkTimerAfter+0x88>)
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	440b      	add	r3, r1
 8001200:	3314      	adds	r3, #20
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	4911      	ldr	r1, [pc, #68]	; (8001250 <LinkTimerAfter+0x88>)
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	3315      	adds	r3, #21
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800121a:	79fa      	ldrb	r2, [r7, #7]
 800121c:	490c      	ldr	r1, [pc, #48]	; (8001250 <LinkTimerAfter+0x88>)
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	3314      	adds	r3, #20
 800122a:	79ba      	ldrb	r2, [r7, #6]
 800122c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800122e:	79ba      	ldrb	r2, [r7, #6]
 8001230:	4907      	ldr	r1, [pc, #28]	; (8001250 <LinkTimerAfter+0x88>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	3315      	adds	r3, #21
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	701a      	strb	r2, [r3, #0]

  return;
 8001242:	bf00      	nop
}
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000210 	.word	0x20000210

08001254 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001264:	4b29      	ldr	r3, [pc, #164]	; (800130c <LinkTimerBefore+0xb8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	79ba      	ldrb	r2, [r7, #6]
 800126c:	429a      	cmp	r2, r3
 800126e:	d032      	beq.n	80012d6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001270:	79ba      	ldrb	r2, [r7, #6]
 8001272:	4927      	ldr	r1, [pc, #156]	; (8001310 <LinkTimerBefore+0xbc>)
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	440b      	add	r3, r1
 800127e:	3314      	adds	r3, #20
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001284:	7bfa      	ldrb	r2, [r7, #15]
 8001286:	4922      	ldr	r1, [pc, #136]	; (8001310 <LinkTimerBefore+0xbc>)
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	3315      	adds	r3, #21
 8001294:	79fa      	ldrb	r2, [r7, #7]
 8001296:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001298:	79fa      	ldrb	r2, [r7, #7]
 800129a:	491d      	ldr	r1, [pc, #116]	; (8001310 <LinkTimerBefore+0xbc>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	3315      	adds	r3, #21
 80012a8:	79ba      	ldrb	r2, [r7, #6]
 80012aa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	4918      	ldr	r1, [pc, #96]	; (8001310 <LinkTimerBefore+0xbc>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	440b      	add	r3, r1
 80012ba:	3314      	adds	r3, #20
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80012c0:	79ba      	ldrb	r2, [r7, #6]
 80012c2:	4913      	ldr	r1, [pc, #76]	; (8001310 <LinkTimerBefore+0xbc>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	440b      	add	r3, r1
 80012ce:	3314      	adds	r3, #20
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80012d4:	e014      	b.n	8001300 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	490d      	ldr	r1, [pc, #52]	; (8001310 <LinkTimerBefore+0xbc>)
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	3315      	adds	r3, #21
 80012e6:	79ba      	ldrb	r2, [r7, #6]
 80012e8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80012ea:	79ba      	ldrb	r2, [r7, #6]
 80012ec:	4908      	ldr	r1, [pc, #32]	; (8001310 <LinkTimerBefore+0xbc>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	3314      	adds	r3, #20
 80012fa:	79fa      	ldrb	r2, [r7, #7]
 80012fc:	701a      	strb	r2, [r3, #0]
  return;
 80012fe:	bf00      	nop
}
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200002a0 	.word	0x200002a0
 8001310:	20000210 	.word	0x20000210

08001314 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800131e:	4b4e      	ldr	r3, [pc, #312]	; (8001458 <linkTimer+0x144>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b06      	cmp	r3, #6
 8001326:	d118      	bne.n	800135a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001328:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <linkTimer+0x144>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b4b      	ldr	r3, [pc, #300]	; (800145c <linkTimer+0x148>)
 8001330:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001332:	4a49      	ldr	r2, [pc, #292]	; (8001458 <linkTimer+0x144>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	4949      	ldr	r1, [pc, #292]	; (8001460 <linkTimer+0x14c>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	3315      	adds	r3, #21
 8001348:	2206      	movs	r2, #6
 800134a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <linkTimer+0x150>)
 800134e:	f04f 32ff 	mov.w	r2, #4294967295
 8001352:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	81fb      	strh	r3, [r7, #14]
 8001358:	e078      	b.n	800144c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800135a:	f000 f909 	bl	8001570 <ReturnTimeElapsed>
 800135e:	4603      	mov	r3, r0
 8001360:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	493e      	ldr	r1, [pc, #248]	; (8001460 <linkTimer+0x14c>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	3308      	adds	r3, #8
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	79fa      	ldrb	r2, [r7, #7]
 8001378:	4419      	add	r1, r3
 800137a:	4839      	ldr	r0, [pc, #228]	; (8001460 <linkTimer+0x14c>)
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4403      	add	r3, r0
 8001386:	3308      	adds	r3, #8
 8001388:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800138a:	79fa      	ldrb	r2, [r7, #7]
 800138c:	4934      	ldr	r1, [pc, #208]	; (8001460 <linkTimer+0x14c>)
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	3308      	adds	r3, #8
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <linkTimer+0x144>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	4a2e      	ldr	r2, [pc, #184]	; (8001460 <linkTimer+0x14c>)
 80013a8:	460b      	mov	r3, r1
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	440b      	add	r3, r1
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4413      	add	r3, r2
 80013b2:	3308      	adds	r3, #8
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d337      	bcc.n	800142c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <linkTimer+0x144>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80013c2:	7b7a      	ldrb	r2, [r7, #13]
 80013c4:	4926      	ldr	r1, [pc, #152]	; (8001460 <linkTimer+0x14c>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	440b      	add	r3, r1
 80013d0:	3315      	adds	r3, #21
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80013d6:	e013      	b.n	8001400 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80013d8:	7b7a      	ldrb	r2, [r7, #13]
 80013da:	4921      	ldr	r1, [pc, #132]	; (8001460 <linkTimer+0x14c>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	3315      	adds	r3, #21
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80013ec:	7b7a      	ldrb	r2, [r7, #13]
 80013ee:	491c      	ldr	r1, [pc, #112]	; (8001460 <linkTimer+0x14c>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	3315      	adds	r3, #21
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001400:	7b3b      	ldrb	r3, [r7, #12]
 8001402:	2b06      	cmp	r3, #6
 8001404:	d00b      	beq.n	800141e <linkTimer+0x10a>
 8001406:	7b3a      	ldrb	r2, [r7, #12]
 8001408:	4915      	ldr	r1, [pc, #84]	; (8001460 <linkTimer+0x14c>)
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	440b      	add	r3, r1
 8001414:	3308      	adds	r3, #8
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	429a      	cmp	r2, r3
 800141c:	d2dc      	bcs.n	80013d8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800141e:	7b7a      	ldrb	r2, [r7, #13]
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fecf 	bl	80011c8 <LinkTimerAfter>
 800142a:	e00f      	b.n	800144c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <linkTimer+0x144>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff0c 	bl	8001254 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <linkTimer+0x144>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <linkTimer+0x148>)
 8001444:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <linkTimer+0x144>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800144c:	89fb      	ldrh	r3, [r7, #14]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200002a0 	.word	0x200002a0
 800145c:	200002a1 	.word	0x200002a1
 8001460:	20000210 	.word	0x20000210
 8001464:	200002a4 	.word	0x200002a4

08001468 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	460a      	mov	r2, r1
 8001472:	71fb      	strb	r3, [r7, #7]
 8001474:	4613      	mov	r3, r2
 8001476:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <UnlinkTimer+0xf8>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	429a      	cmp	r2, r3
 8001482:	d111      	bne.n	80014a8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001484:	4b36      	ldr	r3, [pc, #216]	; (8001560 <UnlinkTimer+0xf8>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b36      	ldr	r3, [pc, #216]	; (8001564 <UnlinkTimer+0xfc>)
 800148c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800148e:	79fa      	ldrb	r2, [r7, #7]
 8001490:	4935      	ldr	r1, [pc, #212]	; (8001568 <UnlinkTimer+0x100>)
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	3315      	adds	r3, #21
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <UnlinkTimer+0xf8>)
 80014a4:	701a      	strb	r2, [r3, #0]
 80014a6:	e03e      	b.n	8001526 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	492f      	ldr	r1, [pc, #188]	; (8001568 <UnlinkTimer+0x100>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	440b      	add	r3, r1
 80014b6:	3314      	adds	r3, #20
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80014bc:	79fa      	ldrb	r2, [r7, #7]
 80014be:	492a      	ldr	r1, [pc, #168]	; (8001568 <UnlinkTimer+0x100>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	440b      	add	r3, r1
 80014ca:	3315      	adds	r3, #21
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80014d0:	79f9      	ldrb	r1, [r7, #7]
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	4824      	ldr	r0, [pc, #144]	; (8001568 <UnlinkTimer+0x100>)
 80014d6:	460b      	mov	r3, r1
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	440b      	add	r3, r1
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4403      	add	r3, r0
 80014e0:	3315      	adds	r3, #21
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b2d8      	uxtb	r0, r3
 80014e6:	4920      	ldr	r1, [pc, #128]	; (8001568 <UnlinkTimer+0x100>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3315      	adds	r3, #21
 80014f4:	4602      	mov	r2, r0
 80014f6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d013      	beq.n	8001526 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80014fe:	79f9      	ldrb	r1, [r7, #7]
 8001500:	7bba      	ldrb	r2, [r7, #14]
 8001502:	4819      	ldr	r0, [pc, #100]	; (8001568 <UnlinkTimer+0x100>)
 8001504:	460b      	mov	r3, r1
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	440b      	add	r3, r1
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4403      	add	r3, r0
 800150e:	3314      	adds	r3, #20
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	b2d8      	uxtb	r0, r3
 8001514:	4914      	ldr	r1, [pc, #80]	; (8001568 <UnlinkTimer+0x100>)
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	3314      	adds	r3, #20
 8001522:	4602      	mov	r2, r0
 8001524:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001526:	79fa      	ldrb	r2, [r7, #7]
 8001528:	490f      	ldr	r1, [pc, #60]	; (8001568 <UnlinkTimer+0x100>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	330c      	adds	r3, #12
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <UnlinkTimer+0xf8>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b06      	cmp	r3, #6
 8001542:	d107      	bne.n	8001554 <UnlinkTimer+0xec>
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d104      	bne.n	8001554 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <UnlinkTimer+0x104>)
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	601a      	str	r2, [r3, #0]
  }

  return;
 8001552:	bf00      	nop
 8001554:	bf00      	nop
}
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	200002a0 	.word	0x200002a0
 8001564:	200002a1 	.word	0x200002a1
 8001568:	20000210 	.word	0x20000210
 800156c:	200002a4 	.word	0x200002a4

08001570 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <ReturnTimeElapsed+0x70>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157e:	d026      	beq.n	80015ce <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001580:	f7ff fe02 	bl	8001188 <ReadRtcSsrValue>
 8001584:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <ReturnTimeElapsed+0x70>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	d805      	bhi.n	800159c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <ReturnTimeElapsed+0x70>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	e00a      	b.n	80015b2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <ReturnTimeElapsed+0x74>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80015a8:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <ReturnTimeElapsed+0x70>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <ReturnTimeElapsed+0x78>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <ReturnTimeElapsed+0x7c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	40d3      	lsrs	r3, r2
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	e001      	b.n	80015d2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	b29b      	uxth	r3, r3
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002a4 	.word	0x200002a4
 80015e4:	200002ac 	.word	0x200002ac
 80015e8:	200002aa 	.word	0x200002aa
 80015ec:	200002a9 	.word	0x200002a9

080015f0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d108      	bne.n	8001612 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001600:	f7ff fdc2 	bl	8001188 <ReadRtcSsrValue>
 8001604:	4603      	mov	r3, r0
 8001606:	4a21      	ldr	r2, [pc, #132]	; (800168c <RestartWakeupCounter+0x9c>)
 8001608:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800160a:	2003      	movs	r0, #3
 800160c:	f001 fc9d 	bl	8002f4a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001610:	e039      	b.n	8001686 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d803      	bhi.n	8001620 <RestartWakeupCounter+0x30>
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <RestartWakeupCounter+0xa0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d002      	beq.n	8001626 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	3b01      	subs	r3, #1
 8001624:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001626:	bf00      	nop
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <RestartWakeupCounter+0xa4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f8      	beq.n	8001628 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <RestartWakeupCounter+0xa4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <RestartWakeupCounter+0xa4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001646:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <RestartWakeupCounter+0xa8>)
 800164a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800164e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001650:	2003      	movs	r0, #3
 8001652:	f001 fc88 	bl	8002f66 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <RestartWakeupCounter+0xac>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	0c1b      	lsrs	r3, r3, #16
 800165c:	041b      	lsls	r3, r3, #16
 800165e:	88fa      	ldrh	r2, [r7, #6]
 8001660:	490e      	ldr	r1, [pc, #56]	; (800169c <RestartWakeupCounter+0xac>)
 8001662:	4313      	orrs	r3, r2
 8001664:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001666:	f7ff fd8f 	bl	8001188 <ReadRtcSsrValue>
 800166a:	4603      	mov	r3, r0
 800166c:	4a07      	ldr	r2, [pc, #28]	; (800168c <RestartWakeupCounter+0x9c>)
 800166e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <RestartWakeupCounter+0xa4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <RestartWakeupCounter+0xa4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800167e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001680:	f3af 8000 	nop.w
  return ;
 8001684:	bf00      	nop
}
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200002a4 	.word	0x200002a4
 8001690:	200002a9 	.word	0x200002a9
 8001694:	200004dc 	.word	0x200004dc
 8001698:	58000800 	.word	0x58000800
 800169c:	40002800 	.word	0x40002800

080016a0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80016a6:	4b45      	ldr	r3, [pc, #276]	; (80017bc <RescheduleTimerList+0x11c>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b2:	d107      	bne.n	80016c4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80016b4:	bf00      	nop
 80016b6:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <RescheduleTimerList+0x120>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f8      	bne.n	80016b6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80016c4:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <RescheduleTimerList+0x120>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <RescheduleTimerList+0x120>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016d2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80016d4:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <RescheduleTimerList+0x124>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	493a      	ldr	r1, [pc, #232]	; (80017c8 <RescheduleTimerList+0x128>)
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	3308      	adds	r3, #8
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80016ee:	f7ff ff3f 	bl	8001570 <ReturnTimeElapsed>
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d205      	bcs.n	800170a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <RescheduleTimerList+0x12c>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	e04d      	b.n	80017a6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	4a30      	ldr	r2, [pc, #192]	; (80017d0 <RescheduleTimerList+0x130>)
 800170e:	8812      	ldrh	r2, [r2, #0]
 8001710:	b292      	uxth	r2, r2
 8001712:	4413      	add	r3, r2
 8001714:	461a      	mov	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	4293      	cmp	r3, r2
 800171a:	d906      	bls.n	800172a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800171c:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <RescheduleTimerList+0x130>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <RescheduleTimerList+0x12c>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e03d      	b.n	80017a6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	b29a      	uxth	r2, r3
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <RescheduleTimerList+0x12c>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800173a:	e034      	b.n	80017a6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	4922      	ldr	r1, [pc, #136]	; (80017c8 <RescheduleTimerList+0x128>)
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	3308      	adds	r3, #8
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	429a      	cmp	r2, r3
 8001752:	d20a      	bcs.n	800176a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001754:	7bfa      	ldrb	r2, [r7, #15]
 8001756:	491c      	ldr	r1, [pc, #112]	; (80017c8 <RescheduleTimerList+0x128>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3308      	adds	r3, #8
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e013      	b.n	8001792 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	4916      	ldr	r1, [pc, #88]	; (80017c8 <RescheduleTimerList+0x128>)
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3308      	adds	r3, #8
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	1ac9      	subs	r1, r1, r3
 8001782:	4811      	ldr	r0, [pc, #68]	; (80017c8 <RescheduleTimerList+0x128>)
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4403      	add	r3, r0
 800178e:	3308      	adds	r3, #8
 8001790:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <RescheduleTimerList+0x128>)
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	3315      	adds	r3, #21
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	2b06      	cmp	r3, #6
 80017aa:	d1c7      	bne.n	800173c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80017ac:	89bb      	ldrh	r3, [r7, #12]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff1e 	bl	80015f0 <RestartWakeupCounter>

  return ;
 80017b4:	bf00      	nop
}
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40002800 	.word	0x40002800
 80017c0:	200004dc 	.word	0x200004dc
 80017c4:	200002a0 	.word	0x200002a0
 80017c8:	20000210 	.word	0x20000210
 80017cc:	200002a8 	.word	0x200002a8
 80017d0:	200002ae 	.word	0x200002ae

080017d4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017da:	f3ef 8310 	mrs	r3, PRIMASK
 80017de:	617b      	str	r3, [r7, #20]
  return(result);
 80017e0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	22ca      	movs	r2, #202	; 0xca
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
 80017f0:	4b57      	ldr	r3, [pc, #348]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2253      	movs	r2, #83	; 0x53
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80017f8:	4b55      	ldr	r3, [pc, #340]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	4b54      	ldr	r3, [pc, #336]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001806:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001808:	4b52      	ldr	r3, [pc, #328]	; (8001954 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001810:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001814:	4950      	ldr	r1, [pc, #320]	; (8001958 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	330c      	adds	r3, #12
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d16e      	bne.n	8001908 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800182a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800182e:	494a      	ldr	r1, [pc, #296]	; (8001958 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800183e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001842:	4945      	ldr	r1, [pc, #276]	; (8001958 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3310      	adds	r3, #16
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001854:	4b41      	ldr	r3, [pc, #260]	; (800195c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d04c      	beq.n	80018f8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800185e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001862:	493d      	ldr	r1, [pc, #244]	; (8001958 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	330d      	adds	r3, #13
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b01      	cmp	r3, #1
 8001876:	d124      	bne.n	80018c2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800187c:	2101      	movs	r1, #1
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fdf2 	bl	8001468 <UnlinkTimer>
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f383 8810 	msr	PRIMASK, r3
}
 800188e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001890:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001894:	4930      	ldr	r1, [pc, #192]	; (8001958 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3304      	adds	r3, #4
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fa32 	bl	8001d14 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	22ca      	movs	r2, #202	; 0xca
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2253      	movs	r2, #83	; 0x53
 80018be:	625a      	str	r2, [r3, #36]	; 0x24
 80018c0:	e012      	b.n	80018e8 <HW_TS_RTC_Wakeup_Handler+0x114>
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f383 8810 	msr	PRIMASK, r3
}
 80018cc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80018ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f99a 	bl	8001c0c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	22ca      	movs	r2, #202	; 0xca
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2253      	movs	r2, #83	; 0x53
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80018e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	4619      	mov	r1, r3
 80018f0:	69b8      	ldr	r0, [r7, #24]
 80018f2:	f000 fa95 	bl	8001e20 <HW_TS_RTC_Int_AppNot>
 80018f6:	e022      	b.n	800193e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80018f8:	f7ff fed2 	bl	80016a0 <RescheduleTimerList>
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f383 8810 	msr	PRIMASK, r3
}
 8001906:	e01a      	b.n	800193e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001908:	bf00      	nop
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f8      	beq.n	800190a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001928:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800192c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f383 8810 	msr	PRIMASK, r3
}
 800193c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	22ff      	movs	r2, #255	; 0xff
 8001944:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001946:	bf00      	nop
}
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200004dc 	.word	0x200004dc
 8001954:	200002a0 	.word	0x200002a0
 8001958:	20000210 	.word	0x20000210
 800195c:	200002a8 	.word	0x200002a8
 8001960:	58000800 	.word	0x58000800

08001964 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001970:	4b5e      	ldr	r3, [pc, #376]	; (8001aec <HW_TS_Init+0x188>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	22ca      	movs	r2, #202	; 0xca
 8001976:	625a      	str	r2, [r3, #36]	; 0x24
 8001978:	4b5c      	ldr	r3, [pc, #368]	; (8001aec <HW_TS_Init+0x188>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2253      	movs	r2, #83	; 0x53
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001980:	4b5b      	ldr	r3, [pc, #364]	; (8001af0 <HW_TS_Init+0x18c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a5a      	ldr	r2, [pc, #360]	; (8001af0 <HW_TS_Init+0x18c>)
 8001986:	f043 0320 	orr.w	r3, r3, #32
 800198a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800198c:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <HW_TS_Init+0x18c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f1c3 0304 	rsb	r3, r3, #4
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b55      	ldr	r3, [pc, #340]	; (8001af4 <HW_TS_Init+0x190>)
 80019a0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80019a2:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HW_TS_Init+0x18c>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80019aa:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80019ae:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	fa92 f2a2 	rbit	r2, r2
 80019b6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	2a00      	cmp	r2, #0
 80019c0:	d101      	bne.n	80019c6 <HW_TS_Init+0x62>
  {
    return 32U;
 80019c2:	2220      	movs	r2, #32
 80019c4:	e003      	b.n	80019ce <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	fab2 f282 	clz	r2, r2
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	40d3      	lsrs	r3, r2
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b48      	ldr	r3, [pc, #288]	; (8001af8 <HW_TS_Init+0x194>)
 80019d8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80019da:	4b45      	ldr	r3, [pc, #276]	; (8001af0 <HW_TS_Init+0x18c>)
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b44      	ldr	r3, [pc, #272]	; (8001afc <HW_TS_Init+0x198>)
 80019ec:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HW_TS_Init+0x198>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	4a40      	ldr	r2, [pc, #256]	; (8001af8 <HW_TS_Init+0x194>)
 80019f6:	7812      	ldrb	r2, [r2, #0]
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a00:	4a3c      	ldr	r2, [pc, #240]	; (8001af4 <HW_TS_Init+0x190>)
 8001a02:	7812      	ldrb	r2, [r2, #0]
 8001a04:	40d3      	lsrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d904      	bls.n	8001a1c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001a12:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <HW_TS_Init+0x19c>)
 8001a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a18:	801a      	strh	r2, [r3, #0]
 8001a1a:	e003      	b.n	8001a24 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <HW_TS_Init+0x19c>)
 8001a22:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001a24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001a28:	f7ff fb9c 	bl	8001164 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001a2c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001a30:	f7ff fb84 	bl	800113c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d13d      	bne.n	8001ab6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <HW_TS_Init+0x1a0>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a40:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HW_TS_Init+0x1a4>)
 8001a42:	f04f 32ff 	mov.w	r2, #4294967295
 8001a46:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	77fb      	strb	r3, [r7, #31]
 8001a4c:	e00c      	b.n	8001a68 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001a4e:	7ffa      	ldrb	r2, [r7, #31]
 8001a50:	492e      	ldr	r1, [pc, #184]	; (8001b0c <HW_TS_Init+0x1a8>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	330c      	adds	r3, #12
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001a62:	7ffb      	ldrb	r3, [r7, #31]
 8001a64:	3301      	adds	r3, #1
 8001a66:	77fb      	strb	r3, [r7, #31]
 8001a68:	7ffb      	ldrb	r3, [r7, #31]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d9ef      	bls.n	8001a4e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HW_TS_Init+0x1ac>)
 8001a70:	2206      	movs	r2, #6
 8001a72:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HW_TS_Init+0x188>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	; (8001aec <HW_TS_Init+0x188>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a82:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HW_TS_Init+0x188>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HW_TS_Init+0x188>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a94:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HW_TS_Init+0x1b0>)
 8001a98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a9c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	f001 fa61 	bl	8002f66 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HW_TS_Init+0x188>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HW_TS_Init+0x188>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	e009      	b.n	8001aca <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HW_TS_Init+0x188>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	f001 fa40 	bl	8002f4a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HW_TS_Init+0x188>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	22ff      	movs	r2, #255	; 0xff
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2103      	movs	r1, #3
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	f001 f9f5 	bl	8002ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001adc:	2003      	movs	r0, #3
 8001ade:	f001 fa0c 	bl	8002efa <HAL_NVIC_EnableIRQ>

  return;
 8001ae2:	bf00      	nop
}
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200004dc 	.word	0x200004dc
 8001af0:	40002800 	.word	0x40002800
 8001af4:	200002a9 	.word	0x200002a9
 8001af8:	200002aa 	.word	0x200002aa
 8001afc:	200002ac 	.word	0x200002ac
 8001b00:	200002ae 	.word	0x200002ae
 8001b04:	200002a8 	.word	0x200002a8
 8001b08:	200002a4 	.word	0x200002a4
 8001b0c:	20000210 	.word	0x20000210
 8001b10:	200002a0 	.word	0x200002a0
 8001b14:	58000800 	.word	0x58000800

08001b18 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b08b      	sub	sp, #44	; 0x2c
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	4613      	mov	r3, r2
 8001b26:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b32:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b34:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b36:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b38:	b672      	cpsid	i
}
 8001b3a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001b3c:	e004      	b.n	8001b48 <HW_TS_Create+0x30>
  {
    loop++;
 8001b3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b42:	3301      	adds	r3, #1
 8001b44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d80c      	bhi.n	8001b6a <HW_TS_Create+0x52>
 8001b50:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001b54:	492c      	ldr	r1, [pc, #176]	; (8001c08 <HW_TS_Create+0xf0>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	330c      	adds	r3, #12
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1e9      	bne.n	8001b3e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d038      	beq.n	8001be4 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001b72:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001b76:	4924      	ldr	r1, [pc, #144]	; (8001c08 <HW_TS_Create+0xf0>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	330c      	adds	r3, #12
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	f383 8810 	msr	PRIMASK, r3
}
 8001b92:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001b94:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001b98:	491b      	ldr	r1, [pc, #108]	; (8001c08 <HW_TS_Create+0xf0>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3310      	adds	r3, #16
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001baa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001bae:	4916      	ldr	r1, [pc, #88]	; (8001c08 <HW_TS_Create+0xf0>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	440b      	add	r3, r1
 8001bba:	330d      	adds	r3, #13
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001bc0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001bc4:	4910      	ldr	r1, [pc, #64]	; (8001c08 <HW_TS_Create+0xf0>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001bda:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001be2:	e008      	b.n	8001bf6 <HW_TS_Create+0xde>
 8001be4:	6a3b      	ldr	r3, [r7, #32]
 8001be6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f383 8810 	msr	PRIMASK, r3
}
 8001bee:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	372c      	adds	r7, #44	; 0x2c
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000210 	.word	0x20000210

08001c0c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c16:	f3ef 8310 	mrs	r3, PRIMASK
 8001c1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001c1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001c24:	2003      	movs	r0, #3
 8001c26:	f001 f976 	bl	8002f16 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c2a:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <HW_TS_Stop+0xf0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	22ca      	movs	r2, #202	; 0xca
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24
 8001c32:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <HW_TS_Stop+0xf0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2253      	movs	r2, #83	; 0x53
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001c3a:	79fa      	ldrb	r2, [r7, #7]
 8001c3c:	4930      	ldr	r1, [pc, #192]	; (8001d00 <HW_TS_Stop+0xf4>)
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	440b      	add	r3, r1
 8001c48:	330c      	adds	r3, #12
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d142      	bne.n	8001cd8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fc06 	bl	8001468 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <HW_TS_Stop+0xf8>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c62:	7cfb      	ldrb	r3, [r7, #19]
 8001c64:	2b06      	cmp	r3, #6
 8001c66:	d12f      	bne.n	8001cc8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HW_TS_Stop+0xfc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c74:	d107      	bne.n	8001c86 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001c76:	bf00      	nop
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HW_TS_Stop+0xf0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f8      	bne.n	8001c78 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HW_TS_Stop+0xf0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HW_TS_Stop+0xf0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c94:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c96:	bf00      	nop
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HW_TS_Stop+0xf0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f8      	beq.n	8001c98 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HW_TS_Stop+0xf0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <HW_TS_Stop+0xf0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001cb6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HW_TS_Stop+0x100>)
 8001cba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cbe:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f001 f950 	bl	8002f66 <HAL_NVIC_ClearPendingIRQ>
 8001cc6:	e007      	b.n	8001cd8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HW_TS_Stop+0x104>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	7cfa      	ldrb	r2, [r7, #19]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001cd4:	f7ff fce4 	bl	80016a0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <HW_TS_Stop+0xf0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	22ff      	movs	r2, #255	; 0xff
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f001 f90a 	bl	8002efa <HAL_NVIC_EnableIRQ>
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f383 8810 	msr	PRIMASK, r3
}
 8001cf0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001cf2:	bf00      	nop
}
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200004dc 	.word	0x200004dc
 8001d00:	20000210 	.word	0x20000210
 8001d04:	200002a0 	.word	0x200002a0
 8001d08:	40002800 	.word	0x40002800
 8001d0c:	58000800 	.word	0x58000800
 8001d10:	200002a1 	.word	0x200002a1

08001d14 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001d20:	79fa      	ldrb	r2, [r7, #7]
 8001d22:	493b      	ldr	r1, [pc, #236]	; (8001e10 <HW_TS_Start+0xfc>)
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	330c      	adds	r3, #12
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d103      	bne.n	8001d40 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff66 	bl	8001c0c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d40:	f3ef 8310 	mrs	r3, PRIMASK
 8001d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d46:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4a:	b672      	cpsid	i
}
 8001d4c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001d4e:	2003      	movs	r0, #3
 8001d50:	f001 f8e1 	bl	8002f16 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HW_TS_Start+0x100>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	22ca      	movs	r2, #202	; 0xca
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HW_TS_Start+0x100>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2253      	movs	r2, #83	; 0x53
 8001d62:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001d64:	79fa      	ldrb	r2, [r7, #7]
 8001d66:	492a      	ldr	r1, [pc, #168]	; (8001e10 <HW_TS_Start+0xfc>)
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	330c      	adds	r3, #12
 8001d74:	2202      	movs	r2, #2
 8001d76:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	4925      	ldr	r1, [pc, #148]	; (8001e10 <HW_TS_Start+0xfc>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	3308      	adds	r3, #8
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001d8c:	79fa      	ldrb	r2, [r7, #7]
 8001d8e:	4920      	ldr	r1, [pc, #128]	; (8001e10 <HW_TS_Start+0xfc>)
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	440b      	add	r3, r1
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fab6 	bl	8001314 <linkTimer>
 8001da8:	4603      	mov	r3, r0
 8001daa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <HW_TS_Start+0x104>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HW_TS_Start+0x108>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	7c7a      	ldrb	r2, [r7, #17]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d002      	beq.n	8001dc4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001dbe:	f7ff fc6f 	bl	80016a0 <RescheduleTimerList>
 8001dc2:	e013      	b.n	8001dec <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001dc4:	79fa      	ldrb	r2, [r7, #7]
 8001dc6:	4912      	ldr	r1, [pc, #72]	; (8001e10 <HW_TS_Start+0xfc>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	6819      	ldr	r1, [r3, #0]
 8001dd6:	8a7b      	ldrh	r3, [r7, #18]
 8001dd8:	79fa      	ldrb	r2, [r7, #7]
 8001dda:	1ac9      	subs	r1, r1, r3
 8001ddc:	480c      	ldr	r0, [pc, #48]	; (8001e10 <HW_TS_Start+0xfc>)
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4403      	add	r3, r0
 8001de8:	3308      	adds	r3, #8
 8001dea:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <HW_TS_Start+0x100>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	22ff      	movs	r2, #255	; 0xff
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001df4:	2003      	movs	r0, #3
 8001df6:	f001 f880 	bl	8002efa <HAL_NVIC_EnableIRQ>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f383 8810 	msr	PRIMASK, r3
}
 8001e04:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001e06:	bf00      	nop
}
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000210 	.word	0x20000210
 8001e14:	200004dc 	.word	0x200004dc
 8001e18:	200002a0 	.word	0x200002a0
 8001e1c:	200002a1 	.word	0x200002a1

08001e20 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4798      	blx	r3

  return;
 8001e32:	bf00      	nop
}
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4603      	mov	r3, r0
 8001e48:	73fb      	strb	r3, [r7, #15]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10c      	bne.n	8001e6e <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8001e54:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <HW_UART_Receive_IT+0x3c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HW_UART_Receive_IT+0x40>)
 8001e5c:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <HW_UART_Receive_IT+0x44>)
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	89bb      	ldrh	r3, [r7, #12]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <HW_UART_Receive_IT+0x40>)
 8001e68:	f003 fe98 	bl	8005b9c <HAL_UART_Receive_IT>
            break;
 8001e6c:	e000      	b.n	8001e70 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8001e6e:	bf00      	nop
    }

    return;
 8001e70:	bf00      	nop
}
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200002b0 	.word	0x200002b0
 8001e7c:	20000388 	.word	0x20000388
 8001e80:	40013800 	.word	0x40013800

08001e84 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4603      	mov	r3, r0
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	4613      	mov	r3, r2
 8001e94:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10e      	bne.n	8001ec2 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HW_UART_Transmit_DMA+0x80>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HW_UART_Transmit_DMA+0x84>)
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HW_UART_Transmit_DMA+0x88>)
 8001eae:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001eb0:	89bb      	ldrh	r3, [r7, #12]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	4814      	ldr	r0, [pc, #80]	; (8001f08 <HW_UART_Transmit_DMA+0x84>)
 8001eb8:	f003 febc 	bl	8005c34 <HAL_UART_Transmit_DMA>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	75fb      	strb	r3, [r7, #23]
            break;
 8001ec0:	e000      	b.n	8001ec4 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001ec2:	bf00      	nop
    }

    switch (hal_status)
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d816      	bhi.n	8001ef8 <HW_UART_Transmit_DMA+0x74>
 8001eca:	a201      	add	r2, pc, #4	; (adr r2, 8001ed0 <HW_UART_Transmit_DMA+0x4c>)
 8001ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed0:	08001ee1 	.word	0x08001ee1
 8001ed4:	08001ee7 	.word	0x08001ee7
 8001ed8:	08001eed 	.word	0x08001eed
 8001edc:	08001ef3 	.word	0x08001ef3
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	75bb      	strb	r3, [r7, #22]
            break;
 8001ee4:	e009      	b.n	8001efa <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75bb      	strb	r3, [r7, #22]
            break;
 8001eea:	e006      	b.n	8001efa <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001eec:	2302      	movs	r3, #2
 8001eee:	75bb      	strb	r3, [r7, #22]
            break;
 8001ef0:	e003      	b.n	8001efa <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	75bb      	strb	r3, [r7, #22]
            break;
 8001ef6:	e000      	b.n	8001efa <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001ef8:	bf00      	nop
    }

    return hw_status;
 8001efa:	7dbb      	ldrb	r3, [r7, #22]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	200002b4 	.word	0x200002b4
 8001f08:	20000388 	.word	0x20000388
 8001f0c:	40013800 	.word	0x40013800

08001f10 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_UART_RxCpltCallback+0x34>)
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d107      	bne.n	8001f34 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_UART_RxCpltCallback+0x38>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_UART_RxCpltCallback+0x38>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4798      	blx	r3
            }
            break;
 8001f32:	e001      	b.n	8001f38 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001f34:	bf00      	nop
 8001f36:	e000      	b.n	8001f3a <HAL_UART_RxCpltCallback+0x2a>
            break;
 8001f38:	bf00      	nop
    }

    return;
 8001f3a:	bf00      	nop
}
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40013800 	.word	0x40013800
 8001f48:	200002b0 	.word	0x200002b0

08001f4c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_UART_TxCpltCallback+0x34>)
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d107      	bne.n	8001f70 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <HAL_UART_TxCpltCallback+0x38>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_UART_TxCpltCallback+0x38>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4798      	blx	r3
            }
            break;
 8001f6e:	e001      	b.n	8001f74 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001f70:	bf00      	nop
 8001f72:	e000      	b.n	8001f76 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001f74:	bf00      	nop
    }

    return;
 8001f76:	bf00      	nop
}
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40013800 	.word	0x40013800
 8001f84:	200002b4 	.word	0x200002b4

08001f88 <LL_RCC_LSE_SetDriveCapability>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f98:	f023 0218 	bic.w	r2, r3, #24
 8001f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_AHB1_GRP1_EnableClock>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_AHB2_GRP1_EnableClock>:
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b085      	sub	sp, #20
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ff4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800201c:	f000 fd7a 	bl	8002b14 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002020:	f7fe fd48 	bl	8000ab4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002024:	f000 f812 	bl	800204c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002028:	f000 f86c 	bl	8002104 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800202c:	f000 f88a 	bl	8002144 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002030:	f000 f943 	bl	80022ba <MX_GPIO_Init>
  MX_DMA_Init();
 8002034:	f000 f924 	bl	8002280 <MX_DMA_Init>
  MX_RTC_Init();
 8002038:	f000 f8ee 	bl	8002218 <MX_RTC_Init>
  MX_RF_Init();
 800203c:	f000 f8e4 	bl	8002208 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002040:	f7fe fd46 	bl	8000ad0 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002044:	f7fe ff85 	bl	8000f52 <MX_APPE_Process>
 8002048:	e7fc      	b.n	8002044 <main+0x2c>
	...

0800204c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b09a      	sub	sp, #104	; 0x68
 8002050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002052:	f107 0320 	add.w	r3, r7, #32
 8002056:	2248      	movs	r2, #72	; 0x48
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f00a fd68 	bl	800cb30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	611a      	str	r2, [r3, #16]
 800206e:	615a      	str	r2, [r3, #20]
 8002070:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002072:	f001 fd65 	bl	8003b40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff ff86 	bl	8001f88 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <SystemClock_Config+0xb4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002084:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <SystemClock_Config+0xb4>)
 8002086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <SystemClock_Config+0xb4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002098:	2307      	movs	r3, #7
 800209a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800209c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020a2:	2301      	movs	r3, #1
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020ac:	2340      	movs	r3, #64	; 0x40
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b4:	f107 0320 	add.w	r3, r7, #32
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 f8d5 	bl	8004268 <HAL_RCC_OscConfig>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80020c4:	f000 f906 	bl	80022d4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80020c8:	236f      	movs	r3, #111	; 0x6f
 80020ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80020cc:	2302      	movs	r3, #2
 80020ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2101      	movs	r1, #1
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 fc31 	bl	8004950 <HAL_RCC_ClockConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80020f4:	f000 f8ee 	bl	80022d4 <Error_Handler>
  }
}
 80020f8:	bf00      	nop
 80020fa:	3768      	adds	r7, #104	; 0x68
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	58000400 	.word	0x58000400

08002104 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b094      	sub	sp, #80	; 0x50
 8002108:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800210a:	463b      	mov	r3, r7
 800210c:	2250      	movs	r2, #80	; 0x50
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f00a fd0d 	bl	800cb30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002116:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800211a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800211c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002120:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002122:	2302      	movs	r3, #2
 8002124:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002126:	2310      	movs	r3, #16
 8002128:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212a:	463b      	mov	r3, r7
 800212c:	4618      	mov	r0, r3
 800212e:	f003 f84c 	bl	80051ca <HAL_RCCEx_PeriphCLKConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002138:	f000 f8cc 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800213c:	bf00      	nop
 800213e:	3750      	adds	r7, #80	; 0x50
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_IPCC_Init+0x20>)
 800214a:	4a07      	ldr	r2, [pc, #28]	; (8002168 <MX_IPCC_Init+0x24>)
 800214c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_IPCC_Init+0x20>)
 8002150:	f001 fc70 	bl	8003a34 <HAL_IPCC_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800215a:	f000 f8bb 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200002b8 	.word	0x200002b8
 8002168:	58000c00 	.word	0x58000c00

0800216c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002170:	4b23      	ldr	r3, [pc, #140]	; (8002200 <MX_USART1_UART_Init+0x94>)
 8002172:	4a24      	ldr	r2, [pc, #144]	; (8002204 <MX_USART1_UART_Init+0x98>)
 8002174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002176:	4b22      	ldr	r3, [pc, #136]	; (8002200 <MX_USART1_UART_Init+0x94>)
 8002178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800217c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <MX_USART1_UART_Init+0x94>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002184:	4b1e      	ldr	r3, [pc, #120]	; (8002200 <MX_USART1_UART_Init+0x94>)
 8002186:	2200      	movs	r2, #0
 8002188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <MX_USART1_UART_Init+0x94>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002190:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <MX_USART1_UART_Init+0x94>)
 8002192:	220c      	movs	r2, #12
 8002194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <MX_USART1_UART_Init+0x94>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <MX_USART1_UART_Init+0x94>)
 800219e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021a2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_USART1_UART_Init+0x94>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <MX_USART1_UART_Init+0x94>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <MX_USART1_UART_Init+0x94>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021b6:	4812      	ldr	r0, [pc, #72]	; (8002200 <MX_USART1_UART_Init+0x94>)
 80021b8:	f003 fca0 	bl	8005afc <HAL_UART_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80021c2:	f000 f887 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c6:	2100      	movs	r1, #0
 80021c8:	480d      	ldr	r0, [pc, #52]	; (8002200 <MX_USART1_UART_Init+0x94>)
 80021ca:	f005 fcf2 	bl	8007bb2 <HAL_UARTEx_SetTxFifoThreshold>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80021d4:	f000 f87e 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d8:	2100      	movs	r1, #0
 80021da:	4809      	ldr	r0, [pc, #36]	; (8002200 <MX_USART1_UART_Init+0x94>)
 80021dc:	f005 fd27 	bl	8007c2e <HAL_UARTEx_SetRxFifoThreshold>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80021e6:	f000 f875 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_USART1_UART_Init+0x94>)
 80021ec:	f005 fca8 	bl	8007b40 <HAL_UARTEx_DisableFifoMode>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80021f6:	f000 f86d 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000388 	.word	0x20000388
 8002204:	40013800 	.word	0x40013800

08002208 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_RTC_Init+0x60>)
 800221e:	4a17      	ldr	r2, [pc, #92]	; (800227c <MX_RTC_Init+0x64>)
 8002220:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <MX_RTC_Init+0x60>)
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002228:	4b13      	ldr	r3, [pc, #76]	; (8002278 <MX_RTC_Init+0x60>)
 800222a:	220f      	movs	r2, #15
 800222c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <MX_RTC_Init+0x60>)
 8002230:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002234:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <MX_RTC_Init+0x60>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_RTC_Init+0x60>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <MX_RTC_Init+0x60>)
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_RTC_Init+0x60>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800224e:	480a      	ldr	r0, [pc, #40]	; (8002278 <MX_RTC_Init+0x60>)
 8002250:	f003 fa42 	bl	80056d8 <HAL_RTC_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800225a:	f000 f83b 	bl	80022d4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_RTC_Init+0x60>)
 8002264:	f003 fb38 	bl	80058d8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800226e:	f000 f831 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200004dc 	.word	0x200004dc
 800227c:	40002800 	.word	0x40002800

08002280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002284:	2004      	movs	r0, #4
 8002286:	f7ff fe95 	bl	8001fb4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800228a:	2002      	movs	r0, #2
 800228c:	f7ff fe92 	bl	8001fb4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff fe8f 	bl	8001fb4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	210f      	movs	r1, #15
 800229a:	200e      	movs	r0, #14
 800229c:	f000 fe13 	bl	8002ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80022a0:	200e      	movs	r0, #14
 80022a2:	f000 fe2a 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	210f      	movs	r1, #15
 80022aa:	203a      	movs	r0, #58	; 0x3a
 80022ac:	f000 fe0b 	bl	8002ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80022b0:	203a      	movs	r0, #58	; 0x3a
 80022b2:	f000 fe22 	bl	8002efa <HAL_NVIC_EnableIRQ>

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}

080022ba <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	2004      	movs	r0, #4
 80022c0:	f7ff fe91 	bl	8001fe6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c4:	2001      	movs	r0, #1
 80022c6:	f7ff fe8e 	bl	8001fe6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	2002      	movs	r0, #2
 80022cc:	f7ff fe8b 	bl	8001fe6 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <LL_RCC_EnableRTC>:
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80022e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <LL_AHB2_GRP1_EnableClock>:
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800230c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002310:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4313      	orrs	r3, r2
 800231a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002320:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002328:	68fb      	ldr	r3, [r7, #12]
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_AHB3_GRP1_EnableClock>:
{
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4313      	orrs	r3, r2
 800234c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800234e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4013      	ands	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_APB1_GRP1_EnableClock>:
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4313      	orrs	r3, r2
 800237e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002384:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4013      	ands	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800238c:	68fb      	ldr	r3, [r7, #12]
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_APB1_GRP2_EnableClock>:
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80023a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4013      	ands	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_APB2_GRP1_EnableClock>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4013      	ands	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023f0:	68fb      	ldr	r3, [r7, #12]
}
 80023f2:	bf00      	nop
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002402:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002406:	f7ff ff96 	bl	8002336 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	202e      	movs	r0, #46	; 0x2e
 8002410:	f000 fd59 	bl	8002ec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002414:	202e      	movs	r0, #46	; 0x2e
 8002416:	f000 fd70 	bl	8002efa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0d      	ldr	r2, [pc, #52]	; (8002464 <HAL_IPCC_MspInit+0x44>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d113      	bne.n	800245a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002432:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002436:	f7ff ff7e 	bl	8002336 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2100      	movs	r1, #0
 800243e:	202c      	movs	r0, #44	; 0x2c
 8002440:	f000 fd41 	bl	8002ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002444:	202c      	movs	r0, #44	; 0x2c
 8002446:	f000 fd58 	bl	8002efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	202d      	movs	r0, #45	; 0x2d
 8002450:	f000 fd39 	bl	8002ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002454:	202d      	movs	r0, #45	; 0x2d
 8002456:	f000 fd50 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	58000c00 	.word	0x58000c00

08002468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b0a0      	sub	sp, #128	; 0x80
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	2250      	movs	r2, #80	; 0x50
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f00a fb51 	bl	800cb30 <memset>
  if(huart->Instance==LPUART1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a68      	ldr	r2, [pc, #416]	; (8002634 <HAL_UART_MspInit+0x1cc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d16e      	bne.n	8002576 <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002498:	2302      	movs	r3, #2
 800249a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800249c:	2300      	movs	r3, #0
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fe90 	bl	80051ca <HAL_RCCEx_PeriphCLKConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024b0:	f7ff ff10 	bl	80022d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7ff ff70 	bl	800239a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	2001      	movs	r0, #1
 80024bc:	f7ff ff22 	bl	8002304 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024c0:	230c      	movs	r3, #12
 80024c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024cc:	2303      	movs	r3, #3
 80024ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80024d0:	2308      	movs	r3, #8
 80024d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024d8:	4619      	mov	r1, r3
 80024da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024de:	f001 f8e5 	bl	80036ac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80024e2:	4b55      	ldr	r3, [pc, #340]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 80024e4:	4a55      	ldr	r2, [pc, #340]	; (800263c <HAL_UART_MspInit+0x1d4>)
 80024e6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80024e8:	4b53      	ldr	r3, [pc, #332]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 80024ea:	2211      	movs	r2, #17
 80024ec:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ee:	4b52      	ldr	r3, [pc, #328]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 80024f0:	2210      	movs	r2, #16
 80024f2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024f4:	4b50      	ldr	r3, [pc, #320]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024fa:	4b4f      	ldr	r3, [pc, #316]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002500:	4b4d      	ldr	r3, [pc, #308]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 8002502:	2200      	movs	r2, #0
 8002504:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002506:	4b4c      	ldr	r3, [pc, #304]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800250c:	4b4a      	ldr	r3, [pc, #296]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 800250e:	2200      	movs	r2, #0
 8002510:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002512:	4b49      	ldr	r3, [pc, #292]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 8002514:	2200      	movs	r2, #0
 8002516:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002518:	4847      	ldr	r0, [pc, #284]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 800251a:	f000 fd33 	bl	8002f84 <HAL_DMA_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002524:	f7ff fed6 	bl	80022d4 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002528:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800252c:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800252e:	2300      	movs	r3, #0
 8002530:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 800253e:	2301      	movs	r3, #1
 8002540:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002542:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002546:	4619      	mov	r1, r3
 8002548:	483b      	ldr	r0, [pc, #236]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 800254a:	f001 f84d 	bl	80035e8 <HAL_DMAEx_ConfigMuxSync>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002554:	f7ff febe 	bl	80022d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a37      	ldr	r2, [pc, #220]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 800255c:	67da      	str	r2, [r3, #124]	; 0x7c
 800255e:	4a36      	ldr	r2, [pc, #216]	; (8002638 <HAL_UART_MspInit+0x1d0>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002564:	2200      	movs	r2, #0
 8002566:	2100      	movs	r1, #0
 8002568:	2025      	movs	r0, #37	; 0x25
 800256a:	f000 fcac 	bl	8002ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800256e:	2025      	movs	r0, #37	; 0x25
 8002570:	f000 fcc3 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002574:	e05a      	b.n	800262c <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a31      	ldr	r2, [pc, #196]	; (8002640 <HAL_UART_MspInit+0x1d8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d155      	bne.n	800262c <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002580:	2301      	movs	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002588:	f107 030c 	add.w	r3, r7, #12
 800258c:	4618      	mov	r0, r3
 800258e:	f002 fe1c 	bl	80051ca <HAL_RCCEx_PeriphCLKConfig>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002598:	f7ff fe9c 	bl	80022d4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800259c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025a0:	f7ff ff14 	bl	80023cc <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	2002      	movs	r0, #2
 80025a6:	f7ff fead 	bl	8002304 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025aa:	23c0      	movs	r3, #192	; 0xc0
 80025ac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ba:	2307      	movs	r3, #7
 80025bc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025c2:	4619      	mov	r1, r3
 80025c4:	481f      	ldr	r0, [pc, #124]	; (8002644 <HAL_UART_MspInit+0x1dc>)
 80025c6:	f001 f871 	bl	80036ac <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 80025cc:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_UART_MspInit+0x1e4>)
 80025ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 80025d2:	220f      	movs	r2, #15
 80025d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 80025d8:	2210      	movs	r2, #16
 80025da:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 80025de:	2200      	movs	r2, #0
 80025e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002600:	4811      	ldr	r0, [pc, #68]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 8002602:	f000 fcbf 	bl	8002f84 <HAL_DMA_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 800260c:	f7ff fe62 	bl	80022d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a0d      	ldr	r2, [pc, #52]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 8002614:	67da      	str	r2, [r3, #124]	; 0x7c
 8002616:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <HAL_UART_MspInit+0x1e0>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	2024      	movs	r0, #36	; 0x24
 8002622:	f000 fc50 	bl	8002ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002626:	2024      	movs	r0, #36	; 0x24
 8002628:	f000 fc67 	bl	8002efa <HAL_NVIC_EnableIRQ>
}
 800262c:	bf00      	nop
 800262e:	3780      	adds	r7, #128	; 0x80
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40008000 	.word	0x40008000
 8002638:	2000041c 	.word	0x2000041c
 800263c:	40020044 	.word	0x40020044
 8002640:	40013800 	.word	0x40013800
 8002644:	48000400 	.word	0x48000400
 8002648:	2000047c 	.word	0x2000047c
 800264c:	40020444 	.word	0x40020444

08002650 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b096      	sub	sp, #88	; 0x58
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	2250      	movs	r2, #80	; 0x50
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f00a fa65 	bl	800cb30 <memset>
  if(hrtc->Instance==RTC)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a14      	ldr	r2, [pc, #80]	; (80026bc <HAL_RTC_MspInit+0x6c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d120      	bne.n	80026b2 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002674:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800267c:	f107 0308 	add.w	r3, r7, #8
 8002680:	4618      	mov	r0, r3
 8002682:	f002 fda2 	bl	80051ca <HAL_RCCEx_PeriphCLKConfig>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800268c:	f7ff fe22 	bl	80022d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002690:	f7ff fe27 	bl	80022e2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002694:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002698:	f7ff fe66 	bl	8002368 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	2003      	movs	r0, #3
 80026a2:	f000 fc10 	bl	8002ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80026a6:	2003      	movs	r0, #3
 80026a8:	f000 fc27 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f003 f9cf 	bl	8005a50 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026b2:	bf00      	nop
 80026b4:	3758      	adds	r7, #88	; 0x58
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40002800 	.word	0x40002800

080026c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026d2:	e7fe      	b.n	80026d2 <HardFault_Handler+0x4>

080026d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <MemManage_Handler+0x4>

080026da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026da:	b480      	push	{r7}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026de:	e7fe      	b.n	80026de <BusFault_Handler+0x4>

080026e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <UsageFault_Handler+0x4>

080026e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002714:	f000 fa58 	bl	8002bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}

0800271c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002720:	f7ff f858 	bl	80017d4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}

08002728 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <DMA1_Channel4_IRQHandler+0x10>)
 800272e:	f000 fe0a 	bl	8003346 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	2000041c 	.word	0x2000041c

0800273c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <USART1_IRQHandler+0x10>)
 8002742:	f003 faf7 	bl	8005d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000388 	.word	0x20000388

08002750 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <LPUART1_IRQHandler+0x10>)
 8002756:	f003 faed 	bl	8005d34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200002f4 	.word	0x200002f4

08002764 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002768:	f009 fc14 	bl	800bf94 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}

08002770 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002774:	f009 fc44 	bl	800c000 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}

0800277c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002780:	f001 f934 	bl	80039ec <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}

08002788 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <DMA2_Channel4_IRQHandler+0x10>)
 800278e:	f000 fdda 	bl	8003346 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000047c 	.word	0x2000047c

0800279c <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80027a0:	2010      	movs	r0, #16
 80027a2:	f001 f90b 	bl	80039bc <HAL_GPIO_EXTI_IRQHandler>
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}

080027aa <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80027ae:	2001      	movs	r0, #1
 80027b0:	f001 f904 	bl	80039bc <HAL_GPIO_EXTI_IRQHandler>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80027bc:	2002      	movs	r0, #2
 80027be:	f001 f8fd 	bl	80039bc <HAL_GPIO_EXTI_IRQHandler>
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <LL_AHB2_GRP1_EnableClock>:
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4313      	orrs	r3, r2
 80027dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002802:	f107 030c 	add.w	r3, r7, #12
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002812:	2002      	movs	r0, #2
 8002814:	f7ff ffd7 	bl	80027c6 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	4a12      	ldr	r2, [pc, #72]	; (8002864 <BSP_LED_Init+0x6c>)
 800281c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002820:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002822:	2301      	movs	r3, #1
 8002824:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282a:	2302      	movs	r3, #2
 800282c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <BSP_LED_Init+0x70>)
 8002832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002836:	f107 020c 	add.w	r2, r7, #12
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f000 ff35 	bl	80036ac <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	4a08      	ldr	r2, [pc, #32]	; (8002868 <BSP_LED_Init+0x70>)
 8002846:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	4a05      	ldr	r2, [pc, #20]	; (8002864 <BSP_LED_Init+0x6c>)
 800284e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002852:	2200      	movs	r2, #0
 8002854:	4619      	mov	r1, r3
 8002856:	f001 f899 	bl	800398c <HAL_GPIO_WritePin>
}
 800285a:	bf00      	nop
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	0800e880 	.word	0x0800e880
 8002868:	20000008 	.word	0x20000008

0800286c <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <BSP_LED_On+0x2c>)
 800287a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <BSP_LED_On+0x30>)
 8002882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002886:	2201      	movs	r2, #1
 8002888:	4619      	mov	r1, r3
 800288a:	f001 f87f 	bl	800398c <HAL_GPIO_WritePin>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000008 	.word	0x20000008
 800289c:	0800e880 	.word	0x0800e880

080028a0 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	4a07      	ldr	r2, [pc, #28]	; (80028cc <BSP_LED_Off+0x2c>)
 80028ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <BSP_LED_Off+0x30>)
 80028b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028ba:	2200      	movs	r2, #0
 80028bc:	4619      	mov	r1, r3
 80028be:	f001 f865 	bl	800398c <HAL_GPIO_WritePin>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000008 	.word	0x20000008
 80028d0:	0800e880 	.word	0x0800e880

080028d4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	460a      	mov	r2, r1
 80028de:	71fb      	strb	r3, [r7, #7]
 80028e0:	4613      	mov	r3, r2
 80028e2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <BSP_PB_Init+0x2e>
 80028fa:	2004      	movs	r0, #4
 80028fc:	f7ff ff63 	bl	80027c6 <LL_AHB2_GRP1_EnableClock>
 8002900:	e00c      	b.n	800291c <BSP_PB_Init+0x48>
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d103      	bne.n	8002910 <BSP_PB_Init+0x3c>
 8002908:	2008      	movs	r0, #8
 800290a:	f7ff ff5c 	bl	80027c6 <LL_AHB2_GRP1_EnableClock>
 800290e:	e005      	b.n	800291c <BSP_PB_Init+0x48>
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d102      	bne.n	800291c <BSP_PB_Init+0x48>
 8002916:	2008      	movs	r0, #8
 8002918:	f7ff ff55 	bl	80027c6 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800291c:	79bb      	ldrb	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d117      	bne.n	8002952 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	4a20      	ldr	r2, [pc, #128]	; (80029a8 <BSP_PB_Init+0xd4>)
 8002926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800292a:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002930:	2301      	movs	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002934:	2302      	movs	r3, #2
 8002936:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <BSP_PB_Init+0xd8>)
 800293c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002940:	f107 020c 	add.w	r2, r7, #12
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f000 feb0 	bl	80036ac <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 800294c:	2001      	movs	r0, #1
 800294e:	f7fe fadb 	bl	8000f08 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002952:	79bb      	ldrb	r3, [r7, #6]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d123      	bne.n	80029a0 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <BSP_PB_Init+0xd4>)
 800295c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002960:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002962:	2301      	movs	r3, #1
 8002964:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8002966:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800296a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <BSP_PB_Init+0xd8>)
 8002970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002974:	f107 020c 	add.w	r2, r7, #12
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fe96 	bl	80036ac <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	4a0b      	ldr	r2, [pc, #44]	; (80029b0 <BSP_PB_Init+0xdc>)
 8002984:	5cd3      	ldrb	r3, [r2, r3]
 8002986:	b25b      	sxtb	r3, r3
 8002988:	2200      	movs	r2, #0
 800298a:	210f      	movs	r1, #15
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fa9a 	bl	8002ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <BSP_PB_Init+0xdc>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	b25b      	sxtb	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f000 faad 	bl	8002efa <HAL_NVIC_EnableIRQ>
  }
}
 80029a0:	bf00      	nop
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	0800e888 	.word	0x0800e888
 80029ac:	20000014 	.word	0x20000014
 80029b0:	0800e890 	.word	0x0800e890

080029b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80029b8:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <SystemInit+0xa0>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <SystemInit+0xa0>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c4:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <SystemInit+0xa0>)
 80029c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80029e6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <SystemInit+0xa4>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a04:	f023 0305 	bic.w	r3, r3, #5
 8002a08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <SystemInit+0xa8>)
 8002a26:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <SystemInit+0xa8>)
 8002a2e:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000ed00 	.word	0xe000ed00
 8002a58:	faf6fefb 	.word	0xfaf6fefb
 8002a5c:	22041000 	.word	0x22041000

08002a60 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002a60:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a62:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a64:	3304      	adds	r3, #4

08002a66 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a66:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a68:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002a6a:	d3f9      	bcc.n	8002a60 <CopyDataInit>
  bx lr
 8002a6c:	4770      	bx	lr

08002a6e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002a6e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002a70:	3004      	adds	r0, #4

08002a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002a72:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002a74:	d3fb      	bcc.n	8002a6e <FillZerobss>
  bx lr
 8002a76:	4770      	bx	lr

08002a78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a78:	480c      	ldr	r0, [pc, #48]	; (8002aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a7c:	f7ff ff9a 	bl	80029b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002a80:	480b      	ldr	r0, [pc, #44]	; (8002ab0 <LoopForever+0x6>)
 8002a82:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <LoopForever+0xa>)
 8002a84:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <LoopForever+0xe>)
 8002a86:	2300      	movs	r3, #0
 8002a88:	f7ff ffed 	bl	8002a66 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002a8c:	480b      	ldr	r0, [pc, #44]	; (8002abc <LoopForever+0x12>)
 8002a8e:	490c      	ldr	r1, [pc, #48]	; (8002ac0 <LoopForever+0x16>)
 8002a90:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <LoopForever+0x1a>)
 8002a92:	2300      	movs	r3, #0
 8002a94:	f7ff ffe7 	bl	8002a66 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002a98:	480b      	ldr	r0, [pc, #44]	; (8002ac8 <LoopForever+0x1e>)
 8002a9a:	490c      	ldr	r1, [pc, #48]	; (8002acc <LoopForever+0x22>)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	f7ff ffe8 	bl	8002a72 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002aa2:	f00a f893 	bl	800cbcc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002aa6:	f7ff fab7 	bl	8002018 <main>

08002aaa <LoopForever>:

LoopForever:
  b LoopForever
 8002aaa:	e7fe      	b.n	8002aaa <LoopForever>
  ldr   r0, =_estack
 8002aac:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002ab0:	20000008 	.word	0x20000008
 8002ab4:	20000090 	.word	0x20000090
 8002ab8:	0800e9d8 	.word	0x0800e9d8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002abc:	200301e4 	.word	0x200301e4
 8002ac0:	20030a67 	.word	0x20030a67
 8002ac4:	0800eaaa 	.word	0x0800eaaa
  INIT_BSS _sbss, _ebss
 8002ac8:	200000e0 	.word	0x200000e0
 8002acc:	20001850 	.word	0x20001850

08002ad0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ad0:	e7fe      	b.n	8002ad0 <ADC1_IRQHandler>
	...

08002ad4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6053      	str	r3, [r2, #4]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e0042000 	.word	0xe0042000

08002af4 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	6053      	str	r3, [r2, #4]
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e0042000 	.word	0xe0042000

08002b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_Init+0x3c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <HAL_Init+0x3c>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b2a:	2003      	movs	r0, #3
 8002b2c:	f000 f9c0 	bl	8002eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b30:	2000      	movs	r0, #0
 8002b32:	f000 f80f 	bl	8002b54 <HAL_InitTick>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	71fb      	strb	r3, [r7, #7]
 8002b40:	e001      	b.n	8002b46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b42:	f7ff fc5c 	bl	80023fe <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b46:	79fb      	ldrb	r3, [r7, #7]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	58004000 	.word	0x58004000

08002b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002b60:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <HAL_InitTick+0x6c>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d024      	beq.n	8002bb2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b68:	f002 f89e 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_InitTick+0x6c>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	4619      	mov	r1, r3
 8002b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b78:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 f9d6 	bl	8002f32 <HAL_SYSTICK_Config>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10f      	bne.n	8002bac <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	d809      	bhi.n	8002ba6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b92:	2200      	movs	r2, #0
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9a:	f000 f994 	bl	8002ec6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_InitTick+0x70>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	e007      	b.n	8002bb6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	e004      	b.n	8002bb6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	e001      	b.n	8002bb6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000028 	.word	0x20000028
 8002bc4:	20000024 	.word	0x20000024

08002bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_IncTick+0x20>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_IncTick+0x24>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_IncTick+0x24>)
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000028 	.word	0x20000028
 8002bec:	20000500 	.word	0x20000500

08002bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <HAL_GetTick+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	20000500 	.word	0x20000500

08002c08 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_GetTickPrio+0x14>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20000024 	.word	0x20000024

08002c20 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_GetTickFreq+0x14>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000028 	.word	0x20000028

08002c38 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002c3c:	f7ff ff4a 	bl	8002ad4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002c48:	f7ff ff54 	bl	8002af4 <LL_DBGMCU_EnableDBGStopMode>
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c82:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	60d3      	str	r3, [r2, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f003 0307 	and.w	r3, r3, #7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	db0b      	blt.n	8002cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4907      	ldr	r1, [pc, #28]	; (8002cec <__NVIC_EnableIRQ+0x38>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000e100 	.word	0xe000e100

08002cf0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	db12      	blt.n	8002d28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	490a      	ldr	r1, [pc, #40]	; (8002d34 <__NVIC_DisableIRQ+0x44>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2001      	movs	r0, #1
 8002d12:	fa00 f202 	lsl.w	r2, r0, r2
 8002d16:	3320      	adds	r3, #32
 8002d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d1c:	f3bf 8f4f 	dsb	sy
}
 8002d20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d22:	f3bf 8f6f 	isb	sy
}
 8002d26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000e100 	.word	0xe000e100

08002d38 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db0c      	blt.n	8002d64 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	4907      	ldr	r1, [pc, #28]	; (8002d70 <__NVIC_SetPendingIRQ+0x38>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	3340      	adds	r3, #64	; 0x40
 8002d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	db0c      	blt.n	8002da0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	4907      	ldr	r1, [pc, #28]	; (8002dac <__NVIC_ClearPendingIRQ+0x38>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2001      	movs	r0, #1
 8002d96:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9a:	3360      	adds	r3, #96	; 0x60
 8002d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000e100 	.word	0xe000e100

08002db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	db0a      	blt.n	8002dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	490c      	ldr	r1, [pc, #48]	; (8002dfc <__NVIC_SetPriority+0x4c>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	0112      	lsls	r2, r2, #4
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd8:	e00a      	b.n	8002df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4908      	ldr	r1, [pc, #32]	; (8002e00 <__NVIC_SetPriority+0x50>)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	3b04      	subs	r3, #4
 8002de8:	0112      	lsls	r2, r2, #4
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	440b      	add	r3, r1
 8002dee:	761a      	strb	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000e100 	.word	0xe000e100
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	; 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f1c3 0307 	rsb	r3, r3, #7
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	bf28      	it	cs
 8002e22:	2304      	movcs	r3, #4
 8002e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d902      	bls.n	8002e34 <NVIC_EncodePriority+0x30>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3b03      	subs	r3, #3
 8002e32:	e000      	b.n	8002e36 <NVIC_EncodePriority+0x32>
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	401a      	ands	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	4313      	orrs	r3, r2
         );
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e7c:	d301      	bcc.n	8002e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e00f      	b.n	8002ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <SysTick_Config+0x40>)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e8a:	210f      	movs	r1, #15
 8002e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e90:	f7ff ff8e 	bl	8002db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <SysTick_Config+0x40>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e9a:	4b04      	ldr	r3, [pc, #16]	; (8002eac <SysTick_Config+0x40>)
 8002e9c:	2207      	movs	r2, #7
 8002e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	e000e010 	.word	0xe000e010

08002eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff fec9 	bl	8002c50 <__NVIC_SetPriorityGrouping>
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	4603      	mov	r3, r0
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed4:	f7ff fee0 	bl	8002c98 <__NVIC_GetPriorityGrouping>
 8002ed8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7ff ff90 	bl	8002e04 <NVIC_EncodePriority>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff5f 	bl	8002db0 <__NVIC_SetPriority>
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fed3 	bl	8002cb4 <__NVIC_EnableIRQ>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fee3 	bl	8002cf0 <__NVIC_DisableIRQ>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ff96 	bl	8002e6c <SysTick_Config>
 8002f40:	4603      	mov	r3, r0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	4603      	mov	r3, r0
 8002f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff feed 	bl	8002d38 <__NVIC_SetPendingIRQ>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fefd 	bl	8002d74 <__NVIC_ClearPendingIRQ>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e08e      	b.n	80030b4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_DMA_Init+0x138>)
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d80f      	bhi.n	8002fc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <HAL_DMA_Init+0x13c>)
 8002faa:	4413      	add	r3, r2
 8002fac:	4a45      	ldr	r2, [pc, #276]	; (80030c4 <HAL_DMA_Init+0x140>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	009a      	lsls	r2, r3, #2
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a42      	ldr	r2, [pc, #264]	; (80030c8 <HAL_DMA_Init+0x144>)
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc0:	e00e      	b.n	8002fe0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4b40      	ldr	r3, [pc, #256]	; (80030cc <HAL_DMA_Init+0x148>)
 8002fca:	4413      	add	r3, r2
 8002fcc:	4a3d      	ldr	r2, [pc, #244]	; (80030c4 <HAL_DMA_Init+0x140>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	009a      	lsls	r2, r3, #2
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a3c      	ldr	r2, [pc, #240]	; (80030d0 <HAL_DMA_Init+0x14c>)
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800301c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fa74 	bl	8003520 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003040:	d102      	bne.n	8003048 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003050:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003054:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800305e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d010      	beq.n	800308a <HAL_DMA_Init+0x106>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d80c      	bhi.n	800308a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fa93 	bl	800359c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	e008      	b.n	800309c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40020407 	.word	0x40020407
 80030c0:	bffdfff8 	.word	0xbffdfff8
 80030c4:	cccccccd 	.word	0xcccccccd
 80030c8:	40020000 	.word	0x40020000
 80030cc:	bffdfbf8 	.word	0xbffdfbf8
 80030d0:	40020400 	.word	0x40020400

080030d4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_DMA_Start_IT+0x20>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e066      	b.n	80031c2 <HAL_DMA_Start_IT+0xee>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d155      	bne.n	80031b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0201 	bic.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f9b9 	bl	80034a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 020e 	orr.w	r2, r2, #14
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	e00f      	b.n	800316c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0204 	bic.w	r2, r2, #4
 800315a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 020a 	orr.w	r2, r2, #10
 800316a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003188:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	e005      	b.n	80031c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
 80031be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e04f      	b.n	800327c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d008      	beq.n	80031fa <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2204      	movs	r2, #4
 80031ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e040      	b.n	800327c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 020e 	bic.w	r2, r2, #14
 8003208:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003218:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f003 021c 	and.w	r2, r3, #28
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2101      	movs	r1, #1
 8003238:	fa01 f202 	lsl.w	r2, r1, r2
 800323c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003246:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00c      	beq.n	800326a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800325e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003268:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d005      	beq.n	80032ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2204      	movs	r2, #4
 80032a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	73fb      	strb	r3, [r7, #15]
 80032aa:	e047      	b.n	800333c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 020e 	bic.w	r2, r2, #14
 80032ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e0:	f003 021c 	and.w	r2, r3, #28
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f202 	lsl.w	r2, r1, r2
 80032ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00c      	beq.n	800331c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003310:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800331a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
    }
  }
  return status;
 800333c:	7bfb      	ldrb	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	f003 031c 	and.w	r3, r3, #28
 8003366:	2204      	movs	r2, #4
 8003368:	409a      	lsls	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d026      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x7a>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d021      	beq.n	80033c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d107      	bne.n	800339a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0204 	bic.w	r2, r2, #4
 8003398:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	f003 021c 	and.w	r2, r3, #28
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	2104      	movs	r1, #4
 80033a8:	fa01 f202 	lsl.w	r2, r1, r2
 80033ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d071      	beq.n	800349a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80033be:	e06c      	b.n	800349a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c4:	f003 031c 	and.w	r3, r3, #28
 80033c8:	2202      	movs	r2, #2
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02e      	beq.n	8003432 <HAL_DMA_IRQHandler+0xec>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d029      	beq.n	8003432 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 020a 	bic.w	r2, r2, #10
 80033fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f003 021c 	and.w	r2, r3, #28
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	2102      	movs	r1, #2
 8003412:	fa01 f202 	lsl.w	r2, r1, r2
 8003416:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d038      	beq.n	800349a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003430:	e033      	b.n	800349a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f003 031c 	and.w	r3, r3, #28
 800343a:	2208      	movs	r2, #8
 800343c:	409a      	lsls	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d02a      	beq.n	800349c <HAL_DMA_IRQHandler+0x156>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d025      	beq.n	800349c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 020e 	bic.w	r2, r2, #14
 800345e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	f003 021c 	and.w	r2, r3, #28
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	2101      	movs	r1, #1
 800346e:	fa01 f202 	lsl.w	r2, r1, r2
 8003472:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800349a:	bf00      	nop
 800349c:	bf00      	nop
}
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f003 021c 	and.w	r2, r3, #28
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f202 	lsl.w	r2, r1, r2
 80034e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d108      	bne.n	8003504 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003502:	e007      	b.n	8003514 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	60da      	str	r2, [r3, #12]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b17      	ldr	r3, [pc, #92]	; (800358c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003530:	429a      	cmp	r2, r3
 8003532:	d80a      	bhi.n	800354a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003540:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6493      	str	r3, [r2, #72]	; 0x48
 8003548:	e007      	b.n	800355a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	009a      	lsls	r2, r3, #2
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003554:	4413      	add	r3, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3b08      	subs	r3, #8
 8003562:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003570:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2201      	movs	r2, #1
 800357a:	409a      	lsls	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40020407 	.word	0x40020407
 8003590:	4002081c 	.word	0x4002081c
 8003594:	cccccccd 	.word	0xcccccccd
 8003598:	40020880 	.word	0x40020880

0800359c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ac:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	461a      	mov	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80035c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2201      	movs	r2, #1
 80035cc:	409a      	lsls	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	1000823f 	.word	0x1000823f
 80035e4:	40020940 	.word	0x40020940

080035e8 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d12b      	bne.n	8003656 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_DMAEx_ConfigMuxSync+0x24>
 8003608:	2302      	movs	r3, #2
 800360a:	e025      	b.n	8003658 <HAL_DMAEx_ConfigMuxSync+0x70>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 800361c:	4013      	ands	r3, r2
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	6811      	ldr	r1, [r2, #0]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	68d2      	ldr	r2, [r2, #12]
 8003626:	3a01      	subs	r2, #1
 8003628:	04d2      	lsls	r2, r2, #19
 800362a:	4311      	orrs	r1, r2
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	6852      	ldr	r2, [r2, #4]
 8003630:	4311      	orrs	r1, r2
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	7a12      	ldrb	r2, [r2, #8]
 8003636:	0412      	lsls	r2, r2, #16
 8003638:	4311      	orrs	r1, r2
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	7a52      	ldrb	r2, [r2, #9]
 800363e:	0252      	lsls	r2, r2, #9
 8003640:	4311      	orrs	r1, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003646:	430b      	orrs	r3, r1
 8003648:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
  }
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000fdff 	.word	0xe000fdff

08003668 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 031f 	and.w	r3, r3, #31
 8003684:	2201      	movs	r2, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	015b      	lsls	r3, r3, #5
 8003690:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8003694:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003698:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	601a      	str	r2, [r3, #0]
}
 80036a0:	bf00      	nop
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ba:	e14c      	b.n	8003956 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2101      	movs	r1, #1
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	4013      	ands	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 813e 	beq.w	8003950 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d005      	beq.n	80036ec <HAL_GPIO_Init+0x40>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d130      	bne.n	800374e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003722:	2201      	movs	r2, #1
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f003 0201 	and.w	r2, r3, #1
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b03      	cmp	r3, #3
 8003758:	d017      	beq.n	800378a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	2203      	movs	r2, #3
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d123      	bne.n	80037de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	08da      	lsrs	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3208      	adds	r2, #8
 800379e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	220f      	movs	r2, #15
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	6939      	ldr	r1, [r7, #16]
 80037da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	2203      	movs	r2, #3
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0203 	and.w	r2, r3, #3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8098 	beq.w	8003950 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003820:	4a54      	ldr	r2, [pc, #336]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	089b      	lsrs	r3, r3, #2
 8003826:	3302      	adds	r3, #2
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	220f      	movs	r2, #15
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800384a:	d019      	beq.n	8003880 <HAL_GPIO_Init+0x1d4>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a4a      	ldr	r2, [pc, #296]	; (8003978 <HAL_GPIO_Init+0x2cc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d013      	beq.n	800387c <HAL_GPIO_Init+0x1d0>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a49      	ldr	r2, [pc, #292]	; (800397c <HAL_GPIO_Init+0x2d0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00d      	beq.n	8003878 <HAL_GPIO_Init+0x1cc>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a48      	ldr	r2, [pc, #288]	; (8003980 <HAL_GPIO_Init+0x2d4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <HAL_GPIO_Init+0x1c8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a47      	ldr	r2, [pc, #284]	; (8003984 <HAL_GPIO_Init+0x2d8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d101      	bne.n	8003870 <HAL_GPIO_Init+0x1c4>
 800386c:	2304      	movs	r3, #4
 800386e:	e008      	b.n	8003882 <HAL_GPIO_Init+0x1d6>
 8003870:	2307      	movs	r3, #7
 8003872:	e006      	b.n	8003882 <HAL_GPIO_Init+0x1d6>
 8003874:	2303      	movs	r3, #3
 8003876:	e004      	b.n	8003882 <HAL_GPIO_Init+0x1d6>
 8003878:	2302      	movs	r3, #2
 800387a:	e002      	b.n	8003882 <HAL_GPIO_Init+0x1d6>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_GPIO_Init+0x1d6>
 8003880:	2300      	movs	r3, #0
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	f002 0203 	and.w	r2, r2, #3
 8003888:	0092      	lsls	r2, r2, #2
 800388a:	4093      	lsls	r3, r2
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003892:	4938      	ldr	r1, [pc, #224]	; (8003974 <HAL_GPIO_Init+0x2c8>)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	3302      	adds	r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_GPIO_Init+0x2dc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038c4:	4a30      	ldr	r2, [pc, #192]	; (8003988 <HAL_GPIO_Init+0x2dc>)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038ca:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <HAL_GPIO_Init+0x2dc>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038ee:	4a26      	ldr	r2, [pc, #152]	; (8003988 <HAL_GPIO_Init+0x2dc>)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038f4:	4b24      	ldr	r3, [pc, #144]	; (8003988 <HAL_GPIO_Init+0x2dc>)
 80038f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	43db      	mvns	r3, r3
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4013      	ands	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800391a:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <HAL_GPIO_Init+0x2dc>)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003922:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_GPIO_Init+0x2dc>)
 8003924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	43db      	mvns	r3, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4013      	ands	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003948:	4a0f      	ldr	r2, [pc, #60]	; (8003988 <HAL_GPIO_Init+0x2dc>)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3301      	adds	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	f47f aeab 	bne.w	80036bc <HAL_GPIO_Init+0x10>
  }
}
 8003966:	bf00      	nop
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	40010000 	.word	0x40010000
 8003978:	48000400 	.word	0x48000400
 800397c:	48000800 	.word	0x48000800
 8003980:	48000c00 	.word	0x48000c00
 8003984:	48001000 	.word	0x48001000
 8003988:	58000800 	.word	0x58000800

0800398c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
 8003998:	4613      	mov	r3, r2
 800399a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800399c:	787b      	ldrb	r3, [r7, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039a8:	e002      	b.n	80039b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039d2:	4a05      	ldr	r2, [pc, #20]	; (80039e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fd faf8 	bl	8000fd0 <HAL_GPIO_EXTI_Callback>
  }
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	58000800 	.word	0x58000800

080039ec <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_HSEM_IRQHandler+0x30>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80039f8:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <HAL_HSEM_IRQHandler+0x30>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	4906      	ldr	r1, [pc, #24]	; (8003a1c <HAL_HSEM_IRQHandler+0x30>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003a06:	4a05      	ldr	r2, [pc, #20]	; (8003a1c <HAL_HSEM_IRQHandler+0x30>)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f807 	bl	8003a20 <HAL_HSEM_FreeCallback>
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	58001500 	.word	0x58001500

08003a20 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01e      	beq.n	8003a84 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003a46:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <HAL_IPCC_Init+0x60>)
 8003a48:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fe fce2 	bl	8002420 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003a5c:	68b8      	ldr	r0, [r7, #8]
 8003a5e:	f000 f85b 	bl	8003b18 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f82c 	bl	8003acc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003a82:	e001      	b.n	8003a88 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	58000c00 	.word	0x58000c00

08003a98 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	4613      	mov	r3, r2
 8003abe:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e00f      	b.n	8003afa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <IPCC_SetDefaultCallbacks+0x44>)
 8003ae4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3306      	adds	r3, #6
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <IPCC_SetDefaultCallbacks+0x48>)
 8003af2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	3301      	adds	r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d9ec      	bls.n	8003ada <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003b00:	bf00      	nop
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	08003a99 	.word	0x08003a99
 8003b14:	08003ab3 	.word	0x08003ab3

08003b18 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	223f      	movs	r2, #63	; 0x3f
 8003b32:	609a      	str	r2, [r3, #8]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	58000400 	.word	0x58000400

08003b60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003b64:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	58000400 	.word	0x58000400

08003b7c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8e:	d101      	bne.n	8003b94 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_RCC_HSE_Enable>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_RCC_HSE_Disable>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
}
 8003bd2:	bf00      	nop
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_RCC_HSE_IsReady>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bee:	d101      	bne.n	8003bf4 <LL_RCC_HSE_IsReady+0x18>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <LL_RCC_HSE_IsReady+0x1a>
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <LL_RCC_HSI_Enable>:
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c12:	6013      	str	r3, [r2, #0]
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <LL_RCC_HSI_Disable>:
{
 8003c1e:	b480      	push	{r7}
 8003c20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c30:	6013      	str	r3, [r2, #0]
}
 8003c32:	bf00      	nop
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_RCC_HSI_IsReady>:
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4e:	d101      	bne.n	8003c54 <LL_RCC_HSI_IsReady+0x18>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <LL_RCC_HSI_IsReady+0x1a>
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	604b      	str	r3, [r1, #4]
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_RCC_HSI48_Enable>:
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003ca2:	bf00      	nop
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <LL_RCC_HSI48_Disable>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cbc:	f023 0301 	bic.w	r3, r3, #1
 8003cc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <LL_RCC_HSI48_IsReady>:
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d101      	bne.n	8003ce6 <LL_RCC_HSI48_IsReady+0x18>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <LL_RCC_HSI48_IsReady+0x1a>
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <LL_RCC_LSE_Enable>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d0a:	bf00      	nop
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_RCC_LSE_Disable>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_RCC_LSE_EnableBypass>:
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d46:	f043 0304 	orr.w	r3, r3, #4
 8003d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_RCC_LSE_DisableBypass>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d68:	f023 0304 	bic.w	r3, r3, #4
 8003d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_RCC_LSE_IsReady>:
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d101      	bne.n	8003d92 <LL_RCC_LSE_IsReady+0x18>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <LL_RCC_LSE_IsReady+0x1a>
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <LL_RCC_LSI1_Enable>:
{
 8003d9e:	b480      	push	{r7}
 8003da0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003db6:	bf00      	nop
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <LL_RCC_LSI1_Disable>:
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <LL_RCC_LSI1_IsReady>:
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d101      	bne.n	8003dfa <LL_RCC_LSI1_IsReady+0x18>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <LL_RCC_LSI1_IsReady+0x1a>
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_RCC_LSI2_Enable>:
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e1e:	bf00      	nop
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_RCC_LSI2_Disable>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_RCC_LSI2_IsReady>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d101      	bne.n	8003e62 <LL_RCC_LSI2_IsReady+0x18>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <LL_RCC_LSI2_IsReady+0x1a>
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_RCC_LSI2_SetTrimming>:
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_RCC_MSI_Enable>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_RCC_MSI_Disable>:
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6013      	str	r3, [r2, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_RCC_MSI_IsReady>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d101      	bne.n	8003eee <LL_RCC_MSI_IsReady+0x16>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <LL_RCC_MSI_IsReady+0x18>
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <LL_RCC_MSI_SetRange>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_RCC_MSI_GetRange>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f32:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2bb0      	cmp	r3, #176	; 0xb0
 8003f38:	d901      	bls.n	8003f3e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003f3a:	23b0      	movs	r3, #176	; 0xb0
 8003f3c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003f3e:	687b      	ldr	r3, [r7, #4]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <LL_RCC_MSI_SetCalibTrimming>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_RCC_SetSysClkSource>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f023 0203 	bic.w	r2, r3, #3
 8003f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_GetSysClkSource>:
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_RCC_SetAHBPrescaler>:
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	608b      	str	r3, [r1, #8]
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <LL_C2_RCC_SetAHBPrescaler>:
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_RCC_SetAHB4Prescaler>:
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004016:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800401a:	f023 020f 	bic.w	r2, r3, #15
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_RCC_SetAPB1Prescaler>:
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800404a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4313      	orrs	r3, r2
 8004052:	608b      	str	r3, [r1, #8]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <LL_RCC_SetAPB2Prescaler>:
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_RCC_GetAHBPrescaler>:
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004096:	4618      	mov	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_GetAHB4Prescaler>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80040a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_RCC_GetAPB1Prescaler>:
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_RCC_GetAPB2Prescaler>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80040d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_PLL_Enable>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <LL_RCC_PLL_Disable>:
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800410e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411c:	6013      	str	r3, [r2, #0]
}
 800411e:	bf00      	nop
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_RCC_PLL_IsReady>:
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800412c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800413a:	d101      	bne.n	8004140 <LL_RCC_PLL_IsReady+0x18>
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <LL_RCC_PLL_IsReady+0x1a>
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_RCC_PLL_GetN>:
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <LL_RCC_PLL_GetR>:
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800416a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004174:	4618      	mov	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <LL_RCC_PLL_GetDivider>:
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <LL_RCC_PLL_GetMainSource>:
{
 8004196:	b480      	push	{r7}
 8004198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800419a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0303 	and.w	r3, r3, #3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <LL_RCC_IsActiveFlag_HPRE>:
{
 80041ae:	b480      	push	{r7}
 80041b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c0:	d101      	bne.n	80041c6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80041d2:	b480      	push	{r7}
 80041d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80041d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041e6:	d101      	bne.n	80041ec <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004200:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d101      	bne.n	8004212 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004230:	d101      	bne.n	8004236 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004242:	b480      	push	{r7}
 8004244:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004250:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004254:	d101      	bne.n	800425a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b08d      	sub	sp, #52	; 0x34
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e363      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 808d 	beq.w	80043a2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004288:	f7ff fe89 	bl	8003f9e <LL_RCC_GetSysClkSource>
 800428c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800428e:	f7ff ff82 	bl	8004196 <LL_RCC_PLL_GetMainSource>
 8004292:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_RCC_OscConfig+0x3e>
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	2b0c      	cmp	r3, #12
 800429e:	d147      	bne.n	8004330 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d144      	bne.n	8004330 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e347      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80042b6:	f7ff fe34 	bl	8003f22 <LL_RCC_MSI_GetRange>
 80042ba:	4603      	mov	r3, r0
 80042bc:	429c      	cmp	r4, r3
 80042be:	d914      	bls.n	80042ea <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fd2f 	bl	8004d28 <RCC_SetFlashLatencyFromMSIRange>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e336      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff fe0e 	bl	8003efa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fe32 	bl	8003f4c <LL_RCC_MSI_SetCalibTrimming>
 80042e8:	e013      	b.n	8004312 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff fe03 	bl	8003efa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fe27 	bl	8003f4c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fd10 	bl	8004d28 <RCC_SetFlashLatencyFromMSIRange>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e317      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004312:	f000 fcc9 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004316:	4603      	mov	r3, r0
 8004318:	4aa4      	ldr	r2, [pc, #656]	; (80045ac <HAL_RCC_OscConfig+0x344>)
 800431a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800431c:	4ba4      	ldr	r3, [pc, #656]	; (80045b0 <HAL_RCC_OscConfig+0x348>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fc17 	bl	8002b54 <HAL_InitTick>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d039      	beq.n	80043a0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e308      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d01e      	beq.n	8004376 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004338:	f7ff fdb0 	bl	8003e9c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800433c:	f7fe fc58 	bl	8002bf0 <HAL_GetTick>
 8004340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004344:	f7fe fc54 	bl	8002bf0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e2f5      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004356:	f7ff fdbf 	bl	8003ed8 <LL_RCC_MSI_IsReady>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f1      	beq.n	8004344 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fdc8 	bl	8003efa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fdec 	bl	8003f4c <LL_RCC_MSI_SetCalibTrimming>
 8004374:	e015      	b.n	80043a2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004376:	f7ff fda0 	bl	8003eba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800437a:	f7fe fc39 	bl	8002bf0 <HAL_GetTick>
 800437e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004382:	f7fe fc35 	bl	8002bf0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e2d6      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004394:	f7ff fda0 	bl	8003ed8 <LL_RCC_MSI_IsReady>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f1      	bne.n	8004382 <HAL_RCC_OscConfig+0x11a>
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80043a0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d047      	beq.n	800443e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ae:	f7ff fdf6 	bl	8003f9e <LL_RCC_GetSysClkSource>
 80043b2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b4:	f7ff feef 	bl	8004196 <LL_RCC_PLL_GetMainSource>
 80043b8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d005      	beq.n	80043cc <HAL_RCC_OscConfig+0x164>
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d108      	bne.n	80043d8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d105      	bne.n	80043d8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d134      	bne.n	800443e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e2b4      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e0:	d102      	bne.n	80043e8 <HAL_RCC_OscConfig+0x180>
 80043e2:	f7ff fbdd 	bl	8003ba0 <LL_RCC_HSE_Enable>
 80043e6:	e001      	b.n	80043ec <HAL_RCC_OscConfig+0x184>
 80043e8:	f7ff fbe9 	bl	8003bbe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d012      	beq.n	800441a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fe fbfc 	bl	8002bf0 <HAL_GetTick>
 80043f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fe fbf8 	bl	8002bf0 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e299      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800440e:	f7ff fbe5 	bl	8003bdc <LL_RCC_HSE_IsReady>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f1      	beq.n	80043fc <HAL_RCC_OscConfig+0x194>
 8004418:	e011      	b.n	800443e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441a:	f7fe fbe9 	bl	8002bf0 <HAL_GetTick>
 800441e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004422:	f7fe fbe5 	bl	8002bf0 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b64      	cmp	r3, #100	; 0x64
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e286      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004434:	f7ff fbd2 	bl	8003bdc <LL_RCC_HSE_IsReady>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f1      	bne.n	8004422 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d04c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444a:	f7ff fda8 	bl	8003f9e <LL_RCC_GetSysClkSource>
 800444e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004450:	f7ff fea1 	bl	8004196 <LL_RCC_PLL_GetMainSource>
 8004454:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d005      	beq.n	8004468 <HAL_RCC_OscConfig+0x200>
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d10e      	bne.n	8004480 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d10b      	bne.n	8004480 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e266      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fbf1 	bl	8003c60 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800447e:	e031      	b.n	80044e4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d019      	beq.n	80044bc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004488:	f7ff fbba 	bl	8003c00 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7fe fbb0 	bl	8002bf0 <HAL_GetTick>
 8004490:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004494:	f7fe fbac 	bl	8002bf0 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e24d      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80044a6:	f7ff fbc9 	bl	8003c3c <LL_RCC_HSI_IsReady>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f1      	beq.n	8004494 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fbd3 	bl	8003c60 <LL_RCC_HSI_SetCalibTrimming>
 80044ba:	e013      	b.n	80044e4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044bc:	f7ff fbaf 	bl	8003c1e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fe fb96 	bl	8002bf0 <HAL_GetTick>
 80044c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c8:	f7fe fb92 	bl	8002bf0 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e233      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80044da:	f7ff fbaf 	bl	8003c3c <LL_RCC_HSI_IsReady>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f1      	bne.n	80044c8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d106      	bne.n	80044fe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80a3 	beq.w	8004644 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d076      	beq.n	80045f4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b00      	cmp	r3, #0
 8004510:	d046      	beq.n	80045a0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004512:	f7ff fc66 	bl	8003de2 <LL_RCC_LSI1_IsReady>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d113      	bne.n	8004544 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800451c:	f7ff fc3f 	bl	8003d9e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004520:	f7fe fb66 	bl	8002bf0 <HAL_GetTick>
 8004524:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004528:	f7fe fb62 	bl	8002bf0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e203      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800453a:	f7ff fc52 	bl	8003de2 <LL_RCC_LSI1_IsReady>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f1      	beq.n	8004528 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004544:	f7ff fc5f 	bl	8003e06 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fe fb52 	bl	8002bf0 <HAL_GetTick>
 800454c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004550:	f7fe fb4e 	bl	8002bf0 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b03      	cmp	r3, #3
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e1ef      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004562:	f7ff fc72 	bl	8003e4a <LL_RCC_LSI2_IsReady>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f1      	beq.n	8004550 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fc7c 	bl	8003e6e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004576:	f7ff fc23 	bl	8003dc0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fe fb39 	bl	8002bf0 <HAL_GetTick>
 800457e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004582:	f7fe fb35 	bl	8002bf0 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e1d6      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004594:	f7ff fc25 	bl	8003de2 <LL_RCC_LSI1_IsReady>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f1      	bne.n	8004582 <HAL_RCC_OscConfig+0x31a>
 800459e:	e051      	b.n	8004644 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80045a0:	f7ff fbfd 	bl	8003d9e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a4:	f7fe fb24 	bl	8002bf0 <HAL_GetTick>
 80045a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80045aa:	e00c      	b.n	80045c6 <HAL_RCC_OscConfig+0x35e>
 80045ac:	20000020 	.word	0x20000020
 80045b0:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045b4:	f7fe fb1c 	bl	8002bf0 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e1bd      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80045c6:	f7ff fc0c 	bl	8003de2 <LL_RCC_LSI1_IsReady>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f1      	beq.n	80045b4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80045d0:	f7ff fc2a 	bl	8003e28 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80045d6:	f7fe fb0b 	bl	8002bf0 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e1ac      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80045e8:	f7ff fc2f 	bl	8003e4a <LL_RCC_LSI2_IsReady>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f1      	bne.n	80045d6 <HAL_RCC_OscConfig+0x36e>
 80045f2:	e027      	b.n	8004644 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80045f4:	f7ff fc18 	bl	8003e28 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f8:	f7fe fafa 	bl	8002bf0 <HAL_GetTick>
 80045fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004600:	f7fe faf6 	bl	8002bf0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b03      	cmp	r3, #3
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e197      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004612:	f7ff fc1a 	bl	8003e4a <LL_RCC_LSI2_IsReady>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f1      	bne.n	8004600 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800461c:	f7ff fbd0 	bl	8003dc0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fe fae6 	bl	8002bf0 <HAL_GetTick>
 8004624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004628:	f7fe fae2 	bl	8002bf0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e183      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800463a:	f7ff fbd2 	bl	8003de2 <LL_RCC_LSI1_IsReady>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f1      	bne.n	8004628 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d05b      	beq.n	8004708 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004650:	4ba7      	ldr	r3, [pc, #668]	; (80048f0 <HAL_RCC_OscConfig+0x688>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d114      	bne.n	8004686 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800465c:	f7ff fa70 	bl	8003b40 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004660:	f7fe fac6 	bl	8002bf0 <HAL_GetTick>
 8004664:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004668:	f7fe fac2 	bl	8002bf0 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e163      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800467a:	4b9d      	ldr	r3, [pc, #628]	; (80048f0 <HAL_RCC_OscConfig+0x688>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d102      	bne.n	8004694 <HAL_RCC_OscConfig+0x42c>
 800468e:	f7ff fb30 	bl	8003cf2 <LL_RCC_LSE_Enable>
 8004692:	e00c      	b.n	80046ae <HAL_RCC_OscConfig+0x446>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b05      	cmp	r3, #5
 800469a:	d104      	bne.n	80046a6 <HAL_RCC_OscConfig+0x43e>
 800469c:	f7ff fb4b 	bl	8003d36 <LL_RCC_LSE_EnableBypass>
 80046a0:	f7ff fb27 	bl	8003cf2 <LL_RCC_LSE_Enable>
 80046a4:	e003      	b.n	80046ae <HAL_RCC_OscConfig+0x446>
 80046a6:	f7ff fb35 	bl	8003d14 <LL_RCC_LSE_Disable>
 80046aa:	f7ff fb55 	bl	8003d58 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d014      	beq.n	80046e0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fe fa9b 	bl	8002bf0 <HAL_GetTick>
 80046ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fe fa97 	bl	8002bf0 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e136      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80046d4:	f7ff fb51 	bl	8003d7a <LL_RCC_LSE_IsReady>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0ef      	beq.n	80046be <HAL_RCC_OscConfig+0x456>
 80046de:	e013      	b.n	8004708 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fe fa86 	bl	8002bf0 <HAL_GetTick>
 80046e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80046e6:	e00a      	b.n	80046fe <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e8:	f7fe fa82 	bl	8002bf0 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e121      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80046fe:	f7ff fb3c 	bl	8003d7a <LL_RCC_LSE_IsReady>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1ef      	bne.n	80046e8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d02c      	beq.n	800476e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	2b00      	cmp	r3, #0
 800471a:	d014      	beq.n	8004746 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800471c:	f7ff fab5 	bl	8003c8a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fe fa66 	bl	8002bf0 <HAL_GetTick>
 8004724:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004728:	f7fe fa62 	bl	8002bf0 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e103      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800473a:	f7ff fac8 	bl	8003cce <LL_RCC_HSI48_IsReady>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f1      	beq.n	8004728 <HAL_RCC_OscConfig+0x4c0>
 8004744:	e013      	b.n	800476e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004746:	f7ff fab1 	bl	8003cac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474a:	f7fe fa51 	bl	8002bf0 <HAL_GetTick>
 800474e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004752:	f7fe fa4d 	bl	8002bf0 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e0ee      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004764:	f7ff fab3 	bl	8003cce <LL_RCC_HSI48_IsReady>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f1      	bne.n	8004752 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80e4 	beq.w	8004940 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004778:	f7ff fc11 	bl	8003f9e <LL_RCC_GetSysClkSource>
 800477c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	2b02      	cmp	r3, #2
 800478c:	f040 80b4 	bne.w	80048f8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 0203 	and.w	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	429a      	cmp	r2, r3
 800479c:	d123      	bne.n	80047e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d11c      	bne.n	80047e6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	0a1b      	lsrs	r3, r3, #8
 80047b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d114      	bne.n	80047e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d10d      	bne.n	80047e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d106      	bne.n	80047e6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d05d      	beq.n	80048a2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d058      	beq.n	800489e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e0a1      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047fe:	f7ff fc84 	bl	800410a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004802:	f7fe f9f5 	bl	8002bf0 <HAL_GetTick>
 8004806:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480a:	f7fe f9f1 	bl	8002bf0 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e092      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1ef      	bne.n	800480a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800482a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	4b30      	ldr	r3, [pc, #192]	; (80048f4 <HAL_RCC_OscConfig+0x68c>)
 8004832:	4013      	ands	r3, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800483c:	4311      	orrs	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004842:	0212      	lsls	r2, r2, #8
 8004844:	4311      	orrs	r1, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800484a:	4311      	orrs	r1, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004850:	4311      	orrs	r1, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004856:	430a      	orrs	r2, r1
 8004858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800485c:	4313      	orrs	r3, r2
 800485e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004860:	f7ff fc44 	bl	80040ec <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800486e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004872:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004874:	f7fe f9bc 	bl	8002bf0 <HAL_GetTick>
 8004878:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487c:	f7fe f9b8 	bl	8002bf0 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e059      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0ef      	beq.n	800487c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800489c:	e050      	b.n	8004940 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e04f      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d147      	bne.n	8004940 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048b0:	f7ff fc1c 	bl	80040ec <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048c4:	f7fe f994 	bl	8002bf0 <HAL_GetTick>
 80048c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fe f990 	bl	8002bf0 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e031      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ef      	beq.n	80048cc <HAL_RCC_OscConfig+0x664>
 80048ec:	e028      	b.n	8004940 <HAL_RCC_OscConfig+0x6d8>
 80048ee:	bf00      	nop
 80048f0:	58000400 	.word	0x58000400
 80048f4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	2b0c      	cmp	r3, #12
 80048fc:	d01e      	beq.n	800493c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fe:	f7ff fc04 	bl	800410a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004902:	f7fe f975 	bl	8002bf0 <HAL_GetTick>
 8004906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490a:	f7fe f971 	bl	8002bf0 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e012      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800491c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1ef      	bne.n	800490a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800492a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004934:	4b05      	ldr	r3, [pc, #20]	; (800494c <HAL_RCC_OscConfig+0x6e4>)
 8004936:	4013      	ands	r3, r2
 8004938:	60cb      	str	r3, [r1, #12]
 800493a:	e001      	b.n	8004940 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3734      	adds	r7, #52	; 0x34
 8004946:	46bd      	mov	sp, r7
 8004948:	bd90      	pop	{r4, r7, pc}
 800494a:	bf00      	nop
 800494c:	eefefffc 	.word	0xeefefffc

08004950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e12d      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b98      	ldr	r3, [pc, #608]	; (8004bc8 <HAL_RCC_ClockConfig+0x278>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d91b      	bls.n	80049aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b95      	ldr	r3, [pc, #596]	; (8004bc8 <HAL_RCC_ClockConfig+0x278>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 0207 	bic.w	r2, r3, #7
 800497a:	4993      	ldr	r1, [pc, #588]	; (8004bc8 <HAL_RCC_ClockConfig+0x278>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004982:	f7fe f935 	bl	8002bf0 <HAL_GetTick>
 8004986:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004988:	e008      	b.n	800499c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800498a:	f7fe f931 	bl	8002bf0 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e111      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499c:	4b8a      	ldr	r3, [pc, #552]	; (8004bc8 <HAL_RCC_ClockConfig+0x278>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d1ef      	bne.n	800498a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d016      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fafb 	bl	8003fb6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049c0:	f7fe f916 	bl	8002bf0 <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049c8:	f7fe f912 	bl	8002bf0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e0f2      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80049da:	f7ff fbe8 	bl	80041ae <LL_RCC_IsActiveFlag_HPRE>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f1      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d016      	beq.n	8004a1e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff faf2 	bl	8003fde <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80049fa:	f7fe f8f9 	bl	8002bf0 <HAL_GetTick>
 80049fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a02:	f7fe f8f5 	bl	8002bf0 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0d5      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a14:	f7ff fbdd 	bl	80041d2 <LL_RCC_IsActiveFlag_C2HPRE>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f1      	beq.n	8004a02 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d016      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff faeb 	bl	800400a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a34:	f7fe f8dc 	bl	8002bf0 <HAL_GetTick>
 8004a38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a3c:	f7fe f8d8 	bl	8002bf0 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e0b8      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a4e:	f7ff fbd3 	bl	80041f8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f1      	beq.n	8004a3c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d016      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fae5 	bl	8004038 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a6e:	f7fe f8bf 	bl	8002bf0 <HAL_GetTick>
 8004a72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a76:	f7fe f8bb 	bl	8002bf0 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e09b      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004a88:	f7ff fbc9 	bl	800421e <LL_RCC_IsActiveFlag_PPRE1>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f1      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d017      	beq.n	8004ace <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fadb 	bl	8004060 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004aaa:	f7fe f8a1 	bl	8002bf0 <HAL_GetTick>
 8004aae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ab2:	f7fe f89d 	bl	8002bf0 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e07d      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ac4:	f7ff fbbd 	bl	8004242 <LL_RCC_IsActiveFlag_PPRE2>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f1      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d043      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d106      	bne.n	8004af0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004ae2:	f7ff f87b 	bl	8003bdc <LL_RCC_HSE_IsReady>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d11e      	bne.n	8004b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e067      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d106      	bne.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004af8:	f7ff fb16 	bl	8004128 <LL_RCC_PLL_IsReady>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d113      	bne.n	8004b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e05c      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004b0e:	f7ff f9e3 	bl	8003ed8 <LL_RCC_MSI_IsReady>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d108      	bne.n	8004b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e051      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004b1c:	f7ff f88e 	bl	8003c3c <LL_RCC_HSI_IsReady>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e04a      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fa21 	bl	8003f76 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b34:	f7fe f85c 	bl	8002bf0 <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b3c:	f7fe f858 	bl	8002bf0 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e036      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	f7ff fa24 	bl	8003f9e <LL_RCC_GetSysClkSource>
 8004b56:	4602      	mov	r2, r0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d1ec      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b62:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <HAL_RCC_ClockConfig+0x278>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d21b      	bcs.n	8004ba8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b70:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <HAL_RCC_ClockConfig+0x278>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f023 0207 	bic.w	r2, r3, #7
 8004b78:	4913      	ldr	r1, [pc, #76]	; (8004bc8 <HAL_RCC_ClockConfig+0x278>)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b80:	f7fe f836 	bl	8002bf0 <HAL_GetTick>
 8004b84:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b88:	f7fe f832 	bl	8002bf0 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e012      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_ClockConfig+0x278>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d1ef      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ba8:	f000 f87e 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004bac:	4603      	mov	r3, r0
 8004bae:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <HAL_RCC_ClockConfig+0x27c>)
 8004bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004bb2:	f7fe f829 	bl	8002c08 <HAL_GetTickPrio>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fd ffcb 	bl	8002b54 <HAL_InitTick>
 8004bbe:	4603      	mov	r3, r0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	58004000 	.word	0x58004000
 8004bcc:	20000020 	.word	0x20000020

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bd6:	f7ff f9e2 	bl	8003f9e <LL_RCC_GetSysClkSource>
 8004bda:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004be2:	f7ff f99e 	bl	8003f22 <LL_RCC_MSI_GetRange>
 8004be6:	4603      	mov	r3, r0
 8004be8:	091b      	lsrs	r3, r3, #4
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	4a2b      	ldr	r2, [pc, #172]	; (8004c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	e04b      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d102      	bne.n	8004c04 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bfe:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e045      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d10a      	bne.n	8004c20 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c0a:	f7fe ffb7 	bl	8003b7c <LL_RCC_HSE_IsEnabledDiv2>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d102      	bne.n	8004c1a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004c14:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e03a      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	e037      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004c20:	f7ff fab9 	bl	8004196 <LL_RCC_PLL_GetMainSource>
 8004c24:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d003      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x64>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x6a>
 8004c32:	e00d      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004c34:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c36:	60bb      	str	r3, [r7, #8]
        break;
 8004c38:	e015      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c3a:	f7fe ff9f 	bl	8003b7c <LL_RCC_HSE_IsEnabledDiv2>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d102      	bne.n	8004c4a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004c44:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c46:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004c48:	e00d      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004c4a:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c4c:	60bb      	str	r3, [r7, #8]
        break;
 8004c4e:	e00a      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004c50:	f7ff f967 	bl	8003f22 <LL_RCC_MSI_GetRange>
 8004c54:	4603      	mov	r3, r0
 8004c56:	091b      	lsrs	r3, r3, #4
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	4a0f      	ldr	r2, [pc, #60]	; (8004c9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c62:	60bb      	str	r3, [r7, #8]
        break;
 8004c64:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004c66:	f7ff fa71 	bl	800414c <LL_RCC_PLL_GetN>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	fb03 f402 	mul.w	r4, r3, r2
 8004c72:	f7ff fa84 	bl	800417e <LL_RCC_PLL_GetDivider>
 8004c76:	4603      	mov	r3, r0
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004c80:	f7ff fa71 	bl	8004166 <LL_RCC_PLL_GetR>
 8004c84:	4603      	mov	r3, r0
 8004c86:	0f5b      	lsrs	r3, r3, #29
 8004c88:	3301      	adds	r3, #1
 8004c8a:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c8e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	0800e8f4 	.word	0x0800e8f4
 8004ca0:	00f42400 	.word	0x00f42400
 8004ca4:	01e84800 	.word	0x01e84800

08004ca8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca8:	b598      	push	{r3, r4, r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004cac:	f7ff ff90 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	f7ff f9e9 	bl	8004088 <LL_RCC_GetAHBPrescaler>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	4a03      	ldr	r2, [pc, #12]	; (8004ccc <HAL_RCC_GetHCLKFreq+0x24>)
 8004cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd98      	pop	{r3, r4, r7, pc}
 8004ccc:	0800e894 	.word	0x0800e894

08004cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd0:	b598      	push	{r3, r4, r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004cd4:	f7ff ffe8 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004cd8:	4604      	mov	r4, r0
 8004cda:	f7ff f9ef 	bl	80040bc <LL_RCC_GetAPB1Prescaler>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	0a1b      	lsrs	r3, r3, #8
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	bd98      	pop	{r3, r4, r7, pc}
 8004cf8:	0800e8d4 	.word	0x0800e8d4

08004cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cfc:	b598      	push	{r3, r4, r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004d00:	f7ff ffd2 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004d04:	4604      	mov	r4, r0
 8004d06:	f7ff f9e5 	bl	80040d4 <LL_RCC_GetAPB2Prescaler>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	0adb      	lsrs	r3, r3, #11
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd98      	pop	{r3, r4, r7, pc}
 8004d24:	0800e8d4 	.word	0x0800e8d4

08004d28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004d28:	b590      	push	{r4, r7, lr}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2bb0      	cmp	r3, #176	; 0xb0
 8004d34:	d903      	bls.n	8004d3e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e007      	b.n	8004d4e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004d4e:	f7ff f9a7 	bl	80040a0 <LL_RCC_GetAHB4Prescaler>
 8004d52:	4603      	mov	r3, r0
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d66:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	0c9c      	lsrs	r4, r3, #18
 8004d72:	f7fe fef5 	bl	8003b60 <HAL_PWREx_GetVoltageRange>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 f80c 	bl	8004d98 <RCC_SetFlashLatency>
 8004d80:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd90      	pop	{r4, r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	0800e8f4 	.word	0x0800e8f4
 8004d90:	0800e894 	.word	0x0800e894
 8004d94:	431bde83 	.word	0x431bde83

08004d98 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b093      	sub	sp, #76	; 0x4c
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004da2:	4b37      	ldr	r3, [pc, #220]	; (8004e80 <RCC_SetFlashLatency+0xe8>)
 8004da4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004da8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004daa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004dae:	4a35      	ldr	r2, [pc, #212]	; (8004e84 <RCC_SetFlashLatency+0xec>)
 8004db0:	f107 031c 	add.w	r3, r7, #28
 8004db4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004db6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004dba:	4b33      	ldr	r3, [pc, #204]	; (8004e88 <RCC_SetFlashLatency+0xf0>)
 8004dbc:	f107 040c 	add.w	r4, r7, #12
 8004dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd0:	d11a      	bne.n	8004e08 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd6:	e013      	b.n	8004e00 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	3348      	adds	r3, #72	; 0x48
 8004dde:	443b      	add	r3, r7
 8004de0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d807      	bhi.n	8004dfa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	3348      	adds	r3, #72	; 0x48
 8004df0:	443b      	add	r3, r7
 8004df2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004df6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004df8:	e020      	b.n	8004e3c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8004e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d9e8      	bls.n	8004dd8 <RCC_SetFlashLatency+0x40>
 8004e06:	e019      	b.n	8004e3c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e0c:	e013      	b.n	8004e36 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	3348      	adds	r3, #72	; 0x48
 8004e14:	443b      	add	r3, r7
 8004e16:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d807      	bhi.n	8004e30 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	3348      	adds	r3, #72	; 0x48
 8004e26:	443b      	add	r3, r7
 8004e28:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e2c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004e2e:	e005      	b.n	8004e3c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e32:	3301      	adds	r3, #1
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d9e8      	bls.n	8004e0e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <RCC_SetFlashLatency+0xf4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f023 0207 	bic.w	r2, r3, #7
 8004e44:	4911      	ldr	r1, [pc, #68]	; (8004e8c <RCC_SetFlashLatency+0xf4>)
 8004e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e4c:	f7fd fed0 	bl	8002bf0 <HAL_GetTick>
 8004e50:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e52:	e008      	b.n	8004e66 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e54:	f7fd fecc 	bl	8002bf0 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e007      	b.n	8004e76 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <RCC_SetFlashLatency+0xf4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d1ef      	bne.n	8004e54 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	374c      	adds	r7, #76	; 0x4c
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd90      	pop	{r4, r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	0800daf0 	.word	0x0800daf0
 8004e84:	0800db00 	.word	0x0800db00
 8004e88:	0800db0c 	.word	0x0800db0c
 8004e8c:	58004000 	.word	0x58004000

08004e90 <LL_RCC_LSE_IsEnabled>:
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <LL_RCC_LSE_IsEnabled+0x18>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <LL_RCC_LSE_IsEnabled+0x1a>
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_RCC_LSE_IsReady>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d101      	bne.n	8004ecc <LL_RCC_LSE_IsReady+0x18>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <LL_RCC_LSE_IsReady+0x1a>
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <LL_RCC_SetRFWKPClockSource>:
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <LL_RCC_SetSMPSClockSource>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	f023 0203 	bic.w	r2, r3, #3
 8004f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_SetSMPSPrescaler>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <LL_RCC_SetUSARTClockSource>:
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f64:	f023 0203 	bic.w	r2, r3, #3
 8004f68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <LL_RCC_SetLPUARTClockSource>:
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <LL_RCC_SetI2CClockSource>:
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	401a      	ands	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <LL_RCC_SetLPTIMClockSource>:
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	0c1b      	lsrs	r3, r3, #16
 8004ffa:	041b      	lsls	r3, r3, #16
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	401a      	ands	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <LL_RCC_SetSAIClockSource>:
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800502e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <LL_RCC_SetRNGClockSource>:
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800504e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800505a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <LL_RCC_SetCLK48ClockSource>:
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800507a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <LL_RCC_SetUSBClockSource>:
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff ffe3 	bl	8005072 <LL_RCC_SetCLK48ClockSource>
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <LL_RCC_SetADCClockSource>:
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80050bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <LL_RCC_SetRTCClockSource>:
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <LL_RCC_GetRTCClockSource>:
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005118:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <LL_RCC_ForceBackupDomainReset>:
{
 8005126:	b480      	push	{r7}
 8005128:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800512a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800513e:	bf00      	nop
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800514c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005160:	bf00      	nop
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <LL_RCC_PLLSAI1_Enable>:
{
 800516a:	b480      	push	{r7}
 800516c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800516e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005178:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800517c:	6013      	str	r3, [r2, #0]
}
 800517e:	bf00      	nop
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <LL_RCC_PLLSAI1_Disable>:
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005196:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800519a:	6013      	str	r3, [r2, #0]
}
 800519c:	bf00      	nop
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <LL_RCC_PLLSAI1_IsReady>:
{
 80051a6:	b480      	push	{r7}
 80051a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80051aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b8:	d101      	bne.n	80051be <LL_RCC_PLLSAI1_IsReady+0x18>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b088      	sub	sp, #32
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80051d2:	2300      	movs	r3, #0
 80051d4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80051d6:	2300      	movs	r3, #0
 80051d8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d034      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051ee:	d021      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80051f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051f4:	d81b      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051fa:	d01d      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80051fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005200:	d815      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800520a:	d110      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800520c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800521c:	e00d      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f947 	bl	80054b6 <RCCEx_PLLSAI1_ConfigNP>
 8005228:	4603      	mov	r3, r0
 800522a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800522c:	e005      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	77fb      	strb	r3, [r7, #31]
        break;
 8005232:	e002      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005234:	bf00      	nop
 8005236:	e000      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800523a:	7ffb      	ldrb	r3, [r7, #31]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d105      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fee8 	bl	800501a <LL_RCC_SetSAIClockSource>
 800524a:	e001      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524c:	7ffb      	ldrb	r3, [r7, #31]
 800524e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005258:	2b00      	cmp	r3, #0
 800525a:	d046      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800525c:	f7ff ff56 	bl	800510c <LL_RCC_GetRTCClockSource>
 8005260:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	429a      	cmp	r2, r3
 800526a:	d03c      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800526c:	f7fe fc68 	bl	8003b40 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d105      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff ff30 	bl	80050e0 <LL_RCC_SetRTCClockSource>
 8005280:	e02e      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800528c:	f7ff ff4b 	bl	8005126 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005290:	f7ff ff5a 	bl	8005148 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80052a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80052ac:	f7ff fdf0 	bl	8004e90 <LL_RCC_LSE_IsEnabled>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d114      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052b6:	f7fd fc9b 	bl	8002bf0 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80052bc:	e00b      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052be:	f7fd fc97 	bl	8002bf0 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d902      	bls.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	77fb      	strb	r3, [r7, #31]
              break;
 80052d4:	e004      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80052d6:	f7ff fded 	bl	8004eb4 <LL_RCC_LSE_IsReady>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d1ee      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80052e0:	7ffb      	ldrb	r3, [r7, #31]
 80052e2:	77bb      	strb	r3, [r7, #30]
 80052e4:	e001      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fe2a 	bl	8004f54 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff fe35 	bl	8004f80 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fe5d 	bl	8004fe6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b00      	cmp	r3, #0
 8005336:	d004      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fe52 	bl	8004fe6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	d004      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fe2a 	bl	8004fac <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b00      	cmp	r3, #0
 8005362:	d004      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff fe1f 	bl	8004fac <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d022      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff fe8d 	bl	800509e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800538c:	d107      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800538e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005398:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800539c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053a6:	d10b      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 f8dd 	bl	800556c <RCCEx_PLLSAI1_ConfigNQ>
 80053b2:	4603      	mov	r3, r0
 80053b4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80053b6:	7ffb      	ldrb	r3, [r7, #31]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80053bc:	7ffb      	ldrb	r3, [r7, #31]
 80053be:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d02b      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d4:	d008      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053de:	d003      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d105      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fe2a 	bl	8005046 <LL_RCC_SetRNGClockSource>
 80053f2:	e00a      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x240>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	2000      	movs	r0, #0
 8005400:	f7ff fe21 	bl	8005046 <LL_RCC_SetRNGClockSource>
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7ff fe34 	bl	8005072 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005412:	d107      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800541e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005422:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542c:	2b00      	cmp	r3, #0
 800542e:	d022      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff fe3d 	bl	80050b4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005442:	d107      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800544e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005452:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800545c:	d10b      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3304      	adds	r3, #4
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f8dd 	bl	8005622 <RCCEx_PLLSAI1_ConfigNR>
 8005468:	4603      	mov	r3, r0
 800546a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800546c:	7ffb      	ldrb	r3, [r7, #31]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005472:	7ffb      	ldrb	r3, [r7, #31]
 8005474:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff fd26 	bl	8004ed8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff fd45 	bl	8004f2c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff fd2c 	bl	8004f04 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80054ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054c2:	f7ff fe61 	bl	8005188 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054c6:	f7fd fb93 	bl	8002bf0 <HAL_GetTick>
 80054ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054cc:	e009      	b.n	80054e2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ce:	f7fd fb8f 	bl	8002bf0 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d902      	bls.n	80054e2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	73fb      	strb	r3, [r7, #15]
      break;
 80054e0:	e004      	b.n	80054ec <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054e2:	f7ff fe60 	bl	80051a6 <LL_RCC_PLLSAI1_IsReady>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f0      	bne.n	80054ce <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d137      	bne.n	8005562 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	021b      	lsls	r3, r3, #8
 8005502:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005506:	4313      	orrs	r3, r2
 8005508:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800550a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800551c:	4313      	orrs	r3, r2
 800551e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005520:	f7ff fe23 	bl	800516a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005524:	f7fd fb64 	bl	8002bf0 <HAL_GetTick>
 8005528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800552a:	e009      	b.n	8005540 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800552c:	f7fd fb60 	bl	8002bf0 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d902      	bls.n	8005540 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	73fb      	strb	r3, [r7, #15]
        break;
 800553e:	e004      	b.n	800554a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005540:	f7ff fe31 	bl	80051a6 <LL_RCC_PLLSAI1_IsReady>
 8005544:	4603      	mov	r3, r0
 8005546:	2b01      	cmp	r3, #1
 8005548:	d1f0      	bne.n	800552c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d108      	bne.n	8005562 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800555e:	4313      	orrs	r3, r2
 8005560:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005578:	f7ff fe06 	bl	8005188 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800557c:	f7fd fb38 	bl	8002bf0 <HAL_GetTick>
 8005580:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005582:	e009      	b.n	8005598 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005584:	f7fd fb34 	bl	8002bf0 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d902      	bls.n	8005598 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	73fb      	strb	r3, [r7, #15]
      break;
 8005596:	e004      	b.n	80055a2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005598:	f7ff fe05 	bl	80051a6 <LL_RCC_PLLSAI1_IsReady>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d137      	bne.n	8005618 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80055a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055bc:	4313      	orrs	r3, r2
 80055be:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80055c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055d2:	4313      	orrs	r3, r2
 80055d4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80055d6:	f7ff fdc8 	bl	800516a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055da:	f7fd fb09 	bl	8002bf0 <HAL_GetTick>
 80055de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055e0:	e009      	b.n	80055f6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055e2:	f7fd fb05 	bl	8002bf0 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d902      	bls.n	80055f6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	73fb      	strb	r3, [r7, #15]
        break;
 80055f4:	e004      	b.n	8005600 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055f6:	f7ff fdd6 	bl	80051a6 <LL_RCC_PLLSAI1_IsReady>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d1f0      	bne.n	80055e2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005614:	4313      	orrs	r3, r2
 8005616:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005618:	7bfb      	ldrb	r3, [r7, #15]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800562e:	f7ff fdab 	bl	8005188 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005632:	f7fd fadd 	bl	8002bf0 <HAL_GetTick>
 8005636:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005638:	e009      	b.n	800564e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800563a:	f7fd fad9 	bl	8002bf0 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d902      	bls.n	800564e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	73fb      	strb	r3, [r7, #15]
      break;
 800564c:	e004      	b.n	8005658 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800564e:	f7ff fdaa 	bl	80051a6 <LL_RCC_PLLSAI1_IsReady>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f0      	bne.n	800563a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d137      	bne.n	80056ce <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800565e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	021b      	lsls	r3, r3, #8
 800566e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005672:	4313      	orrs	r3, r2
 8005674:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005688:	4313      	orrs	r3, r2
 800568a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800568c:	f7ff fd6d 	bl	800516a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005690:	f7fd faae 	bl	8002bf0 <HAL_GetTick>
 8005694:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005696:	e009      	b.n	80056ac <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005698:	f7fd faaa 	bl	8002bf0 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d902      	bls.n	80056ac <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	73fb      	strb	r3, [r7, #15]
        break;
 80056aa:	e004      	b.n	80056b6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056ac:	f7ff fd7b 	bl	80051a6 <LL_RCC_PLLSAI1_IsReady>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d1f0      	bne.n	8005698 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d108      	bne.n	80056ce <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80056bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056ca:	4313      	orrs	r3, r2
 80056cc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e09f      	b.n	800582a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fc ffa6 	bl	8002650 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800570c:	4b49      	ldr	r3, [pc, #292]	; (8005834 <HAL_RTC_Init+0x15c>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b10      	cmp	r3, #16
 8005716:	d07e      	beq.n	8005816 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	22ca      	movs	r2, #202	; 0xca
 800571e:	625a      	str	r2, [r3, #36]	; 0x24
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2253      	movs	r2, #83	; 0x53
 8005726:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f8ab 	bl	8005884 <RTC_EnterInitMode>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	22ff      	movs	r2, #255	; 0xff
 800573a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2204      	movs	r2, #4
 8005740:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
 8005748:	e067      	b.n	800581a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800575c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6899      	ldr	r1, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	68d2      	ldr	r2, [r2, #12]
 8005784:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6919      	ldr	r1, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	041a      	lsls	r2, r3, #16
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057a8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0203 	bic.w	r2, r2, #3
 80057b8:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 0320 	and.w	r3, r3, #32
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d113      	bne.n	8005808 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f829 	bl	8005838 <HAL_RTC_WaitForSynchro>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00d      	beq.n	8005808 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2204      	movs	r2, #4
 80057f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e010      	b.n	800582a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	22ff      	movs	r2, #255	; 0xff
 800580e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	73fb      	strb	r3, [r7, #15]
 8005814:	e001      	b.n	800581a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d103      	bne.n	8005828 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	40002800 	.word	0x40002800

08005838 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800584e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005850:	f7fd f9ce 	bl	8002bf0 <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005856:	e009      	b.n	800586c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005858:	f7fd f9ca 	bl	8002bf0 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005866:	d901      	bls.n	800586c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e007      	b.n	800587c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0ee      	beq.n	8005858 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	d119      	bne.n	80058ce <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f04f 32ff 	mov.w	r2, #4294967295
 80058a2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80058a4:	f7fd f9a4 	bl	8002bf0 <HAL_GetTick>
 80058a8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058aa:	e009      	b.n	80058c0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80058ac:	f7fd f9a0 	bl	8002bf0 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ba:	d901      	bls.n	80058c0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e007      	b.n	80058d0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0ee      	beq.n	80058ac <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d101      	bne.n	80058f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80058ee:	2302      	movs	r3, #2
 80058f0:	e0a8      	b.n	8005a44 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2202      	movs	r2, #2
 80058fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	22ca      	movs	r2, #202	; 0xca
 8005908:	625a      	str	r2, [r3, #36]	; 0x24
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2253      	movs	r2, #83	; 0x53
 8005910:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005920:	f7fd f966 	bl	8002bf0 <HAL_GetTick>
 8005924:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005926:	e015      	b.n	8005954 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005928:	f7fd f962 	bl	8002bf0 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005936:	d90d      	bls.n	8005954 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	22ff      	movs	r2, #255	; 0xff
 800593e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2203      	movs	r2, #3
 8005944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e077      	b.n	8005a44 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e2      	bne.n	8005928 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005970:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	b2da      	uxtb	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005982:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005984:	f7fd f934 	bl	8002bf0 <HAL_GetTick>
 8005988:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800598a:	e015      	b.n	80059b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800598c:	f7fd f930 	bl	8002bf0 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800599a:	d90d      	bls.n	80059b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	22ff      	movs	r2, #255	; 0xff
 80059a2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2203      	movs	r2, #3
 80059a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e045      	b.n	8005a44 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0e2      	beq.n	800598c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0207 	bic.w	r2, r2, #7
 80059dc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6899      	ldr	r1, [r3, #8]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80059ee:	4b17      	ldr	r3, [pc, #92]	; (8005a4c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80059f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059f4:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80059f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80059fe:	4b13      	ldr	r3, [pc, #76]	; (8005a4c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a12      	ldr	r2, [pc, #72]	; (8005a4c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005a04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a08:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a18:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a28:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	22ff      	movs	r2, #255	; 0xff
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	58000800 	.word	0x58000800

08005a50 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e024      	b.n	8005ab0 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	22ca      	movs	r2, #202	; 0xca
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2253      	movs	r2, #83	; 0x53
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0220 	orr.w	r2, r2, #32
 8005a94:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	22ff      	movs	r2, #255	; 0xff
 8005a9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <LL_RCC_GetUSARTClockSource>:
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4013      	ands	r3, r2
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <LL_RCC_GetLPUARTClockSource>:
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4013      	ands	r3, r2
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e042      	b.n	8005b94 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d106      	bne.n	8005b26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7fc fca1 	bl	8002468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2224      	movs	r2, #36	; 0x24
 8005b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fe60 	bl	800680c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fc35 	bl	80063bc <UART_SetConfig>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d101      	bne.n	8005b5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e01b      	b.n	8005b94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fedf 	bl	8006950 <UART_CheckIdleState>
 8005b92:	4603      	mov	r3, r0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08a      	sub	sp, #40	; 0x28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d137      	bne.n	8005c24 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <HAL_UART_Receive_IT+0x24>
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e030      	b.n	8005c26 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a18      	ldr	r2, [pc, #96]	; (8005c30 <HAL_UART_Receive_IT+0x94>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d01f      	beq.n	8005c14 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d018      	beq.n	8005c14 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	623b      	str	r3, [r7, #32]
 8005c02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	6a3a      	ldr	r2, [r7, #32]
 8005c08:	e841 2300 	strex	r3, r2, [r1]
 8005c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e6      	bne.n	8005be2 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	461a      	mov	r2, r3
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 ffb0 	bl	8006b80 <UART_Start_Receive_IT>
 8005c20:	4603      	mov	r3, r0
 8005c22:	e000      	b.n	8005c26 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3728      	adds	r7, #40	; 0x28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40008000 	.word	0x40008000

08005c34 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c48:	2b20      	cmp	r3, #32
 8005c4a:	d167      	bne.n	8005d1c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_UART_Transmit_DMA+0x24>
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e060      	b.n	8005d1e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	88fa      	ldrh	r2, [r7, #6]
 8005c66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	88fa      	ldrh	r2, [r7, #6]
 8005c6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2221      	movs	r2, #33	; 0x21
 8005c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d028      	beq.n	8005cdc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c8e:	4a26      	ldr	r2, [pc, #152]	; (8005d28 <HAL_UART_Transmit_DMA+0xf4>)
 8005c90:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c96:	4a25      	ldr	r2, [pc, #148]	; (8005d2c <HAL_UART_Transmit_DMA+0xf8>)
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c9e:	4a24      	ldr	r2, [pc, #144]	; (8005d30 <HAL_UART_Transmit_DMA+0xfc>)
 8005ca0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3328      	adds	r3, #40	; 0x28
 8005cba:	461a      	mov	r2, r3
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	f7fd fa09 	bl	80030d4 <HAL_DMA_Start_IT>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d009      	beq.n	8005cdc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2210      	movs	r2, #16
 8005ccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e020      	b.n	8005d1e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2240      	movs	r2, #64	; 0x40
 8005ce2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3308      	adds	r3, #8
 8005cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3308      	adds	r3, #8
 8005d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d04:	623a      	str	r2, [r7, #32]
 8005d06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	69f9      	ldr	r1, [r7, #28]
 8005d0a:	6a3a      	ldr	r2, [r7, #32]
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e5      	bne.n	8005ce4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e000      	b.n	8005d1e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005d1c:	2302      	movs	r3, #2
  }
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3728      	adds	r7, #40	; 0x28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	08006f13 	.word	0x08006f13
 8005d2c:	08006fad 	.word	0x08006fad
 8005d30:	08006fc9 	.word	0x08006fc9

08005d34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b0ba      	sub	sp, #232	; 0xe8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005d5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005d62:	4013      	ands	r3, r2
 8005d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d11b      	bne.n	8005da8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d015      	beq.n	8005da8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d009      	beq.n	8005da8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 82e3 	beq.w	8006364 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	4798      	blx	r3
      }
      return;
 8005da6:	e2dd      	b.n	8006364 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005da8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8123 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005db2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005db6:	4b8d      	ldr	r3, [pc, #564]	; (8005fec <HAL_UART_IRQHandler+0x2b8>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005dbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005dc2:	4b8b      	ldr	r3, [pc, #556]	; (8005ff0 <HAL_UART_IRQHandler+0x2bc>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 8116 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d011      	beq.n	8005dfc <HAL_UART_IRQHandler+0xc8>
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00b      	beq.n	8005dfc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2201      	movs	r2, #1
 8005dea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	f043 0201 	orr.w	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d011      	beq.n	8005e2c <HAL_UART_IRQHandler+0xf8>
 8005e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00b      	beq.n	8005e2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	f043 0204 	orr.w	r2, r3, #4
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d011      	beq.n	8005e5c <HAL_UART_IRQHandler+0x128>
 8005e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2204      	movs	r2, #4
 8005e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e52:	f043 0202 	orr.w	r2, r3, #2
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d017      	beq.n	8005e98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e6c:	f003 0320 	and.w	r3, r3, #32
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005e74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005e78:	4b5c      	ldr	r3, [pc, #368]	; (8005fec <HAL_UART_IRQHandler+0x2b8>)
 8005e7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2208      	movs	r2, #8
 8005e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8e:	f043 0208 	orr.w	r2, r3, #8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d012      	beq.n	8005eca <HAL_UART_IRQHandler+0x196>
 8005ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00c      	beq.n	8005eca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec0:	f043 0220 	orr.w	r2, r3, #32
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8249 	beq.w	8006368 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d013      	beq.n	8005f0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d105      	bne.n	8005efa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	2b40      	cmp	r3, #64	; 0x40
 8005f20:	d005      	beq.n	8005f2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d054      	beq.n	8005fd8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 ff89 	bl	8006e46 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	d146      	bne.n	8005fd0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3308      	adds	r3, #8
 8005f48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1d9      	bne.n	8005f42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d017      	beq.n	8005fc8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f9e:	4a15      	ldr	r2, [pc, #84]	; (8005ff4 <HAL_UART_IRQHandler+0x2c0>)
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fd f96d 	bl	8003288 <HAL_DMA_Abort_IT>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d019      	beq.n	8005fe8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc6:	e00f      	b.n	8005fe8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f9e1 	bl	8006390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fce:	e00b      	b.n	8005fe8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f9dd 	bl	8006390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd6:	e007      	b.n	8005fe8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f9d9 	bl	8006390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005fe6:	e1bf      	b.n	8006368 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe8:	bf00      	nop
    return;
 8005fea:	e1bd      	b.n	8006368 <HAL_UART_IRQHandler+0x634>
 8005fec:	10000001 	.word	0x10000001
 8005ff0:	04000120 	.word	0x04000120
 8005ff4:	08007049 	.word	0x08007049

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	f040 8153 	bne.w	80062a8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 814c 	beq.w	80062a8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8145 	beq.w	80062a8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2210      	movs	r2, #16
 8006024:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	f040 80bb 	bne.w	80061ac <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006044:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 818f 	beq.w	800636c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006054:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006058:	429a      	cmp	r2, r3
 800605a:	f080 8187 	bcs.w	800636c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006064:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	f040 8087 	bne.w	800618a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1da      	bne.n	800607c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e1      	bne.n	80060c6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3308      	adds	r3, #8
 8006108:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800610c:	e853 3f00 	ldrex	r3, [r3]
 8006110:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3308      	adds	r3, #8
 8006122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006126:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006128:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800612c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e3      	bne.n	8006102 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006158:	f023 0310 	bic.w	r3, r3, #16
 800615c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800616a:	65bb      	str	r3, [r7, #88]	; 0x58
 800616c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e4      	bne.n	8006148 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006184:	4618      	mov	r0, r3
 8006186:	f7fd f820 	bl	80031ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800619c:	b29b      	uxth	r3, r3
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f8fd 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061aa:	e0df      	b.n	800636c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80d1 	beq.w	8006370 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80061ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 80cc 	beq.w	8006370 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061fa:	647b      	str	r3, [r7, #68]	; 0x44
 80061fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e4      	bne.n	80061d8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3308      	adds	r3, #8
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	623b      	str	r3, [r7, #32]
   return(result);
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006224:	f023 0301 	bic.w	r3, r3, #1
 8006228:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3308      	adds	r3, #8
 8006232:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006236:	633a      	str	r2, [r7, #48]	; 0x30
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800623c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e1      	bne.n	800620e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	60fb      	str	r3, [r7, #12]
   return(result);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0310 	bic.w	r3, r3, #16
 8006272:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006280:	61fb      	str	r3, [r7, #28]
 8006282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	69b9      	ldr	r1, [r7, #24]
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	617b      	str	r3, [r7, #20]
   return(result);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e4      	bne.n	800625e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800629a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 f87f 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062a6:	e063      	b.n	8006370 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00e      	beq.n	80062d2 <HAL_UART_IRQHandler+0x59e>
 80062b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fc1a 	bl	8007b04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062d0:	e051      	b.n	8006376 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80062d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d014      	beq.n	8006308 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80062de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d105      	bne.n	80062f6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80062ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d008      	beq.n	8006308 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d03a      	beq.n	8006374 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
    }
    return;
 8006306:	e035      	b.n	8006374 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <HAL_UART_IRQHandler+0x5f4>
 8006314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fea7 	bl	8007074 <UART_EndTransmit_IT>
    return;
 8006326:	e026      	b.n	8006376 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800632c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d009      	beq.n	8006348 <HAL_UART_IRQHandler+0x614>
 8006334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006338:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 fbf3 	bl	8007b2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006346:	e016      	b.n	8006376 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d010      	beq.n	8006376 <HAL_UART_IRQHandler+0x642>
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006358:	2b00      	cmp	r3, #0
 800635a:	da0c      	bge.n	8006376 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f001 fbdb 	bl	8007b18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006362:	e008      	b.n	8006376 <HAL_UART_IRQHandler+0x642>
      return;
 8006364:	bf00      	nop
 8006366:	e006      	b.n	8006376 <HAL_UART_IRQHandler+0x642>
    return;
 8006368:	bf00      	nop
 800636a:	e004      	b.n	8006376 <HAL_UART_IRQHandler+0x642>
      return;
 800636c:	bf00      	nop
 800636e:	e002      	b.n	8006376 <HAL_UART_IRQHandler+0x642>
      return;
 8006370:	bf00      	nop
 8006372:	e000      	b.n	8006376 <HAL_UART_IRQHandler+0x642>
    return;
 8006374:	bf00      	nop
  }
}
 8006376:	37e8      	adds	r7, #232	; 0xe8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c0:	b08c      	sub	sp, #48	; 0x30
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	431a      	orrs	r2, r3
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4baf      	ldr	r3, [pc, #700]	; (80066a8 <UART_SetConfig+0x2ec>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f4:	430b      	orrs	r3, r1
 80063f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4aa4      	ldr	r2, [pc, #656]	; (80066ac <UART_SetConfig+0x2f0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006424:	4313      	orrs	r3, r2
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006432:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	6812      	ldr	r2, [r2, #0]
 800643a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800643c:	430b      	orrs	r3, r1
 800643e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	f023 010f 	bic.w	r1, r3, #15
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a95      	ldr	r2, [pc, #596]	; (80066b0 <UART_SetConfig+0x2f4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d125      	bne.n	80064ac <UART_SetConfig+0xf0>
 8006460:	2003      	movs	r0, #3
 8006462:	f7ff fb2b 	bl	8005abc <LL_RCC_GetUSARTClockSource>
 8006466:	4603      	mov	r3, r0
 8006468:	2b03      	cmp	r3, #3
 800646a:	d81b      	bhi.n	80064a4 <UART_SetConfig+0xe8>
 800646c:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <UART_SetConfig+0xb8>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	08006485 	.word	0x08006485
 8006478:	08006495 	.word	0x08006495
 800647c:	0800648d 	.word	0x0800648d
 8006480:	0800649d 	.word	0x0800649d
 8006484:	2301      	movs	r3, #1
 8006486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800648a:	e042      	b.n	8006512 <UART_SetConfig+0x156>
 800648c:	2302      	movs	r3, #2
 800648e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006492:	e03e      	b.n	8006512 <UART_SetConfig+0x156>
 8006494:	2304      	movs	r3, #4
 8006496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800649a:	e03a      	b.n	8006512 <UART_SetConfig+0x156>
 800649c:	2308      	movs	r3, #8
 800649e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a2:	e036      	b.n	8006512 <UART_SetConfig+0x156>
 80064a4:	2310      	movs	r3, #16
 80064a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064aa:	e032      	b.n	8006512 <UART_SetConfig+0x156>
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a7e      	ldr	r2, [pc, #504]	; (80066ac <UART_SetConfig+0x2f0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d12a      	bne.n	800650c <UART_SetConfig+0x150>
 80064b6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80064ba:	f7ff fb0f 	bl	8005adc <LL_RCC_GetLPUARTClockSource>
 80064be:	4603      	mov	r3, r0
 80064c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064c4:	d01a      	beq.n	80064fc <UART_SetConfig+0x140>
 80064c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ca:	d81b      	bhi.n	8006504 <UART_SetConfig+0x148>
 80064cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d0:	d00c      	beq.n	80064ec <UART_SetConfig+0x130>
 80064d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d6:	d815      	bhi.n	8006504 <UART_SetConfig+0x148>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <UART_SetConfig+0x128>
 80064dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e0:	d008      	beq.n	80064f4 <UART_SetConfig+0x138>
 80064e2:	e00f      	b.n	8006504 <UART_SetConfig+0x148>
 80064e4:	2300      	movs	r3, #0
 80064e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ea:	e012      	b.n	8006512 <UART_SetConfig+0x156>
 80064ec:	2302      	movs	r3, #2
 80064ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064f2:	e00e      	b.n	8006512 <UART_SetConfig+0x156>
 80064f4:	2304      	movs	r3, #4
 80064f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064fa:	e00a      	b.n	8006512 <UART_SetConfig+0x156>
 80064fc:	2308      	movs	r3, #8
 80064fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006502:	e006      	b.n	8006512 <UART_SetConfig+0x156>
 8006504:	2310      	movs	r3, #16
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650a:	e002      	b.n	8006512 <UART_SetConfig+0x156>
 800650c:	2310      	movs	r3, #16
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a65      	ldr	r2, [pc, #404]	; (80066ac <UART_SetConfig+0x2f0>)
 8006518:	4293      	cmp	r3, r2
 800651a:	f040 8097 	bne.w	800664c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800651e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006522:	2b08      	cmp	r3, #8
 8006524:	d823      	bhi.n	800656e <UART_SetConfig+0x1b2>
 8006526:	a201      	add	r2, pc, #4	; (adr r2, 800652c <UART_SetConfig+0x170>)
 8006528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652c:	08006551 	.word	0x08006551
 8006530:	0800656f 	.word	0x0800656f
 8006534:	08006559 	.word	0x08006559
 8006538:	0800656f 	.word	0x0800656f
 800653c:	0800655f 	.word	0x0800655f
 8006540:	0800656f 	.word	0x0800656f
 8006544:	0800656f 	.word	0x0800656f
 8006548:	0800656f 	.word	0x0800656f
 800654c:	08006567 	.word	0x08006567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006550:	f7fe fbbe 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 8006554:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006556:	e010      	b.n	800657a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006558:	4b56      	ldr	r3, [pc, #344]	; (80066b4 <UART_SetConfig+0x2f8>)
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800655c:	e00d      	b.n	800657a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800655e:	f7fe fb37 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8006562:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006564:	e009      	b.n	800657a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800656c:	e005      	b.n	800657a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006578:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 812b 	beq.w	80067d8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	4a4c      	ldr	r2, [pc, #304]	; (80066b8 <UART_SetConfig+0x2fc>)
 8006588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800658c:	461a      	mov	r2, r3
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006590:	fbb3 f3f2 	udiv	r3, r3, r2
 8006594:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	4413      	add	r3, r2
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d305      	bcc.n	80065b2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d903      	bls.n	80065ba <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065b8:	e10e      	b.n	80067d8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	2200      	movs	r2, #0
 80065be:	60bb      	str	r3, [r7, #8]
 80065c0:	60fa      	str	r2, [r7, #12]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	4a3c      	ldr	r2, [pc, #240]	; (80066b8 <UART_SetConfig+0x2fc>)
 80065c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2200      	movs	r2, #0
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065dc:	f7f9 fe38 	bl	8000250 <__aeabi_uldivmod>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4610      	mov	r0, r2
 80065e6:	4619      	mov	r1, r3
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	020b      	lsls	r3, r1, #8
 80065f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065f6:	0202      	lsls	r2, r0, #8
 80065f8:	6979      	ldr	r1, [r7, #20]
 80065fa:	6849      	ldr	r1, [r1, #4]
 80065fc:	0849      	lsrs	r1, r1, #1
 80065fe:	2000      	movs	r0, #0
 8006600:	460c      	mov	r4, r1
 8006602:	4605      	mov	r5, r0
 8006604:	eb12 0804 	adds.w	r8, r2, r4
 8006608:	eb43 0905 	adc.w	r9, r3, r5
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	469a      	mov	sl, r3
 8006614:	4693      	mov	fp, r2
 8006616:	4652      	mov	r2, sl
 8006618:	465b      	mov	r3, fp
 800661a:	4640      	mov	r0, r8
 800661c:	4649      	mov	r1, r9
 800661e:	f7f9 fe17 	bl	8000250 <__aeabi_uldivmod>
 8006622:	4602      	mov	r2, r0
 8006624:	460b      	mov	r3, r1
 8006626:	4613      	mov	r3, r2
 8006628:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006630:	d308      	bcc.n	8006644 <UART_SetConfig+0x288>
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006638:	d204      	bcs.n	8006644 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6a3a      	ldr	r2, [r7, #32]
 8006640:	60da      	str	r2, [r3, #12]
 8006642:	e0c9      	b.n	80067d8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800664a:	e0c5      	b.n	80067d8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006654:	d16d      	bne.n	8006732 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006656:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800665a:	3b01      	subs	r3, #1
 800665c:	2b07      	cmp	r3, #7
 800665e:	d82d      	bhi.n	80066bc <UART_SetConfig+0x300>
 8006660:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <UART_SetConfig+0x2ac>)
 8006662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006666:	bf00      	nop
 8006668:	08006689 	.word	0x08006689
 800666c:	08006691 	.word	0x08006691
 8006670:	080066bd 	.word	0x080066bd
 8006674:	08006697 	.word	0x08006697
 8006678:	080066bd 	.word	0x080066bd
 800667c:	080066bd 	.word	0x080066bd
 8006680:	080066bd 	.word	0x080066bd
 8006684:	0800669f 	.word	0x0800669f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006688:	f7fe fb38 	bl	8004cfc <HAL_RCC_GetPCLK2Freq>
 800668c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800668e:	e01b      	b.n	80066c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006690:	4b08      	ldr	r3, [pc, #32]	; (80066b4 <UART_SetConfig+0x2f8>)
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006694:	e018      	b.n	80066c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006696:	f7fe fa9b 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 800669a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800669c:	e014      	b.n	80066c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800669e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066a4:	e010      	b.n	80066c8 <UART_SetConfig+0x30c>
 80066a6:	bf00      	nop
 80066a8:	cfff69f3 	.word	0xcfff69f3
 80066ac:	40008000 	.word	0x40008000
 80066b0:	40013800 	.word	0x40013800
 80066b4:	00f42400 	.word	0x00f42400
 80066b8:	0800e934 	.word	0x0800e934
      default:
        pclk = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8084 	beq.w	80067d8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	4a4b      	ldr	r2, [pc, #300]	; (8006804 <UART_SetConfig+0x448>)
 80066d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066da:	461a      	mov	r2, r3
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	fbb3 f3f2 	udiv	r3, r3, r2
 80066e2:	005a      	lsls	r2, r3, #1
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	441a      	add	r2, r3
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	2b0f      	cmp	r3, #15
 80066fa:	d916      	bls.n	800672a <UART_SetConfig+0x36e>
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006702:	d212      	bcs.n	800672a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f023 030f 	bic.w	r3, r3, #15
 800670c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	b29b      	uxth	r3, r3
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	b29a      	uxth	r2, r3
 800671a:	8bfb      	ldrh	r3, [r7, #30]
 800671c:	4313      	orrs	r3, r2
 800671e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	8bfa      	ldrh	r2, [r7, #30]
 8006726:	60da      	str	r2, [r3, #12]
 8006728:	e056      	b.n	80067d8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006730:	e052      	b.n	80067d8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006732:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006736:	3b01      	subs	r3, #1
 8006738:	2b07      	cmp	r3, #7
 800673a:	d822      	bhi.n	8006782 <UART_SetConfig+0x3c6>
 800673c:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <UART_SetConfig+0x388>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006765 	.word	0x08006765
 8006748:	0800676d 	.word	0x0800676d
 800674c:	08006783 	.word	0x08006783
 8006750:	08006773 	.word	0x08006773
 8006754:	08006783 	.word	0x08006783
 8006758:	08006783 	.word	0x08006783
 800675c:	08006783 	.word	0x08006783
 8006760:	0800677b 	.word	0x0800677b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006764:	f7fe faca 	bl	8004cfc <HAL_RCC_GetPCLK2Freq>
 8006768:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800676a:	e010      	b.n	800678e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800676c:	4b26      	ldr	r3, [pc, #152]	; (8006808 <UART_SetConfig+0x44c>)
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006770:	e00d      	b.n	800678e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006772:	f7fe fa2d 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8006776:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006778:	e009      	b.n	800678e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800677a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006780:	e005      	b.n	800678e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800678c:	bf00      	nop
    }

    if (pclk != 0U)
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	2b00      	cmp	r3, #0
 8006792:	d021      	beq.n	80067d8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	4a1a      	ldr	r2, [pc, #104]	; (8006804 <UART_SetConfig+0x448>)
 800679a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800679e:	461a      	mov	r2, r3
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	441a      	add	r2, r3
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	2b0f      	cmp	r3, #15
 80067bc:	d909      	bls.n	80067d2 <UART_SetConfig+0x416>
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c4:	d205      	bcs.n	80067d2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60da      	str	r2, [r3, #12]
 80067d0:	e002      	b.n	80067d8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2201      	movs	r2, #1
 80067dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2200      	movs	r2, #0
 80067ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2200      	movs	r2, #0
 80067f2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80067f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3730      	adds	r7, #48	; 0x30
 80067fc:	46bd      	mov	sp, r7
 80067fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006802:	bf00      	nop
 8006804:	0800e934 	.word	0x0800e934
 8006808:	00f42400 	.word	0x00f42400

0800680c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01a      	beq.n	8006922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800690a:	d10a      	bne.n	8006922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	605a      	str	r2, [r3, #4]
  }
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b098      	sub	sp, #96	; 0x60
 8006954:	af02      	add	r7, sp, #8
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006960:	f7fc f946 	bl	8002bf0 <HAL_GetTick>
 8006964:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b08      	cmp	r3, #8
 8006972:	d12f      	bne.n	80069d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800697c:	2200      	movs	r2, #0
 800697e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f88e 	bl	8006aa4 <UART_WaitOnFlagUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d022      	beq.n	80069d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800699c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069a2:	653b      	str	r3, [r7, #80]	; 0x50
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ac:	647b      	str	r3, [r7, #68]	; 0x44
 80069ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e6      	bne.n	800698e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e063      	b.n	8006a9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d149      	bne.n	8006a76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069ea:	2200      	movs	r2, #0
 80069ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f857 	bl	8006aa4 <UART_WaitOnFlagUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d03c      	beq.n	8006a76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	e853 3f00 	ldrex	r3, [r3]
 8006a08:	623b      	str	r3, [r7, #32]
   return(result);
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e6      	bne.n	80069fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3308      	adds	r3, #8
 8006a34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a4e:	61fa      	str	r2, [r7, #28]
 8006a50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	69b9      	ldr	r1, [r7, #24]
 8006a54:	69fa      	ldr	r2, [r7, #28]
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e5      	bne.n	8006a2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e012      	b.n	8006a9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3758      	adds	r7, #88	; 0x58
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab4:	e04f      	b.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abc:	d04b      	beq.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fc f897 	bl	8002bf0 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e04e      	b.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0304 	and.w	r3, r3, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d037      	beq.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b80      	cmp	r3, #128	; 0x80
 8006aea:	d034      	beq.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b40      	cmp	r3, #64	; 0x40
 8006af0:	d031      	beq.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d110      	bne.n	8006b22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2208      	movs	r2, #8
 8006b06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f99c 	bl	8006e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2208      	movs	r2, #8
 8006b12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e029      	b.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b30:	d111      	bne.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f982 	bl	8006e46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e00f      	b.n	8006b76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69da      	ldr	r2, [r3, #28]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	bf0c      	ite	eq
 8006b66:	2301      	moveq	r3, #1
 8006b68:	2300      	movne	r3, #0
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	79fb      	ldrb	r3, [r7, #7]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d0a0      	beq.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b0a3      	sub	sp, #140	; 0x8c
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	88fa      	ldrh	r2, [r7, #6]
 8006b98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb2:	d10e      	bne.n	8006bd2 <UART_Start_Receive_IT+0x52>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d105      	bne.n	8006bc8 <UART_Start_Receive_IT+0x48>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006bc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bc6:	e02d      	b.n	8006c24 <UART_Start_Receive_IT+0xa4>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	22ff      	movs	r2, #255	; 0xff
 8006bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bd0:	e028      	b.n	8006c24 <UART_Start_Receive_IT+0xa4>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10d      	bne.n	8006bf6 <UART_Start_Receive_IT+0x76>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <UART_Start_Receive_IT+0x6c>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	22ff      	movs	r2, #255	; 0xff
 8006be6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bea:	e01b      	b.n	8006c24 <UART_Start_Receive_IT+0xa4>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	227f      	movs	r2, #127	; 0x7f
 8006bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bf4:	e016      	b.n	8006c24 <UART_Start_Receive_IT+0xa4>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bfe:	d10d      	bne.n	8006c1c <UART_Start_Receive_IT+0x9c>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <UART_Start_Receive_IT+0x92>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	227f      	movs	r2, #127	; 0x7f
 8006c0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006c10:	e008      	b.n	8006c24 <UART_Start_Receive_IT+0xa4>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	223f      	movs	r2, #63	; 0x3f
 8006c16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006c1a:	e003      	b.n	8006c24 <UART_Start_Receive_IT+0xa4>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2222      	movs	r2, #34	; 0x22
 8006c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3308      	adds	r3, #8
 8006c3a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c46:	f043 0301 	orr.w	r3, r3, #1
 8006c4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3308      	adds	r3, #8
 8006c54:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006c58:	673a      	str	r2, [r7, #112]	; 0x70
 8006c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006c5e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e3      	bne.n	8006c34 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c74:	d14f      	bne.n	8006d16 <UART_Start_Receive_IT+0x196>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c7c:	88fa      	ldrh	r2, [r7, #6]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d349      	bcc.n	8006d16 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8a:	d107      	bne.n	8006c9c <UART_Start_Receive_IT+0x11c>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4a47      	ldr	r2, [pc, #284]	; (8006db4 <UART_Start_Receive_IT+0x234>)
 8006c98:	675a      	str	r2, [r3, #116]	; 0x74
 8006c9a:	e002      	b.n	8006ca2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4a46      	ldr	r2, [pc, #280]	; (8006db8 <UART_Start_Receive_IT+0x238>)
 8006ca0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d01a      	beq.n	8006ce0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cce:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cd2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e4      	bne.n	8006caa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	3308      	adds	r3, #8
 8006cfe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006d00:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e5      	bne.n	8006ce0 <UART_Start_Receive_IT+0x160>
 8006d14:	e046      	b.n	8006da4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1e:	d107      	bne.n	8006d30 <UART_Start_Receive_IT+0x1b0>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a24      	ldr	r2, [pc, #144]	; (8006dbc <UART_Start_Receive_IT+0x23c>)
 8006d2c:	675a      	str	r2, [r3, #116]	; 0x74
 8006d2e:	e002      	b.n	8006d36 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4a23      	ldr	r2, [pc, #140]	; (8006dc0 <UART_Start_Receive_IT+0x240>)
 8006d34:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d019      	beq.n	8006d72 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006d52:	677b      	str	r3, [r7, #116]	; 0x74
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e6      	bne.n	8006d3e <UART_Start_Receive_IT+0x1be>
 8006d70:	e018      	b.n	8006da4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f043 0320 	orr.w	r3, r3, #32
 8006d86:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d90:	623b      	str	r3, [r7, #32]
 8006d92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d94:	69f9      	ldr	r1, [r7, #28]
 8006d96:	6a3a      	ldr	r2, [r7, #32]
 8006d98:	e841 2300 	strex	r3, r2, [r1]
 8006d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e6      	bne.n	8006d72 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	378c      	adds	r7, #140	; 0x8c
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	0800779d 	.word	0x0800779d
 8006db8:	0800743d 	.word	0x0800743d
 8006dbc:	08007285 	.word	0x08007285
 8006dc0:	080070cd 	.word	0x080070cd

08006dc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b08f      	sub	sp, #60	; 0x3c
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e6      	bne.n	8006dcc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3308      	adds	r3, #8
 8006e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006e14:	633b      	str	r3, [r7, #48]	; 0x30
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e1e:	61ba      	str	r2, [r7, #24]
 8006e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	6979      	ldr	r1, [r7, #20]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1e5      	bne.n	8006dfe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006e3a:	bf00      	nop
 8006e3c:	373c      	adds	r7, #60	; 0x3c
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b095      	sub	sp, #84	; 0x54
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e6      	bne.n	8006e4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3308      	adds	r3, #8
 8006e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	e853 3f00 	ldrex	r3, [r3]
 8006e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e96:	f023 0301 	bic.w	r3, r3, #1
 8006e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eac:	e841 2300 	strex	r3, r2, [r1]
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1e3      	bne.n	8006e80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d118      	bne.n	8006ef2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f023 0310 	bic.w	r3, r3, #16
 8006ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ede:	61bb      	str	r3, [r7, #24]
 8006ee0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6979      	ldr	r1, [r7, #20]
 8006ee4:	69ba      	ldr	r2, [r7, #24]
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	613b      	str	r3, [r7, #16]
   return(result);
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e6      	bne.n	8006ec0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006f06:	bf00      	nop
 8006f08:	3754      	adds	r7, #84	; 0x54
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b090      	sub	sp, #64	; 0x40
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0320 	and.w	r3, r3, #32
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d137      	bne.n	8006f9e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	623b      	str	r3, [r7, #32]
   return(result);
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3308      	adds	r3, #8
 8006f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f56:	633a      	str	r2, [r7, #48]	; 0x30
 8006f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e5      	bne.n	8006f36 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f88:	61fb      	str	r3, [r7, #28]
 8006f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	69b9      	ldr	r1, [r7, #24]
 8006f8e:	69fa      	ldr	r2, [r7, #28]
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	617b      	str	r3, [r7, #20]
   return(result);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e6      	bne.n	8006f6a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f9c:	e002      	b.n	8006fa4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006f9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006fa0:	f7fa ffd4 	bl	8001f4c <HAL_UART_TxCpltCallback>
}
 8006fa4:	bf00      	nop
 8006fa6:	3740      	adds	r7, #64	; 0x40
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f7ff f9de 	bl	800637c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fc0:	bf00      	nop
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fdc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff0:	2b80      	cmp	r3, #128	; 0x80
 8006ff2:	d109      	bne.n	8007008 <UART_DMAError+0x40>
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b21      	cmp	r3, #33	; 0x21
 8006ff8:	d106      	bne.n	8007008 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007002:	6978      	ldr	r0, [r7, #20]
 8007004:	f7ff fede 	bl	8006dc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007012:	2b40      	cmp	r3, #64	; 0x40
 8007014:	d109      	bne.n	800702a <UART_DMAError+0x62>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b22      	cmp	r3, #34	; 0x22
 800701a:	d106      	bne.n	800702a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2200      	movs	r2, #0
 8007020:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007024:	6978      	ldr	r0, [r7, #20]
 8007026:	f7ff ff0e 	bl	8006e46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007030:	f043 0210 	orr.w	r2, r3, #16
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800703a:	6978      	ldr	r0, [r7, #20]
 800703c:	f7ff f9a8 	bl	8006390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007040:	bf00      	nop
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007054:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7ff f992 	bl	8006390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	60bb      	str	r3, [r7, #8]
   return(result);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007090:	61fb      	str	r3, [r7, #28]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6979      	ldr	r1, [r7, #20]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	613b      	str	r3, [r7, #16]
   return(result);
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e6      	bne.n	800707c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7fa ff45 	bl	8001f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070c2:	bf00      	nop
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b09c      	sub	sp, #112	; 0x70
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e4:	2b22      	cmp	r3, #34	; 0x22
 80070e6:	f040 80be 	bne.w	8007266 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80070f8:	b2d9      	uxtb	r1, r3
 80070fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007104:	400a      	ands	r2, r1
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	f040 80a1 	bne.w	8007276 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007144:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007148:	66bb      	str	r3, [r7, #104]	; 0x68
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007152:	65bb      	str	r3, [r7, #88]	; 0x58
 8007154:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e6      	bne.n	8007134 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3308      	adds	r3, #8
 800716c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007178:	f023 0301 	bic.w	r3, r3, #1
 800717c:	667b      	str	r3, [r7, #100]	; 0x64
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3308      	adds	r3, #8
 8007184:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007186:	647a      	str	r2, [r7, #68]	; 0x44
 8007188:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800718c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e5      	bne.n	8007166 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a33      	ldr	r2, [pc, #204]	; (8007280 <UART_RxISR_8BIT+0x1b4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d01f      	beq.n	80071f8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d018      	beq.n	80071f8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	623b      	str	r3, [r7, #32]
   return(result);
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071da:	663b      	str	r3, [r7, #96]	; 0x60
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071e4:	633b      	str	r3, [r7, #48]	; 0x30
 80071e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e6      	bne.n	80071c6 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d12e      	bne.n	800725e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	e853 3f00 	ldrex	r3, [r3]
 8007212:	60fb      	str	r3, [r7, #12]
   return(result);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0310 	bic.w	r3, r3, #16
 800721a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007224:	61fb      	str	r3, [r7, #28]
 8007226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007228:	69b9      	ldr	r1, [r7, #24]
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	e841 2300 	strex	r3, r2, [r1]
 8007230:	617b      	str	r3, [r7, #20]
   return(result);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e6      	bne.n	8007206 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f003 0310 	and.w	r3, r3, #16
 8007242:	2b10      	cmp	r3, #16
 8007244:	d103      	bne.n	800724e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2210      	movs	r2, #16
 800724c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f7ff f8a4 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800725c:	e00b      	b.n	8007276 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fa fe56 	bl	8001f10 <HAL_UART_RxCpltCallback>
}
 8007264:	e007      	b.n	8007276 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f042 0208 	orr.w	r2, r2, #8
 8007274:	619a      	str	r2, [r3, #24]
}
 8007276:	bf00      	nop
 8007278:	3770      	adds	r7, #112	; 0x70
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	40008000 	.word	0x40008000

08007284 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b09c      	sub	sp, #112	; 0x70
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007292:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800729c:	2b22      	cmp	r3, #34	; 0x22
 800729e:	f040 80be 	bne.w	800741e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80072b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80072b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80072ba:	4013      	ands	r3, r2
 80072bc:	b29a      	uxth	r2, r3
 80072be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c6:	1c9a      	adds	r2, r3, #2
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	3b01      	subs	r3, #1
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f040 80a1 	bne.w	800742e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80072fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007300:	667b      	str	r3, [r7, #100]	; 0x64
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800730a:	657b      	str	r3, [r7, #84]	; 0x54
 800730c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007310:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e6      	bne.n	80072ec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	f023 0301 	bic.w	r3, r3, #1
 8007334:	663b      	str	r3, [r7, #96]	; 0x60
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3308      	adds	r3, #8
 800733c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800733e:	643a      	str	r2, [r7, #64]	; 0x40
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e5      	bne.n	800731e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2220      	movs	r2, #32
 8007356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a33      	ldr	r2, [pc, #204]	; (8007438 <UART_RxISR_16BIT+0x1b4>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d01f      	beq.n	80073b0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d018      	beq.n	80073b0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	61fb      	str	r3, [r7, #28]
   return(result);
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800739c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800739e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e6      	bne.n	800737e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d12e      	bne.n	8007416 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f023 0310 	bic.w	r3, r3, #16
 80073d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	6979      	ldr	r1, [r7, #20]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	613b      	str	r3, [r7, #16]
   return(result);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e6      	bne.n	80073be <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f003 0310 	and.w	r3, r3, #16
 80073fa:	2b10      	cmp	r3, #16
 80073fc:	d103      	bne.n	8007406 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2210      	movs	r2, #16
 8007404:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fe ffc8 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007414:	e00b      	b.n	800742e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fa fd7a 	bl	8001f10 <HAL_UART_RxCpltCallback>
}
 800741c:	e007      	b.n	800742e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	699a      	ldr	r2, [r3, #24]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0208 	orr.w	r2, r2, #8
 800742c:	619a      	str	r2, [r3, #24]
}
 800742e:	bf00      	nop
 8007430:	3770      	adds	r7, #112	; 0x70
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	40008000 	.word	0x40008000

0800743c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b0ac      	sub	sp, #176	; 0xb0
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800744a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007472:	2b22      	cmp	r3, #34	; 0x22
 8007474:	f040 8182 	bne.w	800777c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800747e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007482:	e125      	b.n	80076d0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800748e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007492:	b2d9      	uxtb	r1, r3
 8007494:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007498:	b2da      	uxtb	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749e:	400a      	ands	r2, r1
 80074a0:	b2d2      	uxtb	r2, r2
 80074a2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80074ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d053      	beq.n	800757e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d011      	beq.n	8007506 <UART_RxISR_8BIT_FIFOEN+0xca>
 80074e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00b      	beq.n	8007506 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2201      	movs	r2, #1
 80074f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fc:	f043 0201 	orr.w	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b00      	cmp	r3, #0
 8007510:	d011      	beq.n	8007536 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00b      	beq.n	8007536 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2202      	movs	r2, #2
 8007524:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752c:	f043 0204 	orr.w	r2, r3, #4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	d011      	beq.n	8007566 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007542:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2204      	movs	r2, #4
 8007554:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755c:	f043 0202 	orr.w	r2, r3, #2
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756c:	2b00      	cmp	r3, #0
 800756e:	d006      	beq.n	800757e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7fe ff0d 	bl	8006390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 80a2 	bne.w	80076d0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800759a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800759c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80075b0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80075b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80075bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e4      	bne.n	800758c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3308      	adds	r3, #8
 80075c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80075d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d8:	f023 0301 	bic.w	r3, r3, #1
 80075dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3308      	adds	r3, #8
 80075e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075ea:	66ba      	str	r2, [r7, #104]	; 0x68
 80075ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80075f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80075f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e1      	bne.n	80075c2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a5f      	ldr	r2, [pc, #380]	; (8007794 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d021      	beq.n	8007660 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01a      	beq.n	8007660 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800763a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800763e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800764c:	657b      	str	r3, [r7, #84]	; 0x54
 800764e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007652:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800765a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e4      	bne.n	800762a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007664:	2b01      	cmp	r3, #1
 8007666:	d130      	bne.n	80076ca <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	f023 0310 	bic.w	r3, r3, #16
 8007682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007690:	643b      	str	r3, [r7, #64]	; 0x40
 8007692:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800769e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e4      	bne.n	800766e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f003 0310 	and.w	r3, r3, #16
 80076ae:	2b10      	cmp	r3, #16
 80076b0:	d103      	bne.n	80076ba <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2210      	movs	r2, #16
 80076b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fe fe6e 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
 80076c8:	e002      	b.n	80076d0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fa fc20 	bl	8001f10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d006      	beq.n	80076e6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80076d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f47f aecf 	bne.w	8007484 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80076f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d049      	beq.n	800778c <UART_RxISR_8BIT_FIFOEN+0x350>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076fe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007702:	429a      	cmp	r2, r3
 8007704:	d242      	bcs.n	800778c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	61fb      	str	r3, [r7, #28]
   return(result);
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800771c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3308      	adds	r3, #8
 8007726:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800772a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e3      	bne.n	8007706 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a15      	ldr	r2, [pc, #84]	; (8007798 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007742:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	60bb      	str	r3, [r7, #8]
   return(result);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f043 0320 	orr.w	r3, r3, #32
 8007758:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007766:	61bb      	str	r3, [r7, #24]
 8007768:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776a:	6979      	ldr	r1, [r7, #20]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	e841 2300 	strex	r3, r2, [r1]
 8007772:	613b      	str	r3, [r7, #16]
   return(result);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1e4      	bne.n	8007744 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800777a:	e007      	b.n	800778c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0208 	orr.w	r2, r2, #8
 800778a:	619a      	str	r2, [r3, #24]
}
 800778c:	bf00      	nop
 800778e:	37b0      	adds	r7, #176	; 0xb0
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	40008000 	.word	0x40008000
 8007798:	080070cd 	.word	0x080070cd

0800779c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b0ae      	sub	sp, #184	; 0xb8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077aa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d2:	2b22      	cmp	r3, #34	; 0x22
 80077d4:	f040 8186 	bne.w	8007ae4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80077de:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077e2:	e129      	b.n	8007a38 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80077f6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80077fa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80077fe:	4013      	ands	r3, r2
 8007800:	b29a      	uxth	r2, r3
 8007802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007806:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780c:	1c9a      	adds	r2, r3, #2
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007818:	b29b      	uxth	r3, r3
 800781a:	3b01      	subs	r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800782e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	2b00      	cmp	r3, #0
 8007838:	d053      	beq.n	80078e2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800783a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d011      	beq.n	800786a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800784a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00b      	beq.n	800786a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2201      	movs	r2, #1
 8007858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007860:	f043 0201 	orr.w	r2, r3, #1
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800786a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d011      	beq.n	800789a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2202      	movs	r2, #2
 8007888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007890:	f043 0204 	orr.w	r2, r3, #4
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800789a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d011      	beq.n	80078ca <UART_RxISR_16BIT_FIFOEN+0x12e>
 80078a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2204      	movs	r2, #4
 80078b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c0:	f043 0202 	orr.w	r2, r3, #2
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d006      	beq.n	80078e2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7fe fd5b 	bl	8006390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f040 80a4 	bne.w	8007a38 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	461a      	mov	r2, r3
 800790e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007916:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007918:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800791a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e2      	bne.n	80078f0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3308      	adds	r3, #8
 8007930:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800793a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800793c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007940:	f023 0301 	bic.w	r3, r3, #1
 8007944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3308      	adds	r3, #8
 800794e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007952:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007954:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007958:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e1      	bne.n	800792a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a5f      	ldr	r2, [pc, #380]	; (8007afc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d021      	beq.n	80079c8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01a      	beq.n	80079c8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80079b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80079b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e4      	bne.n	8007992 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d130      	bne.n	8007a32 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e6:	f023 0310 	bic.w	r3, r3, #16
 80079ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079f8:	647b      	str	r3, [r7, #68]	; 0x44
 80079fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e4      	bne.n	80079d6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b10      	cmp	r3, #16
 8007a18:	d103      	bne.n	8007a22 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2210      	movs	r2, #16
 8007a20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7fe fcba 	bl	80063a4 <HAL_UARTEx_RxEventCallback>
 8007a30:	e002      	b.n	8007a38 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7fa fa6c 	bl	8001f10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a38:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d006      	beq.n	8007a4e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007a40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f47f aecb 	bne.w	80077e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a54:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a58:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d049      	beq.n	8007af4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a66:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d242      	bcs.n	8007af4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3308      	adds	r3, #8
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007a92:	633a      	str	r2, [r7, #48]	; 0x30
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e3      	bne.n	8007a6e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a15      	ldr	r2, [pc, #84]	; (8007b00 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007aaa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f043 0320 	orr.w	r3, r3, #32
 8007ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	69b9      	ldr	r1, [r7, #24]
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	617b      	str	r3, [r7, #20]
   return(result);
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e4      	bne.n	8007aac <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ae2:	e007      	b.n	8007af4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	699a      	ldr	r2, [r3, #24]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0208 	orr.w	r2, r2, #8
 8007af2:	619a      	str	r2, [r3, #24]
}
 8007af4:	bf00      	nop
 8007af6:	37b8      	adds	r7, #184	; 0xb8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40008000 	.word	0x40008000
 8007b00:	08007285 	.word	0x08007285

08007b04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d101      	bne.n	8007b56 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b52:	2302      	movs	r3, #2
 8007b54:	e027      	b.n	8007ba6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2224      	movs	r2, #36	; 0x24
 8007b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0201 	bic.w	r2, r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2220      	movs	r2, #32
 8007b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d101      	bne.n	8007bca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	e02d      	b.n	8007c26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2224      	movs	r2, #36	; 0x24
 8007bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0201 	bic.w	r2, r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f850 	bl	8007cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c42:	2302      	movs	r3, #2
 8007c44:	e02d      	b.n	8007ca2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2224      	movs	r2, #36	; 0x24
 8007c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0201 	bic.w	r2, r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f812 	bl	8007cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2220      	movs	r2, #32
 8007c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d108      	bne.n	8007cce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ccc:	e031      	b.n	8007d32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cce:	2308      	movs	r3, #8
 8007cd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cd2:	2308      	movs	r3, #8
 8007cd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	0e5b      	lsrs	r3, r3, #25
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	f003 0307 	and.w	r3, r3, #7
 8007ce4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	0f5b      	lsrs	r3, r3, #29
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	7b3a      	ldrb	r2, [r7, #12]
 8007cfa:	4911      	ldr	r1, [pc, #68]	; (8007d40 <UARTEx_SetNbDataToProcess+0x94>)
 8007cfc:	5c8a      	ldrb	r2, [r1, r2]
 8007cfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d02:	7b3a      	ldrb	r2, [r7, #12]
 8007d04:	490f      	ldr	r1, [pc, #60]	; (8007d44 <UARTEx_SetNbDataToProcess+0x98>)
 8007d06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d08:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	7b7a      	ldrb	r2, [r7, #13]
 8007d18:	4909      	ldr	r1, [pc, #36]	; (8007d40 <UARTEx_SetNbDataToProcess+0x94>)
 8007d1a:	5c8a      	ldrb	r2, [r1, r2]
 8007d1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d20:	7b7a      	ldrb	r2, [r7, #13]
 8007d22:	4908      	ldr	r1, [pc, #32]	; (8007d44 <UARTEx_SetNbDataToProcess+0x98>)
 8007d24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d26:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	0800e94c 	.word	0x0800e94c
 8007d44:	0800e954 	.word	0x0800e954

08007d48 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b0cc      	sub	sp, #304	; 0x130
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4602      	mov	r2, r0
 8007d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d54:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007d58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007d5a:	f107 0310 	add.w	r3, r7, #16
 8007d5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d66:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d7c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007d80:	7812      	ldrb	r2, [r2, #0]
 8007d82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d88:	3301      	adds	r3, #1
 8007d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d92:	2218      	movs	r2, #24
 8007d94:	2100      	movs	r1, #0
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 f8c9 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d9c:	233f      	movs	r3, #63	; 0x3f
 8007d9e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007da2:	2385      	movs	r3, #133	; 0x85
 8007da4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007da8:	f107 0310 	add.w	r3, r7, #16
 8007dac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007db0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007db4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007db8:	f107 030f 	add.w	r3, r7, #15
 8007dbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007dc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007dca:	2100      	movs	r1, #0
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 fb5b 	bl	8009488 <hci_send_req>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	da01      	bge.n	8007ddc <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007dd8:	23ff      	movs	r3, #255	; 0xff
 8007dda:	e004      	b.n	8007de6 <aci_gap_set_io_capability+0x9e>
  return status;
 8007ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007de4:	781b      	ldrb	r3, [r3, #0]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007df0:	b5b0      	push	{r4, r5, r7, lr}
 8007df2:	b0cc      	sub	sp, #304	; 0x130
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4605      	mov	r5, r0
 8007df8:	460c      	mov	r4, r1
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e02:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007e06:	462a      	mov	r2, r5
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e0e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007e12:	4622      	mov	r2, r4
 8007e14:	701a      	strb	r2, [r3, #0]
 8007e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e1a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007e1e:	4602      	mov	r2, r0
 8007e20:	701a      	strb	r2, [r3, #0]
 8007e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e2a:	460a      	mov	r2, r1
 8007e2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007e2e:	f107 0310 	add.w	r3, r7, #16
 8007e32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e3e:	2200      	movs	r2, #0
 8007e40:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e50:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007e54:	7812      	ldrb	r2, [r2, #0]
 8007e56:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e6a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007e6e:	7812      	ldrb	r2, [r2, #0]
 8007e70:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007e72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e76:	3301      	adds	r3, #1
 8007e78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e84:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007e88:	7812      	ldrb	r2, [r2, #0]
 8007e8a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e90:	3301      	adds	r3, #1
 8007e92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e9e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007ea2:	7812      	ldrb	r2, [r2, #0]
 8007ea4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007ea6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eaa:	3301      	adds	r3, #1
 8007eac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007eb8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007eba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007ecc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007edc:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007ee0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007ee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007ef4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007ef8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007efc:	3304      	adds	r3, #4
 8007efe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f06:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007f0a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007f0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f10:	3301      	adds	r3, #1
 8007f12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f1a:	2218      	movs	r2, #24
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 f805 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f24:	233f      	movs	r3, #63	; 0x3f
 8007f26:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007f2a:	2386      	movs	r3, #134	; 0x86
 8007f2c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f30:	f107 0310 	add.w	r3, r7, #16
 8007f34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f40:	f107 030f 	add.w	r3, r7, #15
 8007f44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f52:	2100      	movs	r1, #0
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 fa97 	bl	8009488 <hci_send_req>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	da01      	bge.n	8007f64 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007f60:	23ff      	movs	r3, #255	; 0xff
 8007f62:	e004      	b.n	8007f6e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f68:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f6c:	781b      	ldrb	r3, [r3, #0]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bdb0      	pop	{r4, r5, r7, pc}

08007f78 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b0cd      	sub	sp, #308	; 0x134
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	4611      	mov	r1, r2
 8007f84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f88:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f92:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007f96:	4622      	mov	r2, r4
 8007f98:	701a      	strb	r2, [r3, #0]
 8007f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007faa:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007fae:	460a      	mov	r2, r1
 8007fb0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007fb2:	f107 0310 	add.w	r3, r7, #16
 8007fb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007fba:	f107 0308 	add.w	r3, r7, #8
 8007fbe:	2207      	movs	r2, #7
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 ffb3 	bl	8008f2e <Osal_MemSet>
  int index_input = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fd6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007fda:	7812      	ldrb	r2, [r2, #0]
 8007fdc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007fde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ff0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007ff4:	7812      	ldrb	r2, [r2, #0]
 8007ff6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007ff8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008006:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800800a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008012:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008016:	3301      	adds	r3, #1
 8008018:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800801c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008020:	2218      	movs	r2, #24
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f000 ff82 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 800802a:	233f      	movs	r3, #63	; 0x3f
 800802c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008030:	238a      	movs	r3, #138	; 0x8a
 8008032:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008036:	f107 0310 	add.w	r3, r7, #16
 800803a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800803e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008042:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008046:	f107 0308 	add.w	r3, r7, #8
 800804a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800804e:	2307      	movs	r3, #7
 8008050:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008054:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008058:	2100      	movs	r1, #0
 800805a:	4618      	mov	r0, r3
 800805c:	f001 fa14 	bl	8009488 <hci_send_req>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	da01      	bge.n	800806a <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008066:	23ff      	movs	r3, #255	; 0xff
 8008068:	e02e      	b.n	80080c8 <aci_gap_init+0x150>
  if ( resp.Status )
 800806a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <aci_gap_init+0x10c>
    return resp.Status;
 8008078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	e021      	b.n	80080c8 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008088:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800808c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008090:	b29a      	uxth	r2, r3
 8008092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800809e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80080a6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80080b0:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80080b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80080ba:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80080be:	b29a      	uxth	r2, r3
 80080c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80080c4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd90      	pop	{r4, r7, pc}

080080d2 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b088      	sub	sp, #32
 80080d6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080dc:	f107 0308 	add.w	r3, r7, #8
 80080e0:	2218      	movs	r2, #24
 80080e2:	2100      	movs	r1, #0
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 ff22 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80080ea:	233f      	movs	r3, #63	; 0x3f
 80080ec:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80080ee:	2392      	movs	r3, #146	; 0x92
 80080f0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80080f2:	1dfb      	adds	r3, r7, #7
 80080f4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80080f6:	2301      	movs	r3, #1
 80080f8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080fa:	f107 0308 	add.w	r3, r7, #8
 80080fe:	2100      	movs	r1, #0
 8008100:	4618      	mov	r0, r3
 8008102:	f001 f9c1 	bl	8009488 <hci_send_req>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	da01      	bge.n	8008110 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800810c:	23ff      	movs	r3, #255	; 0xff
 800810e:	e000      	b.n	8008112 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8008110:	79fb      	ldrb	r3, [r7, #7]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3720      	adds	r7, #32
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 800811a:	b5b0      	push	{r4, r5, r7, lr}
 800811c:	b0cc      	sub	sp, #304	; 0x130
 800811e:	af00      	add	r7, sp, #0
 8008120:	4605      	mov	r5, r0
 8008122:	460c      	mov	r4, r1
 8008124:	4610      	mov	r0, r2
 8008126:	4619      	mov	r1, r3
 8008128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008130:	462a      	mov	r2, r5
 8008132:	801a      	strh	r2, [r3, #0]
 8008134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008138:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800813c:	4622      	mov	r2, r4
 800813e:	801a      	strh	r2, [r3, #0]
 8008140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008144:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008148:	4602      	mov	r2, r0
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008150:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008154:	460a      	mov	r2, r1
 8008156:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8008158:	f107 0310 	add.w	r3, r7, #16
 800815c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008164:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008168:	2200      	movs	r2, #0
 800816a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800816c:	2300      	movs	r3, #0
 800816e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8008172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008176:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800817a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800817e:	8812      	ldrh	r2, [r2, #0]
 8008180:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008182:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008186:	3302      	adds	r3, #2
 8008188:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 800818c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008190:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008194:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008198:	8812      	ldrh	r2, [r2, #0]
 800819a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800819c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081a0:	3302      	adds	r3, #2
 80081a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80081a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081ae:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80081b2:	7812      	ldrb	r2, [r2, #0]
 80081b4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80081b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081ba:	3301      	adds	r3, #1
 80081bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 80081c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081c8:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80081cc:	7812      	ldrb	r2, [r2, #0]
 80081ce:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80081d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081d4:	3301      	adds	r3, #1
 80081d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081de:	2218      	movs	r2, #24
 80081e0:	2100      	movs	r1, #0
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fea3 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80081e8:	233f      	movs	r3, #63	; 0x3f
 80081ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 80081ee:	2397      	movs	r3, #151	; 0x97
 80081f0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80081f4:	230f      	movs	r3, #15
 80081f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80081fa:	f107 0310 	add.w	r3, r7, #16
 80081fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008202:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008206:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800820a:	f107 030f 	add.w	r3, r7, #15
 800820e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008212:	2301      	movs	r3, #1
 8008214:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008218:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800821c:	2100      	movs	r1, #0
 800821e:	4618      	mov	r0, r3
 8008220:	f001 f932 	bl	8009488 <hci_send_req>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	da01      	bge.n	800822e <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 800822a:	23ff      	movs	r3, #255	; 0xff
 800822c:	e004      	b.n	8008238 <aci_gap_start_general_discovery_proc+0x11e>
  return status;
 800822e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008232:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008236:	781b      	ldrb	r3, [r3, #0]
}
 8008238:	4618      	mov	r0, r3
 800823a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800823e:	46bd      	mov	sp, r7
 8008240:	bdb0      	pop	{r4, r5, r7, pc}

08008242 <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 8008242:	b590      	push	{r4, r7, lr}
 8008244:	b0cf      	sub	sp, #316	; 0x13c
 8008246:	af00      	add	r7, sp, #0
 8008248:	4604      	mov	r4, r0
 800824a:	4608      	mov	r0, r1
 800824c:	4611      	mov	r1, r2
 800824e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008252:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800825c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008260:	4622      	mov	r2, r4
 8008262:	801a      	strh	r2, [r3, #0]
 8008264:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800826c:	4602      	mov	r2, r0
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008274:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008278:	460a      	mov	r2, r1
 800827a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 800827c:	f107 0318 	add.w	r3, r7, #24
 8008280:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008284:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008288:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8008296:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800829a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800829e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80082a2:	8812      	ldrh	r2, [r2, #0]
 80082a4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80082a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082aa:	3302      	adds	r3, #2
 80082ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 80082b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082b4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80082b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80082bc:	8812      	ldrh	r2, [r2, #0]
 80082be:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80082c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082c4:	3302      	adds	r3, #2
 80082c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 80082ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082ce:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80082d2:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80082d6:	7812      	ldrb	r2, [r2, #0]
 80082d8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80082da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082de:	3301      	adds	r3, #1
 80082e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 80082e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082e8:	1d58      	adds	r0, r3, #5
 80082ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80082ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80082f2:	2206      	movs	r2, #6
 80082f4:	6819      	ldr	r1, [r3, #0]
 80082f6:	f000 fe0a 	bl	8008f0e <Osal_MemCpy>
  index_input += 6;
 80082fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082fe:	3306      	adds	r3, #6
 8008300:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 8008304:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008308:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800830c:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800830e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008312:	3301      	adds	r3, #1
 8008314:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008318:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800831c:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8008320:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8008322:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008326:	3302      	adds	r3, #2
 8008328:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800832c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008330:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8008334:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8008336:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800833a:	3302      	adds	r3, #2
 800833c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 8008340:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008344:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8008348:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 800834a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800834e:	3302      	adds	r3, #2
 8008350:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 8008354:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008358:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 800835c:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800835e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008362:	3302      	adds	r3, #2
 8008364:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8008368:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800836c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008370:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8008372:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008376:	3302      	adds	r3, #2
 8008378:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 800837c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008380:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008384:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 8008386:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800838a:	3302      	adds	r3, #2
 800838c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008390:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008394:	2218      	movs	r2, #24
 8008396:	2100      	movs	r1, #0
 8008398:	4618      	mov	r0, r3
 800839a:	f000 fdc8 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 800839e:	233f      	movs	r3, #63	; 0x3f
 80083a0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 80083a4:	239c      	movs	r3, #156	; 0x9c
 80083a6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 80083aa:	230f      	movs	r3, #15
 80083ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 80083b0:	f107 0318 	add.w	r3, r7, #24
 80083b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80083b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 80083c0:	f107 0317 	add.w	r3, r7, #23
 80083c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 80083c8:	2301      	movs	r3, #1
 80083ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80083d2:	2100      	movs	r1, #0
 80083d4:	4618      	mov	r0, r3
 80083d6:	f001 f857 	bl	8009488 <hci_send_req>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	da01      	bge.n	80083e4 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 80083e0:	23ff      	movs	r3, #255	; 0xff
 80083e2:	e004      	b.n	80083ee <aci_gap_create_connection+0x1ac>
  return status;
 80083e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80083e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80083ec:	781b      	ldrb	r3, [r3, #0]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd90      	pop	{r4, r7, pc}

080083f8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	2218      	movs	r2, #24
 8008408:	2100      	movs	r1, #0
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fd8f 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008410:	233f      	movs	r3, #63	; 0x3f
 8008412:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008414:	f240 1301 	movw	r3, #257	; 0x101
 8008418:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800841a:	1dfb      	adds	r3, r7, #7
 800841c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800841e:	2301      	movs	r3, #1
 8008420:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008422:	f107 0308 	add.w	r3, r7, #8
 8008426:	2100      	movs	r1, #0
 8008428:	4618      	mov	r0, r3
 800842a:	f001 f82d 	bl	8009488 <hci_send_req>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	da01      	bge.n	8008438 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008434:	23ff      	movs	r3, #255	; 0xff
 8008436:	e000      	b.n	800843a <aci_gatt_init+0x42>
  return status;
 8008438:	79fb      	ldrb	r3, [r7, #7]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008442:	b5b0      	push	{r4, r5, r7, lr}
 8008444:	b0cc      	sub	sp, #304	; 0x130
 8008446:	af00      	add	r7, sp, #0
 8008448:	4605      	mov	r5, r0
 800844a:	460c      	mov	r4, r1
 800844c:	4610      	mov	r0, r2
 800844e:	4619      	mov	r1, r3
 8008450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008454:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008458:	462a      	mov	r2, r5
 800845a:	801a      	strh	r2, [r3, #0]
 800845c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008460:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008464:	4622      	mov	r2, r4
 8008466:	801a      	strh	r2, [r3, #0]
 8008468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008470:	4602      	mov	r2, r0
 8008472:	701a      	strb	r2, [r3, #0]
 8008474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008478:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800847c:	460a      	mov	r2, r1
 800847e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008480:	f107 0310 	add.w	r3, r7, #16
 8008484:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008490:	2200      	movs	r2, #0
 8008492:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800849a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800849e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084a2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80084a6:	8812      	ldrh	r2, [r2, #0]
 80084a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80084aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084ae:	3302      	adds	r3, #2
 80084b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80084b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80084c0:	8812      	ldrh	r2, [r2, #0]
 80084c2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80084c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084c8:	3302      	adds	r3, #2
 80084ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80084ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084d6:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80084da:	7812      	ldrb	r2, [r2, #0]
 80084dc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80084de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084e2:	3301      	adds	r3, #1
 80084e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80084e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80084f0:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80084f4:	7812      	ldrb	r2, [r2, #0]
 80084f6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80084f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084fc:	3301      	adds	r3, #1
 80084fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008506:	1d98      	adds	r0, r3, #6
 8008508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008518:	f000 fcf9 	bl	8008f0e <Osal_MemCpy>
  index_input += Char_Value_Length;
 800851c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008520:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800852a:	4413      	add	r3, r2
 800852c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008530:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008534:	2218      	movs	r2, #24
 8008536:	2100      	movs	r1, #0
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fcf8 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 800853e:	233f      	movs	r3, #63	; 0x3f
 8008540:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008544:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008548:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800854c:	f107 0310 	add.w	r3, r7, #16
 8008550:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008554:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008558:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800855c:	f107 030f 	add.w	r3, r7, #15
 8008560:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008564:	2301      	movs	r3, #1
 8008566:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800856a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800856e:	2100      	movs	r1, #0
 8008570:	4618      	mov	r0, r3
 8008572:	f000 ff89 	bl	8009488 <hci_send_req>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	da01      	bge.n	8008580 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800857c:	23ff      	movs	r3, #255	; 0xff
 800857e:	e004      	b.n	800858a <aci_gatt_update_char_value+0x148>
  return status;
 8008580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008584:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008588:	781b      	ldrb	r3, [r3, #0]
}
 800858a:	4618      	mov	r0, r3
 800858c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008590:	46bd      	mov	sp, r7
 8008592:	bdb0      	pop	{r4, r5, r7, pc}

08008594 <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b0cc      	sub	sp, #304	; 0x130
 8008598:	af00      	add	r7, sp, #0
 800859a:	4602      	mov	r2, r0
 800859c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80085a4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 80085a6:	f107 0310 	add.w	r3, r7, #16
 80085aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80085ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80085b6:	2200      	movs	r2, #0
 80085b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80085c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80085c8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80085cc:	8812      	ldrh	r2, [r2, #0]
 80085ce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80085d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085d4:	3302      	adds	r3, #2
 80085d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085de:	2218      	movs	r2, #24
 80085e0:	2100      	movs	r1, #0
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fca3 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80085e8:	233f      	movs	r3, #63	; 0x3f
 80085ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 80085ee:	f44f 7389 	mov.w	r3, #274	; 0x112
 80085f2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80085f6:	230f      	movs	r3, #15
 80085f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80085fc:	f107 0310 	add.w	r3, r7, #16
 8008600:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008604:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008608:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800860c:	f107 030f 	add.w	r3, r7, #15
 8008610:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008614:	2301      	movs	r3, #1
 8008616:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800861a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800861e:	2100      	movs	r1, #0
 8008620:	4618      	mov	r0, r3
 8008622:	f000 ff31 	bl	8009488 <hci_send_req>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	da01      	bge.n	8008630 <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 800862c:	23ff      	movs	r3, #255	; 0xff
 800862e:	e004      	b.n	800863a <aci_gatt_disc_all_primary_services+0xa6>
  return status;
 8008630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008634:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008638:	781b      	ldrb	r3, [r3, #0]
}
 800863a:	4618      	mov	r0, r3
 800863c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 8008644:	b590      	push	{r4, r7, lr}
 8008646:	b0cd      	sub	sp, #308	; 0x134
 8008648:	af00      	add	r7, sp, #0
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008654:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008658:	4622      	mov	r2, r4
 800865a:	801a      	strh	r2, [r3, #0]
 800865c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008664:	4602      	mov	r2, r0
 8008666:	801a      	strh	r2, [r3, #0]
 8008668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800866c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008670:	460a      	mov	r2, r1
 8008672:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 8008674:	f107 0310 	add.w	r3, r7, #16
 8008678:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800867c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008680:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008688:	2300      	movs	r3, #0
 800868a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800868e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008692:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008696:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800869a:	8812      	ldrh	r2, [r2, #0]
 800869c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800869e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086a2:	3302      	adds	r3, #2
 80086a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 80086a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086b0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80086b4:	8812      	ldrh	r2, [r2, #0]
 80086b6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80086b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086bc:	3302      	adds	r3, #2
 80086be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80086c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086ca:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80086ce:	8812      	ldrh	r2, [r2, #0]
 80086d0:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80086d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086d6:	3302      	adds	r3, #2
 80086d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086e0:	2218      	movs	r2, #24
 80086e2:	2100      	movs	r1, #0
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 fc22 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80086ea:	233f      	movs	r3, #63	; 0x3f
 80086ec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 80086f0:	f240 1315 	movw	r3, #277	; 0x115
 80086f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80086f8:	230f      	movs	r3, #15
 80086fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80086fe:	f107 0310 	add.w	r3, r7, #16
 8008702:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008706:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800870a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800870e:	f107 030f 	add.w	r3, r7, #15
 8008712:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008716:	2301      	movs	r3, #1
 8008718:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800871c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008720:	2100      	movs	r1, #0
 8008722:	4618      	mov	r0, r3
 8008724:	f000 feb0 	bl	8009488 <hci_send_req>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	da01      	bge.n	8008732 <aci_gatt_disc_all_char_of_service+0xee>
    return BLE_STATUS_TIMEOUT;
 800872e:	23ff      	movs	r3, #255	; 0xff
 8008730:	e004      	b.n	800873c <aci_gatt_disc_all_char_of_service+0xf8>
  return status;
 8008732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008736:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800873a:	781b      	ldrb	r3, [r3, #0]
}
 800873c:	4618      	mov	r0, r3
 800873e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008742:	46bd      	mov	sp, r7
 8008744:	bd90      	pop	{r4, r7, pc}

08008746 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 8008746:	b590      	push	{r4, r7, lr}
 8008748:	b0cd      	sub	sp, #308	; 0x134
 800874a:	af00      	add	r7, sp, #0
 800874c:	4604      	mov	r4, r0
 800874e:	4608      	mov	r0, r1
 8008750:	4611      	mov	r1, r2
 8008752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008756:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800875a:	4622      	mov	r2, r4
 800875c:	801a      	strh	r2, [r3, #0]
 800875e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008766:	4602      	mov	r2, r0
 8008768:	801a      	strh	r2, [r3, #0]
 800876a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800876e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008772:	460a      	mov	r2, r1
 8008774:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 8008776:	f107 0310 	add.w	r3, r7, #16
 800877a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800877e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008782:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008786:	2200      	movs	r2, #0
 8008788:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008794:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008798:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800879c:	8812      	ldrh	r2, [r2, #0]
 800879e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80087a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087a4:	3302      	adds	r3, #2
 80087a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80087aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087b2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80087b6:	8812      	ldrh	r2, [r2, #0]
 80087b8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80087ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087be:	3302      	adds	r3, #2
 80087c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80087c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087cc:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80087d0:	8812      	ldrh	r2, [r2, #0]
 80087d2:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80087d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087d8:	3302      	adds	r3, #2
 80087da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087e2:	2218      	movs	r2, #24
 80087e4:	2100      	movs	r1, #0
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fba1 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 80087ec:	233f      	movs	r3, #63	; 0x3f
 80087ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 80087f2:	f240 1317 	movw	r3, #279	; 0x117
 80087f6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80087fa:	230f      	movs	r3, #15
 80087fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008800:	f107 0310 	add.w	r3, r7, #16
 8008804:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800880c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008810:	f107 030f 	add.w	r3, r7, #15
 8008814:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008818:	2301      	movs	r3, #1
 800881a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800881e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008822:	2100      	movs	r1, #0
 8008824:	4618      	mov	r0, r3
 8008826:	f000 fe2f 	bl	8009488 <hci_send_req>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	da01      	bge.n	8008834 <aci_gatt_disc_all_char_desc+0xee>
    return BLE_STATUS_TIMEOUT;
 8008830:	23ff      	movs	r3, #255	; 0xff
 8008832:	e004      	b.n	800883e <aci_gatt_disc_all_char_desc+0xf8>
  return status;
 8008834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008838:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800883c:	781b      	ldrb	r3, [r3, #0]
}
 800883e:	4618      	mov	r0, r3
 8008840:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008844:	46bd      	mov	sp, r7
 8008846:	bd90      	pop	{r4, r7, pc}

08008848 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 8008848:	b590      	push	{r4, r7, lr}
 800884a:	b0cf      	sub	sp, #316	; 0x13c
 800884c:	af00      	add	r7, sp, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	4611      	mov	r1, r2
 8008854:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008858:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008862:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008866:	4622      	mov	r2, r4
 8008868:	801a      	strh	r2, [r3, #0]
 800886a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800886e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008872:	4602      	mov	r2, r0
 8008874:	801a      	strh	r2, [r3, #0]
 8008876:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800887a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800887e:	460a      	mov	r2, r1
 8008880:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 8008882:	f107 0318 	add.w	r3, r7, #24
 8008886:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800888a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800888e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008892:	2200      	movs	r2, #0
 8008894:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800889c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088a0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80088a4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80088a8:	8812      	ldrh	r2, [r2, #0]
 80088aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80088ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80088b0:	3302      	adds	r3, #2
 80088b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 80088b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088ba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80088be:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80088c2:	8812      	ldrh	r2, [r2, #0]
 80088c4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80088c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80088ca:	3302      	adds	r3, #2
 80088cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 80088d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088d4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80088d8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80088dc:	7812      	ldrb	r2, [r2, #0]
 80088de:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80088e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80088e4:	3301      	adds	r3, #1
 80088e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80088ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088ee:	1d58      	adds	r0, r3, #5
 80088f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088f4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80088f8:	781a      	ldrb	r2, [r3, #0]
 80088fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008902:	6819      	ldr	r1, [r3, #0]
 8008904:	f000 fb03 	bl	8008f0e <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8008908:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800890c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008916:	4413      	add	r3, r2
 8008918:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800891c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008920:	2218      	movs	r2, #24
 8008922:	2100      	movs	r1, #0
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fb02 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 800892a:	233f      	movs	r3, #63	; 0x3f
 800892c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 8008930:	f240 1321 	movw	r3, #289	; 0x121
 8008934:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8008938:	230f      	movs	r3, #15
 800893a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800893e:	f107 0318 	add.w	r3, r7, #24
 8008942:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008946:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800894a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800894e:	f107 0317 	add.w	r3, r7, #23
 8008952:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008956:	2301      	movs	r3, #1
 8008958:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800895c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008960:	2100      	movs	r1, #0
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fd90 	bl	8009488 <hci_send_req>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	da01      	bge.n	8008972 <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 800896e:	23ff      	movs	r3, #255	; 0xff
 8008970:	e004      	b.n	800897c <aci_gatt_write_char_desc+0x134>
  return status;
 8008972:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008976:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800897a:	781b      	ldrb	r3, [r3, #0]
}
 800897c:	4618      	mov	r0, r3
 800897e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008982:	46bd      	mov	sp, r7
 8008984:	bd90      	pop	{r4, r7, pc}

08008986 <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 8008986:	b590      	push	{r4, r7, lr}
 8008988:	b0cf      	sub	sp, #316	; 0x13c
 800898a:	af00      	add	r7, sp, #0
 800898c:	4604      	mov	r4, r0
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008996:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800899a:	6013      	str	r3, [r2, #0]
 800899c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80089a0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80089a4:	4622      	mov	r2, r4
 80089a6:	801a      	strh	r2, [r3, #0]
 80089a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80089ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089b0:	4602      	mov	r2, r0
 80089b2:	801a      	strh	r2, [r3, #0]
 80089b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80089b8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80089bc:	460a      	mov	r2, r1
 80089be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 80089c0:	f107 0318 	add.w	r3, r7, #24
 80089c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80089c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80089cc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80089d0:	2200      	movs	r2, #0
 80089d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 80089da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089de:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80089e2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80089e6:	8812      	ldrh	r2, [r2, #0]
 80089e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80089ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80089ee:	3302      	adds	r3, #2
 80089f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 80089f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089f8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80089fc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008a00:	8812      	ldrh	r2, [r2, #0]
 8008a02:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008a04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a08:	3302      	adds	r3, #2
 8008a0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8008a0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a12:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008a16:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008a1a:	7812      	ldrb	r2, [r2, #0]
 8008a1c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008a1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a22:	3301      	adds	r3, #1
 8008a24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8008a28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a2c:	1d58      	adds	r0, r3, #5
 8008a2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a32:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a3c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008a40:	6819      	ldr	r1, [r3, #0]
 8008a42:	f000 fa64 	bl	8008f0e <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8008a46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a4a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008a54:	4413      	add	r3, r2
 8008a56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a5e:	2218      	movs	r2, #24
 8008a60:	2100      	movs	r1, #0
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fa63 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a68:	233f      	movs	r3, #63	; 0x3f
 8008a6a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 8008a6e:	f240 1323 	movw	r3, #291	; 0x123
 8008a72:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008a76:	f107 0318 	add.w	r3, r7, #24
 8008a7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008a7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8008a86:	f107 0317 	add.w	r3, r7, #23
 8008a8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008a98:	2100      	movs	r1, #0
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fcf4 	bl	8009488 <hci_send_req>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	da01      	bge.n	8008aaa <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 8008aa6:	23ff      	movs	r3, #255	; 0xff
 8008aa8:	e004      	b.n	8008ab4 <aci_gatt_write_without_resp+0x12e>
  return status;
 8008aaa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008aae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ab2:	781b      	ldrb	r3, [r3, #0]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd90      	pop	{r4, r7, pc}

08008abe <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b0cc      	sub	sp, #304	; 0x130
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	701a      	strb	r2, [r3, #0]
 8008ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ade:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008ae2:	460a      	mov	r2, r1
 8008ae4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008ae6:	f107 0310 	add.w	r3, r7, #16
 8008aea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008af6:	2200      	movs	r2, #0
 8008af8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008afa:	2300      	movs	r3, #0
 8008afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b08:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008b0c:	7812      	ldrb	r2, [r2, #0]
 8008b0e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b14:	3301      	adds	r3, #1
 8008b16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b22:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008b26:	7812      	ldrb	r2, [r2, #0]
 8008b28:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b2e:	3301      	adds	r3, #1
 8008b30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b38:	1c98      	adds	r0, r3, #2
 8008b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	f000 f9de 	bl	8008f0e <Osal_MemCpy>
  index_input += Length;
 8008b52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b56:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008b60:	4413      	add	r3, r2
 8008b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b6a:	2218      	movs	r2, #24
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f9dd 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b74:	233f      	movs	r3, #63	; 0x3f
 8008b76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b80:	f107 0310 	add.w	r3, r7, #16
 8008b84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b90:	f107 030f 	add.w	r3, r7, #15
 8008b94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 fc6f 	bl	8009488 <hci_send_req>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	da01      	bge.n	8008bb4 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008bb0:	23ff      	movs	r3, #255	; 0xff
 8008bb2:	e004      	b.n	8008bbe <aci_hal_write_config_data+0x100>
  return status;
 8008bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008bbc:	781b      	ldrb	r3, [r3, #0]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b0cc      	sub	sp, #304	; 0x130
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4602      	mov	r2, r0
 8008bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bd4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008bd8:	701a      	strb	r2, [r3, #0]
 8008bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bde:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008be2:	460a      	mov	r2, r1
 8008be4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008be6:	f107 0310 	add.w	r3, r7, #16
 8008bea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c08:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008c0c:	7812      	ldrb	r2, [r2, #0]
 8008c0e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c14:	3301      	adds	r3, #1
 8008c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c22:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008c26:	7812      	ldrb	r2, [r2, #0]
 8008c28:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c2e:	3301      	adds	r3, #1
 8008c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c38:	2218      	movs	r2, #24
 8008c3a:	2100      	movs	r1, #0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f000 f976 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c42:	233f      	movs	r3, #63	; 0x3f
 8008c44:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008c48:	230f      	movs	r3, #15
 8008c4a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c4e:	f107 0310 	add.w	r3, r7, #16
 8008c52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c5e:	f107 030f 	add.w	r3, r7, #15
 8008c62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c66:	2301      	movs	r3, #1
 8008c68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c70:	2100      	movs	r1, #0
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 fc08 	bl	8009488 <hci_send_req>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	da01      	bge.n	8008c82 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008c7e:	23ff      	movs	r3, #255	; 0xff
 8008c80:	e004      	b.n	8008c8c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c86:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c8a:	781b      	ldrb	r3, [r3, #0]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b0cc      	sub	sp, #304	; 0x130
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008ca6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008ca8:	f107 0310 	add.w	r3, r7, #16
 8008cac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008cb8:	2200      	movs	r2, #0
 8008cba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cc6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cca:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008cce:	8812      	ldrh	r2, [r2, #0]
 8008cd0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008cd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cd6:	3302      	adds	r3, #2
 8008cd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ce0:	2218      	movs	r2, #24
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 f922 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cea:	233f      	movs	r3, #63	; 0x3f
 8008cec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008cf0:	2318      	movs	r3, #24
 8008cf2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008cf6:	f107 0310 	add.w	r3, r7, #16
 8008cfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008cfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d06:	f107 030f 	add.w	r3, r7, #15
 8008d0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fbb4 	bl	8009488 <hci_send_req>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	da01      	bge.n	8008d2a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8008d26:	23ff      	movs	r3, #255	; 0xff
 8008d28:	e004      	b.n	8008d34 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8008d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d2e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d32:	781b      	ldrb	r3, [r3, #0]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b088      	sub	sp, #32
 8008d42:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008d44:	2300      	movs	r3, #0
 8008d46:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d48:	f107 0308 	add.w	r3, r7, #8
 8008d4c:	2218      	movs	r2, #24
 8008d4e:	2100      	movs	r1, #0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 f8ec 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x03;
 8008d56:	2303      	movs	r3, #3
 8008d58:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008d5e:	1dfb      	adds	r3, r7, #7
 8008d60:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008d62:	2301      	movs	r3, #1
 8008d64:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d66:	f107 0308 	add.w	r3, r7, #8
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 fb8b 	bl	8009488 <hci_send_req>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	da01      	bge.n	8008d7c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008d78:	23ff      	movs	r3, #255	; 0xff
 8008d7a:	e000      	b.n	8008d7e <hci_reset+0x40>
  return status;
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3720      	adds	r7, #32
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 8008d86:	b5b0      	push	{r4, r5, r7, lr}
 8008d88:	b0cc      	sub	sp, #304	; 0x130
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	4610      	mov	r0, r2
 8008d92:	4619      	mov	r1, r3
 8008d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d98:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	801a      	strh	r2, [r3, #0]
 8008da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008da8:	4622      	mov	r2, r4
 8008daa:	801a      	strh	r2, [r3, #0]
 8008dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008db4:	4602      	mov	r2, r0
 8008db6:	801a      	strh	r2, [r3, #0]
 8008db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dc0:	460a      	mov	r2, r1
 8008dc2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 8008dc4:	f107 0310 	add.w	r3, r7, #16
 8008dc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008de6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008dea:	8812      	ldrh	r2, [r2, #0]
 8008dec:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008df2:	3302      	adds	r3, #2
 8008df4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e00:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008e04:	8812      	ldrh	r2, [r2, #0]
 8008e06:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008e08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e0c:	3302      	adds	r3, #2
 8008e0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8008e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e1a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008e1e:	8812      	ldrh	r2, [r2, #0]
 8008e20:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008e22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e26:	3302      	adds	r3, #2
 8008e28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 8008e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e34:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008e38:	8812      	ldrh	r2, [r2, #0]
 8008e3a:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8008e3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e40:	3302      	adds	r3, #2
 8008e42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8008e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e4a:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008e4e:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8008e50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e54:	3302      	adds	r3, #2
 8008e56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8008e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e5e:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8008e62:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 8008e64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e68:	3302      	adds	r3, #2
 8008e6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8008e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e72:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 8008e76:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8008e78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e7c:	3302      	adds	r3, #2
 8008e7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 8008e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e86:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008e8a:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 8008e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e90:	3301      	adds	r3, #1
 8008e92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 8008e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e9a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008e9e:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 8008ea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008eaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008eae:	2218      	movs	r2, #24
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 f83b 	bl	8008f2e <Osal_MemSet>
  rq.ogf = 0x3f;
 8008eb8:	233f      	movs	r3, #63	; 0x3f
 8008eba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 8008ebe:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8008ec2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ec6:	f107 0310 	add.w	r3, r7, #16
 8008eca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ed2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ed6:	f107 030f 	add.w	r3, r7, #15
 8008eda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ee4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 facc 	bl	8009488 <hci_send_req>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	da01      	bge.n	8008efa <aci_l2cap_connection_parameter_update_resp+0x174>
    return BLE_STATUS_TIMEOUT;
 8008ef6:	23ff      	movs	r3, #255	; 0xff
 8008ef8:	e004      	b.n	8008f04 <aci_l2cap_connection_parameter_update_resp+0x17e>
  return status;
 8008efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008efe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f02:	781b      	ldrb	r3, [r3, #0]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bdb0      	pop	{r4, r5, r7, pc}

08008f0e <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	60f8      	str	r0, [r7, #12]
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f003 fe7b 	bl	800cc1a <memcpy>
 8008f24:	4603      	mov	r3, r0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	60f8      	str	r0, [r7, #12]
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f003 fdf6 	bl	800cb30 <memset>
 8008f44:	4603      	mov	r3, r0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008f4e:	b480      	push	{r7}
 8008f50:	af00      	add	r7, sp, #0
  return;
 8008f52:	bf00      	nop
}
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
  return;
 8008f60:	bf00      	nop
}
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	af00      	add	r7, sp, #0
  return;
 8008f6e:	bf00      	nop
}
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	af00      	add	r7, sp, #0
  return;
 8008f7c:	bf00      	nop
}
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008f86:	b480      	push	{r7}
 8008f88:	af00      	add	r7, sp, #0
  return;
 8008f8a:	bf00      	nop
}
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8008f94:	b480      	push	{r7}
 8008f96:	af00      	add	r7, sp, #0
  return;
 8008f98:	bf00      	nop
}
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	af00      	add	r7, sp, #0
  return;
 8008fa6:	bf00      	nop
}
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	af00      	add	r7, sp, #0
  return;
 8008fb4:	bf00      	nop
}
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	af00      	add	r7, sp, #0
  return;
 8008fc2:	bf00      	nop
}
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
  return;
 8008fd0:	bf00      	nop
}
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8008fda:	b480      	push	{r7}
 8008fdc:	af00      	add	r7, sp, #0
  return;
 8008fde:	bf00      	nop
}
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	af00      	add	r7, sp, #0
  return;
 8008fec:	bf00      	nop
}
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	af00      	add	r7, sp, #0
  return;
 8008ffa:	bf00      	nop
}
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009004:	b480      	push	{r7}
 8009006:	af00      	add	r7, sp, #0
  return;
 8009008:	bf00      	nop
}
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009012:	b480      	push	{r7}
 8009014:	af00      	add	r7, sp, #0
  return;
 8009016:	bf00      	nop
}
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009020:	b480      	push	{r7}
 8009022:	af00      	add	r7, sp, #0
  return;
 8009024:	bf00      	nop
}
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800902e:	b480      	push	{r7}
 8009030:	af00      	add	r7, sp, #0
  return;
 8009032:	bf00      	nop
}
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
  return;
 8009040:	bf00      	nop
}
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
	...

0800904c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009050:	4b04      	ldr	r3, [pc, #16]	; (8009064 <SVCCTL_Init+0x18>)
 8009052:	2200      	movs	r2, #0
 8009054:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009056:	4b04      	ldr	r3, [pc, #16]	; (8009068 <SVCCTL_Init+0x1c>)
 8009058:	2200      	movs	r2, #0
 800905a:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800905c:	f000 f806 	bl	800906c <SVCCTL_SvcInit>

  return;
 8009060:	bf00      	nop
}
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20000090 	.word	0x20000090
 8009068:	200000b0 	.word	0x200000b0

0800906c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	af00      	add	r7, sp, #0
  BAS_Init();
 8009070:	f7ff ff6d 	bl	8008f4e <BAS_Init>

  BLS_Init();
 8009074:	f7ff ff72 	bl	8008f5c <BLS_Init>

  CRS_STM_Init();
 8009078:	f7ff ff77 	bl	8008f6a <CRS_STM_Init>

  DIS_Init();
 800907c:	f7ff ff7c 	bl	8008f78 <DIS_Init>

  EDS_STM_Init();
 8009080:	f7ff ff81 	bl	8008f86 <EDS_STM_Init>

  HIDS_Init();
 8009084:	f7ff ff86 	bl	8008f94 <HIDS_Init>

  HRS_Init();
 8009088:	f7ff ff8b 	bl	8008fa2 <HRS_Init>

  HTS_Init();
 800908c:	f7ff ff90 	bl	8008fb0 <HTS_Init>

  IAS_Init();
 8009090:	f7ff ff95 	bl	8008fbe <IAS_Init>

  LLS_Init();
 8009094:	f7ff ff9a 	bl	8008fcc <LLS_Init>

  TPS_Init();
 8009098:	f7ff ff9f 	bl	8008fda <TPS_Init>

  MOTENV_STM_Init();
 800909c:	f7ff ffa4 	bl	8008fe8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80090a0:	f7ff ffa9 	bl	8008ff6 <P2PS_STM_Init>

  ZDD_STM_Init();
 80090a4:	f7ff ffae 	bl	8009004 <ZDD_STM_Init>

  OTAS_STM_Init();
 80090a8:	f7ff ffb3 	bl	8009012 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80090ac:	f7ff ffbf 	bl	800902e <BVOPUS_STM_Init>

  MESH_Init();
 80090b0:	f7ff ffb6 	bl	8009020 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80090b4:	f7ff ffc2 	bl	800903c <SVCCTL_InitCustomSvc>
  
  return;
 80090b8:	bf00      	nop
}
 80090ba:	bd80      	pop	{r7, pc}

080090bc <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 80090c4:	4b09      	ldr	r3, [pc, #36]	; (80090ec <SVCCTL_RegisterCltHandler+0x30>)
 80090c6:	791b      	ldrb	r3, [r3, #4]
 80090c8:	4619      	mov	r1, r3
 80090ca:	4a08      	ldr	r2, [pc, #32]	; (80090ec <SVCCTL_RegisterCltHandler+0x30>)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 80090d2:	4b06      	ldr	r3, [pc, #24]	; (80090ec <SVCCTL_RegisterCltHandler+0x30>)
 80090d4:	791b      	ldrb	r3, [r3, #4]
 80090d6:	3301      	adds	r3, #1
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	4b04      	ldr	r3, [pc, #16]	; (80090ec <SVCCTL_RegisterCltHandler+0x30>)
 80090dc:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 80090de:	bf00      	nop
}
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	200000b0 	.word	0x200000b0

080090f0 <SVCCTL_UserEvtRx>:

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	3301      	adds	r3, #1
 80090fc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80090fe:	2300      	movs	r3, #0
 8009100:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2bff      	cmp	r3, #255	; 0xff
 8009108:	d13f      	bne.n	800918a <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	3302      	adds	r3, #2
 800910e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	b29b      	uxth	r3, r3
 8009116:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800911a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800911e:	d132      	bne.n	8009186 <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009120:	2300      	movs	r3, #0
 8009122:	757b      	strb	r3, [r7, #21]
 8009124:	e00d      	b.n	8009142 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009126:	7d7b      	ldrb	r3, [r7, #21]
 8009128:	4a27      	ldr	r2, [pc, #156]	; (80091c8 <SVCCTL_UserEvtRx+0xd8>)
 800912a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	4798      	blx	r3
 8009132:	4603      	mov	r3, r0
 8009134:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009136:	7dfb      	ldrb	r3, [r7, #23]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d108      	bne.n	800914e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800913c:	7d7b      	ldrb	r3, [r7, #21]
 800913e:	3301      	adds	r3, #1
 8009140:	757b      	strb	r3, [r7, #21]
 8009142:	4b21      	ldr	r3, [pc, #132]	; (80091c8 <SVCCTL_UserEvtRx+0xd8>)
 8009144:	7f1b      	ldrb	r3, [r3, #28]
 8009146:	7d7a      	ldrb	r2, [r7, #21]
 8009148:	429a      	cmp	r2, r3
 800914a:	d3ec      	bcc.n	8009126 <SVCCTL_UserEvtRx+0x36>
 800914c:	e000      	b.n	8009150 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800914e:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 8009150:	2300      	movs	r3, #0
 8009152:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8009154:	2300      	movs	r3, #0
 8009156:	757b      	strb	r3, [r7, #21]
 8009158:	e00d      	b.n	8009176 <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800915a:	7d7b      	ldrb	r3, [r7, #21]
 800915c:	4a1b      	ldr	r2, [pc, #108]	; (80091cc <SVCCTL_UserEvtRx+0xdc>)
 800915e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	4798      	blx	r3
 8009166:	4603      	mov	r3, r0
 8009168:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d108      	bne.n	8009182 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8009170:	7d7b      	ldrb	r3, [r7, #21]
 8009172:	3301      	adds	r3, #1
 8009174:	757b      	strb	r3, [r7, #21]
 8009176:	4b15      	ldr	r3, [pc, #84]	; (80091cc <SVCCTL_UserEvtRx+0xdc>)
 8009178:	791b      	ldrb	r3, [r3, #4]
 800917a:	7d7a      	ldrb	r2, [r7, #21]
 800917c:	429a      	cmp	r2, r3
 800917e:	d3ec      	bcc.n	800915a <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 8009180:	e002      	b.n	8009188 <SVCCTL_UserEvtRx+0x98>
              break;
 8009182:	bf00      	nop
          break;
 8009184:	e000      	b.n	8009188 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 8009186:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009188:	e000      	b.n	800918c <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800918a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d00f      	beq.n	80091b2 <SVCCTL_UserEvtRx+0xc2>
 8009192:	2b02      	cmp	r3, #2
 8009194:	dc10      	bgt.n	80091b8 <SVCCTL_UserEvtRx+0xc8>
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <SVCCTL_UserEvtRx+0xb0>
 800919a:	2b01      	cmp	r3, #1
 800919c:	d006      	beq.n	80091ac <SVCCTL_UserEvtRx+0xbc>
 800919e:	e00b      	b.n	80091b8 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 fc65 	bl	800aa70 <SVCCTL_App_Notification>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75bb      	strb	r3, [r7, #22]
      break;
 80091aa:	e008      	b.n	80091be <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80091ac:	2301      	movs	r3, #1
 80091ae:	75bb      	strb	r3, [r7, #22]
      break;
 80091b0:	e005      	b.n	80091be <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80091b2:	2300      	movs	r3, #0
 80091b4:	75bb      	strb	r3, [r7, #22]
      break;
 80091b6:	e002      	b.n	80091be <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80091b8:	2301      	movs	r3, #1
 80091ba:	75bb      	strb	r3, [r7, #22]
      break;
 80091bc:	bf00      	nop
  }

  return (return_status);
 80091be:	7dbb      	ldrb	r3, [r7, #22]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20000090 	.word	0x20000090
 80091cc:	200000b0 	.word	0x200000b0

080091d0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b088      	sub	sp, #32
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80091d8:	f107 030c 	add.w	r3, r7, #12
 80091dc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	212e      	movs	r1, #46	; 0x2e
 80091e8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80091ec:	f000 fae8 	bl	80097c0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	330b      	adds	r3, #11
 80091f4:	78db      	ldrb	r3, [r3, #3]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3720      	adds	r7, #32
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b088      	sub	sp, #32
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009206:	f107 030c 	add.w	r3, r7, #12
 800920a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	210f      	movs	r1, #15
 8009216:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800921a:	f000 fad1 	bl	80097c0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	330b      	adds	r3, #11
 8009222:	78db      	ldrb	r3, [r3, #3]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3720      	adds	r7, #32
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009234:	f107 030c 	add.w	r3, r7, #12
 8009238:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	2110      	movs	r1, #16
 8009240:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009244:	f000 fabc 	bl	80097c0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	330b      	adds	r3, #11
 800924c:	78db      	ldrb	r3, [r3, #3]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3720      	adds	r7, #32
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009258:	b480      	push	{r7}
 800925a:	b08b      	sub	sp, #44	; 0x2c
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009268:	2300      	movs	r3, #0
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009274:	2300      	movs	r3, #0
 8009276:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009280:	4b4a      	ldr	r3, [pc, #296]	; (80093ac <SHCI_GetWirelessFwInfo+0x154>)
 8009282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009284:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009288:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009292:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a44      	ldr	r2, [pc, #272]	; (80093b0 <SHCI_GetWirelessFwInfo+0x158>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d10f      	bne.n	80092c4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	69db      	ldr	r3, [r3, #28]
 80092b4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	617b      	str	r3, [r7, #20]
 80092c2:	e01a      	b.n	80092fa <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80092cc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80092d0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	0e1b      	lsrs	r3, r3, #24
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	0c1b      	lsrs	r3, r3, #16
 8009308:	b2da      	uxtb	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009310:	0a1b      	lsrs	r3, r3, #8
 8009312:	b2da      	uxtb	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	091b      	lsrs	r3, r3, #4
 800931c:	b2db      	uxtb	r3, r3
 800931e:	f003 030f 	and.w	r3, r3, #15
 8009322:	b2da      	uxtb	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932a:	b2db      	uxtb	r3, r3
 800932c:	f003 030f 	and.w	r3, r3, #15
 8009330:	b2da      	uxtb	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	0e1b      	lsrs	r3, r3, #24
 800933a:	b2da      	uxtb	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	0c1b      	lsrs	r3, r3, #16
 8009344:	b2da      	uxtb	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	0a1b      	lsrs	r3, r3, #8
 800934e:	b2da      	uxtb	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009354:	6a3b      	ldr	r3, [r7, #32]
 8009356:	b2da      	uxtb	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	b2da      	uxtb	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	0e1b      	lsrs	r3, r3, #24
 8009368:	b2da      	uxtb	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	0c1b      	lsrs	r3, r3, #16
 8009372:	b2da      	uxtb	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	0a1b      	lsrs	r3, r3, #8
 800937c:	b2da      	uxtb	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	0e1b      	lsrs	r3, r3, #24
 8009386:	b2da      	uxtb	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	0c1b      	lsrs	r3, r3, #16
 8009390:	b2da      	uxtb	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	b2da      	uxtb	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	372c      	adds	r7, #44	; 0x2c
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	58004000 	.word	0x58004000
 80093b0:	a94656b9 	.word	0xa94656b9

080093b4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	4a08      	ldr	r2, [pc, #32]	; (80093e4 <hci_init+0x30>)
 80093c4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80093c6:	4a08      	ldr	r2, [pc, #32]	; (80093e8 <hci_init+0x34>)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80093cc:	4806      	ldr	r0, [pc, #24]	; (80093e8 <hci_init+0x34>)
 80093ce:	f000 f979 	bl	80096c4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 f8da 	bl	8009590 <TlInit>

  return;
 80093dc:	bf00      	nop
}
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	2000052c 	.word	0x2000052c
 80093e8:	20000504 	.word	0x20000504

080093ec <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80093f2:	4822      	ldr	r0, [pc, #136]	; (800947c <hci_user_evt_proc+0x90>)
 80093f4:	f000 fde8 	bl	8009fc8 <LST_is_empty>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d12b      	bne.n	8009456 <hci_user_evt_proc+0x6a>
 80093fe:	4b20      	ldr	r3, [pc, #128]	; (8009480 <hci_user_evt_proc+0x94>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d027      	beq.n	8009456 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009406:	f107 030c 	add.w	r3, r7, #12
 800940a:	4619      	mov	r1, r3
 800940c:	481b      	ldr	r0, [pc, #108]	; (800947c <hci_user_evt_proc+0x90>)
 800940e:	f000 fe6a 	bl	800a0e6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009412:	4b1c      	ldr	r3, [pc, #112]	; (8009484 <hci_user_evt_proc+0x98>)
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00c      	beq.n	8009434 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800941e:	2301      	movs	r3, #1
 8009420:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009422:	4b18      	ldr	r3, [pc, #96]	; (8009484 <hci_user_evt_proc+0x98>)
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	1d3a      	adds	r2, r7, #4
 8009428:	4610      	mov	r0, r2
 800942a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800942c:	793a      	ldrb	r2, [r7, #4]
 800942e:	4b14      	ldr	r3, [pc, #80]	; (8009480 <hci_user_evt_proc+0x94>)
 8009430:	701a      	strb	r2, [r3, #0]
 8009432:	e002      	b.n	800943a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009434:	4b12      	ldr	r3, [pc, #72]	; (8009480 <hci_user_evt_proc+0x94>)
 8009436:	2201      	movs	r2, #1
 8009438:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800943a:	4b11      	ldr	r3, [pc, #68]	; (8009480 <hci_user_evt_proc+0x94>)
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d004      	beq.n	800944c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	4618      	mov	r0, r3
 8009446:	f000 fc0d 	bl	8009c64 <TL_MM_EvtDone>
 800944a:	e004      	b.n	8009456 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4619      	mov	r1, r3
 8009450:	480a      	ldr	r0, [pc, #40]	; (800947c <hci_user_evt_proc+0x90>)
 8009452:	f000 fddb 	bl	800a00c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009456:	4809      	ldr	r0, [pc, #36]	; (800947c <hci_user_evt_proc+0x90>)
 8009458:	f000 fdb6 	bl	8009fc8 <LST_is_empty>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d107      	bne.n	8009472 <hci_user_evt_proc+0x86>
 8009462:	4b07      	ldr	r3, [pc, #28]	; (8009480 <hci_user_evt_proc+0x94>)
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d003      	beq.n	8009472 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800946a:	4804      	ldr	r0, [pc, #16]	; (800947c <hci_user_evt_proc+0x90>)
 800946c:	f001 ff68 	bl	800b340 <hci_notify_asynch_evt>
  }


  return;
 8009470:	bf00      	nop
 8009472:	bf00      	nop
}
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	200000bc 	.word	0x200000bc
 8009480:	200000c8 	.word	0x200000c8
 8009484:	20000504 	.word	0x20000504

08009488 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009494:	2000      	movs	r0, #0
 8009496:	f000 f8d1 	bl	800963c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800949a:	2300      	movs	r3, #0
 800949c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	b21b      	sxth	r3, r3
 80094a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094a8:	b21a      	sxth	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	029b      	lsls	r3, r3, #10
 80094b0:	b21b      	sxth	r3, r3
 80094b2:	4313      	orrs	r3, r2
 80094b4:	b21b      	sxth	r3, r3
 80094b6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80094b8:	4b33      	ldr	r3, [pc, #204]	; (8009588 <hci_send_req+0x100>)
 80094ba:	2201      	movs	r2, #1
 80094bc:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	b2d9      	uxtb	r1, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	8bbb      	ldrh	r3, [r7, #28]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 f890 	bl	80095f0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80094d0:	e04e      	b.n	8009570 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80094d2:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80094d6:	f001 ff4a 	bl	800b36e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80094da:	e043      	b.n	8009564 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80094dc:	f107 030c 	add.w	r3, r7, #12
 80094e0:	4619      	mov	r1, r3
 80094e2:	482a      	ldr	r0, [pc, #168]	; (800958c <hci_send_req+0x104>)
 80094e4:	f000 fdff 	bl	800a0e6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	7a5b      	ldrb	r3, [r3, #9]
 80094ec:	2b0f      	cmp	r3, #15
 80094ee:	d114      	bne.n	800951a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	330b      	adds	r3, #11
 80094f4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	885b      	ldrh	r3, [r3, #2]
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	8bba      	ldrh	r2, [r7, #28]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d104      	bne.n	800950c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	7812      	ldrb	r2, [r2, #0]
 800950a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	785b      	ldrb	r3, [r3, #1]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d027      	beq.n	8009564 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009514:	2301      	movs	r3, #1
 8009516:	77fb      	strb	r3, [r7, #31]
 8009518:	e024      	b.n	8009564 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	330b      	adds	r3, #11
 800951e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009526:	b29b      	uxth	r3, r3
 8009528:	8bba      	ldrh	r2, [r7, #28]
 800952a:	429a      	cmp	r2, r3
 800952c:	d114      	bne.n	8009558 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	7a9b      	ldrb	r3, [r3, #10]
 8009532:	3b03      	subs	r3, #3
 8009534:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695a      	ldr	r2, [r3, #20]
 800953a:	7dfb      	ldrb	r3, [r7, #23]
 800953c:	429a      	cmp	r2, r3
 800953e:	bfa8      	it	ge
 8009540:	461a      	movge	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6918      	ldr	r0, [r3, #16]
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	1cd9      	adds	r1, r3, #3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	461a      	mov	r2, r3
 8009554:	f003 fb61 	bl	800cc1a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009560:	2301      	movs	r3, #1
 8009562:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009564:	4809      	ldr	r0, [pc, #36]	; (800958c <hci_send_req+0x104>)
 8009566:	f000 fd2f 	bl	8009fc8 <LST_is_empty>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d0b5      	beq.n	80094dc <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009570:	7ffb      	ldrb	r3, [r7, #31]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0ad      	beq.n	80094d2 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009576:	2001      	movs	r0, #1
 8009578:	f000 f860 	bl	800963c <NotifyCmdStatus>

  return 0;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3720      	adds	r7, #32
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000530 	.word	0x20000530
 800958c:	20000524 	.word	0x20000524

08009590 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b086      	sub	sp, #24
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009598:	480f      	ldr	r0, [pc, #60]	; (80095d8 <TlInit+0x48>)
 800959a:	f000 fd05 	bl	8009fa8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800959e:	4a0f      	ldr	r2, [pc, #60]	; (80095dc <TlInit+0x4c>)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80095a4:	480e      	ldr	r0, [pc, #56]	; (80095e0 <TlInit+0x50>)
 80095a6:	f000 fcff 	bl	8009fa8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80095aa:	4b0e      	ldr	r3, [pc, #56]	; (80095e4 <TlInit+0x54>)
 80095ac:	2201      	movs	r2, #1
 80095ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80095b0:	4b0d      	ldr	r3, [pc, #52]	; (80095e8 <TlInit+0x58>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00a      	beq.n	80095ce <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80095bc:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <TlInit+0x5c>)
 80095be:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80095c0:	4b09      	ldr	r3, [pc, #36]	; (80095e8 <TlInit+0x58>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f107 0208 	add.w	r2, r7, #8
 80095c8:	4610      	mov	r0, r2
 80095ca:	4798      	blx	r3
  }

  return;
 80095cc:	bf00      	nop
 80095ce:	bf00      	nop
}
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20000524 	.word	0x20000524
 80095dc:	200000c4 	.word	0x200000c4
 80095e0:	200000bc 	.word	0x200000bc
 80095e4:	200000c8 	.word	0x200000c8
 80095e8:	20000504 	.word	0x20000504
 80095ec:	0800967d 	.word	0x0800967d

080095f0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	603a      	str	r2, [r7, #0]
 80095fa:	80fb      	strh	r3, [r7, #6]
 80095fc:	460b      	mov	r3, r1
 80095fe:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009600:	4b0c      	ldr	r3, [pc, #48]	; (8009634 <SendCmd+0x44>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	88fa      	ldrh	r2, [r7, #6]
 8009606:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800960a:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <SendCmd+0x44>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	797a      	ldrb	r2, [r7, #5]
 8009610:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009612:	4b08      	ldr	r3, [pc, #32]	; (8009634 <SendCmd+0x44>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	330c      	adds	r3, #12
 8009618:	797a      	ldrb	r2, [r7, #5]
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	4618      	mov	r0, r3
 800961e:	f003 fafc 	bl	800cc1a <memcpy>

  hciContext.io.Send(0,0);
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <SendCmd+0x48>)
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	2100      	movs	r1, #0
 8009628:	2000      	movs	r0, #0
 800962a:	4798      	blx	r3

  return;
 800962c:	bf00      	nop
}
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	200000c4 	.word	0x200000c4
 8009638:	20000504 	.word	0x20000504

0800963c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009646:	79fb      	ldrb	r3, [r7, #7]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d108      	bne.n	800965e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <NotifyCmdStatus+0x3c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00d      	beq.n	8009670 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009654:	4b08      	ldr	r3, [pc, #32]	; (8009678 <NotifyCmdStatus+0x3c>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2000      	movs	r0, #0
 800965a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800965c:	e008      	b.n	8009670 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800965e:	4b06      	ldr	r3, [pc, #24]	; (8009678 <NotifyCmdStatus+0x3c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d004      	beq.n	8009670 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009666:	4b04      	ldr	r3, [pc, #16]	; (8009678 <NotifyCmdStatus+0x3c>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2001      	movs	r0, #1
 800966c:	4798      	blx	r3
  return;
 800966e:	bf00      	nop
 8009670:	bf00      	nop
}
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	2000052c 	.word	0x2000052c

0800967c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	7a5b      	ldrb	r3, [r3, #9]
 8009688:	2b0f      	cmp	r3, #15
 800968a:	d003      	beq.n	8009694 <TlEvtReceived+0x18>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	7a5b      	ldrb	r3, [r3, #9]
 8009690:	2b0e      	cmp	r3, #14
 8009692:	d107      	bne.n	80096a4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4809      	ldr	r0, [pc, #36]	; (80096bc <TlEvtReceived+0x40>)
 8009698:	f000 fcde 	bl	800a058 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800969c:	2000      	movs	r0, #0
 800969e:	f001 fe5b 	bl	800b358 <hci_cmd_resp_release>
 80096a2:	e006      	b.n	80096b2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	4806      	ldr	r0, [pc, #24]	; (80096c0 <TlEvtReceived+0x44>)
 80096a8:	f000 fcd6 	bl	800a058 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80096ac:	4804      	ldr	r0, [pc, #16]	; (80096c0 <TlEvtReceived+0x44>)
 80096ae:	f001 fe47 	bl	800b340 <hci_notify_asynch_evt>
  }

  return;
 80096b2:	bf00      	nop
}
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	20000524 	.word	0x20000524
 80096c0:	200000bc 	.word	0x200000bc

080096c4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a05      	ldr	r2, [pc, #20]	; (80096e4 <hci_register_io_bus+0x20>)
 80096d0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a04      	ldr	r2, [pc, #16]	; (80096e8 <hci_register_io_bus+0x24>)
 80096d6:	611a      	str	r2, [r3, #16]

  return;
 80096d8:	bf00      	nop
}
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	080099dd 	.word	0x080099dd
 80096e8:	08009a45 	.word	0x08009a45

080096ec <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	4a08      	ldr	r2, [pc, #32]	; (800971c <shci_init+0x30>)
 80096fc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80096fe:	4a08      	ldr	r2, [pc, #32]	; (8009720 <shci_init+0x34>)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009704:	4806      	ldr	r0, [pc, #24]	; (8009720 <shci_init+0x34>)
 8009706:	f000 f915 	bl	8009934 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4618      	mov	r0, r3
 8009710:	f000 f898 	bl	8009844 <TlInit>

  return;
 8009714:	bf00      	nop
}
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	20000554 	.word	0x20000554
 8009720:	20000534 	.word	0x20000534

08009724 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800972a:	4822      	ldr	r0, [pc, #136]	; (80097b4 <shci_user_evt_proc+0x90>)
 800972c:	f000 fc4c 	bl	8009fc8 <LST_is_empty>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d12b      	bne.n	800978e <shci_user_evt_proc+0x6a>
 8009736:	4b20      	ldr	r3, [pc, #128]	; (80097b8 <shci_user_evt_proc+0x94>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d027      	beq.n	800978e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800973e:	f107 030c 	add.w	r3, r7, #12
 8009742:	4619      	mov	r1, r3
 8009744:	481b      	ldr	r0, [pc, #108]	; (80097b4 <shci_user_evt_proc+0x90>)
 8009746:	f000 fcce 	bl	800a0e6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800974a:	4b1c      	ldr	r3, [pc, #112]	; (80097bc <shci_user_evt_proc+0x98>)
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00c      	beq.n	800976c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009756:	2301      	movs	r3, #1
 8009758:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800975a:	4b18      	ldr	r3, [pc, #96]	; (80097bc <shci_user_evt_proc+0x98>)
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	1d3a      	adds	r2, r7, #4
 8009760:	4610      	mov	r0, r2
 8009762:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009764:	793a      	ldrb	r2, [r7, #4]
 8009766:	4b14      	ldr	r3, [pc, #80]	; (80097b8 <shci_user_evt_proc+0x94>)
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	e002      	b.n	8009772 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800976c:	4b12      	ldr	r3, [pc, #72]	; (80097b8 <shci_user_evt_proc+0x94>)
 800976e:	2201      	movs	r2, #1
 8009770:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009772:	4b11      	ldr	r3, [pc, #68]	; (80097b8 <shci_user_evt_proc+0x94>)
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d004      	beq.n	8009784 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	4618      	mov	r0, r3
 800977e:	f000 fa71 	bl	8009c64 <TL_MM_EvtDone>
 8009782:	e004      	b.n	800978e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4619      	mov	r1, r3
 8009788:	480a      	ldr	r0, [pc, #40]	; (80097b4 <shci_user_evt_proc+0x90>)
 800978a:	f000 fc3f 	bl	800a00c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800978e:	4809      	ldr	r0, [pc, #36]	; (80097b4 <shci_user_evt_proc+0x90>)
 8009790:	f000 fc1a 	bl	8009fc8 <LST_is_empty>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d107      	bne.n	80097aa <shci_user_evt_proc+0x86>
 800979a:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <shci_user_evt_proc+0x94>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80097a2:	4804      	ldr	r0, [pc, #16]	; (80097b4 <shci_user_evt_proc+0x90>)
 80097a4:	f7f7 fbf1 	bl	8000f8a <shci_notify_asynch_evt>
  }


  return;
 80097a8:	bf00      	nop
 80097aa:	bf00      	nop
}
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	200000cc 	.word	0x200000cc
 80097b8:	200000dc 	.word	0x200000dc
 80097bc:	20000534 	.word	0x20000534

080097c0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60ba      	str	r2, [r7, #8]
 80097c8:	607b      	str	r3, [r7, #4]
 80097ca:	4603      	mov	r3, r0
 80097cc:	81fb      	strh	r3, [r7, #14]
 80097ce:	460b      	mov	r3, r1
 80097d0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80097d2:	2000      	movs	r0, #0
 80097d4:	f000 f868 	bl	80098a8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80097d8:	4b17      	ldr	r3, [pc, #92]	; (8009838 <shci_send+0x78>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	89fa      	ldrh	r2, [r7, #14]
 80097de:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80097e2:	4b15      	ldr	r3, [pc, #84]	; (8009838 <shci_send+0x78>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	7b7a      	ldrb	r2, [r7, #13]
 80097e8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80097ea:	4b13      	ldr	r3, [pc, #76]	; (8009838 <shci_send+0x78>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	330c      	adds	r3, #12
 80097f0:	7b7a      	ldrb	r2, [r7, #13]
 80097f2:	68b9      	ldr	r1, [r7, #8]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f003 fa10 	bl	800cc1a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80097fa:	4b10      	ldr	r3, [pc, #64]	; (800983c <shci_send+0x7c>)
 80097fc:	2201      	movs	r2, #1
 80097fe:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8009800:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <shci_send+0x80>)
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	2100      	movs	r1, #0
 8009806:	2000      	movs	r0, #0
 8009808:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800980a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800980e:	f7f7 fbd4 	bl	8000fba <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f103 0008 	add.w	r0, r3, #8
 8009818:	4b07      	ldr	r3, [pc, #28]	; (8009838 <shci_send+0x78>)
 800981a:	6819      	ldr	r1, [r3, #0]
 800981c:	4b06      	ldr	r3, [pc, #24]	; (8009838 <shci_send+0x78>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	789b      	ldrb	r3, [r3, #2]
 8009822:	3303      	adds	r3, #3
 8009824:	461a      	mov	r2, r3
 8009826:	f003 f9f8 	bl	800cc1a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800982a:	2001      	movs	r0, #1
 800982c:	f000 f83c 	bl	80098a8 <Cmd_SetStatus>

  return;
 8009830:	bf00      	nop
}
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	200000d8 	.word	0x200000d8
 800983c:	20000558 	.word	0x20000558
 8009840:	20000534 	.word	0x20000534

08009844 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800984c:	4a10      	ldr	r2, [pc, #64]	; (8009890 <TlInit+0x4c>)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009852:	4810      	ldr	r0, [pc, #64]	; (8009894 <TlInit+0x50>)
 8009854:	f000 fba8 	bl	8009fa8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009858:	2001      	movs	r0, #1
 800985a:	f000 f825 	bl	80098a8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800985e:	4b0e      	ldr	r3, [pc, #56]	; (8009898 <TlInit+0x54>)
 8009860:	2201      	movs	r2, #1
 8009862:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009864:	4b0d      	ldr	r3, [pc, #52]	; (800989c <TlInit+0x58>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d00c      	beq.n	8009886 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009870:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <TlInit+0x5c>)
 8009872:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009874:	4b0b      	ldr	r3, [pc, #44]	; (80098a4 <TlInit+0x60>)
 8009876:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009878:	4b08      	ldr	r3, [pc, #32]	; (800989c <TlInit+0x58>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f107 020c 	add.w	r2, r7, #12
 8009880:	4610      	mov	r0, r2
 8009882:	4798      	blx	r3
  }

  return;
 8009884:	bf00      	nop
 8009886:	bf00      	nop
}
 8009888:	3718      	adds	r7, #24
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	200000d8 	.word	0x200000d8
 8009894:	200000cc 	.word	0x200000cc
 8009898:	200000dc 	.word	0x200000dc
 800989c:	20000534 	.word	0x20000534
 80098a0:	080098f9 	.word	0x080098f9
 80098a4:	08009911 	.word	0x08009911

080098a8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4603      	mov	r3, r0
 80098b0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80098b2:	79fb      	ldrb	r3, [r7, #7]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10b      	bne.n	80098d0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80098b8:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <Cmd_SetStatus+0x48>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80098c0:	4b0b      	ldr	r3, [pc, #44]	; (80098f0 <Cmd_SetStatus+0x48>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2000      	movs	r0, #0
 80098c6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <Cmd_SetStatus+0x4c>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80098ce:	e00b      	b.n	80098e8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80098d0:	4b08      	ldr	r3, [pc, #32]	; (80098f4 <Cmd_SetStatus+0x4c>)
 80098d2:	2201      	movs	r2, #1
 80098d4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80098d6:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <Cmd_SetStatus+0x48>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d004      	beq.n	80098e8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80098de:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <Cmd_SetStatus+0x48>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2001      	movs	r0, #1
 80098e4:	4798      	blx	r3
  return;
 80098e6:	bf00      	nop
 80098e8:	bf00      	nop
}
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20000554 	.word	0x20000554
 80098f4:	200000d4 	.word	0x200000d4

080098f8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009900:	2000      	movs	r0, #0
 8009902:	f7f7 fb4f 	bl	8000fa4 <shci_cmd_resp_release>

  return;
 8009906:	bf00      	nop
}
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
	...

08009910 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	4805      	ldr	r0, [pc, #20]	; (8009930 <TlUserEvtReceived+0x20>)
 800991c:	f000 fb9c 	bl	800a058 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009920:	4803      	ldr	r0, [pc, #12]	; (8009930 <TlUserEvtReceived+0x20>)
 8009922:	f7f7 fb32 	bl	8000f8a <shci_notify_asynch_evt>

  return;
 8009926:	bf00      	nop
}
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	200000cc 	.word	0x200000cc

08009934 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a05      	ldr	r2, [pc, #20]	; (8009954 <shci_register_io_bus+0x20>)
 8009940:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a04      	ldr	r2, [pc, #16]	; (8009958 <shci_register_io_bus+0x24>)
 8009946:	611a      	str	r2, [r3, #16]

  return;
 8009948:	bf00      	nop
}
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	08009af1 	.word	0x08009af1
 8009958:	08009b45 	.word	0x08009b45

0800995c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009960:	f002 fb84 	bl	800c06c <HW_IPCC_Enable>

  return;
 8009964:	bf00      	nop
}
 8009966:	bd80      	pop	{r7, pc}

08009968 <TL_Init>:


void TL_Init( void )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800996c:	4b10      	ldr	r3, [pc, #64]	; (80099b0 <TL_Init+0x48>)
 800996e:	4a11      	ldr	r2, [pc, #68]	; (80099b4 <TL_Init+0x4c>)
 8009970:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009972:	4b0f      	ldr	r3, [pc, #60]	; (80099b0 <TL_Init+0x48>)
 8009974:	4a10      	ldr	r2, [pc, #64]	; (80099b8 <TL_Init+0x50>)
 8009976:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009978:	4b0d      	ldr	r3, [pc, #52]	; (80099b0 <TL_Init+0x48>)
 800997a:	4a10      	ldr	r2, [pc, #64]	; (80099bc <TL_Init+0x54>)
 800997c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <TL_Init+0x48>)
 8009980:	4a0f      	ldr	r2, [pc, #60]	; (80099c0 <TL_Init+0x58>)
 8009982:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009984:	4b0a      	ldr	r3, [pc, #40]	; (80099b0 <TL_Init+0x48>)
 8009986:	4a0f      	ldr	r2, [pc, #60]	; (80099c4 <TL_Init+0x5c>)
 8009988:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800998a:	4b09      	ldr	r3, [pc, #36]	; (80099b0 <TL_Init+0x48>)
 800998c:	4a0e      	ldr	r2, [pc, #56]	; (80099c8 <TL_Init+0x60>)
 800998e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009990:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <TL_Init+0x48>)
 8009992:	4a0e      	ldr	r2, [pc, #56]	; (80099cc <TL_Init+0x64>)
 8009994:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009996:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <TL_Init+0x48>)
 8009998:	4a0d      	ldr	r2, [pc, #52]	; (80099d0 <TL_Init+0x68>)
 800999a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800999c:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <TL_Init+0x48>)
 800999e:	4a0d      	ldr	r2, [pc, #52]	; (80099d4 <TL_Init+0x6c>)
 80099a0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80099a2:	4b03      	ldr	r3, [pc, #12]	; (80099b0 <TL_Init+0x48>)
 80099a4:	4a0c      	ldr	r2, [pc, #48]	; (80099d8 <TL_Init+0x70>)
 80099a6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80099a8:	f002 fb74 	bl	800c094 <HW_IPCC_Init>

  return;
 80099ac:	bf00      	nop
}
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20030000 	.word	0x20030000
 80099b4:	20030028 	.word	0x20030028
 80099b8:	20030048 	.word	0x20030048
 80099bc:	20030058 	.word	0x20030058
 80099c0:	20030068 	.word	0x20030068
 80099c4:	20030070 	.word	0x20030070
 80099c8:	20030078 	.word	0x20030078
 80099cc:	20030080 	.word	0x20030080
 80099d0:	2003009c 	.word	0x2003009c
 80099d4:	200300a0 	.word	0x200300a0
 80099d8:	200300ac 	.word	0x200300ac

080099dc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80099e8:	4811      	ldr	r0, [pc, #68]	; (8009a30 <TL_BLE_Init+0x54>)
 80099ea:	f000 fadd 	bl	8009fa8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80099ee:	4b11      	ldr	r3, [pc, #68]	; (8009a34 <TL_BLE_Init+0x58>)
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	68da      	ldr	r2, [r3, #12]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	4a0c      	ldr	r2, [pc, #48]	; (8009a38 <TL_BLE_Init+0x5c>)
 8009a08:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	4a08      	ldr	r2, [pc, #32]	; (8009a30 <TL_BLE_Init+0x54>)
 8009a0e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009a10:	f002 fb56 	bl	800c0c0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a08      	ldr	r2, [pc, #32]	; (8009a3c <TL_BLE_Init+0x60>)
 8009a1a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	4a07      	ldr	r2, [pc, #28]	; (8009a40 <TL_BLE_Init+0x64>)
 8009a22:	6013      	str	r3, [r2, #0]

  return 0;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	200300c8 	.word	0x200300c8
 8009a34:	20030000 	.word	0x20030000
 8009a38:	20030a58 	.word	0x20030a58
 8009a3c:	20000564 	.word	0x20000564
 8009a40:	20000568 	.word	0x20000568

08009a44 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009a50:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <TL_BLE_SendCmd+0x34>)
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2201      	movs	r2, #1
 8009a58:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009a5a:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <TL_BLE_SendCmd+0x34>)
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4619      	mov	r1, r3
 8009a62:	2001      	movs	r0, #1
 8009a64:	f000 f96c 	bl	8009d40 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009a68:	f002 fb34 	bl	800c0d4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20030000 	.word	0x20030000

08009a7c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009a82:	e01c      	b.n	8009abe <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009a84:	1d3b      	adds	r3, r7, #4
 8009a86:	4619      	mov	r1, r3
 8009a88:	4812      	ldr	r0, [pc, #72]	; (8009ad4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009a8a:	f000 fb2c 	bl	800a0e6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	7a5b      	ldrb	r3, [r3, #9]
 8009a92:	2b0f      	cmp	r3, #15
 8009a94:	d003      	beq.n	8009a9e <HW_IPCC_BLE_RxEvtNot+0x22>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	7a5b      	ldrb	r3, [r3, #9]
 8009a9a:	2b0e      	cmp	r3, #14
 8009a9c:	d105      	bne.n	8009aaa <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	2002      	movs	r0, #2
 8009aa4:	f000 f94c 	bl	8009d40 <OutputDbgTrace>
 8009aa8:	e004      	b.n	8009ab4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4619      	mov	r1, r3
 8009aae:	2003      	movs	r0, #3
 8009ab0:	f000 f946 	bl	8009d40 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009ab4:	4b08      	ldr	r3, [pc, #32]	; (8009ad8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	4610      	mov	r0, r2
 8009abc:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009abe:	4805      	ldr	r0, [pc, #20]	; (8009ad4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009ac0:	f000 fa82 	bl	8009fc8 <LST_is_empty>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0dc      	beq.n	8009a84 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009aca:	bf00      	nop
}
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	200300c8 	.word	0x200300c8
 8009ad8:	20000564 	.word	0x20000564

08009adc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009ae0:	4b02      	ldr	r3, [pc, #8]	; (8009aec <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4798      	blx	r3

  return;
 8009ae6:	bf00      	nop
}
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20000568 	.word	0x20000568

08009af0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009afc:	480d      	ldr	r0, [pc, #52]	; (8009b34 <TL_SYS_Init+0x44>)
 8009afe:	f000 fa53 	bl	8009fa8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009b02:	4b0d      	ldr	r3, [pc, #52]	; (8009b38 <TL_SYS_Init+0x48>)
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	689a      	ldr	r2, [r3, #8]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4a08      	ldr	r2, [pc, #32]	; (8009b34 <TL_SYS_Init+0x44>)
 8009b14:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009b16:	f002 faff 	bl	800c118 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a07      	ldr	r2, [pc, #28]	; (8009b3c <TL_SYS_Init+0x4c>)
 8009b20:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	4a06      	ldr	r2, [pc, #24]	; (8009b40 <TL_SYS_Init+0x50>)
 8009b28:	6013      	str	r3, [r2, #0]

  return 0;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	200300d0 	.word	0x200300d0
 8009b38:	20030000 	.word	0x20030000
 8009b3c:	2000056c 	.word	0x2000056c
 8009b40:	20000570 	.word	0x20000570

08009b44 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009b50:	4b09      	ldr	r3, [pc, #36]	; (8009b78 <TL_SYS_SendCmd+0x34>)
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2210      	movs	r2, #16
 8009b58:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009b5a:	4b07      	ldr	r3, [pc, #28]	; (8009b78 <TL_SYS_SendCmd+0x34>)
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4619      	mov	r1, r3
 8009b62:	2004      	movs	r0, #4
 8009b64:	f000 f8ec 	bl	8009d40 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009b68:	f002 fae0 	bl	800c12c <HW_IPCC_SYS_SendCmd>

  return 0;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	20030000 	.word	0x20030000

08009b7c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009b80:	4b07      	ldr	r3, [pc, #28]	; (8009ba0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4619      	mov	r1, r3
 8009b88:	2005      	movs	r0, #5
 8009b8a:	f000 f8d9 	bl	8009d40 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009b8e:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a03      	ldr	r2, [pc, #12]	; (8009ba0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009b94:	68d2      	ldr	r2, [r2, #12]
 8009b96:	6812      	ldr	r2, [r2, #0]
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4798      	blx	r3

  return;
 8009b9c:	bf00      	nop
}
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20030000 	.word	0x20030000
 8009ba4:	2000056c 	.word	0x2000056c

08009ba8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009bae:	e00e      	b.n	8009bce <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009bb0:	1d3b      	adds	r3, r7, #4
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	480b      	ldr	r0, [pc, #44]	; (8009be4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009bb6:	f000 fa96 	bl	800a0e6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	2006      	movs	r0, #6
 8009bc0:	f000 f8be 	bl	8009d40 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009bc4:	4b08      	ldr	r3, [pc, #32]	; (8009be8 <HW_IPCC_SYS_EvtNot+0x40>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	4610      	mov	r0, r2
 8009bcc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009bce:	4805      	ldr	r0, [pc, #20]	; (8009be4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009bd0:	f000 f9fa 	bl	8009fc8 <LST_is_empty>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0ea      	beq.n	8009bb0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009bda:	bf00      	nop
}
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	200300d0 	.word	0x200300d0
 8009be8:	20000570 	.word	0x20000570

08009bec <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009bf4:	4817      	ldr	r0, [pc, #92]	; (8009c54 <TL_MM_Init+0x68>)
 8009bf6:	f000 f9d7 	bl	8009fa8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009bfa:	4817      	ldr	r0, [pc, #92]	; (8009c58 <TL_MM_Init+0x6c>)
 8009bfc:	f000 f9d4 	bl	8009fa8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009c00:	4b16      	ldr	r3, [pc, #88]	; (8009c5c <TL_MM_Init+0x70>)
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	4a16      	ldr	r2, [pc, #88]	; (8009c60 <TL_MM_Init+0x74>)
 8009c06:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009c08:	4b15      	ldr	r3, [pc, #84]	; (8009c60 <TL_MM_Init+0x74>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6892      	ldr	r2, [r2, #8]
 8009c10:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009c12:	4b13      	ldr	r3, [pc, #76]	; (8009c60 <TL_MM_Init+0x74>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	68d2      	ldr	r2, [r2, #12]
 8009c1a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009c1c:	4b10      	ldr	r3, [pc, #64]	; (8009c60 <TL_MM_Init+0x74>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a0c      	ldr	r2, [pc, #48]	; (8009c54 <TL_MM_Init+0x68>)
 8009c22:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009c24:	4b0e      	ldr	r3, [pc, #56]	; (8009c60 <TL_MM_Init+0x74>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	6812      	ldr	r2, [r2, #0]
 8009c2c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009c2e:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <TL_MM_Init+0x74>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	6852      	ldr	r2, [r2, #4]
 8009c36:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009c38:	4b09      	ldr	r3, [pc, #36]	; (8009c60 <TL_MM_Init+0x74>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	6912      	ldr	r2, [r2, #16]
 8009c40:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009c42:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <TL_MM_Init+0x74>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	6952      	ldr	r2, [r2, #20]
 8009c4a:	619a      	str	r2, [r3, #24]

  return;
 8009c4c:	bf00      	nop
}
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	200300b8 	.word	0x200300b8
 8009c58:	2000055c 	.word	0x2000055c
 8009c5c:	20030000 	.word	0x20030000
 8009c60:	20000574 	.word	0x20000574

08009c64 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	4807      	ldr	r0, [pc, #28]	; (8009c8c <TL_MM_EvtDone+0x28>)
 8009c70:	f000 f9f2 	bl	800a058 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	2000      	movs	r0, #0
 8009c78:	f000 f862 	bl	8009d40 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009c7c:	4804      	ldr	r0, [pc, #16]	; (8009c90 <TL_MM_EvtDone+0x2c>)
 8009c7e:	f002 fa7b 	bl	800c178 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009c82:	bf00      	nop
}
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	2000055c 	.word	0x2000055c
 8009c90:	08009c95 	.word	0x08009c95

08009c94 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009c9a:	e00c      	b.n	8009cb6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009c9c:	1d3b      	adds	r3, r7, #4
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	480a      	ldr	r0, [pc, #40]	; (8009ccc <SendFreeBuf+0x38>)
 8009ca2:	f000 fa20 	bl	800a0e6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009ca6:	4b0a      	ldr	r3, [pc, #40]	; (8009cd0 <SendFreeBuf+0x3c>)
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	4611      	mov	r1, r2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f000 f9d1 	bl	800a058 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009cb6:	4805      	ldr	r0, [pc, #20]	; (8009ccc <SendFreeBuf+0x38>)
 8009cb8:	f000 f986 	bl	8009fc8 <LST_is_empty>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0ec      	beq.n	8009c9c <SendFreeBuf+0x8>
  }

  return;
 8009cc2:	bf00      	nop
}
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	2000055c 	.word	0x2000055c
 8009cd0:	20030000 	.word	0x20030000

08009cd4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009cd8:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <TL_TRACES_Init+0x1c>)
 8009cda:	f000 f965 	bl	8009fa8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009cde:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <TL_TRACES_Init+0x20>)
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	4a03      	ldr	r2, [pc, #12]	; (8009cf0 <TL_TRACES_Init+0x1c>)
 8009ce4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009ce6:	f002 fa7d 	bl	800c1e4 <HW_IPCC_TRACES_Init>

  return;
 8009cea:	bf00      	nop
}
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	200300c0 	.word	0x200300c0
 8009cf4:	20030000 	.word	0x20030000

08009cf8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009cfe:	e008      	b.n	8009d12 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009d00:	1d3b      	adds	r3, r7, #4
 8009d02:	4619      	mov	r1, r3
 8009d04:	4808      	ldr	r0, [pc, #32]	; (8009d28 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009d06:	f000 f9ee 	bl	800a0e6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 f80d 	bl	8009d2c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009d12:	4805      	ldr	r0, [pc, #20]	; (8009d28 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009d14:	f000 f958 	bl	8009fc8 <LST_is_empty>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d0f0      	beq.n	8009d00 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009d1e:	bf00      	nop
}
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	200300c0 	.word	0x200300c0

08009d2c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4603      	mov	r3, r0
 8009d48:	6039      	str	r1, [r7, #0]
 8009d4a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009d4c:	79fb      	ldrb	r3, [r7, #7]
 8009d4e:	2b06      	cmp	r3, #6
 8009d50:	d845      	bhi.n	8009dde <OutputDbgTrace+0x9e>
 8009d52:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <OutputDbgTrace+0x18>)
 8009d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d58:	08009d75 	.word	0x08009d75
 8009d5c:	08009d99 	.word	0x08009d99
 8009d60:	08009d9f 	.word	0x08009d9f
 8009d64:	08009db3 	.word	0x08009db3
 8009d68:	08009dbf 	.word	0x08009dbf
 8009d6c:	08009dc5 	.word	0x08009dc5
 8009d70:	08009dd3 	.word	0x08009dd3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	7a5b      	ldrb	r3, [r3, #9]
 8009d7c:	2bff      	cmp	r3, #255	; 0xff
 8009d7e:	d005      	beq.n	8009d8c <OutputDbgTrace+0x4c>
 8009d80:	2bff      	cmp	r3, #255	; 0xff
 8009d82:	dc05      	bgt.n	8009d90 <OutputDbgTrace+0x50>
 8009d84:	2b0e      	cmp	r3, #14
 8009d86:	d005      	beq.n	8009d94 <OutputDbgTrace+0x54>
 8009d88:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009d8a:	e001      	b.n	8009d90 <OutputDbgTrace+0x50>
          break;
 8009d8c:	bf00      	nop
 8009d8e:	e027      	b.n	8009de0 <OutputDbgTrace+0xa0>
          break;
 8009d90:	bf00      	nop
 8009d92:	e025      	b.n	8009de0 <OutputDbgTrace+0xa0>
          break;
 8009d94:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009d96:	e023      	b.n	8009de0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009d9c:	e020      	b.n	8009de0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	7a5b      	ldrb	r3, [r3, #9]
 8009da6:	2b0e      	cmp	r3, #14
 8009da8:	d001      	beq.n	8009dae <OutputDbgTrace+0x6e>
 8009daa:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009dac:	e000      	b.n	8009db0 <OutputDbgTrace+0x70>
          break;
 8009dae:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009db0:	e016      	b.n	8009de0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	7a5b      	ldrb	r3, [r3, #9]
 8009dba:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009dbc:	e010      	b.n	8009de0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009dc2:	e00d      	b.n	8009de0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	7a5b      	ldrb	r3, [r3, #9]
 8009dcc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009dce:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009dd0:	e006      	b.n	8009de0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	7a5b      	ldrb	r3, [r3, #9]
 8009dda:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009ddc:	e000      	b.n	8009de0 <OutputDbgTrace+0xa0>

    default:
      break;
 8009dde:	bf00      	nop
  }

  return;
 8009de0:	bf00      	nop
}
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009df2:	f3ef 8310 	mrs	r3, PRIMASK
 8009df6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009df8:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8009dfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dfc:	b672      	cpsid	i
}
 8009dfe:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009e00:	1cbb      	adds	r3, r7, #2
 8009e02:	4619      	mov	r1, r3
 8009e04:	4812      	ldr	r0, [pc, #72]	; (8009e50 <DbgTrace_TxCpltCallback+0x64>)
 8009e06:	f000 fbe6 	bl	800a5d6 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009e0a:	1cbb      	adds	r3, r7, #2
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4810      	ldr	r0, [pc, #64]	; (8009e50 <DbgTrace_TxCpltCallback+0x64>)
 8009e10:	f000 fcd2 	bl	800a7b8 <CircularQueue_Sense>
 8009e14:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00c      	beq.n	8009e36 <DbgTrace_TxCpltCallback+0x4a>
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f383 8810 	msr	PRIMASK, r3
}
 8009e26:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009e28:	887b      	ldrh	r3, [r7, #2]
 8009e2a:	4a0a      	ldr	r2, [pc, #40]	; (8009e54 <DbgTrace_TxCpltCallback+0x68>)
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6938      	ldr	r0, [r7, #16]
 8009e30:	f7f6 fcb3 	bl	800079a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009e34:	e008      	b.n	8009e48 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8009e36:	4b08      	ldr	r3, [pc, #32]	; (8009e58 <DbgTrace_TxCpltCallback+0x6c>)
 8009e38:	2201      	movs	r2, #1
 8009e3a:	701a      	strb	r2, [r3, #0]
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f383 8810 	msr	PRIMASK, r3
}
 8009e46:	bf00      	nop
}
 8009e48:	bf00      	nop
 8009e4a:	3718      	adds	r7, #24
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	20000578 	.word	0x20000578
 8009e54:	08009ded 	.word	0x08009ded
 8009e58:	20000029 	.word	0x20000029

08009e5c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009e62:	f7f6 fc94 	bl	800078e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009e66:	2302      	movs	r3, #2
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009e70:	4903      	ldr	r1, [pc, #12]	; (8009e80 <DbgTraceInit+0x24>)
 8009e72:	4804      	ldr	r0, [pc, #16]	; (8009e84 <DbgTraceInit+0x28>)
 8009e74:	f000 f956 	bl	800a124 <CircularQueue_Init>
#endif 
#endif
  return;
 8009e78:	bf00      	nop
}
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20000598 	.word	0x20000598
 8009e84:	20000578 	.word	0x20000578

08009e88 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	68b9      	ldr	r1, [r7, #8]
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 f805 	bl	8009ea8 <DbgTraceWrite>
 8009e9e:	4603      	mov	r3, r0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08a      	sub	sp, #40	; 0x28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8009ebc:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ebe:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009ec0:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec8:	d102      	bne.n	8009ed0 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ece:	e037      	b.n	8009f40 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d006      	beq.n	8009ee4 <DbgTraceWrite+0x3c>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d003      	beq.n	8009ee4 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009edc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ee2:	e02d      	b.n	8009f40 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d02a      	beq.n	8009f40 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009eee:	b672      	cpsid	i
}
 8009ef0:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	68b9      	ldr	r1, [r7, #8]
 8009efa:	4814      	ldr	r0, [pc, #80]	; (8009f4c <DbgTraceWrite+0xa4>)
 8009efc:	f000 f944 	bl	800a188 <CircularQueue_Add>
 8009f00:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d015      	beq.n	8009f34 <DbgTraceWrite+0x8c>
 8009f08:	4b11      	ldr	r3, [pc, #68]	; (8009f50 <DbgTraceWrite+0xa8>)
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d010      	beq.n	8009f34 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8009f12:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <DbgTraceWrite+0xa8>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f383 8810 	msr	PRIMASK, r3
}
 8009f22:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	4a0a      	ldr	r2, [pc, #40]	; (8009f54 <DbgTraceWrite+0xac>)
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	69f8      	ldr	r0, [r7, #28]
 8009f2e:	f7f6 fc34 	bl	800079a <DbgOutputTraces>
 8009f32:	e005      	b.n	8009f40 <DbgTraceWrite+0x98>
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f383 8810 	msr	PRIMASK, r3
}
 8009f3e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3728      	adds	r7, #40	; 0x28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	20000578 	.word	0x20000578
 8009f50:	20000029 	.word	0x20000029
 8009f54:	08009ded 	.word	0x08009ded

08009f58 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009f62:	4b0f      	ldr	r3, [pc, #60]	; (8009fa0 <OTP_Read+0x48>)
 8009f64:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009f66:	e002      	b.n	8009f6e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3b08      	subs	r3, #8
 8009f6c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3307      	adds	r3, #7
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	79fa      	ldrb	r2, [r7, #7]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d003      	beq.n	8009f82 <OTP_Read+0x2a>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	4a09      	ldr	r2, [pc, #36]	; (8009fa4 <OTP_Read+0x4c>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d1f2      	bne.n	8009f68 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	3307      	adds	r3, #7
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	79fa      	ldrb	r2, [r7, #7]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d001      	beq.n	8009f92 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009f92:	68fb      	ldr	r3, [r7, #12]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	1fff73f8 	.word	0x1fff73f8
 8009fa4:	1fff7000 	.word	0x1fff7000

08009fa8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	605a      	str	r2, [r3, #4]
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8009fd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009fd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fda:	b672      	cpsid	i
}
 8009fdc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d102      	bne.n	8009fee <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	75fb      	strb	r3, [r7, #23]
 8009fec:	e001      	b.n	8009ff2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	75fb      	strb	r3, [r7, #23]
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	f383 8810 	msr	PRIMASK, r3
}
 8009ffc:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a000:	4618      	mov	r0, r3
 800a002:	371c      	adds	r7, #28
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a016:	f3ef 8310 	mrs	r3, PRIMASK
 800a01a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a01c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a01e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a020:	b672      	cpsid	i
}
 800a022:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	605a      	str	r2, [r3, #4]
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	f383 8810 	msr	PRIMASK, r3
}
 800a04a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a04c:	bf00      	nop
 800a04e:	371c      	adds	r7, #28
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a062:	f3ef 8310 	mrs	r3, PRIMASK
 800a066:	60fb      	str	r3, [r7, #12]
  return(result);
 800a068:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a06a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a06c:	b672      	cpsid	i
}
 800a06e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	601a      	str	r2, [r3, #0]
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	f383 8810 	msr	PRIMASK, r3
}
 800a096:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a098:	bf00      	nop
 800a09a:	371c      	adds	r7, #28
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0ac:	f3ef 8310 	mrs	r3, PRIMASK
 800a0b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a0b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0b6:	b672      	cpsid	i
}
 800a0b8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	6812      	ldr	r2, [r2, #0]
 800a0c2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	6852      	ldr	r2, [r2, #4]
 800a0cc:	605a      	str	r2, [r3, #4]
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	f383 8810 	msr	PRIMASK, r3
}
 800a0d8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a0da:	bf00      	nop
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b086      	sub	sp, #24
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a0f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a0f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0fa:	b672      	cpsid	i
}
 800a0fc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7ff ffca 	bl	800a0a4 <LST_remove_node>
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	f383 8810 	msr	PRIMASK, r3
}
 800a11a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a11c:	bf00      	nop
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	607a      	str	r2, [r7, #4]
 800a130:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	887a      	ldrh	r2, [r7, #2]
 800a15a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	7e3a      	ldrb	r2, [r7, #24]
 800a160:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a162:	7e3b      	ldrb	r3, [r7, #24]
 800a164:	f003 0302 	and.w	r3, r3, #2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d006      	beq.n	800a17a <CircularQueue_Init+0x56>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	891b      	ldrh	r3, [r3, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a174:	f04f 33ff 	mov.w	r3, #4294967295
 800a178:	e000      	b.n	800a17c <CircularQueue_Init+0x58>
  }
  return 0;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08e      	sub	sp, #56	; 0x38
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	4613      	mov	r3, r2
 800a196:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a198:	2300      	movs	r3, #0
 800a19a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a19c:	2300      	movs	r3, #0
 800a19e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	891b      	ldrh	r3, [r3, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <CircularQueue_Add+0x38>
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e000      	b.n	800a1c2 <CircularQueue_Add+0x3a>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d02a      	beq.n	800a222 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	891b      	ldrh	r3, [r3, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d123      	bne.n	800a21c <CircularQueue_Add+0x94>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	4413      	add	r3, r2
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6819      	ldr	r1, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	1c58      	adds	r0, r3, #1
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	4298      	cmp	r0, r3
 800a1f2:	d306      	bcc.n	800a202 <CircularQueue_Add+0x7a>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6918      	ldr	r0, [r3, #16]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	1ac3      	subs	r3, r0, r3
 800a1fe:	3301      	adds	r3, #1
 800a200:	e002      	b.n	800a208 <CircularQueue_Add+0x80>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	3301      	adds	r3, #1
 800a208:	440b      	add	r3, r1
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	021b      	lsls	r3, r3, #8
 800a210:	b29b      	uxth	r3, r3
 800a212:	4413      	add	r3, r2
 800a214:	b29b      	uxth	r3, r3
 800a216:	3302      	adds	r3, #2
 800a218:	b29b      	uxth	r3, r3
 800a21a:	e001      	b.n	800a220 <CircularQueue_Add+0x98>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	891b      	ldrh	r3, [r3, #8]
 800a220:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	891b      	ldrh	r3, [r3, #8]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	891b      	ldrh	r3, [r3, #8]
 800a22e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	691a      	ldr	r2, [r3, #16]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d307      	bcc.n	800a24c <CircularQueue_Add+0xc4>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6919      	ldr	r1, [r3, #16]
 800a244:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a246:	440b      	add	r3, r1
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	e000      	b.n	800a24e <CircularQueue_Add+0xc6>
 800a24c:	2300      	movs	r3, #0
 800a24e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a250:	88fa      	ldrh	r2, [r7, #6]
 800a252:	7ffb      	ldrb	r3, [r7, #31]
 800a254:	4413      	add	r3, r2
 800a256:	461a      	mov	r2, r3
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	fb02 f303 	mul.w	r3, r2, r3
 800a25e:	69ba      	ldr	r2, [r7, #24]
 800a260:	429a      	cmp	r2, r3
 800a262:	d80b      	bhi.n	800a27c <CircularQueue_Add+0xf4>
 800a264:	88fa      	ldrh	r2, [r7, #6]
 800a266:	7ffb      	ldrb	r3, [r7, #31]
 800a268:	4413      	add	r3, r2
 800a26a:	461a      	mov	r2, r3
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a272:	fb01 f202 	mul.w	r2, r1, r2
 800a276:	1a9b      	subs	r3, r3, r2
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	e000      	b.n	800a27e <CircularQueue_Add+0xf6>
 800a27c:	2300      	movs	r3, #0
 800a27e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a280:	7dfa      	ldrb	r2, [r7, #23]
 800a282:	7ffb      	ldrb	r3, [r7, #31]
 800a284:	429a      	cmp	r2, r3
 800a286:	bf8c      	ite	hi
 800a288:	2301      	movhi	r3, #1
 800a28a:	2300      	movls	r3, #0
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a290:	7fbb      	ldrb	r3, [r7, #30]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d008      	beq.n	800a2a8 <CircularQueue_Add+0x120>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	7f1b      	ldrb	r3, [r3, #28]
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <CircularQueue_Add+0x120>
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	e000      	b.n	800a2aa <CircularQueue_Add+0x122>
 800a2a8:	8bbb      	ldrh	r3, [r7, #28]
 800a2aa:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a2ac:	7fbb      	ldrb	r3, [r7, #30]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d008      	beq.n	800a2c4 <CircularQueue_Add+0x13c>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	7f1b      	ldrb	r3, [r3, #28]
 800a2b6:	f003 0302 	and.w	r3, r3, #2
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d002      	beq.n	800a2c4 <CircularQueue_Add+0x13c>
 800a2be:	7ffb      	ldrb	r3, [r7, #31]
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	e000      	b.n	800a2c6 <CircularQueue_Add+0x13e>
 800a2c4:	8bbb      	ldrh	r3, [r7, #28]
 800a2c6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a2c8:	88fb      	ldrh	r3, [r7, #6]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 817e 	beq.w	800a5cc <CircularQueue_Add+0x444>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	695a      	ldr	r2, [r3, #20]
 800a2d4:	88f9      	ldrh	r1, [r7, #6]
 800a2d6:	7ffb      	ldrb	r3, [r7, #31]
 800a2d8:	440b      	add	r3, r1
 800a2da:	4619      	mov	r1, r3
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	fb01 f303 	mul.w	r3, r1, r3
 800a2e2:	441a      	add	r2, r3
 800a2e4:	8bbb      	ldrh	r3, [r7, #28]
 800a2e6:	441a      	add	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	f200 816d 	bhi.w	800a5cc <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2f6:	e14a      	b.n	800a58e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	691a      	ldr	r2, [r3, #16]
 800a2fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2fe:	441a      	add	r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	429a      	cmp	r2, r3
 800a306:	d307      	bcc.n	800a318 <CircularQueue_Add+0x190>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	691a      	ldr	r2, [r3, #16]
 800a30c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a30e:	441a      	add	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	1ad3      	subs	r3, r2, r3
 800a316:	e003      	b.n	800a320 <CircularQueue_Add+0x198>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	691a      	ldr	r2, [r3, #16]
 800a31c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a31e:	4413      	add	r3, r2
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	891b      	ldrh	r3, [r3, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d130      	bne.n	800a394 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	1c59      	adds	r1, r3, #1
 800a33a:	6339      	str	r1, [r7, #48]	; 0x30
 800a33c:	4413      	add	r3, r2
 800a33e:	88fa      	ldrh	r2, [r7, #6]
 800a340:	b2d2      	uxtb	r2, r2
 800a342:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d304      	bcc.n	800a358 <CircularQueue_Add+0x1d0>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	e000      	b.n	800a35a <CircularQueue_Add+0x1d2>
 800a358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a35c:	88fb      	ldrh	r3, [r7, #6]
 800a35e:	0a1b      	lsrs	r3, r3, #8
 800a360:	b298      	uxth	r0, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a368:	1c59      	adds	r1, r3, #1
 800a36a:	6339      	str	r1, [r7, #48]	; 0x30
 800a36c:	4413      	add	r3, r2
 800a36e:	b2c2      	uxtb	r2, r0
 800a370:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a378:	429a      	cmp	r2, r3
 800a37a:	d304      	bcc.n	800a386 <CircularQueue_Add+0x1fe>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	e000      	b.n	800a388 <CircularQueue_Add+0x200>
 800a386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a388:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	1c9a      	adds	r2, r3, #2
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a394:	88fa      	ldrh	r2, [r7, #6]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6859      	ldr	r1, [r3, #4]
 800a39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39c:	1acb      	subs	r3, r1, r3
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	bf28      	it	cs
 800a3a2:	4613      	movcs	r3, r2
 800a3a4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a3a6:	88fb      	ldrh	r3, [r7, #6]
 800a3a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d007      	beq.n	800a3be <CircularQueue_Add+0x236>
 800a3ae:	88fb      	ldrh	r3, [r7, #6]
 800a3b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d225      	bcs.n	800a402 <CircularQueue_Add+0x27a>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	7f1b      	ldrb	r3, [r3, #28]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d121      	bne.n	800a402 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	18d0      	adds	r0, r2, r3
 800a3c6:	88fb      	ldrh	r3, [r7, #6]
 800a3c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3ca:	fb02 f303 	mul.w	r3, r2, r3
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	f002 fc20 	bl	800cc1a <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	695a      	ldr	r2, [r3, #20]
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	441a      	add	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ec:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a3ee:	88fa      	ldrh	r2, [r7, #6]
 800a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a3f6:	7ffb      	ldrb	r3, [r7, #31]
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	88fb      	ldrh	r3, [r7, #6]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a400:	e0a4      	b.n	800a54c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a404:	2b00      	cmp	r3, #0
 800a406:	f000 80a1 	beq.w	800a54c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	7f1b      	ldrb	r3, [r3, #28]
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	d03a      	beq.n	800a48c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	891b      	ldrh	r3, [r3, #8]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10d      	bne.n	800a43a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	3b02      	subs	r3, #2
 800a426:	4413      	add	r3, r2
 800a428:	22ff      	movs	r2, #255	; 0xff
 800a42a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a432:	3b01      	subs	r3, #1
 800a434:	4413      	add	r3, r2
 800a436:	22ff      	movs	r2, #255	; 0xff
 800a438:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	695a      	ldr	r2, [r3, #20]
 800a43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a440:	441a      	add	r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a446:	2300      	movs	r3, #0
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a44a:	88fb      	ldrh	r3, [r7, #6]
 800a44c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a44e:	2300      	movs	r3, #0
 800a450:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	891b      	ldrh	r3, [r3, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d16f      	bne.n	800a53a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	1c59      	adds	r1, r3, #1
 800a462:	6339      	str	r1, [r7, #48]	; 0x30
 800a464:	4413      	add	r3, r2
 800a466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a468:	b2d2      	uxtb	r2, r2
 800a46a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	0a18      	lsrs	r0, r3, #8
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	1c59      	adds	r1, r3, #1
 800a478:	6339      	str	r1, [r7, #48]	; 0x30
 800a47a:	4413      	add	r3, r2
 800a47c:	b2c2      	uxtb	r2, r0
 800a47e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	695b      	ldr	r3, [r3, #20]
 800a484:	1c9a      	adds	r2, r3, #2
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	615a      	str	r2, [r3, #20]
 800a48a:	e056      	b.n	800a53a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	7f1b      	ldrb	r3, [r3, #28]
 800a490:	f003 0302 	and.w	r3, r3, #2
 800a494:	2b00      	cmp	r3, #0
 800a496:	d050      	beq.n	800a53a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	891b      	ldrh	r3, [r3, #8]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d14a      	bne.n	800a536 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a6:	3b02      	subs	r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4ac:	b2d2      	uxtb	r2, r2
 800a4ae:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	0a19      	lsrs	r1, r3, #8
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	4413      	add	r3, r2
 800a4be:	b2ca      	uxtb	r2, r1
 800a4c0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c8:	18d0      	adds	r0, r2, r3
 800a4ca:	88fb      	ldrh	r3, [r7, #6]
 800a4cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4ce:	fb02 f303 	mul.w	r3, r2, r3
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f002 fb9e 	bl	800cc1a <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	695a      	ldr	r2, [r3, #20]
 800a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e4:	441a      	add	r2, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a4ee:	88fa      	ldrh	r2, [r7, #6]
 800a4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a500:	2300      	movs	r3, #0
 800a502:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50a:	1c59      	adds	r1, r3, #1
 800a50c:	6339      	str	r1, [r7, #48]	; 0x30
 800a50e:	4413      	add	r3, r2
 800a510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a512:	b2d2      	uxtb	r2, r2
 800a514:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	0a18      	lsrs	r0, r3, #8
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a520:	1c59      	adds	r1, r3, #1
 800a522:	6339      	str	r1, [r7, #48]	; 0x30
 800a524:	4413      	add	r3, r2
 800a526:	b2c2      	uxtb	r2, r0
 800a528:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	1c9a      	adds	r2, r3, #2
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	615a      	str	r2, [r3, #20]
 800a534:	e001      	b.n	800a53a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a536:	2300      	movs	r3, #0
 800a538:	e049      	b.n	800a5ce <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a53a:	7ffb      	ldrb	r3, [r7, #31]
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a540:	b29b      	uxth	r3, r3
 800a542:	4413      	add	r3, r2
 800a544:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d015      	beq.n	800a57e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	18d0      	adds	r0, r2, r3
 800a55a:	88fb      	ldrh	r3, [r7, #6]
 800a55c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a55e:	fb03 f202 	mul.w	r2, r3, r2
 800a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a564:	4413      	add	r3, r2
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	4413      	add	r3, r2
 800a56a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a56c:	4619      	mov	r1, r3
 800a56e:	f002 fb54 	bl	800cc1a <memcpy>
        q->byteCount += NbBytesToCopy;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	695a      	ldr	r2, [r3, #20]
 800a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a578:	441a      	add	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58a:	3301      	adds	r3, #1
 800a58c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a58e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	429a      	cmp	r2, r3
 800a594:	f4ff aeb0 	bcc.w	800a2f8 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6919      	ldr	r1, [r3, #16]
 800a5a0:	7ffb      	ldrb	r3, [r7, #31]
 800a5a2:	4419      	add	r1, r3
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	4299      	cmp	r1, r3
 800a5aa:	d307      	bcc.n	800a5bc <CircularQueue_Add+0x434>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6919      	ldr	r1, [r3, #16]
 800a5b0:	7ffb      	ldrb	r3, [r7, #31]
 800a5b2:	4419      	add	r1, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	1acb      	subs	r3, r1, r3
 800a5ba:	e003      	b.n	800a5c4 <CircularQueue_Add+0x43c>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	6919      	ldr	r1, [r3, #16]
 800a5c0:	7ffb      	ldrb	r3, [r7, #31]
 800a5c2:	440b      	add	r3, r1
 800a5c4:	4413      	add	r3, r2
 800a5c6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a5c8:	6a3b      	ldr	r3, [r7, #32]
 800a5ca:	e000      	b.n	800a5ce <CircularQueue_Add+0x446>
    return NULL;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3738      	adds	r7, #56	; 0x38
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b085      	sub	sp, #20
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	891b      	ldrh	r3, [r3, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <CircularQueue_Remove+0x1e>
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	e000      	b.n	800a5f6 <CircularQueue_Remove+0x20>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	695b      	ldr	r3, [r3, #20]
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 80cc 	beq.w	800a79e <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	891b      	ldrh	r3, [r3, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d121      	bne.n	800a652 <CircularQueue_Remove+0x7c>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	4413      	add	r3, r2
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6819      	ldr	r1, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	1c58      	adds	r0, r3, #1
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	4298      	cmp	r0, r3
 800a62c:	d306      	bcc.n	800a63c <CircularQueue_Remove+0x66>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	68d8      	ldr	r0, [r3, #12]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	1ac3      	subs	r3, r0, r3
 800a638:	3301      	adds	r3, #1
 800a63a:	e002      	b.n	800a642 <CircularQueue_Remove+0x6c>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	3301      	adds	r3, #1
 800a642:	440b      	add	r3, r1
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	b29b      	uxth	r3, r3
 800a648:	021b      	lsls	r3, r3, #8
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	4413      	add	r3, r2
 800a64e:	b29b      	uxth	r3, r3
 800a650:	e001      	b.n	800a656 <CircularQueue_Remove+0x80>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	891b      	ldrh	r3, [r3, #8]
 800a656:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	7f1b      	ldrb	r3, [r3, #28]
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d057      	beq.n	800a714 <CircularQueue_Remove+0x13e>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	7f1b      	ldrb	r3, [r3, #28]
 800a668:	f003 0302 	and.w	r3, r3, #2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d151      	bne.n	800a714 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a670:	897b      	ldrh	r3, [r7, #10]
 800a672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a676:	4293      	cmp	r3, r2
 800a678:	d103      	bne.n	800a682 <CircularQueue_Remove+0xac>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	891b      	ldrh	r3, [r3, #8]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d012      	beq.n	800a6a8 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	68da      	ldr	r2, [r3, #12]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d942      	bls.n	800a714 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	891b      	ldrh	r3, [r3, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d03e      	beq.n	800a714 <CircularQueue_Remove+0x13e>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	685a      	ldr	r2, [r3, #4]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	8912      	ldrh	r2, [r2, #8]
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d235      	bcs.n	800a714 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	695a      	ldr	r2, [r3, #20]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68d9      	ldr	r1, [r3, #12]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	1acb      	subs	r3, r1, r3
 800a6b6:	441a      	add	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	891b      	ldrh	r3, [r3, #8]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d121      	bne.n	800a70e <CircularQueue_Remove+0x138>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6819      	ldr	r1, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	1c58      	adds	r0, r3, #1
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	4298      	cmp	r0, r3
 800a6e8:	d306      	bcc.n	800a6f8 <CircularQueue_Remove+0x122>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68d8      	ldr	r0, [r3, #12]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	1ac3      	subs	r3, r0, r3
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	e002      	b.n	800a6fe <CircularQueue_Remove+0x128>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	440b      	add	r3, r1
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	b29b      	uxth	r3, r3
 800a704:	021b      	lsls	r3, r3, #8
 800a706:	b29b      	uxth	r3, r3
 800a708:	4413      	add	r3, r2
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	e001      	b.n	800a712 <CircularQueue_Remove+0x13c>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	891b      	ldrh	r3, [r3, #8]
 800a712:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68d9      	ldr	r1, [r3, #12]
 800a71c:	7a7b      	ldrb	r3, [r7, #9]
 800a71e:	4419      	add	r1, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	4299      	cmp	r1, r3
 800a726:	d307      	bcc.n	800a738 <CircularQueue_Remove+0x162>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68d9      	ldr	r1, [r3, #12]
 800a72c:	7a7b      	ldrb	r3, [r7, #9]
 800a72e:	4419      	add	r1, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	1acb      	subs	r3, r1, r3
 800a736:	e003      	b.n	800a740 <CircularQueue_Remove+0x16a>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68d9      	ldr	r1, [r3, #12]
 800a73c:	7a7b      	ldrb	r3, [r7, #9]
 800a73e:	440b      	add	r3, r1
 800a740:	4413      	add	r3, r2
 800a742:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	8979      	ldrh	r1, [r7, #10]
 800a74a:	7a7a      	ldrb	r2, [r7, #9]
 800a74c:	440a      	add	r2, r1
 800a74e:	1a9a      	subs	r2, r3, r2
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01b      	beq.n	800a794 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68da      	ldr	r2, [r3, #12]
 800a760:	897b      	ldrh	r3, [r7, #10]
 800a762:	441a      	add	r2, r3
 800a764:	7a7b      	ldrb	r3, [r7, #9]
 800a766:	441a      	add	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d309      	bcc.n	800a784 <CircularQueue_Remove+0x1ae>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	68da      	ldr	r2, [r3, #12]
 800a774:	897b      	ldrh	r3, [r7, #10]
 800a776:	441a      	add	r2, r3
 800a778:	7a7b      	ldrb	r3, [r7, #9]
 800a77a:	441a      	add	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	e005      	b.n	800a790 <CircularQueue_Remove+0x1ba>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	68da      	ldr	r2, [r3, #12]
 800a788:	897b      	ldrh	r3, [r7, #10]
 800a78a:	441a      	add	r2, r3
 800a78c:	7a7b      	ldrb	r3, [r7, #9]
 800a78e:	4413      	add	r3, r2
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	1e5a      	subs	r2, r3, #1
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d002      	beq.n	800a7aa <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	897a      	ldrh	r2, [r7, #10]
 800a7a8:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b087      	sub	sp, #28
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	891b      	ldrh	r3, [r3, #8]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <CircularQueue_Sense+0x1e>
 800a7d2:	2302      	movs	r3, #2
 800a7d4:	e000      	b.n	800a7d8 <CircularQueue_Sense+0x20>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	695b      	ldr	r3, [r3, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 8090 	beq.w	800a90c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	891b      	ldrh	r3, [r3, #8]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d121      	bne.n	800a83e <CircularQueue_Sense+0x86>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	4413      	add	r3, r2
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	b29a      	uxth	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6819      	ldr	r1, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	1c58      	adds	r0, r3, #1
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	4298      	cmp	r0, r3
 800a818:	d306      	bcc.n	800a828 <CircularQueue_Sense+0x70>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68d8      	ldr	r0, [r3, #12]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	1ac3      	subs	r3, r0, r3
 800a824:	3301      	adds	r3, #1
 800a826:	e002      	b.n	800a82e <CircularQueue_Sense+0x76>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	3301      	adds	r3, #1
 800a82e:	440b      	add	r3, r1
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	b29b      	uxth	r3, r3
 800a834:	021b      	lsls	r3, r3, #8
 800a836:	b29b      	uxth	r3, r3
 800a838:	4413      	add	r3, r2
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	e001      	b.n	800a842 <CircularQueue_Sense+0x8a>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	891b      	ldrh	r3, [r3, #8]
 800a842:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	7f1b      	ldrb	r3, [r3, #28]
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d048      	beq.n	800a8e2 <CircularQueue_Sense+0x12a>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	7f1b      	ldrb	r3, [r3, #28]
 800a854:	f003 0302 	and.w	r3, r3, #2
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d142      	bne.n	800a8e2 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a85c:	8a7b      	ldrh	r3, [r7, #18]
 800a85e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a862:	4293      	cmp	r3, r2
 800a864:	d103      	bne.n	800a86e <CircularQueue_Sense+0xb6>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	891b      	ldrh	r3, [r3, #8]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d012      	beq.n	800a894 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68da      	ldr	r2, [r3, #12]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a876:	429a      	cmp	r2, r3
 800a878:	d933      	bls.n	800a8e2 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	891b      	ldrh	r3, [r3, #8]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d02f      	beq.n	800a8e2 <CircularQueue_Sense+0x12a>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	8912      	ldrh	r2, [r2, #8]
 800a890:	4293      	cmp	r3, r2
 800a892:	d226      	bcs.n	800a8e2 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	891b      	ldrh	r3, [r3, #8]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d11d      	bne.n	800a8dc <CircularQueue_Sense+0x124>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	b29a      	uxth	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6819      	ldr	r1, [r3, #0]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	1c58      	adds	r0, r3, #1
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	4298      	cmp	r0, r3
 800a8ba:	d305      	bcc.n	800a8c8 <CircularQueue_Sense+0x110>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	1ac3      	subs	r3, r0, r3
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	e001      	b.n	800a8cc <CircularQueue_Sense+0x114>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	440b      	add	r3, r1
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	021b      	lsls	r3, r3, #8
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	4413      	add	r3, r2
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	e001      	b.n	800a8e0 <CircularQueue_Sense+0x128>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	891b      	ldrh	r3, [r3, #8]
 800a8e0:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	7af9      	ldrb	r1, [r7, #11]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	4419      	add	r1, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	4299      	cmp	r1, r3
 800a8f2:	d306      	bcc.n	800a902 <CircularQueue_Sense+0x14a>
 800a8f4:	7af9      	ldrb	r1, [r7, #11]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	4419      	add	r1, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	1acb      	subs	r3, r1, r3
 800a900:	e002      	b.n	800a908 <CircularQueue_Sense+0x150>
 800a902:	7af9      	ldrb	r1, [r7, #11]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	440b      	add	r3, r1
 800a908:	4413      	add	r3, r2
 800a90a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	8a7a      	ldrh	r2, [r7, #18]
 800a916:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800a918:	697b      	ldr	r3, [r7, #20]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	371c      	adds	r7, #28
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
	...

0800a928 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a928:	b480      	push	{r7}
 800a92a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a92c:	4b03      	ldr	r3, [pc, #12]	; (800a93c <LL_FLASH_GetUDN+0x14>)
 800a92e:	681b      	ldr	r3, [r3, #0]
}
 800a930:	4618      	mov	r0, r3
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	1fff7580 	.word	0x1fff7580

0800a940 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a940:	b480      	push	{r7}
 800a942:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a944:	4b03      	ldr	r3, [pc, #12]	; (800a954 <LL_FLASH_GetDeviceID+0x14>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	b2db      	uxtb	r3, r3
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	1fff7584 	.word	0x1fff7584

0800a958 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800a95c:	4b03      	ldr	r3, [pc, #12]	; (800a96c <LL_FLASH_GetSTCompanyID+0x14>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	0a1b      	lsrs	r3, r3, #8
}
 800a962:	4618      	mov	r0, r3
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	1fff7584 	.word	0x1fff7584

0800a970 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800a970:	b5b0      	push	{r4, r5, r7, lr}
 800a972:	b090      	sub	sp, #64	; 0x40
 800a974:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a976:	2392      	movs	r3, #146	; 0x92
 800a978:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a97c:	4b31      	ldr	r3, [pc, #196]	; (800aa44 <APP_BLE_Init+0xd4>)
 800a97e:	1d3c      	adds	r4, r7, #4
 800a980:	461d      	mov	r5, r3
 800a982:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a98a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a98c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a98e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a992:	c403      	stmia	r4!, {r0, r1}
 800a994:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800a996:	f000 fa85 	bl	800aea4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a99a:	2101      	movs	r1, #1
 800a99c:	2002      	movs	r0, #2
 800a99e:	f001 fc49 	bl	800c234 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a9a2:	4a29      	ldr	r2, [pc, #164]	; (800aa48 <APP_BLE_Init+0xd8>)
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	2010      	movs	r0, #16
 800a9a8:	f001 fd70 	bl	800c48c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800a9ac:	1d3b      	adds	r3, r7, #4
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fe fc0e 	bl	80091d0 <SHCI_C2_BLE_Init>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800a9ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d008      	beq.n	800a9d4 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800a9c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4820      	ldr	r0, [pc, #128]	; (800aa4c <APP_BLE_Init+0xdc>)
 800a9ca:	f001 ff63 	bl	800c894 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800a9ce:	f7f7 fc81 	bl	80022d4 <Error_Handler>
 800a9d2:	e002      	b.n	800a9da <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800a9d4:	481e      	ldr	r0, [pc, #120]	; (800aa50 <APP_BLE_Init+0xe0>)
 800a9d6:	f001 ff5d 	bl	800c894 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a9da:	f000 fa79 	bl	800aed0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a9de:	f7fe fb35 	bl	800904c <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800a9e2:	4a1c      	ldr	r2, [pc, #112]	; (800aa54 <APP_BLE_Init+0xe4>)
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	2001      	movs	r0, #1
 800a9e8:	f001 fd50 	bl	800c48c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 800a9ec:	4a1a      	ldr	r2, [pc, #104]	; (800aa58 <APP_BLE_Init+0xe8>)
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	2002      	movs	r0, #2
 800a9f2:	f001 fd4b 	bl	800c48c <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a9f6:	4b19      	ldr	r3, [pc, #100]	; (800aa5c <APP_BLE_Init+0xec>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  ret = aci_hal_set_radio_activity_mask(0x0020);
 800a9fe:	2020      	movs	r0, #32
 800aa00:	f7fe f949 	bl	8008c96 <aci_hal_set_radio_activity_mask>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800aa0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d006      	beq.n	800aa20 <APP_BLE_Init+0xb0>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800aa12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa16:	4619      	mov	r1, r3
 800aa18:	4811      	ldr	r0, [pc, #68]	; (800aa60 <APP_BLE_Init+0xf0>)
 800aa1a:	f001 ff3b 	bl	800c894 <iprintf>
 800aa1e:	e002      	b.n	800aa26 <APP_BLE_Init+0xb6>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800aa20:	4810      	ldr	r0, [pc, #64]	; (800aa64 <APP_BLE_Init+0xf4>)
 800aa22:	f001 ff37 	bl	800c894 <iprintf>
  }
  APP_DBG_MSG("\n");
 800aa26:	200a      	movs	r0, #10
 800aa28:	f001 ff46 	bl	800c8b8 <putchar>
#endif
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 800aa2c:	f000 fce2 	bl	800b3f4 <P2PC_APP_Init>
  /* USER CODE BEGIN APP_BLE_Init_3 */

  /* USER CODE END APP_BLE_Init_3 */

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800aa30:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <APP_BLE_Init+0xf8>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	490d      	ldr	r1, [pc, #52]	; (800aa6c <APP_BLE_Init+0xfc>)
 800aa36:	2000      	movs	r0, #0
 800aa38:	f7f7 f86e 	bl	8001b18 <HW_TS_Create>
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */
  return;
 800aa3c:	bf00      	nop
}
 800aa3e:	3740      	adds	r7, #64	; 0x40
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bdb0      	pop	{r4, r5, r7, pc}
 800aa44:	0800dbf8 	.word	0x0800dbf8
 800aa48:	080093ed 	.word	0x080093ed
 800aa4c:	0800db1c 	.word	0x0800db1c
 800aa50:	0800db54 	.word	0x0800db54
 800aa54:	0800b1c1 	.word	0x0800b1c1
 800aa58:	0800b225 	.word	0x0800b225
 800aa5c:	200015ac 	.word	0x200015ac
 800aa60:	0800db7c 	.word	0x0800db7c
 800aa64:	0800dbc0 	.word	0x0800dbc0
 800aa68:	0800b2a9 	.word	0x0800b2a9
 800aa6c:	2000162d 	.word	0x2000162d

0800aa70 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 800aa70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa72:	b097      	sub	sp, #92	; 0x5c
 800aa74:	af06      	add	r7, sp, #24
 800aa76:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blecore_aci *blecore_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa80:	3302      	adds	r3, #2
 800aa82:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
#if (OOB_DEMO != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800aa88:	2392      	movs	r3, #146	; 0x92
 800aa8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif

  switch (event_pckt->evt)
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	2bff      	cmp	r3, #255	; 0xff
 800aa94:	d009      	beq.n	800aaaa <SVCCTL_App_Notification+0x3a>
 800aa96:	2bff      	cmp	r3, #255	; 0xff
 800aa98:	f300 81bc 	bgt.w	800ae14 <SVCCTL_App_Notification+0x3a4>
 800aa9c:	2b05      	cmp	r3, #5
 800aa9e:	f000 80ce 	beq.w	800ac3e <SVCCTL_App_Notification+0x1ce>
 800aaa2:	2b3e      	cmp	r3, #62	; 0x3e
 800aaa4:	f000 80e9 	beq.w	800ac7a <SVCCTL_App_Notification+0x20a>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 800aaa8:	e1b4      	b.n	800ae14 <SVCCTL_App_Notification+0x3a4>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800aaaa:	4ba6      	ldr	r3, [pc, #664]	; (800ad44 <SVCCTL_App_Notification+0x2d4>)
 800aaac:	2201      	movs	r2, #1
 800aaae:	701a      	strb	r2, [r3, #0]
        blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800aab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab2:	3302      	adds	r3, #2
 800aab4:	62fb      	str	r3, [r7, #44]	; 0x2c
        switch (blecore_evt->ecode)
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	f640 0202 	movw	r2, #2050	; 0x802
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d033      	beq.n	800ab2c <SVCCTL_App_Notification+0xbc>
 800aac4:	f640 0202 	movw	r2, #2050	; 0x802
 800aac8:	4293      	cmp	r3, r2
 800aaca:	f300 80b4 	bgt.w	800ac36 <SVCCTL_App_Notification+0x1c6>
 800aace:	2b04      	cmp	r3, #4
 800aad0:	f000 80a6 	beq.w	800ac20 <SVCCTL_App_Notification+0x1b0>
 800aad4:	f240 4207 	movw	r2, #1031	; 0x407
 800aad8:	4293      	cmp	r3, r2
 800aada:	f040 80ac 	bne.w	800ac36 <SVCCTL_App_Notification+0x1c6>
              aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blecore_evt->data;
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	3302      	adds	r3, #2
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
              if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	f040 80a6 	bne.w	800ac3a <SVCCTL_App_Notification+0x1ca>
                  && gap_evt_proc_complete->Status == 0x00)
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf0:	785b      	ldrb	r3, [r3, #1]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f040 80a1 	bne.w	800ac3a <SVCCTL_App_Notification+0x1ca>
                BSP_LED_Off(LED_BLUE);
 800aaf8:	2000      	movs	r0, #0
 800aafa:	f7f7 fed1 	bl	80028a0 <BSP_LED_Off>
                APP_DBG_MSG("LED BLUE OFF\n");
 800aafe:	4892      	ldr	r0, [pc, #584]	; (800ad48 <SVCCTL_App_Notification+0x2d8>)
 800ab00:	f001 ff36 	bl	800c970 <puts>
                APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n\r");
 800ab04:	4891      	ldr	r0, [pc, #580]	; (800ad4c <SVCCTL_App_Notification+0x2dc>)
 800ab06:	f001 fec5 	bl	800c894 <iprintf>
                if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800ab0a:	4b91      	ldr	r3, [pc, #580]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800ab0c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	f040 8092 	bne.w	800ac3a <SVCCTL_App_Notification+0x1ca>
 800ab16:	4b8e      	ldr	r3, [pc, #568]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800ab18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab1c:	2b06      	cmp	r3, #6
 800ab1e:	f000 808c 	beq.w	800ac3a <SVCCTL_App_Notification+0x1ca>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800ab22:	2100      	movs	r1, #0
 800ab24:	2002      	movs	r0, #2
 800ab26:	f001 fcd3 	bl	800c4d0 <UTIL_SEQ_SetTask>
            break;
 800ab2a:	e086      	b.n	800ac3a <SVCCTL_App_Notification+0x1ca>
              aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blecore_evt->data;
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	3302      	adds	r3, #2
 800ab30:	62bb      	str	r3, [r7, #40]	; 0x28
              ret = aci_hal_set_radio_activity_mask(0x0000);
 800ab32:	2000      	movs	r0, #0
 800ab34:	f7fe f8af 	bl	8008c96 <aci_hal_set_radio_activity_mask>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 800ab3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d006      	beq.n	800ab54 <SVCCTL_App_Notification+0xe4>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800ab46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4881      	ldr	r0, [pc, #516]	; (800ad54 <SVCCTL_App_Notification+0x2e4>)
 800ab4e:	f001 fea1 	bl	800c894 <iprintf>
 800ab52:	e002      	b.n	800ab5a <SVCCTL_App_Notification+0xea>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800ab54:	4880      	ldr	r0, [pc, #512]	; (800ad58 <SVCCTL_App_Notification+0x2e8>)
 800ab56:	f001 fe9d 	bl	800c894 <iprintf>
              APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	789a      	ldrb	r2, [r3, #2]
 800ab5e:	4b7f      	ldr	r3, [pc, #508]	; (800ad5c <SVCCTL_App_Notification+0x2ec>)
 800ab60:	701a      	strb	r2, [r3, #0]
              APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	4b7c      	ldr	r3, [pc, #496]	; (800ad5c <SVCCTL_App_Notification+0x2ec>)
 800ab6c:	805a      	strh	r2, [r3, #2]
              APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	4b79      	ldr	r3, [pc, #484]	; (800ad5c <SVCCTL_App_Notification+0x2ec>)
 800ab78:	809a      	strh	r2, [r3, #4]
              APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 800ab7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	4b76      	ldr	r3, [pc, #472]	; (800ad5c <SVCCTL_App_Notification+0x2ec>)
 800ab84:	80da      	strh	r2, [r3, #6]
              APP_BLE_p2p_Conn_Update_req.Latency = pr->Latency;
 800ab86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab88:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	4b73      	ldr	r3, [pc, #460]	; (800ad5c <SVCCTL_App_Notification+0x2ec>)
 800ab90:	811a      	strh	r2, [r3, #8]
              APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 800ab92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab94:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	4b70      	ldr	r3, [pc, #448]	; (800ad5c <SVCCTL_App_Notification+0x2ec>)
 800ab9c:	815a      	strh	r2, [r3, #10]
              ret = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800ab9e:	4b6c      	ldr	r3, [pc, #432]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800aba0:	8ad8      	ldrh	r0, [r3, #22]
 800aba2:	4b6e      	ldr	r3, [pc, #440]	; (800ad5c <SVCCTL_App_Notification+0x2ec>)
 800aba4:	8899      	ldrh	r1, [r3, #4]
 800aba6:	4b6d      	ldr	r3, [pc, #436]	; (800ad5c <SVCCTL_App_Notification+0x2ec>)
 800aba8:	88dc      	ldrh	r4, [r3, #6]
 800abaa:	4b6c      	ldr	r3, [pc, #432]	; (800ad5c <SVCCTL_App_Notification+0x2ec>)
 800abac:	891d      	ldrh	r5, [r3, #8]
 800abae:	4b6b      	ldr	r3, [pc, #428]	; (800ad5c <SVCCTL_App_Notification+0x2ec>)
 800abb0:	895b      	ldrh	r3, [r3, #10]
 800abb2:	4a6a      	ldr	r2, [pc, #424]	; (800ad5c <SVCCTL_App_Notification+0x2ec>)
 800abb4:	7812      	ldrb	r2, [r2, #0]
 800abb6:	2601      	movs	r6, #1
 800abb8:	9604      	str	r6, [sp, #16]
 800abba:	9203      	str	r2, [sp, #12]
 800abbc:	2210      	movs	r2, #16
 800abbe:	9202      	str	r2, [sp, #8]
 800abc0:	2210      	movs	r2, #16
 800abc2:	9201      	str	r2, [sp, #4]
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	462b      	mov	r3, r5
 800abc8:	4622      	mov	r2, r4
 800abca:	f7fe f8dc 	bl	8008d86 <aci_l2cap_connection_parameter_update_resp>
 800abce:	4603      	mov	r3, r0
 800abd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if(ret != BLE_STATUS_SUCCESS)
 800abd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d009      	beq.n	800abf0 <SVCCTL_App_Notification+0x180>
                APP_DBG_MSG("  Fail   : aci_l2cap_connection_parameter_update_resp command, result: 0x%x \n\r", ret);
 800abdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800abe0:	4619      	mov	r1, r3
 800abe2:	485f      	ldr	r0, [pc, #380]	; (800ad60 <SVCCTL_App_Notification+0x2f0>)
 800abe4:	f001 fe56 	bl	800c894 <iprintf>
                BSP_LED_On(LED_RED);
 800abe8:	2002      	movs	r0, #2
 800abea:	f7f7 fe3f 	bl	800286c <BSP_LED_On>
 800abee:	e002      	b.n	800abf6 <SVCCTL_App_Notification+0x186>
                APP_DBG_MSG("  Success: aci_l2cap_connection_parameter_update_resp command\n\r");
 800abf0:	485c      	ldr	r0, [pc, #368]	; (800ad64 <SVCCTL_App_Notification+0x2f4>)
 800abf2:	f001 fe4f 	bl	800c894 <iprintf>
              ret = aci_hal_set_radio_activity_mask(0x0020);
 800abf6:	2020      	movs	r0, #32
 800abf8:	f7fe f84d 	bl	8008c96 <aci_hal_set_radio_activity_mask>
 800abfc:	4603      	mov	r3, r0
 800abfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 800ac02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d006      	beq.n	800ac18 <SVCCTL_App_Notification+0x1a8>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800ac0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac0e:	4619      	mov	r1, r3
 800ac10:	4850      	ldr	r0, [pc, #320]	; (800ad54 <SVCCTL_App_Notification+0x2e4>)
 800ac12:	f001 fe3f 	bl	800c894 <iprintf>
            break;
 800ac16:	e011      	b.n	800ac3c <SVCCTL_App_Notification+0x1cc>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800ac18:	484f      	ldr	r0, [pc, #316]	; (800ad58 <SVCCTL_App_Notification+0x2e8>)
 800ac1a:	f001 fe3b 	bl	800c894 <iprintf>
            break;
 800ac1e:	e00d      	b.n	800ac3c <SVCCTL_App_Notification+0x1cc>
              BSP_LED_On(LED_GREEN);
 800ac20:	2001      	movs	r0, #1
 800ac22:	f7f7 fe23 	bl	800286c <BSP_LED_On>
              HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800ac26:	4b4a      	ldr	r3, [pc, #296]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800ac28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ac2c:	210a      	movs	r1, #10
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f7 f870 	bl	8001d14 <HW_TS_Start>
            break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800ac34:	e002      	b.n	800ac3c <SVCCTL_App_Notification+0x1cc>
            break;
 800ac36:	bf00      	nop
 800ac38:	e0ef      	b.n	800ae1a <SVCCTL_App_Notification+0x3aa>
            break;
 800ac3a:	bf00      	nop
      break;
 800ac3c:	e0ed      	b.n	800ae1a <SVCCTL_App_Notification+0x3aa>
        if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ac3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac40:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	4b42      	ldr	r3, [pc, #264]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800ac48:	8adb      	ldrh	r3, [r3, #22]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	f040 80e4 	bne.w	800ae18 <SVCCTL_App_Notification+0x3a8>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ac50:	4b3f      	ldr	r3, [pc, #252]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ac56:	4b3e      	ldr	r3, [pc, #248]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n\r");
 800ac5e:	4842      	ldr	r0, [pc, #264]	; (800ad68 <SVCCTL_App_Notification+0x2f8>)
 800ac60:	f001 fe18 	bl	800c894 <iprintf>
          handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800ac64:	4b37      	ldr	r3, [pc, #220]	; (800ad44 <SVCCTL_App_Notification+0x2d4>)
 800ac66:	2201      	movs	r2, #1
 800ac68:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ac6a:	4b39      	ldr	r3, [pc, #228]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800ac6c:	8ada      	ldrh	r2, [r3, #22]
 800ac6e:	4b35      	ldr	r3, [pc, #212]	; (800ad44 <SVCCTL_App_Notification+0x2d4>)
 800ac70:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 800ac72:	4834      	ldr	r0, [pc, #208]	; (800ad44 <SVCCTL_App_Notification+0x2d4>)
 800ac74:	f000 fc04 	bl	800b480 <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ac78:	e0ce      	b.n	800ae18 <SVCCTL_App_Notification+0x3a8>
        meta_evt = (evt_le_meta_event*) event_pckt->data;
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7c:	3302      	adds	r3, #2
 800ac7e:	623b      	str	r3, [r7, #32]
        switch (meta_evt->subevent)
 800ac80:	6a3b      	ldr	r3, [r7, #32]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d002      	beq.n	800ac8e <SVCCTL_App_Notification+0x21e>
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	d02f      	beq.n	800acec <SVCCTL_App_Notification+0x27c>
            break;
 800ac8c:	e0c1      	b.n	800ae12 <SVCCTL_App_Notification+0x3a2>
            connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	3301      	adds	r3, #1
 800ac92:	60fb      	str	r3, [r7, #12]
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	4b2c      	ldr	r3, [pc, #176]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800ac9e:	82da      	strh	r2, [r3, #22]
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800aca0:	4b2b      	ldr	r3, [pc, #172]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800aca2:	2206      	movs	r2, #6
 800aca4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            APP_DBG_MSG("\r\n\r**  CONNECTION COMPLETE EVENT WITH SERVER \n\r");
 800aca8:	4830      	ldr	r0, [pc, #192]	; (800ad6c <SVCCTL_App_Notification+0x2fc>)
 800acaa:	f001 fdf3 	bl	800c894 <iprintf>
            handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800acae:	4b25      	ldr	r3, [pc, #148]	; (800ad44 <SVCCTL_App_Notification+0x2d4>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800acb4:	4b26      	ldr	r3, [pc, #152]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800acb6:	8ada      	ldrh	r2, [r3, #22]
 800acb8:	4b22      	ldr	r3, [pc, #136]	; (800ad44 <SVCCTL_App_Notification+0x2d4>)
 800acba:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 800acbc:	4821      	ldr	r0, [pc, #132]	; (800ad44 <SVCCTL_App_Notification+0x2d4>)
 800acbe:	f000 fbdf 	bl	800b480 <P2PC_APP_Notification>
            result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800acc2:	4b23      	ldr	r3, [pc, #140]	; (800ad50 <SVCCTL_App_Notification+0x2e0>)
 800acc4:	8adb      	ldrh	r3, [r3, #22]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fd fc64 	bl	8008594 <aci_gatt_disc_all_primary_services>
 800accc:	4603      	mov	r3, r0
 800acce:	72fb      	strb	r3, [r7, #11]
            if (result == BLE_STATUS_SUCCESS)
 800acd0:	7afb      	ldrb	r3, [r7, #11]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d106      	bne.n	800ace4 <SVCCTL_App_Notification+0x274>
              APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n\r");
 800acd6:	4826      	ldr	r0, [pc, #152]	; (800ad70 <SVCCTL_App_Notification+0x300>)
 800acd8:	f001 fddc 	bl	800c894 <iprintf>
              APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 800acdc:	4825      	ldr	r0, [pc, #148]	; (800ad74 <SVCCTL_App_Notification+0x304>)
 800acde:	f001 fdd9 	bl	800c894 <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800ace2:	e096      	b.n	800ae12 <SVCCTL_App_Notification+0x3a2>
              APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 800ace4:	4824      	ldr	r0, [pc, #144]	; (800ad78 <SVCCTL_App_Notification+0x308>)
 800ace6:	f001 fdd5 	bl	800c894 <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800acea:	e092      	b.n	800ae12 <SVCCTL_App_Notification+0x3a2>
              le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	3301      	adds	r3, #1
 800acf0:	61fb      	str	r3, [r7, #28]
              event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	785b      	ldrb	r3, [r3, #1]
 800acf6:	76fb      	strb	r3, [r7, #27]
              event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	7a5b      	ldrb	r3, [r3, #9]
 800acfc:	76bb      	strb	r3, [r7, #26]
              adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	3309      	adds	r3, #9
 800ad02:	3301      	adds	r3, #1
 800ad04:	617b      	str	r3, [r7, #20]
              k = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	63fb      	str	r3, [r7, #60]	; 0x3c
              if (event_type == ADV_IND)
 800ad0a:	7efb      	ldrb	r3, [r7, #27]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d17f      	bne.n	800ae10 <SVCCTL_App_Notification+0x3a0>
                while(k < event_data_size)
 800ad10:	e07a      	b.n	800ae08 <SVCCTL_App_Notification+0x398>
                  adlength = adv_report_data[k];
 800ad12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	4413      	add	r3, r2
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	74fb      	strb	r3, [r7, #19]
                  adtype = adv_report_data[k + 1];
 800ad1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad1e:	3301      	adds	r3, #1
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	4413      	add	r3, r2
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	74bb      	strb	r3, [r7, #18]
                  switch (adtype)
 800ad28:	7cbb      	ldrb	r3, [r7, #18]
 800ad2a:	2bff      	cmp	r3, #255	; 0xff
 800ad2c:	d026      	beq.n	800ad7c <SVCCTL_App_Notification+0x30c>
 800ad2e:	2bff      	cmp	r3, #255	; 0xff
 800ad30:	dc5e      	bgt.n	800adf0 <SVCCTL_App_Notification+0x380>
 800ad32:	2b16      	cmp	r3, #22
 800ad34:	d05e      	beq.n	800adf4 <SVCCTL_App_Notification+0x384>
 800ad36:	2b16      	cmp	r3, #22
 800ad38:	dc5a      	bgt.n	800adf0 <SVCCTL_App_Notification+0x380>
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d05c      	beq.n	800adf8 <SVCCTL_App_Notification+0x388>
 800ad3e:	2b0a      	cmp	r3, #10
                      break;
 800ad40:	e05d      	b.n	800adfe <SVCCTL_App_Notification+0x38e>
 800ad42:	bf00      	nop
 800ad44:	200015a8 	.word	0x200015a8
 800ad48:	0800dc34 	.word	0x0800dc34
 800ad4c:	0800dc44 	.word	0x0800dc44
 800ad50:	200015ac 	.word	0x200015ac
 800ad54:	0800db7c 	.word	0x0800db7c
 800ad58:	0800dbc0 	.word	0x0800dbc0
 800ad5c:	20001630 	.word	0x20001630
 800ad60:	0800dc74 	.word	0x0800dc74
 800ad64:	0800dcc4 	.word	0x0800dcc4
 800ad68:	0800dd04 	.word	0x0800dd04
 800ad6c:	0800dd30 	.word	0x0800dd30
 800ad70:	0800dd60 	.word	0x0800dd60
 800ad74:	0800dd94 	.word	0x0800dd94
 800ad78:	0800ddc4 	.word	0x0800ddc4
                      if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800ad7c:	7cfb      	ldrb	r3, [r7, #19]
 800ad7e:	2b06      	cmp	r3, #6
 800ad80:	d93c      	bls.n	800adfc <SVCCTL_App_Notification+0x38c>
 800ad82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad84:	3302      	adds	r3, #2
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	4413      	add	r3, r2
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d135      	bne.n	800adfc <SVCCTL_App_Notification+0x38c>
                        APP_DBG_MSG("--- ST MANUFACTURER ID --- \n\r");
 800ad90:	4824      	ldr	r0, [pc, #144]	; (800ae24 <SVCCTL_App_Notification+0x3b4>)
 800ad92:	f001 fd7f 	bl	800c894 <iprintf>
                        switch (adv_report_data[k + 3])
 800ad96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad98:	3303      	adds	r3, #3
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	2b83      	cmp	r3, #131	; 0x83
 800ada2:	d123      	bne.n	800adec <SVCCTL_App_Notification+0x37c>
                           APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n\r");
 800ada4:	4820      	ldr	r0, [pc, #128]	; (800ae28 <SVCCTL_App_Notification+0x3b8>)
 800ada6:	f001 fd75 	bl	800c894 <iprintf>
                           BleApplicationContext.DeviceServerFound = 0x01;
 800adaa:	4b20      	ldr	r3, [pc, #128]	; (800ae2c <SVCCTL_App_Notification+0x3bc>)
 800adac:	2201      	movs	r2, #1
 800adae:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                           SERVER_REMOTE_ADDR_TYPE = le_advertising_event->Advertising_Report[0].Address_Type;
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	789a      	ldrb	r2, [r3, #2]
 800adb6:	4b1e      	ldr	r3, [pc, #120]	; (800ae30 <SVCCTL_App_Notification+0x3c0>)
 800adb8:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	78da      	ldrb	r2, [r3, #3]
 800adbe:	4b1d      	ldr	r3, [pc, #116]	; (800ae34 <SVCCTL_App_Notification+0x3c4>)
 800adc0:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	791a      	ldrb	r2, [r3, #4]
 800adc6:	4b1b      	ldr	r3, [pc, #108]	; (800ae34 <SVCCTL_App_Notification+0x3c4>)
 800adc8:	705a      	strb	r2, [r3, #1]
                           SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	795a      	ldrb	r2, [r3, #5]
 800adce:	4b19      	ldr	r3, [pc, #100]	; (800ae34 <SVCCTL_App_Notification+0x3c4>)
 800add0:	709a      	strb	r2, [r3, #2]
                           SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	799a      	ldrb	r2, [r3, #6]
 800add6:	4b17      	ldr	r3, [pc, #92]	; (800ae34 <SVCCTL_App_Notification+0x3c4>)
 800add8:	70da      	strb	r2, [r3, #3]
                           SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	79da      	ldrb	r2, [r3, #7]
 800adde:	4b15      	ldr	r3, [pc, #84]	; (800ae34 <SVCCTL_App_Notification+0x3c4>)
 800ade0:	711a      	strb	r2, [r3, #4]
                           SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	7a1a      	ldrb	r2, [r3, #8]
 800ade6:	4b13      	ldr	r3, [pc, #76]	; (800ae34 <SVCCTL_App_Notification+0x3c4>)
 800ade8:	715a      	strb	r2, [r3, #5]
                           break;
 800adea:	e000      	b.n	800adee <SVCCTL_App_Notification+0x37e>
                            break;
 800adec:	bf00      	nop
                      break;
 800adee:	e005      	b.n	800adfc <SVCCTL_App_Notification+0x38c>
                      break;
 800adf0:	bf00      	nop
 800adf2:	e004      	b.n	800adfe <SVCCTL_App_Notification+0x38e>
                      break;
 800adf4:	bf00      	nop
 800adf6:	e002      	b.n	800adfe <SVCCTL_App_Notification+0x38e>
                      break;
 800adf8:	bf00      	nop
 800adfa:	e000      	b.n	800adfe <SVCCTL_App_Notification+0x38e>
                      break;
 800adfc:	bf00      	nop
                  k += adlength + 1;
 800adfe:	7cfb      	ldrb	r3, [r7, #19]
 800ae00:	3301      	adds	r3, #1
 800ae02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae04:	4413      	add	r3, r2
 800ae06:	63fb      	str	r3, [r7, #60]	; 0x3c
                while(k < event_data_size)
 800ae08:	7ebb      	ldrb	r3, [r7, #26]
 800ae0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	db80      	blt.n	800ad12 <SVCCTL_App_Notification+0x2a2>
            break;
 800ae10:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800ae12:	e002      	b.n	800ae1a <SVCCTL_App_Notification+0x3aa>
      break;
 800ae14:	bf00      	nop
 800ae16:	e000      	b.n	800ae1a <SVCCTL_App_Notification+0x3aa>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ae18:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ae1a:	2301      	movs	r3, #1
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3744      	adds	r7, #68	; 0x44
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae24:	0800de04 	.word	0x0800de04
 800ae28:	0800de24 	.word	0x0800de24
 800ae2c:	200015ac 	.word	0x200015ac
 800ae30:	200015a6 	.word	0x200015a6
 800ae34:	200015a0 	.word	0x200015a0

0800ae38 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status(uint16_t Connection_Handle)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	80fb      	strh	r3, [r7, #6]
  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800ae42:	4b08      	ldr	r3, [pc, #32]	; (800ae64 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800ae44:	8adb      	ldrh	r3, [r3, #22]
 800ae46:	88fa      	ldrh	r2, [r7, #6]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d103      	bne.n	800ae54 <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 800ae4c:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800ae4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae52:	e000      	b.n	800ae56 <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	200015ac 	.word	0x200015ac

0800ae68 <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0 
  P2PC_APP_SW1_Button_Action();
#else 
  if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 800ae6c:	f000 fe50 	bl	800bb10 <P2P_Client_APP_Get_State>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b06      	cmp	r3, #6
 800ae74:	d004      	beq.n	800ae80 <APP_BLE_Key_Button1_Action+0x18>
  {
    UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 800ae76:	2100      	movs	r1, #0
 800ae78:	2001      	movs	r0, #1
 800ae7a:	f001 fb29 	bl	800c4d0 <UTIL_SEQ_SetTask>
  else 
  {
    P2PC_APP_SW1_Button_Action();
  }   
#endif 
}
 800ae7e:	e001      	b.n	800ae84 <APP_BLE_Key_Button1_Action+0x1c>
    P2PC_APP_SW1_Button_Action();
 800ae80:	f000 fb30 	bl	800b4e4 <P2PC_APP_SW1_Button_Action>
}
 800ae84:	bf00      	nop
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	af00      	add	r7, sp, #0
}
 800ae8c:	bf00      	nop
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr

0800ae96 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800ae96:	b480      	push	{r7}
 800ae98:	af00      	add	r7, sp, #0
}
 800ae9a:	bf00      	nop
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800aeaa:	4b06      	ldr	r3, [pc, #24]	; (800aec4 <Ble_Tl_Init+0x20>)
 800aeac:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800aeae:	4b06      	ldr	r3, [pc, #24]	; (800aec8 <Ble_Tl_Init+0x24>)
 800aeb0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800aeb2:	463b      	mov	r3, r7
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	4805      	ldr	r0, [pc, #20]	; (800aecc <Ble_Tl_Init+0x28>)
 800aeb8:	f7fe fa7c 	bl	80093b4 <hci_init>

  return;
 800aebc:	bf00      	nop
}
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	200300d8 	.word	0x200300d8
 800aec8:	0800b3bd 	.word	0x0800b3bd
 800aecc:	0800b385 	.word	0x0800b385

0800aed0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800aed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aed2:	b08d      	sub	sp, #52	; 0x34
 800aed4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;

  uint16_t a_appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800aed6:	2300      	movs	r3, #0
 800aed8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800aeda:	2392      	movs	r3, #146	; 0x92
 800aedc:	75fb      	strb	r3, [r7, #23]

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800aede:	489c      	ldr	r0, [pc, #624]	; (800b150 <Ble_Hci_Gap_Gatt_Init+0x280>)
 800aee0:	f001 fd46 	bl	800c970 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800aee4:	f7fd ff2b 	bl	8008d3e <hci_reset>
 800aee8:	4603      	mov	r3, r0
 800aeea:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d005      	beq.n	800aefe <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	4619      	mov	r1, r3
 800aef6:	4897      	ldr	r0, [pc, #604]	; (800b154 <Ble_Hci_Gap_Gatt_Init+0x284>)
 800aef8:	f001 fccc 	bl	800c894 <iprintf>
 800aefc:	e002      	b.n	800af04 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800aefe:	4896      	ldr	r0, [pc, #600]	; (800b158 <Ble_Hci_Gap_Gatt_Init+0x288>)
 800af00:	f001 fd36 	bl	800c970 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800af04:	f000 f9d8 	bl	800b2b8 <BleGetBdAddress>
 800af08:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	2106      	movs	r1, #6
 800af0e:	2000      	movs	r0, #0
 800af10:	f7fd fdd5 	bl	8008abe <aci_hal_write_config_data>
 800af14:	4603      	mov	r3, r0
 800af16:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800af18:	7dfb      	ldrb	r3, [r7, #23]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d005      	beq.n	800af2a <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800af1e:	7dfb      	ldrb	r3, [r7, #23]
 800af20:	4619      	mov	r1, r3
 800af22:	488e      	ldr	r0, [pc, #568]	; (800b15c <Ble_Hci_Gap_Gatt_Init+0x28c>)
 800af24:	f001 fcb6 	bl	800c894 <iprintf>
 800af28:	e021      	b.n	800af6e <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
   else
   {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800af2a:	488d      	ldr	r0, [pc, #564]	; (800b160 <Ble_Hci_Gap_Gatt_Init+0x290>)
 800af2c:	f001 fd20 	bl	800c970 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	3305      	adds	r3, #5
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	4618      	mov	r0, r3
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	3304      	adds	r3, #4
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	461c      	mov	r4, r3
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	3303      	adds	r3, #3
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	461d      	mov	r5, r3
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	3302      	adds	r3, #2
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	3301      	adds	r3, #1
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	4619      	mov	r1, r3
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	9302      	str	r3, [sp, #8]
 800af5e:	9101      	str	r1, [sp, #4]
 800af60:	9200      	str	r2, [sp, #0]
 800af62:	462b      	mov	r3, r5
 800af64:	4622      	mov	r2, r4
 800af66:	4601      	mov	r1, r0
 800af68:	487e      	ldr	r0, [pc, #504]	; (800b164 <Ble_Hci_Gap_Gatt_Init+0x294>)
 800af6a:	f001 fc93 	bl	800c894 <iprintf>
   }

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800af6e:	4a7e      	ldr	r2, [pc, #504]	; (800b168 <Ble_Hci_Gap_Gatt_Init+0x298>)
 800af70:	2110      	movs	r1, #16
 800af72:	2018      	movs	r0, #24
 800af74:	f7fd fda3 	bl	8008abe <aci_hal_write_config_data>
 800af78:	4603      	mov	r3, r0
 800af7a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800af7c:	7dfb      	ldrb	r3, [r7, #23]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d005      	beq.n	800af8e <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	4619      	mov	r1, r3
 800af86:	4879      	ldr	r0, [pc, #484]	; (800b16c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800af88:	f001 fc84 	bl	800c894 <iprintf>
 800af8c:	e002      	b.n	800af94 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800af8e:	4878      	ldr	r0, [pc, #480]	; (800b170 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800af90:	f001 fcee 	bl	800c970 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800af94:	4a77      	ldr	r2, [pc, #476]	; (800b174 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800af96:	2110      	movs	r1, #16
 800af98:	2008      	movs	r0, #8
 800af9a:	f7fd fd90 	bl	8008abe <aci_hal_write_config_data>
 800af9e:	4603      	mov	r3, r0
 800afa0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d005      	beq.n	800afb4 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
 800afaa:	4619      	mov	r1, r3
 800afac:	4872      	ldr	r0, [pc, #456]	; (800b178 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800afae:	f001 fc71 	bl	800c894 <iprintf>
 800afb2:	e002      	b.n	800afba <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800afb4:	4871      	ldr	r0, [pc, #452]	; (800b17c <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800afb6:	f001 fcdb 	bl	800c970 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800afba:	2118      	movs	r1, #24
 800afbc:	2001      	movs	r0, #1
 800afbe:	f7fd fe03 	bl	8008bc8 <aci_hal_set_tx_power_level>
 800afc2:	4603      	mov	r3, r0
 800afc4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d005      	beq.n	800afd8 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	4619      	mov	r1, r3
 800afd0:	486b      	ldr	r0, [pc, #428]	; (800b180 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800afd2:	f001 fc5f 	bl	800c894 <iprintf>
 800afd6:	e002      	b.n	800afde <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800afd8:	486a      	ldr	r0, [pc, #424]	; (800b184 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800afda:	f001 fcc9 	bl	800c970 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800afde:	f7fd fa0b 	bl	80083f8 <aci_gatt_init>
 800afe2:	4603      	mov	r3, r0
 800afe4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800afe6:	7dfb      	ldrb	r3, [r7, #23]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d005      	beq.n	800aff8 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800afec:	7dfb      	ldrb	r3, [r7, #23]
 800afee:	4619      	mov	r1, r3
 800aff0:	4865      	ldr	r0, [pc, #404]	; (800b188 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800aff2:	f001 fc4f 	bl	800c894 <iprintf>
 800aff6:	e002      	b.n	800affe <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800aff8:	4864      	ldr	r0, [pc, #400]	; (800b18c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800affa:	f001 fcb9 	bl	800c970 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif /* BLE_CFG_PERIPHERAL == 1 */

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800b002:	7bfb      	ldrb	r3, [r7, #15]
 800b004:	f043 0304 	orr.w	r3, r3, #4
 800b008:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d02b      	beq.n	800b068 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = "P2P_C";
 800b010:	4b5f      	ldr	r3, [pc, #380]	; (800b190 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800b012:	60bb      	str	r3, [r7, #8]

    ret = aci_gap_init(role,
 800b014:	1dba      	adds	r2, r7, #6
 800b016:	7bf8      	ldrb	r0, [r7, #15]
 800b018:	1cbb      	adds	r3, r7, #2
 800b01a:	9301      	str	r3, [sp, #4]
 800b01c:	1d3b      	adds	r3, r7, #4
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	4613      	mov	r3, r2
 800b022:	2207      	movs	r2, #7
 800b024:	2100      	movs	r1, #0
 800b026:	f7fc ffa7 	bl	8007f78 <aci_gap_init>
 800b02a:	4603      	mov	r3, r0
 800b02c:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d005      	beq.n	800b040 <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800b034:	7dfb      	ldrb	r3, [r7, #23]
 800b036:	4619      	mov	r1, r3
 800b038:	4856      	ldr	r0, [pc, #344]	; (800b194 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800b03a:	f001 fc2b 	bl	800c894 <iprintf>
 800b03e:	e002      	b.n	800b046 <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800b040:	4855      	ldr	r0, [pc, #340]	; (800b198 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800b042:	f001 fc95 	bl	800c970 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b046:	88fc      	ldrh	r4, [r7, #6]
 800b048:	88bd      	ldrh	r5, [r7, #4]
 800b04a:	68b8      	ldr	r0, [r7, #8]
 800b04c:	f7f5 f8a2 	bl	8000194 <strlen>
 800b050:	4603      	mov	r3, r0
 800b052:	b2da      	uxtb	r2, r3
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	4613      	mov	r3, r2
 800b05a:	2200      	movs	r2, #0
 800b05c:	4629      	mov	r1, r5
 800b05e:	4620      	mov	r0, r4
 800b060:	f7fd f9ef 	bl	8008442 <aci_gatt_update_char_value>
 800b064:	4603      	mov	r3, r0
 800b066:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b068:	88f8      	ldrh	r0, [r7, #6]
 800b06a:	8879      	ldrh	r1, [r7, #2]
 800b06c:	463b      	mov	r3, r7
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	2302      	movs	r3, #2
 800b072:	2200      	movs	r2, #0
 800b074:	f7fd f9e5 	bl	8008442 <aci_gatt_update_char_value>
 800b078:	4603      	mov	r3, r0
 800b07a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b07c:	4b47      	ldr	r3, [pc, #284]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b07e:	2201      	movs	r2, #1
 800b080:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b082:	4b46      	ldr	r3, [pc, #280]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	4618      	mov	r0, r3
 800b088:	f7fc fe5e 	bl	8007d48 <aci_gap_set_io_capability>
 800b08c:	4603      	mov	r3, r0
 800b08e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b090:	7dfb      	ldrb	r3, [r7, #23]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d005      	beq.n	800b0a2 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	4619      	mov	r1, r3
 800b09a:	4841      	ldr	r0, [pc, #260]	; (800b1a0 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800b09c:	f001 fbfa 	bl	800c894 <iprintf>
 800b0a0:	e002      	b.n	800b0a8 <Ble_Hci_Gap_Gatt_Init+0x1d8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800b0a2:	4840      	ldr	r0, [pc, #256]	; (800b1a4 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800b0a4:	f001 fc64 	bl	800c970 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b0a8:	4b3c      	ldr	r3, [pc, #240]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b0ae:	4b3b      	ldr	r3, [pc, #236]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b0b4:	4b39      	ldr	r3, [pc, #228]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0b6:	2210      	movs	r2, #16
 800b0b8:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b0ba:	4b38      	ldr	r3, [pc, #224]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0bc:	2201      	movs	r2, #1
 800b0be:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b0c0:	4b36      	ldr	r3, [pc, #216]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0c2:	4a39      	ldr	r2, [pc, #228]	; (800b1a8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800b0c4:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b0c6:	4b35      	ldr	r3, [pc, #212]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b0cc:	4b33      	ldr	r3, [pc, #204]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0ce:	789c      	ldrb	r4, [r3, #2]
 800b0d0:	4b32      	ldr	r3, [pc, #200]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0d2:	785d      	ldrb	r5, [r3, #1]
 800b0d4:	4b31      	ldr	r3, [pc, #196]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0d6:	791b      	ldrb	r3, [r3, #4]
 800b0d8:	4a30      	ldr	r2, [pc, #192]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0da:	7952      	ldrb	r2, [r2, #5]
 800b0dc:	492f      	ldr	r1, [pc, #188]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0de:	78c9      	ldrb	r1, [r1, #3]
 800b0e0:	482e      	ldr	r0, [pc, #184]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b0e2:	6880      	ldr	r0, [r0, #8]
 800b0e4:	2600      	movs	r6, #0
 800b0e6:	9604      	str	r6, [sp, #16]
 800b0e8:	9003      	str	r0, [sp, #12]
 800b0ea:	9102      	str	r1, [sp, #8]
 800b0ec:	9201      	str	r2, [sp, #4]
 800b0ee:	9300      	str	r3, [sp, #0]
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f7fc fe7a 	bl	8007df0 <aci_gap_set_authentication_requirement>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800b100:	7dfb      	ldrb	r3, [r7, #23]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d005      	beq.n	800b112 <Ble_Hci_Gap_Gatt_Init+0x242>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	4619      	mov	r1, r3
 800b10a:	4828      	ldr	r0, [pc, #160]	; (800b1ac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800b10c:	f001 fbc2 	bl	800c894 <iprintf>
 800b110:	e002      	b.n	800b118 <Ble_Hci_Gap_Gatt_Init+0x248>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800b112:	4827      	ldr	r0, [pc, #156]	; (800b1b0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800b114:	f001 fc2c 	bl	800c970 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b118:	4b20      	ldr	r3, [pc, #128]	; (800b19c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b11a:	789b      	ldrb	r3, [r3, #2]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00f      	beq.n	800b140 <Ble_Hci_Gap_Gatt_Init+0x270>
  {
    ret = aci_gap_configure_whitelist();
 800b120:	f7fc ffd7 	bl	80080d2 <aci_gap_configure_filter_accept_list>
 800b124:	4603      	mov	r3, r0
 800b126:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d005      	beq.n	800b13a <Ble_Hci_Gap_Gatt_Init+0x26a>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800b12e:	7dfb      	ldrb	r3, [r7, #23]
 800b130:	4619      	mov	r1, r3
 800b132:	4820      	ldr	r0, [pc, #128]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800b134:	f001 fbae 	bl	800c894 <iprintf>
 800b138:	e002      	b.n	800b140 <Ble_Hci_Gap_Gatt_Init+0x270>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800b13a:	481f      	ldr	r0, [pc, #124]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800b13c:	f001 fc18 	bl	800c970 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800b140:	481e      	ldr	r0, [pc, #120]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800b142:	f001 fba7 	bl	800c894 <iprintf>
}
 800b146:	bf00      	nop
 800b148:	371c      	adds	r7, #28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b14e:	bf00      	nop
 800b150:	0800de48 	.word	0x0800de48
 800b154:	0800de74 	.word	0x0800de74
 800b158:	0800dea4 	.word	0x0800dea4
 800b15c:	0800dec4 	.word	0x0800dec4
 800b160:	0800df20 	.word	0x0800df20
 800b164:	0800df6c 	.word	0x0800df6c
 800b168:	0800e964 	.word	0x0800e964
 800b16c:	0800dfa8 	.word	0x0800dfa8
 800b170:	0800e000 	.word	0x0800e000
 800b174:	0800e974 	.word	0x0800e974
 800b178:	0800e048 	.word	0x0800e048
 800b17c:	0800e0a0 	.word	0x0800e0a0
 800b180:	0800e0e8 	.word	0x0800e0e8
 800b184:	0800e128 	.word	0x0800e128
 800b188:	0800e158 	.word	0x0800e158
 800b18c:	0800e18c 	.word	0x0800e18c
 800b190:	0800e1b0 	.word	0x0800e1b0
 800b194:	0800e1b8 	.word	0x0800e1b8
 800b198:	0800e1e8 	.word	0x0800e1e8
 800b19c:	200015ac 	.word	0x200015ac
 800b1a0:	0800e208 	.word	0x0800e208
 800b1a4:	0800e248 	.word	0x0800e248
 800b1a8:	0001b207 	.word	0x0001b207
 800b1ac:	0800e278 	.word	0x0800e278
 800b1b0:	0800e2c4 	.word	0x0800e2c4
 800b1b4:	0800e300 	.word	0x0800e300
 800b1b8:	0800e340 	.word	0x0800e340
 800b1bc:	0800e370 	.word	0x0800e370

0800b1c0 <Scan_Request>:

static void Scan_Request(void)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800b1c6:	4b13      	ldr	r3, [pc, #76]	; (800b214 <Scan_Request+0x54>)
 800b1c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1cc:	2b06      	cmp	r3, #6
 800b1ce:	d01d      	beq.n	800b20c <Scan_Request+0x4c>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
    BSP_LED_On(LED_BLUE);
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	f7f7 fb4b 	bl	800286c <BSP_LED_On>
    APP_DBG_MSG("LED BLUE ON\n");
 800b1d6:	4810      	ldr	r0, [pc, #64]	; (800b218 <Scan_Request+0x58>)
 800b1d8:	f001 fbca 	bl	800c970 <puts>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, CFG_BLE_ADDRESS_TYPE, 1);
 800b1dc:	2301      	movs	r3, #1
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f44f 7148 	mov.w	r1, #800	; 0x320
 800b1e4:	f44f 7048 	mov.w	r0, #800	; 0x320
 800b1e8:	f7fc ff97 	bl	800811a <aci_gap_start_general_discovery_proc>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 800b1f0:	79fb      	ldrb	r3, [r7, #7]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d103      	bne.n	800b1fe <Scan_Request+0x3e>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 800b1f6:	4809      	ldr	r0, [pc, #36]	; (800b21c <Scan_Request+0x5c>)
 800b1f8:	f001 fb4c 	bl	800c894 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 800b1fc:	e006      	b.n	800b20c <Scan_Request+0x4c>
      BSP_LED_On(LED_RED);
 800b1fe:	2002      	movs	r0, #2
 800b200:	f7f7 fb34 	bl	800286c <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 800b204:	4806      	ldr	r0, [pc, #24]	; (800b220 <Scan_Request+0x60>)
 800b206:	f001 fb45 	bl	800c894 <iprintf>
  return;
 800b20a:	bf00      	nop
 800b20c:	bf00      	nop
}
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	200015ac 	.word	0x200015ac
 800b218:	0800e39c 	.word	0x0800e39c
 800b21c:	0800e3a8 	.word	0x0800e3a8
 800b220:	0800e3d8 	.word	0x0800e3d8

0800b224 <Connect_Request>:

static void Connect_Request(void)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08a      	sub	sp, #40	; 0x28
 800b228:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 800b22a:	481b      	ldr	r0, [pc, #108]	; (800b298 <Connect_Request+0x74>)
 800b22c:	f001 fb32 	bl	800c894 <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800b230:	4b1a      	ldr	r3, [pc, #104]	; (800b29c <Connect_Request+0x78>)
 800b232:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b236:	2b06      	cmp	r3, #6
 800b238:	d029      	beq.n	800b28e <Connect_Request+0x6a>
  {
    result = aci_gap_create_connection(SCAN_P,
 800b23a:	4b19      	ldr	r3, [pc, #100]	; (800b2a0 <Connect_Request+0x7c>)
 800b23c:	781a      	ldrb	r2, [r3, #0]
 800b23e:	2310      	movs	r3, #16
 800b240:	9306      	str	r3, [sp, #24]
 800b242:	2310      	movs	r3, #16
 800b244:	9305      	str	r3, [sp, #20]
 800b246:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b24a:	9304      	str	r3, [sp, #16]
 800b24c:	2300      	movs	r3, #0
 800b24e:	9303      	str	r3, [sp, #12]
 800b250:	2350      	movs	r3, #80	; 0x50
 800b252:	9302      	str	r3, [sp, #8]
 800b254:	2328      	movs	r3, #40	; 0x28
 800b256:	9301      	str	r3, [sp, #4]
 800b258:	2300      	movs	r3, #0
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	4b11      	ldr	r3, [pc, #68]	; (800b2a4 <Connect_Request+0x80>)
 800b25e:	f44f 7148 	mov.w	r1, #800	; 0x320
 800b262:	f44f 7048 	mov.w	r0, #800	; 0x320
 800b266:	f7fc ffec 	bl	8008242 <aci_gap_create_connection>
 800b26a:	4603      	mov	r3, r0
 800b26c:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800b26e:	79fb      	ldrb	r3, [r7, #7]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d104      	bne.n	800b27e <Connect_Request+0x5a>
    {
      /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

      /* USER CODE END BLE_CONNECT_SUCCESS */
      BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800b274:	4b09      	ldr	r3, [pc, #36]	; (800b29c <Connect_Request+0x78>)
 800b276:	2204      	movs	r2, #4
 800b278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800b27c:	e007      	b.n	800b28e <Connect_Request+0x6a>
      BSP_LED_On(LED_RED);
 800b27e:	2002      	movs	r0, #2
 800b280:	f7f7 faf4 	bl	800286c <BSP_LED_On>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b284:	4b05      	ldr	r3, [pc, #20]	; (800b29c <Connect_Request+0x78>)
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 800b28c:	bf00      	nop
 800b28e:	bf00      	nop
}
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	0800e408 	.word	0x0800e408
 800b29c:	200015ac 	.word	0x200015ac
 800b2a0:	200015a6 	.word	0x200015a6
 800b2a4:	200015a0 	.word	0x200015a0

0800b2a8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 800b2ac:	2001      	movs	r0, #1
 800b2ae:	f7f7 faf7 	bl	80028a0 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 800b2b2:	bf00      	nop
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b2be:	f7ff fb33 	bl	800a928 <LL_FLASH_GetUDN>
 800b2c2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2ca:	d023      	beq.n	800b314 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b2cc:	f7ff fb44 	bl	800a958 <LL_FLASH_GetSTCompanyID>
 800b2d0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b2d2:	f7ff fb35 	bl	800a940 <LL_FLASH_GetDeviceID>
 800b2d6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	4b16      	ldr	r3, [pc, #88]	; (800b338 <BleGetBdAddress+0x80>)
 800b2de:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	0a1b      	lsrs	r3, r3, #8
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	4b14      	ldr	r3, [pc, #80]	; (800b338 <BleGetBdAddress+0x80>)
 800b2e8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	4b12      	ldr	r3, [pc, #72]	; (800b338 <BleGetBdAddress+0x80>)
 800b2f0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	4b10      	ldr	r3, [pc, #64]	; (800b338 <BleGetBdAddress+0x80>)
 800b2f8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	0a1b      	lsrs	r3, r3, #8
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	4b0d      	ldr	r3, [pc, #52]	; (800b338 <BleGetBdAddress+0x80>)
 800b302:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	0c1b      	lsrs	r3, r3, #16
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <BleGetBdAddress+0x80>)
 800b30c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b30e:	4b0a      	ldr	r3, [pc, #40]	; (800b338 <BleGetBdAddress+0x80>)
 800b310:	617b      	str	r3, [r7, #20]
 800b312:	e00b      	b.n	800b32c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b314:	2000      	movs	r0, #0
 800b316:	f7fe fe1f 	bl	8009f58 <OTP_Read>
 800b31a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d002      	beq.n	800b328 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	617b      	str	r3, [r7, #20]
 800b326:	e001      	b.n	800b32c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b328:	4b04      	ldr	r3, [pc, #16]	; (800b33c <BleGetBdAddress+0x84>)
 800b32a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b32c:	697b      	ldr	r3, [r7, #20]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3718      	adds	r7, #24
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	20001598 	.word	0x20001598
 800b33c:	0800e95c 	.word	0x0800e95c

0800b340 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b348:	2100      	movs	r1, #0
 800b34a:	2010      	movs	r0, #16
 800b34c:	f001 f8c0 	bl	800c4d0 <UTIL_SEQ_SetTask>
  return;
 800b350:	bf00      	nop
}
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b360:	2001      	movs	r0, #1
 800b362:	f001 f921 	bl	800c5a8 <UTIL_SEQ_SetEvt>
  return;
 800b366:	bf00      	nop
}
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b082      	sub	sp, #8
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b376:	2001      	movs	r0, #1
 800b378:	f001 f936 	bl	800c5e8 <UTIL_SEQ_WaitEvt>
  return;
 800b37c:	bf00      	nop
}
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	3308      	adds	r3, #8
 800b396:	4618      	mov	r0, r3
 800b398:	f7fd feaa 	bl	80090f0 <SVCCTL_UserEvtRx>
 800b39c:	4603      	mov	r3, r0
 800b39e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b3a0:	7afb      	ldrb	r3, [r7, #11]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d003      	beq.n	800b3ae <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b3ac:	e003      	b.n	800b3b6 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	701a      	strb	r2, [r3, #0]
  return;
 800b3b4:	bf00      	nop
}
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800b3c6:	79fb      	ldrb	r3, [r7, #7]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <BLE_StatusNot+0x16>
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d006      	beq.n	800b3de <BLE_StatusNot+0x22>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 800b3d0:	e00b      	b.n	800b3ea <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b3d2:	23ff      	movs	r3, #255	; 0xff
 800b3d4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f001 f8a6 	bl	800c528 <UTIL_SEQ_PauseTask>
      break;
 800b3dc:	e005      	b.n	800b3ea <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b3de:	23ff      	movs	r3, #255	; 0xff
 800b3e0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f001 f8c0 	bl	800c568 <UTIL_SEQ_ResumeTask>
      break;
 800b3e8:	bf00      	nop
  }
  return;
 800b3ea:	bf00      	nop
}
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
	...

0800b3f4 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
  uint8_t index =0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 800b3fe:	4a1a      	ldr	r2, [pc, #104]	; (800b468 <P2PC_APP_Init+0x74>)
 800b400:	2100      	movs	r1, #0
 800b402:	2004      	movs	r0, #4
 800b404:	f001 f842 	bl	800c48c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
 800b408:	4a18      	ldr	r2, [pc, #96]	; (800b46c <P2PC_APP_Init+0x78>)
 800b40a:	2100      	movs	r1, #0
 800b40c:	2020      	movs	r0, #32
 800b40e:	f001 f83d 	bl	800c48c <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Client_App_Context.Notification_Status=0;
 800b412:	4b17      	ldr	r3, [pc, #92]	; (800b470 <P2PC_APP_Init+0x7c>)
 800b414:	2200      	movs	r2, #0
 800b416:	701a      	strb	r2, [r3, #0]
  P2P_Client_App_Context.ConnectionHandle =  0x00;
 800b418:	4b15      	ldr	r3, [pc, #84]	; (800b470 <P2PC_APP_Init+0x7c>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	80da      	strh	r2, [r3, #6]

  P2P_Client_App_Context.LedControl.Device_Led_Selection=0x00;/* device Led */
 800b41e:	4b14      	ldr	r3, [pc, #80]	; (800b470 <P2PC_APP_Init+0x7c>)
 800b420:	2200      	movs	r2, #0
 800b422:	705a      	strb	r2, [r3, #1]
  P2P_Client_App_Context.LedControl.Led1=0x00; /* led OFF */
 800b424:	4b12      	ldr	r3, [pc, #72]	; (800b470 <P2PC_APP_Init+0x7c>)
 800b426:	2200      	movs	r2, #0
 800b428:	709a      	strb	r2, [r3, #2]
  P2P_Client_App_Context.ButtonStatus.Device_Button_Selection=0x01;/* Device1 */
 800b42a:	4b11      	ldr	r3, [pc, #68]	; (800b470 <P2PC_APP_Init+0x7c>)
 800b42c:	2201      	movs	r2, #1
 800b42e:	70da      	strb	r2, [r3, #3]
  P2P_Client_App_Context.ButtonStatus.Button1=0x00;
 800b430:	4b0f      	ldr	r3, [pc, #60]	; (800b470 <P2PC_APP_Init+0x7c>)
 800b432:	2200      	movs	r2, #0
 800b434:	711a      	strb	r2, [r3, #4]
/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800b436:	2300      	movs	r3, #0
 800b438:	71fb      	strb	r3, [r7, #7]
 800b43a:	e008      	b.n	800b44e <P2PC_APP_Init+0x5a>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 800b43c:	79fb      	ldrb	r3, [r7, #7]
 800b43e:	4a0d      	ldr	r2, [pc, #52]	; (800b474 <P2PC_APP_Init+0x80>)
 800b440:	011b      	lsls	r3, r3, #4
 800b442:	4413      	add	r3, r2
 800b444:	2200      	movs	r2, #0
 800b446:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800b448:	79fb      	ldrb	r3, [r7, #7]
 800b44a:	3301      	adds	r3, #1
 800b44c:	71fb      	strb	r3, [r7, #7]
 800b44e:	79fb      	ldrb	r3, [r7, #7]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d0f3      	beq.n	800b43c <P2PC_APP_Init+0x48>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 800b454:	4808      	ldr	r0, [pc, #32]	; (800b478 <P2PC_APP_Init+0x84>)
 800b456:	f7fd fe31 	bl	80090bc <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 800b45a:	4808      	ldr	r0, [pc, #32]	; (800b47c <P2PC_APP_Init+0x88>)
 800b45c:	f001 fa88 	bl	800c970 <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 800b460:	bf00      	nop
}
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	0800bbe5 	.word	0x0800bbe5
 800b46c:	0800bb9d 	.word	0x0800bb9d
 800b470:	2000164c 	.word	0x2000164c
 800b474:	2000163c 	.word	0x2000163c
 800b478:	0800b4f5 	.word	0x0800b4f5
 800b47c:	0800e434 	.word	0x0800e434

0800b480 <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <P2PC_APP_Notification+0x16>
 800b490:	2b01      	cmp	r3, #1
 800b492:	d005      	beq.n	800b4a0 <P2PC_APP_Notification+0x20>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 800b494:	e01e      	b.n	800b4d4 <P2PC_APP_Notification+0x54>
    P2P_Client_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	885a      	ldrh	r2, [r3, #2]
 800b49a:	4b10      	ldr	r3, [pc, #64]	; (800b4dc <P2PC_APP_Notification+0x5c>)
 800b49c:	80da      	strh	r2, [r3, #6]
      break;
 800b49e:	e019      	b.n	800b4d4 <P2PC_APP_Notification+0x54>
      uint8_t index = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	73fb      	strb	r3, [r7, #15]
      P2P_Client_App_Context.ConnectionHandle =  0x00;
 800b4a4:	4b0d      	ldr	r3, [pc, #52]	; (800b4dc <P2PC_APP_Notification+0x5c>)
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	80da      	strh	r2, [r3, #6]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b4aa:	e005      	b.n	800b4b8 <P2PC_APP_Notification+0x38>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	4a0c      	ldr	r2, [pc, #48]	; (800b4e0 <P2PC_APP_Notification+0x60>)
 800b4b0:	011b      	lsls	r3, r3, #4
 800b4b2:	4413      	add	r3, r2
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <P2PC_APP_Notification+0x4c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	4a07      	ldr	r2, [pc, #28]	; (800b4e0 <P2PC_APP_Notification+0x60>)
 800b4c2:	011b      	lsls	r3, r3, #4
 800b4c4:	4413      	add	r3, r2
 800b4c6:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1ef      	bne.n	800b4ac <P2PC_APP_Notification+0x2c>
      BSP_LED_Off(LED_BLUE); 
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	f7f7 f9e7 	bl	80028a0 <BSP_LED_Off>
      break;
 800b4d2:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 800b4d4:	bf00      	nop
}
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	2000164c 	.word	0x2000164c
 800b4e0:	2000163c 	.word	0x2000163c

0800b4e4 <P2PC_APP_SW1_Button_Action>:
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	af00      	add	r7, sp, #0

  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	2020      	movs	r0, #32
 800b4ec:	f000 fff0 	bl	800c4d0 <UTIL_SEQ_SetTask>

}
 800b4f0:	bf00      	nop
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b094      	sub	sp, #80	; 0x50
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	3301      	adds	r3, #1
 800b506:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 800b508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2bff      	cmp	r3, #255	; 0xff
 800b50e:	f040 82b4 	bne.w	800ba7a <Event_Handler+0x586>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b514:	3302      	adds	r3, #2
 800b516:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blecore_evt->ecode)
 800b518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800b522:	2b0c      	cmp	r3, #12
 800b524:	f200 829d 	bhi.w	800ba62 <Event_Handler+0x56e>
 800b528:	a201      	add	r2, pc, #4	; (adr r2, 800b530 <Event_Handler+0x3c>)
 800b52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52e:	bf00      	nop
 800b530:	0800b875 	.word	0x0800b875
 800b534:	0800ba63 	.word	0x0800ba63
 800b538:	0800b71b 	.word	0x0800b71b
 800b53c:	0800ba63 	.word	0x0800ba63
 800b540:	0800ba63 	.word	0x0800ba63
 800b544:	0800ba63 	.word	0x0800ba63
 800b548:	0800b565 	.word	0x0800b565
 800b54c:	0800ba63 	.word	0x0800ba63
 800b550:	0800ba63 	.word	0x0800ba63
 800b554:	0800ba63 	.word	0x0800ba63
 800b558:	0800ba63 	.word	0x0800ba63
 800b55c:	0800b991 	.word	0x0800b991
 800b560:	0800ba0d 	.word	0x0800ba0d
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800b564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b566:	3302      	adds	r3, #2
 800b568:	633b      	str	r3, [r7, #48]	; 0x30
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 800b56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56c:	781a      	ldrb	r2, [r3, #0]
 800b56e:	785b      	ldrb	r3, [r3, #1]
 800b570:	021b      	lsls	r3, r3, #8
 800b572:	4313      	orrs	r3, r2
 800b574:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b57c:	e02e      	b.n	800b5dc <Event_Handler+0xe8>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800b57e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b582:	4ab8      	ldr	r2, [pc, #736]	; (800b864 <Event_Handler+0x370>)
 800b584:	011b      	lsls	r3, r3, #4
 800b586:	4413      	add	r3, r2
 800b588:	3302      	adds	r3, #2
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7ff fc53 	bl	800ae38 <APP_BLE_Get_Client_Connection_Status>
 800b592:	4603      	mov	r3, r0
 800b594:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 800b598:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b59c:	4ab1      	ldr	r2, [pc, #708]	; (800b864 <Event_Handler+0x370>)
 800b59e:	011b      	lsls	r3, r3, #4
 800b5a0:	4413      	add	r3, r2
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b06      	cmp	r3, #6
 800b5a6:	d114      	bne.n	800b5d2 <Event_Handler+0xde>
 800b5a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d110      	bne.n	800b5d2 <Event_Handler+0xde>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 800b5b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b5b4:	4aab      	ldr	r2, [pc, #684]	; (800b864 <Event_Handler+0x370>)
 800b5b6:	011b      	lsls	r3, r3, #4
 800b5b8:	4413      	add	r3, r2
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 800b5be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b5c2:	4aa8      	ldr	r2, [pc, #672]	; (800b864 <Event_Handler+0x370>)
 800b5c4:	011b      	lsls	r3, r3, #4
 800b5c6:	4413      	add	r3, r2
 800b5c8:	3302      	adds	r3, #2
 800b5ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5ce:	801a      	strh	r2, [r3, #0]
              break;
 800b5d0:	e010      	b.n	800b5f4 <Event_Handler+0x100>
            }
            index++;
 800b5d2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b5dc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d107      	bne.n	800b5f4 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800b5e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b5e8:	4a9e      	ldr	r2, [pc, #632]	; (800b864 <Event_Handler+0x370>)
 800b5ea:	011b      	lsls	r3, r3, #4
 800b5ec:	4413      	add	r3, r2
 800b5ee:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1c4      	bne.n	800b57e <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800b5f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f040 8234 	bne.w	800ba66 <Event_Handler+0x572>
          {
            aP2PClientContext[index].connHandle= handle;
 800b5fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b602:	4a98      	ldr	r2, [pc, #608]	; (800b864 <Event_Handler+0x370>)
 800b604:	011b      	lsls	r3, r3, #4
 800b606:	4413      	add	r3, r2
 800b608:	3302      	adds	r3, #2
 800b60a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b60c:	801a      	strh	r2, [r3, #0]

            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	78da      	ldrb	r2, [r3, #3]
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	789b      	ldrb	r3, [r3, #2]
 800b616:	fbb2 f3f3 	udiv	r3, r2, r3
 800b61a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)
          if (pr->Attribute_Data_Length == 20)
 800b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b620:	789b      	ldrb	r3, [r3, #2]
 800b622:	2b14      	cmp	r3, #20
 800b624:	f040 821f 	bne.w	800ba66 <Event_Handler+0x572>
          {
            idx = 16;
 800b628:	2310      	movs	r3, #16
 800b62a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
#else
          if (pr->Attribute_Data_Length == 6)
          {
            idx = 4;
#endif
              for (i=0; i<numServ; i++)
 800b62e:	2300      	movs	r3, #0
 800b630:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b634:	e06a      	b.n	800b70c <Event_Handler+0x218>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800b636:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b63a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b63c:	4413      	add	r3, r2
 800b63e:	791b      	ldrb	r3, [r3, #4]
 800b640:	b29a      	uxth	r2, r3
 800b642:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b648:	440b      	add	r3, r1
 800b64a:	3304      	adds	r3, #4
 800b64c:	3301      	adds	r3, #1
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	b29b      	uxth	r3, r3
 800b652:	021b      	lsls	r3, r3, #8
 800b654:	b29b      	uxth	r3, r3
 800b656:	4313      	orrs	r3, r2
 800b658:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 800b65a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b65c:	f64f 6240 	movw	r2, #65088	; 0xfe40
 800b660:	4293      	cmp	r3, r2
 800b662:	d149      	bne.n	800b6f8 <Event_Handler+0x204>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 800b664:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b668:	4a7e      	ldr	r2, [pc, #504]	; (800b864 <Event_Handler+0x370>)
 800b66a:	011b      	lsls	r3, r3, #4
 800b66c:	4413      	add	r3, r2
 800b66e:	3302      	adds	r3, #2
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	4619      	mov	r1, r3
 800b674:	487c      	ldr	r0, [pc, #496]	; (800b868 <Event_Handler+0x374>)
 800b676:	f001 f90d 	bl	800c894 <iprintf>
#endif
#if (UUID_128BIT_FORMAT==1)
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800b67a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b67e:	3b10      	subs	r3, #16
 800b680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b682:	4413      	add	r3, r2
 800b684:	791b      	ldrb	r3, [r3, #4]
 800b686:	b299      	uxth	r1, r3
 800b688:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b68c:	3b10      	subs	r3, #16
 800b68e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b690:	4413      	add	r3, r2
 800b692:	3304      	adds	r3, #4
 800b694:	3301      	adds	r3, #1
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	b29b      	uxth	r3, r3
 800b69a:	021b      	lsls	r3, r3, #8
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b6a2:	430a      	orrs	r2, r1
 800b6a4:	b291      	uxth	r1, r2
 800b6a6:	4a6f      	ldr	r2, [pc, #444]	; (800b864 <Event_Handler+0x370>)
 800b6a8:	011b      	lsls	r3, r3, #4
 800b6aa:	4413      	add	r3, r2
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	460a      	mov	r2, r1
 800b6b0:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800b6b2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b6b6:	3b0e      	subs	r3, #14
 800b6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ba:	4413      	add	r3, r2
 800b6bc:	791b      	ldrb	r3, [r3, #4]
 800b6be:	b299      	uxth	r1, r3
 800b6c0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b6c4:	3b0e      	subs	r3, #14
 800b6c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c8:	4413      	add	r3, r2
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	021b      	lsls	r3, r3, #8
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b6da:	430a      	orrs	r2, r1
 800b6dc:	b291      	uxth	r1, r2
 800b6de:	4a61      	ldr	r2, [pc, #388]	; (800b864 <Event_Handler+0x370>)
 800b6e0:	011b      	lsls	r3, r3, #4
 800b6e2:	4413      	add	r3, r2
 800b6e4:	3306      	adds	r3, #6
 800b6e6:	460a      	mov	r2, r1
 800b6e8:	801a      	strh	r2, [r3, #0]
#else
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800b6ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b6ee:	4a5d      	ldr	r2, [pc, #372]	; (800b864 <Event_Handler+0x370>)
 800b6f0:	011b      	lsls	r3, r3, #4
 800b6f2:	4413      	add	r3, r2
 800b6f4:	2208      	movs	r2, #8
 800b6f6:	701a      	strb	r2, [r3, #0]
                }
                idx += 6;
 800b6f8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b6fc:	3306      	adds	r3, #6
 800b6fe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800b702:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b706:	3301      	adds	r3, #1
 800b708:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b70c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800b710:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b714:	429a      	cmp	r2, r3
 800b716:	d38e      	bcc.n	800b636 <Event_Handler+0x142>
              }
            }
          }
        }
        break;
 800b718:	e1a5      	b.n	800ba66 <Event_Handler+0x572>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800b71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b71c:	3302      	adds	r3, #2
 800b71e:	627b      	str	r3, [r7, #36]	; 0x24
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 800b720:	2300      	movs	r3, #0
 800b722:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b726:	e004      	b.n	800b732 <Event_Handler+0x23e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800b728:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b72c:	3301      	adds	r3, #1
 800b72e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b732:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10b      	bne.n	800b752 <Event_Handler+0x25e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800b73a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b73e:	4a49      	ldr	r2, [pc, #292]	; (800b864 <Event_Handler+0x370>)
 800b740:	011b      	lsls	r3, r3, #4
 800b742:	4413      	add	r3, r2
 800b744:	3302      	adds	r3, #2
 800b746:	881a      	ldrh	r2, [r3, #0]
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b74e:	429a      	cmp	r2, r3
 800b750:	d1ea      	bne.n	800b728 <Event_Handler+0x234>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800b752:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b756:	2b00      	cmp	r3, #0
 800b758:	f040 8187 	bne.w	800ba6a <Event_Handler+0x576>
          {

            /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
            idx = 17;
 800b75c:	2311      	movs	r3, #17
 800b75e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800b762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b764:	789b      	ldrb	r3, [r3, #2]
 800b766:	2b15      	cmp	r3, #21
 800b768:	f040 817f 	bne.w	800ba6a <Event_Handler+0x576>
#else
              idx = 5;
            if (pr->Handle_Value_Pair_Length == 7)
#endif
            {
              pr->Data_Length -= 1;
 800b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76e:	78db      	ldrb	r3, [r3, #3]
 800b770:	3b01      	subs	r3, #1
 800b772:	b2da      	uxtb	r2, r3
 800b774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b776:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 800b778:	e06f      	b.n	800b85a <Event_Handler+0x366>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800b77a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b780:	4413      	add	r3, r2
 800b782:	791b      	ldrb	r3, [r3, #4]
 800b784:	b29a      	uxth	r2, r3
 800b786:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b78a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b78c:	440b      	add	r3, r1
 800b78e:	3304      	adds	r3, #4
 800b790:	3301      	adds	r3, #1
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	b29b      	uxth	r3, r3
 800b796:	021b      	lsls	r3, r3, #8
 800b798:	b29b      	uxth	r3, r3
 800b79a:	4313      	orrs	r3, r2
 800b79c:	847b      	strh	r3, [r7, #34]	; 0x22
                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800b79e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b7a2:	3b0e      	subs	r3, #14
 800b7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a6:	4413      	add	r3, r2
 800b7a8:	791b      	ldrb	r3, [r3, #4]
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b7b0:	3b0e      	subs	r3, #14
 800b7b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7b4:	440b      	add	r3, r1
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	021b      	lsls	r3, r3, #8
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	843b      	strh	r3, [r7, #32]
#else
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                if(uuid == P2P_WRITE_CHAR_UUID)
 800b7c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7c8:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d11a      	bne.n	800b806 <Event_Handler+0x312>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800b7d0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b7d4:	4a23      	ldr	r2, [pc, #140]	; (800b864 <Event_Handler+0x370>)
 800b7d6:	011b      	lsls	r3, r3, #4
 800b7d8:	4413      	add	r3, r2
 800b7da:	3302      	adds	r3, #2
 800b7dc:	881b      	ldrh	r3, [r3, #0]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4822      	ldr	r0, [pc, #136]	; (800b86c <Event_Handler+0x378>)
 800b7e2:	f001 f857 	bl	800c894 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 800b7e6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b7ea:	4a1e      	ldr	r2, [pc, #120]	; (800b864 <Event_Handler+0x370>)
 800b7ec:	011b      	lsls	r3, r3, #4
 800b7ee:	4413      	add	r3, r2
 800b7f0:	2209      	movs	r2, #9
 800b7f2:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 800b7f4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b7f8:	4a1a      	ldr	r2, [pc, #104]	; (800b864 <Event_Handler+0x370>)
 800b7fa:	011b      	lsls	r3, r3, #4
 800b7fc:	4413      	add	r3, r2
 800b7fe:	3308      	adds	r3, #8
 800b800:	8c3a      	ldrh	r2, [r7, #32]
 800b802:	801a      	strh	r2, [r3, #0]
 800b804:	e01e      	b.n	800b844 <Event_Handler+0x350>
                }

                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800b806:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b808:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d119      	bne.n	800b844 <Event_Handler+0x350>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800b810:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b814:	4a13      	ldr	r2, [pc, #76]	; (800b864 <Event_Handler+0x370>)
 800b816:	011b      	lsls	r3, r3, #4
 800b818:	4413      	add	r3, r2
 800b81a:	3302      	adds	r3, #2
 800b81c:	881b      	ldrh	r3, [r3, #0]
 800b81e:	4619      	mov	r1, r3
 800b820:	4813      	ldr	r0, [pc, #76]	; (800b870 <Event_Handler+0x37c>)
 800b822:	f001 f837 	bl	800c894 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800b826:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b82a:	4a0e      	ldr	r2, [pc, #56]	; (800b864 <Event_Handler+0x370>)
 800b82c:	011b      	lsls	r3, r3, #4
 800b82e:	4413      	add	r3, r2
 800b830:	220a      	movs	r2, #10
 800b832:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 800b834:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b838:	4a0a      	ldr	r2, [pc, #40]	; (800b864 <Event_Handler+0x370>)
 800b83a:	011b      	lsls	r3, r3, #4
 800b83c:	4413      	add	r3, r2
 800b83e:	330c      	adds	r3, #12
 800b840:	8c3a      	ldrh	r2, [r7, #32]
 800b842:	801a      	strh	r2, [r3, #0]
                }
#if (UUID_128BIT_FORMAT==1)
                pr->Data_Length -= 21;
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	78db      	ldrb	r3, [r3, #3]
 800b848:	3b15      	subs	r3, #21
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84e:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800b850:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b854:	3315      	adds	r3, #21
 800b856:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 800b85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85c:	78db      	ldrb	r3, [r3, #3]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d18b      	bne.n	800b77a <Event_Handler+0x286>
#endif
              }
            }
          }
        }
        break;
 800b862:	e102      	b.n	800ba6a <Event_Handler+0x576>
 800b864:	2000163c 	.word	0x2000163c
 800b868:	0800e450 	.word	0x0800e450
 800b86c:	0800e48c 	.word	0x0800e48c
 800b870:	0800e4c4 	.word	0x0800e4c4

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800b874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b876:	3302      	adds	r3, #2
 800b878:	61fb      	str	r3, [r7, #28]
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b880:	e004      	b.n	800b88c <Event_Handler+0x398>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 800b882:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b886:	3301      	adds	r3, #1
 800b888:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b88c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10b      	bne.n	800b8ac <Event_Handler+0x3b8>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800b894:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b898:	4a7b      	ldr	r2, [pc, #492]	; (800ba88 <Event_Handler+0x594>)
 800b89a:	011b      	lsls	r3, r3, #4
 800b89c:	4413      	add	r3, r2
 800b89e:	3302      	adds	r3, #2
 800b8a0:	881a      	ldrh	r2, [r3, #0]
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	881b      	ldrh	r3, [r3, #0]
 800b8a6:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d1ea      	bne.n	800b882 <Event_Handler+0x38e>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800b8ac:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f040 80dc 	bne.w	800ba6e <Event_Handler+0x57a>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	78db      	ldrb	r3, [r3, #3]
 800b8ba:	089b      	lsrs	r3, r3, #2
 800b8bc:	76fb      	strb	r3, [r7, #27]
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	789b      	ldrb	r3, [r3, #2]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	f040 80d0 	bne.w	800ba6e <Event_Handler+0x57a>
            {
              for (i=0; i<numDesc; i++)
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800b8d4:	e056      	b.n	800b984 <Event_Handler+0x490>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800b8d6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b8da:	69fa      	ldr	r2, [r7, #28]
 800b8dc:	4413      	add	r3, r2
 800b8de:	791b      	ldrb	r3, [r3, #4]
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b8e6:	69f9      	ldr	r1, [r7, #28]
 800b8e8:	440b      	add	r3, r1
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	021b      	lsls	r3, r3, #8
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800b8fa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b8fe:	3302      	adds	r3, #2
 800b900:	69fa      	ldr	r2, [r7, #28]
 800b902:	4413      	add	r3, r2
 800b904:	791b      	ldrb	r3, [r3, #4]
 800b906:	b29a      	uxth	r2, r3
 800b908:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b90c:	3302      	adds	r3, #2
 800b90e:	69f9      	ldr	r1, [r7, #28]
 800b910:	440b      	add	r3, r1
 800b912:	3304      	adds	r3, #4
 800b914:	3301      	adds	r3, #1
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	b29b      	uxth	r3, r3
 800b91a:	021b      	lsls	r3, r3, #8
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	4313      	orrs	r3, r2
 800b920:	82fb      	strh	r3, [r7, #22]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800b922:	8afb      	ldrh	r3, [r7, #22]
 800b924:	f642 1202 	movw	r2, #10498	; 0x2902
 800b928:	4293      	cmp	r3, r2
 800b92a:	d121      	bne.n	800b970 <Event_Handler+0x47c>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800b92c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b930:	4a55      	ldr	r2, [pc, #340]	; (800ba88 <Event_Handler+0x594>)
 800b932:	011b      	lsls	r3, r3, #4
 800b934:	4413      	add	r3, r2
 800b936:	3302      	adds	r3, #2
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	4619      	mov	r1, r3
 800b93c:	4853      	ldr	r0, [pc, #332]	; (800ba8c <Event_Handler+0x598>)
 800b93e:	f000 ffa9 	bl	800c894 <iprintf>
#endif
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800b942:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b946:	4a50      	ldr	r2, [pc, #320]	; (800ba88 <Event_Handler+0x594>)
 800b948:	011b      	lsls	r3, r3, #4
 800b94a:	4413      	add	r3, r2
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	2b0a      	cmp	r3, #10
 800b950:	d10e      	bne.n	800b970 <Event_Handler+0x47c>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800b952:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b956:	4a4c      	ldr	r2, [pc, #304]	; (800ba88 <Event_Handler+0x594>)
 800b958:	011b      	lsls	r3, r3, #4
 800b95a:	4413      	add	r3, r2
 800b95c:	330e      	adds	r3, #14
 800b95e:	8b3a      	ldrh	r2, [r7, #24]
 800b960:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800b962:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800b966:	4a48      	ldr	r2, [pc, #288]	; (800ba88 <Event_Handler+0x594>)
 800b968:	011b      	lsls	r3, r3, #4
 800b96a:	4413      	add	r3, r2
 800b96c:	220b      	movs	r2, #11
 800b96e:	701a      	strb	r2, [r3, #0]

                  }
                }
                idx += 4;
 800b970:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800b974:	3304      	adds	r3, #4
 800b976:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 800b97a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800b97e:	3301      	adds	r3, #1
 800b980:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800b984:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800b988:	7efb      	ldrb	r3, [r7, #27]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d3a3      	bcc.n	800b8d6 <Event_Handler+0x3e2>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800b98e:	e06e      	b.n	800ba6e <Event_Handler+0x57a>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
          aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 800b990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b992:	3302      	adds	r3, #2
 800b994:	637b      	str	r3, [r7, #52]	; 0x34
          uint8_t index;

          index = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b99c:	e004      	b.n	800b9a8 <Event_Handler+0x4b4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800b99e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b9a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10b      	bne.n	800b9c8 <Event_Handler+0x4d4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800b9b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b9b4:	4a34      	ldr	r2, [pc, #208]	; (800ba88 <Event_Handler+0x594>)
 800b9b6:	011b      	lsls	r3, r3, #4
 800b9b8:	4413      	add	r3, r2
 800b9ba:	3302      	adds	r3, #2
 800b9bc:	881a      	ldrh	r2, [r3, #0]
 800b9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d1ea      	bne.n	800b99e <Event_Handler+0x4aa>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800b9c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d150      	bne.n	800ba72 <Event_Handler+0x57e>
          {

            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d2:	885b      	ldrh	r3, [r3, #2]
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b9da:	492b      	ldr	r1, [pc, #172]	; (800ba88 <Event_Handler+0x594>)
 800b9dc:	011b      	lsls	r3, r3, #4
 800b9de:	440b      	add	r3, r1
 800b9e0:	330c      	adds	r3, #12
 800b9e2:	881b      	ldrh	r3, [r3, #0]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d144      	bne.n	800ba72 <Event_Handler+0x57e>
                    (pr->Attribute_Value_Length == (2)) )
 800b9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ea:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d140      	bne.n	800ba72 <Event_Handler+0x57e>
            {

              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f6:	791b      	ldrb	r3, [r3, #4]
 800b9f8:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 800b9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9fc:	3305      	adds	r3, #5
 800b9fe:	60fb      	str	r3, [r7, #12]

              Gatt_Notification(&Notification);
 800ba00:	f107 0308 	add.w	r3, r7, #8
 800ba04:	4618      	mov	r0, r3
 800ba06:	f000 f845 	bl	800ba94 <Gatt_Notification>
              /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

            }
          }
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800ba0a:	e032      	b.n	800ba72 <Event_Handler+0x57e>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 800ba0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba0e:	3302      	adds	r3, #2
 800ba10:	63bb      	str	r3, [r7, #56]	; 0x38
#if(CFG_DEBUG_APP_TRACE != 0)
          APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE \n");
 800ba12:	481f      	ldr	r0, [pc, #124]	; (800ba90 <Event_Handler+0x59c>)
 800ba14:	f000 ffac 	bl	800c970 <puts>
          APP_DBG_MSG("\n");
 800ba18:	200a      	movs	r0, #10
 800ba1a:	f000 ff4d 	bl	800c8b8 <putchar>
#endif

          uint8_t index;

          index = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ba24:	e004      	b.n	800ba30 <Event_Handler+0x53c>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800ba26:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ba30:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10b      	bne.n	800ba50 <Event_Handler+0x55c>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800ba38:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ba3c:	4a12      	ldr	r2, [pc, #72]	; (800ba88 <Event_Handler+0x594>)
 800ba3e:	011b      	lsls	r3, r3, #4
 800ba40:	4413      	add	r3, r2
 800ba42:	3302      	adds	r3, #2
 800ba44:	881a      	ldrh	r2, [r3, #0]
 800ba46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba48:	881b      	ldrh	r3, [r3, #0]
 800ba4a:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d1ea      	bne.n	800ba26 <Event_Handler+0x532>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800ba50:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10e      	bne.n	800ba76 <Event_Handler+0x582>
          {

            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 800ba58:	2100      	movs	r1, #0
 800ba5a:	2004      	movs	r0, #4
 800ba5c:	f000 fd38 	bl	800c4d0 <UTIL_SEQ_SetTask>

          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800ba60:	e009      	b.n	800ba76 <Event_Handler+0x582>
        default:
          break;
 800ba62:	bf00      	nop
 800ba64:	e00a      	b.n	800ba7c <Event_Handler+0x588>
        break;
 800ba66:	bf00      	nop
 800ba68:	e008      	b.n	800ba7c <Event_Handler+0x588>
        break;
 800ba6a:	bf00      	nop
 800ba6c:	e006      	b.n	800ba7c <Event_Handler+0x588>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800ba6e:	bf00      	nop
 800ba70:	e004      	b.n	800ba7c <Event_Handler+0x588>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800ba72:	bf00      	nop
 800ba74:	e002      	b.n	800ba7c <Event_Handler+0x588>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800ba76:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ba78:	e000      	b.n	800ba7c <Event_Handler+0x588>

    default:
      break;
 800ba7a:	bf00      	nop
  }

  return(return_value);
 800ba7c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800ba80:	4618      	mov	r0, r3
 800ba82:	3750      	adds	r7, #80	; 0x50
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	2000163c 	.word	0x2000163c
 800ba8c:	0800e508 	.word	0x0800e508
 800ba90:	0800e550 	.word	0x0800e550

0800ba94 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d127      	bne.n	800baf4 <Gatt_Notification+0x60>
/* USER CODE END P2P_Client_Evt_Opcode */

    case P2P_NOTIFICATION_INFO_RECEIVED_EVT:
/* USER CODE BEGIN P2P_NOTIFICATION_INFO_RECEIVED_EVT */
    {
      P2P_Client_App_Context.LedControl.Device_Led_Selection=pNotification->DataTransfered.pPayload[0];
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	781a      	ldrb	r2, [r3, #0]
 800baaa:	4b15      	ldr	r3, [pc, #84]	; (800bb00 <Gatt_Notification+0x6c>)
 800baac:	705a      	strb	r2, [r3, #1]
      switch(P2P_Client_App_Context.LedControl.Device_Led_Selection) {
 800baae:	4b14      	ldr	r3, [pc, #80]	; (800bb00 <Gatt_Notification+0x6c>)
 800bab0:	785b      	ldrb	r3, [r3, #1]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d11c      	bne.n	800baf0 <Gatt_Notification+0x5c>

        case 0x01 : {

          P2P_Client_App_Context.LedControl.Led1=pNotification->DataTransfered.pPayload[1];
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	785a      	ldrb	r2, [r3, #1]
 800babc:	4b10      	ldr	r3, [pc, #64]	; (800bb00 <Gatt_Notification+0x6c>)
 800babe:	709a      	strb	r2, [r3, #2]

          if(P2P_Client_App_Context.LedControl.Led1==0x00){
 800bac0:	4b0f      	ldr	r3, [pc, #60]	; (800bb00 <Gatt_Notification+0x6c>)
 800bac2:	789b      	ldrb	r3, [r3, #2]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d109      	bne.n	800badc <Gatt_Notification+0x48>
            BSP_LED_Off(LED_BLUE);
 800bac8:	2000      	movs	r0, #0
 800baca:	f7f6 fee9 	bl	80028a0 <BSP_LED_Off>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED OFF \n\r");
 800bace:	480d      	ldr	r0, [pc, #52]	; (800bb04 <Gatt_Notification+0x70>)
 800bad0:	f000 fee0 	bl	800c894 <iprintf>
            APP_DBG_MSG(" \n\r");
 800bad4:	480c      	ldr	r0, [pc, #48]	; (800bb08 <Gatt_Notification+0x74>)
 800bad6:	f000 fedd 	bl	800c894 <iprintf>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
            APP_DBG_MSG(" \n\r");
            BSP_LED_On(LED_BLUE);
          }

          break;
 800bada:	e00a      	b.n	800baf2 <Gatt_Notification+0x5e>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
 800badc:	480b      	ldr	r0, [pc, #44]	; (800bb0c <Gatt_Notification+0x78>)
 800bade:	f000 fed9 	bl	800c894 <iprintf>
            APP_DBG_MSG(" \n\r");
 800bae2:	4809      	ldr	r0, [pc, #36]	; (800bb08 <Gatt_Notification+0x74>)
 800bae4:	f000 fed6 	bl	800c894 <iprintf>
            BSP_LED_On(LED_BLUE);
 800bae8:	2000      	movs	r0, #0
 800baea:	f7f6 febf 	bl	800286c <BSP_LED_On>
          break;
 800baee:	e000      	b.n	800baf2 <Gatt_Notification+0x5e>
        }
        default : break;
 800baf0:	bf00      	nop
      }

    }
/* USER CODE END P2P_NOTIFICATION_INFO_RECEIVED_EVT */
      break;
 800baf2:	e000      	b.n	800baf6 <Gatt_Notification+0x62>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 800baf4:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 800baf6:	bf00      	nop
}
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	2000164c 	.word	0x2000164c
 800bb04:	0800e580 	.word	0x0800e580
 800bb08:	0800e5c0 	.word	0x0800e5c0
 800bb0c:	0800e5c4 	.word	0x0800e5c4

0800bb10 <P2P_Client_APP_Get_State>:

uint8_t P2P_Client_APP_Get_State( void ) {
 800bb10:	b480      	push	{r7}
 800bb12:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 800bb14:	4b03      	ldr	r3, [pc, #12]	; (800bb24 <P2P_Client_APP_Get_State+0x14>)
 800bb16:	781b      	ldrb	r3, [r3, #0]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	2000163c 	.word	0x2000163c

0800bb28 <Write_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
tBleStatus Write_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	603a      	str	r2, [r7, #0]
 800bb32:	80fb      	strh	r3, [r7, #6]
 800bb34:	460b      	mov	r3, r1
 800bb36:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bb38:	2392      	movs	r3, #146	; 0x92
 800bb3a:	73fb      	strb	r3, [r7, #15]
  uint8_t index;

  index = 0;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bb40:	e01b      	b.n	800bb7a <Write_Char+0x52>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(UUID)
 800bb42:	88fb      	ldrh	r3, [r7, #6]
 800bb44:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d112      	bne.n	800bb72 <Write_Char+0x4a>
    {
      case P2P_WRITE_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
        ret = aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
 800bb4e:	4a12      	ldr	r2, [pc, #72]	; (800bb98 <Write_Char+0x70>)
 800bb50:	011b      	lsls	r3, r3, #4
 800bb52:	4413      	add	r3, r2
 800bb54:	3302      	adds	r3, #2
 800bb56:	8818      	ldrh	r0, [r3, #0]
 800bb58:	7bbb      	ldrb	r3, [r7, #14]
 800bb5a:	4a0f      	ldr	r2, [pc, #60]	; (800bb98 <Write_Char+0x70>)
 800bb5c:	011b      	lsls	r3, r3, #4
 800bb5e:	4413      	add	r3, r2
 800bb60:	3308      	adds	r3, #8
 800bb62:	8819      	ldrh	r1, [r3, #0]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	2202      	movs	r2, #2
 800bb68:	f7fc ff0d 	bl	8008986 <aci_gatt_write_without_resp>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73fb      	strb	r3, [r7, #15]
                                         aP2PClientContext[index].P2PWriteToServerCharHdle,
                                         2, /* charValueLen */
                                         (uint8_t *)  pPayload);
        break;
 800bb70:	e000      	b.n	800bb74 <Write_Char+0x4c>
      default:
        break;
 800bb72:	bf00      	nop
    }
    index++;
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
 800bb76:	3301      	adds	r3, #1
 800bb78:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d106      	bne.n	800bb8e <Write_Char+0x66>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800bb80:	7bbb      	ldrb	r3, [r7, #14]
 800bb82:	4a05      	ldr	r2, [pc, #20]	; (800bb98 <Write_Char+0x70>)
 800bb84:	011b      	lsls	r3, r3, #4
 800bb86:	4413      	add	r3, r2
 800bb88:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1d9      	bne.n	800bb42 <Write_Char+0x1a>
  }

  return ret;
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
}/* end Write_Char() */
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	2000163c 	.word	0x2000163c

0800bb9c <Button_Trigger_Received>:

void Button_Trigger_Received(void)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	af00      	add	r7, sp, #0
  APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON PUSHED - WRITE TO SERVER \n ");
 800bba0:	480c      	ldr	r0, [pc, #48]	; (800bbd4 <Button_Trigger_Received+0x38>)
 800bba2:	f000 fe77 	bl	800c894 <iprintf>
  APP_DBG_MSG(" \n\r");
 800bba6:	480c      	ldr	r0, [pc, #48]	; (800bbd8 <Button_Trigger_Received+0x3c>)
 800bba8:	f000 fe74 	bl	800c894 <iprintf>
  if(P2P_Client_App_Context.ButtonStatus.Button1 == 0x00)
 800bbac:	4b0b      	ldr	r3, [pc, #44]	; (800bbdc <Button_Trigger_Received+0x40>)
 800bbae:	791b      	ldrb	r3, [r3, #4]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d103      	bne.n	800bbbc <Button_Trigger_Received+0x20>
  {
    P2P_Client_App_Context.ButtonStatus.Button1 = 0x01;
 800bbb4:	4b09      	ldr	r3, [pc, #36]	; (800bbdc <Button_Trigger_Received+0x40>)
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	711a      	strb	r2, [r3, #4]
 800bbba:	e002      	b.n	800bbc2 <Button_Trigger_Received+0x26>
  }else {
    P2P_Client_App_Context.ButtonStatus.Button1 = 0x00;
 800bbbc:	4b07      	ldr	r3, [pc, #28]	; (800bbdc <Button_Trigger_Received+0x40>)
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	711a      	strb	r2, [r3, #4]
  }

  Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.ButtonStatus);
 800bbc2:	4a07      	ldr	r2, [pc, #28]	; (800bbe0 <Button_Trigger_Received+0x44>)
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	f64f 6041 	movw	r0, #65089	; 0xfe41
 800bbca:	f7ff ffad 	bl	800bb28 <Write_Char>

  return;
 800bbce:	bf00      	nop
}
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	0800e604 	.word	0x0800e604
 800bbd8:	0800e5c0 	.word	0x0800e5c0
 800bbdc:	2000164c 	.word	0x2000164c
 800bbe0:	2000164f 	.word	0x2000164f

0800bbe4 <Update_Service>:

void Update_Service()
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 800bbea:	2301      	movs	r3, #1
 800bbec:	80bb      	strh	r3, [r7, #4]
  uint16_t disable = 0x0000;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	807b      	strh	r3, [r7, #2]
  uint8_t index;

  index = 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bbf6:	e0a5      	b.n	800bd44 <Update_Service+0x160>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(aP2PClientContext[index].state)
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	4a5a      	ldr	r2, [pc, #360]	; (800bd64 <Update_Service+0x180>)
 800bbfc:	011b      	lsls	r3, r3, #4
 800bbfe:	4413      	add	r3, r2
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	3b07      	subs	r3, #7
 800bc04:	2b05      	cmp	r3, #5
 800bc06:	f200 8099 	bhi.w	800bd3c <Update_Service+0x158>
 800bc0a:	a201      	add	r2, pc, #4	; (adr r2, 800bc10 <Update_Service+0x2c>)
 800bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc10:	0800bc29 	.word	0x0800bc29
 800bc14:	0800bc31 	.word	0x0800bc31
 800bc18:	0800bc63 	.word	0x0800bc63
 800bc1c:	0800bc99 	.word	0x0800bc99
 800bc20:	0800bccf 	.word	0x0800bccf
 800bc24:	0800bd09 	.word	0x0800bd09
    {
      case APP_BLE_DISCOVER_SERVICES:
        APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
 800bc28:	484f      	ldr	r0, [pc, #316]	; (800bd68 <Update_Service+0x184>)
 800bc2a:	f000 fea1 	bl	800c970 <puts>
        break;
 800bc2e:	e086      	b.n	800bd3e <Update_Service+0x15a>
      case APP_BLE_DISCOVER_CHARACS:
        APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
 800bc30:	484e      	ldr	r0, [pc, #312]	; (800bd6c <Update_Service+0x188>)
 800bc32:	f000 fe9d 	bl	800c970 <puts>
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800bc36:	79fb      	ldrb	r3, [r7, #7]
 800bc38:	4a4a      	ldr	r2, [pc, #296]	; (800bd64 <Update_Service+0x180>)
 800bc3a:	011b      	lsls	r3, r3, #4
 800bc3c:	4413      	add	r3, r2
 800bc3e:	3302      	adds	r3, #2
 800bc40:	8818      	ldrh	r0, [r3, #0]
 800bc42:	79fb      	ldrb	r3, [r7, #7]
 800bc44:	4a47      	ldr	r2, [pc, #284]	; (800bd64 <Update_Service+0x180>)
 800bc46:	011b      	lsls	r3, r3, #4
 800bc48:	4413      	add	r3, r2
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	8819      	ldrh	r1, [r3, #0]
 800bc4e:	79fb      	ldrb	r3, [r7, #7]
 800bc50:	4a44      	ldr	r2, [pc, #272]	; (800bd64 <Update_Service+0x180>)
 800bc52:	011b      	lsls	r3, r3, #4
 800bc54:	4413      	add	r3, r2
 800bc56:	3306      	adds	r3, #6
 800bc58:	881b      	ldrh	r3, [r3, #0]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	f7fc fcf2 	bl	8008644 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                          aP2PClientContext[index].P2PServiceEndHandle);
        break;
 800bc60:	e06d      	b.n	800bd3e <Update_Service+0x15a>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No descriptor */
        APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write  Characteristic\n");
 800bc62:	4843      	ldr	r0, [pc, #268]	; (800bd70 <Update_Service+0x18c>)
 800bc64:	f000 fe84 	bl	800c970 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800bc68:	79fb      	ldrb	r3, [r7, #7]
 800bc6a:	4a3e      	ldr	r2, [pc, #248]	; (800bd64 <Update_Service+0x180>)
 800bc6c:	011b      	lsls	r3, r3, #4
 800bc6e:	4413      	add	r3, r2
 800bc70:	3302      	adds	r3, #2
 800bc72:	8818      	ldrh	r0, [r3, #0]
 800bc74:	79fb      	ldrb	r3, [r7, #7]
 800bc76:	4a3b      	ldr	r2, [pc, #236]	; (800bd64 <Update_Service+0x180>)
 800bc78:	011b      	lsls	r3, r3, #4
 800bc7a:	4413      	add	r3, r2
 800bc7c:	3308      	adds	r3, #8
 800bc7e:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 800bc80:	79fb      	ldrb	r3, [r7, #7]
 800bc82:	4a38      	ldr	r2, [pc, #224]	; (800bd64 <Update_Service+0x180>)
 800bc84:	011b      	lsls	r3, r3, #4
 800bc86:	4413      	add	r3, r2
 800bc88:	3308      	adds	r3, #8
 800bc8a:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800bc8c:	3302      	adds	r3, #2
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	461a      	mov	r2, r3
 800bc92:	f7fc fd58 	bl	8008746 <aci_gatt_disc_all_char_desc>
        break;
 800bc96:	e052      	b.n	800bd3e <Update_Service+0x15a>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification  Characteristic\n");
 800bc98:	4836      	ldr	r0, [pc, #216]	; (800bd74 <Update_Service+0x190>)
 800bc9a:	f000 fe69 	bl	800c970 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	4a30      	ldr	r2, [pc, #192]	; (800bd64 <Update_Service+0x180>)
 800bca2:	011b      	lsls	r3, r3, #4
 800bca4:	4413      	add	r3, r2
 800bca6:	3302      	adds	r3, #2
 800bca8:	8818      	ldrh	r0, [r3, #0]
 800bcaa:	79fb      	ldrb	r3, [r7, #7]
 800bcac:	4a2d      	ldr	r2, [pc, #180]	; (800bd64 <Update_Service+0x180>)
 800bcae:	011b      	lsls	r3, r3, #4
 800bcb0:	4413      	add	r3, r2
 800bcb2:	330c      	adds	r3, #12
 800bcb4:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 800bcb6:	79fb      	ldrb	r3, [r7, #7]
 800bcb8:	4a2a      	ldr	r2, [pc, #168]	; (800bd64 <Update_Service+0x180>)
 800bcba:	011b      	lsls	r3, r3, #4
 800bcbc:	4413      	add	r3, r2
 800bcbe:	330c      	adds	r3, #12
 800bcc0:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800bcc2:	3302      	adds	r3, #2
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	f7fc fd3d 	bl	8008746 <aci_gatt_disc_all_char_desc>
        break;
 800bccc:	e037      	b.n	800bd3e <Update_Service+0x15a>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        APP_DBG_MSG("* GATT : Enable Server Notification\n");
 800bcce:	482a      	ldr	r0, [pc, #168]	; (800bd78 <Update_Service+0x194>)
 800bcd0:	f000 fe4e 	bl	800c970 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800bcd4:	79fb      	ldrb	r3, [r7, #7]
 800bcd6:	4a23      	ldr	r2, [pc, #140]	; (800bd64 <Update_Service+0x180>)
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	4413      	add	r3, r2
 800bcdc:	3302      	adds	r3, #2
 800bcde:	8818      	ldrh	r0, [r3, #0]
 800bce0:	79fb      	ldrb	r3, [r7, #7]
 800bce2:	4a20      	ldr	r2, [pc, #128]	; (800bd64 <Update_Service+0x180>)
 800bce4:	011b      	lsls	r3, r3, #4
 800bce6:	4413      	add	r3, r2
 800bce8:	330e      	adds	r3, #14
 800bcea:	8819      	ldrh	r1, [r3, #0]
 800bcec:	1d3b      	adds	r3, r7, #4
 800bcee:	2202      	movs	r2, #2
 800bcf0:	f7fc fdaa 	bl	8008848 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800bcf4:	79fb      	ldrb	r3, [r7, #7]
 800bcf6:	4a1b      	ldr	r2, [pc, #108]	; (800bd64 <Update_Service+0x180>)
 800bcf8:	011b      	lsls	r3, r3, #4
 800bcfa:	4413      	add	r3, r2
 800bcfc:	2206      	movs	r2, #6
 800bcfe:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_RED);
 800bd00:	2002      	movs	r0, #2
 800bd02:	f7f6 fdcd 	bl	80028a0 <BSP_LED_Off>
        break;
 800bd06:	e01a      	b.n	800bd3e <Update_Service+0x15a>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        APP_DBG_MSG("* GATT : Disable Server Notification\n");
 800bd08:	481c      	ldr	r0, [pc, #112]	; (800bd7c <Update_Service+0x198>)
 800bd0a:	f000 fe31 	bl	800c970 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800bd0e:	79fb      	ldrb	r3, [r7, #7]
 800bd10:	4a14      	ldr	r2, [pc, #80]	; (800bd64 <Update_Service+0x180>)
 800bd12:	011b      	lsls	r3, r3, #4
 800bd14:	4413      	add	r3, r2
 800bd16:	3302      	adds	r3, #2
 800bd18:	8818      	ldrh	r0, [r3, #0]
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	4a11      	ldr	r2, [pc, #68]	; (800bd64 <Update_Service+0x180>)
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	4413      	add	r3, r2
 800bd22:	330e      	adds	r3, #14
 800bd24:	8819      	ldrh	r1, [r3, #0]
 800bd26:	1cbb      	adds	r3, r7, #2
 800bd28:	2202      	movs	r2, #2
 800bd2a:	f7fc fd8d 	bl	8008848 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&disable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800bd2e:	79fb      	ldrb	r3, [r7, #7]
 800bd30:	4a0c      	ldr	r2, [pc, #48]	; (800bd64 <Update_Service+0x180>)
 800bd32:	011b      	lsls	r3, r3, #4
 800bd34:	4413      	add	r3, r2
 800bd36:	2206      	movs	r2, #6
 800bd38:	701a      	strb	r2, [r3, #0]
        break;
 800bd3a:	e000      	b.n	800bd3e <Update_Service+0x15a>
      default:
        break;
 800bd3c:	bf00      	nop
    }
    index++;
 800bd3e:	79fb      	ldrb	r3, [r7, #7]
 800bd40:	3301      	adds	r3, #1
 800bd42:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bd44:	79fb      	ldrb	r3, [r7, #7]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d108      	bne.n	800bd5c <Update_Service+0x178>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800bd4a:	79fb      	ldrb	r3, [r7, #7]
 800bd4c:	4a05      	ldr	r2, [pc, #20]	; (800bd64 <Update_Service+0x180>)
 800bd4e:	011b      	lsls	r3, r3, #4
 800bd50:	4413      	add	r3, r2
 800bd52:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f47f af4f 	bne.w	800bbf8 <Update_Service+0x14>
  }
  return;
 800bd5a:	bf00      	nop
 800bd5c:	bf00      	nop
}
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	2000163c 	.word	0x2000163c
 800bd68:	0800e644 	.word	0x0800e644
 800bd6c:	0800e65c 	.word	0x0800e65c
 800bd70:	0800e684 	.word	0x0800e684
 800bd74:	0800e6c0 	.word	0x0800e6c0
 800bd78:	0800e704 	.word	0x0800e704
 800bd7c:	0800e728 	.word	0x0800e728

0800bd80 <LL_PWR_EnableBootC2>:
{
 800bd80:	b480      	push	{r7}
 800bd82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800bd84:	4b05      	ldr	r3, [pc, #20]	; (800bd9c <LL_PWR_EnableBootC2+0x1c>)
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	4a04      	ldr	r2, [pc, #16]	; (800bd9c <LL_PWR_EnableBootC2+0x1c>)
 800bd8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd8e:	60d3      	str	r3, [r2, #12]
}
 800bd90:	bf00      	nop
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	58000400 	.word	0x58000400

0800bda0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800bda8:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bdaa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800bdae:	4905      	ldr	r1, [pc, #20]	; (800bdc4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800bdb8:	bf00      	nop
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	58000800 	.word	0x58000800

0800bdc8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800bdd0:	4b05      	ldr	r3, [pc, #20]	; (800bde8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800bdd2:	6a1a      	ldr	r2, [r3, #32]
 800bdd4:	4904      	ldr	r1, [pc, #16]	; (800bde8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	620b      	str	r3, [r1, #32]
}
 800bddc:	bf00      	nop
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr
 800bde8:	58000800 	.word	0x58000800

0800bdec <LL_AHB3_GRP1_EnableClock>:
{
 800bdec:	b480      	push	{r7}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bdf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bdf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bdfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4313      	orrs	r3, r2
 800be02:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800be04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4013      	ands	r3, r2
 800be0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800be10:	68fb      	ldr	r3, [r7, #12]
}
 800be12:	bf00      	nop
 800be14:	3714      	adds	r7, #20
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800be1e:	b480      	push	{r7}
 800be20:	b085      	sub	sp, #20
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800be26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be2a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800be2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4313      	orrs	r3, r2
 800be36:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800be3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800be3e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4013      	ands	r3, r2
 800be46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800be48:	68fb      	ldr	r3, [r7, #12]
}
 800be4a:	bf00      	nop
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <LL_C1_IPCC_EnableIT_TXF>:
{
 800be56:	b480      	push	{r7}
 800be58:	b083      	sub	sp, #12
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	601a      	str	r2, [r3, #0]
}
 800be6a:	bf00      	nop
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <LL_C1_IPCC_EnableIT_RXO>:
{
 800be76:	b480      	push	{r7}
 800be78:	b083      	sub	sp, #12
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f043 0201 	orr.w	r2, r3, #1
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	601a      	str	r2, [r3, #0]
}
 800be8a:	bf00      	nop
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr

0800be96 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800be96:	b480      	push	{r7}
 800be98:	b083      	sub	sp, #12
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	685a      	ldr	r2, [r3, #4]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	041b      	lsls	r3, r3, #16
 800bea8:	43db      	mvns	r3, r3
 800beaa:	401a      	ands	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	605a      	str	r2, [r3, #4]
}
 800beb0:	bf00      	nop
 800beb2:	370c      	adds	r7, #12
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <LL_C1_IPCC_DisableTransmitChannel>:
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	041b      	lsls	r3, r3, #16
 800bece:	431a      	orrs	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	605a      	str	r2, [r3, #4]
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	685a      	ldr	r2, [r3, #4]
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	43db      	mvns	r3, r3
 800bef2:	401a      	ands	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	605a      	str	r2, [r3, #4]
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	683a      	ldr	r2, [r7, #0]
 800bf12:	609a      	str	r2, [r3, #8]
}
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <LL_C1_IPCC_SetFlag_CHx>:
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	041a      	lsls	r2, r3, #16
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	609a      	str	r2, [r3, #8]
}
 800bf32:	bf00      	nop
 800bf34:	370c      	adds	r7, #12
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr

0800bf3e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800bf3e:	b480      	push	{r7}
 800bf40:	b083      	sub	sp, #12
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	6078      	str	r0, [r7, #4]
 800bf46:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	68da      	ldr	r2, [r3, #12]
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	4013      	ands	r3, r2
 800bf50:	683a      	ldr	r2, [r7, #0]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d101      	bne.n	800bf5a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800bf56:	2301      	movs	r3, #1
 800bf58:	e000      	b.n	800bf5c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800bf5a:	2300      	movs	r3, #0
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	69da      	ldr	r2, [r3, #28]
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	4013      	ands	r3, r2
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d101      	bne.n	800bf84 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800bf80:	2301      	movs	r3, #1
 800bf82:	e000      	b.n	800bf86 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	370c      	adds	r7, #12
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
	...

0800bf94 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800bf98:	2102      	movs	r1, #2
 800bf9a:	4818      	ldr	r0, [pc, #96]	; (800bffc <HW_IPCC_Rx_Handler+0x68>)
 800bf9c:	f7ff ffe4 	bl	800bf68 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d008      	beq.n	800bfb8 <HW_IPCC_Rx_Handler+0x24>
 800bfa6:	4b15      	ldr	r3, [pc, #84]	; (800bffc <HW_IPCC_Rx_Handler+0x68>)
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	f003 0302 	and.w	r3, r3, #2
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d102      	bne.n	800bfb8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800bfb2:	f000 f8d5 	bl	800c160 <HW_IPCC_SYS_EvtHandler>
 800bfb6:	e01e      	b.n	800bff6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800bfb8:	2101      	movs	r1, #1
 800bfba:	4810      	ldr	r0, [pc, #64]	; (800bffc <HW_IPCC_Rx_Handler+0x68>)
 800bfbc:	f7ff ffd4 	bl	800bf68 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d008      	beq.n	800bfd8 <HW_IPCC_Rx_Handler+0x44>
 800bfc6:	4b0d      	ldr	r3, [pc, #52]	; (800bffc <HW_IPCC_Rx_Handler+0x68>)
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d102      	bne.n	800bfd8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800bfd2:	f000 f889 	bl	800c0e8 <HW_IPCC_BLE_EvtHandler>
 800bfd6:	e00e      	b.n	800bff6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800bfd8:	2108      	movs	r1, #8
 800bfda:	4808      	ldr	r0, [pc, #32]	; (800bffc <HW_IPCC_Rx_Handler+0x68>)
 800bfdc:	f7ff ffc4 	bl	800bf68 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d008      	beq.n	800bff8 <HW_IPCC_Rx_Handler+0x64>
 800bfe6:	4b05      	ldr	r3, [pc, #20]	; (800bffc <HW_IPCC_Rx_Handler+0x68>)
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	f003 0308 	and.w	r3, r3, #8
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d102      	bne.n	800bff8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800bff2:	f000 f901 	bl	800c1f8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800bff6:	bf00      	nop
 800bff8:	bf00      	nop
}
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	58000c00 	.word	0x58000c00

0800c000 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c004:	2102      	movs	r1, #2
 800c006:	4818      	ldr	r0, [pc, #96]	; (800c068 <HW_IPCC_Tx_Handler+0x68>)
 800c008:	f7ff ff99 	bl	800bf3e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d108      	bne.n	800c024 <HW_IPCC_Tx_Handler+0x24>
 800c012:	4b15      	ldr	r3, [pc, #84]	; (800c068 <HW_IPCC_Tx_Handler+0x68>)
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d102      	bne.n	800c024 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c01e:	f000 f893 	bl	800c148 <HW_IPCC_SYS_CmdEvtHandler>
 800c022:	e01e      	b.n	800c062 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c024:	2108      	movs	r1, #8
 800c026:	4810      	ldr	r0, [pc, #64]	; (800c068 <HW_IPCC_Tx_Handler+0x68>)
 800c028:	f7ff ff89 	bl	800bf3e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d108      	bne.n	800c044 <HW_IPCC_Tx_Handler+0x44>
 800c032:	4b0d      	ldr	r3, [pc, #52]	; (800c068 <HW_IPCC_Tx_Handler+0x68>)
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d102      	bne.n	800c044 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c03e:	f000 f8bd 	bl	800c1bc <HW_IPCC_MM_FreeBufHandler>
 800c042:	e00e      	b.n	800c062 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c044:	2120      	movs	r1, #32
 800c046:	4808      	ldr	r0, [pc, #32]	; (800c068 <HW_IPCC_Tx_Handler+0x68>)
 800c048:	f7ff ff79 	bl	800bf3e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d108      	bne.n	800c064 <HW_IPCC_Tx_Handler+0x64>
 800c052:	4b05      	ldr	r3, [pc, #20]	; (800c068 <HW_IPCC_Tx_Handler+0x68>)
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d102      	bne.n	800c064 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c05e:	f000 f84f 	bl	800c100 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c062:	bf00      	nop
 800c064:	bf00      	nop
}
 800c066:	bd80      	pop	{r7, pc}
 800c068:	58000c00 	.word	0x58000c00

0800c06c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c070:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c074:	f7ff fed3 	bl	800be1e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c078:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c07c:	f7ff fea4 	bl	800bdc8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c080:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c084:	f7ff fe8c 	bl	800bda0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c088:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c08a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c08c:	f7ff fe78 	bl	800bd80 <LL_PWR_EnableBootC2>

  return;
 800c090:	bf00      	nop
}
 800c092:	bd80      	pop	{r7, pc}

0800c094 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c098:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c09c:	f7ff fea6 	bl	800bdec <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c0a0:	4806      	ldr	r0, [pc, #24]	; (800c0bc <HW_IPCC_Init+0x28>)
 800c0a2:	f7ff fee8 	bl	800be76 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c0a6:	4805      	ldr	r0, [pc, #20]	; (800c0bc <HW_IPCC_Init+0x28>)
 800c0a8:	f7ff fed5 	bl	800be56 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c0ac:	202c      	movs	r0, #44	; 0x2c
 800c0ae:	f7f6 ff24 	bl	8002efa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c0b2:	202d      	movs	r0, #45	; 0x2d
 800c0b4:	f7f6 ff21 	bl	8002efa <HAL_NVIC_EnableIRQ>

  return;
 800c0b8:	bf00      	nop
}
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	58000c00 	.word	0x58000c00

0800c0c0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	4802      	ldr	r0, [pc, #8]	; (800c0d0 <HW_IPCC_BLE_Init+0x10>)
 800c0c8:	f7ff ff0a 	bl	800bee0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c0cc:	bf00      	nop
}
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	58000c00 	.word	0x58000c00

0800c0d4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c0d8:	2101      	movs	r1, #1
 800c0da:	4802      	ldr	r0, [pc, #8]	; (800c0e4 <HW_IPCC_BLE_SendCmd+0x10>)
 800c0dc:	f7ff ff20 	bl	800bf20 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c0e0:	bf00      	nop
}
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	58000c00 	.word	0x58000c00

0800c0e8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c0ec:	f7fd fcc6 	bl	8009a7c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	4802      	ldr	r0, [pc, #8]	; (800c0fc <HW_IPCC_BLE_EvtHandler+0x14>)
 800c0f4:	f7ff ff06 	bl	800bf04 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c0f8:	bf00      	nop
}
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	58000c00 	.word	0x58000c00

0800c100 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c104:	2120      	movs	r1, #32
 800c106:	4803      	ldr	r0, [pc, #12]	; (800c114 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c108:	f7ff fed8 	bl	800bebc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c10c:	f7fd fce6 	bl	8009adc <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c110:	bf00      	nop
}
 800c112:	bd80      	pop	{r7, pc}
 800c114:	58000c00 	.word	0x58000c00

0800c118 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c11c:	2102      	movs	r1, #2
 800c11e:	4802      	ldr	r0, [pc, #8]	; (800c128 <HW_IPCC_SYS_Init+0x10>)
 800c120:	f7ff fede 	bl	800bee0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c124:	bf00      	nop
}
 800c126:	bd80      	pop	{r7, pc}
 800c128:	58000c00 	.word	0x58000c00

0800c12c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c130:	2102      	movs	r1, #2
 800c132:	4804      	ldr	r0, [pc, #16]	; (800c144 <HW_IPCC_SYS_SendCmd+0x18>)
 800c134:	f7ff fef4 	bl	800bf20 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c138:	2102      	movs	r1, #2
 800c13a:	4802      	ldr	r0, [pc, #8]	; (800c144 <HW_IPCC_SYS_SendCmd+0x18>)
 800c13c:	f7ff feab 	bl	800be96 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c140:	bf00      	nop
}
 800c142:	bd80      	pop	{r7, pc}
 800c144:	58000c00 	.word	0x58000c00

0800c148 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c14c:	2102      	movs	r1, #2
 800c14e:	4803      	ldr	r0, [pc, #12]	; (800c15c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c150:	f7ff feb4 	bl	800bebc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c154:	f7fd fd12 	bl	8009b7c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c158:	bf00      	nop
}
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	58000c00 	.word	0x58000c00

0800c160 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c164:	f7fd fd20 	bl	8009ba8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c168:	2102      	movs	r1, #2
 800c16a:	4802      	ldr	r0, [pc, #8]	; (800c174 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c16c:	f7ff feca 	bl	800bf04 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c170:	bf00      	nop
}
 800c172:	bd80      	pop	{r7, pc}
 800c174:	58000c00 	.word	0x58000c00

0800c178 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c180:	2108      	movs	r1, #8
 800c182:	480c      	ldr	r0, [pc, #48]	; (800c1b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c184:	f7ff fedb 	bl	800bf3e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d007      	beq.n	800c19e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c18e:	4a0a      	ldr	r2, [pc, #40]	; (800c1b8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c194:	2108      	movs	r1, #8
 800c196:	4807      	ldr	r0, [pc, #28]	; (800c1b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c198:	f7ff fe7d 	bl	800be96 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c19c:	e006      	b.n	800c1ac <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c1a2:	2108      	movs	r1, #8
 800c1a4:	4803      	ldr	r0, [pc, #12]	; (800c1b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c1a6:	f7ff febb 	bl	800bf20 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c1aa:	bf00      	nop
}
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	58000c00 	.word	0x58000c00
 800c1b8:	20001654 	.word	0x20001654

0800c1bc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c1c0:	2108      	movs	r1, #8
 800c1c2:	4806      	ldr	r0, [pc, #24]	; (800c1dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c1c4:	f7ff fe7a 	bl	800bebc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c1c8:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c1ce:	2108      	movs	r1, #8
 800c1d0:	4802      	ldr	r0, [pc, #8]	; (800c1dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c1d2:	f7ff fea5 	bl	800bf20 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c1d6:	bf00      	nop
}
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	58000c00 	.word	0x58000c00
 800c1e0:	20001654 	.word	0x20001654

0800c1e4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c1e8:	2108      	movs	r1, #8
 800c1ea:	4802      	ldr	r0, [pc, #8]	; (800c1f4 <HW_IPCC_TRACES_Init+0x10>)
 800c1ec:	f7ff fe78 	bl	800bee0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c1f0:	bf00      	nop
}
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	58000c00 	.word	0x58000c00

0800c1f8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c1fc:	f7fd fd7c 	bl	8009cf8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c200:	2108      	movs	r1, #8
 800c202:	4802      	ldr	r0, [pc, #8]	; (800c20c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c204:	f7ff fe7e 	bl	800bf04 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c208:	bf00      	nop
}
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	58000c00 	.word	0x58000c00

0800c210 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c210:	b480      	push	{r7}
 800c212:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c214:	4b05      	ldr	r3, [pc, #20]	; (800c22c <UTIL_LPM_Init+0x1c>)
 800c216:	2200      	movs	r2, #0
 800c218:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c21a:	4b05      	ldr	r3, [pc, #20]	; (800c230 <UTIL_LPM_Init+0x20>)
 800c21c:	2200      	movs	r2, #0
 800c21e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c220:	bf00      	nop
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	20001658 	.word	0x20001658
 800c230:	2000165c 	.word	0x2000165c

0800c234 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c234:	b480      	push	{r7}
 800c236:	b087      	sub	sp, #28
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	460b      	mov	r3, r1
 800c23e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c240:	f3ef 8310 	mrs	r3, PRIMASK
 800c244:	613b      	str	r3, [r7, #16]
  return(result);
 800c246:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c248:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c24a:	b672      	cpsid	i
}
 800c24c:	bf00      	nop
  
  switch(state)
 800c24e:	78fb      	ldrb	r3, [r7, #3]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d008      	beq.n	800c266 <UTIL_LPM_SetOffMode+0x32>
 800c254:	2b01      	cmp	r3, #1
 800c256:	d10e      	bne.n	800c276 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c258:	4b0d      	ldr	r3, [pc, #52]	; (800c290 <UTIL_LPM_SetOffMode+0x5c>)
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4313      	orrs	r3, r2
 800c260:	4a0b      	ldr	r2, [pc, #44]	; (800c290 <UTIL_LPM_SetOffMode+0x5c>)
 800c262:	6013      	str	r3, [r2, #0]
      break;
 800c264:	e008      	b.n	800c278 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	43da      	mvns	r2, r3
 800c26a:	4b09      	ldr	r3, [pc, #36]	; (800c290 <UTIL_LPM_SetOffMode+0x5c>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4013      	ands	r3, r2
 800c270:	4a07      	ldr	r2, [pc, #28]	; (800c290 <UTIL_LPM_SetOffMode+0x5c>)
 800c272:	6013      	str	r3, [r2, #0]
      break;
 800c274:	e000      	b.n	800c278 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c276:	bf00      	nop
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f383 8810 	msr	PRIMASK, r3
}
 800c282:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c284:	bf00      	nop
 800c286:	371c      	adds	r7, #28
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr
 800c290:	2000165c 	.word	0x2000165c

0800c294 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b090      	sub	sp, #64	; 0x40
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c29c:	4b73      	ldr	r3, [pc, #460]	; (800c46c <UTIL_SEQ_Run+0x1d8>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c2a2:	4b72      	ldr	r3, [pc, #456]	; (800c46c <UTIL_SEQ_Run+0x1d8>)
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4013      	ands	r3, r2
 800c2aa:	4a70      	ldr	r2, [pc, #448]	; (800c46c <UTIL_SEQ_Run+0x1d8>)
 800c2ac:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c2ae:	4b70      	ldr	r3, [pc, #448]	; (800c470 <UTIL_SEQ_Run+0x1dc>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c2b4:	4b6f      	ldr	r3, [pc, #444]	; (800c474 <UTIL_SEQ_Run+0x1e0>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c2ba:	4b6f      	ldr	r3, [pc, #444]	; (800c478 <UTIL_SEQ_Run+0x1e4>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c2c0:	4b6e      	ldr	r3, [pc, #440]	; (800c47c <UTIL_SEQ_Run+0x1e8>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c2c6:	e08d      	b.n	800c3e4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c2cc:	e002      	b.n	800c2d4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c2d4:	4a6a      	ldr	r2, [pc, #424]	; (800c480 <UTIL_SEQ_Run+0x1ec>)
 800c2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2de:	401a      	ands	r2, r3
 800c2e0:	4b62      	ldr	r3, [pc, #392]	; (800c46c <UTIL_SEQ_Run+0x1d8>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d0f1      	beq.n	800c2ce <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c2ea:	4a65      	ldr	r2, [pc, #404]	; (800c480 <UTIL_SEQ_Run+0x1ec>)
 800c2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f4:	401a      	ands	r2, r3
 800c2f6:	4b5d      	ldr	r3, [pc, #372]	; (800c46c <UTIL_SEQ_Run+0x1d8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c2fe:	4a60      	ldr	r2, [pc, #384]	; (800c480 <UTIL_SEQ_Run+0x1ec>)
 800c300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	4413      	add	r3, r2
 800c306:	685a      	ldr	r2, [r3, #4]
 800c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30a:	4013      	ands	r3, r2
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d106      	bne.n	800c31e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c310:	4a5b      	ldr	r2, [pc, #364]	; (800c480 <UTIL_SEQ_Run+0x1ec>)
 800c312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c314:	00db      	lsls	r3, r3, #3
 800c316:	4413      	add	r3, r2
 800c318:	f04f 32ff 	mov.w	r2, #4294967295
 800c31c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c31e:	4a58      	ldr	r2, [pc, #352]	; (800c480 <UTIL_SEQ_Run+0x1ec>)
 800c320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c322:	00db      	lsls	r3, r3, #3
 800c324:	4413      	add	r3, r2
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32a:	4013      	ands	r3, r2
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 f9b3 	bl	800c698 <SEQ_BitPosition>
 800c332:	4603      	mov	r3, r0
 800c334:	461a      	mov	r2, r3
 800c336:	4b53      	ldr	r3, [pc, #332]	; (800c484 <UTIL_SEQ_Run+0x1f0>)
 800c338:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c33a:	4a51      	ldr	r2, [pc, #324]	; (800c480 <UTIL_SEQ_Run+0x1ec>)
 800c33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	4413      	add	r3, r2
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	4b4f      	ldr	r3, [pc, #316]	; (800c484 <UTIL_SEQ_Run+0x1f0>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2101      	movs	r1, #1
 800c34a:	fa01 f303 	lsl.w	r3, r1, r3
 800c34e:	43db      	mvns	r3, r3
 800c350:	401a      	ands	r2, r3
 800c352:	494b      	ldr	r1, [pc, #300]	; (800c480 <UTIL_SEQ_Run+0x1ec>)
 800c354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	440b      	add	r3, r1
 800c35a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c35c:	f3ef 8310 	mrs	r3, PRIMASK
 800c360:	61bb      	str	r3, [r7, #24]
  return(result);
 800c362:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c364:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c366:	b672      	cpsid	i
}
 800c368:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c36a:	4b46      	ldr	r3, [pc, #280]	; (800c484 <UTIL_SEQ_Run+0x1f0>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2201      	movs	r2, #1
 800c370:	fa02 f303 	lsl.w	r3, r2, r3
 800c374:	43da      	mvns	r2, r3
 800c376:	4b3e      	ldr	r3, [pc, #248]	; (800c470 <UTIL_SEQ_Run+0x1dc>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4013      	ands	r3, r2
 800c37c:	4a3c      	ldr	r2, [pc, #240]	; (800c470 <UTIL_SEQ_Run+0x1dc>)
 800c37e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c380:	2302      	movs	r3, #2
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c384:	e013      	b.n	800c3ae <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c388:	3b01      	subs	r3, #1
 800c38a:	4a3d      	ldr	r2, [pc, #244]	; (800c480 <UTIL_SEQ_Run+0x1ec>)
 800c38c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c390:	4b3c      	ldr	r3, [pc, #240]	; (800c484 <UTIL_SEQ_Run+0x1f0>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2201      	movs	r2, #1
 800c396:	fa02 f303 	lsl.w	r3, r2, r3
 800c39a:	43da      	mvns	r2, r3
 800c39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	400a      	ands	r2, r1
 800c3a2:	4937      	ldr	r1, [pc, #220]	; (800c480 <UTIL_SEQ_Run+0x1ec>)
 800c3a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1e8      	bne.n	800c386 <UTIL_SEQ_Run+0xf2>
 800c3b4:	6a3b      	ldr	r3, [r7, #32]
 800c3b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	f383 8810 	msr	PRIMASK, r3
}
 800c3be:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c3c0:	4b30      	ldr	r3, [pc, #192]	; (800c484 <UTIL_SEQ_Run+0x1f0>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a30      	ldr	r2, [pc, #192]	; (800c488 <UTIL_SEQ_Run+0x1f4>)
 800c3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3ca:	4798      	blx	r3

    local_taskset = TaskSet;
 800c3cc:	4b28      	ldr	r3, [pc, #160]	; (800c470 <UTIL_SEQ_Run+0x1dc>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c3d2:	4b28      	ldr	r3, [pc, #160]	; (800c474 <UTIL_SEQ_Run+0x1e0>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c3d8:	4b27      	ldr	r3, [pc, #156]	; (800c478 <UTIL_SEQ_Run+0x1e4>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c3de:	4b27      	ldr	r3, [pc, #156]	; (800c47c <UTIL_SEQ_Run+0x1e8>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c3e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	401a      	ands	r2, r3
 800c3ea:	4b20      	ldr	r3, [pc, #128]	; (800c46c <UTIL_SEQ_Run+0x1d8>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4013      	ands	r3, r2
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d005      	beq.n	800c400 <UTIL_SEQ_Run+0x16c>
 800c3f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	4013      	ands	r3, r2
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f43f af64 	beq.w	800c2c8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c400:	4b20      	ldr	r3, [pc, #128]	; (800c484 <UTIL_SEQ_Run+0x1f0>)
 800c402:	f04f 32ff 	mov.w	r2, #4294967295
 800c406:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c408:	f000 f938 	bl	800c67c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c40c:	f3ef 8310 	mrs	r3, PRIMASK
 800c410:	613b      	str	r3, [r7, #16]
  return(result);
 800c412:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c414:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c416:	b672      	cpsid	i
}
 800c418:	bf00      	nop
  local_taskset = TaskSet;
 800c41a:	4b15      	ldr	r3, [pc, #84]	; (800c470 <UTIL_SEQ_Run+0x1dc>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c420:	4b14      	ldr	r3, [pc, #80]	; (800c474 <UTIL_SEQ_Run+0x1e0>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c426:	4b14      	ldr	r3, [pc, #80]	; (800c478 <UTIL_SEQ_Run+0x1e4>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c42c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	401a      	ands	r2, r3
 800c432:	4b0e      	ldr	r3, [pc, #56]	; (800c46c <UTIL_SEQ_Run+0x1d8>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4013      	ands	r3, r2
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d107      	bne.n	800c44c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c43c:	4b0f      	ldr	r3, [pc, #60]	; (800c47c <UTIL_SEQ_Run+0x1e8>)
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c442:	4013      	ands	r3, r2
 800c444:	2b00      	cmp	r3, #0
 800c446:	d101      	bne.n	800c44c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c448:	f7f4 fd8b 	bl	8000f62 <UTIL_SEQ_Idle>
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f383 8810 	msr	PRIMASK, r3
}
 800c456:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c458:	f000 f917 	bl	800c68a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c45c:	4a03      	ldr	r2, [pc, #12]	; (800c46c <UTIL_SEQ_Run+0x1d8>)
 800c45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c460:	6013      	str	r3, [r2, #0]

  return;
 800c462:	bf00      	nop
}
 800c464:	3740      	adds	r7, #64	; 0x40
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	20000030 	.word	0x20000030
 800c470:	20001660 	.word	0x20001660
 800c474:	20001664 	.word	0x20001664
 800c478:	2000002c 	.word	0x2000002c
 800c47c:	20001668 	.word	0x20001668
 800c480:	200016f0 	.word	0x200016f0
 800c484:	2000166c 	.word	0x2000166c
 800c488:	20001670 	.word	0x20001670

0800c48c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c498:	f3ef 8310 	mrs	r3, PRIMASK
 800c49c:	617b      	str	r3, [r7, #20]
  return(result);
 800c49e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c4a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c4a2:	b672      	cpsid	i
}
 800c4a4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	f000 f8f6 	bl	800c698 <SEQ_BitPosition>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	4a06      	ldr	r2, [pc, #24]	; (800c4cc <UTIL_SEQ_RegTask+0x40>)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	f383 8810 	msr	PRIMASK, r3
}
 800c4c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c4c4:	bf00      	nop
}
 800c4c6:	3720      	adds	r7, #32
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	20001670 	.word	0x20001670

0800c4d0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b087      	sub	sp, #28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4da:	f3ef 8310 	mrs	r3, PRIMASK
 800c4de:	60fb      	str	r3, [r7, #12]
  return(result);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c4e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c4e4:	b672      	cpsid	i
}
 800c4e6:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c4e8:	4b0d      	ldr	r3, [pc, #52]	; (800c520 <UTIL_SEQ_SetTask+0x50>)
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	4a0b      	ldr	r2, [pc, #44]	; (800c520 <UTIL_SEQ_SetTask+0x50>)
 800c4f2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c4f4:	4a0b      	ldr	r2, [pc, #44]	; (800c524 <UTIL_SEQ_SetTask+0x54>)
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	431a      	orrs	r2, r3
 800c500:	4908      	ldr	r1, [pc, #32]	; (800c524 <UTIL_SEQ_SetTask+0x54>)
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	f383 8810 	msr	PRIMASK, r3
}
 800c512:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c514:	bf00      	nop
}
 800c516:	371c      	adds	r7, #28
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	20001660 	.word	0x20001660
 800c524:	200016f0 	.word	0x200016f0

0800c528 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c528:	b480      	push	{r7}
 800c52a:	b087      	sub	sp, #28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c530:	f3ef 8310 	mrs	r3, PRIMASK
 800c534:	60fb      	str	r3, [r7, #12]
  return(result);
 800c536:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c538:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c53a:	b672      	cpsid	i
}
 800c53c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	43da      	mvns	r2, r3
 800c542:	4b08      	ldr	r3, [pc, #32]	; (800c564 <UTIL_SEQ_PauseTask+0x3c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4013      	ands	r3, r2
 800c548:	4a06      	ldr	r2, [pc, #24]	; (800c564 <UTIL_SEQ_PauseTask+0x3c>)
 800c54a:	6013      	str	r3, [r2, #0]
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	f383 8810 	msr	PRIMASK, r3
}
 800c556:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c558:	bf00      	nop
}
 800c55a:	371c      	adds	r7, #28
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr
 800c564:	2000002c 	.word	0x2000002c

0800c568 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c568:	b480      	push	{r7}
 800c56a:	b087      	sub	sp, #28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c570:	f3ef 8310 	mrs	r3, PRIMASK
 800c574:	60fb      	str	r3, [r7, #12]
  return(result);
 800c576:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c578:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c57a:	b672      	cpsid	i
}
 800c57c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c57e:	4b09      	ldr	r3, [pc, #36]	; (800c5a4 <UTIL_SEQ_ResumeTask+0x3c>)
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4313      	orrs	r3, r2
 800c586:	4a07      	ldr	r2, [pc, #28]	; (800c5a4 <UTIL_SEQ_ResumeTask+0x3c>)
 800c588:	6013      	str	r3, [r2, #0]
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	f383 8810 	msr	PRIMASK, r3
}
 800c594:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c596:	bf00      	nop
}
 800c598:	371c      	adds	r7, #28
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	2000002c 	.word	0x2000002c

0800c5a8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b087      	sub	sp, #28
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5b0:	f3ef 8310 	mrs	r3, PRIMASK
 800c5b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c5b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5ba:	b672      	cpsid	i
}
 800c5bc:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c5be:	4b09      	ldr	r3, [pc, #36]	; (800c5e4 <UTIL_SEQ_SetEvt+0x3c>)
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	4a07      	ldr	r2, [pc, #28]	; (800c5e4 <UTIL_SEQ_SetEvt+0x3c>)
 800c5c8:	6013      	str	r3, [r2, #0]
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	f383 8810 	msr	PRIMASK, r3
}
 800c5d4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c5d6:	bf00      	nop
}
 800c5d8:	371c      	adds	r7, #28
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	20001664 	.word	0x20001664

0800c5e8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c5f0:	4b1f      	ldr	r3, [pc, #124]	; (800c670 <UTIL_SEQ_WaitEvt+0x88>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c5f6:	4b1e      	ldr	r3, [pc, #120]	; (800c670 <UTIL_SEQ_WaitEvt+0x88>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5fe:	d102      	bne.n	800c606 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c600:	2300      	movs	r3, #0
 800c602:	61fb      	str	r3, [r7, #28]
 800c604:	e005      	b.n	800c612 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c606:	4b1a      	ldr	r3, [pc, #104]	; (800c670 <UTIL_SEQ_WaitEvt+0x88>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2201      	movs	r2, #1
 800c60c:	fa02 f303 	lsl.w	r3, r2, r3
 800c610:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c612:	4b18      	ldr	r3, [pc, #96]	; (800c674 <UTIL_SEQ_WaitEvt+0x8c>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c618:	4a16      	ldr	r2, [pc, #88]	; (800c674 <UTIL_SEQ_WaitEvt+0x8c>)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c61e:	e003      	b.n	800c628 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c620:	6879      	ldr	r1, [r7, #4]
 800c622:	69f8      	ldr	r0, [r7, #28]
 800c624:	f7f4 fca4 	bl	8000f70 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c628:	4b13      	ldr	r3, [pc, #76]	; (800c678 <UTIL_SEQ_WaitEvt+0x90>)
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4013      	ands	r3, r2
 800c630:	2b00      	cmp	r3, #0
 800c632:	d0f5      	beq.n	800c620 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c634:	4a0e      	ldr	r2, [pc, #56]	; (800c670 <UTIL_SEQ_WaitEvt+0x88>)
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c63a:	f3ef 8310 	mrs	r3, PRIMASK
 800c63e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c640:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c642:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c644:	b672      	cpsid	i
}
 800c646:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	43da      	mvns	r2, r3
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <UTIL_SEQ_WaitEvt+0x90>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4013      	ands	r3, r2
 800c652:	4a09      	ldr	r2, [pc, #36]	; (800c678 <UTIL_SEQ_WaitEvt+0x90>)
 800c654:	6013      	str	r3, [r2, #0]
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f383 8810 	msr	PRIMASK, r3
}
 800c660:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c662:	4a04      	ldr	r2, [pc, #16]	; (800c674 <UTIL_SEQ_WaitEvt+0x8c>)
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	6013      	str	r3, [r2, #0]
  return;
 800c668:	bf00      	nop
}
 800c66a:	3720      	adds	r7, #32
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	2000166c 	.word	0x2000166c
 800c674:	20001668 	.word	0x20001668
 800c678:	20001664 	.word	0x20001664

0800c67c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c67c:	b480      	push	{r7}
 800c67e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c680:	bf00      	nop
}
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr

0800c68a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c68a:	b480      	push	{r7}
 800c68c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c68e:	bf00      	nop
}
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c698:	b480      	push	{r7}
 800c69a:	b085      	sub	sp, #20
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	0c1b      	lsrs	r3, r3, #16
 800c6ac:	041b      	lsls	r3, r3, #16
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d104      	bne.n	800c6bc <SEQ_BitPosition+0x24>
 800c6b2:	2310      	movs	r3, #16
 800c6b4:	73fb      	strb	r3, [r7, #15]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	041b      	lsls	r3, r3, #16
 800c6ba:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d105      	bne.n	800c6d2 <SEQ_BitPosition+0x3a>
 800c6c6:	7bfb      	ldrb	r3, [r7, #15]
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	73fb      	strb	r3, [r7, #15]
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	021b      	lsls	r3, r3, #8
 800c6d0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d105      	bne.n	800c6e8 <SEQ_BitPosition+0x50>
 800c6dc:	7bfb      	ldrb	r3, [r7, #15]
 800c6de:	3304      	adds	r3, #4
 800c6e0:	73fb      	strb	r3, [r7, #15]
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	011b      	lsls	r3, r3, #4
 800c6e6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	0f1b      	lsrs	r3, r3, #28
 800c6ec:	4a07      	ldr	r2, [pc, #28]	; (800c70c <SEQ_BitPosition+0x74>)
 800c6ee:	5cd2      	ldrb	r2, [r2, r3]
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
 800c6f2:	4413      	add	r3, r2
 800c6f4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
 800c6f8:	f1c3 031f 	rsb	r3, r3, #31
 800c6fc:	b2db      	uxtb	r3, r3
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3714      	adds	r7, #20
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	0800e984 	.word	0x0800e984

0800c710 <std>:
 800c710:	2300      	movs	r3, #0
 800c712:	b510      	push	{r4, lr}
 800c714:	4604      	mov	r4, r0
 800c716:	e9c0 3300 	strd	r3, r3, [r0]
 800c71a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c71e:	6083      	str	r3, [r0, #8]
 800c720:	8181      	strh	r1, [r0, #12]
 800c722:	6643      	str	r3, [r0, #100]	; 0x64
 800c724:	81c2      	strh	r2, [r0, #14]
 800c726:	6183      	str	r3, [r0, #24]
 800c728:	4619      	mov	r1, r3
 800c72a:	2208      	movs	r2, #8
 800c72c:	305c      	adds	r0, #92	; 0x5c
 800c72e:	f000 f9ff 	bl	800cb30 <memset>
 800c732:	4b0d      	ldr	r3, [pc, #52]	; (800c768 <std+0x58>)
 800c734:	6263      	str	r3, [r4, #36]	; 0x24
 800c736:	4b0d      	ldr	r3, [pc, #52]	; (800c76c <std+0x5c>)
 800c738:	62a3      	str	r3, [r4, #40]	; 0x28
 800c73a:	4b0d      	ldr	r3, [pc, #52]	; (800c770 <std+0x60>)
 800c73c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c73e:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <std+0x64>)
 800c740:	6323      	str	r3, [r4, #48]	; 0x30
 800c742:	4b0d      	ldr	r3, [pc, #52]	; (800c778 <std+0x68>)
 800c744:	6224      	str	r4, [r4, #32]
 800c746:	429c      	cmp	r4, r3
 800c748:	d006      	beq.n	800c758 <std+0x48>
 800c74a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c74e:	4294      	cmp	r4, r2
 800c750:	d002      	beq.n	800c758 <std+0x48>
 800c752:	33d0      	adds	r3, #208	; 0xd0
 800c754:	429c      	cmp	r4, r3
 800c756:	d105      	bne.n	800c764 <std+0x54>
 800c758:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c760:	f000 ba58 	b.w	800cc14 <__retarget_lock_init_recursive>
 800c764:	bd10      	pop	{r4, pc}
 800c766:	bf00      	nop
 800c768:	0800c981 	.word	0x0800c981
 800c76c:	0800c9a3 	.word	0x0800c9a3
 800c770:	0800c9db 	.word	0x0800c9db
 800c774:	0800c9ff 	.word	0x0800c9ff
 800c778:	20001700 	.word	0x20001700

0800c77c <stdio_exit_handler>:
 800c77c:	4a02      	ldr	r2, [pc, #8]	; (800c788 <stdio_exit_handler+0xc>)
 800c77e:	4903      	ldr	r1, [pc, #12]	; (800c78c <stdio_exit_handler+0x10>)
 800c780:	4803      	ldr	r0, [pc, #12]	; (800c790 <stdio_exit_handler+0x14>)
 800c782:	f000 b869 	b.w	800c858 <_fwalk_sglue>
 800c786:	bf00      	nop
 800c788:	20000034 	.word	0x20000034
 800c78c:	0800d4dd 	.word	0x0800d4dd
 800c790:	20000040 	.word	0x20000040

0800c794 <cleanup_stdio>:
 800c794:	6841      	ldr	r1, [r0, #4]
 800c796:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <cleanup_stdio+0x34>)
 800c798:	4299      	cmp	r1, r3
 800c79a:	b510      	push	{r4, lr}
 800c79c:	4604      	mov	r4, r0
 800c79e:	d001      	beq.n	800c7a4 <cleanup_stdio+0x10>
 800c7a0:	f000 fe9c 	bl	800d4dc <_fflush_r>
 800c7a4:	68a1      	ldr	r1, [r4, #8]
 800c7a6:	4b09      	ldr	r3, [pc, #36]	; (800c7cc <cleanup_stdio+0x38>)
 800c7a8:	4299      	cmp	r1, r3
 800c7aa:	d002      	beq.n	800c7b2 <cleanup_stdio+0x1e>
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f000 fe95 	bl	800d4dc <_fflush_r>
 800c7b2:	68e1      	ldr	r1, [r4, #12]
 800c7b4:	4b06      	ldr	r3, [pc, #24]	; (800c7d0 <cleanup_stdio+0x3c>)
 800c7b6:	4299      	cmp	r1, r3
 800c7b8:	d004      	beq.n	800c7c4 <cleanup_stdio+0x30>
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7c0:	f000 be8c 	b.w	800d4dc <_fflush_r>
 800c7c4:	bd10      	pop	{r4, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20001700 	.word	0x20001700
 800c7cc:	20001768 	.word	0x20001768
 800c7d0:	200017d0 	.word	0x200017d0

0800c7d4 <global_stdio_init.part.0>:
 800c7d4:	b510      	push	{r4, lr}
 800c7d6:	4b0b      	ldr	r3, [pc, #44]	; (800c804 <global_stdio_init.part.0+0x30>)
 800c7d8:	4c0b      	ldr	r4, [pc, #44]	; (800c808 <global_stdio_init.part.0+0x34>)
 800c7da:	4a0c      	ldr	r2, [pc, #48]	; (800c80c <global_stdio_init.part.0+0x38>)
 800c7dc:	601a      	str	r2, [r3, #0]
 800c7de:	4620      	mov	r0, r4
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	2104      	movs	r1, #4
 800c7e4:	f7ff ff94 	bl	800c710 <std>
 800c7e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	2109      	movs	r1, #9
 800c7f0:	f7ff ff8e 	bl	800c710 <std>
 800c7f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c7f8:	2202      	movs	r2, #2
 800c7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7fe:	2112      	movs	r1, #18
 800c800:	f7ff bf86 	b.w	800c710 <std>
 800c804:	20001838 	.word	0x20001838
 800c808:	20001700 	.word	0x20001700
 800c80c:	0800c77d 	.word	0x0800c77d

0800c810 <__sfp_lock_acquire>:
 800c810:	4801      	ldr	r0, [pc, #4]	; (800c818 <__sfp_lock_acquire+0x8>)
 800c812:	f000 ba00 	b.w	800cc16 <__retarget_lock_acquire_recursive>
 800c816:	bf00      	nop
 800c818:	20001841 	.word	0x20001841

0800c81c <__sfp_lock_release>:
 800c81c:	4801      	ldr	r0, [pc, #4]	; (800c824 <__sfp_lock_release+0x8>)
 800c81e:	f000 b9fb 	b.w	800cc18 <__retarget_lock_release_recursive>
 800c822:	bf00      	nop
 800c824:	20001841 	.word	0x20001841

0800c828 <__sinit>:
 800c828:	b510      	push	{r4, lr}
 800c82a:	4604      	mov	r4, r0
 800c82c:	f7ff fff0 	bl	800c810 <__sfp_lock_acquire>
 800c830:	6a23      	ldr	r3, [r4, #32]
 800c832:	b11b      	cbz	r3, 800c83c <__sinit+0x14>
 800c834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c838:	f7ff bff0 	b.w	800c81c <__sfp_lock_release>
 800c83c:	4b04      	ldr	r3, [pc, #16]	; (800c850 <__sinit+0x28>)
 800c83e:	6223      	str	r3, [r4, #32]
 800c840:	4b04      	ldr	r3, [pc, #16]	; (800c854 <__sinit+0x2c>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1f5      	bne.n	800c834 <__sinit+0xc>
 800c848:	f7ff ffc4 	bl	800c7d4 <global_stdio_init.part.0>
 800c84c:	e7f2      	b.n	800c834 <__sinit+0xc>
 800c84e:	bf00      	nop
 800c850:	0800c795 	.word	0x0800c795
 800c854:	20001838 	.word	0x20001838

0800c858 <_fwalk_sglue>:
 800c858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c85c:	4607      	mov	r7, r0
 800c85e:	4688      	mov	r8, r1
 800c860:	4614      	mov	r4, r2
 800c862:	2600      	movs	r6, #0
 800c864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c868:	f1b9 0901 	subs.w	r9, r9, #1
 800c86c:	d505      	bpl.n	800c87a <_fwalk_sglue+0x22>
 800c86e:	6824      	ldr	r4, [r4, #0]
 800c870:	2c00      	cmp	r4, #0
 800c872:	d1f7      	bne.n	800c864 <_fwalk_sglue+0xc>
 800c874:	4630      	mov	r0, r6
 800c876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c87a:	89ab      	ldrh	r3, [r5, #12]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d907      	bls.n	800c890 <_fwalk_sglue+0x38>
 800c880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c884:	3301      	adds	r3, #1
 800c886:	d003      	beq.n	800c890 <_fwalk_sglue+0x38>
 800c888:	4629      	mov	r1, r5
 800c88a:	4638      	mov	r0, r7
 800c88c:	47c0      	blx	r8
 800c88e:	4306      	orrs	r6, r0
 800c890:	3568      	adds	r5, #104	; 0x68
 800c892:	e7e9      	b.n	800c868 <_fwalk_sglue+0x10>

0800c894 <iprintf>:
 800c894:	b40f      	push	{r0, r1, r2, r3}
 800c896:	b507      	push	{r0, r1, r2, lr}
 800c898:	4906      	ldr	r1, [pc, #24]	; (800c8b4 <iprintf+0x20>)
 800c89a:	ab04      	add	r3, sp, #16
 800c89c:	6808      	ldr	r0, [r1, #0]
 800c89e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a2:	6881      	ldr	r1, [r0, #8]
 800c8a4:	9301      	str	r3, [sp, #4]
 800c8a6:	f000 fae9 	bl	800ce7c <_vfiprintf_r>
 800c8aa:	b003      	add	sp, #12
 800c8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8b0:	b004      	add	sp, #16
 800c8b2:	4770      	bx	lr
 800c8b4:	2000008c 	.word	0x2000008c

0800c8b8 <putchar>:
 800c8b8:	4b02      	ldr	r3, [pc, #8]	; (800c8c4 <putchar+0xc>)
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	6818      	ldr	r0, [r3, #0]
 800c8be:	6882      	ldr	r2, [r0, #8]
 800c8c0:	f000 be96 	b.w	800d5f0 <_putc_r>
 800c8c4:	2000008c 	.word	0x2000008c

0800c8c8 <_puts_r>:
 800c8c8:	6a03      	ldr	r3, [r0, #32]
 800c8ca:	b570      	push	{r4, r5, r6, lr}
 800c8cc:	6884      	ldr	r4, [r0, #8]
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	460e      	mov	r6, r1
 800c8d2:	b90b      	cbnz	r3, 800c8d8 <_puts_r+0x10>
 800c8d4:	f7ff ffa8 	bl	800c828 <__sinit>
 800c8d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8da:	07db      	lsls	r3, r3, #31
 800c8dc:	d405      	bmi.n	800c8ea <_puts_r+0x22>
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	0598      	lsls	r0, r3, #22
 800c8e2:	d402      	bmi.n	800c8ea <_puts_r+0x22>
 800c8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8e6:	f000 f996 	bl	800cc16 <__retarget_lock_acquire_recursive>
 800c8ea:	89a3      	ldrh	r3, [r4, #12]
 800c8ec:	0719      	lsls	r1, r3, #28
 800c8ee:	d513      	bpl.n	800c918 <_puts_r+0x50>
 800c8f0:	6923      	ldr	r3, [r4, #16]
 800c8f2:	b18b      	cbz	r3, 800c918 <_puts_r+0x50>
 800c8f4:	3e01      	subs	r6, #1
 800c8f6:	68a3      	ldr	r3, [r4, #8]
 800c8f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	60a3      	str	r3, [r4, #8]
 800c900:	b9e9      	cbnz	r1, 800c93e <_puts_r+0x76>
 800c902:	2b00      	cmp	r3, #0
 800c904:	da2e      	bge.n	800c964 <_puts_r+0x9c>
 800c906:	4622      	mov	r2, r4
 800c908:	210a      	movs	r1, #10
 800c90a:	4628      	mov	r0, r5
 800c90c:	f000 f87b 	bl	800ca06 <__swbuf_r>
 800c910:	3001      	adds	r0, #1
 800c912:	d007      	beq.n	800c924 <_puts_r+0x5c>
 800c914:	250a      	movs	r5, #10
 800c916:	e007      	b.n	800c928 <_puts_r+0x60>
 800c918:	4621      	mov	r1, r4
 800c91a:	4628      	mov	r0, r5
 800c91c:	f000 f8b0 	bl	800ca80 <__swsetup_r>
 800c920:	2800      	cmp	r0, #0
 800c922:	d0e7      	beq.n	800c8f4 <_puts_r+0x2c>
 800c924:	f04f 35ff 	mov.w	r5, #4294967295
 800c928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c92a:	07da      	lsls	r2, r3, #31
 800c92c:	d405      	bmi.n	800c93a <_puts_r+0x72>
 800c92e:	89a3      	ldrh	r3, [r4, #12]
 800c930:	059b      	lsls	r3, r3, #22
 800c932:	d402      	bmi.n	800c93a <_puts_r+0x72>
 800c934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c936:	f000 f96f 	bl	800cc18 <__retarget_lock_release_recursive>
 800c93a:	4628      	mov	r0, r5
 800c93c:	bd70      	pop	{r4, r5, r6, pc}
 800c93e:	2b00      	cmp	r3, #0
 800c940:	da04      	bge.n	800c94c <_puts_r+0x84>
 800c942:	69a2      	ldr	r2, [r4, #24]
 800c944:	429a      	cmp	r2, r3
 800c946:	dc06      	bgt.n	800c956 <_puts_r+0x8e>
 800c948:	290a      	cmp	r1, #10
 800c94a:	d004      	beq.n	800c956 <_puts_r+0x8e>
 800c94c:	6823      	ldr	r3, [r4, #0]
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	6022      	str	r2, [r4, #0]
 800c952:	7019      	strb	r1, [r3, #0]
 800c954:	e7cf      	b.n	800c8f6 <_puts_r+0x2e>
 800c956:	4622      	mov	r2, r4
 800c958:	4628      	mov	r0, r5
 800c95a:	f000 f854 	bl	800ca06 <__swbuf_r>
 800c95e:	3001      	adds	r0, #1
 800c960:	d1c9      	bne.n	800c8f6 <_puts_r+0x2e>
 800c962:	e7df      	b.n	800c924 <_puts_r+0x5c>
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	250a      	movs	r5, #10
 800c968:	1c5a      	adds	r2, r3, #1
 800c96a:	6022      	str	r2, [r4, #0]
 800c96c:	701d      	strb	r5, [r3, #0]
 800c96e:	e7db      	b.n	800c928 <_puts_r+0x60>

0800c970 <puts>:
 800c970:	4b02      	ldr	r3, [pc, #8]	; (800c97c <puts+0xc>)
 800c972:	4601      	mov	r1, r0
 800c974:	6818      	ldr	r0, [r3, #0]
 800c976:	f7ff bfa7 	b.w	800c8c8 <_puts_r>
 800c97a:	bf00      	nop
 800c97c:	2000008c 	.word	0x2000008c

0800c980 <__sread>:
 800c980:	b510      	push	{r4, lr}
 800c982:	460c      	mov	r4, r1
 800c984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c988:	f000 f8fc 	bl	800cb84 <_read_r>
 800c98c:	2800      	cmp	r0, #0
 800c98e:	bfab      	itete	ge
 800c990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c992:	89a3      	ldrhlt	r3, [r4, #12]
 800c994:	181b      	addge	r3, r3, r0
 800c996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c99a:	bfac      	ite	ge
 800c99c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c99e:	81a3      	strhlt	r3, [r4, #12]
 800c9a0:	bd10      	pop	{r4, pc}

0800c9a2 <__swrite>:
 800c9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a6:	461f      	mov	r7, r3
 800c9a8:	898b      	ldrh	r3, [r1, #12]
 800c9aa:	05db      	lsls	r3, r3, #23
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	460c      	mov	r4, r1
 800c9b0:	4616      	mov	r6, r2
 800c9b2:	d505      	bpl.n	800c9c0 <__swrite+0x1e>
 800c9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f000 f8d0 	bl	800cb60 <_lseek_r>
 800c9c0:	89a3      	ldrh	r3, [r4, #12]
 800c9c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9ca:	81a3      	strh	r3, [r4, #12]
 800c9cc:	4632      	mov	r2, r6
 800c9ce:	463b      	mov	r3, r7
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d6:	f000 b8e7 	b.w	800cba8 <_write_r>

0800c9da <__sseek>:
 800c9da:	b510      	push	{r4, lr}
 800c9dc:	460c      	mov	r4, r1
 800c9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9e2:	f000 f8bd 	bl	800cb60 <_lseek_r>
 800c9e6:	1c43      	adds	r3, r0, #1
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	bf15      	itete	ne
 800c9ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9f6:	81a3      	strheq	r3, [r4, #12]
 800c9f8:	bf18      	it	ne
 800c9fa:	81a3      	strhne	r3, [r4, #12]
 800c9fc:	bd10      	pop	{r4, pc}

0800c9fe <__sclose>:
 800c9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca02:	f000 b89d 	b.w	800cb40 <_close_r>

0800ca06 <__swbuf_r>:
 800ca06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca08:	460e      	mov	r6, r1
 800ca0a:	4614      	mov	r4, r2
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	b118      	cbz	r0, 800ca18 <__swbuf_r+0x12>
 800ca10:	6a03      	ldr	r3, [r0, #32]
 800ca12:	b90b      	cbnz	r3, 800ca18 <__swbuf_r+0x12>
 800ca14:	f7ff ff08 	bl	800c828 <__sinit>
 800ca18:	69a3      	ldr	r3, [r4, #24]
 800ca1a:	60a3      	str	r3, [r4, #8]
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	071a      	lsls	r2, r3, #28
 800ca20:	d525      	bpl.n	800ca6e <__swbuf_r+0x68>
 800ca22:	6923      	ldr	r3, [r4, #16]
 800ca24:	b31b      	cbz	r3, 800ca6e <__swbuf_r+0x68>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	6922      	ldr	r2, [r4, #16]
 800ca2a:	1a98      	subs	r0, r3, r2
 800ca2c:	6963      	ldr	r3, [r4, #20]
 800ca2e:	b2f6      	uxtb	r6, r6
 800ca30:	4283      	cmp	r3, r0
 800ca32:	4637      	mov	r7, r6
 800ca34:	dc04      	bgt.n	800ca40 <__swbuf_r+0x3a>
 800ca36:	4621      	mov	r1, r4
 800ca38:	4628      	mov	r0, r5
 800ca3a:	f000 fd4f 	bl	800d4dc <_fflush_r>
 800ca3e:	b9e0      	cbnz	r0, 800ca7a <__swbuf_r+0x74>
 800ca40:	68a3      	ldr	r3, [r4, #8]
 800ca42:	3b01      	subs	r3, #1
 800ca44:	60a3      	str	r3, [r4, #8]
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	1c5a      	adds	r2, r3, #1
 800ca4a:	6022      	str	r2, [r4, #0]
 800ca4c:	701e      	strb	r6, [r3, #0]
 800ca4e:	6962      	ldr	r2, [r4, #20]
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d004      	beq.n	800ca60 <__swbuf_r+0x5a>
 800ca56:	89a3      	ldrh	r3, [r4, #12]
 800ca58:	07db      	lsls	r3, r3, #31
 800ca5a:	d506      	bpl.n	800ca6a <__swbuf_r+0x64>
 800ca5c:	2e0a      	cmp	r6, #10
 800ca5e:	d104      	bne.n	800ca6a <__swbuf_r+0x64>
 800ca60:	4621      	mov	r1, r4
 800ca62:	4628      	mov	r0, r5
 800ca64:	f000 fd3a 	bl	800d4dc <_fflush_r>
 800ca68:	b938      	cbnz	r0, 800ca7a <__swbuf_r+0x74>
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca6e:	4621      	mov	r1, r4
 800ca70:	4628      	mov	r0, r5
 800ca72:	f000 f805 	bl	800ca80 <__swsetup_r>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d0d5      	beq.n	800ca26 <__swbuf_r+0x20>
 800ca7a:	f04f 37ff 	mov.w	r7, #4294967295
 800ca7e:	e7f4      	b.n	800ca6a <__swbuf_r+0x64>

0800ca80 <__swsetup_r>:
 800ca80:	b538      	push	{r3, r4, r5, lr}
 800ca82:	4b2a      	ldr	r3, [pc, #168]	; (800cb2c <__swsetup_r+0xac>)
 800ca84:	4605      	mov	r5, r0
 800ca86:	6818      	ldr	r0, [r3, #0]
 800ca88:	460c      	mov	r4, r1
 800ca8a:	b118      	cbz	r0, 800ca94 <__swsetup_r+0x14>
 800ca8c:	6a03      	ldr	r3, [r0, #32]
 800ca8e:	b90b      	cbnz	r3, 800ca94 <__swsetup_r+0x14>
 800ca90:	f7ff feca 	bl	800c828 <__sinit>
 800ca94:	89a3      	ldrh	r3, [r4, #12]
 800ca96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca9a:	0718      	lsls	r0, r3, #28
 800ca9c:	d422      	bmi.n	800cae4 <__swsetup_r+0x64>
 800ca9e:	06d9      	lsls	r1, r3, #27
 800caa0:	d407      	bmi.n	800cab2 <__swsetup_r+0x32>
 800caa2:	2309      	movs	r3, #9
 800caa4:	602b      	str	r3, [r5, #0]
 800caa6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800caaa:	81a3      	strh	r3, [r4, #12]
 800caac:	f04f 30ff 	mov.w	r0, #4294967295
 800cab0:	e034      	b.n	800cb1c <__swsetup_r+0x9c>
 800cab2:	0758      	lsls	r0, r3, #29
 800cab4:	d512      	bpl.n	800cadc <__swsetup_r+0x5c>
 800cab6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cab8:	b141      	cbz	r1, 800cacc <__swsetup_r+0x4c>
 800caba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cabe:	4299      	cmp	r1, r3
 800cac0:	d002      	beq.n	800cac8 <__swsetup_r+0x48>
 800cac2:	4628      	mov	r0, r5
 800cac4:	f000 f8b8 	bl	800cc38 <_free_r>
 800cac8:	2300      	movs	r3, #0
 800caca:	6363      	str	r3, [r4, #52]	; 0x34
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cad2:	81a3      	strh	r3, [r4, #12]
 800cad4:	2300      	movs	r3, #0
 800cad6:	6063      	str	r3, [r4, #4]
 800cad8:	6923      	ldr	r3, [r4, #16]
 800cada:	6023      	str	r3, [r4, #0]
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	f043 0308 	orr.w	r3, r3, #8
 800cae2:	81a3      	strh	r3, [r4, #12]
 800cae4:	6923      	ldr	r3, [r4, #16]
 800cae6:	b94b      	cbnz	r3, 800cafc <__swsetup_r+0x7c>
 800cae8:	89a3      	ldrh	r3, [r4, #12]
 800caea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800caee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caf2:	d003      	beq.n	800cafc <__swsetup_r+0x7c>
 800caf4:	4621      	mov	r1, r4
 800caf6:	4628      	mov	r0, r5
 800caf8:	f000 fd3e 	bl	800d578 <__smakebuf_r>
 800cafc:	89a0      	ldrh	r0, [r4, #12]
 800cafe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb02:	f010 0301 	ands.w	r3, r0, #1
 800cb06:	d00a      	beq.n	800cb1e <__swsetup_r+0x9e>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60a3      	str	r3, [r4, #8]
 800cb0c:	6963      	ldr	r3, [r4, #20]
 800cb0e:	425b      	negs	r3, r3
 800cb10:	61a3      	str	r3, [r4, #24]
 800cb12:	6923      	ldr	r3, [r4, #16]
 800cb14:	b943      	cbnz	r3, 800cb28 <__swsetup_r+0xa8>
 800cb16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb1a:	d1c4      	bne.n	800caa6 <__swsetup_r+0x26>
 800cb1c:	bd38      	pop	{r3, r4, r5, pc}
 800cb1e:	0781      	lsls	r1, r0, #30
 800cb20:	bf58      	it	pl
 800cb22:	6963      	ldrpl	r3, [r4, #20]
 800cb24:	60a3      	str	r3, [r4, #8]
 800cb26:	e7f4      	b.n	800cb12 <__swsetup_r+0x92>
 800cb28:	2000      	movs	r0, #0
 800cb2a:	e7f7      	b.n	800cb1c <__swsetup_r+0x9c>
 800cb2c:	2000008c 	.word	0x2000008c

0800cb30 <memset>:
 800cb30:	4402      	add	r2, r0
 800cb32:	4603      	mov	r3, r0
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d100      	bne.n	800cb3a <memset+0xa>
 800cb38:	4770      	bx	lr
 800cb3a:	f803 1b01 	strb.w	r1, [r3], #1
 800cb3e:	e7f9      	b.n	800cb34 <memset+0x4>

0800cb40 <_close_r>:
 800cb40:	b538      	push	{r3, r4, r5, lr}
 800cb42:	4d06      	ldr	r5, [pc, #24]	; (800cb5c <_close_r+0x1c>)
 800cb44:	2300      	movs	r3, #0
 800cb46:	4604      	mov	r4, r0
 800cb48:	4608      	mov	r0, r1
 800cb4a:	602b      	str	r3, [r5, #0]
 800cb4c:	f000 fdb6 	bl	800d6bc <_close>
 800cb50:	1c43      	adds	r3, r0, #1
 800cb52:	d102      	bne.n	800cb5a <_close_r+0x1a>
 800cb54:	682b      	ldr	r3, [r5, #0]
 800cb56:	b103      	cbz	r3, 800cb5a <_close_r+0x1a>
 800cb58:	6023      	str	r3, [r4, #0]
 800cb5a:	bd38      	pop	{r3, r4, r5, pc}
 800cb5c:	2000183c 	.word	0x2000183c

0800cb60 <_lseek_r>:
 800cb60:	b538      	push	{r3, r4, r5, lr}
 800cb62:	4d07      	ldr	r5, [pc, #28]	; (800cb80 <_lseek_r+0x20>)
 800cb64:	4604      	mov	r4, r0
 800cb66:	4608      	mov	r0, r1
 800cb68:	4611      	mov	r1, r2
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	602a      	str	r2, [r5, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	f000 fdbc 	bl	800d6ec <_lseek>
 800cb74:	1c43      	adds	r3, r0, #1
 800cb76:	d102      	bne.n	800cb7e <_lseek_r+0x1e>
 800cb78:	682b      	ldr	r3, [r5, #0]
 800cb7a:	b103      	cbz	r3, 800cb7e <_lseek_r+0x1e>
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	bd38      	pop	{r3, r4, r5, pc}
 800cb80:	2000183c 	.word	0x2000183c

0800cb84 <_read_r>:
 800cb84:	b538      	push	{r3, r4, r5, lr}
 800cb86:	4d07      	ldr	r5, [pc, #28]	; (800cba4 <_read_r+0x20>)
 800cb88:	4604      	mov	r4, r0
 800cb8a:	4608      	mov	r0, r1
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	2200      	movs	r2, #0
 800cb90:	602a      	str	r2, [r5, #0]
 800cb92:	461a      	mov	r2, r3
 800cb94:	f000 fdb2 	bl	800d6fc <_read>
 800cb98:	1c43      	adds	r3, r0, #1
 800cb9a:	d102      	bne.n	800cba2 <_read_r+0x1e>
 800cb9c:	682b      	ldr	r3, [r5, #0]
 800cb9e:	b103      	cbz	r3, 800cba2 <_read_r+0x1e>
 800cba0:	6023      	str	r3, [r4, #0]
 800cba2:	bd38      	pop	{r3, r4, r5, pc}
 800cba4:	2000183c 	.word	0x2000183c

0800cba8 <_write_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d07      	ldr	r5, [pc, #28]	; (800cbc8 <_write_r+0x20>)
 800cbac:	4604      	mov	r4, r0
 800cbae:	4608      	mov	r0, r1
 800cbb0:	4611      	mov	r1, r2
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	602a      	str	r2, [r5, #0]
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	f7fd f966 	bl	8009e88 <_write>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	d102      	bne.n	800cbc6 <_write_r+0x1e>
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	b103      	cbz	r3, 800cbc6 <_write_r+0x1e>
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	2000183c 	.word	0x2000183c

0800cbcc <__libc_init_array>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	4d0d      	ldr	r5, [pc, #52]	; (800cc04 <__libc_init_array+0x38>)
 800cbd0:	4c0d      	ldr	r4, [pc, #52]	; (800cc08 <__libc_init_array+0x3c>)
 800cbd2:	1b64      	subs	r4, r4, r5
 800cbd4:	10a4      	asrs	r4, r4, #2
 800cbd6:	2600      	movs	r6, #0
 800cbd8:	42a6      	cmp	r6, r4
 800cbda:	d109      	bne.n	800cbf0 <__libc_init_array+0x24>
 800cbdc:	4d0b      	ldr	r5, [pc, #44]	; (800cc0c <__libc_init_array+0x40>)
 800cbde:	4c0c      	ldr	r4, [pc, #48]	; (800cc10 <__libc_init_array+0x44>)
 800cbe0:	f000 fda2 	bl	800d728 <_init>
 800cbe4:	1b64      	subs	r4, r4, r5
 800cbe6:	10a4      	asrs	r4, r4, #2
 800cbe8:	2600      	movs	r6, #0
 800cbea:	42a6      	cmp	r6, r4
 800cbec:	d105      	bne.n	800cbfa <__libc_init_array+0x2e>
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbf4:	4798      	blx	r3
 800cbf6:	3601      	adds	r6, #1
 800cbf8:	e7ee      	b.n	800cbd8 <__libc_init_array+0xc>
 800cbfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbfe:	4798      	blx	r3
 800cc00:	3601      	adds	r6, #1
 800cc02:	e7f2      	b.n	800cbea <__libc_init_array+0x1e>
 800cc04:	0800e9d0 	.word	0x0800e9d0
 800cc08:	0800e9d0 	.word	0x0800e9d0
 800cc0c:	0800e9d0 	.word	0x0800e9d0
 800cc10:	0800e9d4 	.word	0x0800e9d4

0800cc14 <__retarget_lock_init_recursive>:
 800cc14:	4770      	bx	lr

0800cc16 <__retarget_lock_acquire_recursive>:
 800cc16:	4770      	bx	lr

0800cc18 <__retarget_lock_release_recursive>:
 800cc18:	4770      	bx	lr

0800cc1a <memcpy>:
 800cc1a:	440a      	add	r2, r1
 800cc1c:	4291      	cmp	r1, r2
 800cc1e:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc22:	d100      	bne.n	800cc26 <memcpy+0xc>
 800cc24:	4770      	bx	lr
 800cc26:	b510      	push	{r4, lr}
 800cc28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc30:	4291      	cmp	r1, r2
 800cc32:	d1f9      	bne.n	800cc28 <memcpy+0xe>
 800cc34:	bd10      	pop	{r4, pc}
	...

0800cc38 <_free_r>:
 800cc38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc3a:	2900      	cmp	r1, #0
 800cc3c:	d044      	beq.n	800ccc8 <_free_r+0x90>
 800cc3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc42:	9001      	str	r0, [sp, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	f1a1 0404 	sub.w	r4, r1, #4
 800cc4a:	bfb8      	it	lt
 800cc4c:	18e4      	addlt	r4, r4, r3
 800cc4e:	f000 f8df 	bl	800ce10 <__malloc_lock>
 800cc52:	4a1e      	ldr	r2, [pc, #120]	; (800cccc <_free_r+0x94>)
 800cc54:	9801      	ldr	r0, [sp, #4]
 800cc56:	6813      	ldr	r3, [r2, #0]
 800cc58:	b933      	cbnz	r3, 800cc68 <_free_r+0x30>
 800cc5a:	6063      	str	r3, [r4, #4]
 800cc5c:	6014      	str	r4, [r2, #0]
 800cc5e:	b003      	add	sp, #12
 800cc60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc64:	f000 b8da 	b.w	800ce1c <__malloc_unlock>
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	d908      	bls.n	800cc7e <_free_r+0x46>
 800cc6c:	6825      	ldr	r5, [r4, #0]
 800cc6e:	1961      	adds	r1, r4, r5
 800cc70:	428b      	cmp	r3, r1
 800cc72:	bf01      	itttt	eq
 800cc74:	6819      	ldreq	r1, [r3, #0]
 800cc76:	685b      	ldreq	r3, [r3, #4]
 800cc78:	1949      	addeq	r1, r1, r5
 800cc7a:	6021      	streq	r1, [r4, #0]
 800cc7c:	e7ed      	b.n	800cc5a <_free_r+0x22>
 800cc7e:	461a      	mov	r2, r3
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	b10b      	cbz	r3, 800cc88 <_free_r+0x50>
 800cc84:	42a3      	cmp	r3, r4
 800cc86:	d9fa      	bls.n	800cc7e <_free_r+0x46>
 800cc88:	6811      	ldr	r1, [r2, #0]
 800cc8a:	1855      	adds	r5, r2, r1
 800cc8c:	42a5      	cmp	r5, r4
 800cc8e:	d10b      	bne.n	800cca8 <_free_r+0x70>
 800cc90:	6824      	ldr	r4, [r4, #0]
 800cc92:	4421      	add	r1, r4
 800cc94:	1854      	adds	r4, r2, r1
 800cc96:	42a3      	cmp	r3, r4
 800cc98:	6011      	str	r1, [r2, #0]
 800cc9a:	d1e0      	bne.n	800cc5e <_free_r+0x26>
 800cc9c:	681c      	ldr	r4, [r3, #0]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	6053      	str	r3, [r2, #4]
 800cca2:	440c      	add	r4, r1
 800cca4:	6014      	str	r4, [r2, #0]
 800cca6:	e7da      	b.n	800cc5e <_free_r+0x26>
 800cca8:	d902      	bls.n	800ccb0 <_free_r+0x78>
 800ccaa:	230c      	movs	r3, #12
 800ccac:	6003      	str	r3, [r0, #0]
 800ccae:	e7d6      	b.n	800cc5e <_free_r+0x26>
 800ccb0:	6825      	ldr	r5, [r4, #0]
 800ccb2:	1961      	adds	r1, r4, r5
 800ccb4:	428b      	cmp	r3, r1
 800ccb6:	bf04      	itt	eq
 800ccb8:	6819      	ldreq	r1, [r3, #0]
 800ccba:	685b      	ldreq	r3, [r3, #4]
 800ccbc:	6063      	str	r3, [r4, #4]
 800ccbe:	bf04      	itt	eq
 800ccc0:	1949      	addeq	r1, r1, r5
 800ccc2:	6021      	streq	r1, [r4, #0]
 800ccc4:	6054      	str	r4, [r2, #4]
 800ccc6:	e7ca      	b.n	800cc5e <_free_r+0x26>
 800ccc8:	b003      	add	sp, #12
 800ccca:	bd30      	pop	{r4, r5, pc}
 800cccc:	20001844 	.word	0x20001844

0800ccd0 <sbrk_aligned>:
 800ccd0:	b570      	push	{r4, r5, r6, lr}
 800ccd2:	4e0e      	ldr	r6, [pc, #56]	; (800cd0c <sbrk_aligned+0x3c>)
 800ccd4:	460c      	mov	r4, r1
 800ccd6:	6831      	ldr	r1, [r6, #0]
 800ccd8:	4605      	mov	r5, r0
 800ccda:	b911      	cbnz	r1, 800cce2 <sbrk_aligned+0x12>
 800ccdc:	f000 fcde 	bl	800d69c <_sbrk_r>
 800cce0:	6030      	str	r0, [r6, #0]
 800cce2:	4621      	mov	r1, r4
 800cce4:	4628      	mov	r0, r5
 800cce6:	f000 fcd9 	bl	800d69c <_sbrk_r>
 800ccea:	1c43      	adds	r3, r0, #1
 800ccec:	d00a      	beq.n	800cd04 <sbrk_aligned+0x34>
 800ccee:	1cc4      	adds	r4, r0, #3
 800ccf0:	f024 0403 	bic.w	r4, r4, #3
 800ccf4:	42a0      	cmp	r0, r4
 800ccf6:	d007      	beq.n	800cd08 <sbrk_aligned+0x38>
 800ccf8:	1a21      	subs	r1, r4, r0
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	f000 fcce 	bl	800d69c <_sbrk_r>
 800cd00:	3001      	adds	r0, #1
 800cd02:	d101      	bne.n	800cd08 <sbrk_aligned+0x38>
 800cd04:	f04f 34ff 	mov.w	r4, #4294967295
 800cd08:	4620      	mov	r0, r4
 800cd0a:	bd70      	pop	{r4, r5, r6, pc}
 800cd0c:	20001848 	.word	0x20001848

0800cd10 <_malloc_r>:
 800cd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd14:	1ccd      	adds	r5, r1, #3
 800cd16:	f025 0503 	bic.w	r5, r5, #3
 800cd1a:	3508      	adds	r5, #8
 800cd1c:	2d0c      	cmp	r5, #12
 800cd1e:	bf38      	it	cc
 800cd20:	250c      	movcc	r5, #12
 800cd22:	2d00      	cmp	r5, #0
 800cd24:	4607      	mov	r7, r0
 800cd26:	db01      	blt.n	800cd2c <_malloc_r+0x1c>
 800cd28:	42a9      	cmp	r1, r5
 800cd2a:	d905      	bls.n	800cd38 <_malloc_r+0x28>
 800cd2c:	230c      	movs	r3, #12
 800cd2e:	603b      	str	r3, [r7, #0]
 800cd30:	2600      	movs	r6, #0
 800cd32:	4630      	mov	r0, r6
 800cd34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce0c <_malloc_r+0xfc>
 800cd3c:	f000 f868 	bl	800ce10 <__malloc_lock>
 800cd40:	f8d8 3000 	ldr.w	r3, [r8]
 800cd44:	461c      	mov	r4, r3
 800cd46:	bb5c      	cbnz	r4, 800cda0 <_malloc_r+0x90>
 800cd48:	4629      	mov	r1, r5
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	f7ff ffc0 	bl	800ccd0 <sbrk_aligned>
 800cd50:	1c43      	adds	r3, r0, #1
 800cd52:	4604      	mov	r4, r0
 800cd54:	d155      	bne.n	800ce02 <_malloc_r+0xf2>
 800cd56:	f8d8 4000 	ldr.w	r4, [r8]
 800cd5a:	4626      	mov	r6, r4
 800cd5c:	2e00      	cmp	r6, #0
 800cd5e:	d145      	bne.n	800cdec <_malloc_r+0xdc>
 800cd60:	2c00      	cmp	r4, #0
 800cd62:	d048      	beq.n	800cdf6 <_malloc_r+0xe6>
 800cd64:	6823      	ldr	r3, [r4, #0]
 800cd66:	4631      	mov	r1, r6
 800cd68:	4638      	mov	r0, r7
 800cd6a:	eb04 0903 	add.w	r9, r4, r3
 800cd6e:	f000 fc95 	bl	800d69c <_sbrk_r>
 800cd72:	4581      	cmp	r9, r0
 800cd74:	d13f      	bne.n	800cdf6 <_malloc_r+0xe6>
 800cd76:	6821      	ldr	r1, [r4, #0]
 800cd78:	1a6d      	subs	r5, r5, r1
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	f7ff ffa7 	bl	800ccd0 <sbrk_aligned>
 800cd82:	3001      	adds	r0, #1
 800cd84:	d037      	beq.n	800cdf6 <_malloc_r+0xe6>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	442b      	add	r3, r5
 800cd8a:	6023      	str	r3, [r4, #0]
 800cd8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d038      	beq.n	800ce06 <_malloc_r+0xf6>
 800cd94:	685a      	ldr	r2, [r3, #4]
 800cd96:	42a2      	cmp	r2, r4
 800cd98:	d12b      	bne.n	800cdf2 <_malloc_r+0xe2>
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	605a      	str	r2, [r3, #4]
 800cd9e:	e00f      	b.n	800cdc0 <_malloc_r+0xb0>
 800cda0:	6822      	ldr	r2, [r4, #0]
 800cda2:	1b52      	subs	r2, r2, r5
 800cda4:	d41f      	bmi.n	800cde6 <_malloc_r+0xd6>
 800cda6:	2a0b      	cmp	r2, #11
 800cda8:	d917      	bls.n	800cdda <_malloc_r+0xca>
 800cdaa:	1961      	adds	r1, r4, r5
 800cdac:	42a3      	cmp	r3, r4
 800cdae:	6025      	str	r5, [r4, #0]
 800cdb0:	bf18      	it	ne
 800cdb2:	6059      	strne	r1, [r3, #4]
 800cdb4:	6863      	ldr	r3, [r4, #4]
 800cdb6:	bf08      	it	eq
 800cdb8:	f8c8 1000 	streq.w	r1, [r8]
 800cdbc:	5162      	str	r2, [r4, r5]
 800cdbe:	604b      	str	r3, [r1, #4]
 800cdc0:	4638      	mov	r0, r7
 800cdc2:	f104 060b 	add.w	r6, r4, #11
 800cdc6:	f000 f829 	bl	800ce1c <__malloc_unlock>
 800cdca:	f026 0607 	bic.w	r6, r6, #7
 800cdce:	1d23      	adds	r3, r4, #4
 800cdd0:	1af2      	subs	r2, r6, r3
 800cdd2:	d0ae      	beq.n	800cd32 <_malloc_r+0x22>
 800cdd4:	1b9b      	subs	r3, r3, r6
 800cdd6:	50a3      	str	r3, [r4, r2]
 800cdd8:	e7ab      	b.n	800cd32 <_malloc_r+0x22>
 800cdda:	42a3      	cmp	r3, r4
 800cddc:	6862      	ldr	r2, [r4, #4]
 800cdde:	d1dd      	bne.n	800cd9c <_malloc_r+0x8c>
 800cde0:	f8c8 2000 	str.w	r2, [r8]
 800cde4:	e7ec      	b.n	800cdc0 <_malloc_r+0xb0>
 800cde6:	4623      	mov	r3, r4
 800cde8:	6864      	ldr	r4, [r4, #4]
 800cdea:	e7ac      	b.n	800cd46 <_malloc_r+0x36>
 800cdec:	4634      	mov	r4, r6
 800cdee:	6876      	ldr	r6, [r6, #4]
 800cdf0:	e7b4      	b.n	800cd5c <_malloc_r+0x4c>
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	e7cc      	b.n	800cd90 <_malloc_r+0x80>
 800cdf6:	230c      	movs	r3, #12
 800cdf8:	603b      	str	r3, [r7, #0]
 800cdfa:	4638      	mov	r0, r7
 800cdfc:	f000 f80e 	bl	800ce1c <__malloc_unlock>
 800ce00:	e797      	b.n	800cd32 <_malloc_r+0x22>
 800ce02:	6025      	str	r5, [r4, #0]
 800ce04:	e7dc      	b.n	800cdc0 <_malloc_r+0xb0>
 800ce06:	605b      	str	r3, [r3, #4]
 800ce08:	deff      	udf	#255	; 0xff
 800ce0a:	bf00      	nop
 800ce0c:	20001844 	.word	0x20001844

0800ce10 <__malloc_lock>:
 800ce10:	4801      	ldr	r0, [pc, #4]	; (800ce18 <__malloc_lock+0x8>)
 800ce12:	f7ff bf00 	b.w	800cc16 <__retarget_lock_acquire_recursive>
 800ce16:	bf00      	nop
 800ce18:	20001840 	.word	0x20001840

0800ce1c <__malloc_unlock>:
 800ce1c:	4801      	ldr	r0, [pc, #4]	; (800ce24 <__malloc_unlock+0x8>)
 800ce1e:	f7ff befb 	b.w	800cc18 <__retarget_lock_release_recursive>
 800ce22:	bf00      	nop
 800ce24:	20001840 	.word	0x20001840

0800ce28 <__sfputc_r>:
 800ce28:	6893      	ldr	r3, [r2, #8]
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	b410      	push	{r4}
 800ce30:	6093      	str	r3, [r2, #8]
 800ce32:	da08      	bge.n	800ce46 <__sfputc_r+0x1e>
 800ce34:	6994      	ldr	r4, [r2, #24]
 800ce36:	42a3      	cmp	r3, r4
 800ce38:	db01      	blt.n	800ce3e <__sfputc_r+0x16>
 800ce3a:	290a      	cmp	r1, #10
 800ce3c:	d103      	bne.n	800ce46 <__sfputc_r+0x1e>
 800ce3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce42:	f7ff bde0 	b.w	800ca06 <__swbuf_r>
 800ce46:	6813      	ldr	r3, [r2, #0]
 800ce48:	1c58      	adds	r0, r3, #1
 800ce4a:	6010      	str	r0, [r2, #0]
 800ce4c:	7019      	strb	r1, [r3, #0]
 800ce4e:	4608      	mov	r0, r1
 800ce50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <__sfputs_r>:
 800ce56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce58:	4606      	mov	r6, r0
 800ce5a:	460f      	mov	r7, r1
 800ce5c:	4614      	mov	r4, r2
 800ce5e:	18d5      	adds	r5, r2, r3
 800ce60:	42ac      	cmp	r4, r5
 800ce62:	d101      	bne.n	800ce68 <__sfputs_r+0x12>
 800ce64:	2000      	movs	r0, #0
 800ce66:	e007      	b.n	800ce78 <__sfputs_r+0x22>
 800ce68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce6c:	463a      	mov	r2, r7
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f7ff ffda 	bl	800ce28 <__sfputc_r>
 800ce74:	1c43      	adds	r3, r0, #1
 800ce76:	d1f3      	bne.n	800ce60 <__sfputs_r+0xa>
 800ce78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce7c <_vfiprintf_r>:
 800ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce80:	460d      	mov	r5, r1
 800ce82:	b09d      	sub	sp, #116	; 0x74
 800ce84:	4614      	mov	r4, r2
 800ce86:	4698      	mov	r8, r3
 800ce88:	4606      	mov	r6, r0
 800ce8a:	b118      	cbz	r0, 800ce94 <_vfiprintf_r+0x18>
 800ce8c:	6a03      	ldr	r3, [r0, #32]
 800ce8e:	b90b      	cbnz	r3, 800ce94 <_vfiprintf_r+0x18>
 800ce90:	f7ff fcca 	bl	800c828 <__sinit>
 800ce94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce96:	07d9      	lsls	r1, r3, #31
 800ce98:	d405      	bmi.n	800cea6 <_vfiprintf_r+0x2a>
 800ce9a:	89ab      	ldrh	r3, [r5, #12]
 800ce9c:	059a      	lsls	r2, r3, #22
 800ce9e:	d402      	bmi.n	800cea6 <_vfiprintf_r+0x2a>
 800cea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cea2:	f7ff feb8 	bl	800cc16 <__retarget_lock_acquire_recursive>
 800cea6:	89ab      	ldrh	r3, [r5, #12]
 800cea8:	071b      	lsls	r3, r3, #28
 800ceaa:	d501      	bpl.n	800ceb0 <_vfiprintf_r+0x34>
 800ceac:	692b      	ldr	r3, [r5, #16]
 800ceae:	b99b      	cbnz	r3, 800ced8 <_vfiprintf_r+0x5c>
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f7ff fde4 	bl	800ca80 <__swsetup_r>
 800ceb8:	b170      	cbz	r0, 800ced8 <_vfiprintf_r+0x5c>
 800ceba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cebc:	07dc      	lsls	r4, r3, #31
 800cebe:	d504      	bpl.n	800ceca <_vfiprintf_r+0x4e>
 800cec0:	f04f 30ff 	mov.w	r0, #4294967295
 800cec4:	b01d      	add	sp, #116	; 0x74
 800cec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceca:	89ab      	ldrh	r3, [r5, #12]
 800cecc:	0598      	lsls	r0, r3, #22
 800cece:	d4f7      	bmi.n	800cec0 <_vfiprintf_r+0x44>
 800ced0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ced2:	f7ff fea1 	bl	800cc18 <__retarget_lock_release_recursive>
 800ced6:	e7f3      	b.n	800cec0 <_vfiprintf_r+0x44>
 800ced8:	2300      	movs	r3, #0
 800ceda:	9309      	str	r3, [sp, #36]	; 0x24
 800cedc:	2320      	movs	r3, #32
 800cede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cee2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cee6:	2330      	movs	r3, #48	; 0x30
 800cee8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d09c <_vfiprintf_r+0x220>
 800ceec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cef0:	f04f 0901 	mov.w	r9, #1
 800cef4:	4623      	mov	r3, r4
 800cef6:	469a      	mov	sl, r3
 800cef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cefc:	b10a      	cbz	r2, 800cf02 <_vfiprintf_r+0x86>
 800cefe:	2a25      	cmp	r2, #37	; 0x25
 800cf00:	d1f9      	bne.n	800cef6 <_vfiprintf_r+0x7a>
 800cf02:	ebba 0b04 	subs.w	fp, sl, r4
 800cf06:	d00b      	beq.n	800cf20 <_vfiprintf_r+0xa4>
 800cf08:	465b      	mov	r3, fp
 800cf0a:	4622      	mov	r2, r4
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7ff ffa1 	bl	800ce56 <__sfputs_r>
 800cf14:	3001      	adds	r0, #1
 800cf16:	f000 80a9 	beq.w	800d06c <_vfiprintf_r+0x1f0>
 800cf1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf1c:	445a      	add	r2, fp
 800cf1e:	9209      	str	r2, [sp, #36]	; 0x24
 800cf20:	f89a 3000 	ldrb.w	r3, [sl]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f000 80a1 	beq.w	800d06c <_vfiprintf_r+0x1f0>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf34:	f10a 0a01 	add.w	sl, sl, #1
 800cf38:	9304      	str	r3, [sp, #16]
 800cf3a:	9307      	str	r3, [sp, #28]
 800cf3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf40:	931a      	str	r3, [sp, #104]	; 0x68
 800cf42:	4654      	mov	r4, sl
 800cf44:	2205      	movs	r2, #5
 800cf46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf4a:	4854      	ldr	r0, [pc, #336]	; (800d09c <_vfiprintf_r+0x220>)
 800cf4c:	f7f3 f930 	bl	80001b0 <memchr>
 800cf50:	9a04      	ldr	r2, [sp, #16]
 800cf52:	b9d8      	cbnz	r0, 800cf8c <_vfiprintf_r+0x110>
 800cf54:	06d1      	lsls	r1, r2, #27
 800cf56:	bf44      	itt	mi
 800cf58:	2320      	movmi	r3, #32
 800cf5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf5e:	0713      	lsls	r3, r2, #28
 800cf60:	bf44      	itt	mi
 800cf62:	232b      	movmi	r3, #43	; 0x2b
 800cf64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf68:	f89a 3000 	ldrb.w	r3, [sl]
 800cf6c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf6e:	d015      	beq.n	800cf9c <_vfiprintf_r+0x120>
 800cf70:	9a07      	ldr	r2, [sp, #28]
 800cf72:	4654      	mov	r4, sl
 800cf74:	2000      	movs	r0, #0
 800cf76:	f04f 0c0a 	mov.w	ip, #10
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf80:	3b30      	subs	r3, #48	; 0x30
 800cf82:	2b09      	cmp	r3, #9
 800cf84:	d94d      	bls.n	800d022 <_vfiprintf_r+0x1a6>
 800cf86:	b1b0      	cbz	r0, 800cfb6 <_vfiprintf_r+0x13a>
 800cf88:	9207      	str	r2, [sp, #28]
 800cf8a:	e014      	b.n	800cfb6 <_vfiprintf_r+0x13a>
 800cf8c:	eba0 0308 	sub.w	r3, r0, r8
 800cf90:	fa09 f303 	lsl.w	r3, r9, r3
 800cf94:	4313      	orrs	r3, r2
 800cf96:	9304      	str	r3, [sp, #16]
 800cf98:	46a2      	mov	sl, r4
 800cf9a:	e7d2      	b.n	800cf42 <_vfiprintf_r+0xc6>
 800cf9c:	9b03      	ldr	r3, [sp, #12]
 800cf9e:	1d19      	adds	r1, r3, #4
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	9103      	str	r1, [sp, #12]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	bfbb      	ittet	lt
 800cfa8:	425b      	neglt	r3, r3
 800cfaa:	f042 0202 	orrlt.w	r2, r2, #2
 800cfae:	9307      	strge	r3, [sp, #28]
 800cfb0:	9307      	strlt	r3, [sp, #28]
 800cfb2:	bfb8      	it	lt
 800cfb4:	9204      	strlt	r2, [sp, #16]
 800cfb6:	7823      	ldrb	r3, [r4, #0]
 800cfb8:	2b2e      	cmp	r3, #46	; 0x2e
 800cfba:	d10c      	bne.n	800cfd6 <_vfiprintf_r+0x15a>
 800cfbc:	7863      	ldrb	r3, [r4, #1]
 800cfbe:	2b2a      	cmp	r3, #42	; 0x2a
 800cfc0:	d134      	bne.n	800d02c <_vfiprintf_r+0x1b0>
 800cfc2:	9b03      	ldr	r3, [sp, #12]
 800cfc4:	1d1a      	adds	r2, r3, #4
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	9203      	str	r2, [sp, #12]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	bfb8      	it	lt
 800cfce:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfd2:	3402      	adds	r4, #2
 800cfd4:	9305      	str	r3, [sp, #20]
 800cfd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d0ac <_vfiprintf_r+0x230>
 800cfda:	7821      	ldrb	r1, [r4, #0]
 800cfdc:	2203      	movs	r2, #3
 800cfde:	4650      	mov	r0, sl
 800cfe0:	f7f3 f8e6 	bl	80001b0 <memchr>
 800cfe4:	b138      	cbz	r0, 800cff6 <_vfiprintf_r+0x17a>
 800cfe6:	9b04      	ldr	r3, [sp, #16]
 800cfe8:	eba0 000a 	sub.w	r0, r0, sl
 800cfec:	2240      	movs	r2, #64	; 0x40
 800cfee:	4082      	lsls	r2, r0
 800cff0:	4313      	orrs	r3, r2
 800cff2:	3401      	adds	r4, #1
 800cff4:	9304      	str	r3, [sp, #16]
 800cff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cffa:	4829      	ldr	r0, [pc, #164]	; (800d0a0 <_vfiprintf_r+0x224>)
 800cffc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d000:	2206      	movs	r2, #6
 800d002:	f7f3 f8d5 	bl	80001b0 <memchr>
 800d006:	2800      	cmp	r0, #0
 800d008:	d03f      	beq.n	800d08a <_vfiprintf_r+0x20e>
 800d00a:	4b26      	ldr	r3, [pc, #152]	; (800d0a4 <_vfiprintf_r+0x228>)
 800d00c:	bb1b      	cbnz	r3, 800d056 <_vfiprintf_r+0x1da>
 800d00e:	9b03      	ldr	r3, [sp, #12]
 800d010:	3307      	adds	r3, #7
 800d012:	f023 0307 	bic.w	r3, r3, #7
 800d016:	3308      	adds	r3, #8
 800d018:	9303      	str	r3, [sp, #12]
 800d01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d01c:	443b      	add	r3, r7
 800d01e:	9309      	str	r3, [sp, #36]	; 0x24
 800d020:	e768      	b.n	800cef4 <_vfiprintf_r+0x78>
 800d022:	fb0c 3202 	mla	r2, ip, r2, r3
 800d026:	460c      	mov	r4, r1
 800d028:	2001      	movs	r0, #1
 800d02a:	e7a6      	b.n	800cf7a <_vfiprintf_r+0xfe>
 800d02c:	2300      	movs	r3, #0
 800d02e:	3401      	adds	r4, #1
 800d030:	9305      	str	r3, [sp, #20]
 800d032:	4619      	mov	r1, r3
 800d034:	f04f 0c0a 	mov.w	ip, #10
 800d038:	4620      	mov	r0, r4
 800d03a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d03e:	3a30      	subs	r2, #48	; 0x30
 800d040:	2a09      	cmp	r2, #9
 800d042:	d903      	bls.n	800d04c <_vfiprintf_r+0x1d0>
 800d044:	2b00      	cmp	r3, #0
 800d046:	d0c6      	beq.n	800cfd6 <_vfiprintf_r+0x15a>
 800d048:	9105      	str	r1, [sp, #20]
 800d04a:	e7c4      	b.n	800cfd6 <_vfiprintf_r+0x15a>
 800d04c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d050:	4604      	mov	r4, r0
 800d052:	2301      	movs	r3, #1
 800d054:	e7f0      	b.n	800d038 <_vfiprintf_r+0x1bc>
 800d056:	ab03      	add	r3, sp, #12
 800d058:	9300      	str	r3, [sp, #0]
 800d05a:	462a      	mov	r2, r5
 800d05c:	4b12      	ldr	r3, [pc, #72]	; (800d0a8 <_vfiprintf_r+0x22c>)
 800d05e:	a904      	add	r1, sp, #16
 800d060:	4630      	mov	r0, r6
 800d062:	f3af 8000 	nop.w
 800d066:	4607      	mov	r7, r0
 800d068:	1c78      	adds	r0, r7, #1
 800d06a:	d1d6      	bne.n	800d01a <_vfiprintf_r+0x19e>
 800d06c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d06e:	07d9      	lsls	r1, r3, #31
 800d070:	d405      	bmi.n	800d07e <_vfiprintf_r+0x202>
 800d072:	89ab      	ldrh	r3, [r5, #12]
 800d074:	059a      	lsls	r2, r3, #22
 800d076:	d402      	bmi.n	800d07e <_vfiprintf_r+0x202>
 800d078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d07a:	f7ff fdcd 	bl	800cc18 <__retarget_lock_release_recursive>
 800d07e:	89ab      	ldrh	r3, [r5, #12]
 800d080:	065b      	lsls	r3, r3, #25
 800d082:	f53f af1d 	bmi.w	800cec0 <_vfiprintf_r+0x44>
 800d086:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d088:	e71c      	b.n	800cec4 <_vfiprintf_r+0x48>
 800d08a:	ab03      	add	r3, sp, #12
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	462a      	mov	r2, r5
 800d090:	4b05      	ldr	r3, [pc, #20]	; (800d0a8 <_vfiprintf_r+0x22c>)
 800d092:	a904      	add	r1, sp, #16
 800d094:	4630      	mov	r0, r6
 800d096:	f000 f879 	bl	800d18c <_printf_i>
 800d09a:	e7e4      	b.n	800d066 <_vfiprintf_r+0x1ea>
 800d09c:	0800e994 	.word	0x0800e994
 800d0a0:	0800e99e 	.word	0x0800e99e
 800d0a4:	00000000 	.word	0x00000000
 800d0a8:	0800ce57 	.word	0x0800ce57
 800d0ac:	0800e99a 	.word	0x0800e99a

0800d0b0 <_printf_common>:
 800d0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0b4:	4616      	mov	r6, r2
 800d0b6:	4699      	mov	r9, r3
 800d0b8:	688a      	ldr	r2, [r1, #8]
 800d0ba:	690b      	ldr	r3, [r1, #16]
 800d0bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	bfb8      	it	lt
 800d0c4:	4613      	movlt	r3, r2
 800d0c6:	6033      	str	r3, [r6, #0]
 800d0c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0cc:	4607      	mov	r7, r0
 800d0ce:	460c      	mov	r4, r1
 800d0d0:	b10a      	cbz	r2, 800d0d6 <_printf_common+0x26>
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	6033      	str	r3, [r6, #0]
 800d0d6:	6823      	ldr	r3, [r4, #0]
 800d0d8:	0699      	lsls	r1, r3, #26
 800d0da:	bf42      	ittt	mi
 800d0dc:	6833      	ldrmi	r3, [r6, #0]
 800d0de:	3302      	addmi	r3, #2
 800d0e0:	6033      	strmi	r3, [r6, #0]
 800d0e2:	6825      	ldr	r5, [r4, #0]
 800d0e4:	f015 0506 	ands.w	r5, r5, #6
 800d0e8:	d106      	bne.n	800d0f8 <_printf_common+0x48>
 800d0ea:	f104 0a19 	add.w	sl, r4, #25
 800d0ee:	68e3      	ldr	r3, [r4, #12]
 800d0f0:	6832      	ldr	r2, [r6, #0]
 800d0f2:	1a9b      	subs	r3, r3, r2
 800d0f4:	42ab      	cmp	r3, r5
 800d0f6:	dc26      	bgt.n	800d146 <_printf_common+0x96>
 800d0f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0fc:	1e13      	subs	r3, r2, #0
 800d0fe:	6822      	ldr	r2, [r4, #0]
 800d100:	bf18      	it	ne
 800d102:	2301      	movne	r3, #1
 800d104:	0692      	lsls	r2, r2, #26
 800d106:	d42b      	bmi.n	800d160 <_printf_common+0xb0>
 800d108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d10c:	4649      	mov	r1, r9
 800d10e:	4638      	mov	r0, r7
 800d110:	47c0      	blx	r8
 800d112:	3001      	adds	r0, #1
 800d114:	d01e      	beq.n	800d154 <_printf_common+0xa4>
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	6922      	ldr	r2, [r4, #16]
 800d11a:	f003 0306 	and.w	r3, r3, #6
 800d11e:	2b04      	cmp	r3, #4
 800d120:	bf02      	ittt	eq
 800d122:	68e5      	ldreq	r5, [r4, #12]
 800d124:	6833      	ldreq	r3, [r6, #0]
 800d126:	1aed      	subeq	r5, r5, r3
 800d128:	68a3      	ldr	r3, [r4, #8]
 800d12a:	bf0c      	ite	eq
 800d12c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d130:	2500      	movne	r5, #0
 800d132:	4293      	cmp	r3, r2
 800d134:	bfc4      	itt	gt
 800d136:	1a9b      	subgt	r3, r3, r2
 800d138:	18ed      	addgt	r5, r5, r3
 800d13a:	2600      	movs	r6, #0
 800d13c:	341a      	adds	r4, #26
 800d13e:	42b5      	cmp	r5, r6
 800d140:	d11a      	bne.n	800d178 <_printf_common+0xc8>
 800d142:	2000      	movs	r0, #0
 800d144:	e008      	b.n	800d158 <_printf_common+0xa8>
 800d146:	2301      	movs	r3, #1
 800d148:	4652      	mov	r2, sl
 800d14a:	4649      	mov	r1, r9
 800d14c:	4638      	mov	r0, r7
 800d14e:	47c0      	blx	r8
 800d150:	3001      	adds	r0, #1
 800d152:	d103      	bne.n	800d15c <_printf_common+0xac>
 800d154:	f04f 30ff 	mov.w	r0, #4294967295
 800d158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d15c:	3501      	adds	r5, #1
 800d15e:	e7c6      	b.n	800d0ee <_printf_common+0x3e>
 800d160:	18e1      	adds	r1, r4, r3
 800d162:	1c5a      	adds	r2, r3, #1
 800d164:	2030      	movs	r0, #48	; 0x30
 800d166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d16a:	4422      	add	r2, r4
 800d16c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d174:	3302      	adds	r3, #2
 800d176:	e7c7      	b.n	800d108 <_printf_common+0x58>
 800d178:	2301      	movs	r3, #1
 800d17a:	4622      	mov	r2, r4
 800d17c:	4649      	mov	r1, r9
 800d17e:	4638      	mov	r0, r7
 800d180:	47c0      	blx	r8
 800d182:	3001      	adds	r0, #1
 800d184:	d0e6      	beq.n	800d154 <_printf_common+0xa4>
 800d186:	3601      	adds	r6, #1
 800d188:	e7d9      	b.n	800d13e <_printf_common+0x8e>
	...

0800d18c <_printf_i>:
 800d18c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d190:	7e0f      	ldrb	r7, [r1, #24]
 800d192:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d194:	2f78      	cmp	r7, #120	; 0x78
 800d196:	4691      	mov	r9, r2
 800d198:	4680      	mov	r8, r0
 800d19a:	460c      	mov	r4, r1
 800d19c:	469a      	mov	sl, r3
 800d19e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1a2:	d807      	bhi.n	800d1b4 <_printf_i+0x28>
 800d1a4:	2f62      	cmp	r7, #98	; 0x62
 800d1a6:	d80a      	bhi.n	800d1be <_printf_i+0x32>
 800d1a8:	2f00      	cmp	r7, #0
 800d1aa:	f000 80d4 	beq.w	800d356 <_printf_i+0x1ca>
 800d1ae:	2f58      	cmp	r7, #88	; 0x58
 800d1b0:	f000 80c0 	beq.w	800d334 <_printf_i+0x1a8>
 800d1b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1bc:	e03a      	b.n	800d234 <_printf_i+0xa8>
 800d1be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1c2:	2b15      	cmp	r3, #21
 800d1c4:	d8f6      	bhi.n	800d1b4 <_printf_i+0x28>
 800d1c6:	a101      	add	r1, pc, #4	; (adr r1, 800d1cc <_printf_i+0x40>)
 800d1c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1cc:	0800d225 	.word	0x0800d225
 800d1d0:	0800d239 	.word	0x0800d239
 800d1d4:	0800d1b5 	.word	0x0800d1b5
 800d1d8:	0800d1b5 	.word	0x0800d1b5
 800d1dc:	0800d1b5 	.word	0x0800d1b5
 800d1e0:	0800d1b5 	.word	0x0800d1b5
 800d1e4:	0800d239 	.word	0x0800d239
 800d1e8:	0800d1b5 	.word	0x0800d1b5
 800d1ec:	0800d1b5 	.word	0x0800d1b5
 800d1f0:	0800d1b5 	.word	0x0800d1b5
 800d1f4:	0800d1b5 	.word	0x0800d1b5
 800d1f8:	0800d33d 	.word	0x0800d33d
 800d1fc:	0800d265 	.word	0x0800d265
 800d200:	0800d2f7 	.word	0x0800d2f7
 800d204:	0800d1b5 	.word	0x0800d1b5
 800d208:	0800d1b5 	.word	0x0800d1b5
 800d20c:	0800d35f 	.word	0x0800d35f
 800d210:	0800d1b5 	.word	0x0800d1b5
 800d214:	0800d265 	.word	0x0800d265
 800d218:	0800d1b5 	.word	0x0800d1b5
 800d21c:	0800d1b5 	.word	0x0800d1b5
 800d220:	0800d2ff 	.word	0x0800d2ff
 800d224:	682b      	ldr	r3, [r5, #0]
 800d226:	1d1a      	adds	r2, r3, #4
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	602a      	str	r2, [r5, #0]
 800d22c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d234:	2301      	movs	r3, #1
 800d236:	e09f      	b.n	800d378 <_printf_i+0x1ec>
 800d238:	6820      	ldr	r0, [r4, #0]
 800d23a:	682b      	ldr	r3, [r5, #0]
 800d23c:	0607      	lsls	r7, r0, #24
 800d23e:	f103 0104 	add.w	r1, r3, #4
 800d242:	6029      	str	r1, [r5, #0]
 800d244:	d501      	bpl.n	800d24a <_printf_i+0xbe>
 800d246:	681e      	ldr	r6, [r3, #0]
 800d248:	e003      	b.n	800d252 <_printf_i+0xc6>
 800d24a:	0646      	lsls	r6, r0, #25
 800d24c:	d5fb      	bpl.n	800d246 <_printf_i+0xba>
 800d24e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d252:	2e00      	cmp	r6, #0
 800d254:	da03      	bge.n	800d25e <_printf_i+0xd2>
 800d256:	232d      	movs	r3, #45	; 0x2d
 800d258:	4276      	negs	r6, r6
 800d25a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d25e:	485a      	ldr	r0, [pc, #360]	; (800d3c8 <_printf_i+0x23c>)
 800d260:	230a      	movs	r3, #10
 800d262:	e012      	b.n	800d28a <_printf_i+0xfe>
 800d264:	682b      	ldr	r3, [r5, #0]
 800d266:	6820      	ldr	r0, [r4, #0]
 800d268:	1d19      	adds	r1, r3, #4
 800d26a:	6029      	str	r1, [r5, #0]
 800d26c:	0605      	lsls	r5, r0, #24
 800d26e:	d501      	bpl.n	800d274 <_printf_i+0xe8>
 800d270:	681e      	ldr	r6, [r3, #0]
 800d272:	e002      	b.n	800d27a <_printf_i+0xee>
 800d274:	0641      	lsls	r1, r0, #25
 800d276:	d5fb      	bpl.n	800d270 <_printf_i+0xe4>
 800d278:	881e      	ldrh	r6, [r3, #0]
 800d27a:	4853      	ldr	r0, [pc, #332]	; (800d3c8 <_printf_i+0x23c>)
 800d27c:	2f6f      	cmp	r7, #111	; 0x6f
 800d27e:	bf0c      	ite	eq
 800d280:	2308      	moveq	r3, #8
 800d282:	230a      	movne	r3, #10
 800d284:	2100      	movs	r1, #0
 800d286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d28a:	6865      	ldr	r5, [r4, #4]
 800d28c:	60a5      	str	r5, [r4, #8]
 800d28e:	2d00      	cmp	r5, #0
 800d290:	bfa2      	ittt	ge
 800d292:	6821      	ldrge	r1, [r4, #0]
 800d294:	f021 0104 	bicge.w	r1, r1, #4
 800d298:	6021      	strge	r1, [r4, #0]
 800d29a:	b90e      	cbnz	r6, 800d2a0 <_printf_i+0x114>
 800d29c:	2d00      	cmp	r5, #0
 800d29e:	d04b      	beq.n	800d338 <_printf_i+0x1ac>
 800d2a0:	4615      	mov	r5, r2
 800d2a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2a6:	fb03 6711 	mls	r7, r3, r1, r6
 800d2aa:	5dc7      	ldrb	r7, [r0, r7]
 800d2ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2b0:	4637      	mov	r7, r6
 800d2b2:	42bb      	cmp	r3, r7
 800d2b4:	460e      	mov	r6, r1
 800d2b6:	d9f4      	bls.n	800d2a2 <_printf_i+0x116>
 800d2b8:	2b08      	cmp	r3, #8
 800d2ba:	d10b      	bne.n	800d2d4 <_printf_i+0x148>
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	07de      	lsls	r6, r3, #31
 800d2c0:	d508      	bpl.n	800d2d4 <_printf_i+0x148>
 800d2c2:	6923      	ldr	r3, [r4, #16]
 800d2c4:	6861      	ldr	r1, [r4, #4]
 800d2c6:	4299      	cmp	r1, r3
 800d2c8:	bfde      	ittt	le
 800d2ca:	2330      	movle	r3, #48	; 0x30
 800d2cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2d4:	1b52      	subs	r2, r2, r5
 800d2d6:	6122      	str	r2, [r4, #16]
 800d2d8:	f8cd a000 	str.w	sl, [sp]
 800d2dc:	464b      	mov	r3, r9
 800d2de:	aa03      	add	r2, sp, #12
 800d2e0:	4621      	mov	r1, r4
 800d2e2:	4640      	mov	r0, r8
 800d2e4:	f7ff fee4 	bl	800d0b0 <_printf_common>
 800d2e8:	3001      	adds	r0, #1
 800d2ea:	d14a      	bne.n	800d382 <_printf_i+0x1f6>
 800d2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f0:	b004      	add	sp, #16
 800d2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	f043 0320 	orr.w	r3, r3, #32
 800d2fc:	6023      	str	r3, [r4, #0]
 800d2fe:	4833      	ldr	r0, [pc, #204]	; (800d3cc <_printf_i+0x240>)
 800d300:	2778      	movs	r7, #120	; 0x78
 800d302:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d306:	6823      	ldr	r3, [r4, #0]
 800d308:	6829      	ldr	r1, [r5, #0]
 800d30a:	061f      	lsls	r7, r3, #24
 800d30c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d310:	d402      	bmi.n	800d318 <_printf_i+0x18c>
 800d312:	065f      	lsls	r7, r3, #25
 800d314:	bf48      	it	mi
 800d316:	b2b6      	uxthmi	r6, r6
 800d318:	07df      	lsls	r7, r3, #31
 800d31a:	bf48      	it	mi
 800d31c:	f043 0320 	orrmi.w	r3, r3, #32
 800d320:	6029      	str	r1, [r5, #0]
 800d322:	bf48      	it	mi
 800d324:	6023      	strmi	r3, [r4, #0]
 800d326:	b91e      	cbnz	r6, 800d330 <_printf_i+0x1a4>
 800d328:	6823      	ldr	r3, [r4, #0]
 800d32a:	f023 0320 	bic.w	r3, r3, #32
 800d32e:	6023      	str	r3, [r4, #0]
 800d330:	2310      	movs	r3, #16
 800d332:	e7a7      	b.n	800d284 <_printf_i+0xf8>
 800d334:	4824      	ldr	r0, [pc, #144]	; (800d3c8 <_printf_i+0x23c>)
 800d336:	e7e4      	b.n	800d302 <_printf_i+0x176>
 800d338:	4615      	mov	r5, r2
 800d33a:	e7bd      	b.n	800d2b8 <_printf_i+0x12c>
 800d33c:	682b      	ldr	r3, [r5, #0]
 800d33e:	6826      	ldr	r6, [r4, #0]
 800d340:	6961      	ldr	r1, [r4, #20]
 800d342:	1d18      	adds	r0, r3, #4
 800d344:	6028      	str	r0, [r5, #0]
 800d346:	0635      	lsls	r5, r6, #24
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	d501      	bpl.n	800d350 <_printf_i+0x1c4>
 800d34c:	6019      	str	r1, [r3, #0]
 800d34e:	e002      	b.n	800d356 <_printf_i+0x1ca>
 800d350:	0670      	lsls	r0, r6, #25
 800d352:	d5fb      	bpl.n	800d34c <_printf_i+0x1c0>
 800d354:	8019      	strh	r1, [r3, #0]
 800d356:	2300      	movs	r3, #0
 800d358:	6123      	str	r3, [r4, #16]
 800d35a:	4615      	mov	r5, r2
 800d35c:	e7bc      	b.n	800d2d8 <_printf_i+0x14c>
 800d35e:	682b      	ldr	r3, [r5, #0]
 800d360:	1d1a      	adds	r2, r3, #4
 800d362:	602a      	str	r2, [r5, #0]
 800d364:	681d      	ldr	r5, [r3, #0]
 800d366:	6862      	ldr	r2, [r4, #4]
 800d368:	2100      	movs	r1, #0
 800d36a:	4628      	mov	r0, r5
 800d36c:	f7f2 ff20 	bl	80001b0 <memchr>
 800d370:	b108      	cbz	r0, 800d376 <_printf_i+0x1ea>
 800d372:	1b40      	subs	r0, r0, r5
 800d374:	6060      	str	r0, [r4, #4]
 800d376:	6863      	ldr	r3, [r4, #4]
 800d378:	6123      	str	r3, [r4, #16]
 800d37a:	2300      	movs	r3, #0
 800d37c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d380:	e7aa      	b.n	800d2d8 <_printf_i+0x14c>
 800d382:	6923      	ldr	r3, [r4, #16]
 800d384:	462a      	mov	r2, r5
 800d386:	4649      	mov	r1, r9
 800d388:	4640      	mov	r0, r8
 800d38a:	47d0      	blx	sl
 800d38c:	3001      	adds	r0, #1
 800d38e:	d0ad      	beq.n	800d2ec <_printf_i+0x160>
 800d390:	6823      	ldr	r3, [r4, #0]
 800d392:	079b      	lsls	r3, r3, #30
 800d394:	d413      	bmi.n	800d3be <_printf_i+0x232>
 800d396:	68e0      	ldr	r0, [r4, #12]
 800d398:	9b03      	ldr	r3, [sp, #12]
 800d39a:	4298      	cmp	r0, r3
 800d39c:	bfb8      	it	lt
 800d39e:	4618      	movlt	r0, r3
 800d3a0:	e7a6      	b.n	800d2f0 <_printf_i+0x164>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	4632      	mov	r2, r6
 800d3a6:	4649      	mov	r1, r9
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	47d0      	blx	sl
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	d09d      	beq.n	800d2ec <_printf_i+0x160>
 800d3b0:	3501      	adds	r5, #1
 800d3b2:	68e3      	ldr	r3, [r4, #12]
 800d3b4:	9903      	ldr	r1, [sp, #12]
 800d3b6:	1a5b      	subs	r3, r3, r1
 800d3b8:	42ab      	cmp	r3, r5
 800d3ba:	dcf2      	bgt.n	800d3a2 <_printf_i+0x216>
 800d3bc:	e7eb      	b.n	800d396 <_printf_i+0x20a>
 800d3be:	2500      	movs	r5, #0
 800d3c0:	f104 0619 	add.w	r6, r4, #25
 800d3c4:	e7f5      	b.n	800d3b2 <_printf_i+0x226>
 800d3c6:	bf00      	nop
 800d3c8:	0800e9a5 	.word	0x0800e9a5
 800d3cc:	0800e9b6 	.word	0x0800e9b6

0800d3d0 <__sflush_r>:
 800d3d0:	898a      	ldrh	r2, [r1, #12]
 800d3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	0710      	lsls	r0, r2, #28
 800d3da:	460c      	mov	r4, r1
 800d3dc:	d458      	bmi.n	800d490 <__sflush_r+0xc0>
 800d3de:	684b      	ldr	r3, [r1, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	dc05      	bgt.n	800d3f0 <__sflush_r+0x20>
 800d3e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	dc02      	bgt.n	800d3f0 <__sflush_r+0x20>
 800d3ea:	2000      	movs	r0, #0
 800d3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3f2:	2e00      	cmp	r6, #0
 800d3f4:	d0f9      	beq.n	800d3ea <__sflush_r+0x1a>
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3fc:	682f      	ldr	r7, [r5, #0]
 800d3fe:	6a21      	ldr	r1, [r4, #32]
 800d400:	602b      	str	r3, [r5, #0]
 800d402:	d032      	beq.n	800d46a <__sflush_r+0x9a>
 800d404:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d406:	89a3      	ldrh	r3, [r4, #12]
 800d408:	075a      	lsls	r2, r3, #29
 800d40a:	d505      	bpl.n	800d418 <__sflush_r+0x48>
 800d40c:	6863      	ldr	r3, [r4, #4]
 800d40e:	1ac0      	subs	r0, r0, r3
 800d410:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d412:	b10b      	cbz	r3, 800d418 <__sflush_r+0x48>
 800d414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d416:	1ac0      	subs	r0, r0, r3
 800d418:	2300      	movs	r3, #0
 800d41a:	4602      	mov	r2, r0
 800d41c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d41e:	6a21      	ldr	r1, [r4, #32]
 800d420:	4628      	mov	r0, r5
 800d422:	47b0      	blx	r6
 800d424:	1c43      	adds	r3, r0, #1
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	d106      	bne.n	800d438 <__sflush_r+0x68>
 800d42a:	6829      	ldr	r1, [r5, #0]
 800d42c:	291d      	cmp	r1, #29
 800d42e:	d82b      	bhi.n	800d488 <__sflush_r+0xb8>
 800d430:	4a29      	ldr	r2, [pc, #164]	; (800d4d8 <__sflush_r+0x108>)
 800d432:	410a      	asrs	r2, r1
 800d434:	07d6      	lsls	r6, r2, #31
 800d436:	d427      	bmi.n	800d488 <__sflush_r+0xb8>
 800d438:	2200      	movs	r2, #0
 800d43a:	6062      	str	r2, [r4, #4]
 800d43c:	04d9      	lsls	r1, r3, #19
 800d43e:	6922      	ldr	r2, [r4, #16]
 800d440:	6022      	str	r2, [r4, #0]
 800d442:	d504      	bpl.n	800d44e <__sflush_r+0x7e>
 800d444:	1c42      	adds	r2, r0, #1
 800d446:	d101      	bne.n	800d44c <__sflush_r+0x7c>
 800d448:	682b      	ldr	r3, [r5, #0]
 800d44a:	b903      	cbnz	r3, 800d44e <__sflush_r+0x7e>
 800d44c:	6560      	str	r0, [r4, #84]	; 0x54
 800d44e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d450:	602f      	str	r7, [r5, #0]
 800d452:	2900      	cmp	r1, #0
 800d454:	d0c9      	beq.n	800d3ea <__sflush_r+0x1a>
 800d456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d45a:	4299      	cmp	r1, r3
 800d45c:	d002      	beq.n	800d464 <__sflush_r+0x94>
 800d45e:	4628      	mov	r0, r5
 800d460:	f7ff fbea 	bl	800cc38 <_free_r>
 800d464:	2000      	movs	r0, #0
 800d466:	6360      	str	r0, [r4, #52]	; 0x34
 800d468:	e7c0      	b.n	800d3ec <__sflush_r+0x1c>
 800d46a:	2301      	movs	r3, #1
 800d46c:	4628      	mov	r0, r5
 800d46e:	47b0      	blx	r6
 800d470:	1c41      	adds	r1, r0, #1
 800d472:	d1c8      	bne.n	800d406 <__sflush_r+0x36>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d0c5      	beq.n	800d406 <__sflush_r+0x36>
 800d47a:	2b1d      	cmp	r3, #29
 800d47c:	d001      	beq.n	800d482 <__sflush_r+0xb2>
 800d47e:	2b16      	cmp	r3, #22
 800d480:	d101      	bne.n	800d486 <__sflush_r+0xb6>
 800d482:	602f      	str	r7, [r5, #0]
 800d484:	e7b1      	b.n	800d3ea <__sflush_r+0x1a>
 800d486:	89a3      	ldrh	r3, [r4, #12]
 800d488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d48c:	81a3      	strh	r3, [r4, #12]
 800d48e:	e7ad      	b.n	800d3ec <__sflush_r+0x1c>
 800d490:	690f      	ldr	r7, [r1, #16]
 800d492:	2f00      	cmp	r7, #0
 800d494:	d0a9      	beq.n	800d3ea <__sflush_r+0x1a>
 800d496:	0793      	lsls	r3, r2, #30
 800d498:	680e      	ldr	r6, [r1, #0]
 800d49a:	bf08      	it	eq
 800d49c:	694b      	ldreq	r3, [r1, #20]
 800d49e:	600f      	str	r7, [r1, #0]
 800d4a0:	bf18      	it	ne
 800d4a2:	2300      	movne	r3, #0
 800d4a4:	eba6 0807 	sub.w	r8, r6, r7
 800d4a8:	608b      	str	r3, [r1, #8]
 800d4aa:	f1b8 0f00 	cmp.w	r8, #0
 800d4ae:	dd9c      	ble.n	800d3ea <__sflush_r+0x1a>
 800d4b0:	6a21      	ldr	r1, [r4, #32]
 800d4b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d4b4:	4643      	mov	r3, r8
 800d4b6:	463a      	mov	r2, r7
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	47b0      	blx	r6
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	dc06      	bgt.n	800d4ce <__sflush_r+0xfe>
 800d4c0:	89a3      	ldrh	r3, [r4, #12]
 800d4c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4c6:	81a3      	strh	r3, [r4, #12]
 800d4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4cc:	e78e      	b.n	800d3ec <__sflush_r+0x1c>
 800d4ce:	4407      	add	r7, r0
 800d4d0:	eba8 0800 	sub.w	r8, r8, r0
 800d4d4:	e7e9      	b.n	800d4aa <__sflush_r+0xda>
 800d4d6:	bf00      	nop
 800d4d8:	dfbffffe 	.word	0xdfbffffe

0800d4dc <_fflush_r>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	690b      	ldr	r3, [r1, #16]
 800d4e0:	4605      	mov	r5, r0
 800d4e2:	460c      	mov	r4, r1
 800d4e4:	b913      	cbnz	r3, 800d4ec <_fflush_r+0x10>
 800d4e6:	2500      	movs	r5, #0
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	bd38      	pop	{r3, r4, r5, pc}
 800d4ec:	b118      	cbz	r0, 800d4f6 <_fflush_r+0x1a>
 800d4ee:	6a03      	ldr	r3, [r0, #32]
 800d4f0:	b90b      	cbnz	r3, 800d4f6 <_fflush_r+0x1a>
 800d4f2:	f7ff f999 	bl	800c828 <__sinit>
 800d4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d0f3      	beq.n	800d4e6 <_fflush_r+0xa>
 800d4fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d500:	07d0      	lsls	r0, r2, #31
 800d502:	d404      	bmi.n	800d50e <_fflush_r+0x32>
 800d504:	0599      	lsls	r1, r3, #22
 800d506:	d402      	bmi.n	800d50e <_fflush_r+0x32>
 800d508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d50a:	f7ff fb84 	bl	800cc16 <__retarget_lock_acquire_recursive>
 800d50e:	4628      	mov	r0, r5
 800d510:	4621      	mov	r1, r4
 800d512:	f7ff ff5d 	bl	800d3d0 <__sflush_r>
 800d516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d518:	07da      	lsls	r2, r3, #31
 800d51a:	4605      	mov	r5, r0
 800d51c:	d4e4      	bmi.n	800d4e8 <_fflush_r+0xc>
 800d51e:	89a3      	ldrh	r3, [r4, #12]
 800d520:	059b      	lsls	r3, r3, #22
 800d522:	d4e1      	bmi.n	800d4e8 <_fflush_r+0xc>
 800d524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d526:	f7ff fb77 	bl	800cc18 <__retarget_lock_release_recursive>
 800d52a:	e7dd      	b.n	800d4e8 <_fflush_r+0xc>

0800d52c <__swhatbuf_r>:
 800d52c:	b570      	push	{r4, r5, r6, lr}
 800d52e:	460c      	mov	r4, r1
 800d530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d534:	2900      	cmp	r1, #0
 800d536:	b096      	sub	sp, #88	; 0x58
 800d538:	4615      	mov	r5, r2
 800d53a:	461e      	mov	r6, r3
 800d53c:	da0d      	bge.n	800d55a <__swhatbuf_r+0x2e>
 800d53e:	89a3      	ldrh	r3, [r4, #12]
 800d540:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d544:	f04f 0100 	mov.w	r1, #0
 800d548:	bf0c      	ite	eq
 800d54a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d54e:	2340      	movne	r3, #64	; 0x40
 800d550:	2000      	movs	r0, #0
 800d552:	6031      	str	r1, [r6, #0]
 800d554:	602b      	str	r3, [r5, #0]
 800d556:	b016      	add	sp, #88	; 0x58
 800d558:	bd70      	pop	{r4, r5, r6, pc}
 800d55a:	466a      	mov	r2, sp
 800d55c:	f000 f87c 	bl	800d658 <_fstat_r>
 800d560:	2800      	cmp	r0, #0
 800d562:	dbec      	blt.n	800d53e <__swhatbuf_r+0x12>
 800d564:	9901      	ldr	r1, [sp, #4]
 800d566:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d56a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d56e:	4259      	negs	r1, r3
 800d570:	4159      	adcs	r1, r3
 800d572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d576:	e7eb      	b.n	800d550 <__swhatbuf_r+0x24>

0800d578 <__smakebuf_r>:
 800d578:	898b      	ldrh	r3, [r1, #12]
 800d57a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d57c:	079d      	lsls	r5, r3, #30
 800d57e:	4606      	mov	r6, r0
 800d580:	460c      	mov	r4, r1
 800d582:	d507      	bpl.n	800d594 <__smakebuf_r+0x1c>
 800d584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	6123      	str	r3, [r4, #16]
 800d58c:	2301      	movs	r3, #1
 800d58e:	6163      	str	r3, [r4, #20]
 800d590:	b002      	add	sp, #8
 800d592:	bd70      	pop	{r4, r5, r6, pc}
 800d594:	ab01      	add	r3, sp, #4
 800d596:	466a      	mov	r2, sp
 800d598:	f7ff ffc8 	bl	800d52c <__swhatbuf_r>
 800d59c:	9900      	ldr	r1, [sp, #0]
 800d59e:	4605      	mov	r5, r0
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f7ff fbb5 	bl	800cd10 <_malloc_r>
 800d5a6:	b948      	cbnz	r0, 800d5bc <__smakebuf_r+0x44>
 800d5a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ac:	059a      	lsls	r2, r3, #22
 800d5ae:	d4ef      	bmi.n	800d590 <__smakebuf_r+0x18>
 800d5b0:	f023 0303 	bic.w	r3, r3, #3
 800d5b4:	f043 0302 	orr.w	r3, r3, #2
 800d5b8:	81a3      	strh	r3, [r4, #12]
 800d5ba:	e7e3      	b.n	800d584 <__smakebuf_r+0xc>
 800d5bc:	89a3      	ldrh	r3, [r4, #12]
 800d5be:	6020      	str	r0, [r4, #0]
 800d5c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5c4:	81a3      	strh	r3, [r4, #12]
 800d5c6:	9b00      	ldr	r3, [sp, #0]
 800d5c8:	6163      	str	r3, [r4, #20]
 800d5ca:	9b01      	ldr	r3, [sp, #4]
 800d5cc:	6120      	str	r0, [r4, #16]
 800d5ce:	b15b      	cbz	r3, 800d5e8 <__smakebuf_r+0x70>
 800d5d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	f000 f851 	bl	800d67c <_isatty_r>
 800d5da:	b128      	cbz	r0, 800d5e8 <__smakebuf_r+0x70>
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	f023 0303 	bic.w	r3, r3, #3
 800d5e2:	f043 0301 	orr.w	r3, r3, #1
 800d5e6:	81a3      	strh	r3, [r4, #12]
 800d5e8:	89a3      	ldrh	r3, [r4, #12]
 800d5ea:	431d      	orrs	r5, r3
 800d5ec:	81a5      	strh	r5, [r4, #12]
 800d5ee:	e7cf      	b.n	800d590 <__smakebuf_r+0x18>

0800d5f0 <_putc_r>:
 800d5f0:	b570      	push	{r4, r5, r6, lr}
 800d5f2:	460d      	mov	r5, r1
 800d5f4:	4614      	mov	r4, r2
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	b118      	cbz	r0, 800d602 <_putc_r+0x12>
 800d5fa:	6a03      	ldr	r3, [r0, #32]
 800d5fc:	b90b      	cbnz	r3, 800d602 <_putc_r+0x12>
 800d5fe:	f7ff f913 	bl	800c828 <__sinit>
 800d602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d604:	07d8      	lsls	r0, r3, #31
 800d606:	d405      	bmi.n	800d614 <_putc_r+0x24>
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	0599      	lsls	r1, r3, #22
 800d60c:	d402      	bmi.n	800d614 <_putc_r+0x24>
 800d60e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d610:	f7ff fb01 	bl	800cc16 <__retarget_lock_acquire_recursive>
 800d614:	68a3      	ldr	r3, [r4, #8]
 800d616:	3b01      	subs	r3, #1
 800d618:	2b00      	cmp	r3, #0
 800d61a:	60a3      	str	r3, [r4, #8]
 800d61c:	da05      	bge.n	800d62a <_putc_r+0x3a>
 800d61e:	69a2      	ldr	r2, [r4, #24]
 800d620:	4293      	cmp	r3, r2
 800d622:	db12      	blt.n	800d64a <_putc_r+0x5a>
 800d624:	b2eb      	uxtb	r3, r5
 800d626:	2b0a      	cmp	r3, #10
 800d628:	d00f      	beq.n	800d64a <_putc_r+0x5a>
 800d62a:	6823      	ldr	r3, [r4, #0]
 800d62c:	1c5a      	adds	r2, r3, #1
 800d62e:	6022      	str	r2, [r4, #0]
 800d630:	701d      	strb	r5, [r3, #0]
 800d632:	b2ed      	uxtb	r5, r5
 800d634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d636:	07da      	lsls	r2, r3, #31
 800d638:	d405      	bmi.n	800d646 <_putc_r+0x56>
 800d63a:	89a3      	ldrh	r3, [r4, #12]
 800d63c:	059b      	lsls	r3, r3, #22
 800d63e:	d402      	bmi.n	800d646 <_putc_r+0x56>
 800d640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d642:	f7ff fae9 	bl	800cc18 <__retarget_lock_release_recursive>
 800d646:	4628      	mov	r0, r5
 800d648:	bd70      	pop	{r4, r5, r6, pc}
 800d64a:	4629      	mov	r1, r5
 800d64c:	4622      	mov	r2, r4
 800d64e:	4630      	mov	r0, r6
 800d650:	f7ff f9d9 	bl	800ca06 <__swbuf_r>
 800d654:	4605      	mov	r5, r0
 800d656:	e7ed      	b.n	800d634 <_putc_r+0x44>

0800d658 <_fstat_r>:
 800d658:	b538      	push	{r3, r4, r5, lr}
 800d65a:	4d07      	ldr	r5, [pc, #28]	; (800d678 <_fstat_r+0x20>)
 800d65c:	2300      	movs	r3, #0
 800d65e:	4604      	mov	r4, r0
 800d660:	4608      	mov	r0, r1
 800d662:	4611      	mov	r1, r2
 800d664:	602b      	str	r3, [r5, #0]
 800d666:	f000 f831 	bl	800d6cc <_fstat>
 800d66a:	1c43      	adds	r3, r0, #1
 800d66c:	d102      	bne.n	800d674 <_fstat_r+0x1c>
 800d66e:	682b      	ldr	r3, [r5, #0]
 800d670:	b103      	cbz	r3, 800d674 <_fstat_r+0x1c>
 800d672:	6023      	str	r3, [r4, #0]
 800d674:	bd38      	pop	{r3, r4, r5, pc}
 800d676:	bf00      	nop
 800d678:	2000183c 	.word	0x2000183c

0800d67c <_isatty_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	4d06      	ldr	r5, [pc, #24]	; (800d698 <_isatty_r+0x1c>)
 800d680:	2300      	movs	r3, #0
 800d682:	4604      	mov	r4, r0
 800d684:	4608      	mov	r0, r1
 800d686:	602b      	str	r3, [r5, #0]
 800d688:	f000 f828 	bl	800d6dc <_isatty>
 800d68c:	1c43      	adds	r3, r0, #1
 800d68e:	d102      	bne.n	800d696 <_isatty_r+0x1a>
 800d690:	682b      	ldr	r3, [r5, #0]
 800d692:	b103      	cbz	r3, 800d696 <_isatty_r+0x1a>
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	bd38      	pop	{r3, r4, r5, pc}
 800d698:	2000183c 	.word	0x2000183c

0800d69c <_sbrk_r>:
 800d69c:	b538      	push	{r3, r4, r5, lr}
 800d69e:	4d06      	ldr	r5, [pc, #24]	; (800d6b8 <_sbrk_r+0x1c>)
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	4608      	mov	r0, r1
 800d6a6:	602b      	str	r3, [r5, #0]
 800d6a8:	f000 f830 	bl	800d70c <_sbrk>
 800d6ac:	1c43      	adds	r3, r0, #1
 800d6ae:	d102      	bne.n	800d6b6 <_sbrk_r+0x1a>
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	b103      	cbz	r3, 800d6b6 <_sbrk_r+0x1a>
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	bd38      	pop	{r3, r4, r5, pc}
 800d6b8:	2000183c 	.word	0x2000183c

0800d6bc <_close>:
 800d6bc:	4b02      	ldr	r3, [pc, #8]	; (800d6c8 <_close+0xc>)
 800d6be:	2258      	movs	r2, #88	; 0x58
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c6:	4770      	bx	lr
 800d6c8:	2000183c 	.word	0x2000183c

0800d6cc <_fstat>:
 800d6cc:	4b02      	ldr	r3, [pc, #8]	; (800d6d8 <_fstat+0xc>)
 800d6ce:	2258      	movs	r2, #88	; 0x58
 800d6d0:	601a      	str	r2, [r3, #0]
 800d6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d6:	4770      	bx	lr
 800d6d8:	2000183c 	.word	0x2000183c

0800d6dc <_isatty>:
 800d6dc:	4b02      	ldr	r3, [pc, #8]	; (800d6e8 <_isatty+0xc>)
 800d6de:	2258      	movs	r2, #88	; 0x58
 800d6e0:	601a      	str	r2, [r3, #0]
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	2000183c 	.word	0x2000183c

0800d6ec <_lseek>:
 800d6ec:	4b02      	ldr	r3, [pc, #8]	; (800d6f8 <_lseek+0xc>)
 800d6ee:	2258      	movs	r2, #88	; 0x58
 800d6f0:	601a      	str	r2, [r3, #0]
 800d6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f6:	4770      	bx	lr
 800d6f8:	2000183c 	.word	0x2000183c

0800d6fc <_read>:
 800d6fc:	4b02      	ldr	r3, [pc, #8]	; (800d708 <_read+0xc>)
 800d6fe:	2258      	movs	r2, #88	; 0x58
 800d700:	601a      	str	r2, [r3, #0]
 800d702:	f04f 30ff 	mov.w	r0, #4294967295
 800d706:	4770      	bx	lr
 800d708:	2000183c 	.word	0x2000183c

0800d70c <_sbrk>:
 800d70c:	4a04      	ldr	r2, [pc, #16]	; (800d720 <_sbrk+0x14>)
 800d70e:	6811      	ldr	r1, [r2, #0]
 800d710:	4603      	mov	r3, r0
 800d712:	b909      	cbnz	r1, 800d718 <_sbrk+0xc>
 800d714:	4903      	ldr	r1, [pc, #12]	; (800d724 <_sbrk+0x18>)
 800d716:	6011      	str	r1, [r2, #0]
 800d718:	6810      	ldr	r0, [r2, #0]
 800d71a:	4403      	add	r3, r0
 800d71c:	6013      	str	r3, [r2, #0]
 800d71e:	4770      	bx	lr
 800d720:	2000184c 	.word	0x2000184c
 800d724:	20001850 	.word	0x20001850

0800d728 <_init>:
 800d728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72a:	bf00      	nop
 800d72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d72e:	bc08      	pop	{r3}
 800d730:	469e      	mov	lr, r3
 800d732:	4770      	bx	lr

0800d734 <_fini>:
 800d734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d736:	bf00      	nop
 800d738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d73a:	bc08      	pop	{r3}
 800d73c:	469e      	mov	lr, r3
 800d73e:	4770      	bx	lr
