
Client_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db84  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001414  0800dcc4  0800dcc4  0001dcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f0d8  0800f0d8  0001f0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f0e0  0800f0e0  0001f0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f0e4  0800f0e4  0001f0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000008  0800f0e8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000039  20000090  0800f170  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000cc  0800f1a9  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001664  200000e0  0800f1ba  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001744  0800f1ba  00021744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800f1ba  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002f461  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006c07  00000000  00000000  0004ff3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002a10  00000000  00000000  00056b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000201f  00000000  00000000  00059558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002d275  00000000  00000000  0005b577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000317b8  00000000  00000000  000887ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f97a7  00000000  00000000  000b9fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000b768  00000000  00000000  001b374c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007f  00000000  00000000  001beeb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dcac 	.word	0x0800dcac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0800dcac 	.word	0x0800dcac

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b970 	b.w	8000d04 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	460d      	mov	r5, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	460f      	mov	r7, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4694      	mov	ip, r2
 8000a50:	d965      	bls.n	8000b1e <__udivmoddi4+0xe2>
 8000a52:	fab2 f382 	clz	r3, r2
 8000a56:	b143      	cbz	r3, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a5c:	f1c3 0220 	rsb	r2, r3, #32
 8000a60:	409f      	lsls	r7, r3
 8000a62:	fa20 f202 	lsr.w	r2, r0, r2
 8000a66:	4317      	orrs	r7, r2
 8000a68:	409c      	lsls	r4, r3
 8000a6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a6e:	fa1f f58c 	uxth.w	r5, ip
 8000a72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a76:	0c22      	lsrs	r2, r4, #16
 8000a78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a80:	fb01 f005 	mul.w	r0, r1, r5
 8000a84:	4290      	cmp	r0, r2
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a88:	eb1c 0202 	adds.w	r2, ip, r2
 8000a8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a90:	f080 811c 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000a94:	4290      	cmp	r0, r2
 8000a96:	f240 8119 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	b2a4      	uxth	r4, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aae:	fb00 f505 	mul.w	r5, r0, r5
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x90>
 8000ab6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abe:	f080 8107 	bcs.w	8000cd0 <__udivmoddi4+0x294>
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	f240 8104 	bls.w	8000cd0 <__udivmoddi4+0x294>
 8000ac8:	4464      	add	r4, ip
 8000aca:	3802      	subs	r0, #2
 8000acc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11e      	cbz	r6, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40dc      	lsrs	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e9c6 4300 	strd	r4, r3, [r6]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0xbc>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80ed 	beq.w	8000cc6 <__udivmoddi4+0x28a>
 8000aec:	2100      	movs	r1, #0
 8000aee:	e9c6 0500 	strd	r0, r5, [r6]
 8000af2:	4608      	mov	r0, r1
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	fab3 f183 	clz	r1, r3
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d149      	bne.n	8000b94 <__udivmoddi4+0x158>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d302      	bcc.n	8000b0a <__udivmoddi4+0xce>
 8000b04:	4282      	cmp	r2, r0
 8000b06:	f200 80f8 	bhi.w	8000cfa <__udivmoddi4+0x2be>
 8000b0a:	1a84      	subs	r4, r0, r2
 8000b0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b10:	2001      	movs	r0, #1
 8000b12:	4617      	mov	r7, r2
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e2      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	e9c6 4700 	strd	r4, r7, [r6]
 8000b1c:	e7df      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b1e:	b902      	cbnz	r2, 8000b22 <__udivmoddi4+0xe6>
 8000b20:	deff      	udf	#255	; 0xff
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8090 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2c:	1a8a      	subs	r2, r1, r2
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2101      	movs	r1, #1
 8000b38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b40:	0c22      	lsrs	r2, r4, #16
 8000b42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b46:	fb0e f005 	mul.w	r0, lr, r5
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4290      	cmp	r0, r2
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2b8>
 8000b5e:	4645      	mov	r5, r8
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b68:	fb07 2210 	mls	r2, r7, r0, r2
 8000b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x14e>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x14c>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2c2>
 8000b88:	4610      	mov	r0, r2
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b92:	e79f      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b94:	f1c1 0720 	rsb	r7, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ba6:	fa20 f307 	lsr.w	r3, r0, r7
 8000baa:	40fd      	lsrs	r5, r7
 8000bac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb0:	4323      	orrs	r3, r4
 8000bb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bb6:	fa1f fe8c 	uxth.w	lr, ip
 8000bba:	fb09 5518 	mls	r5, r9, r8, r5
 8000bbe:	0c1c      	lsrs	r4, r3, #16
 8000bc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	fa00 f001 	lsl.w	r0, r0, r1
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4464      	add	r4, ip
 8000bec:	1b64      	subs	r4, r4, r5
 8000bee:	b29d      	uxth	r5, r3
 8000bf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4464      	add	r4, ip
 8000c16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	42ac      	cmp	r4, r5
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46ae      	mov	lr, r5
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x29c>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x298>
 8000c2c:	b156      	cbz	r6, 8000c44 <__udivmoddi4+0x208>
 8000c2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c32:	eb64 040e 	sbc.w	r4, r4, lr
 8000c36:	fa04 f707 	lsl.w	r7, r4, r7
 8000c3a:	40ca      	lsrs	r2, r1
 8000c3c:	40cc      	lsrs	r4, r1
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	e9c6 7400 	strd	r7, r4, [r6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	f1c3 0120 	rsb	r1, r3, #32
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	fa20 f201 	lsr.w	r2, r0, r1
 8000c58:	fa25 f101 	lsr.w	r1, r5, r1
 8000c5c:	409d      	lsls	r5, r3
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c70:	0c11      	lsrs	r1, r2, #16
 8000c72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c76:	fb00 f50e 	mul.w	r5, r0, lr
 8000c7a:	428d      	cmp	r5, r1
 8000c7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x258>
 8000c82:	eb1c 0101 	adds.w	r1, ip, r1
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000c8c:	428d      	cmp	r5, r1
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1b49      	subs	r1, r1, r5
 8000c96:	b292      	uxth	r2, r2
 8000c98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x282>
 8000cac:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb6:	4291      	cmp	r1, r2
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cba:	3d02      	subs	r5, #2
 8000cbc:	4462      	add	r2, ip
 8000cbe:	1a52      	subs	r2, r2, r1
 8000cc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0xfc>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e708      	b.n	8000ade <__udivmoddi4+0xa2>
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e6e6      	b.n	8000a9e <__udivmoddi4+0x62>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	e6fb      	b.n	8000acc <__udivmoddi4+0x90>
 8000cd4:	4548      	cmp	r0, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce4:	4645      	mov	r5, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x282>
 8000ce8:	462b      	mov	r3, r5
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x258>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf4:	3d02      	subs	r5, #2
 8000cf6:	4462      	add	r2, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x124>
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e70a      	b.n	8000b14 <__udivmoddi4+0xd8>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x14e>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <LL_EXTI_EnableIT_32_63+0x24>)
 8000d12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d16:	4905      	ldr	r1, [pc, #20]	; (8000d2c <LL_EXTI_EnableIT_32_63+0x24>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	58000800 	.word	0x58000800

08000d30 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d54:	68fb      	ldr	r3, [r7, #12]
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d82:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000d9e:	f002 fc3d 	bl	800361c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000da2:	f002 fc41 	bl	8003628 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000da6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000daa:	f7ff ffad 	bl	8000d08 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000dae:	f008 fec1 	bl	8009b34 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000db2:	f000 f821 	bl	8000df8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000db6:	f000 f8c1 	bl	8000f3c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000dba:	bf00      	nop
}
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <APPD_EnableCPU2+0x34>)
 8000dc8:	1d3c      	adds	r4, r7, #4
 8000dca:	461d      	mov	r5, r3
 8000dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd4:	c403      	stmia	r4!, {r0, r1}
 8000dd6:	8022      	strh	r2, [r4, #0]
 8000dd8:	3402      	adds	r4, #2
 8000dda:	0c13      	lsrs	r3, r2, #16
 8000ddc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000dde:	f008 fdbd 	bl	800995c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4618      	mov	r0, r3
 8000de6:	f008 f84e 	bl	8008e86 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000dea:	bf00      	nop
}
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bdb0      	pop	{r4, r5, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	0800dcc4 	.word	0x0800dcc4

08000df8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	77fb      	strb	r3, [r7, #31]
 8000e1c:	e036      	b.n	8000e8c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000e1e:	7ffb      	ldrb	r3, [r7, #31]
 8000e20:	4a43      	ldr	r2, [pc, #268]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4413      	add	r3, r2
 8000e26:	799b      	ldrb	r3, [r3, #6]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d02c      	beq.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000e2c:	7ffb      	ldrb	r3, [r7, #31]
 8000e2e:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e34:	4a3f      	ldr	r2, [pc, #252]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d01b      	beq.n	8000e72 <APPD_SetCPU2GpioConfig+0x7a>
 8000e3a:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d821      	bhi.n	8000e84 <APPD_SetCPU2GpioConfig+0x8c>
 8000e40:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e44:	d003      	beq.n	8000e4e <APPD_SetCPU2GpioConfig+0x56>
 8000e46:	4a3c      	ldr	r2, [pc, #240]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d009      	beq.n	8000e60 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000e4c:	e01a      	b.n	8000e84 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000e4e:	7ffb      	ldrb	r3, [r7, #31]
 8000e50:	4a37      	ldr	r2, [pc, #220]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	4413      	add	r3, r2
 8000e56:	889a      	ldrh	r2, [r3, #4]
 8000e58:	8bbb      	ldrh	r3, [r7, #28]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	83bb      	strh	r3, [r7, #28]
          break;
 8000e5e:	e012      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000e60:	7ffb      	ldrb	r3, [r7, #31]
 8000e62:	4a33      	ldr	r2, [pc, #204]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4413      	add	r3, r2
 8000e68:	889a      	ldrh	r2, [r3, #4]
 8000e6a:	8b7b      	ldrh	r3, [r7, #26]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	837b      	strh	r3, [r7, #26]
          break;
 8000e70:	e009      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000e72:	7ffb      	ldrb	r3, [r7, #31]
 8000e74:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4413      	add	r3, r2
 8000e7a:	889a      	ldrh	r2, [r3, #4]
 8000e7c:	8b3b      	ldrh	r3, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	833b      	strh	r3, [r7, #24]
          break;
 8000e82:	e000      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000e84:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000e86:	7ffb      	ldrb	r3, [r7, #31]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	77fb      	strb	r3, [r7, #31]
 8000e8c:	7ffb      	ldrb	r3, [r7, #31]
 8000e8e:	2b25      	cmp	r3, #37	; 0x25
 8000e90:	d9c5      	bls.n	8000e1e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000e9e:	8bbb      	ldrh	r3, [r7, #28]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d014      	beq.n	8000ece <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000ea4:	8bbb      	ldrh	r3, [r7, #28]
 8000ea6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff ff41 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff57 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f003 f8c6 	bl	800404c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000ec0:	8bbb      	ldrh	r3, [r7, #28]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f003 fa2f 	bl	800432c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000ece:	8b7b      	ldrh	r3, [r7, #26]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d012      	beq.n	8000efa <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000ed4:	8b7b      	ldrh	r3, [r7, #26]
 8000ed6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f7ff ff29 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f7ff ff3f 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000eea:	f003 f8af 	bl	800404c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000eee:	8b7b      	ldrh	r3, [r7, #26]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000ef6:	f003 fa19 	bl	800432c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000efa:	8b3b      	ldrh	r3, [r7, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000f00:	8b3b      	ldrh	r3, [r7, #24]
 8000f02:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	2004      	movs	r0, #4
 8000f06:	f7ff ff13 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000f0a:	2004      	movs	r0, #4
 8000f0c:	f7ff ff29 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f16:	f003 f899 	bl	800404c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000f1a:	8b3b      	ldrh	r3, [r7, #24]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f22:	f003 fa03 	bl	800432c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
}
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	0800ed68 	.word	0x0800ed68
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000400 	.word	0x48000400

08000f3c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000f40:	bf00      	nop
}
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000f4e:	f001 fc4f 	bl	80027f0 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000f52:	bf00      	nop
}
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000f64:	897a      	ldrh	r2, [r7, #10]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68f9      	ldr	r1, [r7, #12]
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f001 fa9a 	bl	80024a4 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000f70:	bf00      	nop
}
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f86:	f023 0207 	bic.w	r2, r3, #7
 8000f8a:	4905      	ldr	r1, [pc, #20]	; (8000fa0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	58000400 	.word	0x58000400

08000fa4 <LL_EXTI_EnableIT_32_63>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fb2:	4905      	ldr	r1, [pc, #20]	; (8000fc8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	58000800 	.word	0x58000800

08000fcc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000fda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fe6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	cafecafe 	.word	0xcafecafe

08001008 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800101a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4313      	orrs	r3, r2
 8001022:	608b      	str	r3, [r1, #8]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <LL_DBGMCU_GetDeviceID+0x18>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e0042000 	.word	0xe0042000

0800104c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <LL_DBGMCU_GetRevisionID+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	b29b      	uxth	r3, r3
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e0042000 	.word	0xe0042000

08001068 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <LL_LPM_EnableSleep+0x1c>)
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <LL_LPM_EnableSleep+0x1c>)
 8001072:	f023 0304 	bic.w	r3, r3, #4
 8001076:	6113      	str	r3, [r2, #16]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	22ca      	movs	r2, #202	; 0xca
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2253      	movs	r2, #83	; 0x53
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f023 0207 	bic.w	r2, r3, #7
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	609a      	str	r2, [r3, #8]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <MX_APPE_Config+0x18>)
 80010ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80010f4:	f000 f826 	bl	8001144 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80010f8:	f000 f82b 	bl	8001152 <Config_HSE>

  return;
 80010fc:	bf00      	nop
}
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	58004000 	.word	0x58004000

08001104 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001108:	f000 f837 	bl	800117a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800110c:	f000 f850 	bl	80011b0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001110:	4904      	ldr	r1, [pc, #16]	; (8001124 <MX_APPE_Init+0x20>)
 8001112:	2000      	movs	r0, #0
 8001114:	f000 ff5a 	bl	8001fcc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001118:	f7ff fe3f 	bl	8000d9a <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800111c:	f000 f856 	bl	80011cc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001120:	bf00      	nop
}
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200003c4 	.word	0x200003c4

08001128 <Init_Smps>:

void Init_Smps(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800112c:	bf00      	nop
}
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <Init_Exti>:

void Init_Exti(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800113a:	2050      	movs	r0, #80	; 0x50
 800113c:	f7ff ff32 	bl	8000fa4 <LL_EXTI_EnableIT_32_63>

  return;
 8001140:	bf00      	nop
}
 8001142:	bd80      	pop	{r7, pc}

08001144 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001148:	bf00      	nop
}
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001158:	2000      	movs	r0, #0
 800115a:	f008 fd69 	bl	8009c30 <OTP_Read>
 800115e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	799b      	ldrb	r3, [r3, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff2e 	bl	8000fcc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001170:	bf00      	nop
 8001172:	bf00      	nop
}
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <System_Init>:

static void System_Init(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  Init_Smps();
 800117e:	f7ff ffd3 	bl	8001128 <Init_Smps>

  Init_Exti();
 8001182:	f7ff ffd8 	bl	8001136 <Init_Exti>

  Init_Rtc();
 8001186:	f000 f803 	bl	8001190 <Init_Rtc>

  return;
 800118a:	bf00      	nop
}
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <Init_Rtc+0x1c>)
 8001196:	f7ff ff84 	bl	80010a2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800119a:	2100      	movs	r1, #0
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <Init_Rtc+0x1c>)
 800119e:	f7ff ff90 	bl	80010c2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <Init_Rtc+0x1c>)
 80011a4:	f7ff ff70 	bl	8001088 <LL_RTC_EnableWriteProtection>

  return;
 80011a8:	bf00      	nop
}
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40002800 	.word	0x40002800

080011b0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80011b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011b8:	f7ff ff26 	bl	8001008 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80011bc:	f00b fac4 	bl	800c748 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011c0:	2004      	movs	r0, #4
 80011c2:	f7ff fed9 	bl	8000f78 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011c6:	bf00      	nop
}
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80011d2:	f008 fa0d 	bl	80095f0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <appe_Tl_Init+0x50>)
 80011d8:	2100      	movs	r1, #0
 80011da:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011de:	f00b fbf1 	bl	800c9c4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <appe_Tl_Init+0x54>)
 80011e4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <appe_Tl_Init+0x58>)
 80011e8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <appe_Tl_Init+0x5c>)
 80011f0:	f008 f8c0 	bl	8009374 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <appe_Tl_Init+0x60>)
 80011f6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <appe_Tl_Init+0x64>)
 80011fa:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <appe_Tl_Init+0x68>)
 80011fe:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001200:	f240 533c 	movw	r3, #1340	; 0x53c
 8001204:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4618      	mov	r0, r3
 800120c:	f008 fb32 	bl	8009874 <TL_MM_Init>

  TL_Enable();
 8001210:	f008 f9e8 	bl	80095e4 <TL_Enable>

  return;
 8001214:	bf00      	nop
}
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	080093ad 	.word	0x080093ad
 8001220:	20030734 	.word	0x20030734
 8001224:	08001239 	.word	0x08001239
 8001228:	08001251 	.word	0x08001251
 800122c:	2003094c 	.word	0x2003094c
 8001230:	20030840 	.word	0x20030840
 8001234:	200301f8 	.word	0x200301f8

08001238 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001242:	bf00      	nop
}
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	330b      	adds	r3, #11
 800125e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800126a:	2b07      	cmp	r3, #7
 800126c:	f200 80d0 	bhi.w	8001410 <APPE_SysUserEvtRx+0x1c0>
 8001270:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <APPE_SysUserEvtRx+0x28>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	08001299 	.word	0x08001299
 800127c:	0800132b 	.word	0x0800132b
 8001280:	0800134d 	.word	0x0800134d
 8001284:	08001411 	.word	0x08001411
 8001288:	08001391 	.word	0x08001391
 800128c:	080013b5 	.word	0x080013b5
 8001290:	080013d1 	.word	0x080013d1
 8001294:	080013f5 	.word	0x080013f5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4618      	mov	r0, r3
 800129e:	f007 fe1f 	bl	8008ee0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80012a2:	485e      	ldr	r0, [pc, #376]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80012a4:	f008 fbe6 	bl	8009a74 <DbgTraceGetFileName>
 80012a8:	4601      	mov	r1, r0
 80012aa:	f44f 73ba 	mov.w	r3, #372	; 0x174
 80012ae:	4a5c      	ldr	r2, [pc, #368]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80012b0:	485c      	ldr	r0, [pc, #368]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80012b2:	f00b fd8b 	bl	800cdcc <iprintf>
 80012b6:	7b3b      	ldrb	r3, [r7, #12]
 80012b8:	4619      	mov	r1, r3
 80012ba:	7b7b      	ldrb	r3, [r7, #13]
 80012bc:	461a      	mov	r2, r3
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	4859      	ldr	r0, [pc, #356]	; (8001428 <APPE_SysUserEvtRx+0x1d8>)
 80012c2:	f00b fd83 	bl	800cdcc <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80012c6:	4855      	ldr	r0, [pc, #340]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80012c8:	f008 fbd4 	bl	8009a74 <DbgTraceGetFileName>
 80012cc:	4601      	mov	r1, r0
 80012ce:	f240 1375 	movw	r3, #373	; 0x175
 80012d2:	4a53      	ldr	r2, [pc, #332]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80012d4:	4853      	ldr	r0, [pc, #332]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80012d6:	f00b fd79 	bl	800cdcc <iprintf>
 80012da:	7c3b      	ldrb	r3, [r7, #16]
 80012dc:	4619      	mov	r1, r3
 80012de:	4853      	ldr	r0, [pc, #332]	; (800142c <APPE_SysUserEvtRx+0x1dc>)
 80012e0:	f00b fd74 	bl	800cdcc <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012e4:	484d      	ldr	r0, [pc, #308]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80012e6:	f008 fbc5 	bl	8009a74 <DbgTraceGetFileName>
 80012ea:	4601      	mov	r1, r0
 80012ec:	f44f 73bb 	mov.w	r3, #374	; 0x176
 80012f0:	4a4b      	ldr	r2, [pc, #300]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80012f2:	484c      	ldr	r0, [pc, #304]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80012f4:	f00b fd6a 	bl	800cdcc <iprintf>
 80012f8:	7dbb      	ldrb	r3, [r7, #22]
 80012fa:	4619      	mov	r1, r3
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	461a      	mov	r2, r3
 8001300:	7e3b      	ldrb	r3, [r7, #24]
 8001302:	484b      	ldr	r0, [pc, #300]	; (8001430 <APPE_SysUserEvtRx+0x1e0>)
 8001304:	f00b fd62 	bl	800cdcc <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001308:	4844      	ldr	r0, [pc, #272]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 800130a:	f008 fbb3 	bl	8009a74 <DbgTraceGetFileName>
 800130e:	4601      	mov	r1, r0
 8001310:	f44f 73bc 	mov.w	r3, #376	; 0x178
 8001314:	4a42      	ldr	r2, [pc, #264]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001316:	4843      	ldr	r0, [pc, #268]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 8001318:	f00b fd58 	bl	800cdcc <iprintf>
 800131c:	4845      	ldr	r0, [pc, #276]	; (8001434 <APPE_SysUserEvtRx+0x1e4>)
 800131e:	f00b fd55 	bl	800cdcc <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f8e0 	bl	80014e8 <APPE_SysEvtReadyProcessing>
    break;
 8001328:	e073      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800132a:	483c      	ldr	r0, [pc, #240]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 800132c:	f008 fba2 	bl	8009a74 <DbgTraceGetFileName>
 8001330:	4601      	mov	r1, r0
 8001332:	f240 137d 	movw	r3, #381	; 0x17d
 8001336:	4a3a      	ldr	r2, [pc, #232]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001338:	483a      	ldr	r0, [pc, #232]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 800133a:	f00b fd47 	bl	800cdcc <iprintf>
 800133e:	483e      	ldr	r0, [pc, #248]	; (8001438 <APPE_SysUserEvtRx+0x1e8>)
 8001340:	f00b fd44 	bl	800cdcc <iprintf>
    APPE_SysEvtError(pPayload);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f885 	bl	8001454 <APPE_SysEvtError>
    break;
 800134a:	e062      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800134c:	4833      	ldr	r0, [pc, #204]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 800134e:	f008 fb91 	bl	8009a74 <DbgTraceGetFileName>
 8001352:	4601      	mov	r1, r0
 8001354:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8001358:	4a31      	ldr	r2, [pc, #196]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 800135a:	4832      	ldr	r0, [pc, #200]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 800135c:	f00b fd36 	bl	800cdcc <iprintf>
 8001360:	4836      	ldr	r0, [pc, #216]	; (800143c <APPE_SysUserEvtRx+0x1ec>)
 8001362:	f00b fda1 	bl	800cea8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001366:	482d      	ldr	r0, [pc, #180]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 8001368:	f008 fb84 	bl	8009a74 <DbgTraceGetFileName>
 800136c:	4601      	mov	r1, r0
 800136e:	f240 1383 	movw	r3, #387	; 0x183
 8001372:	4a2b      	ldr	r2, [pc, #172]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001374:	482b      	ldr	r0, [pc, #172]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 8001376:	f00b fd29 	bl	800cdcc <iprintf>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3302      	adds	r3, #2
 800137e:	6819      	ldr	r1, [r3, #0]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	3302      	adds	r3, #2
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	461a      	mov	r2, r3
 8001388:	482d      	ldr	r0, [pc, #180]	; (8001440 <APPE_SysUserEvtRx+0x1f0>)
 800138a:	f00b fd1f 	bl	800cdcc <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800138e:	e040      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001390:	4822      	ldr	r0, [pc, #136]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 8001392:	f008 fb6f 	bl	8009a74 <DbgTraceGetFileName>
 8001396:	4601      	mov	r1, r0
 8001398:	f240 1389 	movw	r3, #393	; 0x189
 800139c:	4a20      	ldr	r2, [pc, #128]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 800139e:	4821      	ldr	r0, [pc, #132]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80013a0:	f00b fd14 	bl	800cdcc <iprintf>
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	3302      	adds	r3, #2
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4825      	ldr	r0, [pc, #148]	; (8001444 <APPE_SysUserEvtRx+0x1f4>)
 80013ae:	f00b fd0d 	bl	800cdcc <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80013b2:	e02e      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80013b4:	4819      	ldr	r0, [pc, #100]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80013b6:	f008 fb5d 	bl	8009a74 <DbgTraceGetFileName>
 80013ba:	4601      	mov	r1, r0
 80013bc:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80013c2:	4818      	ldr	r0, [pc, #96]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80013c4:	f00b fd02 	bl	800cdcc <iprintf>
 80013c8:	481f      	ldr	r0, [pc, #124]	; (8001448 <APPE_SysUserEvtRx+0x1f8>)
 80013ca:	f00b fcff 	bl	800cdcc <iprintf>
    break;
 80013ce:	e020      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80013d0:	4812      	ldr	r0, [pc, #72]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80013d2:	f008 fb4f 	bl	8009a74 <DbgTraceGetFileName>
 80013d6:	4601      	mov	r1, r0
 80013d8:	f44f 73c9 	mov.w	r3, #402	; 0x192
 80013dc:	4a10      	ldr	r2, [pc, #64]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80013de:	4811      	ldr	r0, [pc, #68]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80013e0:	f00b fcf4 	bl	800cdcc <iprintf>
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3302      	adds	r3, #2
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4817      	ldr	r0, [pc, #92]	; (800144c <APPE_SysUserEvtRx+0x1fc>)
 80013ee:	f00b fced 	bl	800cdcc <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80013f2:	e00e      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80013f6:	f008 fb3d 	bl	8009a74 <DbgTraceGetFileName>
 80013fa:	4601      	mov	r1, r0
 80013fc:	f240 1397 	movw	r3, #407	; 0x197
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001402:	4808      	ldr	r0, [pc, #32]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 8001404:	f00b fce2 	bl	800cdcc <iprintf>
 8001408:	4811      	ldr	r0, [pc, #68]	; (8001450 <APPE_SysUserEvtRx+0x200>)
 800140a:	f00b fcdf 	bl	800cdcc <iprintf>
    break;
 800140e:	e000      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001410:	bf00      	nop
  }

  return;
 8001412:	bf00      	nop
}
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	0800dce0 	.word	0x0800dce0
 8001420:	0800ee98 	.word	0x0800ee98
 8001424:	0800dcf8 	.word	0x0800dcf8
 8001428:	0800dd0c 	.word	0x0800dd0c
 800142c:	0800dd30 	.word	0x0800dd30
 8001430:	0800dd4c 	.word	0x0800dd4c
 8001434:	0800dd64 	.word	0x0800dd64
 8001438:	0800dd84 	.word	0x0800dd84
 800143c:	0800dda8 	.word	0x0800dda8
 8001440:	0800ddf8 	.word	0x0800ddf8
 8001444:	0800de20 	.word	0x0800de20
 8001448:	0800de5c 	.word	0x0800de5c
 800144c:	0800de80 	.word	0x0800de80
 8001450:	0800debc 	.word	0x0800debc

08001454 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	330b      	adds	r3, #11
 8001462:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3302      	adds	r3, #2
 8001468:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800146a:	4819      	ldr	r0, [pc, #100]	; (80014d0 <APPE_SysEvtError+0x7c>)
 800146c:	f008 fb02 	bl	8009a74 <DbgTraceGetFileName>
 8001470:	4601      	mov	r1, r0
 8001472:	f240 13af 	movw	r3, #431	; 0x1af
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <APPE_SysEvtError+0x80>)
 8001478:	4817      	ldr	r0, [pc, #92]	; (80014d8 <APPE_SysEvtError+0x84>)
 800147a:	f00b fca7 	bl	800cdcc <iprintf>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	4815      	ldr	r0, [pc, #84]	; (80014dc <APPE_SysEvtError+0x88>)
 8001486:	f00b fca1 	bl	800cdcc <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001492:	480f      	ldr	r0, [pc, #60]	; (80014d0 <APPE_SysEvtError+0x7c>)
 8001494:	f008 faee 	bl	8009a74 <DbgTraceGetFileName>
 8001498:	4601      	mov	r1, r0
 800149a:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 800149e:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <APPE_SysEvtError+0x80>)
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <APPE_SysEvtError+0x84>)
 80014a2:	f00b fc93 	bl	800cdcc <iprintf>
 80014a6:	480e      	ldr	r0, [pc, #56]	; (80014e0 <APPE_SysEvtError+0x8c>)
 80014a8:	f00b fcfe 	bl	800cea8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80014ac:	e00d      	b.n	80014ca <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <APPE_SysEvtError+0x7c>)
 80014b0:	f008 fae0 	bl	8009a74 <DbgTraceGetFileName>
 80014b4:	4601      	mov	r1, r0
 80014b6:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80014ba:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <APPE_SysEvtError+0x80>)
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <APPE_SysEvtError+0x84>)
 80014be:	f00b fc85 	bl	800cdcc <iprintf>
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <APPE_SysEvtError+0x90>)
 80014c4:	f00b fcf0 	bl	800cea8 <puts>
  return;
 80014c8:	bf00      	nop
}
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	0800dce0 	.word	0x0800dce0
 80014d4:	0800eeac 	.word	0x0800eeac
 80014d8:	0800dcf8 	.word	0x0800dcf8
 80014dc:	0800dee0 	.word	0x0800dee0
 80014e0:	0800df10 	.word	0x0800df10
 80014e4:	0800df4c 	.word	0x0800df4c

080014e8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	330b      	adds	r3, #11
 800150c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3302      	adds	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d146      	bne.n	80015aa <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 800151c:	4836      	ldr	r0, [pc, #216]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 800151e:	f008 faa9 	bl	8009a74 <DbgTraceGetFileName>
 8001522:	4601      	mov	r1, r0
 8001524:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
 8001528:	4a34      	ldr	r2, [pc, #208]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 800152a:	4835      	ldr	r0, [pc, #212]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 800152c:	f00b fc4e 	bl	800cdcc <iprintf>
 8001530:	4834      	ldr	r0, [pc, #208]	; (8001604 <APPE_SysEvtReadyProcessing+0x11c>)
 8001532:	f00b fcb9 	bl	800cea8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001536:	f7ff fc43 	bl	8000dc0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800153a:	230f      	movs	r3, #15
 800153c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800153e:	237f      	movs	r3, #127	; 0x7f
 8001540:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001542:	f7ff fd83 	bl	800104c <LL_DBGMCU_GetRevisionID>
 8001546:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001548:	482b      	ldr	r0, [pc, #172]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 800154a:	f008 fa93 	bl	8009a74 <DbgTraceGetFileName>
 800154e:	4601      	mov	r1, r0
 8001550:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 8001554:	4a29      	ldr	r2, [pc, #164]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 8001556:	482a      	ldr	r0, [pc, #168]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 8001558:	f00b fc38 	bl	800cdcc <iprintf>
 800155c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800155e:	482a      	ldr	r0, [pc, #168]	; (8001608 <APPE_SysEvtReadyProcessing+0x120>)
 8001560:	f00b fc34 	bl	800cdcc <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	b29b      	uxth	r3, r3
 8001568:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800156a:	f7ff fd61 	bl	8001030 <LL_DBGMCU_GetDeviceID>
 800156e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001570:	4821      	ldr	r0, [pc, #132]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 8001572:	f008 fa7f 	bl	8009a74 <DbgTraceGetFileName>
 8001576:	4601      	mov	r1, r0
 8001578:	f240 13eb 	movw	r3, #491	; 0x1eb
 800157c:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 800157e:	4820      	ldr	r0, [pc, #128]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 8001580:	f00b fc24 	bl	800cdcc <iprintf>
 8001584:	6a39      	ldr	r1, [r7, #32]
 8001586:	4821      	ldr	r0, [pc, #132]	; (800160c <APPE_SysEvtReadyProcessing+0x124>)
 8001588:	f00b fc20 	bl	800cdcc <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	b29b      	uxth	r3, r3
 8001590:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	4618      	mov	r0, r3
 8001598:	f007 fc8c 	bl	8008eb4 <SHCI_C2_Config>

    APP_BLE_Init();
 800159c:	f009 f854 	bl	800a648 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80015a0:	2100      	movs	r1, #0
 80015a2:	2001      	movs	r0, #1
 80015a4:	f00b f8e2 	bl	800c76c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80015a8:	e022      	b.n	80015f0 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d110      	bne.n	80015d4 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 80015b4:	f008 fa5e 	bl	8009a74 <DbgTraceGetFileName>
 80015b8:	4601      	mov	r1, r0
 80015ba:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 80015c0:	480f      	ldr	r0, [pc, #60]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 80015c2:	f00b fc03 	bl	800cdcc <iprintf>
 80015c6:	4812      	ldr	r0, [pc, #72]	; (8001610 <APPE_SysEvtReadyProcessing+0x128>)
 80015c8:	f00b fc00 	bl	800cdcc <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
  return;
 80015d2:	e00d      	b.n	80015f0 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 80015d6:	f008 fa4d 	bl	8009a74 <DbgTraceGetFileName>
 80015da:	4601      	mov	r1, r0
 80015dc:	f240 13ff 	movw	r3, #511	; 0x1ff
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 80015e4:	f00b fbf2 	bl	800cdcc <iprintf>
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <APPE_SysEvtReadyProcessing+0x12c>)
 80015ea:	f00b fbef 	bl	800cdcc <iprintf>
  return;
 80015ee:	bf00      	nop
}
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	0800dce0 	.word	0x0800dce0
 80015fc:	0800eec0 	.word	0x0800eec0
 8001600:	0800dcf8 	.word	0x0800dcf8
 8001604:	0800df84 	.word	0x0800df84
 8001608:	0800dfa0 	.word	0x0800dfa0
 800160c:	0800dfc4 	.word	0x0800dfc4
 8001610:	0800dfe4 	.word	0x0800dfe4
 8001614:	0800e018 	.word	0x0800e018

08001618 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f001 ffd8 	bl	80035d4 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d00a      	beq.n	8001648 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001632:	f001 ffe7 	bl	8003604 <HAL_GetTickFreq>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4413      	add	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001640:	e002      	b.n	8001648 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001642:	f7ff fd11 	bl	8001068 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001646:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001648:	f001 ffc4 	bl	80035d4 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f4      	bhi.n	8001642 <HAL_Delay+0x2a>
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001666:	f04f 30ff 	mov.w	r0, #4294967295
 800166a:	f00b f8af 	bl	800c7cc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}

08001672 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001676:	bf00      	nop
}
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800168a:	f04f 30ff 	mov.w	r0, #4294967295
 800168e:	f00b f89d 	bl	800c7cc <UTIL_SEQ_Run>
  return;
 8001692:	bf00      	nop
}
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80016a2:	2100      	movs	r1, #0
 80016a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016a8:	f00b f9ae 	bl	800ca08 <UTIL_SEQ_SetTask>
  return;
 80016ac:	bf00      	nop
}
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80016bc:	2002      	movs	r0, #2
 80016be:	f00b fa0f 	bl	800cae0 <UTIL_SEQ_SetEvt>
  return;
 80016c2:	bf00      	nop
}
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80016d2:	2002      	movs	r0, #2
 80016d4:	f00b fa24 	bl	800cb20 <UTIL_SEQ_WaitEvt>
  return;
 80016d8:	bf00      	nop
}
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f0:	d014      	beq.n	800171c <HAL_GPIO_EXTI_Callback+0x3c>
 80016f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f6:	dc14      	bgt.n	8001722 <HAL_GPIO_EXTI_Callback+0x42>
 80016f8:	2b10      	cmp	r3, #16
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_EXTI_Callback+0x2a>
 80016fc:	2b10      	cmp	r3, #16
 80016fe:	dc10      	bgt.n	8001722 <HAL_GPIO_EXTI_Callback+0x42>
 8001700:	2b01      	cmp	r3, #1
 8001702:	d005      	beq.n	8001710 <HAL_GPIO_EXTI_Callback+0x30>
 8001704:	2b02      	cmp	r3, #2
 8001706:	d006      	beq.n	8001716 <HAL_GPIO_EXTI_Callback+0x36>
    case HALL_SENSOR_Pin:
    	APP_BLE_Key_Hall_Sensor_Action();
    	break;

    default:
      break;
 8001708:	e00b      	b.n	8001722 <HAL_GPIO_EXTI_Callback+0x42>
     APP_BLE_Key_Button1_Action();
 800170a:	f009 fb45 	bl	800ad98 <APP_BLE_Key_Button1_Action>
      break; 
 800170e:	e009      	b.n	8001724 <HAL_GPIO_EXTI_Callback+0x44>
      APP_BLE_Key_Button2_Action();
 8001710:	f009 fb48 	bl	800ada4 <APP_BLE_Key_Button2_Action>
      break; 
 8001714:	e006      	b.n	8001724 <HAL_GPIO_EXTI_Callback+0x44>
      APP_BLE_Key_Button3_Action();
 8001716:	f009 fb4b 	bl	800adb0 <APP_BLE_Key_Button3_Action>
      break;
 800171a:	e003      	b.n	8001724 <HAL_GPIO_EXTI_Callback+0x44>
    	APP_BLE_Key_Hall_Sensor_Action();
 800171c:	f009 fb4e 	bl	800adbc <APP_BLE_Key_Hall_Sensor_Action>
    	break;
 8001720:	e000      	b.n	8001724 <HAL_GPIO_EXTI_Callback+0x44>
      break;
 8001722:	bf00      	nop

  }
  return;
 8001724:	bf00      	nop
}
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <Red_On>:
	sscanf(array, "%hd", &i);
	return i;
}

void Red_On()
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	2102      	movs	r1, #2
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <Red_On+0x14>)
 8001736:	f002 fdf9 	bl	800432c <HAL_GPIO_WritePin>
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	48000400 	.word	0x48000400

08001744 <Green_On>:
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
}

void Green_On()
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2101      	movs	r1, #1
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <Green_On+0x14>)
 800174e:	f002 fded 	bl	800432c <HAL_GPIO_WritePin>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	48000400 	.word	0x48000400

0800175c <Green_Off>:

void Green_Off()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	2101      	movs	r1, #1
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <Green_Off+0x14>)
 8001766:	f002 fde1 	bl	800432c <HAL_GPIO_WritePin>
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	48000400 	.word	0x48000400

08001774 <Blue_On>:

void Blue_On()
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2120      	movs	r1, #32
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <Blue_On+0x14>)
 800177e:	f002 fdd5 	bl	800432c <HAL_GPIO_WritePin>
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	48000400 	.word	0x48000400

0800178c <Blue_Off>:

void Blue_Off()
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001790:	2200      	movs	r2, #0
 8001792:	2120      	movs	r1, #32
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <Blue_Off+0x14>)
 8001796:	f002 fdc9 	bl	800432c <HAL_GPIO_WritePin>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	48000400 	.word	0x48000400

080017a4 <LL_EXTI_EnableIT_0_31>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80017ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017b2:	4905      	ldr	r1, [pc, #20]	; (80017c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	58000800 	.word	0x58000800

080017cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4904      	ldr	r1, [pc, #16]	; (80017ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]

}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	58000800 	.word	0x58000800

080017f0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <ReadRtcSsrValue+0x3c>)
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <ReadRtcSsrValue+0x3c>)
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	b29b      	uxth	r3, r3
 8001804:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001806:	e005      	b.n	8001814 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <ReadRtcSsrValue+0x3c>)
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	b29b      	uxth	r3, r3
 8001812:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d1f5      	bne.n	8001808 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800181c:	683b      	ldr	r3, [r7, #0]
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40002800 	.word	0x40002800

08001830 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001840:	79ba      	ldrb	r2, [r7, #6]
 8001842:	491d      	ldr	r1, [pc, #116]	; (80018b8 <LinkTimerAfter+0x88>)
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	3315      	adds	r3, #21
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	2b06      	cmp	r3, #6
 8001858:	d009      	beq.n	800186e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	4916      	ldr	r1, [pc, #88]	; (80018b8 <LinkTimerAfter+0x88>)
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	3314      	adds	r3, #20
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	4911      	ldr	r1, [pc, #68]	; (80018b8 <LinkTimerAfter+0x88>)
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	3315      	adds	r3, #21
 800187e:	7bfa      	ldrb	r2, [r7, #15]
 8001880:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <LinkTimerAfter+0x88>)
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	3314      	adds	r3, #20
 8001892:	79ba      	ldrb	r2, [r7, #6]
 8001894:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001896:	79ba      	ldrb	r2, [r7, #6]
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <LinkTimerAfter+0x88>)
 800189a:	4613      	mov	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	3315      	adds	r3, #21
 80018a6:	79fa      	ldrb	r2, [r7, #7]
 80018a8:	701a      	strb	r2, [r3, #0]

  return;
 80018aa:	bf00      	nop
}
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200000fc 	.word	0x200000fc

080018bc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	460a      	mov	r2, r1
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	4613      	mov	r3, r2
 80018ca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80018cc:	4b29      	ldr	r3, [pc, #164]	; (8001974 <LinkTimerBefore+0xb8>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	79ba      	ldrb	r2, [r7, #6]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d032      	beq.n	800193e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80018d8:	79ba      	ldrb	r2, [r7, #6]
 80018da:	4927      	ldr	r1, [pc, #156]	; (8001978 <LinkTimerBefore+0xbc>)
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	3314      	adds	r3, #20
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	4922      	ldr	r1, [pc, #136]	; (8001978 <LinkTimerBefore+0xbc>)
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	3315      	adds	r3, #21
 80018fc:	79fa      	ldrb	r2, [r7, #7]
 80018fe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001900:	79fa      	ldrb	r2, [r7, #7]
 8001902:	491d      	ldr	r1, [pc, #116]	; (8001978 <LinkTimerBefore+0xbc>)
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	3315      	adds	r3, #21
 8001910:	79ba      	ldrb	r2, [r7, #6]
 8001912:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	4918      	ldr	r1, [pc, #96]	; (8001978 <LinkTimerBefore+0xbc>)
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	3314      	adds	r3, #20
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001928:	79ba      	ldrb	r2, [r7, #6]
 800192a:	4913      	ldr	r1, [pc, #76]	; (8001978 <LinkTimerBefore+0xbc>)
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	3314      	adds	r3, #20
 8001938:	79fa      	ldrb	r2, [r7, #7]
 800193a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800193c:	e014      	b.n	8001968 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	490d      	ldr	r1, [pc, #52]	; (8001978 <LinkTimerBefore+0xbc>)
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	3315      	adds	r3, #21
 800194e:	79ba      	ldrb	r2, [r7, #6]
 8001950:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001952:	79ba      	ldrb	r2, [r7, #6]
 8001954:	4908      	ldr	r1, [pc, #32]	; (8001978 <LinkTimerBefore+0xbc>)
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	3314      	adds	r3, #20
 8001962:	79fa      	ldrb	r2, [r7, #7]
 8001964:	701a      	strb	r2, [r3, #0]
  return;
 8001966:	bf00      	nop
}
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	2000018c 	.word	0x2000018c
 8001978:	200000fc 	.word	0x200000fc

0800197c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001986:	4b4e      	ldr	r3, [pc, #312]	; (8001ac0 <linkTimer+0x144>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b06      	cmp	r3, #6
 800198e:	d118      	bne.n	80019c2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <linkTimer+0x144>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <linkTimer+0x148>)
 8001998:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800199a:	4a49      	ldr	r2, [pc, #292]	; (8001ac0 <linkTimer+0x144>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80019a0:	79fa      	ldrb	r2, [r7, #7]
 80019a2:	4949      	ldr	r1, [pc, #292]	; (8001ac8 <linkTimer+0x14c>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	3315      	adds	r3, #21
 80019b0:	2206      	movs	r2, #6
 80019b2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80019b4:	4b45      	ldr	r3, [pc, #276]	; (8001acc <linkTimer+0x150>)
 80019b6:	f04f 32ff 	mov.w	r2, #4294967295
 80019ba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	81fb      	strh	r3, [r7, #14]
 80019c0:	e078      	b.n	8001ab4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80019c2:	f000 f909 	bl	8001bd8 <ReturnTimeElapsed>
 80019c6:	4603      	mov	r3, r0
 80019c8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80019ca:	79fa      	ldrb	r2, [r7, #7]
 80019cc:	493e      	ldr	r1, [pc, #248]	; (8001ac8 <linkTimer+0x14c>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	3308      	adds	r3, #8
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	89fb      	ldrh	r3, [r7, #14]
 80019de:	79fa      	ldrb	r2, [r7, #7]
 80019e0:	4419      	add	r1, r3
 80019e2:	4839      	ldr	r0, [pc, #228]	; (8001ac8 <linkTimer+0x14c>)
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4403      	add	r3, r0
 80019ee:	3308      	adds	r3, #8
 80019f0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80019f2:	79fa      	ldrb	r2, [r7, #7]
 80019f4:	4934      	ldr	r1, [pc, #208]	; (8001ac8 <linkTimer+0x14c>)
 80019f6:	4613      	mov	r3, r2
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	3308      	adds	r3, #8
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <linkTimer+0x144>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4a2e      	ldr	r2, [pc, #184]	; (8001ac8 <linkTimer+0x14c>)
 8001a10:	460b      	mov	r3, r1
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	440b      	add	r3, r1
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d337      	bcc.n	8001a94 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <linkTimer+0x144>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001a2a:	7b7a      	ldrb	r2, [r7, #13]
 8001a2c:	4926      	ldr	r1, [pc, #152]	; (8001ac8 <linkTimer+0x14c>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	3315      	adds	r3, #21
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a3e:	e013      	b.n	8001a68 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001a40:	7b7a      	ldrb	r2, [r7, #13]
 8001a42:	4921      	ldr	r1, [pc, #132]	; (8001ac8 <linkTimer+0x14c>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	440b      	add	r3, r1
 8001a4e:	3315      	adds	r3, #21
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001a54:	7b7a      	ldrb	r2, [r7, #13]
 8001a56:	491c      	ldr	r1, [pc, #112]	; (8001ac8 <linkTimer+0x14c>)
 8001a58:	4613      	mov	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	3315      	adds	r3, #21
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a68:	7b3b      	ldrb	r3, [r7, #12]
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d00b      	beq.n	8001a86 <linkTimer+0x10a>
 8001a6e:	7b3a      	ldrb	r2, [r7, #12]
 8001a70:	4915      	ldr	r1, [pc, #84]	; (8001ac8 <linkTimer+0x14c>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	440b      	add	r3, r1
 8001a7c:	3308      	adds	r3, #8
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d2dc      	bcs.n	8001a40 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001a86:	7b7a      	ldrb	r2, [r7, #13]
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fecf 	bl	8001830 <LinkTimerAfter>
 8001a92:	e00f      	b.n	8001ab4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <linkTimer+0x144>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff0c 	bl	80018bc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <linkTimer+0x144>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <linkTimer+0x148>)
 8001aac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001aae:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <linkTimer+0x144>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001ab4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000018c 	.word	0x2000018c
 8001ac4:	2000018d 	.word	0x2000018d
 8001ac8:	200000fc 	.word	0x200000fc
 8001acc:	20000190 	.word	0x20000190

08001ad0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	460a      	mov	r2, r1
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001ae0:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <UnlinkTimer+0xf8>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d111      	bne.n	8001b10 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <UnlinkTimer+0xf8>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <UnlinkTimer+0xfc>)
 8001af4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001af6:	79fa      	ldrb	r2, [r7, #7]
 8001af8:	4935      	ldr	r1, [pc, #212]	; (8001bd0 <UnlinkTimer+0x100>)
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	440b      	add	r3, r1
 8001b04:	3315      	adds	r3, #21
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <UnlinkTimer+0xf8>)
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e03e      	b.n	8001b8e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001b10:	79fa      	ldrb	r2, [r7, #7]
 8001b12:	492f      	ldr	r1, [pc, #188]	; (8001bd0 <UnlinkTimer+0x100>)
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3314      	adds	r3, #20
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001b24:	79fa      	ldrb	r2, [r7, #7]
 8001b26:	492a      	ldr	r1, [pc, #168]	; (8001bd0 <UnlinkTimer+0x100>)
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	440b      	add	r3, r1
 8001b32:	3315      	adds	r3, #21
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001b38:	79f9      	ldrb	r1, [r7, #7]
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	4824      	ldr	r0, [pc, #144]	; (8001bd0 <UnlinkTimer+0x100>)
 8001b3e:	460b      	mov	r3, r1
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	440b      	add	r3, r1
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4403      	add	r3, r0
 8001b48:	3315      	adds	r3, #21
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2d8      	uxtb	r0, r3
 8001b4e:	4920      	ldr	r1, [pc, #128]	; (8001bd0 <UnlinkTimer+0x100>)
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	3315      	adds	r3, #21
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b60:	7bbb      	ldrb	r3, [r7, #14]
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d013      	beq.n	8001b8e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001b66:	79f9      	ldrb	r1, [r7, #7]
 8001b68:	7bba      	ldrb	r2, [r7, #14]
 8001b6a:	4819      	ldr	r0, [pc, #100]	; (8001bd0 <UnlinkTimer+0x100>)
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	440b      	add	r3, r1
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4403      	add	r3, r0
 8001b76:	3314      	adds	r3, #20
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b2d8      	uxtb	r0, r3
 8001b7c:	4914      	ldr	r1, [pc, #80]	; (8001bd0 <UnlinkTimer+0x100>)
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	440b      	add	r3, r1
 8001b88:	3314      	adds	r3, #20
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	490f      	ldr	r1, [pc, #60]	; (8001bd0 <UnlinkTimer+0x100>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	330c      	adds	r3, #12
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <UnlinkTimer+0xf8>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b06      	cmp	r3, #6
 8001baa:	d107      	bne.n	8001bbc <UnlinkTimer+0xec>
 8001bac:	79bb      	ldrb	r3, [r7, #6]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d104      	bne.n	8001bbc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <UnlinkTimer+0x104>)
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  return;
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
}
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	2000018c 	.word	0x2000018c
 8001bcc:	2000018d 	.word	0x2000018d
 8001bd0:	200000fc 	.word	0x200000fc
 8001bd4:	20000190 	.word	0x20000190

08001bd8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <ReturnTimeElapsed+0x70>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be6:	d026      	beq.n	8001c36 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001be8:	f7ff fe02 	bl	80017f0 <ReadRtcSsrValue>
 8001bec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <ReturnTimeElapsed+0x70>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d805      	bhi.n	8001c04 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <ReturnTimeElapsed+0x70>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	e00a      	b.n	8001c1a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <ReturnTimeElapsed+0x74>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <ReturnTimeElapsed+0x70>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <ReturnTimeElapsed+0x78>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <ReturnTimeElapsed+0x7c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	40d3      	lsrs	r3, r2
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	e001      	b.n	8001c3a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	b29b      	uxth	r3, r3
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000190 	.word	0x20000190
 8001c4c:	20000198 	.word	0x20000198
 8001c50:	20000196 	.word	0x20000196
 8001c54:	20000195 	.word	0x20000195

08001c58 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d108      	bne.n	8001c7a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001c68:	f7ff fdc2 	bl	80017f0 <ReadRtcSsrValue>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <RestartWakeupCounter+0x9c>)
 8001c70:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c72:	2003      	movs	r0, #3
 8001c74:	f001 fe5b 	bl	800392e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001c78:	e039      	b.n	8001cee <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d803      	bhi.n	8001c88 <RestartWakeupCounter+0x30>
 8001c80:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <RestartWakeupCounter+0xa0>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d002      	beq.n	8001c8e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c8e:	bf00      	nop
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <RestartWakeupCounter+0xa4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f8      	beq.n	8001c90 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <RestartWakeupCounter+0xa4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <RestartWakeupCounter+0xa4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001cae:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <RestartWakeupCounter+0xa8>)
 8001cb2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cb6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f001 fe46 	bl	800394a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <RestartWakeupCounter+0xac>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	0c1b      	lsrs	r3, r3, #16
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	490e      	ldr	r1, [pc, #56]	; (8001d04 <RestartWakeupCounter+0xac>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001cce:	f7ff fd8f 	bl	80017f0 <ReadRtcSsrValue>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <RestartWakeupCounter+0x9c>)
 8001cd6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <RestartWakeupCounter+0xa4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <RestartWakeupCounter+0xa4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ce6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001ce8:	f3af 8000 	nop.w
  return ;
 8001cec:	bf00      	nop
}
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000190 	.word	0x20000190
 8001cf8:	20000195 	.word	0x20000195
 8001cfc:	200003c4 	.word	0x200003c4
 8001d00:	58000800 	.word	0x58000800
 8001d04:	40002800 	.word	0x40002800

08001d08 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d0e:	4b45      	ldr	r3, [pc, #276]	; (8001e24 <RescheduleTimerList+0x11c>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1a:	d107      	bne.n	8001d2c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d1c:	bf00      	nop
 8001d1e:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <RescheduleTimerList+0x120>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f8      	bne.n	8001d1e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001d2c:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <RescheduleTimerList+0x120>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <RescheduleTimerList+0x120>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d3a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <RescheduleTimerList+0x124>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	493a      	ldr	r1, [pc, #232]	; (8001e30 <RescheduleTimerList+0x128>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	3308      	adds	r3, #8
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001d56:	f7ff ff3f 	bl	8001bd8 <ReturnTimeElapsed>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d205      	bcs.n	8001d72 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <RescheduleTimerList+0x12c>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e04d      	b.n	8001e0e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <RescheduleTimerList+0x130>)
 8001d76:	8812      	ldrh	r2, [r2, #0]
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d906      	bls.n	8001d92 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001d84:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <RescheduleTimerList+0x130>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <RescheduleTimerList+0x12c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	e03d      	b.n	8001e0e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <RescheduleTimerList+0x12c>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001da2:	e034      	b.n	8001e0e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	4922      	ldr	r1, [pc, #136]	; (8001e30 <RescheduleTimerList+0x128>)
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	3308      	adds	r3, #8
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d20a      	bcs.n	8001dd2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	491c      	ldr	r1, [pc, #112]	; (8001e30 <RescheduleTimerList+0x128>)
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	3308      	adds	r3, #8
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	e013      	b.n	8001dfa <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	4916      	ldr	r1, [pc, #88]	; (8001e30 <RescheduleTimerList+0x128>)
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	3308      	adds	r3, #8
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	1ac9      	subs	r1, r1, r3
 8001dea:	4811      	ldr	r0, [pc, #68]	; (8001e30 <RescheduleTimerList+0x128>)
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4403      	add	r3, r0
 8001df6:	3308      	adds	r3, #8
 8001df8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	490c      	ldr	r1, [pc, #48]	; (8001e30 <RescheduleTimerList+0x128>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	3315      	adds	r3, #21
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	2b06      	cmp	r3, #6
 8001e12:	d1c7      	bne.n	8001da4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001e14:	89bb      	ldrh	r3, [r7, #12]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff1e 	bl	8001c58 <RestartWakeupCounter>

  return ;
 8001e1c:	bf00      	nop
}
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40002800 	.word	0x40002800
 8001e28:	200003c4 	.word	0x200003c4
 8001e2c:	2000018c 	.word	0x2000018c
 8001e30:	200000fc 	.word	0x200000fc
 8001e34:	20000194 	.word	0x20000194
 8001e38:	2000019a 	.word	0x2000019a

08001e3c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e42:	f3ef 8310 	mrs	r3, PRIMASK
 8001e46:	617b      	str	r3, [r7, #20]
  return(result);
 8001e48:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e50:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	22ca      	movs	r2, #202	; 0xca
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
 8001e58:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2253      	movs	r2, #83	; 0x53
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001e60:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	4b54      	ldr	r3, [pc, #336]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001e70:	4b52      	ldr	r3, [pc, #328]	; (8001fbc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001e78:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e7c:	4950      	ldr	r1, [pc, #320]	; (8001fc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	330c      	adds	r3, #12
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d16e      	bne.n	8001f70 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001e92:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e96:	494a      	ldr	r1, [pc, #296]	; (8001fc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001ea6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001eaa:	4945      	ldr	r1, [pc, #276]	; (8001fc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3310      	adds	r3, #16
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d04c      	beq.n	8001f60 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001ec6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001eca:	493d      	ldr	r1, [pc, #244]	; (8001fc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	330d      	adds	r3, #13
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d124      	bne.n	8001f2a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fdf2 	bl	8001ad0 <UnlinkTimer>
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f383 8810 	msr	PRIMASK, r3
}
 8001ef6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001ef8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001efc:	4930      	ldr	r1, [pc, #192]	; (8001fc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001efe:	4613      	mov	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	440b      	add	r3, r1
 8001f08:	3304      	adds	r3, #4
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fa32 	bl	800237c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	22ca      	movs	r2, #202	; 0xca
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2253      	movs	r2, #83	; 0x53
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
 8001f28:	e012      	b.n	8001f50 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f383 8810 	msr	PRIMASK, r3
}
 8001f34:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001f36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f99a 	bl	8002274 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	22ca      	movs	r2, #202	; 0xca
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2253      	movs	r2, #83	; 0x53
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001f50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	4619      	mov	r1, r3
 8001f58:	69b8      	ldr	r0, [r7, #24]
 8001f5a:	f000 fa95 	bl	8002488 <HW_TS_RTC_Int_AppNot>
 8001f5e:	e022      	b.n	8001fa6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001f60:	f7ff fed2 	bl	8001d08 <RescheduleTimerList>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f383 8810 	msr	PRIMASK, r3
}
 8001f6e:	e01a      	b.n	8001fa6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f70:	bf00      	nop
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f8      	beq.n	8001f72 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f90:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001f94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f383 8810 	msr	PRIMASK, r3
}
 8001fa4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	22ff      	movs	r2, #255	; 0xff
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001fae:	bf00      	nop
}
 8001fb0:	3728      	adds	r7, #40	; 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200003c4 	.word	0x200003c4
 8001fbc:	2000018c 	.word	0x2000018c
 8001fc0:	200000fc 	.word	0x200000fc
 8001fc4:	20000194 	.word	0x20000194
 8001fc8:	58000800 	.word	0x58000800

08001fcc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fd8:	4b5e      	ldr	r3, [pc, #376]	; (8002154 <HW_TS_Init+0x188>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	22ca      	movs	r2, #202	; 0xca
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24
 8001fe0:	4b5c      	ldr	r3, [pc, #368]	; (8002154 <HW_TS_Init+0x188>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2253      	movs	r2, #83	; 0x53
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001fe8:	4b5b      	ldr	r3, [pc, #364]	; (8002158 <HW_TS_Init+0x18c>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a5a      	ldr	r2, [pc, #360]	; (8002158 <HW_TS_Init+0x18c>)
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001ff4:	4b58      	ldr	r3, [pc, #352]	; (8002158 <HW_TS_Init+0x18c>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f1c3 0304 	rsb	r3, r3, #4
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4b55      	ldr	r3, [pc, #340]	; (800215c <HW_TS_Init+0x190>)
 8002008:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800200a:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HW_TS_Init+0x18c>)
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002012:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002016:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	fa92 f2a2 	rbit	r2, r2
 800201e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	2a00      	cmp	r2, #0
 8002028:	d101      	bne.n	800202e <HW_TS_Init+0x62>
  {
    return 32U;
 800202a:	2220      	movs	r2, #32
 800202c:	e003      	b.n	8002036 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	40d3      	lsrs	r3, r2
 8002038:	b2db      	uxtb	r3, r3
 800203a:	3301      	adds	r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b48      	ldr	r3, [pc, #288]	; (8002160 <HW_TS_Init+0x194>)
 8002040:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002042:	4b45      	ldr	r3, [pc, #276]	; (8002158 <HW_TS_Init+0x18c>)
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	b29b      	uxth	r3, r3
 8002048:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800204c:	b29b      	uxth	r3, r3
 800204e:	3301      	adds	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b44      	ldr	r3, [pc, #272]	; (8002164 <HW_TS_Init+0x198>)
 8002054:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002056:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HW_TS_Init+0x198>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	3b01      	subs	r3, #1
 800205c:	4a40      	ldr	r2, [pc, #256]	; (8002160 <HW_TS_Init+0x194>)
 800205e:	7812      	ldrb	r2, [r2, #0]
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002068:	4a3c      	ldr	r2, [pc, #240]	; (800215c <HW_TS_Init+0x190>)
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	40d3      	lsrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002076:	4293      	cmp	r3, r2
 8002078:	d904      	bls.n	8002084 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800207a:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <HW_TS_Init+0x19c>)
 800207c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	e003      	b.n	800208c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	b29a      	uxth	r2, r3
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HW_TS_Init+0x19c>)
 800208a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800208c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002090:	f7ff fb9c 	bl	80017cc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002094:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002098:	f7ff fb84 	bl	80017a4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d13d      	bne.n	800211e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80020a2:	4b32      	ldr	r3, [pc, #200]	; (800216c <HW_TS_Init+0x1a0>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HW_TS_Init+0x1a4>)
 80020aa:	f04f 32ff 	mov.w	r2, #4294967295
 80020ae:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	77fb      	strb	r3, [r7, #31]
 80020b4:	e00c      	b.n	80020d0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80020b6:	7ffa      	ldrb	r2, [r7, #31]
 80020b8:	492e      	ldr	r1, [pc, #184]	; (8002174 <HW_TS_Init+0x1a8>)
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	330c      	adds	r3, #12
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020ca:	7ffb      	ldrb	r3, [r7, #31]
 80020cc:	3301      	adds	r3, #1
 80020ce:	77fb      	strb	r3, [r7, #31]
 80020d0:	7ffb      	ldrb	r3, [r7, #31]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d9ef      	bls.n	80020b6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HW_TS_Init+0x1ac>)
 80020d8:	2206      	movs	r2, #6
 80020da:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HW_TS_Init+0x188>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HW_TS_Init+0x188>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ea:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HW_TS_Init+0x188>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HW_TS_Init+0x188>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020fc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <HW_TS_Init+0x1b0>)
 8002100:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002104:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002106:	2003      	movs	r0, #3
 8002108:	f001 fc1f 	bl	800394a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HW_TS_Init+0x188>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HW_TS_Init+0x188>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	e009      	b.n	8002132 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <HW_TS_Init+0x188>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800212c:	2003      	movs	r0, #3
 800212e:	f001 fbfe 	bl	800392e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HW_TS_Init+0x188>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	22ff      	movs	r2, #255	; 0xff
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800213a:	2200      	movs	r2, #0
 800213c:	2103      	movs	r1, #3
 800213e:	2003      	movs	r0, #3
 8002140:	f001 fbb3 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002144:	2003      	movs	r0, #3
 8002146:	f001 fbca 	bl	80038de <HAL_NVIC_EnableIRQ>

  return;
 800214a:	bf00      	nop
}
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200003c4 	.word	0x200003c4
 8002158:	40002800 	.word	0x40002800
 800215c:	20000195 	.word	0x20000195
 8002160:	20000196 	.word	0x20000196
 8002164:	20000198 	.word	0x20000198
 8002168:	2000019a 	.word	0x2000019a
 800216c:	20000194 	.word	0x20000194
 8002170:	20000190 	.word	0x20000190
 8002174:	200000fc 	.word	0x200000fc
 8002178:	2000018c 	.word	0x2000018c
 800217c:	58000800 	.word	0x58000800

08002180 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002180:	b480      	push	{r7}
 8002182:	b08b      	sub	sp, #44	; 0x2c
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002196:	f3ef 8310 	mrs	r3, PRIMASK
 800219a:	61fb      	str	r3, [r7, #28]
  return(result);
 800219c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800219e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80021a0:	b672      	cpsid	i
}
 80021a2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80021a4:	e004      	b.n	80021b0 <HW_TS_Create+0x30>
  {
    loop++;
 80021a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021aa:	3301      	adds	r3, #1
 80021ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80021b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d80c      	bhi.n	80021d2 <HW_TS_Create+0x52>
 80021b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021bc:	492c      	ldr	r1, [pc, #176]	; (8002270 <HW_TS_Create+0xf0>)
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	330c      	adds	r3, #12
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1e9      	bne.n	80021a6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d038      	beq.n	800224c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80021da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021de:	4924      	ldr	r1, [pc, #144]	; (8002270 <HW_TS_Create+0xf0>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	330c      	adds	r3, #12
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f383 8810 	msr	PRIMASK, r3
}
 80021fa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80021fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002200:	491b      	ldr	r1, [pc, #108]	; (8002270 <HW_TS_Create+0xf0>)
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	3310      	adds	r3, #16
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002212:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002216:	4916      	ldr	r1, [pc, #88]	; (8002270 <HW_TS_Create+0xf0>)
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	330d      	adds	r3, #13
 8002224:	79fa      	ldrb	r2, [r7, #7]
 8002226:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002228:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800222c:	4910      	ldr	r1, [pc, #64]	; (8002270 <HW_TS_Create+0xf0>)
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002242:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002244:	2300      	movs	r3, #0
 8002246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800224a:	e008      	b.n	800225e <HW_TS_Create+0xde>
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f383 8810 	msr	PRIMASK, r3
}
 8002256:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002258:	2301      	movs	r3, #1
 800225a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800225e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002262:	4618      	mov	r0, r3
 8002264:	372c      	adds	r7, #44	; 0x2c
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	200000fc 	.word	0x200000fc

08002274 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800227e:	f3ef 8310 	mrs	r3, PRIMASK
 8002282:	60fb      	str	r3, [r7, #12]
  return(result);
 8002284:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002286:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800228c:	2003      	movs	r0, #3
 800228e:	f001 fb34 	bl	80038fa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HW_TS_Stop+0xf0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	22ca      	movs	r2, #202	; 0xca
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
 800229a:	4b32      	ldr	r3, [pc, #200]	; (8002364 <HW_TS_Stop+0xf0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2253      	movs	r2, #83	; 0x53
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	4930      	ldr	r1, [pc, #192]	; (8002368 <HW_TS_Stop+0xf4>)
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	330c      	adds	r3, #12
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d142      	bne.n	8002340 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fc06 	bl	8001ad0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80022c4:	4b29      	ldr	r3, [pc, #164]	; (800236c <HW_TS_Stop+0xf8>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b06      	cmp	r3, #6
 80022ce:	d12f      	bne.n	8002330 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <HW_TS_Stop+0xfc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022dc:	d107      	bne.n	80022ee <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80022de:	bf00      	nop
 80022e0:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HW_TS_Stop+0xf0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f8      	bne.n	80022e0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HW_TS_Stop+0xf0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HW_TS_Stop+0xf0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022fc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80022fe:	bf00      	nop
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HW_TS_Stop+0xf0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f8      	beq.n	8002300 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <HW_TS_Stop+0xf0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HW_TS_Stop+0xf0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800231e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002320:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HW_TS_Stop+0x100>)
 8002322:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002326:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002328:	2003      	movs	r0, #3
 800232a:	f001 fb0e 	bl	800394a <HAL_NVIC_ClearPendingIRQ>
 800232e:	e007      	b.n	8002340 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HW_TS_Stop+0x104>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	7cfa      	ldrb	r2, [r7, #19]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800233c:	f7ff fce4 	bl	8001d08 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HW_TS_Stop+0xf0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	22ff      	movs	r2, #255	; 0xff
 8002346:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002348:	2003      	movs	r0, #3
 800234a:	f001 fac8 	bl	80038de <HAL_NVIC_EnableIRQ>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f383 8810 	msr	PRIMASK, r3
}
 8002358:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800235a:	bf00      	nop
}
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200003c4 	.word	0x200003c4
 8002368:	200000fc 	.word	0x200000fc
 800236c:	2000018c 	.word	0x2000018c
 8002370:	40002800 	.word	0x40002800
 8002374:	58000800 	.word	0x58000800
 8002378:	2000018d 	.word	0x2000018d

0800237c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002388:	79fa      	ldrb	r2, [r7, #7]
 800238a:	493b      	ldr	r1, [pc, #236]	; (8002478 <HW_TS_Start+0xfc>)
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	330c      	adds	r3, #12
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d103      	bne.n	80023a8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff66 	bl	8002274 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a8:	f3ef 8310 	mrs	r3, PRIMASK
 80023ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80023ae:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80023b2:	b672      	cpsid	i
}
 80023b4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80023b6:	2003      	movs	r0, #3
 80023b8:	f001 fa9f 	bl	80038fa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023bc:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HW_TS_Start+0x100>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	22ca      	movs	r2, #202	; 0xca
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HW_TS_Start+0x100>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2253      	movs	r2, #83	; 0x53
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80023cc:	79fa      	ldrb	r2, [r7, #7]
 80023ce:	492a      	ldr	r1, [pc, #168]	; (8002478 <HW_TS_Start+0xfc>)
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	440b      	add	r3, r1
 80023da:	330c      	adds	r3, #12
 80023dc:	2202      	movs	r2, #2
 80023de:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80023e0:	79fa      	ldrb	r2, [r7, #7]
 80023e2:	4925      	ldr	r1, [pc, #148]	; (8002478 <HW_TS_Start+0xfc>)
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	3308      	adds	r3, #8
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80023f4:	79fa      	ldrb	r2, [r7, #7]
 80023f6:	4920      	ldr	r1, [pc, #128]	; (8002478 <HW_TS_Start+0xfc>)
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	440b      	add	r3, r1
 8002402:	3304      	adds	r3, #4
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fab6 	bl	800197c <linkTimer>
 8002410:	4603      	mov	r3, r0
 8002412:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HW_TS_Start+0x104>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HW_TS_Start+0x108>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	7c7a      	ldrb	r2, [r7, #17]
 8002422:	429a      	cmp	r2, r3
 8002424:	d002      	beq.n	800242c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002426:	f7ff fc6f 	bl	8001d08 <RescheduleTimerList>
 800242a:	e013      	b.n	8002454 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800242c:	79fa      	ldrb	r2, [r7, #7]
 800242e:	4912      	ldr	r1, [pc, #72]	; (8002478 <HW_TS_Start+0xfc>)
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	3308      	adds	r3, #8
 800243c:	6819      	ldr	r1, [r3, #0]
 800243e:	8a7b      	ldrh	r3, [r7, #18]
 8002440:	79fa      	ldrb	r2, [r7, #7]
 8002442:	1ac9      	subs	r1, r1, r3
 8002444:	480c      	ldr	r0, [pc, #48]	; (8002478 <HW_TS_Start+0xfc>)
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4403      	add	r3, r0
 8002450:	3308      	adds	r3, #8
 8002452:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <HW_TS_Start+0x100>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	22ff      	movs	r2, #255	; 0xff
 800245a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800245c:	2003      	movs	r0, #3
 800245e:	f001 fa3e 	bl	80038de <HAL_NVIC_EnableIRQ>
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f383 8810 	msr	PRIMASK, r3
}
 800246c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800246e:	bf00      	nop
}
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200000fc 	.word	0x200000fc
 800247c:	200003c4 	.word	0x200003c4
 8002480:	2000018c 	.word	0x2000018c
 8002484:	2000018d 	.word	0x2000018d

08002488 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	460b      	mov	r3, r1
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4798      	blx	r3

  return;
 800249a:	bf00      	nop
}
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	4603      	mov	r3, r0
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	4613      	mov	r3, r2
 80024b4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80024ba:	2300      	movs	r3, #0
 80024bc:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10e      	bne.n	80024e2 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80024c4:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HW_UART_Transmit_DMA+0x80>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HW_UART_Transmit_DMA+0x84>)
 80024cc:	4a17      	ldr	r2, [pc, #92]	; (800252c <HW_UART_Transmit_DMA+0x88>)
 80024ce:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80024d0:	89bb      	ldrh	r3, [r7, #12]
 80024d2:	461a      	mov	r2, r3
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	4814      	ldr	r0, [pc, #80]	; (8002528 <HW_UART_Transmit_DMA+0x84>)
 80024d8:	f004 f830 	bl	800653c <HAL_UART_Transmit_DMA>
 80024dc:	4603      	mov	r3, r0
 80024de:	75fb      	strb	r3, [r7, #23]
            break;
 80024e0:	e000      	b.n	80024e4 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80024e2:	bf00      	nop
    }

    switch (hal_status)
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d816      	bhi.n	8002518 <HW_UART_Transmit_DMA+0x74>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HW_UART_Transmit_DMA+0x4c>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	08002501 	.word	0x08002501
 80024f4:	08002507 	.word	0x08002507
 80024f8:	0800250d 	.word	0x0800250d
 80024fc:	08002513 	.word	0x08002513
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002500:	2300      	movs	r3, #0
 8002502:	75bb      	strb	r3, [r7, #22]
            break;
 8002504:	e009      	b.n	800251a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002506:	2301      	movs	r3, #1
 8002508:	75bb      	strb	r3, [r7, #22]
            break;
 800250a:	e006      	b.n	800251a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800250c:	2302      	movs	r3, #2
 800250e:	75bb      	strb	r3, [r7, #22]
            break;
 8002510:	e003      	b.n	800251a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002512:	2303      	movs	r3, #3
 8002514:	75bb      	strb	r3, [r7, #22]
            break;
 8002516:	e000      	b.n	800251a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002518:	bf00      	nop
    }

    return hw_status;
 800251a:	7dbb      	ldrb	r3, [r7, #22]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	2000019c 	.word	0x2000019c
 8002528:	20000270 	.word	0x20000270
 800252c:	40013800 	.word	0x40013800

08002530 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_UART_TxCpltCallback+0x34>)
 8002540:	429a      	cmp	r2, r3
 8002542:	d107      	bne.n	8002554 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_UART_TxCpltCallback+0x38>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_UART_TxCpltCallback+0x38>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4798      	blx	r3
            }
            break;
 8002552:	e001      	b.n	8002558 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002554:	bf00      	nop
 8002556:	e000      	b.n	800255a <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002558:	bf00      	nop
    }

    return;
 800255a:	bf00      	nop
}
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40013800 	.word	0x40013800
 8002568:	2000019c 	.word	0x2000019c

0800256c <LL_RCC_LSE_SetDriveCapability>:
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	f023 0218 	bic.w	r2, r3, #24
 8002580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_AHB1_GRP1_EnableClock>:
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80025a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80025b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025bc:	68fb      	ldr	r3, [r7, #12]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <LL_AHB2_GRP1_EnableClock>:
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80025d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4313      	orrs	r3, r2
 80025e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002600:	f000 ff7a 	bl	80034f8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002604:	f7fe fd70 	bl	80010e8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002608:	f000 f816 	bl	8002638 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800260c:	f000 f870 	bl	80026f0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002610:	f000 f88e 	bl	8002730 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002614:	f000 f990 	bl	8002938 <MX_GPIO_Init>
  MX_DMA_Init();
 8002618:	f000 f974 	bl	8002904 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800261c:	f000 f89c 	bl	8002758 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8002620:	f000 f93c 	bl	800289c <MX_RTC_Init>
  MX_RF_Init();
 8002624:	f000 f932 	bl	800288c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  SevenSegment_Off();
 8002628:	f000 fb42 	bl	8002cb0 <SevenSegment_Off>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800262c:	f7fe fd6a 	bl	8001104 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002630:	f7ff f817 	bl	8001662 <MX_APPE_Process>
 8002634:	e7fc      	b.n	8002630 <main+0x34>
	...

08002638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b09a      	sub	sp, #104	; 0x68
 800263c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800263e:	f107 0320 	add.w	r3, r7, #32
 8002642:	2248      	movs	r2, #72	; 0x48
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f00a fd0e 	bl	800d068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	615a      	str	r2, [r3, #20]
 800265c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800265e:	f001 ff3f 	bl	80044e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002662:	2000      	movs	r0, #0
 8002664:	f7ff ff82 	bl	800256c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <SystemClock_Config+0xb4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002670:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <SystemClock_Config+0xb4>)
 8002672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <SystemClock_Config+0xb4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002684:	2307      	movs	r3, #7
 8002686:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800268e:	2301      	movs	r3, #1
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002698:	2340      	movs	r3, #64	; 0x40
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800269c:	2300      	movs	r3, #0
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a0:	f107 0320 	add.w	r3, r7, #32
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 faaf 	bl	8004c08 <HAL_RCC_OscConfig>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80026b0:	f000 f9fe 	bl	8002ab0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80026b4:	236f      	movs	r3, #111	; 0x6f
 80026b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80026b8:	2302      	movs	r3, #2
 80026ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2101      	movs	r1, #1
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 fe0b 	bl	80052f0 <HAL_RCC_ClockConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80026e0:	f000 f9e6 	bl	8002ab0 <Error_Handler>
  }
}
 80026e4:	bf00      	nop
 80026e6:	3768      	adds	r7, #104	; 0x68
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	58000400 	.word	0x58000400

080026f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b094      	sub	sp, #80	; 0x50
 80026f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f6:	463b      	mov	r3, r7
 80026f8:	2250      	movs	r2, #80	; 0x50
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f00a fcb3 	bl	800d068 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002702:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002706:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800270c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800270e:	2302      	movs	r3, #2
 8002710:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002712:	2310      	movs	r3, #16
 8002714:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002716:	463b      	mov	r3, r7
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fa26 	bl	8005b6a <HAL_RCCEx_PeriphCLKConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002724:	f000 f9c4 	bl	8002ab0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002728:	bf00      	nop
 800272a:	3750      	adds	r7, #80	; 0x50
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <MX_IPCC_Init+0x20>)
 8002736:	4a07      	ldr	r2, [pc, #28]	; (8002754 <MX_IPCC_Init+0x24>)
 8002738:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <MX_IPCC_Init+0x20>)
 800273c:	f001 fe4a 	bl	80043d4 <HAL_IPCC_Init>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002746:	f000 f9b3 	bl	8002ab0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200001a0 	.word	0x200001a0
 8002754:	58000c00 	.word	0x58000c00

08002758 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 800275e:	4a23      	ldr	r2, [pc, #140]	; (80027ec <MX_LPUART1_UART_Init+0x94>)
 8002760:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 8002764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002768:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 800277e:	220c      	movs	r2, #12
 8002780:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002782:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002788:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 800278a:	2200      	movs	r2, #0
 800278c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800278e:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 8002790:	2200      	movs	r2, #0
 8002792:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 8002796:	2200      	movs	r2, #0
 8002798:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 800279c:	2200      	movs	r2, #0
 800279e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80027a0:	4811      	ldr	r0, [pc, #68]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 80027a2:	f003 fe7b 	bl	800649c <HAL_UART_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80027ac:	f000 f980 	bl	8002ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027b0:	2100      	movs	r1, #0
 80027b2:	480d      	ldr	r0, [pc, #52]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 80027b4:	f005 f841 	bl	800783a <HAL_UARTEx_SetTxFifoThreshold>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027be:	f000 f977 	bl	8002ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c2:	2100      	movs	r1, #0
 80027c4:	4808      	ldr	r0, [pc, #32]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 80027c6:	f005 f876 	bl	80078b6 <HAL_UARTEx_SetRxFifoThreshold>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027d0:	f000 f96e 	bl	8002ab0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80027d4:	4804      	ldr	r0, [pc, #16]	; (80027e8 <MX_LPUART1_UART_Init+0x90>)
 80027d6:	f004 fff7 	bl	80077c8 <HAL_UARTEx_DisableFifoMode>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027e0:	f000 f966 	bl	8002ab0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200001dc 	.word	0x200001dc
 80027ec:	40008000 	.word	0x40008000

080027f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027f4:	4b23      	ldr	r3, [pc, #140]	; (8002884 <MX_USART1_UART_Init+0x94>)
 80027f6:	4a24      	ldr	r2, [pc, #144]	; (8002888 <MX_USART1_UART_Init+0x98>)
 80027f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027fa:	4b22      	ldr	r3, [pc, #136]	; (8002884 <MX_USART1_UART_Init+0x94>)
 80027fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <MX_USART1_UART_Init+0x94>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <MX_USART1_UART_Init+0x94>)
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <MX_USART1_UART_Init+0x94>)
 8002810:	2200      	movs	r2, #0
 8002812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002814:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <MX_USART1_UART_Init+0x94>)
 8002816:	220c      	movs	r2, #12
 8002818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <MX_USART1_UART_Init+0x94>)
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002820:	4b18      	ldr	r3, [pc, #96]	; (8002884 <MX_USART1_UART_Init+0x94>)
 8002822:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002826:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <MX_USART1_UART_Init+0x94>)
 800282a:	2200      	movs	r2, #0
 800282c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <MX_USART1_UART_Init+0x94>)
 8002830:	2200      	movs	r2, #0
 8002832:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <MX_USART1_UART_Init+0x94>)
 8002836:	2200      	movs	r2, #0
 8002838:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800283a:	4812      	ldr	r0, [pc, #72]	; (8002884 <MX_USART1_UART_Init+0x94>)
 800283c:	f003 fe2e 	bl	800649c <HAL_UART_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002846:	f000 f933 	bl	8002ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800284a:	2100      	movs	r1, #0
 800284c:	480d      	ldr	r0, [pc, #52]	; (8002884 <MX_USART1_UART_Init+0x94>)
 800284e:	f004 fff4 	bl	800783a <HAL_UARTEx_SetTxFifoThreshold>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002858:	f000 f92a 	bl	8002ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800285c:	2100      	movs	r1, #0
 800285e:	4809      	ldr	r0, [pc, #36]	; (8002884 <MX_USART1_UART_Init+0x94>)
 8002860:	f005 f829 	bl	80078b6 <HAL_UARTEx_SetRxFifoThreshold>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800286a:	f000 f921 	bl	8002ab0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800286e:	4805      	ldr	r0, [pc, #20]	; (8002884 <MX_USART1_UART_Init+0x94>)
 8002870:	f004 ffaa 	bl	80077c8 <HAL_UARTEx_DisableFifoMode>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800287a:	f000 f919 	bl	8002ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000270 	.word	0x20000270
 8002888:	40013800 	.word	0x40013800

0800288c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <MX_RTC_Init+0x60>)
 80028a2:	4a17      	ldr	r2, [pc, #92]	; (8002900 <MX_RTC_Init+0x64>)
 80028a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <MX_RTC_Init+0x60>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <MX_RTC_Init+0x60>)
 80028ae:	220f      	movs	r2, #15
 80028b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <MX_RTC_Init+0x60>)
 80028b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80028b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <MX_RTC_Init+0x60>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_RTC_Init+0x60>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <MX_RTC_Init+0x60>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <MX_RTC_Init+0x60>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028d2:	480a      	ldr	r0, [pc, #40]	; (80028fc <MX_RTC_Init+0x60>)
 80028d4:	f003 fbd0 	bl	8006078 <HAL_RTC_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80028de:	f000 f8e7 	bl	8002ab0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_RTC_Init+0x60>)
 80028e8:	f003 fcc6 	bl	8006278 <HAL_RTCEx_SetWakeUpTimer_IT>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80028f2:	f000 f8dd 	bl	8002ab0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200003c4 	.word	0x200003c4
 8002900:	40002800 	.word	0x40002800

08002904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002908:	2004      	movs	r0, #4
 800290a:	f7ff fe45 	bl	8002598 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800290e:	2001      	movs	r0, #1
 8002910:	f7ff fe42 	bl	8002598 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8002914:	2200      	movs	r2, #0
 8002916:	210f      	movs	r1, #15
 8002918:	200b      	movs	r0, #11
 800291a:	f000 ffc6 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800291e:	200b      	movs	r0, #11
 8002920:	f000 ffdd 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002924:	2200      	movs	r2, #0
 8002926:	210f      	movs	r1, #15
 8002928:	200e      	movs	r0, #14
 800292a:	f000 ffbe 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800292e:	200e      	movs	r0, #14
 8002930:	f000 ffd5 	bl	80038de <HAL_NVIC_EnableIRQ>

}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}

08002938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800294c:	2004      	movs	r0, #4
 800294e:	f7ff fe3c 	bl	80025ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002952:	2001      	movs	r0, #1
 8002954:	f7ff fe39 	bl	80025ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002958:	2002      	movs	r0, #2
 800295a:	f7ff fe36 	bl	80025ca <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800295e:	2008      	movs	r0, #8
 8002960:	f7ff fe33 	bl	80025ca <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Solenoid_Pin|digit1_Pin|digit2_Pin|digit3_Pin
 8002964:	2200      	movs	r2, #0
 8002966:	f240 11e1 	movw	r1, #481	; 0x1e1
 800296a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800296e:	f001 fcdd 	bl	800432c <HAL_GPIO_WritePin>
                          |digit4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segmentG_Pin|segmentA_Pin, GPIO_PIN_SET);
 8002972:	2201      	movs	r2, #1
 8002974:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297c:	f001 fcd6 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002980:	2200      	movs	r2, #0
 8002982:	2123      	movs	r1, #35	; 0x23
 8002984:	4847      	ldr	r0, [pc, #284]	; (8002aa4 <MX_GPIO_Init+0x16c>)
 8002986:	f001 fcd1 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, segmentF_Pin|segmentE_Pin|segmentD_Pin|segmentC_Pin, GPIO_PIN_SET);
 800298a:	2201      	movs	r2, #1
 800298c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002990:	4844      	ldr	r0, [pc, #272]	; (8002aa4 <MX_GPIO_Init+0x16c>)
 8002992:	f001 fccb 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(segmentB_GPIO_Port, segmentB_Pin, GPIO_PIN_SET);
 8002996:	2201      	movs	r2, #1
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	4843      	ldr	r0, [pc, #268]	; (8002aa8 <MX_GPIO_Init+0x170>)
 800299c:	f001 fcc6 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Solenoid_Pin */
  GPIO_InitStruct.Pin = Solenoid_Pin;
 80029a0:	2301      	movs	r3, #1
 80029a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a4:	2301      	movs	r3, #1
 80029a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029a8:	2301      	movs	r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Solenoid_GPIO_Port, &GPIO_InitStruct);
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	4619      	mov	r1, r3
 80029b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b8:	f001 fb48 	bl	800404c <HAL_GPIO_Init>

  /*Configure GPIO pins : segmentG_Pin digit1_Pin digit2_Pin digit3_Pin
                           digit4_Pin segmentA_Pin */
  GPIO_InitStruct.Pin = segmentG_Pin|digit1_Pin|digit2_Pin|digit3_Pin
 80029bc:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 80029c0:	607b      	str	r3, [r7, #4]
                          |digit4_Pin|segmentA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c2:	2301      	movs	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	4619      	mov	r1, r3
 80029d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d6:	f001 fb39 	bl	800404c <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = HALL_SENSOR_Pin;
 80029da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(HALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029f2:	f001 fb2b 	bl	800404c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029f6:	2310      	movs	r3, #16
 80029f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a00:	2301      	movs	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	4619      	mov	r1, r3
 8002a08:	4827      	ldr	r0, [pc, #156]	; (8002aa8 <MX_GPIO_Init+0x170>)
 8002a0a:	f001 fb1f 	bl	800404c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin segmentF_Pin segmentE_Pin
                           segmentD_Pin segmentC_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|segmentF_Pin|segmentE_Pin
 8002a0e:	f24f 0323 	movw	r3, #61475	; 0xf023
 8002a12:	607b      	str	r3, [r7, #4]
                          |segmentD_Pin|segmentC_Pin|LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a14:	2301      	movs	r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	4619      	mov	r1, r3
 8002a24:	481f      	ldr	r0, [pc, #124]	; (8002aa4 <MX_GPIO_Init+0x16c>)
 8002a26:	f001 fb11 	bl	800404c <HAL_GPIO_Init>

  /*Configure GPIO pin : segmentB_Pin */
  GPIO_InitStruct.Pin = segmentB_Pin;
 8002a2a:	2340      	movs	r3, #64	; 0x40
 8002a2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(segmentB_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	481a      	ldr	r0, [pc, #104]	; (8002aa8 <MX_GPIO_Init+0x170>)
 8002a40:	f001 fb04 	bl	800404c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002a44:	2303      	movs	r3, #3
 8002a46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4815      	ldr	r0, [pc, #84]	; (8002aac <MX_GPIO_Init+0x174>)
 8002a58:	f001 faf8 	bl	800404c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2006      	movs	r0, #6
 8002a62:	f000 ff22 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a66:	2006      	movs	r0, #6
 8002a68:	f000 ff39 	bl	80038de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2100      	movs	r1, #0
 8002a70:	2007      	movs	r0, #7
 8002a72:	f000 ff1a 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a76:	2007      	movs	r0, #7
 8002a78:	f000 ff31 	bl	80038de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2100      	movs	r1, #0
 8002a80:	200a      	movs	r0, #10
 8002a82:	f000 ff12 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002a86:	200a      	movs	r0, #10
 8002a88:	f000 ff29 	bl	80038de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	2017      	movs	r0, #23
 8002a92:	f000 ff0a 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a96:	2017      	movs	r0, #23
 8002a98:	f000 ff21 	bl	80038de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a9c:	bf00      	nop
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	48000400 	.word	0x48000400
 8002aa8:	48000800 	.word	0x48000800
 8002aac:	48000c00 	.word	0x48000c00

08002ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <SevenSegment_UpdateAllDigits>:
		0x7f,
		0x67
};

// Call this function as often as possible, each digit only flashes for a few ms
void SevenSegment_UpdateAllDigits(uint32_t value){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	uint8_t tmp_digit1 = value/1000;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a45      	ldr	r2, [pc, #276]	; (8002be0 <SevenSegment_UpdateAllDigits+0x120>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	099b      	lsrs	r3, r3, #6
 8002ad2:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp_digit2 = ((value/100)%10);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a43      	ldr	r2, [pc, #268]	; (8002be4 <SevenSegment_UpdateAllDigits+0x124>)
 8002ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8002adc:	0959      	lsrs	r1, r3, #5
 8002ade:	4b42      	ldr	r3, [pc, #264]	; (8002be8 <SevenSegment_UpdateAllDigits+0x128>)
 8002ae0:	fba3 2301 	umull	r2, r3, r3, r1
 8002ae4:	08da      	lsrs	r2, r3, #3
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	1aca      	subs	r2, r1, r3
 8002af0:	4613      	mov	r3, r2
 8002af2:	73bb      	strb	r3, [r7, #14]
	uint8_t tmp_digit3 = ((value/10)%10);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a3c      	ldr	r2, [pc, #240]	; (8002be8 <SevenSegment_UpdateAllDigits+0x128>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	08d9      	lsrs	r1, r3, #3
 8002afe:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <SevenSegment_UpdateAllDigits+0x128>)
 8002b00:	fba3 2301 	umull	r2, r3, r3, r1
 8002b04:	08da      	lsrs	r2, r3, #3
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	1aca      	subs	r2, r1, r3
 8002b10:	4613      	mov	r3, r2
 8002b12:	737b      	strb	r3, [r7, #13]
	uint8_t tmp_digit4 = (value%10);
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4b34      	ldr	r3, [pc, #208]	; (8002be8 <SevenSegment_UpdateAllDigits+0x128>)
 8002b18:	fba3 2301 	umull	r2, r3, r3, r1
 8002b1c:	08da      	lsrs	r2, r3, #3
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	1aca      	subs	r2, r1, r3
 8002b28:	4613      	mov	r3, r2
 8002b2a:	733b      	strb	r3, [r7, #12]

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit1]);
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	4a2f      	ldr	r2, [pc, #188]	; (8002bec <SevenSegment_UpdateAllDigits+0x12c>)
 8002b30:	5cd3      	ldrb	r3, [r2, r3]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f85c 	bl	8002bf0 <SevenSegment_UpdateDigit>
	D1_LOW;
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b40:	f001 fbf4 	bl	800432c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002b44:	2002      	movs	r0, #2
 8002b46:	f7fe fd67 	bl	8001618 <HAL_Delay>
	D1_HIGH;
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	2120      	movs	r1, #32
 8002b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b52:	f001 fbeb 	bl	800432c <HAL_GPIO_WritePin>

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit2]);
 8002b56:	7bbb      	ldrb	r3, [r7, #14]
 8002b58:	4a24      	ldr	r2, [pc, #144]	; (8002bec <SevenSegment_UpdateAllDigits+0x12c>)
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 f847 	bl	8002bf0 <SevenSegment_UpdateDigit>
	D2_LOW;
 8002b62:	2200      	movs	r2, #0
 8002b64:	2140      	movs	r1, #64	; 0x40
 8002b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6a:	f001 fbdf 	bl	800432c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002b6e:	2002      	movs	r0, #2
 8002b70:	f7fe fd52 	bl	8001618 <HAL_Delay>
	D2_HIGH;
 8002b74:	2201      	movs	r2, #1
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b7c:	f001 fbd6 	bl	800432c <HAL_GPIO_WritePin>

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit3]);
 8002b80:	7b7b      	ldrb	r3, [r7, #13]
 8002b82:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <SevenSegment_UpdateAllDigits+0x12c>)
 8002b84:	5cd3      	ldrb	r3, [r2, r3]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f832 	bl	8002bf0 <SevenSegment_UpdateDigit>
	D3_LOW;
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b94:	f001 fbca 	bl	800432c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002b98:	2002      	movs	r0, #2
 8002b9a:	f7fe fd3d 	bl	8001618 <HAL_Delay>
	D3_HIGH;
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba6:	f001 fbc1 	bl	800432c <HAL_GPIO_WritePin>

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit4]);
 8002baa:	7b3b      	ldrb	r3, [r7, #12]
 8002bac:	4a0f      	ldr	r2, [pc, #60]	; (8002bec <SevenSegment_UpdateAllDigits+0x12c>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f81d 	bl	8002bf0 <SevenSegment_UpdateDigit>
	D4_LOW;
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bc0:	f001 fbb4 	bl	800432c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	f7fe fd27 	bl	8001618 <HAL_Delay>
	D4_HIGH;
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd4:	f001 fbaa 	bl	800432c <HAL_GPIO_WritePin>
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	10624dd3 	.word	0x10624dd3
 8002be4:	51eb851f 	.word	0x51eb851f
 8002be8:	cccccccd 	.word	0xcccccccd
 8002bec:	20000008 	.word	0x20000008

08002bf0 <SevenSegment_UpdateDigit>:

void SevenSegment_UpdateDigit(uint8_t number){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(segmentA_GPIO_Port, segmentA_Pin, ((number>>0)&0x01));
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0c:	f001 fb8e 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentB_GPIO_Port, segmentB_Pin, ((number>>1)&0x01));
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2140      	movs	r1, #64	; 0x40
 8002c20:	4821      	ldr	r0, [pc, #132]	; (8002ca8 <SevenSegment_UpdateDigit+0xb8>)
 8002c22:	f001 fb83 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentC_GPIO_Port, segmentC_Pin, ((number>>2)&0x01));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c38:	481c      	ldr	r0, [pc, #112]	; (8002cac <SevenSegment_UpdateDigit+0xbc>)
 8002c3a:	f001 fb77 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentD_GPIO_Port, segmentD_Pin, ((number>>3)&0x01));
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c50:	4816      	ldr	r0, [pc, #88]	; (8002cac <SevenSegment_UpdateDigit+0xbc>)
 8002c52:	f001 fb6b 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentE_GPIO_Port, segmentE_Pin, ((number>>4)&0x01));
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c68:	4810      	ldr	r0, [pc, #64]	; (8002cac <SevenSegment_UpdateDigit+0xbc>)
 8002c6a:	f001 fb5f 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentF_GPIO_Port, segmentF_Pin, ((number>>5)&0x01));
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c80:	480a      	ldr	r0, [pc, #40]	; (8002cac <SevenSegment_UpdateDigit+0xbc>)
 8002c82:	f001 fb53 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentG_GPIO_Port, segmentG_Pin, ((number>>6)&0x01));
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	2110      	movs	r1, #16
 8002c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9a:	f001 fb47 	bl	800432c <HAL_GPIO_WritePin>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	48000800 	.word	0x48000800
 8002cac:	48000400 	.word	0x48000400

08002cb0 <SevenSegment_Off>:

void SevenSegment_Off(){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
	// reset segment pins to low/OFF (set to high/ON)
	HAL_GPIO_WritePin(segmentA_GPIO_Port, segmentA_Pin, GPIO_PIN_RESET);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cbe:	f001 fb35 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentB_GPIO_Port, segmentB_Pin, GPIO_PIN_RESET);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2140      	movs	r1, #64	; 0x40
 8002cc6:	481e      	ldr	r0, [pc, #120]	; (8002d40 <SevenSegment_Off+0x90>)
 8002cc8:	f001 fb30 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentC_GPIO_Port, segmentC_Pin, GPIO_PIN_RESET);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cd2:	481c      	ldr	r0, [pc, #112]	; (8002d44 <SevenSegment_Off+0x94>)
 8002cd4:	f001 fb2a 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentD_GPIO_Port, segmentD_Pin, GPIO_PIN_RESET);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cde:	4819      	ldr	r0, [pc, #100]	; (8002d44 <SevenSegment_Off+0x94>)
 8002ce0:	f001 fb24 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentE_GPIO_Port, segmentE_Pin, GPIO_PIN_RESET);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cea:	4816      	ldr	r0, [pc, #88]	; (8002d44 <SevenSegment_Off+0x94>)
 8002cec:	f001 fb1e 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentF_GPIO_Port, segmentF_Pin, GPIO_PIN_RESET);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cf6:	4813      	ldr	r0, [pc, #76]	; (8002d44 <SevenSegment_Off+0x94>)
 8002cf8:	f001 fb18 	bl	800432c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentG_GPIO_Port, segmentG_Pin, GPIO_PIN_RESET);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2110      	movs	r1, #16
 8002d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d04:	f001 fb12 	bl	800432c <HAL_GPIO_WritePin>

	// set all digit (grounds) to high/OFF (reset to low/ON)
	D1_HIGH;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2120      	movs	r1, #32
 8002d0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d10:	f001 fb0c 	bl	800432c <HAL_GPIO_WritePin>
	D2_HIGH;
 8002d14:	2201      	movs	r2, #1
 8002d16:	2140      	movs	r1, #64	; 0x40
 8002d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1c:	f001 fb06 	bl	800432c <HAL_GPIO_WritePin>
	D3_HIGH;
 8002d20:	2201      	movs	r2, #1
 8002d22:	2180      	movs	r1, #128	; 0x80
 8002d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d28:	f001 fb00 	bl	800432c <HAL_GPIO_WritePin>
	D4_HIGH;
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d36:	f001 faf9 	bl	800432c <HAL_GPIO_WritePin>
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	48000800 	.word	0x48000800
 8002d44:	48000400 	.word	0x48000400

08002d48 <Solenoid_Up>:

#include "main.h"
#include "solenoid.h"

void Solenoid_Up()
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Solenoid_GPIO_Port, Solenoid_Pin, GPIO_PIN_SET);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2101      	movs	r1, #1
 8002d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d54:	f001 faea 	bl	800432c <HAL_GPIO_WritePin>
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <Solenoid_Down>:

void Solenoid_Down()
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Solenoid_GPIO_Port, Solenoid_Pin, GPIO_PIN_RESET);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2101      	movs	r1, #1
 8002d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d68:	f001 fae0 	bl	800432c <HAL_GPIO_WritePin>
}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <Launch_Disc_State>:
		return 0;
	}
}

void Launch_Disc_State(uint16_t set_arm_speed)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	80fb      	strh	r3, [r7, #6]
	uint16_t set_motor_speed = Calc_Big_Motor_Speed(set_arm_speed);
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 f841 	bl	8002e04 <Calc_Big_Motor_Speed>
 8002d82:	4603      	mov	r3, r0
 8002d84:	81fb      	strh	r3, [r7, #14]
	uint16_t launch_delay = Calc_Launch_Delay(set_motor_speed);
 8002d86:	89fb      	ldrh	r3, [r7, #14]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f849 	bl	8002e20 <Calc_Launch_Delay>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	81bb      	strh	r3, [r7, #12]

	HAL_Delay(launch_delay);
 8002d92:	89bb      	ldrh	r3, [r7, #12]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fe fc3f 	bl	8001618 <HAL_Delay>
	//Blue_On();
	//HAL_Delay(500);
	//Blue_Off();
	//Green_On();
	Solenoid_Up();
 8002d9a:	f7ff ffd5 	bl	8002d48 <Solenoid_Up>
	//HAL_Delay(500);

	//Green_Off();
	//Red_On();
	//HAL_Delay(launch_delay*LAUNCH_DELAY_DIV); //wait for full rev to confirm launched
	HAL_Delay(1.0/set_arm_speed*60.0*1000.0);
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd fb97 	bl	80004d4 <__aeabi_i2d>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	f04f 0000 	mov.w	r0, #0
 8002dae:	4912      	ldr	r1, [pc, #72]	; (8002df8 <Launch_Disc_State+0x88>)
 8002db0:	f7fd fd24 	bl	80007fc <__aeabi_ddiv>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <Launch_Disc_State+0x8c>)
 8002dc2:	f7fd fbf1 	bl	80005a8 <__aeabi_dmul>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <Launch_Disc_State+0x90>)
 8002dd4:	f7fd fbe8 	bl	80005a8 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	f7fd fdf4 	bl	80009cc <__aeabi_d2uiz>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fc16 	bl	8001618 <HAL_Delay>
	//Red_Off();
	Solenoid_Down();
 8002dec:	f7ff ffb6 	bl	8002d5c <Solenoid_Down>
}
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	3ff00000 	.word	0x3ff00000
 8002dfc:	404e0000 	.word	0x404e0000
 8002e00:	408f4000 	.word	0x408f4000

08002e04 <Calc_Big_Motor_Speed>:

uint16_t Calc_Big_Motor_Speed(uint16_t arm_speed)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	80fb      	strh	r3, [r7, #6]
	return arm_speed * BIG_MOTOR_GEAR_RATIO;
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	b29b      	uxth	r3, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <Calc_Launch_Delay>:

uint16_t Calc_Launch_Delay(uint16_t motor_speed)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]
	uint16_t rev_period = 1000.0/(motor_speed/60.0);
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fb51 	bl	80004d4 <__aeabi_i2d>
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <Calc_Launch_Delay+0x48>)
 8002e38:	f7fd fce0 	bl	80007fc <__aeabi_ddiv>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	f04f 0000 	mov.w	r0, #0
 8002e44:	4909      	ldr	r1, [pc, #36]	; (8002e6c <Calc_Launch_Delay+0x4c>)
 8002e46:	f7fd fcd9 	bl	80007fc <__aeabi_ddiv>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	f7fd fdbb 	bl	80009cc <__aeabi_d2uiz>
 8002e56:	4603      	mov	r3, r0
 8002e58:	81fb      	strh	r3, [r7, #14]
	return rev_period /LAUNCH_DELAY_DIV;
 8002e5a:	89fb      	ldrh	r3, [r7, #14]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	b29b      	uxth	r3, r3
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	404e0000 	.word	0x404e0000
 8002e6c:	408f4000 	.word	0x408f4000

08002e70 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <LL_AHB2_GRP1_EnableClock>:
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_AHB3_GRP1_EnableClock>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_APB1_GRP1_EnableClock>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4013      	ands	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <LL_APB1_GRP2_EnableClock>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_APB2_GRP1_EnableClock>:
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002f90:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f94:	f7ff ff96 	bl	8002ec4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	202e      	movs	r0, #46	; 0x2e
 8002f9e:	f000 fc84 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002fa2:	202e      	movs	r0, #46	; 0x2e
 8002fa4:	f000 fc9b 	bl	80038de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	; (8002ff0 <HAL_IPCC_MspInit+0x44>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d113      	bne.n	8002fe6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002fbe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002fc2:	f7ff ff7f 	bl	8002ec4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	202c      	movs	r0, #44	; 0x2c
 8002fcc:	f000 fc6d 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002fd0:	202c      	movs	r0, #44	; 0x2c
 8002fd2:	f000 fc84 	bl	80038de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	202d      	movs	r0, #45	; 0x2d
 8002fdc:	f000 fc65 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002fe0:	202d      	movs	r0, #45	; 0x2d
 8002fe2:	f000 fc7c 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	58000c00 	.word	0x58000c00

08002ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b0a0      	sub	sp, #128	; 0x80
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800300c:	f107 030c 	add.w	r3, r7, #12
 8003010:	2250      	movs	r2, #80	; 0x50
 8003012:	2100      	movs	r1, #0
 8003014:	4618      	mov	r0, r3
 8003016:	f00a f827 	bl	800d068 <memset>
  if(huart->Instance==LPUART1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a68      	ldr	r2, [pc, #416]	; (80031c0 <HAL_UART_MspInit+0x1cc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d16e      	bne.n	8003102 <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003024:	2302      	movs	r3, #2
 8003026:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003028:	2300      	movs	r3, #0
 800302a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800302c:	f107 030c 	add.w	r3, r7, #12
 8003030:	4618      	mov	r0, r3
 8003032:	f002 fd9a 	bl	8005b6a <HAL_RCCEx_PeriphCLKConfig>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800303c:	f7ff fd38 	bl	8002ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003040:	2001      	movs	r0, #1
 8003042:	f7ff ff71 	bl	8002f28 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	2001      	movs	r0, #1
 8003048:	f7ff ff23 	bl	8002e92 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800304c:	230c      	movs	r3, #12
 800304e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2302      	movs	r3, #2
 8003052:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003058:	2303      	movs	r3, #3
 800305a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800305c:	2308      	movs	r3, #8
 800305e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003060:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003064:	4619      	mov	r1, r3
 8003066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800306a:	f000 ffef 	bl	800404c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800306e:	4b55      	ldr	r3, [pc, #340]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 8003070:	4a55      	ldr	r2, [pc, #340]	; (80031c8 <HAL_UART_MspInit+0x1d4>)
 8003072:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003074:	4b53      	ldr	r3, [pc, #332]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 8003076:	2211      	movs	r2, #17
 8003078:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800307a:	4b52      	ldr	r3, [pc, #328]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 800307c:	2210      	movs	r2, #16
 800307e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003080:	4b50      	ldr	r3, [pc, #320]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 8003082:	2200      	movs	r2, #0
 8003084:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003086:	4b4f      	ldr	r3, [pc, #316]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800308c:	4b4d      	ldr	r3, [pc, #308]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 800308e:	2200      	movs	r2, #0
 8003090:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003092:	4b4c      	ldr	r3, [pc, #304]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003098:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 800309a:	2200      	movs	r2, #0
 800309c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800309e:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80030a4:	4847      	ldr	r0, [pc, #284]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 80030a6:	f000 fc5f 	bl	8003968 <HAL_DMA_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80030b0:	f7ff fcfe 	bl	8002ab0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80030b4:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80030b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80030ba:	2300      	movs	r3, #0
 80030bc:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 80030ca:	2301      	movs	r3, #1
 80030cc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 80030ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030d2:	4619      	mov	r1, r3
 80030d4:	483b      	ldr	r0, [pc, #236]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 80030d6:	f000 ff79 	bl	8003fcc <HAL_DMAEx_ConfigMuxSync>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80030e0:	f7ff fce6 	bl	8002ab0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a37      	ldr	r2, [pc, #220]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 80030e8:	67da      	str	r2, [r3, #124]	; 0x7c
 80030ea:	4a36      	ldr	r2, [pc, #216]	; (80031c4 <HAL_UART_MspInit+0x1d0>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	2100      	movs	r1, #0
 80030f4:	2025      	movs	r0, #37	; 0x25
 80030f6:	f000 fbd8 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80030fa:	2025      	movs	r0, #37	; 0x25
 80030fc:	f000 fbef 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003100:	e05a      	b.n	80031b8 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a31      	ldr	r2, [pc, #196]	; (80031cc <HAL_UART_MspInit+0x1d8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d155      	bne.n	80031b8 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800310c:	2301      	movs	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	4618      	mov	r0, r3
 800311a:	f002 fd26 	bl	8005b6a <HAL_RCCEx_PeriphCLKConfig>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8003124:	f7ff fcc4 	bl	8002ab0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003128:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800312c:	f7ff ff15 	bl	8002f5a <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003130:	2002      	movs	r0, #2
 8003132:	f7ff feae 	bl	8002e92 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003136:	23c0      	movs	r3, #192	; 0xc0
 8003138:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800313e:	2301      	movs	r3, #1
 8003140:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003142:	2303      	movs	r3, #3
 8003144:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003146:	2307      	movs	r3, #7
 8003148:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800314e:	4619      	mov	r1, r3
 8003150:	481f      	ldr	r0, [pc, #124]	; (80031d0 <HAL_UART_MspInit+0x1dc>)
 8003152:	f000 ff7b 	bl	800404c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003156:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 8003158:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <HAL_UART_MspInit+0x1e4>)
 800315a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 800315e:	220f      	movs	r2, #15
 8003160:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003162:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 8003164:	2210      	movs	r2, #16
 8003166:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003168:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800316e:	4b19      	ldr	r3, [pc, #100]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 8003176:	2200      	movs	r2, #0
 8003178:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800317a:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 800317c:	2200      	movs	r2, #0
 800317e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 8003182:	2200      	movs	r2, #0
 8003184:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800318c:	4811      	ldr	r0, [pc, #68]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 800318e:	f000 fbeb 	bl	8003968 <HAL_DMA_Init>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003198:	f7ff fc8a 	bl	8002ab0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 80031a0:	67da      	str	r2, [r3, #124]	; 0x7c
 80031a2:	4a0c      	ldr	r2, [pc, #48]	; (80031d4 <HAL_UART_MspInit+0x1e0>)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031a8:	2200      	movs	r2, #0
 80031aa:	2100      	movs	r1, #0
 80031ac:	2024      	movs	r0, #36	; 0x24
 80031ae:	f000 fb7c 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031b2:	2024      	movs	r0, #36	; 0x24
 80031b4:	f000 fb93 	bl	80038de <HAL_NVIC_EnableIRQ>
}
 80031b8:	bf00      	nop
 80031ba:	3780      	adds	r7, #128	; 0x80
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40008000 	.word	0x40008000
 80031c4:	20000304 	.word	0x20000304
 80031c8:	40020044 	.word	0x40020044
 80031cc:	40013800 	.word	0x40013800
 80031d0:	48000400 	.word	0x48000400
 80031d4:	20000364 	.word	0x20000364
 80031d8:	40020008 	.word	0x40020008

080031dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b096      	sub	sp, #88	; 0x58
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031e4:	f107 0308 	add.w	r3, r7, #8
 80031e8:	2250      	movs	r2, #80	; 0x50
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f009 ff3b 	bl	800d068 <memset>
  if(hrtc->Instance==RTC)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a14      	ldr	r2, [pc, #80]	; (8003248 <HAL_RTC_MspInit+0x6c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d120      	bne.n	800323e <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003200:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003202:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003206:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003208:	f107 0308 	add.w	r3, r7, #8
 800320c:	4618      	mov	r0, r3
 800320e:	f002 fcac 	bl	8005b6a <HAL_RCCEx_PeriphCLKConfig>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003218:	f7ff fc4a 	bl	8002ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800321c:	f7ff fe28 	bl	8002e70 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003220:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003224:	f7ff fe67 	bl	8002ef6 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003228:	2200      	movs	r2, #0
 800322a:	2100      	movs	r1, #0
 800322c:	2003      	movs	r0, #3
 800322e:	f000 fb3c 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003232:	2003      	movs	r0, #3
 8003234:	f000 fb53 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f003 f8d9 	bl	80063f0 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800323e:	bf00      	nop
 8003240:	3758      	adds	r7, #88	; 0x58
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40002800 	.word	0x40002800

0800324c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800325a:	b480      	push	{r7}
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800325e:	e7fe      	b.n	800325e <HardFault_Handler+0x4>

08003260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003264:	e7fe      	b.n	8003264 <MemManage_Handler+0x4>

08003266 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003266:	b480      	push	{r7}
 8003268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800326a:	e7fe      	b.n	800326a <BusFault_Handler+0x4>

0800326c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003270:	e7fe      	b.n	8003270 <UsageFault_Handler+0x4>

08003272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032a0:	f000 f984 	bl	80035ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80032ac:	f7fe fdc6 	bl	8001e3c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80032b8:	2001      	movs	r0, #1
 80032ba:	f001 f84f 	bl	800435c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80032c6:	2002      	movs	r0, #2
 80032c8:	f001 f848 	bl	800435c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80032d4:	2010      	movs	r0, #16
 80032d6:	f001 f841 	bl	800435c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <DMA1_Channel1_IRQHandler+0x10>)
 80032e6:	f000 fd20 	bl	8003d2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000364 	.word	0x20000364

080032f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <DMA1_Channel4_IRQHandler+0x10>)
 80032fa:	f000 fd16 	bl	8003d2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000304 	.word	0x20000304

08003308 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_SENSOR_Pin);
 800330c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003310:	f001 f824 	bl	800435c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}

08003318 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800331c:	4802      	ldr	r0, [pc, #8]	; (8003328 <USART1_IRQHandler+0x10>)
 800331e:	f003 f98d 	bl	800663c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000270 	.word	0x20000270

0800332c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003330:	4802      	ldr	r0, [pc, #8]	; (800333c <LPUART1_IRQHandler+0x10>)
 8003332:	f003 f983 	bl	800663c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200001dc 	.word	0x200001dc

08003340 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003344:	f009 f8c2 	bl	800c4cc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003348:	bf00      	nop
 800334a:	bd80      	pop	{r7, pc}

0800334c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003350:	f009 f8f2 	bl	800c538 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003354:	bf00      	nop
 8003356:	bd80      	pop	{r7, pc}

08003358 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800335c:	f001 f816 	bl	800438c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}

08003364 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	4a07      	ldr	r2, [pc, #28]	; (8003390 <BSP_LED_Off+0x2c>)
 8003372:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <BSP_LED_Off+0x30>)
 800337a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800337e:	2200      	movs	r2, #0
 8003380:	4619      	mov	r1, r3
 8003382:	f000 ffd3 	bl	800432c <HAL_GPIO_WritePin>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000014 	.word	0x20000014
 8003394:	0800eedc 	.word	0x0800eedc

08003398 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800339c:	4b26      	ldr	r3, [pc, #152]	; (8003438 <SystemInit+0xa0>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80033a2:	4b25      	ldr	r3, [pc, #148]	; (8003438 <SystemInit+0xa0>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	4a23      	ldr	r2, [pc, #140]	; (8003438 <SystemInit+0xa0>)
 80033aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80033c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80033ca:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80033cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d6:	4b19      	ldr	r3, [pc, #100]	; (800343c <SystemInit+0xa4>)
 80033d8:	4013      	ands	r3, r2
 80033da:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e8:	f023 0305 	bic.w	r3, r3, #5
 80033ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80033f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003408:	4a0d      	ldr	r2, [pc, #52]	; (8003440 <SystemInit+0xa8>)
 800340a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800340c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003410:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <SystemInit+0xa8>)
 8003412:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	e000ed00 	.word	0xe000ed00
 800343c:	faf6fefb 	.word	0xfaf6fefb
 8003440:	22041000 	.word	0x22041000

08003444 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003444:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003446:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003448:	3304      	adds	r3, #4

0800344a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800344a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800344e:	d3f9      	bcc.n	8003444 <CopyDataInit>
  bx lr
 8003450:	4770      	bx	lr

08003452 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003452:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003454:	3004      	adds	r0, #4

08003456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003456:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003458:	d3fb      	bcc.n	8003452 <FillZerobss>
  bx lr
 800345a:	4770      	bx	lr

0800345c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800345c:	480c      	ldr	r0, [pc, #48]	; (8003490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800345e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003460:	f7ff ff9a 	bl	8003398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003464:	480b      	ldr	r0, [pc, #44]	; (8003494 <LoopForever+0x6>)
 8003466:	490c      	ldr	r1, [pc, #48]	; (8003498 <LoopForever+0xa>)
 8003468:	4a0c      	ldr	r2, [pc, #48]	; (800349c <LoopForever+0xe>)
 800346a:	2300      	movs	r3, #0
 800346c:	f7ff ffed 	bl	800344a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003470:	480b      	ldr	r0, [pc, #44]	; (80034a0 <LoopForever+0x12>)
 8003472:	490c      	ldr	r1, [pc, #48]	; (80034a4 <LoopForever+0x16>)
 8003474:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <LoopForever+0x1a>)
 8003476:	2300      	movs	r3, #0
 8003478:	f7ff ffe7 	bl	800344a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800347c:	480b      	ldr	r0, [pc, #44]	; (80034ac <LoopForever+0x1e>)
 800347e:	490c      	ldr	r1, [pc, #48]	; (80034b0 <LoopForever+0x22>)
 8003480:	2300      	movs	r3, #0
 8003482:	f7ff ffe8 	bl	8003456 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003486:	f009 fe55 	bl	800d134 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800348a:	f7ff f8b7 	bl	80025fc <main>

0800348e <LoopForever>:

LoopForever:
  b LoopForever
 800348e:	e7fe      	b.n	800348e <LoopForever>
  ldr   r0, =_estack
 8003490:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003494:	20000008 	.word	0x20000008
 8003498:	20000090 	.word	0x20000090
 800349c:	0800f0e8 	.word	0x0800f0e8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80034a0:	200301e4 	.word	0x200301e4
 80034a4:	20030a67 	.word	0x20030a67
 80034a8:	0800f1ba 	.word	0x0800f1ba
  INIT_BSS _sbss, _ebss
 80034ac:	200000e0 	.word	0x200000e0
 80034b0:	20001744 	.word	0x20001744

080034b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034b4:	e7fe      	b.n	80034b4 <ADC1_IRQHandler>
	...

080034b8 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6053      	str	r3, [r2, #4]
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	e0042000 	.word	0xe0042000

080034d8 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80034e2:	f043 0302 	orr.w	r3, r3, #2
 80034e6:	6053      	str	r3, [r2, #4]
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	e0042000 	.word	0xe0042000

080034f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_Init+0x3c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <HAL_Init+0x3c>)
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800350e:	2003      	movs	r0, #3
 8003510:	f000 f9c0 	bl	8003894 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003514:	2000      	movs	r0, #0
 8003516:	f000 f80f 	bl	8003538 <HAL_InitTick>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	71fb      	strb	r3, [r7, #7]
 8003524:	e001      	b.n	800352a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003526:	f7ff fd31 	bl	8002f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800352a:	79fb      	ldrb	r3, [r7, #7]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	58004000 	.word	0x58004000

08003538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003544:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <HAL_InitTick+0x6c>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d024      	beq.n	8003596 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800354c:	f002 f87c 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <HAL_InitTick+0x6c>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003560:	fbb2 f3f3 	udiv	r3, r2, r3
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f9d6 	bl	8003916 <HAL_SYSTICK_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10f      	bne.n	8003590 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b0f      	cmp	r3, #15
 8003574:	d809      	bhi.n	800358a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003576:	2200      	movs	r2, #0
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	f000 f994 	bl	80038aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003582:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <HAL_InitTick+0x70>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e007      	b.n	800359a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	e004      	b.n	800359a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
 8003594:	e001      	b.n	800359a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800359a:	7bfb      	ldrb	r3, [r7, #15]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000028 	.word	0x20000028
 80035a8:	20000024 	.word	0x20000024

080035ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_IncTick+0x20>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_IncTick+0x24>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4413      	add	r3, r2
 80035bc:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <HAL_IncTick+0x24>)
 80035be:	6013      	str	r3, [r2, #0]
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000028 	.word	0x20000028
 80035d0:	200003e8 	.word	0x200003e8

080035d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return uwTick;
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_GetTick+0x14>)
 80035da:	681b      	ldr	r3, [r3, #0]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	200003e8 	.word	0x200003e8

080035ec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_GetTickPrio+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000024 	.word	0x20000024

08003604 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003608:	4b03      	ldr	r3, [pc, #12]	; (8003618 <HAL_GetTickFreq+0x14>)
 800360a:	781b      	ldrb	r3, [r3, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20000028 	.word	0x20000028

0800361c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003620:	f7ff ff4a 	bl	80034b8 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 800362c:	f7ff ff54 	bl	80034d8 <LL_DBGMCU_EnableDBGStopMode>
}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}

08003634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003650:	4013      	ands	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800365c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003666:	4a04      	ldr	r2, [pc, #16]	; (8003678 <__NVIC_SetPriorityGrouping+0x44>)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	60d3      	str	r3, [r2, #12]
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <__NVIC_GetPriorityGrouping+0x18>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	f003 0307 	and.w	r3, r3, #7
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	db0b      	blt.n	80036c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	4907      	ldr	r1, [pc, #28]	; (80036d0 <__NVIC_EnableIRQ+0x38>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	2001      	movs	r0, #1
 80036ba:	fa00 f202 	lsl.w	r2, r0, r2
 80036be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000e100 	.word	0xe000e100

080036d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	db12      	blt.n	800370c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	490a      	ldr	r1, [pc, #40]	; (8003718 <__NVIC_DisableIRQ+0x44>)
 80036ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2001      	movs	r0, #1
 80036f6:	fa00 f202 	lsl.w	r2, r0, r2
 80036fa:	3320      	adds	r3, #32
 80036fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003700:	f3bf 8f4f 	dsb	sy
}
 8003704:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003706:	f3bf 8f6f 	isb	sy
}
 800370a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000e100 	.word	0xe000e100

0800371c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	2b00      	cmp	r3, #0
 800372c:	db0c      	blt.n	8003748 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	f003 021f 	and.w	r2, r3, #31
 8003734:	4907      	ldr	r1, [pc, #28]	; (8003754 <__NVIC_SetPendingIRQ+0x38>)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2001      	movs	r0, #1
 800373e:	fa00 f202 	lsl.w	r2, r0, r2
 8003742:	3340      	adds	r3, #64	; 0x40
 8003744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000e100 	.word	0xe000e100

08003758 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	db0c      	blt.n	8003784 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	f003 021f 	and.w	r2, r3, #31
 8003770:	4907      	ldr	r1, [pc, #28]	; (8003790 <__NVIC_ClearPendingIRQ+0x38>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2001      	movs	r0, #1
 800377a:	fa00 f202 	lsl.w	r2, r0, r2
 800377e:	3360      	adds	r3, #96	; 0x60
 8003780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000e100 	.word	0xe000e100

08003794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db0a      	blt.n	80037be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	490c      	ldr	r1, [pc, #48]	; (80037e0 <__NVIC_SetPriority+0x4c>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037bc:	e00a      	b.n	80037d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4908      	ldr	r1, [pc, #32]	; (80037e4 <__NVIC_SetPriority+0x50>)
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3b04      	subs	r3, #4
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	761a      	strb	r2, [r3, #24]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f1c3 0307 	rsb	r3, r3, #7
 8003802:	2b04      	cmp	r3, #4
 8003804:	bf28      	it	cs
 8003806:	2304      	movcs	r3, #4
 8003808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3304      	adds	r3, #4
 800380e:	2b06      	cmp	r3, #6
 8003810:	d902      	bls.n	8003818 <NVIC_EncodePriority+0x30>
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3b03      	subs	r3, #3
 8003816:	e000      	b.n	800381a <NVIC_EncodePriority+0x32>
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	f04f 32ff 	mov.w	r2, #4294967295
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	401a      	ands	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003830:	f04f 31ff 	mov.w	r1, #4294967295
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43d9      	mvns	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	4313      	orrs	r3, r2
         );
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	; 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003860:	d301      	bcc.n	8003866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003862:	2301      	movs	r3, #1
 8003864:	e00f      	b.n	8003886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <SysTick_Config+0x40>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386e:	210f      	movs	r1, #15
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	f7ff ff8e 	bl	8003794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <SysTick_Config+0x40>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <SysTick_Config+0x40>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000e010 	.word	0xe000e010

08003894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff fec9 	bl	8003634 <__NVIC_SetPriorityGrouping>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038b8:	f7ff fee0 	bl	800367c <__NVIC_GetPriorityGrouping>
 80038bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6978      	ldr	r0, [r7, #20]
 80038c4:	f7ff ff90 	bl	80037e8 <NVIC_EncodePriority>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff5f 	bl	8003794 <__NVIC_SetPriority>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4603      	mov	r3, r0
 80038e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fed3 	bl	8003698 <__NVIC_EnableIRQ>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fee3 	bl	80036d4 <__NVIC_DisableIRQ>
}
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ff96 	bl	8003850 <SysTick_Config>
 8003924:	4603      	mov	r3, r0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	4603      	mov	r3, r0
 8003936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff feed 	bl	800371c <__NVIC_SetPendingIRQ>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff fefd 	bl	8003758 <__NVIC_ClearPendingIRQ>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e08e      	b.n	8003a98 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <HAL_DMA_Init+0x138>)
 8003982:	429a      	cmp	r2, r3
 8003984:	d80f      	bhi.n	80039a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <HAL_DMA_Init+0x13c>)
 800398e:	4413      	add	r3, r2
 8003990:	4a45      	ldr	r2, [pc, #276]	; (8003aa8 <HAL_DMA_Init+0x140>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	009a      	lsls	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a42      	ldr	r2, [pc, #264]	; (8003aac <HAL_DMA_Init+0x144>)
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
 80039a4:	e00e      	b.n	80039c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <HAL_DMA_Init+0x148>)
 80039ae:	4413      	add	r3, r2
 80039b0:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <HAL_DMA_Init+0x140>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	009a      	lsls	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a3c      	ldr	r2, [pc, #240]	; (8003ab4 <HAL_DMA_Init+0x14c>)
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80039e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fa74 	bl	8003f04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a24:	d102      	bne.n	8003a2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a34:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003a38:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a42:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d010      	beq.n	8003a6e <HAL_DMA_Init+0x106>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d80c      	bhi.n	8003a6e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fa93 	bl	8003f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a6a:	605a      	str	r2, [r3, #4]
 8003a6c:	e008      	b.n	8003a80 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40020407 	.word	0x40020407
 8003aa4:	bffdfff8 	.word	0xbffdfff8
 8003aa8:	cccccccd 	.word	0xcccccccd
 8003aac:	40020000 	.word	0x40020000
 8003ab0:	bffdfbf8 	.word	0xbffdfbf8
 8003ab4:	40020400 	.word	0x40020400

08003ab8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_DMA_Start_IT+0x20>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e066      	b.n	8003ba6 <HAL_DMA_Start_IT+0xee>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d155      	bne.n	8003b98 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f9b9 	bl	8003e88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 020e 	orr.w	r2, r2, #14
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e00f      	b.n	8003b50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0204 	bic.w	r2, r2, #4
 8003b3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 020a 	orr.w	r2, r2, #10
 8003b4e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d007      	beq.n	8003b6e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f042 0201 	orr.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e005      	b.n	8003ba4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e04f      	b.n	8003c60 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d008      	beq.n	8003bde <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2204      	movs	r2, #4
 8003bd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e040      	b.n	8003c60 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 020e 	bic.w	r2, r2, #14
 8003bec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0201 	bic.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f003 021c 	and.w	r2, r3, #28
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c20:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c2a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00c      	beq.n	8003c4e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c4c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d005      	beq.n	8003c90 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2204      	movs	r2, #4
 8003c88:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
 8003c8e:	e047      	b.n	8003d20 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 020e 	bic.w	r2, r2, #14
 8003c9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	f003 021c 	and.w	r2, r3, #28
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	2101      	movs	r1, #1
 8003cce:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cdc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00c      	beq.n	8003d00 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cf4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cfe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
    }
  }
  return status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d46:	f003 031c 	and.w	r3, r3, #28
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d026      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x7a>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d021      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d107      	bne.n	8003d7e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0204 	bic.w	r2, r2, #4
 8003d7c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	f003 021c 	and.w	r2, r3, #28
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d90:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d071      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003da2:	e06c      	b.n	8003e7e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	f003 031c 	and.w	r3, r3, #28
 8003dac:	2202      	movs	r2, #2
 8003dae:	409a      	lsls	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02e      	beq.n	8003e16 <HAL_DMA_IRQHandler+0xec>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d029      	beq.n	8003e16 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 020a 	bic.w	r2, r2, #10
 8003dde:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f003 021c 	and.w	r2, r3, #28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2102      	movs	r1, #2
 8003df6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d038      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e14:	e033      	b.n	8003e7e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	f003 031c 	and.w	r3, r3, #28
 8003e1e:	2208      	movs	r2, #8
 8003e20:	409a      	lsls	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d02a      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x156>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d025      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 020e 	bic.w	r2, r2, #14
 8003e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	f003 021c 	and.w	r2, r3, #28
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f202 	lsl.w	r2, r1, r2
 8003e56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e7e:	bf00      	nop
 8003e80:	bf00      	nop
}
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e9e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003eb0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f003 021c 	and.w	r2, r3, #28
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d108      	bne.n	8003ee8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ee6:	e007      	b.n	8003ef8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	60da      	str	r2, [r3, #12]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d80a      	bhi.n	8003f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f24:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6493      	str	r3, [r2, #72]	; 0x48
 8003f2c:	e007      	b.n	8003f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	089b      	lsrs	r3, r3, #2
 8003f34:	009a      	lsls	r2, r3, #2
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	3b08      	subs	r3, #8
 8003f46:	4a0c      	ldr	r2, [pc, #48]	; (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f54:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40020407 	.word	0x40020407
 8003f74:	4002081c 	.word	0x4002081c
 8003f78:	cccccccd 	.word	0xcccccccd
 8003f7c:	40020880 	.word	0x40020880

08003f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f90:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003fa4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2201      	movs	r2, #1
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	1000823f 	.word	0x1000823f
 8003fc8:	40020940 	.word	0x40020940

08003fcc <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d12b      	bne.n	800403a <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_DMAEx_ConfigMuxSync+0x24>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e025      	b.n	800403c <HAL_DMAEx_ConfigMuxSync+0x70>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004000:	4013      	ands	r3, r2
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	6811      	ldr	r1, [r2, #0]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	68d2      	ldr	r2, [r2, #12]
 800400a:	3a01      	subs	r2, #1
 800400c:	04d2      	lsls	r2, r2, #19
 800400e:	4311      	orrs	r1, r2
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	6852      	ldr	r2, [r2, #4]
 8004014:	4311      	orrs	r1, r2
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	7a12      	ldrb	r2, [r2, #8]
 800401a:	0412      	lsls	r2, r2, #16
 800401c:	4311      	orrs	r1, r2
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	7a52      	ldrb	r2, [r2, #9]
 8004022:	0252      	lsls	r2, r2, #9
 8004024:	4311      	orrs	r1, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800402a:	430b      	orrs	r3, r1
 800402c:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000fdff 	.word	0xe000fdff

0800404c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800405a:	e14c      	b.n	80042f6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	2101      	movs	r1, #1
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	fa01 f303 	lsl.w	r3, r1, r3
 8004068:	4013      	ands	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 813e 	beq.w	80042f0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d005      	beq.n	800408c <HAL_GPIO_Init+0x40>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d130      	bne.n	80040ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	2203      	movs	r2, #3
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040c2:	2201      	movs	r2, #1
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f003 0201 	and.w	r2, r3, #1
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d017      	beq.n	800412a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	2203      	movs	r2, #3
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	4013      	ands	r3, r2
 8004110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d123      	bne.n	800417e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	08da      	lsrs	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3208      	adds	r2, #8
 800413e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	220f      	movs	r2, #15
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	08da      	lsrs	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3208      	adds	r2, #8
 8004178:	6939      	ldr	r1, [r7, #16]
 800417a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	2203      	movs	r2, #3
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4013      	ands	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 0203 	and.w	r2, r3, #3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 8098 	beq.w	80042f0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80041c0:	4a54      	ldr	r2, [pc, #336]	; (8004314 <HAL_GPIO_Init+0x2c8>)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	089b      	lsrs	r3, r3, #2
 80041c6:	3302      	adds	r3, #2
 80041c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	220f      	movs	r2, #15
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041ea:	d019      	beq.n	8004220 <HAL_GPIO_Init+0x1d4>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a4a      	ldr	r2, [pc, #296]	; (8004318 <HAL_GPIO_Init+0x2cc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_GPIO_Init+0x1d0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a49      	ldr	r2, [pc, #292]	; (800431c <HAL_GPIO_Init+0x2d0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00d      	beq.n	8004218 <HAL_GPIO_Init+0x1cc>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a48      	ldr	r2, [pc, #288]	; (8004320 <HAL_GPIO_Init+0x2d4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d007      	beq.n	8004214 <HAL_GPIO_Init+0x1c8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a47      	ldr	r2, [pc, #284]	; (8004324 <HAL_GPIO_Init+0x2d8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d101      	bne.n	8004210 <HAL_GPIO_Init+0x1c4>
 800420c:	2304      	movs	r3, #4
 800420e:	e008      	b.n	8004222 <HAL_GPIO_Init+0x1d6>
 8004210:	2307      	movs	r3, #7
 8004212:	e006      	b.n	8004222 <HAL_GPIO_Init+0x1d6>
 8004214:	2303      	movs	r3, #3
 8004216:	e004      	b.n	8004222 <HAL_GPIO_Init+0x1d6>
 8004218:	2302      	movs	r3, #2
 800421a:	e002      	b.n	8004222 <HAL_GPIO_Init+0x1d6>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <HAL_GPIO_Init+0x1d6>
 8004220:	2300      	movs	r3, #0
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	f002 0203 	and.w	r2, r2, #3
 8004228:	0092      	lsls	r2, r2, #2
 800422a:	4093      	lsls	r3, r2
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004232:	4938      	ldr	r1, [pc, #224]	; (8004314 <HAL_GPIO_Init+0x2c8>)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	089b      	lsrs	r3, r3, #2
 8004238:	3302      	adds	r3, #2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004240:	4b39      	ldr	r3, [pc, #228]	; (8004328 <HAL_GPIO_Init+0x2dc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	43db      	mvns	r3, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004264:	4a30      	ldr	r2, [pc, #192]	; (8004328 <HAL_GPIO_Init+0x2dc>)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800426a:	4b2f      	ldr	r3, [pc, #188]	; (8004328 <HAL_GPIO_Init+0x2dc>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	43db      	mvns	r3, r3
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4013      	ands	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800428e:	4a26      	ldr	r2, [pc, #152]	; (8004328 <HAL_GPIO_Init+0x2dc>)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004294:	4b24      	ldr	r3, [pc, #144]	; (8004328 <HAL_GPIO_Init+0x2dc>)
 8004296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800429a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	43db      	mvns	r3, r3
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4013      	ands	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042ba:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <HAL_GPIO_Init+0x2dc>)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_GPIO_Init+0x2dc>)
 80042c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042e8:	4a0f      	ldr	r2, [pc, #60]	; (8004328 <HAL_GPIO_Init+0x2dc>)
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	3301      	adds	r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f aeab 	bne.w	800405c <HAL_GPIO_Init+0x10>
  }
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40010000 	.word	0x40010000
 8004318:	48000400 	.word	0x48000400
 800431c:	48000800 	.word	0x48000800
 8004320:	48000c00 	.word	0x48000c00
 8004324:	48001000 	.word	0x48001000
 8004328:	58000800 	.word	0x58000800

0800432c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
 8004338:	4613      	mov	r3, r2
 800433a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800433c:	787b      	ldrb	r3, [r7, #1]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004348:	e002      	b.n	8004350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004366:	4b08      	ldr	r3, [pc, #32]	; (8004388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d006      	beq.n	8004380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004372:	4a05      	ldr	r2, [pc, #20]	; (8004388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd f9b0 	bl	80016e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	58000800 	.word	0x58000800

0800438c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_HSEM_IRQHandler+0x30>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <HAL_HSEM_IRQHandler+0x30>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	43db      	mvns	r3, r3
 80043a0:	4906      	ldr	r1, [pc, #24]	; (80043bc <HAL_HSEM_IRQHandler+0x30>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80043a6:	4a05      	ldr	r2, [pc, #20]	; (80043bc <HAL_HSEM_IRQHandler+0x30>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f807 	bl	80043c0 <HAL_HSEM_FreeCallback>
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	58001500 	.word	0x58001500

080043c0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01e      	beq.n	8004424 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80043e6:	4b13      	ldr	r3, [pc, #76]	; (8004434 <HAL_IPCC_Init+0x60>)
 80043e8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fe fdd8 	bl	8002fac <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80043fc:	68b8      	ldr	r0, [r7, #8]
 80043fe:	f000 f85b 	bl	80044b8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f82c 	bl	800446c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004422:	e001      	b.n	8004428 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	58000c00 	.word	0x58000c00

08004438 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	4613      	mov	r3, r2
 800445e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e00f      	b.n	800449a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	4a0b      	ldr	r2, [pc, #44]	; (80044b0 <IPCC_SetDefaultCallbacks+0x44>)
 8004484:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3306      	adds	r3, #6
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <IPCC_SetDefaultCallbacks+0x48>)
 8004492:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3301      	adds	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b05      	cmp	r3, #5
 800449e:	d9ec      	bls.n	800447a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	08004439 	.word	0x08004439
 80044b4:	08004453 	.word	0x08004453

080044b8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80044cc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	223f      	movs	r2, #63	; 0x3f
 80044d2:	609a      	str	r2, [r3, #8]
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a04      	ldr	r2, [pc, #16]	; (80044fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ee:	6013      	str	r3, [r2, #0]
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	58000400 	.word	0x58000400

08004500 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004504:	4b04      	ldr	r3, [pc, #16]	; (8004518 <HAL_PWREx_GetVoltageRange+0x18>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800450c:	4618      	mov	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	58000400 	.word	0x58000400

0800451c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800452a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800452e:	d101      	bne.n	8004534 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <LL_RCC_HSE_Enable>:
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800454e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004552:	6013      	str	r3, [r2, #0]
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <LL_RCC_HSE_Disable>:
{
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800456c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004570:	6013      	str	r3, [r2, #0]
}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <LL_RCC_HSE_IsReady>:
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800458e:	d101      	bne.n	8004594 <LL_RCC_HSE_IsReady+0x18>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <LL_RCC_HSE_IsReady+0x1a>
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <LL_RCC_HSI_Enable>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80045a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b2:	6013      	str	r3, [r2, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <LL_RCC_HSI_Disable>:
{
 80045be:	b480      	push	{r7}
 80045c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80045c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d0:	6013      	str	r3, [r2, #0]
}
 80045d2:	bf00      	nop
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <LL_RCC_HSI_IsReady>:
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80045e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ee:	d101      	bne.n	80045f4 <LL_RCC_HSI_IsReady+0x18>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <LL_RCC_HSI_IsReady+0x1a>
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	061b      	lsls	r3, r3, #24
 8004616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <LL_RCC_HSI48_Enable>:
{
 800462a:	b480      	push	{r7}
 800462c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800462e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004642:	bf00      	nop
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <LL_RCC_HSI48_Disable>:
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <LL_RCC_HSI48_IsReady>:
{
 800466e:	b480      	push	{r7}
 8004670:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d101      	bne.n	8004686 <LL_RCC_HSI48_IsReady+0x18>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <LL_RCC_HSI48_IsReady+0x1a>
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <LL_RCC_LSE_Enable>:
{
 8004692:	b480      	push	{r7}
 8004694:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046aa:	bf00      	nop
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <LL_RCC_LSE_Disable>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046c4:	f023 0301 	bic.w	r3, r3, #1
 80046c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046cc:	bf00      	nop
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <LL_RCC_LSE_EnableBypass>:
{
 80046d6:	b480      	push	{r7}
 80046d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046e6:	f043 0304 	orr.w	r3, r3, #4
 80046ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_RCC_LSE_DisableBypass>:
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004708:	f023 0304 	bic.w	r3, r3, #4
 800470c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <LL_RCC_LSE_IsReady>:
{
 800471a:	b480      	push	{r7}
 800471c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800471e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b02      	cmp	r3, #2
 800472c:	d101      	bne.n	8004732 <LL_RCC_LSE_IsReady+0x18>
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <LL_RCC_LSE_IsReady+0x1a>
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <LL_RCC_LSI1_Enable>:
{
 800473e:	b480      	push	{r7}
 8004740:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800474a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004756:	bf00      	nop
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_RCC_LSI1_Disable>:
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800476c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <LL_RCC_LSI1_IsReady>:
{
 8004782:	b480      	push	{r7}
 8004784:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800478a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d101      	bne.n	800479a <LL_RCC_LSI1_IsReady+0x18>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <LL_RCC_LSI1_IsReady+0x1a>
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <LL_RCC_LSI2_Enable>:
{
 80047a6:	b480      	push	{r7}
 80047a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80047aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047be:	bf00      	nop
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_RCC_LSI2_Disable>:
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80047cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047e0:	bf00      	nop
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <LL_RCC_LSI2_IsReady>:
{
 80047ea:	b480      	push	{r7}
 80047ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80047ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d101      	bne.n	8004802 <LL_RCC_LSI2_IsReady+0x18>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <LL_RCC_LSI2_IsReady+0x1a>
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <LL_RCC_LSI2_SetTrimming>:
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800481e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <LL_RCC_MSI_Enable>:
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	6013      	str	r3, [r2, #0]
}
 8004850:	bf00      	nop
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <LL_RCC_MSI_Disable>:
{
 800485a:	b480      	push	{r7}
 800485c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800485e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004868:	f023 0301 	bic.w	r3, r3, #1
 800486c:	6013      	str	r3, [r2, #0]
}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <LL_RCC_MSI_IsReady>:
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800487c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b02      	cmp	r3, #2
 8004888:	d101      	bne.n	800488e <LL_RCC_MSI_IsReady+0x16>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <LL_RCC_MSI_IsReady+0x18>
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <LL_RCC_MSI_SetRange>:
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80048a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <LL_RCC_MSI_GetRange>:
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80048c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2bb0      	cmp	r3, #176	; 0xb0
 80048d8:	d901      	bls.n	80048de <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80048da:	23b0      	movs	r3, #176	; 0xb0
 80048dc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80048de:	687b      	ldr	r3, [r7, #4]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <LL_RCC_MSI_SetCalibTrimming>:
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80048f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004906:	4313      	orrs	r3, r2
 8004908:	604b      	str	r3, [r1, #4]
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <LL_RCC_SetSysClkSource>:
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800491e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f023 0203 	bic.w	r2, r3, #3
 8004928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <LL_RCC_GetSysClkSource>:
{
 800493e:	b480      	push	{r7}
 8004940:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 030c 	and.w	r3, r3, #12
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <LL_RCC_SetAHBPrescaler>:
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800495e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <LL_C2_RCC_SetAHBPrescaler>:
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800498e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <LL_RCC_SetAHB4Prescaler>:
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80049b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049ba:	f023 020f 	bic.w	r2, r3, #15
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	091b      	lsrs	r3, r3, #4
 80049c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <LL_RCC_SetAPB1Prescaler>:
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80049e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	608b      	str	r3, [r1, #8]
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <LL_RCC_SetAPB2Prescaler>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_RCC_GetAHBPrescaler>:
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <LL_RCC_GetAHB4Prescaler>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a48:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_RCC_GetAPB1Prescaler>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_RCC_GetAPB2Prescaler>:
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004abc:	6013      	str	r3, [r2, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ada:	d101      	bne.n	8004ae0 <LL_RCC_PLL_IsReady+0x18>
 8004adc:	2301      	movs	r3, #1
 8004ade:	e000      	b.n	8004ae2 <LL_RCC_PLL_IsReady+0x1a>
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004b06:	b480      	push	{r7}
 8004b08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004b36:	b480      	push	{r7}
 8004b38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0303 	and.w	r3, r3, #3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b60:	d101      	bne.n	8004b66 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004b72:	b480      	push	{r7}
 8004b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b86:	d101      	bne.n	8004b8c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bac:	d101      	bne.n	8004bb2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bd0:	d101      	bne.n	8004bd6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004be2:	b480      	push	{r7}
 8004be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bf4:	d101      	bne.n	8004bfa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b08d      	sub	sp, #52	; 0x34
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e363      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 808d 	beq.w	8004d42 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c28:	f7ff fe89 	bl	800493e <LL_RCC_GetSysClkSource>
 8004c2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c2e:	f7ff ff82 	bl	8004b36 <LL_RCC_PLL_GetMainSource>
 8004c32:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_RCC_OscConfig+0x3e>
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	2b0c      	cmp	r3, #12
 8004c3e:	d147      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d144      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e347      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004c56:	f7ff fe34 	bl	80048c2 <LL_RCC_MSI_GetRange>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	429c      	cmp	r4, r3
 8004c5e:	d914      	bls.n	8004c8a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fd2f 	bl	80056c8 <RCC_SetFlashLatencyFromMSIRange>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e336      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fe0e 	bl	800489a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fe32 	bl	80048ec <LL_RCC_MSI_SetCalibTrimming>
 8004c88:	e013      	b.n	8004cb2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff fe03 	bl	800489a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fe27 	bl	80048ec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fd10 	bl	80056c8 <RCC_SetFlashLatencyFromMSIRange>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e317      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004cb2:	f000 fcc9 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4aa4      	ldr	r2, [pc, #656]	; (8004f4c <HAL_RCC_OscConfig+0x344>)
 8004cba:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cbc:	4ba4      	ldr	r3, [pc, #656]	; (8004f50 <HAL_RCC_OscConfig+0x348>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe fc39 	bl	8003538 <HAL_InitTick>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d039      	beq.n	8004d40 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e308      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01e      	beq.n	8004d16 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cd8:	f7ff fdb0 	bl	800483c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cdc:	f7fe fc7a 	bl	80035d4 <HAL_GetTick>
 8004ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ce4:	f7fe fc76 	bl	80035d4 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e2f5      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004cf6:	f7ff fdbf 	bl	8004878 <LL_RCC_MSI_IsReady>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0f1      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fdc8 	bl	800489a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fdec 	bl	80048ec <LL_RCC_MSI_SetCalibTrimming>
 8004d14:	e015      	b.n	8004d42 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d16:	f7ff fda0 	bl	800485a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d1a:	f7fe fc5b 	bl	80035d4 <HAL_GetTick>
 8004d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d22:	f7fe fc57 	bl	80035d4 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e2d6      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d34:	f7ff fda0 	bl	8004878 <LL_RCC_MSI_IsReady>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f1      	bne.n	8004d22 <HAL_RCC_OscConfig+0x11a>
 8004d3e:	e000      	b.n	8004d42 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d40:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d047      	beq.n	8004dde <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4e:	f7ff fdf6 	bl	800493e <LL_RCC_GetSysClkSource>
 8004d52:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d54:	f7ff feef 	bl	8004b36 <LL_RCC_PLL_GetMainSource>
 8004d58:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_OscConfig+0x164>
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d108      	bne.n	8004d78 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d105      	bne.n	8004d78 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d134      	bne.n	8004dde <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e2b4      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d80:	d102      	bne.n	8004d88 <HAL_RCC_OscConfig+0x180>
 8004d82:	f7ff fbdd 	bl	8004540 <LL_RCC_HSE_Enable>
 8004d86:	e001      	b.n	8004d8c <HAL_RCC_OscConfig+0x184>
 8004d88:	f7ff fbe9 	bl	800455e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d012      	beq.n	8004dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fe fc1e 	bl	80035d4 <HAL_GetTick>
 8004d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fe fc1a 	bl	80035d4 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	; 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e299      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004dae:	f7ff fbe5 	bl	800457c <LL_RCC_HSE_IsReady>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f1      	beq.n	8004d9c <HAL_RCC_OscConfig+0x194>
 8004db8:	e011      	b.n	8004dde <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dba:	f7fe fc0b 	bl	80035d4 <HAL_GetTick>
 8004dbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc2:	f7fe fc07 	bl	80035d4 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b64      	cmp	r3, #100	; 0x64
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e286      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004dd4:	f7ff fbd2 	bl	800457c <LL_RCC_HSE_IsReady>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f1      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d04c      	beq.n	8004e84 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dea:	f7ff fda8 	bl	800493e <LL_RCC_GetSysClkSource>
 8004dee:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004df0:	f7ff fea1 	bl	8004b36 <LL_RCC_PLL_GetMainSource>
 8004df4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_OscConfig+0x200>
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d10e      	bne.n	8004e20 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d10b      	bne.n	8004e20 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e266      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fbf1 	bl	8004600 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004e1e:	e031      	b.n	8004e84 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d019      	beq.n	8004e5c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e28:	f7ff fbba 	bl	80045a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fe fbd2 	bl	80035d4 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e34:	f7fe fbce 	bl	80035d4 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e24d      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e46:	f7ff fbc9 	bl	80045dc <LL_RCC_HSI_IsReady>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f1      	beq.n	8004e34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fbd3 	bl	8004600 <LL_RCC_HSI_SetCalibTrimming>
 8004e5a:	e013      	b.n	8004e84 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5c:	f7ff fbaf 	bl	80045be <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fe fbb8 	bl	80035d4 <HAL_GetTick>
 8004e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e68:	f7fe fbb4 	bl	80035d4 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e233      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e7a:	f7ff fbaf 	bl	80045dc <LL_RCC_HSI_IsReady>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f1      	bne.n	8004e68 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d106      	bne.n	8004e9e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80a3 	beq.w	8004fe4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d076      	beq.n	8004f94 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d046      	beq.n	8004f40 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004eb2:	f7ff fc66 	bl	8004782 <LL_RCC_LSI1_IsReady>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d113      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004ebc:	f7ff fc3f 	bl	800473e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ec0:	f7fe fb88 	bl	80035d4 <HAL_GetTick>
 8004ec4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ec8:	f7fe fb84 	bl	80035d4 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e203      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004eda:	f7ff fc52 	bl	8004782 <LL_RCC_LSI1_IsReady>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f1      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004ee4:	f7ff fc5f 	bl	80047a6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fe fb74 	bl	80035d4 <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ef0:	f7fe fb70 	bl	80035d4 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e1ef      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f02:	f7ff fc72 	bl	80047ea <LL_RCC_LSI2_IsReady>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f1      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fc7c 	bl	800480e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004f16:	f7ff fc23 	bl	8004760 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1a:	f7fe fb5b 	bl	80035d4 <HAL_GetTick>
 8004f1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f22:	f7fe fb57 	bl	80035d4 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e1d6      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f34:	f7ff fc25 	bl	8004782 <LL_RCC_LSI1_IsReady>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f1      	bne.n	8004f22 <HAL_RCC_OscConfig+0x31a>
 8004f3e:	e051      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004f40:	f7ff fbfd 	bl	800473e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fe fb46 	bl	80035d4 <HAL_GetTick>
 8004f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f4a:	e00c      	b.n	8004f66 <HAL_RCC_OscConfig+0x35e>
 8004f4c:	20000020 	.word	0x20000020
 8004f50:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f54:	f7fe fb3e 	bl	80035d4 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e1bd      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f66:	f7ff fc0c 	bl	8004782 <LL_RCC_LSI1_IsReady>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f1      	beq.n	8004f54 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004f70:	f7ff fc2a 	bl	80047c8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f76:	f7fe fb2d 	bl	80035d4 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e1ac      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f88:	f7ff fc2f 	bl	80047ea <LL_RCC_LSI2_IsReady>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f1      	bne.n	8004f76 <HAL_RCC_OscConfig+0x36e>
 8004f92:	e027      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004f94:	f7ff fc18 	bl	80047c8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f98:	f7fe fb1c 	bl	80035d4 <HAL_GetTick>
 8004f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fa0:	f7fe fb18 	bl	80035d4 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e197      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004fb2:	f7ff fc1a 	bl	80047ea <LL_RCC_LSI2_IsReady>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f1      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004fbc:	f7ff fbd0 	bl	8004760 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc0:	f7fe fb08 	bl	80035d4 <HAL_GetTick>
 8004fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fc8:	f7fe fb04 	bl	80035d4 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e183      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004fda:	f7ff fbd2 	bl	8004782 <LL_RCC_LSI1_IsReady>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1f1      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d05b      	beq.n	80050a8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff0:	4ba7      	ldr	r3, [pc, #668]	; (8005290 <HAL_RCC_OscConfig+0x688>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d114      	bne.n	8005026 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004ffc:	f7ff fa70 	bl	80044e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005000:	f7fe fae8 	bl	80035d4 <HAL_GetTick>
 8005004:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005008:	f7fe fae4 	bl	80035d4 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e163      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800501a:	4b9d      	ldr	r3, [pc, #628]	; (8005290 <HAL_RCC_OscConfig+0x688>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d102      	bne.n	8005034 <HAL_RCC_OscConfig+0x42c>
 800502e:	f7ff fb30 	bl	8004692 <LL_RCC_LSE_Enable>
 8005032:	e00c      	b.n	800504e <HAL_RCC_OscConfig+0x446>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b05      	cmp	r3, #5
 800503a:	d104      	bne.n	8005046 <HAL_RCC_OscConfig+0x43e>
 800503c:	f7ff fb4b 	bl	80046d6 <LL_RCC_LSE_EnableBypass>
 8005040:	f7ff fb27 	bl	8004692 <LL_RCC_LSE_Enable>
 8005044:	e003      	b.n	800504e <HAL_RCC_OscConfig+0x446>
 8005046:	f7ff fb35 	bl	80046b4 <LL_RCC_LSE_Disable>
 800504a:	f7ff fb55 	bl	80046f8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d014      	beq.n	8005080 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005056:	f7fe fabd 	bl	80035d4 <HAL_GetTick>
 800505a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800505c:	e00a      	b.n	8005074 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505e:	f7fe fab9 	bl	80035d4 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	f241 3288 	movw	r2, #5000	; 0x1388
 800506c:	4293      	cmp	r3, r2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e136      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005074:	f7ff fb51 	bl	800471a <LL_RCC_LSE_IsReady>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0ef      	beq.n	800505e <HAL_RCC_OscConfig+0x456>
 800507e:	e013      	b.n	80050a8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fe faa8 	bl	80035d4 <HAL_GetTick>
 8005084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005086:	e00a      	b.n	800509e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005088:	f7fe faa4 	bl	80035d4 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	f241 3288 	movw	r2, #5000	; 0x1388
 8005096:	4293      	cmp	r3, r2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e121      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800509e:	f7ff fb3c 	bl	800471a <LL_RCC_LSE_IsReady>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1ef      	bne.n	8005088 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02c      	beq.n	800510e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d014      	beq.n	80050e6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050bc:	f7ff fab5 	bl	800462a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c0:	f7fe fa88 	bl	80035d4 <HAL_GetTick>
 80050c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050c8:	f7fe fa84 	bl	80035d4 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e103      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80050da:	f7ff fac8 	bl	800466e <LL_RCC_HSI48_IsReady>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f1      	beq.n	80050c8 <HAL_RCC_OscConfig+0x4c0>
 80050e4:	e013      	b.n	800510e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050e6:	f7ff fab1 	bl	800464c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ea:	f7fe fa73 	bl	80035d4 <HAL_GetTick>
 80050ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050f2:	f7fe fa6f 	bl	80035d4 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e0ee      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005104:	f7ff fab3 	bl	800466e <LL_RCC_HSI48_IsReady>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f1      	bne.n	80050f2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80e4 	beq.w	80052e0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005118:	f7ff fc11 	bl	800493e <LL_RCC_GetSysClkSource>
 800511c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	2b02      	cmp	r3, #2
 800512c:	f040 80b4 	bne.w	8005298 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0203 	and.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	429a      	cmp	r2, r3
 800513c:	d123      	bne.n	8005186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d11c      	bne.n	8005186 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d114      	bne.n	8005186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d10d      	bne.n	8005186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005174:	429a      	cmp	r2, r3
 8005176:	d106      	bne.n	8005186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005182:	429a      	cmp	r2, r3
 8005184:	d05d      	beq.n	8005242 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b0c      	cmp	r3, #12
 800518a:	d058      	beq.n	800523e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0a1      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800519e:	f7ff fc84 	bl	8004aaa <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051a2:	f7fe fa17 	bl	80035d4 <HAL_GetTick>
 80051a6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051aa:	f7fe fa13 	bl	80035d4 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e092      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ef      	bne.n	80051aa <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	4b30      	ldr	r3, [pc, #192]	; (8005294 <HAL_RCC_OscConfig+0x68c>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051dc:	4311      	orrs	r1, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051e2:	0212      	lsls	r2, r2, #8
 80051e4:	4311      	orrs	r1, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051ea:	4311      	orrs	r1, r2
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051f0:	4311      	orrs	r1, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80051f6:	430a      	orrs	r2, r1
 80051f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005200:	f7ff fc44 	bl	8004a8c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005212:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005214:	f7fe f9de 	bl	80035d4 <HAL_GetTick>
 8005218:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800521c:	f7fe f9da 	bl	80035d4 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e059      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0ef      	beq.n	800521c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800523c:	e050      	b.n	80052e0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e04f      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d147      	bne.n	80052e0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005250:	f7ff fc1c 	bl	8004a8c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005262:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005264:	f7fe f9b6 	bl	80035d4 <HAL_GetTick>
 8005268:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800526c:	f7fe f9b2 	bl	80035d4 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e031      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ef      	beq.n	800526c <HAL_RCC_OscConfig+0x664>
 800528c:	e028      	b.n	80052e0 <HAL_RCC_OscConfig+0x6d8>
 800528e:	bf00      	nop
 8005290:	58000400 	.word	0x58000400
 8005294:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b0c      	cmp	r3, #12
 800529c:	d01e      	beq.n	80052dc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529e:	f7ff fc04 	bl	8004aaa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fe f997 	bl	80035d4 <HAL_GetTick>
 80052a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052aa:	f7fe f993 	bl	80035d4 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e012      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1ef      	bne.n	80052aa <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <HAL_RCC_OscConfig+0x6e4>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	60cb      	str	r3, [r1, #12]
 80052da:	e001      	b.n	80052e0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3734      	adds	r7, #52	; 0x34
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd90      	pop	{r4, r7, pc}
 80052ea:	bf00      	nop
 80052ec:	eefefffc 	.word	0xeefefffc

080052f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e12d      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005304:	4b98      	ldr	r3, [pc, #608]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d91b      	bls.n	800534a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005312:	4b95      	ldr	r3, [pc, #596]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 0207 	bic.w	r2, r3, #7
 800531a:	4993      	ldr	r1, [pc, #588]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	4313      	orrs	r3, r2
 8005320:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005322:	f7fe f957 	bl	80035d4 <HAL_GetTick>
 8005326:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005328:	e008      	b.n	800533c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800532a:	f7fe f953 	bl	80035d4 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e111      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800533c:	4b8a      	ldr	r3, [pc, #552]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d1ef      	bne.n	800532a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d016      	beq.n	8005384 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fafb 	bl	8004956 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005360:	f7fe f938 	bl	80035d4 <HAL_GetTick>
 8005364:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005368:	f7fe f934 	bl	80035d4 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e0f2      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800537a:	f7ff fbe8 	bl	8004b4e <LL_RCC_IsActiveFlag_HPRE>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f1      	beq.n	8005368 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d016      	beq.n	80053be <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff faf2 	bl	800497e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800539a:	f7fe f91b 	bl	80035d4 <HAL_GetTick>
 800539e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053a2:	f7fe f917 	bl	80035d4 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0d5      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80053b4:	f7ff fbdd 	bl	8004b72 <LL_RCC_IsActiveFlag_C2HPRE>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0f1      	beq.n	80053a2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d016      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff faeb 	bl	80049aa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053d4:	f7fe f8fe 	bl	80035d4 <HAL_GetTick>
 80053d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053dc:	f7fe f8fa 	bl	80035d4 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e0b8      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053ee:	f7ff fbd3 	bl	8004b98 <LL_RCC_IsActiveFlag_SHDHPRE>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0f1      	beq.n	80053dc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d016      	beq.n	8005432 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff fae5 	bl	80049d8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800540e:	f7fe f8e1 	bl	80035d4 <HAL_GetTick>
 8005412:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005414:	e008      	b.n	8005428 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005416:	f7fe f8dd 	bl	80035d4 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e09b      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005428:	f7ff fbc9 	bl	8004bbe <LL_RCC_IsActiveFlag_PPRE1>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f1      	beq.n	8005416 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d017      	beq.n	800546e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fadb 	bl	8004a00 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800544a:	f7fe f8c3 	bl	80035d4 <HAL_GetTick>
 800544e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005450:	e008      	b.n	8005464 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005452:	f7fe f8bf 	bl	80035d4 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e07d      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005464:	f7ff fbbd 	bl	8004be2 <LL_RCC_IsActiveFlag_PPRE2>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f1      	beq.n	8005452 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d043      	beq.n	8005502 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b02      	cmp	r3, #2
 8005480:	d106      	bne.n	8005490 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005482:	f7ff f87b 	bl	800457c <LL_RCC_HSE_IsReady>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d11e      	bne.n	80054ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e067      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b03      	cmp	r3, #3
 8005496:	d106      	bne.n	80054a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005498:	f7ff fb16 	bl	8004ac8 <LL_RCC_PLL_IsReady>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d113      	bne.n	80054ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e05c      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80054ae:	f7ff f9e3 	bl	8004878 <LL_RCC_MSI_IsReady>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d108      	bne.n	80054ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e051      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80054bc:	f7ff f88e 	bl	80045dc <LL_RCC_HSI_IsReady>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e04a      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fa21 	bl	8004916 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d4:	f7fe f87e 	bl	80035d4 <HAL_GetTick>
 80054d8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054da:	e00a      	b.n	80054f2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054dc:	f7fe f87a 	bl	80035d4 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d901      	bls.n	80054f2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e036      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f2:	f7ff fa24 	bl	800493e <LL_RCC_GetSysClkSource>
 80054f6:	4602      	mov	r2, r0
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	429a      	cmp	r2, r3
 8005500:	d1ec      	bne.n	80054dc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005502:	4b19      	ldr	r3, [pc, #100]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d21b      	bcs.n	8005548 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005510:	4b15      	ldr	r3, [pc, #84]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f023 0207 	bic.w	r2, r3, #7
 8005518:	4913      	ldr	r1, [pc, #76]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	4313      	orrs	r3, r2
 800551e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005520:	f7fe f858 	bl	80035d4 <HAL_GetTick>
 8005524:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005526:	e008      	b.n	800553a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005528:	f7fe f854 	bl	80035d4 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e012      	b.n	8005560 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <HAL_RCC_ClockConfig+0x278>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d1ef      	bne.n	8005528 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005548:	f000 f87e 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 800554c:	4603      	mov	r3, r0
 800554e:	4a07      	ldr	r2, [pc, #28]	; (800556c <HAL_RCC_ClockConfig+0x27c>)
 8005550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005552:	f7fe f84b 	bl	80035ec <HAL_GetTickPrio>
 8005556:	4603      	mov	r3, r0
 8005558:	4618      	mov	r0, r3
 800555a:	f7fd ffed 	bl	8003538 <HAL_InitTick>
 800555e:	4603      	mov	r3, r0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	58004000 	.word	0x58004000
 800556c:	20000020 	.word	0x20000020

08005570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005576:	f7ff f9e2 	bl	800493e <LL_RCC_GetSysClkSource>
 800557a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005582:	f7ff f99e 	bl	80048c2 <LL_RCC_MSI_GetRange>
 8005586:	4603      	mov	r3, r0
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	4a2b      	ldr	r2, [pc, #172]	; (800563c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e04b      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b04      	cmp	r3, #4
 800559c:	d102      	bne.n	80055a4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800559e:	4b28      	ldr	r3, [pc, #160]	; (8005640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e045      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d10a      	bne.n	80055c0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80055aa:	f7fe ffb7 	bl	800451c <LL_RCC_HSE_IsEnabledDiv2>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d102      	bne.n	80055ba <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80055b4:	4b22      	ldr	r3, [pc, #136]	; (8005640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e03a      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80055ba:	4b22      	ldr	r3, [pc, #136]	; (8005644 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055bc:	60fb      	str	r3, [r7, #12]
 80055be:	e037      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80055c0:	f7ff fab9 	bl	8004b36 <LL_RCC_PLL_GetMainSource>
 80055c4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d003      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0x64>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d003      	beq.n	80055da <HAL_RCC_GetSysClockFreq+0x6a>
 80055d2:	e00d      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80055d4:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055d6:	60bb      	str	r3, [r7, #8]
        break;
 80055d8:	e015      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80055da:	f7fe ff9f 	bl	800451c <LL_RCC_HSE_IsEnabledDiv2>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d102      	bne.n	80055ea <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80055e4:	4b16      	ldr	r3, [pc, #88]	; (8005640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055e6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80055e8:	e00d      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80055ea:	4b16      	ldr	r3, [pc, #88]	; (8005644 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055ec:	60bb      	str	r3, [r7, #8]
        break;
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80055f0:	f7ff f967 	bl	80048c2 <LL_RCC_MSI_GetRange>
 80055f4:	4603      	mov	r3, r0
 80055f6:	091b      	lsrs	r3, r3, #4
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	4a0f      	ldr	r2, [pc, #60]	; (800563c <HAL_RCC_GetSysClockFreq+0xcc>)
 80055fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005602:	60bb      	str	r3, [r7, #8]
        break;
 8005604:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005606:	f7ff fa71 	bl	8004aec <LL_RCC_PLL_GetN>
 800560a:	4602      	mov	r2, r0
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	fb03 f402 	mul.w	r4, r3, r2
 8005612:	f7ff fa84 	bl	8004b1e <LL_RCC_PLL_GetDivider>
 8005616:	4603      	mov	r3, r0
 8005618:	091b      	lsrs	r3, r3, #4
 800561a:	3301      	adds	r3, #1
 800561c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005620:	f7ff fa71 	bl	8004b06 <LL_RCC_PLL_GetR>
 8005624:	4603      	mov	r3, r0
 8005626:	0f5b      	lsrs	r3, r3, #29
 8005628:	3301      	adds	r3, #1
 800562a:	fbb4 f3f3 	udiv	r3, r4, r3
 800562e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005630:	68fb      	ldr	r3, [r7, #12]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bd90      	pop	{r4, r7, pc}
 800563a:	bf00      	nop
 800563c:	0800ef44 	.word	0x0800ef44
 8005640:	00f42400 	.word	0x00f42400
 8005644:	01e84800 	.word	0x01e84800

08005648 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005648:	b598      	push	{r3, r4, r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800564c:	f7ff ff90 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8005650:	4604      	mov	r4, r0
 8005652:	f7ff f9e9 	bl	8004a28 <LL_RCC_GetAHBPrescaler>
 8005656:	4603      	mov	r3, r0
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	4a03      	ldr	r2, [pc, #12]	; (800566c <HAL_RCC_GetHCLKFreq+0x24>)
 8005660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005664:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005668:	4618      	mov	r0, r3
 800566a:	bd98      	pop	{r3, r4, r7, pc}
 800566c:	0800eee4 	.word	0x0800eee4

08005670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005670:	b598      	push	{r3, r4, r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005674:	f7ff ffe8 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 8005678:	4604      	mov	r4, r0
 800567a:	f7ff f9ef 	bl	8004a5c <LL_RCC_GetAPB1Prescaler>
 800567e:	4603      	mov	r3, r0
 8005680:	0a1b      	lsrs	r3, r3, #8
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	4a04      	ldr	r2, [pc, #16]	; (8005698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd98      	pop	{r3, r4, r7, pc}
 8005698:	0800ef24 	.word	0x0800ef24

0800569c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800569c:	b598      	push	{r3, r4, r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80056a0:	f7ff ffd2 	bl	8005648 <HAL_RCC_GetHCLKFreq>
 80056a4:	4604      	mov	r4, r0
 80056a6:	f7ff f9e5 	bl	8004a74 <LL_RCC_GetAPB2Prescaler>
 80056aa:	4603      	mov	r3, r0
 80056ac:	0adb      	lsrs	r3, r3, #11
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	4a04      	ldr	r2, [pc, #16]	; (80056c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	bd98      	pop	{r3, r4, r7, pc}
 80056c4:	0800ef24 	.word	0x0800ef24

080056c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80056c8:	b590      	push	{r4, r7, lr}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2bb0      	cmp	r3, #176	; 0xb0
 80056d4:	d903      	bls.n	80056de <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80056d6:	4b15      	ldr	r3, [pc, #84]	; (800572c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e007      	b.n	80056ee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	091b      	lsrs	r3, r3, #4
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	4a11      	ldr	r2, [pc, #68]	; (800572c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80056e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80056ee:	f7ff f9a7 	bl	8004a40 <LL_RCC_GetAHB4Prescaler>
 80056f2:	4603      	mov	r3, r0
 80056f4:	091b      	lsrs	r3, r3, #4
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	4a0d      	ldr	r2, [pc, #52]	; (8005730 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80056fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	fbb2 f3f3 	udiv	r3, r2, r3
 8005706:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a0a      	ldr	r2, [pc, #40]	; (8005734 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	0c9c      	lsrs	r4, r3, #18
 8005712:	f7fe fef5 	bl	8004500 <HAL_PWREx_GetVoltageRange>
 8005716:	4603      	mov	r3, r0
 8005718:	4619      	mov	r1, r3
 800571a:	4620      	mov	r0, r4
 800571c:	f000 f80c 	bl	8005738 <RCC_SetFlashLatency>
 8005720:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	bd90      	pop	{r4, r7, pc}
 800572a:	bf00      	nop
 800572c:	0800ef44 	.word	0x0800ef44
 8005730:	0800eee4 	.word	0x0800eee4
 8005734:	431bde83 	.word	0x431bde83

08005738 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005738:	b590      	push	{r4, r7, lr}
 800573a:	b093      	sub	sp, #76	; 0x4c
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005742:	4b37      	ldr	r3, [pc, #220]	; (8005820 <RCC_SetFlashLatency+0xe8>)
 8005744:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800574a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800574e:	4a35      	ldr	r2, [pc, #212]	; (8005824 <RCC_SetFlashLatency+0xec>)
 8005750:	f107 031c 	add.w	r3, r7, #28
 8005754:	ca07      	ldmia	r2, {r0, r1, r2}
 8005756:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800575a:	4b33      	ldr	r3, [pc, #204]	; (8005828 <RCC_SetFlashLatency+0xf0>)
 800575c:	f107 040c 	add.w	r4, r7, #12
 8005760:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005762:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005766:	2300      	movs	r3, #0
 8005768:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005770:	d11a      	bne.n	80057a8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005772:	2300      	movs	r3, #0
 8005774:	643b      	str	r3, [r7, #64]	; 0x40
 8005776:	e013      	b.n	80057a0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	3348      	adds	r3, #72	; 0x48
 800577e:	443b      	add	r3, r7
 8005780:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	429a      	cmp	r2, r3
 8005788:	d807      	bhi.n	800579a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800578a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	3348      	adds	r3, #72	; 0x48
 8005790:	443b      	add	r3, r7
 8005792:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005796:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005798:	e020      	b.n	80057dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800579a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800579c:	3301      	adds	r3, #1
 800579e:	643b      	str	r3, [r7, #64]	; 0x40
 80057a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d9e8      	bls.n	8005778 <RCC_SetFlashLatency+0x40>
 80057a6:	e019      	b.n	80057dc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80057a8:	2300      	movs	r3, #0
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ac:	e013      	b.n	80057d6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80057ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	3348      	adds	r3, #72	; 0x48
 80057b4:	443b      	add	r3, r7
 80057b6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d807      	bhi.n	80057d0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80057c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	3348      	adds	r3, #72	; 0x48
 80057c6:	443b      	add	r3, r7
 80057c8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80057cc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80057ce:	e005      	b.n	80057dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80057d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d2:	3301      	adds	r3, #1
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d9e8      	bls.n	80057ae <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80057dc:	4b13      	ldr	r3, [pc, #76]	; (800582c <RCC_SetFlashLatency+0xf4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f023 0207 	bic.w	r2, r3, #7
 80057e4:	4911      	ldr	r1, [pc, #68]	; (800582c <RCC_SetFlashLatency+0xf4>)
 80057e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057ec:	f7fd fef2 	bl	80035d4 <HAL_GetTick>
 80057f0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057f2:	e008      	b.n	8005806 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057f4:	f7fd feee 	bl	80035d4 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e007      	b.n	8005816 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005806:	4b09      	ldr	r3, [pc, #36]	; (800582c <RCC_SetFlashLatency+0xf4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005810:	429a      	cmp	r2, r3
 8005812:	d1ef      	bne.n	80057f4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	374c      	adds	r7, #76	; 0x4c
 800581a:	46bd      	mov	sp, r7
 800581c:	bd90      	pop	{r4, r7, pc}
 800581e:	bf00      	nop
 8005820:	0800e04c 	.word	0x0800e04c
 8005824:	0800e05c 	.word	0x0800e05c
 8005828:	0800e068 	.word	0x0800e068
 800582c:	58004000 	.word	0x58004000

08005830 <LL_RCC_LSE_IsEnabled>:
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <LL_RCC_LSE_IsEnabled+0x18>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <LL_RCC_LSE_IsEnabled+0x1a>
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <LL_RCC_LSE_IsReady>:
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b02      	cmp	r3, #2
 8005866:	d101      	bne.n	800586c <LL_RCC_LSE_IsReady+0x18>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <LL_RCC_LSE_IsReady+0x1a>
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <LL_RCC_SetRFWKPClockSource>:
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005888:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800588c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <LL_RCC_SetSMPSClockSource>:
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80058ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	f023 0203 	bic.w	r2, r3, #3
 80058b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4313      	orrs	r3, r2
 80058be:	624b      	str	r3, [r1, #36]	; 0x24
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <LL_RCC_SetSMPSPrescaler>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80058d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <LL_RCC_SetUSARTClockSource>:
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80058fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005904:	f023 0203 	bic.w	r2, r3, #3
 8005908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <LL_RCC_SetLPUARTClockSource>:
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005930:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <LL_RCC_SetI2CClockSource>:
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005958:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	091b      	lsrs	r3, r3, #4
 8005960:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005964:	43db      	mvns	r3, r3
 8005966:	401a      	ands	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <LL_RCC_SetLPTIMClockSource>:
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005992:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	0c1b      	lsrs	r3, r3, #16
 800599a:	041b      	lsls	r3, r3, #16
 800599c:	43db      	mvns	r3, r3
 800599e:	401a      	ands	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	041b      	lsls	r3, r3, #16
 80059a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <LL_RCC_SetSAIClockSource>:
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80059c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <LL_RCC_SetRNGClockSource>:
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80059ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80059fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <LL_RCC_SetCLK48ClockSource>:
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <LL_RCC_SetUSBClockSource>:
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff ffe3 	bl	8005a12 <LL_RCC_SetCLK48ClockSource>
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <LL_RCC_SetADCClockSource>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <LL_RCC_SetRTCClockSource>:
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <LL_RCC_GetRTCClockSource>:
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <LL_RCC_ForceBackupDomainReset>:
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ade:	bf00      	nop
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b00:	bf00      	nop
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <LL_RCC_PLLSAI1_Enable>:
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b1c:	6013      	str	r3, [r2, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <LL_RCC_PLLSAI1_Disable>:
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b3a:	6013      	str	r3, [r2, #0]
}
 8005b3c:	bf00      	nop
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <LL_RCC_PLLSAI1_IsReady>:
{
 8005b46:	b480      	push	{r7}
 8005b48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b58:	d101      	bne.n	8005b5e <LL_RCC_PLLSAI1_IsReady+0x18>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b088      	sub	sp, #32
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005b72:	2300      	movs	r3, #0
 8005b74:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b76:	2300      	movs	r3, #0
 8005b78:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d034      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b8e:	d021      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005b90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b94:	d81b      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b9a:	d01d      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005b9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ba0:	d815      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00b      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005baa:	d110      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bba:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005bbc:	e00d      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f947 	bl	8005e56 <RCCEx_PLLSAI1_ConfigNP>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005bcc:	e005      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	77fb      	strb	r3, [r7, #31]
        break;
 8005bd2:	e002      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bda:	7ffb      	ldrb	r3, [r7, #31]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d105      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fee8 	bl	80059ba <LL_RCC_SetSAIClockSource>
 8005bea:	e001      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bec:	7ffb      	ldrb	r3, [r7, #31]
 8005bee:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d046      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005bfc:	f7ff ff56 	bl	8005aac <LL_RCC_GetRTCClockSource>
 8005c00:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d03c      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005c0c:	f7fe fc68 	bl	80044e0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d105      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff ff30 	bl	8005a80 <LL_RCC_SetRTCClockSource>
 8005c20:	e02e      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005c2c:	f7ff ff4b 	bl	8005ac6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005c30:	f7ff ff5a 	bl	8005ae8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005c4c:	f7ff fdf0 	bl	8005830 <LL_RCC_LSE_IsEnabled>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d114      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c56:	f7fd fcbd 	bl	80035d4 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c5c:	e00b      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5e:	f7fd fcb9 	bl	80035d4 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d902      	bls.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	77fb      	strb	r3, [r7, #31]
              break;
 8005c74:	e004      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c76:	f7ff fded 	bl	8005854 <LL_RCC_LSE_IsReady>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d1ee      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005c80:	7ffb      	ldrb	r3, [r7, #31]
 8005c82:	77bb      	strb	r3, [r7, #30]
 8005c84:	e001      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c86:	7ffb      	ldrb	r3, [r7, #31]
 8005c88:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d004      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fe2a 	bl	80058f4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fe35 	bl	8005920 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff fe5d 	bl	8005986 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fe52 	bl	8005986 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d004      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fe2a 	bl	800594c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff fe1f 	bl	800594c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d022      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff fe8d 	bl	8005a3e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d3c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d46:	d10b      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 f8dd 	bl	8005f0c <RCCEx_PLLSAI1_ConfigNQ>
 8005d52:	4603      	mov	r3, r0
 8005d54:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d56:	7ffb      	ldrb	r3, [r7, #31]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005d5c:	7ffb      	ldrb	r3, [r7, #31]
 8005d5e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d02b      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d74:	d008      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d7e:	d003      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fe2a 	bl	80059e6 <LL_RCC_SetRNGClockSource>
 8005d92:	e00a      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	2000      	movs	r0, #0
 8005da0:	f7ff fe21 	bl	80059e6 <LL_RCC_SetRNGClockSource>
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff fe34 	bl	8005a12 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005db2:	d107      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d022      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fe3d 	bl	8005a54 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de2:	d107      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005df2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dfc:	d10b      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 f8dd 	bl	8005fc2 <RCCEx_PLLSAI1_ConfigNR>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005e0c:	7ffb      	ldrb	r3, [r7, #31]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005e12:	7ffb      	ldrb	r3, [r7, #31]
 8005e14:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d004      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fd26 	bl	8005878 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d009      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff fd45 	bl	80058cc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fd2c 	bl	80058a4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005e4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e62:	f7ff fe61 	bl	8005b28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e66:	f7fd fbb5 	bl	80035d4 <HAL_GetTick>
 8005e6a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e6c:	e009      	b.n	8005e82 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e6e:	f7fd fbb1 	bl	80035d4 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d902      	bls.n	8005e82 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e80:	e004      	b.n	8005e8c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e82:	f7ff fe60 	bl	8005b46 <LL_RCC_PLLSAI1_IsReady>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1f0      	bne.n	8005e6e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d137      	bne.n	8005f02 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ec0:	f7ff fe23 	bl	8005b0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ec4:	f7fd fb86 	bl	80035d4 <HAL_GetTick>
 8005ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005eca:	e009      	b.n	8005ee0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ecc:	f7fd fb82 	bl	80035d4 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d902      	bls.n	8005ee0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	73fb      	strb	r3, [r7, #15]
        break;
 8005ede:	e004      	b.n	8005eea <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ee0:	f7ff fe31 	bl	8005b46 <LL_RCC_PLLSAI1_IsReady>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d1f0      	bne.n	8005ecc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d108      	bne.n	8005f02 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005efe:	4313      	orrs	r3, r2
 8005f00:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f18:	f7ff fe06 	bl	8005b28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f1c:	f7fd fb5a 	bl	80035d4 <HAL_GetTick>
 8005f20:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f22:	e009      	b.n	8005f38 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f24:	f7fd fb56 	bl	80035d4 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d902      	bls.n	8005f38 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	73fb      	strb	r3, [r7, #15]
      break;
 8005f36:	e004      	b.n	8005f42 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f38:	f7ff fe05 	bl	8005b46 <LL_RCC_PLLSAI1_IsReady>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f0      	bne.n	8005f24 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d137      	bne.n	8005fb8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f72:	4313      	orrs	r3, r2
 8005f74:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f76:	f7ff fdc8 	bl	8005b0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f7a:	f7fd fb2b 	bl	80035d4 <HAL_GetTick>
 8005f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f80:	e009      	b.n	8005f96 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f82:	f7fd fb27 	bl	80035d4 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d902      	bls.n	8005f96 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	73fb      	strb	r3, [r7, #15]
        break;
 8005f94:	e004      	b.n	8005fa0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f96:	f7ff fdd6 	bl	8005b46 <LL_RCC_PLLSAI1_IsReady>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d1f0      	bne.n	8005f82 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d108      	bne.n	8005fb8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005fce:	f7ff fdab 	bl	8005b28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fd2:	f7fd faff 	bl	80035d4 <HAL_GetTick>
 8005fd6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fd8:	e009      	b.n	8005fee <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fda:	f7fd fafb 	bl	80035d4 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d902      	bls.n	8005fee <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	73fb      	strb	r3, [r7, #15]
      break;
 8005fec:	e004      	b.n	8005ff8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fee:	f7ff fdaa 	bl	8005b46 <LL_RCC_PLLSAI1_IsReady>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1f0      	bne.n	8005fda <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d137      	bne.n	800606e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006012:	4313      	orrs	r3, r2
 8006014:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006028:	4313      	orrs	r3, r2
 800602a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800602c:	f7ff fd6d 	bl	8005b0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006030:	f7fd fad0 	bl	80035d4 <HAL_GetTick>
 8006034:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006036:	e009      	b.n	800604c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006038:	f7fd facc 	bl	80035d4 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d902      	bls.n	800604c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	73fb      	strb	r3, [r7, #15]
        break;
 800604a:	e004      	b.n	8006056 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800604c:	f7ff fd7b 	bl	8005b46 <LL_RCC_PLLSAI1_IsReady>
 8006050:	4603      	mov	r3, r0
 8006052:	2b01      	cmp	r3, #1
 8006054:	d1f0      	bne.n	8006038 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d108      	bne.n	800606e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800605c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800606a:	4313      	orrs	r3, r2
 800606c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e09f      	b.n	80061ca <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fd f89c 	bl	80031dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2202      	movs	r2, #2
 80060a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80060ac:	4b49      	ldr	r3, [pc, #292]	; (80061d4 <HAL_RTC_Init+0x15c>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b10      	cmp	r3, #16
 80060b6:	d07e      	beq.n	80061b6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	22ca      	movs	r2, #202	; 0xca
 80060be:	625a      	str	r2, [r3, #36]	; 0x24
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2253      	movs	r2, #83	; 0x53
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f8ab 	bl	8006224 <RTC_EnterInitMode>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	22ff      	movs	r2, #255	; 0xff
 80060da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2204      	movs	r2, #4
 80060e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
 80060e8:	e067      	b.n	80061ba <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6812      	ldr	r2, [r2, #0]
 80060f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6899      	ldr	r1, [r3, #8]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	431a      	orrs	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	68d2      	ldr	r2, [r2, #12]
 8006124:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6919      	ldr	r1, [r3, #16]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	041a      	lsls	r2, r3, #16
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006148:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0203 	bic.w	r2, r2, #3
 8006158:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	d113      	bne.n	80061a8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f829 	bl	80061d8 <HAL_RTC_WaitForSynchro>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00d      	beq.n	80061a8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	22ff      	movs	r2, #255	; 0xff
 8006192:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2204      	movs	r2, #4
 8006198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e010      	b.n	80061ca <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	22ff      	movs	r2, #255	; 0xff
 80061ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	73fb      	strb	r3, [r7, #15]
 80061b4:	e001      	b.n	80061ba <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d103      	bne.n	80061c8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40002800 	.word	0x40002800

080061d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80061f0:	f7fd f9f0 	bl	80035d4 <HAL_GetTick>
 80061f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80061f6:	e009      	b.n	800620c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061f8:	f7fd f9ec 	bl	80035d4 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006206:	d901      	bls.n	800620c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e007      	b.n	800621c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ee      	beq.n	80061f8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d119      	bne.n	800626e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f04f 32ff 	mov.w	r2, #4294967295
 8006242:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006244:	f7fd f9c6 	bl	80035d4 <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800624a:	e009      	b.n	8006260 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800624c:	f7fd f9c2 	bl	80035d4 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800625a:	d901      	bls.n	8006260 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e007      	b.n	8006270 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0ee      	beq.n	800624c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800628e:	2302      	movs	r3, #2
 8006290:	e0a8      	b.n	80063e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	22ca      	movs	r2, #202	; 0xca
 80062a8:	625a      	str	r2, [r3, #36]	; 0x24
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2253      	movs	r2, #83	; 0x53
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d020      	beq.n	8006302 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80062c0:	f7fd f988 	bl	80035d4 <HAL_GetTick>
 80062c4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80062c6:	e015      	b.n	80062f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062c8:	f7fd f984 	bl	80035d4 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d6:	d90d      	bls.n	80062f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	22ff      	movs	r2, #255	; 0xff
 80062de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2203      	movs	r2, #3
 80062e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e077      	b.n	80063e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e2      	bne.n	80062c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689a      	ldr	r2, [r3, #8]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006310:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006322:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006324:	f7fd f956 	bl	80035d4 <HAL_GetTick>
 8006328:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800632a:	e015      	b.n	8006358 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800632c:	f7fd f952 	bl	80035d4 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800633a:	d90d      	bls.n	8006358 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	22ff      	movs	r2, #255	; 0xff
 8006342:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2203      	movs	r2, #3
 8006348:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e045      	b.n	80063e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0e2      	beq.n	800632c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0207 	bic.w	r2, r2, #7
 800637c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6899      	ldr	r1, [r3, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	430a      	orrs	r2, r1
 800638c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800638e:	4b17      	ldr	r3, [pc, #92]	; (80063ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006394:	4a15      	ldr	r2, [pc, #84]	; (80063ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800639a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a12      	ldr	r2, [pc, #72]	; (80063ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80063a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063a8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063b8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063c8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	22ff      	movs	r2, #255	; 0xff
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	58000800 	.word	0x58000800

080063f0 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006402:	2302      	movs	r3, #2
 8006404:	e024      	b.n	8006450 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2202      	movs	r2, #2
 8006412:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	22ca      	movs	r2, #202	; 0xca
 800641c:	625a      	str	r2, [r3, #36]	; 0x24
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2253      	movs	r2, #83	; 0x53
 8006424:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0220 	orr.w	r2, r2, #32
 8006434:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	22ff      	movs	r2, #255	; 0xff
 800643c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <LL_RCC_GetUSARTClockSource>:
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006468:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4013      	ands	r3, r2
}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <LL_RCC_GetLPUARTClockSource>:
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006488:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4013      	ands	r3, r2
}
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e042      	b.n	8006534 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7fc fd97 	bl	8002ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2224      	movs	r2, #36	; 0x24
 80064ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0201 	bic.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fe14 	bl	8007114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fbe9 	bl	8006cc4 <UART_SetConfig>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e01b      	b.n	8006534 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800650a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800651a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fe93 	bl	8007258 <UART_CheckIdleState>
 8006532:	4603      	mov	r3, r0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08a      	sub	sp, #40	; 0x28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006550:	2b20      	cmp	r3, #32
 8006552:	d167      	bne.n	8006624 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <HAL_UART_Transmit_DMA+0x24>
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e060      	b.n	8006626 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	88fa      	ldrh	r2, [r7, #6]
 800656e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	88fa      	ldrh	r2, [r7, #6]
 8006576:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2221      	movs	r2, #33	; 0x21
 8006586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d028      	beq.n	80065e4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006596:	4a26      	ldr	r2, [pc, #152]	; (8006630 <HAL_UART_Transmit_DMA+0xf4>)
 8006598:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800659e:	4a25      	ldr	r2, [pc, #148]	; (8006634 <HAL_UART_Transmit_DMA+0xf8>)
 80065a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a6:	4a24      	ldr	r2, [pc, #144]	; (8006638 <HAL_UART_Transmit_DMA+0xfc>)
 80065a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ae:	2200      	movs	r2, #0
 80065b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ba:	4619      	mov	r1, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3328      	adds	r3, #40	; 0x28
 80065c2:	461a      	mov	r2, r3
 80065c4:	88fb      	ldrh	r3, [r7, #6]
 80065c6:	f7fd fa77 	bl	8003ab8 <HAL_DMA_Start_IT>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2210      	movs	r2, #16
 80065d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e020      	b.n	8006626 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2240      	movs	r2, #64	; 0x40
 80065ea:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3308      	adds	r3, #8
 80065f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	613b      	str	r3, [r7, #16]
   return(result);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006602:	627b      	str	r3, [r7, #36]	; 0x24
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3308      	adds	r3, #8
 800660a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800660c:	623a      	str	r2, [r7, #32]
 800660e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006610:	69f9      	ldr	r1, [r7, #28]
 8006612:	6a3a      	ldr	r2, [r7, #32]
 8006614:	e841 2300 	strex	r3, r2, [r1]
 8006618:	61bb      	str	r3, [r7, #24]
   return(result);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1e5      	bne.n	80065ec <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	e000      	b.n	8006626 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006624:	2302      	movs	r3, #2
  }
}
 8006626:	4618      	mov	r0, r3
 8006628:	3728      	adds	r7, #40	; 0x28
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	080075d5 	.word	0x080075d5
 8006634:	0800766f 	.word	0x0800766f
 8006638:	0800768b 	.word	0x0800768b

0800663c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b0ba      	sub	sp, #232	; 0xe8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006662:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006666:	f640 030f 	movw	r3, #2063	; 0x80f
 800666a:	4013      	ands	r3, r2
 800666c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006674:	2b00      	cmp	r3, #0
 8006676:	d11b      	bne.n	80066b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667c:	f003 0320 	and.w	r3, r3, #32
 8006680:	2b00      	cmp	r3, #0
 8006682:	d015      	beq.n	80066b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b00      	cmp	r3, #0
 800668e:	d105      	bne.n	800669c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 82e3 	beq.w	8006c6c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
      }
      return;
 80066ae:	e2dd      	b.n	8006c6c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8123 	beq.w	8006900 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066be:	4b8d      	ldr	r3, [pc, #564]	; (80068f4 <HAL_UART_IRQHandler+0x2b8>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066ca:	4b8b      	ldr	r3, [pc, #556]	; (80068f8 <HAL_UART_IRQHandler+0x2bc>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8116 	beq.w	8006900 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d011      	beq.n	8006704 <HAL_UART_IRQHandler+0xc8>
 80066e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2201      	movs	r2, #1
 80066f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066fa:	f043 0201 	orr.w	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d011      	beq.n	8006734 <HAL_UART_IRQHandler+0xf8>
 8006710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2202      	movs	r2, #2
 8006722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672a:	f043 0204 	orr.w	r2, r3, #4
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d011      	beq.n	8006764 <HAL_UART_IRQHandler+0x128>
 8006740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00b      	beq.n	8006764 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2204      	movs	r2, #4
 8006752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675a:	f043 0202 	orr.w	r2, r3, #2
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d017      	beq.n	80067a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b00      	cmp	r3, #0
 800677a:	d105      	bne.n	8006788 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800677c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006780:	4b5c      	ldr	r3, [pc, #368]	; (80068f4 <HAL_UART_IRQHandler+0x2b8>)
 8006782:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2208      	movs	r2, #8
 800678e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006796:	f043 0208 	orr.w	r2, r3, #8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d012      	beq.n	80067d2 <HAL_UART_IRQHandler+0x196>
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00c      	beq.n	80067d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c8:	f043 0220 	orr.w	r2, r3, #32
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 8249 	beq.w	8006c70 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d013      	beq.n	8006812 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ee:	f003 0320 	and.w	r3, r3, #32
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d105      	bne.n	8006802 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d007      	beq.n	8006812 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006826:	2b40      	cmp	r3, #64	; 0x40
 8006828:	d005      	beq.n	8006836 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800682a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800682e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006832:	2b00      	cmp	r3, #0
 8006834:	d054      	beq.n	80068e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fe66 	bl	8007508 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d146      	bne.n	80068d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3308      	adds	r3, #8
 8006872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006876:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800687a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800688e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1d9      	bne.n	800684a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800689c:	2b00      	cmp	r3, #0
 800689e:	d017      	beq.n	80068d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068a6:	4a15      	ldr	r2, [pc, #84]	; (80068fc <HAL_UART_IRQHandler+0x2c0>)
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fd f9db 	bl	8003c6c <HAL_DMA_Abort_IT>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d019      	beq.n	80068f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80068ca:	4610      	mov	r0, r2
 80068cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ce:	e00f      	b.n	80068f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f9e1 	bl	8006c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d6:	e00b      	b.n	80068f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f9dd 	bl	8006c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068de:	e007      	b.n	80068f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f9d9 	bl	8006c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80068ee:	e1bf      	b.n	8006c70 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	bf00      	nop
    return;
 80068f2:	e1bd      	b.n	8006c70 <HAL_UART_IRQHandler+0x634>
 80068f4:	10000001 	.word	0x10000001
 80068f8:	04000120 	.word	0x04000120
 80068fc:	0800770b 	.word	0x0800770b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006904:	2b01      	cmp	r3, #1
 8006906:	f040 8153 	bne.w	8006bb0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690e:	f003 0310 	and.w	r3, r3, #16
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 814c 	beq.w	8006bb0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 8145 	beq.w	8006bb0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2210      	movs	r2, #16
 800692c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006938:	2b40      	cmp	r3, #64	; 0x40
 800693a:	f040 80bb 	bne.w	8006ab4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800694c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 818f 	beq.w	8006c74 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800695c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006960:	429a      	cmp	r2, r3
 8006962:	f080 8187 	bcs.w	8006c74 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800696c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	f040 8087 	bne.w	8006a92 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800699c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80069ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80069b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80069ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80069c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1da      	bne.n	8006984 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80069de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069e0:	f023 0301 	bic.w	r3, r3, #1
 80069e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3308      	adds	r3, #8
 80069ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e1      	bne.n	80069ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3308      	adds	r3, #8
 8006a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e3      	bne.n	8006a0a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a60:	f023 0310 	bic.w	r3, r3, #16
 8006a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e4      	bne.n	8006a50 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fd f88e 	bl	8003bae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2202      	movs	r2, #2
 8006a96:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f8fd 	bl	8006cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ab2:	e0df      	b.n	8006c74 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80d1 	beq.w	8006c78 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006ad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80cc 	beq.w	8006c78 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006af4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b02:	647b      	str	r3, [r7, #68]	; 0x44
 8006b04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e4      	bne.n	8006ae0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	623b      	str	r3, [r7, #32]
   return(result);
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	f023 0301 	bic.w	r3, r3, #1
 8006b30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3308      	adds	r3, #8
 8006b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b3e:	633a      	str	r2, [r7, #48]	; 0x30
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e1      	bne.n	8006b16 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0310 	bic.w	r3, r3, #16
 8006b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	69b9      	ldr	r1, [r7, #24]
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	617b      	str	r3, [r7, #20]
   return(result);
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e4      	bne.n	8006b66 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f87f 	bl	8006cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bae:	e063      	b.n	8006c78 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00e      	beq.n	8006bda <HAL_UART_IRQHandler+0x59e>
 8006bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d008      	beq.n	8006bda <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fdda 	bl	800778c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bd8:	e051      	b.n	8006c7e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d014      	beq.n	8006c10 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d105      	bne.n	8006bfe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d008      	beq.n	8006c10 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d03a      	beq.n	8006c7c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
    }
    return;
 8006c0e:	e035      	b.n	8006c7c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d009      	beq.n	8006c30 <HAL_UART_IRQHandler+0x5f4>
 8006c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fd84 	bl	8007736 <UART_EndTransmit_IT>
    return;
 8006c2e:	e026      	b.n	8006c7e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <HAL_UART_IRQHandler+0x614>
 8006c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fdb3 	bl	80077b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c4e:	e016      	b.n	8006c7e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d010      	beq.n	8006c7e <HAL_UART_IRQHandler+0x642>
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	da0c      	bge.n	8006c7e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fd9b 	bl	80077a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c6a:	e008      	b.n	8006c7e <HAL_UART_IRQHandler+0x642>
      return;
 8006c6c:	bf00      	nop
 8006c6e:	e006      	b.n	8006c7e <HAL_UART_IRQHandler+0x642>
    return;
 8006c70:	bf00      	nop
 8006c72:	e004      	b.n	8006c7e <HAL_UART_IRQHandler+0x642>
      return;
 8006c74:	bf00      	nop
 8006c76:	e002      	b.n	8006c7e <HAL_UART_IRQHandler+0x642>
      return;
 8006c78:	bf00      	nop
 8006c7a:	e000      	b.n	8006c7e <HAL_UART_IRQHandler+0x642>
    return;
 8006c7c:	bf00      	nop
  }
}
 8006c7e:	37e8      	adds	r7, #232	; 0xe8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cc8:	b08c      	sub	sp, #48	; 0x30
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4baf      	ldr	r3, [pc, #700]	; (8006fb0 <UART_SetConfig+0x2ec>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	6812      	ldr	r2, [r2, #0]
 8006cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	68da      	ldr	r2, [r3, #12]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4aa4      	ldr	r2, [pc, #656]	; (8006fb4 <UART_SetConfig+0x2f0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	6812      	ldr	r2, [r2, #0]
 8006d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	f023 010f 	bic.w	r1, r3, #15
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a95      	ldr	r2, [pc, #596]	; (8006fb8 <UART_SetConfig+0x2f4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d125      	bne.n	8006db4 <UART_SetConfig+0xf0>
 8006d68:	2003      	movs	r0, #3
 8006d6a:	f7ff fb77 	bl	800645c <LL_RCC_GetUSARTClockSource>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d81b      	bhi.n	8006dac <UART_SetConfig+0xe8>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <UART_SetConfig+0xb8>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006d8d 	.word	0x08006d8d
 8006d80:	08006d9d 	.word	0x08006d9d
 8006d84:	08006d95 	.word	0x08006d95
 8006d88:	08006da5 	.word	0x08006da5
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d92:	e042      	b.n	8006e1a <UART_SetConfig+0x156>
 8006d94:	2302      	movs	r3, #2
 8006d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d9a:	e03e      	b.n	8006e1a <UART_SetConfig+0x156>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da2:	e03a      	b.n	8006e1a <UART_SetConfig+0x156>
 8006da4:	2308      	movs	r3, #8
 8006da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006daa:	e036      	b.n	8006e1a <UART_SetConfig+0x156>
 8006dac:	2310      	movs	r3, #16
 8006dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db2:	e032      	b.n	8006e1a <UART_SetConfig+0x156>
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a7e      	ldr	r2, [pc, #504]	; (8006fb4 <UART_SetConfig+0x2f0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d12a      	bne.n	8006e14 <UART_SetConfig+0x150>
 8006dbe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006dc2:	f7ff fb5b 	bl	800647c <LL_RCC_GetLPUARTClockSource>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dcc:	d01a      	beq.n	8006e04 <UART_SetConfig+0x140>
 8006dce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dd2:	d81b      	bhi.n	8006e0c <UART_SetConfig+0x148>
 8006dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd8:	d00c      	beq.n	8006df4 <UART_SetConfig+0x130>
 8006dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dde:	d815      	bhi.n	8006e0c <UART_SetConfig+0x148>
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <UART_SetConfig+0x128>
 8006de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de8:	d008      	beq.n	8006dfc <UART_SetConfig+0x138>
 8006dea:	e00f      	b.n	8006e0c <UART_SetConfig+0x148>
 8006dec:	2300      	movs	r3, #0
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df2:	e012      	b.n	8006e1a <UART_SetConfig+0x156>
 8006df4:	2302      	movs	r3, #2
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfa:	e00e      	b.n	8006e1a <UART_SetConfig+0x156>
 8006dfc:	2304      	movs	r3, #4
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e02:	e00a      	b.n	8006e1a <UART_SetConfig+0x156>
 8006e04:	2308      	movs	r3, #8
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0a:	e006      	b.n	8006e1a <UART_SetConfig+0x156>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e12:	e002      	b.n	8006e1a <UART_SetConfig+0x156>
 8006e14:	2310      	movs	r3, #16
 8006e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a65      	ldr	r2, [pc, #404]	; (8006fb4 <UART_SetConfig+0x2f0>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	f040 8097 	bne.w	8006f54 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d823      	bhi.n	8006e76 <UART_SetConfig+0x1b2>
 8006e2e:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x170>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e77 	.word	0x08006e77
 8006e3c:	08006e61 	.word	0x08006e61
 8006e40:	08006e77 	.word	0x08006e77
 8006e44:	08006e67 	.word	0x08006e67
 8006e48:	08006e77 	.word	0x08006e77
 8006e4c:	08006e77 	.word	0x08006e77
 8006e50:	08006e77 	.word	0x08006e77
 8006e54:	08006e6f 	.word	0x08006e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7fe fc0a 	bl	8005670 <HAL_RCC_GetPCLK1Freq>
 8006e5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e5e:	e010      	b.n	8006e82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e60:	4b56      	ldr	r3, [pc, #344]	; (8006fbc <UART_SetConfig+0x2f8>)
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e64:	e00d      	b.n	8006e82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e66:	f7fe fb83 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8006e6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e6c:	e009      	b.n	8006e82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e74:	e005      	b.n	8006e82 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 812b 	beq.w	80070e0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	4a4c      	ldr	r2, [pc, #304]	; (8006fc0 <UART_SetConfig+0x2fc>)
 8006e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e94:	461a      	mov	r2, r3
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	4413      	add	r3, r2
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d305      	bcc.n	8006eba <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d903      	bls.n	8006ec2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ec0:	e10e      	b.n	80070e0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	60bb      	str	r3, [r7, #8]
 8006ec8:	60fa      	str	r2, [r7, #12]
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	4a3c      	ldr	r2, [pc, #240]	; (8006fc0 <UART_SetConfig+0x2fc>)
 8006ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	603b      	str	r3, [r7, #0]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ee4:	f7f9 fd92 	bl	8000a0c <__aeabi_uldivmod>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4610      	mov	r0, r2
 8006eee:	4619      	mov	r1, r3
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	020b      	lsls	r3, r1, #8
 8006efa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006efe:	0202      	lsls	r2, r0, #8
 8006f00:	6979      	ldr	r1, [r7, #20]
 8006f02:	6849      	ldr	r1, [r1, #4]
 8006f04:	0849      	lsrs	r1, r1, #1
 8006f06:	2000      	movs	r0, #0
 8006f08:	460c      	mov	r4, r1
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	eb12 0804 	adds.w	r8, r2, r4
 8006f10:	eb43 0905 	adc.w	r9, r3, r5
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	469a      	mov	sl, r3
 8006f1c:	4693      	mov	fp, r2
 8006f1e:	4652      	mov	r2, sl
 8006f20:	465b      	mov	r3, fp
 8006f22:	4640      	mov	r0, r8
 8006f24:	4649      	mov	r1, r9
 8006f26:	f7f9 fd71 	bl	8000a0c <__aeabi_uldivmod>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4613      	mov	r3, r2
 8006f30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f38:	d308      	bcc.n	8006f4c <UART_SetConfig+0x288>
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f40:	d204      	bcs.n	8006f4c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6a3a      	ldr	r2, [r7, #32]
 8006f48:	60da      	str	r2, [r3, #12]
 8006f4a:	e0c9      	b.n	80070e0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f52:	e0c5      	b.n	80070e0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f5c:	d16d      	bne.n	800703a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f62:	3b01      	subs	r3, #1
 8006f64:	2b07      	cmp	r3, #7
 8006f66:	d82d      	bhi.n	8006fc4 <UART_SetConfig+0x300>
 8006f68:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <UART_SetConfig+0x2ac>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006f91 	.word	0x08006f91
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006fc5 	.word	0x08006fc5
 8006f7c:	08006f9f 	.word	0x08006f9f
 8006f80:	08006fc5 	.word	0x08006fc5
 8006f84:	08006fc5 	.word	0x08006fc5
 8006f88:	08006fc5 	.word	0x08006fc5
 8006f8c:	08006fa7 	.word	0x08006fa7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f90:	f7fe fb84 	bl	800569c <HAL_RCC_GetPCLK2Freq>
 8006f94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f96:	e01b      	b.n	8006fd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f98:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <UART_SetConfig+0x2f8>)
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f9c:	e018      	b.n	8006fd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f9e:	f7fe fae7 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8006fa2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fa4:	e014      	b.n	8006fd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fac:	e010      	b.n	8006fd0 <UART_SetConfig+0x30c>
 8006fae:	bf00      	nop
 8006fb0:	cfff69f3 	.word	0xcfff69f3
 8006fb4:	40008000 	.word	0x40008000
 8006fb8:	40013800 	.word	0x40013800
 8006fbc:	00f42400 	.word	0x00f42400
 8006fc0:	0800ef84 	.word	0x0800ef84
      default:
        pclk = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 8084 	beq.w	80070e0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	4a4b      	ldr	r2, [pc, #300]	; (800710c <UART_SetConfig+0x448>)
 8006fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fea:	005a      	lsls	r2, r3, #1
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	441a      	add	r2, r3
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	2b0f      	cmp	r3, #15
 8007002:	d916      	bls.n	8007032 <UART_SetConfig+0x36e>
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700a:	d212      	bcs.n	8007032 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f023 030f 	bic.w	r3, r3, #15
 8007014:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	b29b      	uxth	r3, r3
 800701c:	f003 0307 	and.w	r3, r3, #7
 8007020:	b29a      	uxth	r2, r3
 8007022:	8bfb      	ldrh	r3, [r7, #30]
 8007024:	4313      	orrs	r3, r2
 8007026:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	8bfa      	ldrh	r2, [r7, #30]
 800702e:	60da      	str	r2, [r3, #12]
 8007030:	e056      	b.n	80070e0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007038:	e052      	b.n	80070e0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800703a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800703e:	3b01      	subs	r3, #1
 8007040:	2b07      	cmp	r3, #7
 8007042:	d822      	bhi.n	800708a <UART_SetConfig+0x3c6>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x388>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	0800706d 	.word	0x0800706d
 8007050:	08007075 	.word	0x08007075
 8007054:	0800708b 	.word	0x0800708b
 8007058:	0800707b 	.word	0x0800707b
 800705c:	0800708b 	.word	0x0800708b
 8007060:	0800708b 	.word	0x0800708b
 8007064:	0800708b 	.word	0x0800708b
 8007068:	08007083 	.word	0x08007083
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800706c:	f7fe fb16 	bl	800569c <HAL_RCC_GetPCLK2Freq>
 8007070:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007072:	e010      	b.n	8007096 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007074:	4b26      	ldr	r3, [pc, #152]	; (8007110 <UART_SetConfig+0x44c>)
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007078:	e00d      	b.n	8007096 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800707a:	f7fe fa79 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 800707e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007080:	e009      	b.n	8007096 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007088:	e005      	b.n	8007096 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007094:	bf00      	nop
    }

    if (pclk != 0U)
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	d021      	beq.n	80070e0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	4a1a      	ldr	r2, [pc, #104]	; (800710c <UART_SetConfig+0x448>)
 80070a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070a6:	461a      	mov	r2, r3
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	441a      	add	r2, r3
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80070be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	2b0f      	cmp	r3, #15
 80070c4:	d909      	bls.n	80070da <UART_SetConfig+0x416>
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070cc:	d205      	bcs.n	80070da <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60da      	str	r2, [r3, #12]
 80070d8:	e002      	b.n	80070e0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2200      	movs	r2, #0
 80070f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2200      	movs	r2, #0
 80070fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80070fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007100:	4618      	mov	r0, r3
 8007102:	3730      	adds	r7, #48	; 0x30
 8007104:	46bd      	mov	sp, r7
 8007106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800710a:	bf00      	nop
 800710c:	0800ef84 	.word	0x0800ef84
 8007110:	00f42400 	.word	0x00f42400

08007114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00a      	beq.n	8007182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	f003 0310 	and.w	r3, r3, #16
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	f003 0320 	and.w	r3, r3, #32
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00a      	beq.n	80071e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01a      	beq.n	800722a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007212:	d10a      	bne.n	800722a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	605a      	str	r2, [r3, #4]
  }
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b098      	sub	sp, #96	; 0x60
 800725c:	af02      	add	r7, sp, #8
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007268:	f7fc f9b4 	bl	80035d4 <HAL_GetTick>
 800726c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0308 	and.w	r3, r3, #8
 8007278:	2b08      	cmp	r3, #8
 800727a:	d12f      	bne.n	80072dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800727c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007284:	2200      	movs	r2, #0
 8007286:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f88e 	bl	80073ac <UART_WaitOnFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d022      	beq.n	80072dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	e853 3f00 	ldrex	r3, [r3]
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072aa:	653b      	str	r3, [r7, #80]	; 0x50
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	461a      	mov	r2, r3
 80072b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072b4:	647b      	str	r3, [r7, #68]	; 0x44
 80072b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e6      	bne.n	8007296 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e063      	b.n	80073a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0304 	and.w	r3, r3, #4
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d149      	bne.n	800737e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f2:	2200      	movs	r2, #0
 80072f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f857 	bl	80073ac <UART_WaitOnFlagUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d03c      	beq.n	800737e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	623b      	str	r3, [r7, #32]
   return(result);
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007322:	633b      	str	r3, [r7, #48]	; 0x30
 8007324:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e6      	bne.n	8007304 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3308      	adds	r3, #8
 800733c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	60fb      	str	r3, [r7, #12]
   return(result);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f023 0301 	bic.w	r3, r3, #1
 800734c:	64bb      	str	r3, [r7, #72]	; 0x48
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3308      	adds	r3, #8
 8007354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007356:	61fa      	str	r2, [r7, #28]
 8007358:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	69b9      	ldr	r1, [r7, #24]
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	617b      	str	r3, [r7, #20]
   return(result);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e5      	bne.n	8007336 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e012      	b.n	80073a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3758      	adds	r7, #88	; 0x58
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	603b      	str	r3, [r7, #0]
 80073b8:	4613      	mov	r3, r2
 80073ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073bc:	e04f      	b.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d04b      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c6:	f7fc f905 	bl	80035d4 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d302      	bcc.n	80073dc <UART_WaitOnFlagUntilTimeout+0x30>
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e04e      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0304 	and.w	r3, r3, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d037      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2b80      	cmp	r3, #128	; 0x80
 80073f2:	d034      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d031      	beq.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	f003 0308 	and.w	r3, r3, #8
 8007404:	2b08      	cmp	r3, #8
 8007406:	d110      	bne.n	800742a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2208      	movs	r2, #8
 800740e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 f879 	bl	8007508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2208      	movs	r2, #8
 800741a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e029      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007438:	d111      	bne.n	800745e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 f85f 	bl	8007508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2220      	movs	r2, #32
 800744e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e00f      	b.n	800747e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	69da      	ldr	r2, [r3, #28]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4013      	ands	r3, r2
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	bf0c      	ite	eq
 800746e:	2301      	moveq	r3, #1
 8007470:	2300      	movne	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	461a      	mov	r2, r3
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	429a      	cmp	r2, r3
 800747a:	d0a0      	beq.n	80073be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007486:	b480      	push	{r7}
 8007488:	b08f      	sub	sp, #60	; 0x3c
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	61fb      	str	r3, [r7, #28]
   return(result);
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e6      	bne.n	800748e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3308      	adds	r3, #8
 80074c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80074d6:	633b      	str	r3, [r7, #48]	; 0x30
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3308      	adds	r3, #8
 80074de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e0:	61ba      	str	r2, [r7, #24]
 80074e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6979      	ldr	r1, [r7, #20]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	613b      	str	r3, [r7, #16]
   return(result);
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e5      	bne.n	80074c0 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80074fc:	bf00      	nop
 80074fe:	373c      	adds	r7, #60	; 0x3c
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007508:	b480      	push	{r7}
 800750a:	b095      	sub	sp, #84	; 0x54
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007518:	e853 3f00 	ldrex	r3, [r3]
 800751c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007524:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752e:	643b      	str	r3, [r7, #64]	; 0x40
 8007530:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e6      	bne.n	8007510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3308      	adds	r3, #8
 8007548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	61fb      	str	r3, [r7, #28]
   return(result);
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	64bb      	str	r3, [r7, #72]	; 0x48
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3308      	adds	r3, #8
 8007564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007568:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800756c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e3      	bne.n	8007542 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800757e:	2b01      	cmp	r3, #1
 8007580:	d118      	bne.n	80075b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	f023 0310 	bic.w	r3, r3, #16
 8007596:	647b      	str	r3, [r7, #68]	; 0x44
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a0:	61bb      	str	r3, [r7, #24]
 80075a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6979      	ldr	r1, [r7, #20]
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	613b      	str	r3, [r7, #16]
   return(result);
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e6      	bne.n	8007582 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80075c8:	bf00      	nop
 80075ca:	3754      	adds	r7, #84	; 0x54
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b090      	sub	sp, #64	; 0x40
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d137      	bne.n	8007660 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80075f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3308      	adds	r3, #8
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	623b      	str	r3, [r7, #32]
   return(result);
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3308      	adds	r3, #8
 8007616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007618:	633a      	str	r2, [r7, #48]	; 0x30
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800761e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e5      	bne.n	80075f8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800762c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	60fb      	str	r3, [r7, #12]
   return(result);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007640:	637b      	str	r3, [r7, #52]	; 0x34
 8007642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	69b9      	ldr	r1, [r7, #24]
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	617b      	str	r3, [r7, #20]
   return(result);
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e6      	bne.n	800762c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800765e:	e002      	b.n	8007666 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007660:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007662:	f7fa ff65 	bl	8002530 <HAL_UART_TxCpltCallback>
}
 8007666:	bf00      	nop
 8007668:	3740      	adds	r7, #64	; 0x40
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff fb01 	bl	8006c84 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b086      	sub	sp, #24
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800769e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b2:	2b80      	cmp	r3, #128	; 0x80
 80076b4:	d109      	bne.n	80076ca <UART_DMAError+0x40>
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2b21      	cmp	r3, #33	; 0x21
 80076ba:	d106      	bne.n	80076ca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2200      	movs	r2, #0
 80076c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80076c4:	6978      	ldr	r0, [r7, #20]
 80076c6:	f7ff fede 	bl	8007486 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d4:	2b40      	cmp	r3, #64	; 0x40
 80076d6:	d109      	bne.n	80076ec <UART_DMAError+0x62>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b22      	cmp	r3, #34	; 0x22
 80076dc:	d106      	bne.n	80076ec <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80076e6:	6978      	ldr	r0, [r7, #20]
 80076e8:	f7ff ff0e 	bl	8007508 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f2:	f043 0210 	orr.w	r2, r3, #16
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076fc:	6978      	ldr	r0, [r7, #20]
 80076fe:	f7ff facb 	bl	8006c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007702:	bf00      	nop
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f7ff fab5 	bl	8006c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800772e:	bf00      	nop
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b088      	sub	sp, #32
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	60bb      	str	r3, [r7, #8]
   return(result);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007760:	6979      	ldr	r1, [r7, #20]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	e841 2300 	strex	r3, r2, [r1]
 8007768:	613b      	str	r3, [r7, #16]
   return(result);
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d1e6      	bne.n	800773e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2220      	movs	r2, #32
 8007774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fa fed6 	bl	8002530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007784:	bf00      	nop
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d101      	bne.n	80077de <HAL_UARTEx_DisableFifoMode+0x16>
 80077da:	2302      	movs	r3, #2
 80077dc:	e027      	b.n	800782e <HAL_UARTEx_DisableFifoMode+0x66>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2224      	movs	r2, #36	; 0x24
 80077ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0201 	bic.w	r2, r2, #1
 8007804:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800780c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800784a:	2b01      	cmp	r3, #1
 800784c:	d101      	bne.n	8007852 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800784e:	2302      	movs	r3, #2
 8007850:	e02d      	b.n	80078ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2224      	movs	r2, #36	; 0x24
 800785e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0201 	bic.w	r2, r2, #1
 8007878:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f850 	bl	8007934 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d101      	bne.n	80078ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078ca:	2302      	movs	r3, #2
 80078cc:	e02d      	b.n	800792a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2224      	movs	r2, #36	; 0x24
 80078da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0201 	bic.w	r2, r2, #1
 80078f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f812 	bl	8007934 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007940:	2b00      	cmp	r3, #0
 8007942:	d108      	bne.n	8007956 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007954:	e031      	b.n	80079ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007956:	2308      	movs	r3, #8
 8007958:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800795a:	2308      	movs	r3, #8
 800795c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	0e5b      	lsrs	r3, r3, #25
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	0f5b      	lsrs	r3, r3, #29
 8007976:	b2db      	uxtb	r3, r3
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	7b3a      	ldrb	r2, [r7, #12]
 8007982:	4911      	ldr	r1, [pc, #68]	; (80079c8 <UARTEx_SetNbDataToProcess+0x94>)
 8007984:	5c8a      	ldrb	r2, [r1, r2]
 8007986:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800798a:	7b3a      	ldrb	r2, [r7, #12]
 800798c:	490f      	ldr	r1, [pc, #60]	; (80079cc <UARTEx_SetNbDataToProcess+0x98>)
 800798e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007990:	fb93 f3f2 	sdiv	r3, r3, r2
 8007994:	b29a      	uxth	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	7b7a      	ldrb	r2, [r7, #13]
 80079a0:	4909      	ldr	r1, [pc, #36]	; (80079c8 <UARTEx_SetNbDataToProcess+0x94>)
 80079a2:	5c8a      	ldrb	r2, [r1, r2]
 80079a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80079a8:	7b7a      	ldrb	r2, [r7, #13]
 80079aa:	4908      	ldr	r1, [pc, #32]	; (80079cc <UARTEx_SetNbDataToProcess+0x98>)
 80079ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80079ba:	bf00      	nop
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	0800ef9c 	.word	0x0800ef9c
 80079cc:	0800efa4 	.word	0x0800efa4

080079d0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b0cc      	sub	sp, #304	; 0x130
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4602      	mov	r2, r0
 80079d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079dc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80079e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80079e2:	f107 0310 	add.w	r3, r7, #16
 80079e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80079ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ee:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80079fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a00:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a04:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007a08:	7812      	ldrb	r2, [r2, #0]
 8007a0a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007a0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a10:	3301      	adds	r3, #1
 8007a12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a1a:	2218      	movs	r2, #24
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f001 f8c9 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a24:	233f      	movs	r3, #63	; 0x3f
 8007a26:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007a2a:	2385      	movs	r3, #133	; 0x85
 8007a2c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a30:	f107 0310 	add.w	r3, r7, #16
 8007a34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007a40:	f107 030f 	add.w	r3, r7, #15
 8007a44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a52:	2100      	movs	r1, #0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f001 fb5b 	bl	8009110 <hci_send_req>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	da01      	bge.n	8007a64 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007a60:	23ff      	movs	r3, #255	; 0xff
 8007a62:	e004      	b.n	8007a6e <aci_gap_set_io_capability+0x9e>
  return status;
 8007a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a68:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a6c:	781b      	ldrb	r3, [r3, #0]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007a78:	b5b0      	push	{r4, r5, r7, lr}
 8007a7a:	b0cc      	sub	sp, #304	; 0x130
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4605      	mov	r5, r0
 8007a80:	460c      	mov	r4, r1
 8007a82:	4610      	mov	r0, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007a8e:	462a      	mov	r2, r5
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a96:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	701a      	strb	r2, [r3, #0]
 8007aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ab2:	460a      	mov	r2, r1
 8007ab4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007ab6:	f107 0310 	add.w	r3, r7, #16
 8007aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007aca:	2300      	movs	r3, #0
 8007acc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ad4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ad8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007adc:	7812      	ldrb	r2, [r2, #0]
 8007ade:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007af2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007af6:	7812      	ldrb	r2, [r2, #0]
 8007af8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007afa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007afe:	3301      	adds	r3, #1
 8007b00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b0c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007b10:	7812      	ldrb	r2, [r2, #0]
 8007b12:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b26:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007b2a:	7812      	ldrb	r2, [r2, #0]
 8007b2c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b32:	3301      	adds	r3, #1
 8007b34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b3c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007b40:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007b42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b46:	3301      	adds	r3, #1
 8007b48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b50:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007b54:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007b56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b64:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007b68:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b6e:	3301      	adds	r3, #1
 8007b70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b78:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007b7c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007b80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b84:	3304      	adds	r3, #4
 8007b86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007b92:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007b94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b98:	3301      	adds	r3, #1
 8007b9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ba2:	2218      	movs	r2, #24
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f001 f805 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007bac:	233f      	movs	r3, #63	; 0x3f
 8007bae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007bb2:	2386      	movs	r3, #134	; 0x86
 8007bb4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007bb8:	f107 0310 	add.w	r3, r7, #16
 8007bbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007bc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bc4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007bc8:	f107 030f 	add.w	r3, r7, #15
 8007bcc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f001 fa97 	bl	8009110 <hci_send_req>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	da01      	bge.n	8007bec <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007be8:	23ff      	movs	r3, #255	; 0xff
 8007bea:	e004      	b.n	8007bf6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007bf4:	781b      	ldrb	r3, [r3, #0]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bdb0      	pop	{r4, r5, r7, pc}

08007c00 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007c00:	b590      	push	{r4, r7, lr}
 8007c02:	b0cd      	sub	sp, #308	; 0x134
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4604      	mov	r4, r0
 8007c08:	4608      	mov	r0, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c10:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007c1e:	4622      	mov	r2, r4
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c26:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c32:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007c36:	460a      	mov	r2, r1
 8007c38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007c3a:	f107 0310 	add.w	r3, r7, #16
 8007c3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007c42:	f107 0308 	add.w	r3, r7, #8
 8007c46:	2207      	movs	r2, #7
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 ffb3 	bl	8008bb6 <Osal_MemSet>
  int index_input = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c5e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007c62:	7812      	ldrb	r2, [r2, #0]
 8007c64:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c78:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007c7c:	7812      	ldrb	r2, [r2, #0]
 8007c7e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c84:	3301      	adds	r3, #1
 8007c86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c92:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ca4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ca8:	2218      	movs	r2, #24
 8007caa:	2100      	movs	r1, #0
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 ff82 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007cb2:	233f      	movs	r3, #63	; 0x3f
 8007cb4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007cb8:	238a      	movs	r3, #138	; 0x8a
 8007cba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007cbe:	f107 0310 	add.w	r3, r7, #16
 8007cc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007cce:	f107 0308 	add.w	r3, r7, #8
 8007cd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007cd6:	2307      	movs	r3, #7
 8007cd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 fa14 	bl	8009110 <hci_send_req>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	da01      	bge.n	8007cf2 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007cee:	23ff      	movs	r3, #255	; 0xff
 8007cf0:	e02e      	b.n	8007d50 <aci_gap_init+0x150>
  if ( resp.Status )
 8007cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <aci_gap_init+0x10c>
    return resp.Status;
 8007d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	e021      	b.n	8007d50 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d10:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007d14:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007d2e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007d38:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007d42:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007d4c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd90      	pop	{r4, r7, pc}

08007d5a <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b088      	sub	sp, #32
 8007d5e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d64:	f107 0308 	add.w	r3, r7, #8
 8007d68:	2218      	movs	r2, #24
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 ff22 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d72:	233f      	movs	r3, #63	; 0x3f
 8007d74:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007d76:	2392      	movs	r3, #146	; 0x92
 8007d78:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007d7a:	1dfb      	adds	r3, r7, #7
 8007d7c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d82:	f107 0308 	add.w	r3, r7, #8
 8007d86:	2100      	movs	r1, #0
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 f9c1 	bl	8009110 <hci_send_req>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	da01      	bge.n	8007d98 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007d94:	23ff      	movs	r3, #255	; 0xff
 8007d96:	e000      	b.n	8007d9a <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8007d98:	79fb      	ldrb	r3, [r7, #7]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3720      	adds	r7, #32
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 8007da2:	b5b0      	push	{r4, r5, r7, lr}
 8007da4:	b0cc      	sub	sp, #304	; 0x130
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	4605      	mov	r5, r0
 8007daa:	460c      	mov	r4, r1
 8007dac:	4610      	mov	r0, r2
 8007dae:	4619      	mov	r1, r3
 8007db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007db8:	462a      	mov	r2, r5
 8007dba:	801a      	strh	r2, [r3, #0]
 8007dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	801a      	strh	r2, [r3, #0]
 8007dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dcc:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007ddc:	460a      	mov	r2, r1
 8007dde:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 8007de0:	f107 0310 	add.w	r3, r7, #16
 8007de4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8007dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e02:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007e06:	8812      	ldrh	r2, [r2, #0]
 8007e08:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007e0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e0e:	3302      	adds	r3, #2
 8007e10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 8007e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e1c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007e20:	8812      	ldrh	r2, [r2, #0]
 8007e22:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007e24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e28:	3302      	adds	r3, #2
 8007e2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e36:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e42:	3301      	adds	r3, #1
 8007e44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 8007e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e50:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007e54:	7812      	ldrb	r2, [r2, #0]
 8007e56:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e66:	2218      	movs	r2, #24
 8007e68:	2100      	movs	r1, #0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fea3 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e70:	233f      	movs	r3, #63	; 0x3f
 8007e72:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8007e76:	2397      	movs	r3, #151	; 0x97
 8007e78:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8007e7c:	230f      	movs	r3, #15
 8007e7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8007e82:	f107 0310 	add.w	r3, r7, #16
 8007e86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e92:	f107 030f 	add.w	r3, r7, #15
 8007e96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ea0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 f932 	bl	8009110 <hci_send_req>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da01      	bge.n	8007eb6 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 8007eb2:	23ff      	movs	r3, #255	; 0xff
 8007eb4:	e004      	b.n	8007ec0 <aci_gap_start_general_discovery_proc+0x11e>
  return status;
 8007eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ebe:	781b      	ldrb	r3, [r3, #0]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bdb0      	pop	{r4, r5, r7, pc}

08007eca <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 8007eca:	b590      	push	{r4, r7, lr}
 8007ecc:	b0cf      	sub	sp, #316	; 0x13c
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	4608      	mov	r0, r1
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007eda:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007ee4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007ee8:	4622      	mov	r2, r4
 8007eea:	801a      	strh	r2, [r3, #0]
 8007eec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007ef0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	801a      	strh	r2, [r3, #0]
 8007ef8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007efc:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007f00:	460a      	mov	r2, r1
 8007f02:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8007f04:	f107 0318 	add.w	r3, r7, #24
 8007f08:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8007f0c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007f10:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f14:	2200      	movs	r2, #0
 8007f16:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8007f1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f22:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007f26:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007f2a:	8812      	ldrh	r2, [r2, #0]
 8007f2c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007f2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f32:	3302      	adds	r3, #2
 8007f34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 8007f38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f3c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007f40:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007f44:	8812      	ldrh	r2, [r2, #0]
 8007f46:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007f48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f4c:	3302      	adds	r3, #2
 8007f4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 8007f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f56:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007f5a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007f62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f66:	3301      	adds	r3, #1
 8007f68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 8007f6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f70:	1d58      	adds	r0, r3, #5
 8007f72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007f76:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007f7a:	2206      	movs	r2, #6
 8007f7c:	6819      	ldr	r1, [r3, #0]
 8007f7e:	f000 fe0a 	bl	8008b96 <Osal_MemCpy>
  index_input += 6;
 8007f82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f86:	3306      	adds	r3, #6
 8007f88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 8007f8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f90:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007f94:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007f96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8007fa0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007fa4:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8007fa8:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8007faa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fae:	3302      	adds	r3, #2
 8007fb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8007fb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007fb8:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8007fbc:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8007fbe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fc2:	3302      	adds	r3, #2
 8007fc4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 8007fc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007fcc:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8007fd0:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8007fd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fd6:	3302      	adds	r3, #2
 8007fd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 8007fdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007fe0:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8007fe4:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8007fe6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fea:	3302      	adds	r3, #2
 8007fec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8007ff0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007ff4:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007ff8:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8007ffa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ffe:	3302      	adds	r3, #2
 8008000:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8008004:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008008:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800800c:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 800800e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008012:	3302      	adds	r3, #2
 8008014:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008018:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800801c:	2218      	movs	r2, #24
 800801e:	2100      	movs	r1, #0
 8008020:	4618      	mov	r0, r3
 8008022:	f000 fdc8 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008026:	233f      	movs	r3, #63	; 0x3f
 8008028:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 800802c:	239c      	movs	r3, #156	; 0x9c
 800802e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8008032:	230f      	movs	r3, #15
 8008034:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8008038:	f107 0318 	add.w	r3, r7, #24
 800803c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008040:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008044:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8008048:	f107 0317 	add.w	r3, r7, #23
 800804c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008050:	2301      	movs	r3, #1
 8008052:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008056:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f001 f857 	bl	8009110 <hci_send_req>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	da01      	bge.n	800806c <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8008068:	23ff      	movs	r3, #255	; 0xff
 800806a:	e004      	b.n	8008076 <aci_gap_create_connection+0x1ac>
  return status;
 800806c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008070:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008074:	781b      	ldrb	r3, [r3, #0]
}
 8008076:	4618      	mov	r0, r3
 8008078:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800807c:	46bd      	mov	sp, r7
 800807e:	bd90      	pop	{r4, r7, pc}

08008080 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008086:	2300      	movs	r3, #0
 8008088:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800808a:	f107 0308 	add.w	r3, r7, #8
 800808e:	2218      	movs	r2, #24
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fd8f 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008098:	233f      	movs	r3, #63	; 0x3f
 800809a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800809c:	f240 1301 	movw	r3, #257	; 0x101
 80080a0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80080a2:	1dfb      	adds	r3, r7, #7
 80080a4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80080a6:	2301      	movs	r3, #1
 80080a8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080aa:	f107 0308 	add.w	r3, r7, #8
 80080ae:	2100      	movs	r1, #0
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 f82d 	bl	8009110 <hci_send_req>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	da01      	bge.n	80080c0 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80080bc:	23ff      	movs	r3, #255	; 0xff
 80080be:	e000      	b.n	80080c2 <aci_gatt_init+0x42>
  return status;
 80080c0:	79fb      	ldrb	r3, [r7, #7]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3720      	adds	r7, #32
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80080ca:	b5b0      	push	{r4, r5, r7, lr}
 80080cc:	b0cc      	sub	sp, #304	; 0x130
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	4605      	mov	r5, r0
 80080d2:	460c      	mov	r4, r1
 80080d4:	4610      	mov	r0, r2
 80080d6:	4619      	mov	r1, r3
 80080d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080dc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80080e0:	462a      	mov	r2, r5
 80080e2:	801a      	strh	r2, [r3, #0]
 80080e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ec:	4622      	mov	r2, r4
 80080ee:	801a      	strh	r2, [r3, #0]
 80080f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80080f8:	4602      	mov	r2, r0
 80080fa:	701a      	strb	r2, [r3, #0]
 80080fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008100:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008104:	460a      	mov	r2, r1
 8008106:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008108:	f107 0310 	add.w	r3, r7, #16
 800810c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008114:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008118:	2200      	movs	r2, #0
 800811a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008126:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800812a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800812e:	8812      	ldrh	r2, [r2, #0]
 8008130:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008132:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008136:	3302      	adds	r3, #2
 8008138:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800813c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008140:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008144:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008148:	8812      	ldrh	r2, [r2, #0]
 800814a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800814c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008150:	3302      	adds	r3, #2
 8008152:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800815a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800815e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008162:	7812      	ldrb	r2, [r2, #0]
 8008164:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008166:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800816a:	3301      	adds	r3, #1
 800816c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008174:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008178:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800817c:	7812      	ldrb	r2, [r2, #0]
 800817e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008180:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008184:	3301      	adds	r3, #1
 8008186:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800818a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800818e:	1d98      	adds	r0, r3, #6
 8008190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008194:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80081a0:	f000 fcf9 	bl	8008b96 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80081a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80081b2:	4413      	add	r3, r2
 80081b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081bc:	2218      	movs	r2, #24
 80081be:	2100      	movs	r1, #0
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fcf8 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081c6:	233f      	movs	r3, #63	; 0x3f
 80081c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80081cc:	f44f 7383 	mov.w	r3, #262	; 0x106
 80081d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80081d4:	f107 0310 	add.w	r3, r7, #16
 80081d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80081dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80081e4:	f107 030f 	add.w	r3, r7, #15
 80081e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80081ec:	2301      	movs	r3, #1
 80081ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081f6:	2100      	movs	r1, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 ff89 	bl	8009110 <hci_send_req>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	da01      	bge.n	8008208 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008204:	23ff      	movs	r3, #255	; 0xff
 8008206:	e004      	b.n	8008212 <aci_gatt_update_char_value+0x148>
  return status;
 8008208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008210:	781b      	ldrb	r3, [r3, #0]
}
 8008212:	4618      	mov	r0, r3
 8008214:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008218:	46bd      	mov	sp, r7
 800821a:	bdb0      	pop	{r4, r5, r7, pc}

0800821c <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b0cc      	sub	sp, #304	; 0x130
 8008220:	af00      	add	r7, sp, #0
 8008222:	4602      	mov	r2, r0
 8008224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008228:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800822c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 800822e:	f107 0310 	add.w	r3, r7, #16
 8008232:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800824c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008250:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008254:	8812      	ldrh	r2, [r2, #0]
 8008256:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008258:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800825c:	3302      	adds	r3, #2
 800825e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008262:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008266:	2218      	movs	r2, #24
 8008268:	2100      	movs	r1, #0
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fca3 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008270:	233f      	movs	r3, #63	; 0x3f
 8008272:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 8008276:	f44f 7389 	mov.w	r3, #274	; 0x112
 800827a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800827e:	230f      	movs	r3, #15
 8008280:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008284:	f107 0310 	add.w	r3, r7, #16
 8008288:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800828c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008290:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008294:	f107 030f 	add.w	r3, r7, #15
 8008298:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800829c:	2301      	movs	r3, #1
 800829e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082a6:	2100      	movs	r1, #0
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 ff31 	bl	8009110 <hci_send_req>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da01      	bge.n	80082b8 <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 80082b4:	23ff      	movs	r3, #255	; 0xff
 80082b6:	e004      	b.n	80082c2 <aci_gatt_disc_all_primary_services+0xa6>
  return status;
 80082b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082bc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80082c0:	781b      	ldrb	r3, [r3, #0]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 80082cc:	b590      	push	{r4, r7, lr}
 80082ce:	b0cd      	sub	sp, #308	; 0x134
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	4611      	mov	r1, r2
 80082d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082dc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80082e0:	4622      	mov	r2, r4
 80082e2:	801a      	strh	r2, [r3, #0]
 80082e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ec:	4602      	mov	r2, r0
 80082ee:	801a      	strh	r2, [r3, #0]
 80082f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80082f8:	460a      	mov	r2, r1
 80082fa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 80082fc:	f107 0310 	add.w	r3, r7, #16
 8008300:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008308:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800830c:	2200      	movs	r2, #0
 800830e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008310:	2300      	movs	r3, #0
 8008312:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800831a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800831e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008322:	8812      	ldrh	r2, [r2, #0]
 8008324:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800832a:	3302      	adds	r3, #2
 800832c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 8008330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008334:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008338:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800833c:	8812      	ldrh	r2, [r2, #0]
 800833e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008340:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008344:	3302      	adds	r3, #2
 8008346:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 800834a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800834e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008352:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008356:	8812      	ldrh	r2, [r2, #0]
 8008358:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800835a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800835e:	3302      	adds	r3, #2
 8008360:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008364:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008368:	2218      	movs	r2, #24
 800836a:	2100      	movs	r1, #0
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fc22 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008372:	233f      	movs	r3, #63	; 0x3f
 8008374:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 8008378:	f240 1315 	movw	r3, #277	; 0x115
 800837c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008380:	230f      	movs	r3, #15
 8008382:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008386:	f107 0310 	add.w	r3, r7, #16
 800838a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800838e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008392:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008396:	f107 030f 	add.w	r3, r7, #15
 800839a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800839e:	2301      	movs	r3, #1
 80083a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80083a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083a8:	2100      	movs	r1, #0
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 feb0 	bl	8009110 <hci_send_req>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	da01      	bge.n	80083ba <aci_gatt_disc_all_char_of_service+0xee>
    return BLE_STATUS_TIMEOUT;
 80083b6:	23ff      	movs	r3, #255	; 0xff
 80083b8:	e004      	b.n	80083c4 <aci_gatt_disc_all_char_of_service+0xf8>
  return status;
 80083ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80083c2:	781b      	ldrb	r3, [r3, #0]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd90      	pop	{r4, r7, pc}

080083ce <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 80083ce:	b590      	push	{r4, r7, lr}
 80083d0:	b0cd      	sub	sp, #308	; 0x134
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	4604      	mov	r4, r0
 80083d6:	4608      	mov	r0, r1
 80083d8:	4611      	mov	r1, r2
 80083da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80083e2:	4622      	mov	r2, r4
 80083e4:	801a      	strh	r2, [r3, #0]
 80083e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083ee:	4602      	mov	r2, r0
 80083f0:	801a      	strh	r2, [r3, #0]
 80083f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80083fa:	460a      	mov	r2, r1
 80083fc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 80083fe:	f107 0310 	add.w	r3, r7, #16
 8008402:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800840a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800840e:	2200      	movs	r2, #0
 8008410:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800841c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008420:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008424:	8812      	ldrh	r2, [r2, #0]
 8008426:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008428:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800842c:	3302      	adds	r3, #2
 800842e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008436:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800843a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800843e:	8812      	ldrh	r2, [r2, #0]
 8008440:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008442:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008446:	3302      	adds	r3, #2
 8008448:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 800844c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008450:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008454:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008458:	8812      	ldrh	r2, [r2, #0]
 800845a:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800845c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008460:	3302      	adds	r3, #2
 8008462:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008466:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800846a:	2218      	movs	r2, #24
 800846c:	2100      	movs	r1, #0
 800846e:	4618      	mov	r0, r3
 8008470:	f000 fba1 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008474:	233f      	movs	r3, #63	; 0x3f
 8008476:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 800847a:	f240 1317 	movw	r3, #279	; 0x117
 800847e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008482:	230f      	movs	r3, #15
 8008484:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008488:	f107 0310 	add.w	r3, r7, #16
 800848c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008490:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008494:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008498:	f107 030f 	add.w	r3, r7, #15
 800849c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80084a0:	2301      	movs	r3, #1
 80084a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084aa:	2100      	movs	r1, #0
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 fe2f 	bl	8009110 <hci_send_req>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	da01      	bge.n	80084bc <aci_gatt_disc_all_char_desc+0xee>
    return BLE_STATUS_TIMEOUT;
 80084b8:	23ff      	movs	r3, #255	; 0xff
 80084ba:	e004      	b.n	80084c6 <aci_gatt_disc_all_char_desc+0xf8>
  return status;
 80084bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80084c4:	781b      	ldrb	r3, [r3, #0]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd90      	pop	{r4, r7, pc}

080084d0 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 80084d0:	b590      	push	{r4, r7, lr}
 80084d2:	b0cf      	sub	sp, #316	; 0x13c
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4604      	mov	r4, r0
 80084d8:	4608      	mov	r0, r1
 80084da:	4611      	mov	r1, r2
 80084dc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80084e0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80084ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80084ee:	4622      	mov	r2, r4
 80084f0:	801a      	strh	r2, [r3, #0]
 80084f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80084f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084fa:	4602      	mov	r2, r0
 80084fc:	801a      	strh	r2, [r3, #0]
 80084fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008502:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008506:	460a      	mov	r2, r1
 8008508:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800850a:	f107 0318 	add.w	r3, r7, #24
 800850e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008512:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008516:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800851a:	2200      	movs	r2, #0
 800851c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008524:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008528:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800852c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008530:	8812      	ldrh	r2, [r2, #0]
 8008532:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008534:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008538:	3302      	adds	r3, #2
 800853a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 800853e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008542:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008546:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800854a:	8812      	ldrh	r2, [r2, #0]
 800854c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800854e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008552:	3302      	adds	r3, #2
 8008554:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8008558:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800855c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008560:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008564:	7812      	ldrb	r2, [r2, #0]
 8008566:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008568:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800856c:	3301      	adds	r3, #1
 800856e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8008572:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008576:	1d58      	adds	r0, r3, #5
 8008578:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800857c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008580:	781a      	ldrb	r2, [r3, #0]
 8008582:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008586:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800858a:	6819      	ldr	r1, [r3, #0]
 800858c:	f000 fb03 	bl	8008b96 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8008590:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008594:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800859e:	4413      	add	r3, r2
 80085a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085a8:	2218      	movs	r2, #24
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fb02 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80085b2:	233f      	movs	r3, #63	; 0x3f
 80085b4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 80085b8:	f240 1321 	movw	r3, #289	; 0x121
 80085bc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 80085c0:	230f      	movs	r3, #15
 80085c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 80085c6:	f107 0318 	add.w	r3, r7, #24
 80085ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80085ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 80085d6:	f107 0317 	add.w	r3, r7, #23
 80085da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 80085de:	2301      	movs	r3, #1
 80085e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f000 fd90 	bl	8009110 <hci_send_req>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	da01      	bge.n	80085fa <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 80085f6:	23ff      	movs	r3, #255	; 0xff
 80085f8:	e004      	b.n	8008604 <aci_gatt_write_char_desc+0x134>
  return status;
 80085fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80085fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008602:	781b      	ldrb	r3, [r3, #0]
}
 8008604:	4618      	mov	r0, r3
 8008606:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800860a:	46bd      	mov	sp, r7
 800860c:	bd90      	pop	{r4, r7, pc}

0800860e <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 800860e:	b590      	push	{r4, r7, lr}
 8008610:	b0cf      	sub	sp, #316	; 0x13c
 8008612:	af00      	add	r7, sp, #0
 8008614:	4604      	mov	r4, r0
 8008616:	4608      	mov	r0, r1
 8008618:	4611      	mov	r1, r2
 800861a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800861e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008622:	6013      	str	r3, [r2, #0]
 8008624:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008628:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800862c:	4622      	mov	r2, r4
 800862e:	801a      	strh	r2, [r3, #0]
 8008630:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008638:	4602      	mov	r2, r0
 800863a:	801a      	strh	r2, [r3, #0]
 800863c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008640:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008644:	460a      	mov	r2, r1
 8008646:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 8008648:	f107 0318 	add.w	r3, r7, #24
 800864c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008650:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008654:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008658:	2200      	movs	r2, #0
 800865a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800865c:	2300      	movs	r3, #0
 800865e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008662:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008666:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800866a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800866e:	8812      	ldrh	r2, [r2, #0]
 8008670:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008672:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008676:	3302      	adds	r3, #2
 8008678:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 800867c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008680:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008684:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008688:	8812      	ldrh	r2, [r2, #0]
 800868a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800868c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008690:	3302      	adds	r3, #2
 8008692:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8008696:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800869a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800869e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80086a2:	7812      	ldrb	r2, [r2, #0]
 80086a4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80086a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80086aa:	3301      	adds	r3, #1
 80086ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 80086b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086b4:	1d58      	adds	r0, r3, #5
 80086b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086ba:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80086be:	781a      	ldrb	r2, [r3, #0]
 80086c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80086c8:	6819      	ldr	r1, [r3, #0]
 80086ca:	f000 fa64 	bl	8008b96 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 80086ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086d2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80086dc:	4413      	add	r3, r2
 80086de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80086e6:	2218      	movs	r2, #24
 80086e8:	2100      	movs	r1, #0
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 fa63 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80086f0:	233f      	movs	r3, #63	; 0x3f
 80086f2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 80086f6:	f240 1323 	movw	r3, #291	; 0x123
 80086fa:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80086fe:	f107 0318 	add.w	r3, r7, #24
 8008702:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008706:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800870a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800870e:	f107 0317 	add.w	r3, r7, #23
 8008712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008716:	2301      	movs	r3, #1
 8008718:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800871c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008720:	2100      	movs	r1, #0
 8008722:	4618      	mov	r0, r3
 8008724:	f000 fcf4 	bl	8009110 <hci_send_req>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	da01      	bge.n	8008732 <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 800872e:	23ff      	movs	r3, #255	; 0xff
 8008730:	e004      	b.n	800873c <aci_gatt_write_without_resp+0x12e>
  return status;
 8008732:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008736:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800873a:	781b      	ldrb	r3, [r3, #0]
}
 800873c:	4618      	mov	r0, r3
 800873e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008742:	46bd      	mov	sp, r7
 8008744:	bd90      	pop	{r4, r7, pc}

08008746 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b0cc      	sub	sp, #304	; 0x130
 800874a:	af00      	add	r7, sp, #0
 800874c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008750:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800875e:	4602      	mov	r2, r0
 8008760:	701a      	strb	r2, [r3, #0]
 8008762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008766:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800876a:	460a      	mov	r2, r1
 800876c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800876e:	f107 0310 	add.w	r3, r7, #16
 8008772:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800877e:	2200      	movs	r2, #0
 8008780:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008790:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008794:	7812      	ldrb	r2, [r2, #0]
 8008796:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008798:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800879c:	3301      	adds	r3, #1
 800879e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80087a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087aa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80087ae:	7812      	ldrb	r2, [r2, #0]
 80087b0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80087b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087b6:	3301      	adds	r3, #1
 80087b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80087bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087c0:	1c98      	adds	r0, r3, #2
 80087c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80087ca:	781a      	ldrb	r2, [r3, #0]
 80087cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d4:	6819      	ldr	r1, [r3, #0]
 80087d6:	f000 f9de 	bl	8008b96 <Osal_MemCpy>
  index_input += Length;
 80087da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80087e8:	4413      	add	r3, r2
 80087ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087f2:	2218      	movs	r2, #24
 80087f4:	2100      	movs	r1, #0
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f9dd 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80087fc:	233f      	movs	r3, #63	; 0x3f
 80087fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008802:	230c      	movs	r3, #12
 8008804:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008808:	f107 0310 	add.w	r3, r7, #16
 800880c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008810:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008814:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008818:	f107 030f 	add.w	r3, r7, #15
 800881c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008820:	2301      	movs	r3, #1
 8008822:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008826:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800882a:	2100      	movs	r1, #0
 800882c:	4618      	mov	r0, r3
 800882e:	f000 fc6f 	bl	8009110 <hci_send_req>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	da01      	bge.n	800883c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008838:	23ff      	movs	r3, #255	; 0xff
 800883a:	e004      	b.n	8008846 <aci_hal_write_config_data+0x100>
  return status;
 800883c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008840:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008844:	781b      	ldrb	r3, [r3, #0]
}
 8008846:	4618      	mov	r0, r3
 8008848:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b0cc      	sub	sp, #304	; 0x130
 8008854:	af00      	add	r7, sp, #0
 8008856:	4602      	mov	r2, r0
 8008858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008866:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800886a:	460a      	mov	r2, r1
 800886c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800886e:	f107 0310 	add.w	r3, r7, #16
 8008872:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800887e:	2200      	movs	r2, #0
 8008880:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800888c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008890:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008894:	7812      	ldrb	r2, [r2, #0]
 8008896:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008898:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800889c:	3301      	adds	r3, #1
 800889e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80088a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088aa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80088ae:	7812      	ldrb	r2, [r2, #0]
 80088b0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80088b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088b6:	3301      	adds	r3, #1
 80088b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088c0:	2218      	movs	r2, #24
 80088c2:	2100      	movs	r1, #0
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 f976 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80088ca:	233f      	movs	r3, #63	; 0x3f
 80088cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80088d0:	230f      	movs	r3, #15
 80088d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80088d6:	f107 0310 	add.w	r3, r7, #16
 80088da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80088de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80088e6:	f107 030f 	add.w	r3, r7, #15
 80088ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80088ee:	2301      	movs	r3, #1
 80088f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088f8:	2100      	movs	r1, #0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 fc08 	bl	8009110 <hci_send_req>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	da01      	bge.n	800890a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008906:	23ff      	movs	r3, #255	; 0xff
 8008908:	e004      	b.n	8008914 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800890a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008912:	781b      	ldrb	r3, [r3, #0]
}
 8008914:	4618      	mov	r0, r3
 8008916:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b0cc      	sub	sp, #304	; 0x130
 8008922:	af00      	add	r7, sp, #0
 8008924:	4602      	mov	r2, r0
 8008926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800892e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008930:	f107 0310 	add.w	r3, r7, #16
 8008934:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800893c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008940:	2200      	movs	r2, #0
 8008942:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008944:	2300      	movs	r3, #0
 8008946:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800894a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008952:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008956:	8812      	ldrh	r2, [r2, #0]
 8008958:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800895a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800895e:	3302      	adds	r3, #2
 8008960:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008964:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008968:	2218      	movs	r2, #24
 800896a:	2100      	movs	r1, #0
 800896c:	4618      	mov	r0, r3
 800896e:	f000 f922 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008972:	233f      	movs	r3, #63	; 0x3f
 8008974:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008978:	2318      	movs	r3, #24
 800897a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800897e:	f107 0310 	add.w	r3, r7, #16
 8008982:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008986:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800898a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800898e:	f107 030f 	add.w	r3, r7, #15
 8008992:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008996:	2301      	movs	r3, #1
 8008998:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800899c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fbb4 	bl	8009110 <hci_send_req>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da01      	bge.n	80089b2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80089ae:	23ff      	movs	r3, #255	; 0xff
 80089b0:	e004      	b.n	80089bc <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80089b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80089ba:	781b      	ldrb	r3, [r3, #0]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b088      	sub	sp, #32
 80089ca:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089d0:	f107 0308 	add.w	r3, r7, #8
 80089d4:	2218      	movs	r2, #24
 80089d6:	2100      	movs	r1, #0
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 f8ec 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x03;
 80089de:	2303      	movs	r3, #3
 80089e0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80089e2:	2303      	movs	r3, #3
 80089e4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80089e6:	1dfb      	adds	r3, r7, #7
 80089e8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80089ea:	2301      	movs	r3, #1
 80089ec:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089ee:	f107 0308 	add.w	r3, r7, #8
 80089f2:	2100      	movs	r1, #0
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 fb8b 	bl	8009110 <hci_send_req>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	da01      	bge.n	8008a04 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008a00:	23ff      	movs	r3, #255	; 0xff
 8008a02:	e000      	b.n	8008a06 <hci_reset+0x40>
  return status;
 8008a04:	79fb      	ldrb	r3, [r7, #7]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3720      	adds	r7, #32
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 8008a0e:	b5b0      	push	{r4, r5, r7, lr}
 8008a10:	b0cc      	sub	sp, #304	; 0x130
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	4605      	mov	r5, r0
 8008a16:	460c      	mov	r4, r1
 8008a18:	4610      	mov	r0, r2
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a20:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008a24:	462a      	mov	r2, r5
 8008a26:	801a      	strh	r2, [r3, #0]
 8008a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a30:	4622      	mov	r2, r4
 8008a32:	801a      	strh	r2, [r3, #0]
 8008a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a38:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	801a      	strh	r2, [r3, #0]
 8008a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a48:	460a      	mov	r2, r1
 8008a4a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 8008a4c:	f107 0310 	add.w	r3, r7, #16
 8008a50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a58:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a6e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008a72:	8812      	ldrh	r2, [r2, #0]
 8008a74:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a7a:	3302      	adds	r3, #2
 8008a7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a88:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008a8c:	8812      	ldrh	r2, [r2, #0]
 8008a8e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008a90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a94:	3302      	adds	r3, #2
 8008a96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8008a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008aa2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008aa6:	8812      	ldrh	r2, [r2, #0]
 8008aa8:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aae:	3302      	adds	r3, #2
 8008ab0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 8008ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008abc:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008ac0:	8812      	ldrh	r2, [r2, #0]
 8008ac2:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8008ac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ac8:	3302      	adds	r3, #2
 8008aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8008ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad2:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008ad6:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8008ad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008adc:	3302      	adds	r3, #2
 8008ade:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8008ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ae6:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8008aea:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 8008aec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008af0:	3302      	adds	r3, #2
 8008af2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8008af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008afa:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 8008afe:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8008b00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b04:	3302      	adds	r3, #2
 8008b06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 8008b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b0e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008b12:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 8008b14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b18:	3301      	adds	r3, #1
 8008b1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 8008b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b22:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008b26:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 8008b28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b36:	2218      	movs	r2, #24
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f83b 	bl	8008bb6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b40:	233f      	movs	r3, #63	; 0x3f
 8008b42:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 8008b46:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8008b4a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b4e:	f107 0310 	add.w	r3, r7, #16
 8008b52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b5e:	f107 030f 	add.w	r3, r7, #15
 8008b62:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 facc 	bl	8009110 <hci_send_req>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	da01      	bge.n	8008b82 <aci_l2cap_connection_parameter_update_resp+0x174>
    return BLE_STATUS_TIMEOUT;
 8008b7e:	23ff      	movs	r3, #255	; 0xff
 8008b80:	e004      	b.n	8008b8c <aci_l2cap_connection_parameter_update_resp+0x17e>
  return status;
 8008b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b86:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008b8a:	781b      	ldrb	r3, [r3, #0]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bdb0      	pop	{r4, r5, r7, pc}

08008b96 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b084      	sub	sp, #16
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	68b9      	ldr	r1, [r7, #8]
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f004 faeb 	bl	800d182 <memcpy>
 8008bac:	4603      	mov	r3, r0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	68b9      	ldr	r1, [r7, #8]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f004 fa4e 	bl	800d068 <memset>
 8008bcc:	4603      	mov	r3, r0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	af00      	add	r7, sp, #0
  return;
 8008bda:	bf00      	nop
}
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8008be4:	b480      	push	{r7}
 8008be6:	af00      	add	r7, sp, #0
  return;
 8008be8:	bf00      	nop
}
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	af00      	add	r7, sp, #0
  return;
 8008bf6:	bf00      	nop
}
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0
  return;
 8008c04:	bf00      	nop
}
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8008c0e:	b480      	push	{r7}
 8008c10:	af00      	add	r7, sp, #0
  return;
 8008c12:	bf00      	nop
}
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  return;
 8008c20:	bf00      	nop
}
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	af00      	add	r7, sp, #0
  return;
 8008c2e:	bf00      	nop
}
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0
  return;
 8008c3c:	bf00      	nop
}
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8008c46:	b480      	push	{r7}
 8008c48:	af00      	add	r7, sp, #0
  return;
 8008c4a:	bf00      	nop
}
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8008c54:	b480      	push	{r7}
 8008c56:	af00      	add	r7, sp, #0
  return;
 8008c58:	bf00      	nop
}
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8008c62:	b480      	push	{r7}
 8008c64:	af00      	add	r7, sp, #0
  return;
 8008c66:	bf00      	nop
}
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8008c70:	b480      	push	{r7}
 8008c72:	af00      	add	r7, sp, #0
  return;
 8008c74:	bf00      	nop
}
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008c7e:	b480      	push	{r7}
 8008c80:	af00      	add	r7, sp, #0
  return;
 8008c82:	bf00      	nop
}
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
  return;
 8008c90:	bf00      	nop
}
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	af00      	add	r7, sp, #0
  return;
 8008c9e:	bf00      	nop
}
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	af00      	add	r7, sp, #0
  return;
 8008cac:	bf00      	nop
}
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	af00      	add	r7, sp, #0
  return;
 8008cba:	bf00      	nop
}
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	af00      	add	r7, sp, #0
  return;
 8008cc8:	bf00      	nop
}
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
	...

08008cd4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008cd8:	4b04      	ldr	r3, [pc, #16]	; (8008cec <SVCCTL_Init+0x18>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008cde:	4b04      	ldr	r3, [pc, #16]	; (8008cf0 <SVCCTL_Init+0x1c>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008ce4:	f000 f806 	bl	8008cf4 <SVCCTL_SvcInit>

  return;
 8008ce8:	bf00      	nop
}
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20000090 	.word	0x20000090
 8008cf0:	200000b0 	.word	0x200000b0

08008cf4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  BAS_Init();
 8008cf8:	f7ff ff6d 	bl	8008bd6 <BAS_Init>

  BLS_Init();
 8008cfc:	f7ff ff72 	bl	8008be4 <BLS_Init>

  CRS_STM_Init();
 8008d00:	f7ff ff77 	bl	8008bf2 <CRS_STM_Init>

  DIS_Init();
 8008d04:	f7ff ff7c 	bl	8008c00 <DIS_Init>

  EDS_STM_Init();
 8008d08:	f7ff ff81 	bl	8008c0e <EDS_STM_Init>

  HIDS_Init();
 8008d0c:	f7ff ff86 	bl	8008c1c <HIDS_Init>

  HRS_Init();
 8008d10:	f7ff ff8b 	bl	8008c2a <HRS_Init>

  HTS_Init();
 8008d14:	f7ff ff90 	bl	8008c38 <HTS_Init>

  IAS_Init();
 8008d18:	f7ff ff95 	bl	8008c46 <IAS_Init>

  LLS_Init();
 8008d1c:	f7ff ff9a 	bl	8008c54 <LLS_Init>

  TPS_Init();
 8008d20:	f7ff ff9f 	bl	8008c62 <TPS_Init>

  MOTENV_STM_Init();
 8008d24:	f7ff ffa4 	bl	8008c70 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008d28:	f7ff ffa9 	bl	8008c7e <P2PS_STM_Init>

  ZDD_STM_Init();
 8008d2c:	f7ff ffae 	bl	8008c8c <ZDD_STM_Init>

  OTAS_STM_Init();
 8008d30:	f7ff ffb3 	bl	8008c9a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008d34:	f7ff ffbf 	bl	8008cb6 <BVOPUS_STM_Init>

  MESH_Init();
 8008d38:	f7ff ffb6 	bl	8008ca8 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008d3c:	f7ff ffc2 	bl	8008cc4 <SVCCTL_InitCustomSvc>
  
  return;
 8008d40:	bf00      	nop
}
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 8008d4c:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <SVCCTL_RegisterCltHandler+0x30>)
 8008d4e:	791b      	ldrb	r3, [r3, #4]
 8008d50:	4619      	mov	r1, r3
 8008d52:	4a08      	ldr	r2, [pc, #32]	; (8008d74 <SVCCTL_RegisterCltHandler+0x30>)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 8008d5a:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <SVCCTL_RegisterCltHandler+0x30>)
 8008d5c:	791b      	ldrb	r3, [r3, #4]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	4b04      	ldr	r3, [pc, #16]	; (8008d74 <SVCCTL_RegisterCltHandler+0x30>)
 8008d64:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 8008d66:	bf00      	nop
}
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	200000b0 	.word	0x200000b0

08008d78 <SVCCTL_UserEvtRx>:

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3301      	adds	r3, #1
 8008d84:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008d86:	2300      	movs	r3, #0
 8008d88:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	2bff      	cmp	r3, #255	; 0xff
 8008d90:	d13f      	bne.n	8008e12 <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	3302      	adds	r3, #2
 8008d96:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008da6:	d132      	bne.n	8008e0e <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008da8:	2300      	movs	r3, #0
 8008daa:	757b      	strb	r3, [r7, #21]
 8008dac:	e00d      	b.n	8008dca <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008dae:	7d7b      	ldrb	r3, [r7, #21]
 8008db0:	4a27      	ldr	r2, [pc, #156]	; (8008e50 <SVCCTL_UserEvtRx+0xd8>)
 8008db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	4798      	blx	r3
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d108      	bne.n	8008dd6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008dc4:	7d7b      	ldrb	r3, [r7, #21]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	757b      	strb	r3, [r7, #21]
 8008dca:	4b21      	ldr	r3, [pc, #132]	; (8008e50 <SVCCTL_UserEvtRx+0xd8>)
 8008dcc:	7f1b      	ldrb	r3, [r3, #28]
 8008dce:	7d7a      	ldrb	r2, [r7, #21]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d3ec      	bcc.n	8008dae <SVCCTL_UserEvtRx+0x36>
 8008dd4:	e000      	b.n	8008dd8 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 8008dd6:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8008ddc:	2300      	movs	r3, #0
 8008dde:	757b      	strb	r3, [r7, #21]
 8008de0:	e00d      	b.n	8008dfe <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8008de2:	7d7b      	ldrb	r3, [r7, #21]
 8008de4:	4a1b      	ldr	r2, [pc, #108]	; (8008e54 <SVCCTL_UserEvtRx+0xdc>)
 8008de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	4798      	blx	r3
 8008dee:	4603      	mov	r3, r0
 8008df0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008df2:	7dfb      	ldrb	r3, [r7, #23]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d108      	bne.n	8008e0a <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8008df8:	7d7b      	ldrb	r3, [r7, #21]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	757b      	strb	r3, [r7, #21]
 8008dfe:	4b15      	ldr	r3, [pc, #84]	; (8008e54 <SVCCTL_UserEvtRx+0xdc>)
 8008e00:	791b      	ldrb	r3, [r3, #4]
 8008e02:	7d7a      	ldrb	r2, [r7, #21]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d3ec      	bcc.n	8008de2 <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 8008e08:	e002      	b.n	8008e10 <SVCCTL_UserEvtRx+0x98>
              break;
 8008e0a:	bf00      	nop
          break;
 8008e0c:	e000      	b.n	8008e10 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 8008e0e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008e10:	e000      	b.n	8008e14 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 8008e12:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d00f      	beq.n	8008e3a <SVCCTL_UserEvtRx+0xc2>
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	dc10      	bgt.n	8008e40 <SVCCTL_UserEvtRx+0xc8>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d002      	beq.n	8008e28 <SVCCTL_UserEvtRx+0xb0>
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d006      	beq.n	8008e34 <SVCCTL_UserEvtRx+0xbc>
 8008e26:	e00b      	b.n	8008e40 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 fcc5 	bl	800a7b8 <SVCCTL_App_Notification>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	75bb      	strb	r3, [r7, #22]
      break;
 8008e32:	e008      	b.n	8008e46 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008e34:	2301      	movs	r3, #1
 8008e36:	75bb      	strb	r3, [r7, #22]
      break;
 8008e38:	e005      	b.n	8008e46 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	75bb      	strb	r3, [r7, #22]
      break;
 8008e3e:	e002      	b.n	8008e46 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008e40:	2301      	movs	r3, #1
 8008e42:	75bb      	strb	r3, [r7, #22]
      break;
 8008e44:	bf00      	nop
  }

  return (return_status);
 8008e46:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3718      	adds	r7, #24
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000090 	.word	0x20000090
 8008e54:	200000b0 	.word	0x200000b0

08008e58 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008e60:	f107 030c 	add.w	r3, r7, #12
 8008e64:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	212e      	movs	r1, #46	; 0x2e
 8008e70:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008e74:	f000 fae8 	bl	8009448 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	330b      	adds	r3, #11
 8008e7c:	78db      	ldrb	r3, [r3, #3]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3720      	adds	r7, #32
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b088      	sub	sp, #32
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008e8e:	f107 030c 	add.w	r3, r7, #12
 8008e92:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	210f      	movs	r1, #15
 8008e9e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008ea2:	f000 fad1 	bl	8009448 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	330b      	adds	r3, #11
 8008eaa:	78db      	ldrb	r3, [r3, #3]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3720      	adds	r7, #32
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008ebc:	f107 030c 	add.w	r3, r7, #12
 8008ec0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	2110      	movs	r1, #16
 8008ec8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8008ecc:	f000 fabc 	bl	8009448 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	330b      	adds	r3, #11
 8008ed4:	78db      	ldrb	r3, [r3, #3]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3720      	adds	r7, #32
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b08b      	sub	sp, #44	; 0x2c
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008eec:	2300      	movs	r3, #0
 8008eee:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008efc:	2300      	movs	r3, #0
 8008efe:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008f04:	2300      	movs	r3, #0
 8008f06:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008f08:	4b4a      	ldr	r3, [pc, #296]	; (8009034 <SHCI_GetWirelessFwInfo+0x154>)
 8008f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008f10:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008f1a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a44      	ldr	r2, [pc, #272]	; (8009038 <SHCI_GetWirelessFwInfo+0x158>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d10f      	bne.n	8008f4c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	e01a      	b.n	8008f82 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008f54:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008f58:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	0e1b      	lsrs	r3, r3, #24
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	0c1b      	lsrs	r3, r3, #16
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	0a1b      	lsrs	r3, r3, #8
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	091b      	lsrs	r3, r3, #4
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	f003 030f 	and.w	r3, r3, #15
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f003 030f 	and.w	r3, r3, #15
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	0e1b      	lsrs	r3, r3, #24
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	0c1b      	lsrs	r3, r3, #16
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	0a1b      	lsrs	r3, r3, #8
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	0e1b      	lsrs	r3, r3, #24
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	0c1b      	lsrs	r3, r3, #16
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	0a1b      	lsrs	r3, r3, #8
 8009004:	b2da      	uxtb	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	0e1b      	lsrs	r3, r3, #24
 800900e:	b2da      	uxtb	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	0c1b      	lsrs	r3, r3, #16
 8009018:	b2da      	uxtb	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	b2da      	uxtb	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	372c      	adds	r7, #44	; 0x2c
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	58004000 	.word	0x58004000
 8009038:	a94656b9 	.word	0xa94656b9

0800903c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	4a08      	ldr	r2, [pc, #32]	; (800906c <hci_init+0x30>)
 800904c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800904e:	4a08      	ldr	r2, [pc, #32]	; (8009070 <hci_init+0x34>)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009054:	4806      	ldr	r0, [pc, #24]	; (8009070 <hci_init+0x34>)
 8009056:	f000 f979 	bl	800934c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f8da 	bl	8009218 <TlInit>

  return;
 8009064:	bf00      	nop
}
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20000414 	.word	0x20000414
 8009070:	200003ec 	.word	0x200003ec

08009074 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800907a:	4822      	ldr	r0, [pc, #136]	; (8009104 <hci_user_evt_proc+0x90>)
 800907c:	f000 fe10 	bl	8009ca0 <LST_is_empty>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d12b      	bne.n	80090de <hci_user_evt_proc+0x6a>
 8009086:	4b20      	ldr	r3, [pc, #128]	; (8009108 <hci_user_evt_proc+0x94>)
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d027      	beq.n	80090de <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800908e:	f107 030c 	add.w	r3, r7, #12
 8009092:	4619      	mov	r1, r3
 8009094:	481b      	ldr	r0, [pc, #108]	; (8009104 <hci_user_evt_proc+0x90>)
 8009096:	f000 fe92 	bl	8009dbe <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800909a:	4b1c      	ldr	r3, [pc, #112]	; (800910c <hci_user_evt_proc+0x98>)
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00c      	beq.n	80090bc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80090a6:	2301      	movs	r3, #1
 80090a8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80090aa:	4b18      	ldr	r3, [pc, #96]	; (800910c <hci_user_evt_proc+0x98>)
 80090ac:	69db      	ldr	r3, [r3, #28]
 80090ae:	1d3a      	adds	r2, r7, #4
 80090b0:	4610      	mov	r0, r2
 80090b2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80090b4:	793a      	ldrb	r2, [r7, #4]
 80090b6:	4b14      	ldr	r3, [pc, #80]	; (8009108 <hci_user_evt_proc+0x94>)
 80090b8:	701a      	strb	r2, [r3, #0]
 80090ba:	e002      	b.n	80090c2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80090bc:	4b12      	ldr	r3, [pc, #72]	; (8009108 <hci_user_evt_proc+0x94>)
 80090be:	2201      	movs	r2, #1
 80090c0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80090c2:	4b11      	ldr	r3, [pc, #68]	; (8009108 <hci_user_evt_proc+0x94>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d004      	beq.n	80090d4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 fc0d 	bl	80098ec <TL_MM_EvtDone>
 80090d2:	e004      	b.n	80090de <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4619      	mov	r1, r3
 80090d8:	480a      	ldr	r0, [pc, #40]	; (8009104 <hci_user_evt_proc+0x90>)
 80090da:	f000 fe03 	bl	8009ce4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80090de:	4809      	ldr	r0, [pc, #36]	; (8009104 <hci_user_evt_proc+0x90>)
 80090e0:	f000 fdde 	bl	8009ca0 <LST_is_empty>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d107      	bne.n	80090fa <hci_user_evt_proc+0x86>
 80090ea:	4b07      	ldr	r3, [pc, #28]	; (8009108 <hci_user_evt_proc+0x94>)
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80090f2:	4804      	ldr	r0, [pc, #16]	; (8009104 <hci_user_evt_proc+0x90>)
 80090f4:	f002 f9d8 	bl	800b4a8 <hci_notify_asynch_evt>
  }


  return;
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
}
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	200000bc 	.word	0x200000bc
 8009108:	200000c8 	.word	0x200000c8
 800910c:	200003ec 	.word	0x200003ec

08009110 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800911c:	2000      	movs	r0, #0
 800911e:	f000 f8d1 	bl	80092c4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009122:	2300      	movs	r3, #0
 8009124:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	885b      	ldrh	r3, [r3, #2]
 800912a:	b21b      	sxth	r3, r3
 800912c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009130:	b21a      	sxth	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	029b      	lsls	r3, r3, #10
 8009138:	b21b      	sxth	r3, r3
 800913a:	4313      	orrs	r3, r2
 800913c:	b21b      	sxth	r3, r3
 800913e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8009140:	4b33      	ldr	r3, [pc, #204]	; (8009210 <hci_send_req+0x100>)
 8009142:	2201      	movs	r2, #1
 8009144:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	b2d9      	uxtb	r1, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	8bbb      	ldrh	r3, [r7, #28]
 8009152:	4618      	mov	r0, r3
 8009154:	f000 f890 	bl	8009278 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009158:	e04e      	b.n	80091f8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800915a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800915e:	f002 f9ba 	bl	800b4d6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009162:	e043      	b.n	80091ec <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009164:	f107 030c 	add.w	r3, r7, #12
 8009168:	4619      	mov	r1, r3
 800916a:	482a      	ldr	r0, [pc, #168]	; (8009214 <hci_send_req+0x104>)
 800916c:	f000 fe27 	bl	8009dbe <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	7a5b      	ldrb	r3, [r3, #9]
 8009174:	2b0f      	cmp	r3, #15
 8009176:	d114      	bne.n	80091a2 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	330b      	adds	r3, #11
 800917c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	885b      	ldrh	r3, [r3, #2]
 8009182:	b29b      	uxth	r3, r3
 8009184:	8bba      	ldrh	r2, [r7, #28]
 8009186:	429a      	cmp	r2, r3
 8009188:	d104      	bne.n	8009194 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	7812      	ldrb	r2, [r2, #0]
 8009192:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	785b      	ldrb	r3, [r3, #1]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d027      	beq.n	80091ec <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800919c:	2301      	movs	r3, #1
 800919e:	77fb      	strb	r3, [r7, #31]
 80091a0:	e024      	b.n	80091ec <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	330b      	adds	r3, #11
 80091a6:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	8bba      	ldrh	r2, [r7, #28]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d114      	bne.n	80091e0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	7a9b      	ldrb	r3, [r3, #10]
 80091ba:	3b03      	subs	r3, #3
 80091bc:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	695a      	ldr	r2, [r3, #20]
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	bfa8      	it	ge
 80091c8:	461a      	movge	r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6918      	ldr	r0, [r3, #16]
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	1cd9      	adds	r1, r3, #3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	461a      	mov	r2, r3
 80091dc:	f003 ffd1 	bl	800d182 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80091e8:	2301      	movs	r3, #1
 80091ea:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80091ec:	4809      	ldr	r0, [pc, #36]	; (8009214 <hci_send_req+0x104>)
 80091ee:	f000 fd57 	bl	8009ca0 <LST_is_empty>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d0b5      	beq.n	8009164 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80091f8:	7ffb      	ldrb	r3, [r7, #31]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0ad      	beq.n	800915a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80091fe:	2001      	movs	r0, #1
 8009200:	f000 f860 	bl	80092c4 <NotifyCmdStatus>

  return 0;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3720      	adds	r7, #32
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20000418 	.word	0x20000418
 8009214:	2000040c 	.word	0x2000040c

08009218 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009220:	480f      	ldr	r0, [pc, #60]	; (8009260 <TlInit+0x48>)
 8009222:	f000 fd2d 	bl	8009c80 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009226:	4a0f      	ldr	r2, [pc, #60]	; (8009264 <TlInit+0x4c>)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800922c:	480e      	ldr	r0, [pc, #56]	; (8009268 <TlInit+0x50>)
 800922e:	f000 fd27 	bl	8009c80 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009232:	4b0e      	ldr	r3, [pc, #56]	; (800926c <TlInit+0x54>)
 8009234:	2201      	movs	r2, #1
 8009236:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009238:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <TlInit+0x58>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00a      	beq.n	8009256 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009244:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <TlInit+0x5c>)
 8009246:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009248:	4b09      	ldr	r3, [pc, #36]	; (8009270 <TlInit+0x58>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f107 0208 	add.w	r2, r7, #8
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
  }

  return;
 8009254:	bf00      	nop
 8009256:	bf00      	nop
}
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	2000040c 	.word	0x2000040c
 8009264:	200000c4 	.word	0x200000c4
 8009268:	200000bc 	.word	0x200000bc
 800926c:	200000c8 	.word	0x200000c8
 8009270:	200003ec 	.word	0x200003ec
 8009274:	08009305 	.word	0x08009305

08009278 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	603a      	str	r2, [r7, #0]
 8009282:	80fb      	strh	r3, [r7, #6]
 8009284:	460b      	mov	r3, r1
 8009286:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009288:	4b0c      	ldr	r3, [pc, #48]	; (80092bc <SendCmd+0x44>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	88fa      	ldrh	r2, [r7, #6]
 800928e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009292:	4b0a      	ldr	r3, [pc, #40]	; (80092bc <SendCmd+0x44>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	797a      	ldrb	r2, [r7, #5]
 8009298:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800929a:	4b08      	ldr	r3, [pc, #32]	; (80092bc <SendCmd+0x44>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	330c      	adds	r3, #12
 80092a0:	797a      	ldrb	r2, [r7, #5]
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f003 ff6c 	bl	800d182 <memcpy>

  hciContext.io.Send(0,0);
 80092aa:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <SendCmd+0x48>)
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	2100      	movs	r1, #0
 80092b0:	2000      	movs	r0, #0
 80092b2:	4798      	blx	r3

  return;
 80092b4:	bf00      	nop
}
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	200000c4 	.word	0x200000c4
 80092c0:	200003ec 	.word	0x200003ec

080092c4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4603      	mov	r3, r0
 80092cc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80092ce:	79fb      	ldrb	r3, [r7, #7]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d108      	bne.n	80092e6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80092d4:	4b0a      	ldr	r3, [pc, #40]	; (8009300 <NotifyCmdStatus+0x3c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00d      	beq.n	80092f8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80092dc:	4b08      	ldr	r3, [pc, #32]	; (8009300 <NotifyCmdStatus+0x3c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2000      	movs	r0, #0
 80092e2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80092e4:	e008      	b.n	80092f8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80092e6:	4b06      	ldr	r3, [pc, #24]	; (8009300 <NotifyCmdStatus+0x3c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80092ee:	4b04      	ldr	r3, [pc, #16]	; (8009300 <NotifyCmdStatus+0x3c>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2001      	movs	r0, #1
 80092f4:	4798      	blx	r3
  return;
 80092f6:	bf00      	nop
 80092f8:	bf00      	nop
}
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	20000414 	.word	0x20000414

08009304 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	7a5b      	ldrb	r3, [r3, #9]
 8009310:	2b0f      	cmp	r3, #15
 8009312:	d003      	beq.n	800931c <TlEvtReceived+0x18>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	7a5b      	ldrb	r3, [r3, #9]
 8009318:	2b0e      	cmp	r3, #14
 800931a:	d107      	bne.n	800932c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800931c:	6879      	ldr	r1, [r7, #4]
 800931e:	4809      	ldr	r0, [pc, #36]	; (8009344 <TlEvtReceived+0x40>)
 8009320:	f000 fd06 	bl	8009d30 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009324:	2000      	movs	r0, #0
 8009326:	f002 f8cb 	bl	800b4c0 <hci_cmd_resp_release>
 800932a:	e006      	b.n	800933a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	4806      	ldr	r0, [pc, #24]	; (8009348 <TlEvtReceived+0x44>)
 8009330:	f000 fcfe 	bl	8009d30 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009334:	4804      	ldr	r0, [pc, #16]	; (8009348 <TlEvtReceived+0x44>)
 8009336:	f002 f8b7 	bl	800b4a8 <hci_notify_asynch_evt>
  }

  return;
 800933a:	bf00      	nop
}
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	2000040c 	.word	0x2000040c
 8009348:	200000bc 	.word	0x200000bc

0800934c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a05      	ldr	r2, [pc, #20]	; (800936c <hci_register_io_bus+0x20>)
 8009358:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a04      	ldr	r2, [pc, #16]	; (8009370 <hci_register_io_bus+0x24>)
 800935e:	611a      	str	r2, [r3, #16]

  return;
 8009360:	bf00      	nop
}
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	08009665 	.word	0x08009665
 8009370:	080096cd 	.word	0x080096cd

08009374 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	4a08      	ldr	r2, [pc, #32]	; (80093a4 <shci_init+0x30>)
 8009384:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009386:	4a08      	ldr	r2, [pc, #32]	; (80093a8 <shci_init+0x34>)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800938c:	4806      	ldr	r0, [pc, #24]	; (80093a8 <shci_init+0x34>)
 800938e:	f000 f915 	bl	80095bc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 f898 	bl	80094cc <TlInit>

  return;
 800939c:	bf00      	nop
}
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	2000043c 	.word	0x2000043c
 80093a8:	2000041c 	.word	0x2000041c

080093ac <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80093b2:	4822      	ldr	r0, [pc, #136]	; (800943c <shci_user_evt_proc+0x90>)
 80093b4:	f000 fc74 	bl	8009ca0 <LST_is_empty>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d12b      	bne.n	8009416 <shci_user_evt_proc+0x6a>
 80093be:	4b20      	ldr	r3, [pc, #128]	; (8009440 <shci_user_evt_proc+0x94>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d027      	beq.n	8009416 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80093c6:	f107 030c 	add.w	r3, r7, #12
 80093ca:	4619      	mov	r1, r3
 80093cc:	481b      	ldr	r0, [pc, #108]	; (800943c <shci_user_evt_proc+0x90>)
 80093ce:	f000 fcf6 	bl	8009dbe <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80093d2:	4b1c      	ldr	r3, [pc, #112]	; (8009444 <shci_user_evt_proc+0x98>)
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00c      	beq.n	80093f4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80093de:	2301      	movs	r3, #1
 80093e0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80093e2:	4b18      	ldr	r3, [pc, #96]	; (8009444 <shci_user_evt_proc+0x98>)
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	1d3a      	adds	r2, r7, #4
 80093e8:	4610      	mov	r0, r2
 80093ea:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80093ec:	793a      	ldrb	r2, [r7, #4]
 80093ee:	4b14      	ldr	r3, [pc, #80]	; (8009440 <shci_user_evt_proc+0x94>)
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	e002      	b.n	80093fa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80093f4:	4b12      	ldr	r3, [pc, #72]	; (8009440 <shci_user_evt_proc+0x94>)
 80093f6:	2201      	movs	r2, #1
 80093f8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80093fa:	4b11      	ldr	r3, [pc, #68]	; (8009440 <shci_user_evt_proc+0x94>)
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d004      	beq.n	800940c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fa71 	bl	80098ec <TL_MM_EvtDone>
 800940a:	e004      	b.n	8009416 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4619      	mov	r1, r3
 8009410:	480a      	ldr	r0, [pc, #40]	; (800943c <shci_user_evt_proc+0x90>)
 8009412:	f000 fc67 	bl	8009ce4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009416:	4809      	ldr	r0, [pc, #36]	; (800943c <shci_user_evt_proc+0x90>)
 8009418:	f000 fc42 	bl	8009ca0 <LST_is_empty>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d107      	bne.n	8009432 <shci_user_evt_proc+0x86>
 8009422:	4b07      	ldr	r3, [pc, #28]	; (8009440 <shci_user_evt_proc+0x94>)
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800942a:	4804      	ldr	r0, [pc, #16]	; (800943c <shci_user_evt_proc+0x90>)
 800942c:	f7f8 f935 	bl	800169a <shci_notify_asynch_evt>
  }


  return;
 8009430:	bf00      	nop
 8009432:	bf00      	nop
}
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	200000cc 	.word	0x200000cc
 8009440:	200000dc 	.word	0x200000dc
 8009444:	2000041c 	.word	0x2000041c

08009448 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	60ba      	str	r2, [r7, #8]
 8009450:	607b      	str	r3, [r7, #4]
 8009452:	4603      	mov	r3, r0
 8009454:	81fb      	strh	r3, [r7, #14]
 8009456:	460b      	mov	r3, r1
 8009458:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800945a:	2000      	movs	r0, #0
 800945c:	f000 f868 	bl	8009530 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009460:	4b17      	ldr	r3, [pc, #92]	; (80094c0 <shci_send+0x78>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	89fa      	ldrh	r2, [r7, #14]
 8009466:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800946a:	4b15      	ldr	r3, [pc, #84]	; (80094c0 <shci_send+0x78>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	7b7a      	ldrb	r2, [r7, #13]
 8009470:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009472:	4b13      	ldr	r3, [pc, #76]	; (80094c0 <shci_send+0x78>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	330c      	adds	r3, #12
 8009478:	7b7a      	ldrb	r2, [r7, #13]
 800947a:	68b9      	ldr	r1, [r7, #8]
 800947c:	4618      	mov	r0, r3
 800947e:	f003 fe80 	bl	800d182 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8009482:	4b10      	ldr	r3, [pc, #64]	; (80094c4 <shci_send+0x7c>)
 8009484:	2201      	movs	r2, #1
 8009486:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8009488:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <shci_send+0x80>)
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	2100      	movs	r1, #0
 800948e:	2000      	movs	r0, #0
 8009490:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009492:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009496:	f7f8 f918 	bl	80016ca <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f103 0008 	add.w	r0, r3, #8
 80094a0:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <shci_send+0x78>)
 80094a2:	6819      	ldr	r1, [r3, #0]
 80094a4:	4b06      	ldr	r3, [pc, #24]	; (80094c0 <shci_send+0x78>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	789b      	ldrb	r3, [r3, #2]
 80094aa:	3303      	adds	r3, #3
 80094ac:	461a      	mov	r2, r3
 80094ae:	f003 fe68 	bl	800d182 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80094b2:	2001      	movs	r0, #1
 80094b4:	f000 f83c 	bl	8009530 <Cmd_SetStatus>

  return;
 80094b8:	bf00      	nop
}
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	200000d8 	.word	0x200000d8
 80094c4:	20000440 	.word	0x20000440
 80094c8:	2000041c 	.word	0x2000041c

080094cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80094d4:	4a10      	ldr	r2, [pc, #64]	; (8009518 <TlInit+0x4c>)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80094da:	4810      	ldr	r0, [pc, #64]	; (800951c <TlInit+0x50>)
 80094dc:	f000 fbd0 	bl	8009c80 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80094e0:	2001      	movs	r0, #1
 80094e2:	f000 f825 	bl	8009530 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80094e6:	4b0e      	ldr	r3, [pc, #56]	; (8009520 <TlInit+0x54>)
 80094e8:	2201      	movs	r2, #1
 80094ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80094ec:	4b0d      	ldr	r3, [pc, #52]	; (8009524 <TlInit+0x58>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00c      	beq.n	800950e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80094f8:	4b0b      	ldr	r3, [pc, #44]	; (8009528 <TlInit+0x5c>)
 80094fa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80094fc:	4b0b      	ldr	r3, [pc, #44]	; (800952c <TlInit+0x60>)
 80094fe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009500:	4b08      	ldr	r3, [pc, #32]	; (8009524 <TlInit+0x58>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f107 020c 	add.w	r2, r7, #12
 8009508:	4610      	mov	r0, r2
 800950a:	4798      	blx	r3
  }

  return;
 800950c:	bf00      	nop
 800950e:	bf00      	nop
}
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	200000d8 	.word	0x200000d8
 800951c:	200000cc 	.word	0x200000cc
 8009520:	200000dc 	.word	0x200000dc
 8009524:	2000041c 	.word	0x2000041c
 8009528:	08009581 	.word	0x08009581
 800952c:	08009599 	.word	0x08009599

08009530 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	4603      	mov	r3, r0
 8009538:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10b      	bne.n	8009558 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009540:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <Cmd_SetStatus+0x48>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d003      	beq.n	8009550 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009548:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <Cmd_SetStatus+0x48>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2000      	movs	r0, #0
 800954e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009550:	4b0a      	ldr	r3, [pc, #40]	; (800957c <Cmd_SetStatus+0x4c>)
 8009552:	2200      	movs	r2, #0
 8009554:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009556:	e00b      	b.n	8009570 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009558:	4b08      	ldr	r3, [pc, #32]	; (800957c <Cmd_SetStatus+0x4c>)
 800955a:	2201      	movs	r2, #1
 800955c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800955e:	4b06      	ldr	r3, [pc, #24]	; (8009578 <Cmd_SetStatus+0x48>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d004      	beq.n	8009570 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009566:	4b04      	ldr	r3, [pc, #16]	; (8009578 <Cmd_SetStatus+0x48>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2001      	movs	r0, #1
 800956c:	4798      	blx	r3
  return;
 800956e:	bf00      	nop
 8009570:	bf00      	nop
}
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	2000043c 	.word	0x2000043c
 800957c:	200000d4 	.word	0x200000d4

08009580 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009588:	2000      	movs	r0, #0
 800958a:	f7f8 f893 	bl	80016b4 <shci_cmd_resp_release>

  return;
 800958e:	bf00      	nop
}
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	4805      	ldr	r0, [pc, #20]	; (80095b8 <TlUserEvtReceived+0x20>)
 80095a4:	f000 fbc4 	bl	8009d30 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80095a8:	4803      	ldr	r0, [pc, #12]	; (80095b8 <TlUserEvtReceived+0x20>)
 80095aa:	f7f8 f876 	bl	800169a <shci_notify_asynch_evt>

  return;
 80095ae:	bf00      	nop
}
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	200000cc 	.word	0x200000cc

080095bc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a05      	ldr	r2, [pc, #20]	; (80095dc <shci_register_io_bus+0x20>)
 80095c8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a04      	ldr	r2, [pc, #16]	; (80095e0 <shci_register_io_bus+0x24>)
 80095ce:	611a      	str	r2, [r3, #16]

  return;
 80095d0:	bf00      	nop
}
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	08009779 	.word	0x08009779
 80095e0:	080097cd 	.word	0x080097cd

080095e4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80095e8:	f002 ffdc 	bl	800c5a4 <HW_IPCC_Enable>

  return;
 80095ec:	bf00      	nop
}
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <TL_Init>:


void TL_Init( void )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80095f4:	4b10      	ldr	r3, [pc, #64]	; (8009638 <TL_Init+0x48>)
 80095f6:	4a11      	ldr	r2, [pc, #68]	; (800963c <TL_Init+0x4c>)
 80095f8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80095fa:	4b0f      	ldr	r3, [pc, #60]	; (8009638 <TL_Init+0x48>)
 80095fc:	4a10      	ldr	r2, [pc, #64]	; (8009640 <TL_Init+0x50>)
 80095fe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009600:	4b0d      	ldr	r3, [pc, #52]	; (8009638 <TL_Init+0x48>)
 8009602:	4a10      	ldr	r2, [pc, #64]	; (8009644 <TL_Init+0x54>)
 8009604:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009606:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <TL_Init+0x48>)
 8009608:	4a0f      	ldr	r2, [pc, #60]	; (8009648 <TL_Init+0x58>)
 800960a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800960c:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <TL_Init+0x48>)
 800960e:	4a0f      	ldr	r2, [pc, #60]	; (800964c <TL_Init+0x5c>)
 8009610:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009612:	4b09      	ldr	r3, [pc, #36]	; (8009638 <TL_Init+0x48>)
 8009614:	4a0e      	ldr	r2, [pc, #56]	; (8009650 <TL_Init+0x60>)
 8009616:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009618:	4b07      	ldr	r3, [pc, #28]	; (8009638 <TL_Init+0x48>)
 800961a:	4a0e      	ldr	r2, [pc, #56]	; (8009654 <TL_Init+0x64>)
 800961c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800961e:	4b06      	ldr	r3, [pc, #24]	; (8009638 <TL_Init+0x48>)
 8009620:	4a0d      	ldr	r2, [pc, #52]	; (8009658 <TL_Init+0x68>)
 8009622:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009624:	4b04      	ldr	r3, [pc, #16]	; (8009638 <TL_Init+0x48>)
 8009626:	4a0d      	ldr	r2, [pc, #52]	; (800965c <TL_Init+0x6c>)
 8009628:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800962a:	4b03      	ldr	r3, [pc, #12]	; (8009638 <TL_Init+0x48>)
 800962c:	4a0c      	ldr	r2, [pc, #48]	; (8009660 <TL_Init+0x70>)
 800962e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009630:	f002 ffcc 	bl	800c5cc <HW_IPCC_Init>

  return;
 8009634:	bf00      	nop
}
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20030000 	.word	0x20030000
 800963c:	20030028 	.word	0x20030028
 8009640:	20030048 	.word	0x20030048
 8009644:	20030058 	.word	0x20030058
 8009648:	20030068 	.word	0x20030068
 800964c:	20030070 	.word	0x20030070
 8009650:	20030078 	.word	0x20030078
 8009654:	20030080 	.word	0x20030080
 8009658:	2003009c 	.word	0x2003009c
 800965c:	200300a0 	.word	0x200300a0
 8009660:	200300ac 	.word	0x200300ac

08009664 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009670:	4811      	ldr	r0, [pc, #68]	; (80096b8 <TL_BLE_Init+0x54>)
 8009672:	f000 fb05 	bl	8009c80 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009676:	4b11      	ldr	r3, [pc, #68]	; (80096bc <TL_BLE_Init+0x58>)
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	68da      	ldr	r2, [r3, #12]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	4a0c      	ldr	r2, [pc, #48]	; (80096c0 <TL_BLE_Init+0x5c>)
 8009690:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4a08      	ldr	r2, [pc, #32]	; (80096b8 <TL_BLE_Init+0x54>)
 8009696:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009698:	f002 ffae 	bl	800c5f8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a08      	ldr	r2, [pc, #32]	; (80096c4 <TL_BLE_Init+0x60>)
 80096a2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	4a07      	ldr	r2, [pc, #28]	; (80096c8 <TL_BLE_Init+0x64>)
 80096aa:	6013      	str	r3, [r2, #0]

  return 0;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	200300c8 	.word	0x200300c8
 80096bc:	20030000 	.word	0x20030000
 80096c0:	20030a58 	.word	0x20030a58
 80096c4:	2000044c 	.word	0x2000044c
 80096c8:	20000450 	.word	0x20000450

080096cc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80096d8:	4b09      	ldr	r3, [pc, #36]	; (8009700 <TL_BLE_SendCmd+0x34>)
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2201      	movs	r2, #1
 80096e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80096e2:	4b07      	ldr	r3, [pc, #28]	; (8009700 <TL_BLE_SendCmd+0x34>)
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4619      	mov	r1, r3
 80096ea:	2001      	movs	r0, #1
 80096ec:	f000 f96c 	bl	80099c8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80096f0:	f002 ff8c 	bl	800c60c <HW_IPCC_BLE_SendCmd>

  return 0;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	20030000 	.word	0x20030000

08009704 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800970a:	e01c      	b.n	8009746 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800970c:	1d3b      	adds	r3, r7, #4
 800970e:	4619      	mov	r1, r3
 8009710:	4812      	ldr	r0, [pc, #72]	; (800975c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009712:	f000 fb54 	bl	8009dbe <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	7a5b      	ldrb	r3, [r3, #9]
 800971a:	2b0f      	cmp	r3, #15
 800971c:	d003      	beq.n	8009726 <HW_IPCC_BLE_RxEvtNot+0x22>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	7a5b      	ldrb	r3, [r3, #9]
 8009722:	2b0e      	cmp	r3, #14
 8009724:	d105      	bne.n	8009732 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4619      	mov	r1, r3
 800972a:	2002      	movs	r0, #2
 800972c:	f000 f94c 	bl	80099c8 <OutputDbgTrace>
 8009730:	e004      	b.n	800973c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4619      	mov	r1, r3
 8009736:	2003      	movs	r0, #3
 8009738:	f000 f946 	bl	80099c8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800973c:	4b08      	ldr	r3, [pc, #32]	; (8009760 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	4610      	mov	r0, r2
 8009744:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009746:	4805      	ldr	r0, [pc, #20]	; (800975c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009748:	f000 faaa 	bl	8009ca0 <LST_is_empty>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0dc      	beq.n	800970c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009752:	bf00      	nop
}
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	200300c8 	.word	0x200300c8
 8009760:	2000044c 	.word	0x2000044c

08009764 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009768:	4b02      	ldr	r3, [pc, #8]	; (8009774 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4798      	blx	r3

  return;
 800976e:	bf00      	nop
}
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20000450 	.word	0x20000450

08009778 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009784:	480d      	ldr	r0, [pc, #52]	; (80097bc <TL_SYS_Init+0x44>)
 8009786:	f000 fa7b 	bl	8009c80 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800978a:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <TL_SYS_Init+0x48>)
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	689a      	ldr	r2, [r3, #8]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	4a08      	ldr	r2, [pc, #32]	; (80097bc <TL_SYS_Init+0x44>)
 800979c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800979e:	f002 ff57 	bl	800c650 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a07      	ldr	r2, [pc, #28]	; (80097c4 <TL_SYS_Init+0x4c>)
 80097a8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	4a06      	ldr	r2, [pc, #24]	; (80097c8 <TL_SYS_Init+0x50>)
 80097b0:	6013      	str	r3, [r2, #0]

  return 0;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	200300d0 	.word	0x200300d0
 80097c0:	20030000 	.word	0x20030000
 80097c4:	20000454 	.word	0x20000454
 80097c8:	20000458 	.word	0x20000458

080097cc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80097d8:	4b09      	ldr	r3, [pc, #36]	; (8009800 <TL_SYS_SendCmd+0x34>)
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2210      	movs	r2, #16
 80097e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80097e2:	4b07      	ldr	r3, [pc, #28]	; (8009800 <TL_SYS_SendCmd+0x34>)
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4619      	mov	r1, r3
 80097ea:	2004      	movs	r0, #4
 80097ec:	f000 f8ec 	bl	80099c8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80097f0:	f002 ff38 	bl	800c664 <HW_IPCC_SYS_SendCmd>

  return 0;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20030000 	.word	0x20030000

08009804 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009808:	4b07      	ldr	r3, [pc, #28]	; (8009828 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4619      	mov	r1, r3
 8009810:	2005      	movs	r0, #5
 8009812:	f000 f8d9 	bl	80099c8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009816:	4b05      	ldr	r3, [pc, #20]	; (800982c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a03      	ldr	r2, [pc, #12]	; (8009828 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800981c:	68d2      	ldr	r2, [r2, #12]
 800981e:	6812      	ldr	r2, [r2, #0]
 8009820:	4610      	mov	r0, r2
 8009822:	4798      	blx	r3

  return;
 8009824:	bf00      	nop
}
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20030000 	.word	0x20030000
 800982c:	20000454 	.word	0x20000454

08009830 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009836:	e00e      	b.n	8009856 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009838:	1d3b      	adds	r3, r7, #4
 800983a:	4619      	mov	r1, r3
 800983c:	480b      	ldr	r0, [pc, #44]	; (800986c <HW_IPCC_SYS_EvtNot+0x3c>)
 800983e:	f000 fabe 	bl	8009dbe <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4619      	mov	r1, r3
 8009846:	2006      	movs	r0, #6
 8009848:	f000 f8be 	bl	80099c8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800984c:	4b08      	ldr	r3, [pc, #32]	; (8009870 <HW_IPCC_SYS_EvtNot+0x40>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	4610      	mov	r0, r2
 8009854:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009856:	4805      	ldr	r0, [pc, #20]	; (800986c <HW_IPCC_SYS_EvtNot+0x3c>)
 8009858:	f000 fa22 	bl	8009ca0 <LST_is_empty>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d0ea      	beq.n	8009838 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009862:	bf00      	nop
}
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	200300d0 	.word	0x200300d0
 8009870:	20000458 	.word	0x20000458

08009874 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800987c:	4817      	ldr	r0, [pc, #92]	; (80098dc <TL_MM_Init+0x68>)
 800987e:	f000 f9ff 	bl	8009c80 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009882:	4817      	ldr	r0, [pc, #92]	; (80098e0 <TL_MM_Init+0x6c>)
 8009884:	f000 f9fc 	bl	8009c80 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009888:	4b16      	ldr	r3, [pc, #88]	; (80098e4 <TL_MM_Init+0x70>)
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	4a16      	ldr	r2, [pc, #88]	; (80098e8 <TL_MM_Init+0x74>)
 800988e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009890:	4b15      	ldr	r3, [pc, #84]	; (80098e8 <TL_MM_Init+0x74>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6892      	ldr	r2, [r2, #8]
 8009898:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800989a:	4b13      	ldr	r3, [pc, #76]	; (80098e8 <TL_MM_Init+0x74>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	68d2      	ldr	r2, [r2, #12]
 80098a2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80098a4:	4b10      	ldr	r3, [pc, #64]	; (80098e8 <TL_MM_Init+0x74>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a0c      	ldr	r2, [pc, #48]	; (80098dc <TL_MM_Init+0x68>)
 80098aa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80098ac:	4b0e      	ldr	r3, [pc, #56]	; (80098e8 <TL_MM_Init+0x74>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6812      	ldr	r2, [r2, #0]
 80098b4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80098b6:	4b0c      	ldr	r3, [pc, #48]	; (80098e8 <TL_MM_Init+0x74>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	6852      	ldr	r2, [r2, #4]
 80098be:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80098c0:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <TL_MM_Init+0x74>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	6912      	ldr	r2, [r2, #16]
 80098c8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80098ca:	4b07      	ldr	r3, [pc, #28]	; (80098e8 <TL_MM_Init+0x74>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	6952      	ldr	r2, [r2, #20]
 80098d2:	619a      	str	r2, [r3, #24]

  return;
 80098d4:	bf00      	nop
}
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	200300b8 	.word	0x200300b8
 80098e0:	20000444 	.word	0x20000444
 80098e4:	20030000 	.word	0x20030000
 80098e8:	2000045c 	.word	0x2000045c

080098ec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80098f4:	6879      	ldr	r1, [r7, #4]
 80098f6:	4807      	ldr	r0, [pc, #28]	; (8009914 <TL_MM_EvtDone+0x28>)
 80098f8:	f000 fa1a 	bl	8009d30 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80098fc:	6879      	ldr	r1, [r7, #4]
 80098fe:	2000      	movs	r0, #0
 8009900:	f000 f862 	bl	80099c8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009904:	4804      	ldr	r0, [pc, #16]	; (8009918 <TL_MM_EvtDone+0x2c>)
 8009906:	f002 fed3 	bl	800c6b0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800990a:	bf00      	nop
}
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	20000444 	.word	0x20000444
 8009918:	0800991d 	.word	0x0800991d

0800991c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009922:	e00c      	b.n	800993e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009924:	1d3b      	adds	r3, r7, #4
 8009926:	4619      	mov	r1, r3
 8009928:	480a      	ldr	r0, [pc, #40]	; (8009954 <SendFreeBuf+0x38>)
 800992a:	f000 fa48 	bl	8009dbe <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800992e:	4b0a      	ldr	r3, [pc, #40]	; (8009958 <SendFreeBuf+0x3c>)
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	4611      	mov	r1, r2
 8009938:	4618      	mov	r0, r3
 800993a:	f000 f9f9 	bl	8009d30 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800993e:	4805      	ldr	r0, [pc, #20]	; (8009954 <SendFreeBuf+0x38>)
 8009940:	f000 f9ae 	bl	8009ca0 <LST_is_empty>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d0ec      	beq.n	8009924 <SendFreeBuf+0x8>
  }

  return;
 800994a:	bf00      	nop
}
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	20000444 	.word	0x20000444
 8009958:	20030000 	.word	0x20030000

0800995c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009960:	4805      	ldr	r0, [pc, #20]	; (8009978 <TL_TRACES_Init+0x1c>)
 8009962:	f000 f98d 	bl	8009c80 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009966:	4b05      	ldr	r3, [pc, #20]	; (800997c <TL_TRACES_Init+0x20>)
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	4a03      	ldr	r2, [pc, #12]	; (8009978 <TL_TRACES_Init+0x1c>)
 800996c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800996e:	f002 fed5 	bl	800c71c <HW_IPCC_TRACES_Init>

  return;
 8009972:	bf00      	nop
}
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	200300c0 	.word	0x200300c0
 800997c:	20030000 	.word	0x20030000

08009980 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009986:	e008      	b.n	800999a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009988:	1d3b      	adds	r3, r7, #4
 800998a:	4619      	mov	r1, r3
 800998c:	4808      	ldr	r0, [pc, #32]	; (80099b0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800998e:	f000 fa16 	bl	8009dbe <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4618      	mov	r0, r3
 8009996:	f000 f80d 	bl	80099b4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800999a:	4805      	ldr	r0, [pc, #20]	; (80099b0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800999c:	f000 f980 	bl	8009ca0 <LST_is_empty>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d0f0      	beq.n	8009988 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80099a6:	bf00      	nop
}
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	200300c0 	.word	0x200300c0

080099b4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	6039      	str	r1, [r7, #0]
 80099d2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	2b06      	cmp	r3, #6
 80099d8:	d845      	bhi.n	8009a66 <OutputDbgTrace+0x9e>
 80099da:	a201      	add	r2, pc, #4	; (adr r2, 80099e0 <OutputDbgTrace+0x18>)
 80099dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e0:	080099fd 	.word	0x080099fd
 80099e4:	08009a21 	.word	0x08009a21
 80099e8:	08009a27 	.word	0x08009a27
 80099ec:	08009a3b 	.word	0x08009a3b
 80099f0:	08009a47 	.word	0x08009a47
 80099f4:	08009a4d 	.word	0x08009a4d
 80099f8:	08009a5b 	.word	0x08009a5b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	7a5b      	ldrb	r3, [r3, #9]
 8009a04:	2bff      	cmp	r3, #255	; 0xff
 8009a06:	d005      	beq.n	8009a14 <OutputDbgTrace+0x4c>
 8009a08:	2bff      	cmp	r3, #255	; 0xff
 8009a0a:	dc05      	bgt.n	8009a18 <OutputDbgTrace+0x50>
 8009a0c:	2b0e      	cmp	r3, #14
 8009a0e:	d005      	beq.n	8009a1c <OutputDbgTrace+0x54>
 8009a10:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009a12:	e001      	b.n	8009a18 <OutputDbgTrace+0x50>
          break;
 8009a14:	bf00      	nop
 8009a16:	e027      	b.n	8009a68 <OutputDbgTrace+0xa0>
          break;
 8009a18:	bf00      	nop
 8009a1a:	e025      	b.n	8009a68 <OutputDbgTrace+0xa0>
          break;
 8009a1c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009a1e:	e023      	b.n	8009a68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009a24:	e020      	b.n	8009a68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	7a5b      	ldrb	r3, [r3, #9]
 8009a2e:	2b0e      	cmp	r3, #14
 8009a30:	d001      	beq.n	8009a36 <OutputDbgTrace+0x6e>
 8009a32:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009a34:	e000      	b.n	8009a38 <OutputDbgTrace+0x70>
          break;
 8009a36:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009a38:	e016      	b.n	8009a68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	7a5b      	ldrb	r3, [r3, #9]
 8009a42:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009a44:	e010      	b.n	8009a68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009a4a:	e00d      	b.n	8009a68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	7a5b      	ldrb	r3, [r3, #9]
 8009a54:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009a56:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009a58:	e006      	b.n	8009a68 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	7a5b      	ldrb	r3, [r3, #9]
 8009a62:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009a64:	e000      	b.n	8009a68 <OutputDbgTrace+0xa0>

    default:
      break;
 8009a66:	bf00      	nop
  }

  return;
 8009a68:	bf00      	nop
}
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8009a80:	215c      	movs	r1, #92	; 0x5c
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f003 faf8 	bl	800d078 <strrchr>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d007      	beq.n	8009a9e <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8009a8e:	215c      	movs	r1, #92	; 0x5c
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f003 faf1 	bl	800d078 <strrchr>
 8009a96:	4603      	mov	r3, r0
 8009a98:	3301      	adds	r3, #1
 8009a9a:	60fb      	str	r3, [r7, #12]
 8009a9c:	e00d      	b.n	8009aba <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8009a9e:	212f      	movs	r1, #47	; 0x2f
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f003 fae9 	bl	800d078 <strrchr>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d006      	beq.n	8009aba <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8009aac:	212f      	movs	r1, #47	; 0x2f
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f003 fae2 	bl	800d078 <strrchr>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009aba:	68fb      	ldr	r3, [r7, #12]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aca:	f3ef 8310 	mrs	r3, PRIMASK
 8009ace:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8009ad2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ad4:	b672      	cpsid	i
}
 8009ad6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009ad8:	1cbb      	adds	r3, r7, #2
 8009ada:	4619      	mov	r1, r3
 8009adc:	4812      	ldr	r0, [pc, #72]	; (8009b28 <DbgTrace_TxCpltCallback+0x64>)
 8009ade:	f000 fbe6 	bl	800a2ae <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009ae2:	1cbb      	adds	r3, r7, #2
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4810      	ldr	r0, [pc, #64]	; (8009b28 <DbgTrace_TxCpltCallback+0x64>)
 8009ae8:	f000 fcd2 	bl	800a490 <CircularQueue_Sense>
 8009aec:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00c      	beq.n	8009b0e <DbgTrace_TxCpltCallback+0x4a>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	f383 8810 	msr	PRIMASK, r3
}
 8009afe:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009b00:	887b      	ldrh	r3, [r7, #2]
 8009b02:	4a0a      	ldr	r2, [pc, #40]	; (8009b2c <DbgTrace_TxCpltCallback+0x68>)
 8009b04:	4619      	mov	r1, r3
 8009b06:	6938      	ldr	r0, [r7, #16]
 8009b08:	f7f7 fa25 	bl	8000f56 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009b0c:	e008      	b.n	8009b20 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8009b0e:	4b08      	ldr	r3, [pc, #32]	; (8009b30 <DbgTrace_TxCpltCallback+0x6c>)
 8009b10:	2201      	movs	r2, #1
 8009b12:	701a      	strb	r2, [r3, #0]
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f383 8810 	msr	PRIMASK, r3
}
 8009b1e:	bf00      	nop
}
 8009b20:	bf00      	nop
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	20000460 	.word	0x20000460
 8009b2c:	08009ac5 	.word	0x08009ac5
 8009b30:	20000029 	.word	0x20000029

08009b34 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8009b3a:	f7f7 fa06 	bl	8000f4a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009b3e:	2302      	movs	r3, #2
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	2300      	movs	r3, #0
 8009b44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b48:	4903      	ldr	r1, [pc, #12]	; (8009b58 <DbgTraceInit+0x24>)
 8009b4a:	4804      	ldr	r0, [pc, #16]	; (8009b5c <DbgTraceInit+0x28>)
 8009b4c:	f000 f956 	bl	8009dfc <CircularQueue_Init>
#endif 
#endif
  return;
 8009b50:	bf00      	nop
}
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000480 	.word	0x20000480
 8009b5c:	20000460 	.word	0x20000460

08009b60 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	68b9      	ldr	r1, [r7, #8]
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f000 f805 	bl	8009b80 <DbgTraceWrite>
 8009b76:	4603      	mov	r3, r0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b08a      	sub	sp, #40	; 0x28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b90:	f3ef 8310 	mrs	r3, PRIMASK
 8009b94:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b96:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009b98:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba0:	d102      	bne.n	8009ba8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ba6:	e037      	b.n	8009c18 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d006      	beq.n	8009bbc <DbgTraceWrite+0x3c>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d003      	beq.n	8009bbc <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bba:	e02d      	b.n	8009c18 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d02a      	beq.n	8009c18 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009bc6:	b672      	cpsid	i
}
 8009bc8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	2301      	movs	r3, #1
 8009bd0:	68b9      	ldr	r1, [r7, #8]
 8009bd2:	4814      	ldr	r0, [pc, #80]	; (8009c24 <DbgTraceWrite+0xa4>)
 8009bd4:	f000 f944 	bl	8009e60 <CircularQueue_Add>
 8009bd8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d015      	beq.n	8009c0c <DbgTraceWrite+0x8c>
 8009be0:	4b11      	ldr	r3, [pc, #68]	; (8009c28 <DbgTraceWrite+0xa8>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d010      	beq.n	8009c0c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8009bea:	4b0f      	ldr	r3, [pc, #60]	; (8009c28 <DbgTraceWrite+0xa8>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	701a      	strb	r2, [r3, #0]
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f383 8810 	msr	PRIMASK, r3
}
 8009bfa:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	4a0a      	ldr	r2, [pc, #40]	; (8009c2c <DbgTraceWrite+0xac>)
 8009c02:	4619      	mov	r1, r3
 8009c04:	69f8      	ldr	r0, [r7, #28]
 8009c06:	f7f7 f9a6 	bl	8000f56 <DbgOutputTraces>
 8009c0a:	e005      	b.n	8009c18 <DbgTraceWrite+0x98>
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f383 8810 	msr	PRIMASK, r3
}
 8009c16:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3728      	adds	r7, #40	; 0x28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000460 	.word	0x20000460
 8009c28:	20000029 	.word	0x20000029
 8009c2c:	08009ac5 	.word	0x08009ac5

08009c30 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009c3a:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <OTP_Read+0x48>)
 8009c3c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009c3e:	e002      	b.n	8009c46 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3b08      	subs	r3, #8
 8009c44:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	3307      	adds	r3, #7
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	79fa      	ldrb	r2, [r7, #7]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d003      	beq.n	8009c5a <OTP_Read+0x2a>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4a09      	ldr	r2, [pc, #36]	; (8009c7c <OTP_Read+0x4c>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d1f2      	bne.n	8009c40 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3307      	adds	r3, #7
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	79fa      	ldrb	r2, [r7, #7]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d001      	beq.n	8009c6a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009c66:	2300      	movs	r3, #0
 8009c68:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	1fff73f8 	.word	0x1fff73f8
 8009c7c:	1fff7000 	.word	0x1fff7000

08009c80 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	605a      	str	r2, [r3, #4]
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b087      	sub	sp, #28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8009cac:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009cb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cb2:	b672      	cpsid	i
}
 8009cb4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d102      	bne.n	8009cc6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	75fb      	strb	r3, [r7, #23]
 8009cc4:	e001      	b.n	8009cca <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	75fb      	strb	r3, [r7, #23]
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f383 8810 	msr	PRIMASK, r3
}
 8009cd4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	371c      	adds	r7, #28
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cee:	f3ef 8310 	mrs	r3, PRIMASK
 8009cf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009cf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cf8:	b672      	cpsid	i
}
 8009cfa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	605a      	str	r2, [r3, #4]
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	f383 8810 	msr	PRIMASK, r3
}
 8009d22:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009d24:	bf00      	nop
 8009d26:	371c      	adds	r7, #28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d40:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009d42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d44:	b672      	cpsid	i
}
 8009d46:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f383 8810 	msr	PRIMASK, r3
}
 8009d6e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009d70:	bf00      	nop
 8009d72:	371c      	adds	r7, #28
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b087      	sub	sp, #28
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d84:	f3ef 8310 	mrs	r3, PRIMASK
 8009d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009d8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d8e:	b672      	cpsid	i
}
 8009d90:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	6812      	ldr	r2, [r2, #0]
 8009d9a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	6852      	ldr	r2, [r2, #4]
 8009da4:	605a      	str	r2, [r3, #4]
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f383 8810 	msr	PRIMASK, r3
}
 8009db0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009db2:	bf00      	nop
 8009db4:	371c      	adds	r7, #28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr

08009dbe <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b086      	sub	sp, #24
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
 8009dc6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8009dcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009dce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009dd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dd2:	b672      	cpsid	i
}
 8009dd4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff ffca 	bl	8009d7c <LST_remove_node>
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f383 8810 	msr	PRIMASK, r3
}
 8009df2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009df4:	bf00      	nop
 8009df6:	3718      	adds	r7, #24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	887a      	ldrh	r2, [r7, #2]
 8009e32:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	7e3a      	ldrb	r2, [r7, #24]
 8009e38:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8009e3a:	7e3b      	ldrb	r3, [r7, #24]
 8009e3c:	f003 0302 	and.w	r3, r3, #2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d006      	beq.n	8009e52 <CircularQueue_Init+0x56>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	891b      	ldrh	r3, [r3, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8009e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e50:	e000      	b.n	8009e54 <CircularQueue_Init+0x58>
  }
  return 0;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b08e      	sub	sp, #56	; 0x38
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	603b      	str	r3, [r7, #0]
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009e70:	2300      	movs	r3, #0
 8009e72:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009e74:	2300      	movs	r3, #0
 8009e76:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8009e78:	2300      	movs	r3, #0
 8009e7a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e80:	2300      	movs	r3, #0
 8009e82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009e84:	2300      	movs	r3, #0
 8009e86:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009e88:	2300      	movs	r3, #0
 8009e8a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	891b      	ldrh	r3, [r3, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <CircularQueue_Add+0x38>
 8009e94:	2302      	movs	r3, #2
 8009e96:	e000      	b.n	8009e9a <CircularQueue_Add+0x3a>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	695b      	ldr	r3, [r3, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d02a      	beq.n	8009efa <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	891b      	ldrh	r3, [r3, #8]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d123      	bne.n	8009ef4 <CircularQueue_Add+0x94>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6819      	ldr	r1, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	1c58      	adds	r0, r3, #1
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	4298      	cmp	r0, r3
 8009eca:	d306      	bcc.n	8009eda <CircularQueue_Add+0x7a>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6918      	ldr	r0, [r3, #16]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	1ac3      	subs	r3, r0, r3
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	e002      	b.n	8009ee0 <CircularQueue_Add+0x80>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	440b      	add	r3, r1
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	021b      	lsls	r3, r3, #8
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	4413      	add	r3, r2
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	3302      	adds	r3, #2
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	e001      	b.n	8009ef8 <CircularQueue_Add+0x98>
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	891b      	ldrh	r3, [r3, #8]
 8009ef8:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	891b      	ldrh	r3, [r3, #8]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	891b      	ldrh	r3, [r3, #8]
 8009f06:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d307      	bcc.n	8009f24 <CircularQueue_Add+0xc4>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6919      	ldr	r1, [r3, #16]
 8009f1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009f1e:	440b      	add	r3, r1
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	e000      	b.n	8009f26 <CircularQueue_Add+0xc6>
 8009f24:	2300      	movs	r3, #0
 8009f26:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8009f28:	88fa      	ldrh	r2, [r7, #6]
 8009f2a:	7ffb      	ldrb	r3, [r7, #31]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	461a      	mov	r2, r3
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	fb02 f303 	mul.w	r3, r2, r3
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d80b      	bhi.n	8009f54 <CircularQueue_Add+0xf4>
 8009f3c:	88fa      	ldrh	r2, [r7, #6]
 8009f3e:	7ffb      	ldrb	r3, [r7, #31]
 8009f40:	4413      	add	r3, r2
 8009f42:	461a      	mov	r2, r3
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f4a:	fb01 f202 	mul.w	r2, r1, r2
 8009f4e:	1a9b      	subs	r3, r3, r2
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	e000      	b.n	8009f56 <CircularQueue_Add+0xf6>
 8009f54:	2300      	movs	r3, #0
 8009f56:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8009f58:	7dfa      	ldrb	r2, [r7, #23]
 8009f5a:	7ffb      	ldrb	r3, [r7, #31]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	bf8c      	ite	hi
 8009f60:	2301      	movhi	r3, #1
 8009f62:	2300      	movls	r3, #0
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8009f68:	7fbb      	ldrb	r3, [r7, #30]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d008      	beq.n	8009f80 <CircularQueue_Add+0x120>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	7f1b      	ldrb	r3, [r3, #28]
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d002      	beq.n	8009f80 <CircularQueue_Add+0x120>
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	e000      	b.n	8009f82 <CircularQueue_Add+0x122>
 8009f80:	8bbb      	ldrh	r3, [r7, #28]
 8009f82:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009f84:	7fbb      	ldrb	r3, [r7, #30]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d008      	beq.n	8009f9c <CircularQueue_Add+0x13c>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	7f1b      	ldrb	r3, [r3, #28]
 8009f8e:	f003 0302 	and.w	r3, r3, #2
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d002      	beq.n	8009f9c <CircularQueue_Add+0x13c>
 8009f96:	7ffb      	ldrb	r3, [r7, #31]
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	e000      	b.n	8009f9e <CircularQueue_Add+0x13e>
 8009f9c:	8bbb      	ldrh	r3, [r7, #28]
 8009f9e:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009fa0:	88fb      	ldrh	r3, [r7, #6]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 817e 	beq.w	800a2a4 <CircularQueue_Add+0x444>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	695a      	ldr	r2, [r3, #20]
 8009fac:	88f9      	ldrh	r1, [r7, #6]
 8009fae:	7ffb      	ldrb	r3, [r7, #31]
 8009fb0:	440b      	add	r3, r1
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	fb01 f303 	mul.w	r3, r1, r3
 8009fba:	441a      	add	r2, r3
 8009fbc:	8bbb      	ldrh	r3, [r7, #28]
 8009fbe:	441a      	add	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	f200 816d 	bhi.w	800a2a4 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009fca:	2300      	movs	r3, #0
 8009fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fce:	e14a      	b.n	800a266 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	691a      	ldr	r2, [r3, #16]
 8009fd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009fd6:	441a      	add	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d307      	bcc.n	8009ff0 <CircularQueue_Add+0x190>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	691a      	ldr	r2, [r3, #16]
 8009fe4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009fe6:	441a      	add	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	e003      	b.n	8009ff8 <CircularQueue_Add+0x198>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	691a      	ldr	r2, [r3, #16]
 8009ff4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ff6:	4413      	add	r3, r2
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	891b      	ldrh	r3, [r3, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d130      	bne.n	800a06c <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	1c59      	adds	r1, r3, #1
 800a012:	6339      	str	r1, [r7, #48]	; 0x30
 800a014:	4413      	add	r3, r2
 800a016:	88fa      	ldrh	r2, [r7, #6]
 800a018:	b2d2      	uxtb	r2, r2
 800a01a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a022:	429a      	cmp	r2, r3
 800a024:	d304      	bcc.n	800a030 <CircularQueue_Add+0x1d0>
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	e000      	b.n	800a032 <CircularQueue_Add+0x1d2>
 800a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a032:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a034:	88fb      	ldrh	r3, [r7, #6]
 800a036:	0a1b      	lsrs	r3, r3, #8
 800a038:	b298      	uxth	r0, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	1c59      	adds	r1, r3, #1
 800a042:	6339      	str	r1, [r7, #48]	; 0x30
 800a044:	4413      	add	r3, r2
 800a046:	b2c2      	uxtb	r2, r0
 800a048:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a050:	429a      	cmp	r2, r3
 800a052:	d304      	bcc.n	800a05e <CircularQueue_Add+0x1fe>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	e000      	b.n	800a060 <CircularQueue_Add+0x200>
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	695b      	ldr	r3, [r3, #20]
 800a066:	1c9a      	adds	r2, r3, #2
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a06c:	88fa      	ldrh	r2, [r7, #6]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6859      	ldr	r1, [r3, #4]
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	1acb      	subs	r3, r1, r3
 800a076:	4293      	cmp	r3, r2
 800a078:	bf28      	it	cs
 800a07a:	4613      	movcs	r3, r2
 800a07c:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a07e:	88fb      	ldrh	r3, [r7, #6]
 800a080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a082:	429a      	cmp	r2, r3
 800a084:	d007      	beq.n	800a096 <CircularQueue_Add+0x236>
 800a086:	88fb      	ldrh	r3, [r7, #6]
 800a088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d225      	bcs.n	800a0da <CircularQueue_Add+0x27a>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	7f1b      	ldrb	r3, [r3, #28]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d121      	bne.n	800a0da <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	18d0      	adds	r0, r2, r3
 800a09e:	88fb      	ldrh	r3, [r7, #6]
 800a0a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0a2:	fb02 f303 	mul.w	r3, r2, r3
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f003 f868 	bl	800d182 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	695a      	ldr	r2, [r3, #20]
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	441a      	add	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a0be:	2300      	movs	r3, #0
 800a0c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a0c6:	88fa      	ldrh	r2, [r7, #6]
 800a0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a0ce:	7ffb      	ldrb	r3, [r7, #31]
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	88fb      	ldrh	r3, [r7, #6]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a0d8:	e0a4      	b.n	800a224 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f000 80a1 	beq.w	800a224 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	7f1b      	ldrb	r3, [r3, #28]
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d03a      	beq.n	800a164 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	891b      	ldrh	r3, [r3, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10d      	bne.n	800a112 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	3b02      	subs	r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	22ff      	movs	r2, #255	; 0xff
 800a102:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10a:	3b01      	subs	r3, #1
 800a10c:	4413      	add	r3, r2
 800a10e:	22ff      	movs	r2, #255	; 0xff
 800a110:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	695a      	ldr	r2, [r3, #20]
 800a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a118:	441a      	add	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a122:	88fb      	ldrh	r3, [r7, #6]
 800a124:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a126:	2300      	movs	r3, #0
 800a128:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	891b      	ldrh	r3, [r3, #8]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d16f      	bne.n	800a212 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a138:	1c59      	adds	r1, r3, #1
 800a13a:	6339      	str	r1, [r7, #48]	; 0x30
 800a13c:	4413      	add	r3, r2
 800a13e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a140:	b2d2      	uxtb	r2, r2
 800a142:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a146:	0a18      	lsrs	r0, r3, #8
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	1c59      	adds	r1, r3, #1
 800a150:	6339      	str	r1, [r7, #48]	; 0x30
 800a152:	4413      	add	r3, r2
 800a154:	b2c2      	uxtb	r2, r0
 800a156:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	1c9a      	adds	r2, r3, #2
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	615a      	str	r2, [r3, #20]
 800a162:	e056      	b.n	800a212 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	7f1b      	ldrb	r3, [r3, #28]
 800a168:	f003 0302 	and.w	r3, r3, #2
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d050      	beq.n	800a212 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	891b      	ldrh	r3, [r3, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d14a      	bne.n	800a20e <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	3b02      	subs	r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a184:	b2d2      	uxtb	r2, r2
 800a186:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18a:	0a19      	lsrs	r1, r3, #8
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	3b01      	subs	r3, #1
 800a194:	4413      	add	r3, r2
 800a196:	b2ca      	uxtb	r2, r1
 800a198:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a0:	18d0      	adds	r0, r2, r3
 800a1a2:	88fb      	ldrh	r3, [r7, #6]
 800a1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1a6:	fb02 f303 	mul.w	r3, r2, r3
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	f002 ffe6 	bl	800d182 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	695a      	ldr	r2, [r3, #20]
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	441a      	add	r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a1c6:	88fa      	ldrh	r2, [r7, #6]
 800a1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	1c5a      	adds	r2, r3, #1
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a1d8:	2300      	movs	r3, #0
 800a1da:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e2:	1c59      	adds	r1, r3, #1
 800a1e4:	6339      	str	r1, [r7, #48]	; 0x30
 800a1e6:	4413      	add	r3, r2
 800a1e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ea:	b2d2      	uxtb	r2, r2
 800a1ec:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f0:	0a18      	lsrs	r0, r3, #8
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f8:	1c59      	adds	r1, r3, #1
 800a1fa:	6339      	str	r1, [r7, #48]	; 0x30
 800a1fc:	4413      	add	r3, r2
 800a1fe:	b2c2      	uxtb	r2, r0
 800a200:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	695b      	ldr	r3, [r3, #20]
 800a206:	1c9a      	adds	r2, r3, #2
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	615a      	str	r2, [r3, #20]
 800a20c:	e001      	b.n	800a212 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	e049      	b.n	800a2a6 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a212:	7ffb      	ldrb	r3, [r7, #31]
 800a214:	b29a      	uxth	r2, r3
 800a216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a218:	b29b      	uxth	r3, r3
 800a21a:	4413      	add	r3, r2
 800a21c:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	2b00      	cmp	r3, #0
 800a228:	d015      	beq.n	800a256 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	18d0      	adds	r0, r2, r3
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a236:	fb03 f202 	mul.w	r2, r3, r2
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	4413      	add	r3, r2
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	4413      	add	r3, r2
 800a242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a244:	4619      	mov	r1, r3
 800a246:	f002 ff9c 	bl	800d182 <memcpy>
        q->byteCount += NbBytesToCopy;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	695a      	ldr	r2, [r3, #20]
 800a24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a250:	441a      	add	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	1c5a      	adds	r2, r3, #1
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	3301      	adds	r3, #1
 800a264:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	f4ff aeb0 	bcc.w	8009fd0 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6919      	ldr	r1, [r3, #16]
 800a278:	7ffb      	ldrb	r3, [r7, #31]
 800a27a:	4419      	add	r1, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	4299      	cmp	r1, r3
 800a282:	d307      	bcc.n	800a294 <CircularQueue_Add+0x434>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6919      	ldr	r1, [r3, #16]
 800a288:	7ffb      	ldrb	r3, [r7, #31]
 800a28a:	4419      	add	r1, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	1acb      	subs	r3, r1, r3
 800a292:	e003      	b.n	800a29c <CircularQueue_Add+0x43c>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6919      	ldr	r1, [r3, #16]
 800a298:	7ffb      	ldrb	r3, [r7, #31]
 800a29a:	440b      	add	r3, r1
 800a29c:	4413      	add	r3, r2
 800a29e:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	e000      	b.n	800a2a6 <CircularQueue_Add+0x446>
    return NULL;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3738      	adds	r7, #56	; 0x38
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b085      	sub	sp, #20
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	891b      	ldrh	r3, [r3, #8]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <CircularQueue_Remove+0x1e>
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	e000      	b.n	800a2ce <CircularQueue_Remove+0x20>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	695b      	ldr	r3, [r3, #20]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 80cc 	beq.w	800a476 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	891b      	ldrh	r3, [r3, #8]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d121      	bne.n	800a32a <CircularQueue_Remove+0x7c>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6819      	ldr	r1, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	1c58      	adds	r0, r3, #1
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	4298      	cmp	r0, r3
 800a304:	d306      	bcc.n	800a314 <CircularQueue_Remove+0x66>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68d8      	ldr	r0, [r3, #12]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	1ac3      	subs	r3, r0, r3
 800a310:	3301      	adds	r3, #1
 800a312:	e002      	b.n	800a31a <CircularQueue_Remove+0x6c>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	3301      	adds	r3, #1
 800a31a:	440b      	add	r3, r1
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	021b      	lsls	r3, r3, #8
 800a322:	b29b      	uxth	r3, r3
 800a324:	4413      	add	r3, r2
 800a326:	b29b      	uxth	r3, r3
 800a328:	e001      	b.n	800a32e <CircularQueue_Remove+0x80>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	891b      	ldrh	r3, [r3, #8]
 800a32e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	7f1b      	ldrb	r3, [r3, #28]
 800a334:	f003 0301 	and.w	r3, r3, #1
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d057      	beq.n	800a3ec <CircularQueue_Remove+0x13e>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	7f1b      	ldrb	r3, [r3, #28]
 800a340:	f003 0302 	and.w	r3, r3, #2
 800a344:	2b00      	cmp	r3, #0
 800a346:	d151      	bne.n	800a3ec <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a348:	897b      	ldrh	r3, [r7, #10]
 800a34a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a34e:	4293      	cmp	r3, r2
 800a350:	d103      	bne.n	800a35a <CircularQueue_Remove+0xac>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	891b      	ldrh	r3, [r3, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d012      	beq.n	800a380 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68da      	ldr	r2, [r3, #12]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a362:	429a      	cmp	r2, r3
 800a364:	d942      	bls.n	800a3ec <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	891b      	ldrh	r3, [r3, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d03e      	beq.n	800a3ec <CircularQueue_Remove+0x13e>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	8912      	ldrh	r2, [r2, #8]
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d235      	bcs.n	800a3ec <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	695a      	ldr	r2, [r3, #20]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	68d9      	ldr	r1, [r3, #12]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	1acb      	subs	r3, r1, r3
 800a38e:	441a      	add	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	891b      	ldrh	r3, [r3, #8]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d121      	bne.n	800a3e6 <CircularQueue_Remove+0x138>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6819      	ldr	r1, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	1c58      	adds	r0, r3, #1
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	4298      	cmp	r0, r3
 800a3c0:	d306      	bcc.n	800a3d0 <CircularQueue_Remove+0x122>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68d8      	ldr	r0, [r3, #12]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	1ac3      	subs	r3, r0, r3
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	e002      	b.n	800a3d6 <CircularQueue_Remove+0x128>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	440b      	add	r3, r1
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	021b      	lsls	r3, r3, #8
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	e001      	b.n	800a3ea <CircularQueue_Remove+0x13c>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	891b      	ldrh	r3, [r3, #8]
 800a3ea:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	68d9      	ldr	r1, [r3, #12]
 800a3f4:	7a7b      	ldrb	r3, [r7, #9]
 800a3f6:	4419      	add	r1, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	4299      	cmp	r1, r3
 800a3fe:	d307      	bcc.n	800a410 <CircularQueue_Remove+0x162>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	68d9      	ldr	r1, [r3, #12]
 800a404:	7a7b      	ldrb	r3, [r7, #9]
 800a406:	4419      	add	r1, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	1acb      	subs	r3, r1, r3
 800a40e:	e003      	b.n	800a418 <CircularQueue_Remove+0x16a>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68d9      	ldr	r1, [r3, #12]
 800a414:	7a7b      	ldrb	r3, [r7, #9]
 800a416:	440b      	add	r3, r1
 800a418:	4413      	add	r3, r2
 800a41a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	8979      	ldrh	r1, [r7, #10]
 800a422:	7a7a      	ldrb	r2, [r7, #9]
 800a424:	440a      	add	r2, r1
 800a426:	1a9a      	subs	r2, r3, r2
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d01b      	beq.n	800a46c <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	68da      	ldr	r2, [r3, #12]
 800a438:	897b      	ldrh	r3, [r7, #10]
 800a43a:	441a      	add	r2, r3
 800a43c:	7a7b      	ldrb	r3, [r7, #9]
 800a43e:	441a      	add	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	429a      	cmp	r2, r3
 800a446:	d309      	bcc.n	800a45c <CircularQueue_Remove+0x1ae>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68da      	ldr	r2, [r3, #12]
 800a44c:	897b      	ldrh	r3, [r7, #10]
 800a44e:	441a      	add	r2, r3
 800a450:	7a7b      	ldrb	r3, [r7, #9]
 800a452:	441a      	add	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	e005      	b.n	800a468 <CircularQueue_Remove+0x1ba>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	68da      	ldr	r2, [r3, #12]
 800a460:	897b      	ldrh	r3, [r7, #10]
 800a462:	441a      	add	r2, r3
 800a464:	7a7b      	ldrb	r3, [r7, #9]
 800a466:	4413      	add	r3, r2
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	1e5a      	subs	r2, r3, #1
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	897a      	ldrh	r2, [r7, #10]
 800a480:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a482:	68fb      	ldr	r3, [r7, #12]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	891b      	ldrh	r3, [r3, #8]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <CircularQueue_Sense+0x1e>
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	e000      	b.n	800a4b0 <CircularQueue_Sense+0x20>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 8090 	beq.w	800a5e4 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	891b      	ldrh	r3, [r3, #8]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d121      	bne.n	800a516 <CircularQueue_Sense+0x86>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	4413      	add	r3, r2
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6819      	ldr	r1, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	1c58      	adds	r0, r3, #1
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	4298      	cmp	r0, r3
 800a4f0:	d306      	bcc.n	800a500 <CircularQueue_Sense+0x70>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68d8      	ldr	r0, [r3, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	1ac3      	subs	r3, r0, r3
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	e002      	b.n	800a506 <CircularQueue_Sense+0x76>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	3301      	adds	r3, #1
 800a506:	440b      	add	r3, r1
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	b29b      	uxth	r3, r3
 800a510:	4413      	add	r3, r2
 800a512:	b29b      	uxth	r3, r3
 800a514:	e001      	b.n	800a51a <CircularQueue_Sense+0x8a>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	891b      	ldrh	r3, [r3, #8]
 800a51a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	7f1b      	ldrb	r3, [r3, #28]
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b00      	cmp	r3, #0
 800a526:	d048      	beq.n	800a5ba <CircularQueue_Sense+0x12a>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	7f1b      	ldrb	r3, [r3, #28]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d142      	bne.n	800a5ba <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a534:	8a7b      	ldrh	r3, [r7, #18]
 800a536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d103      	bne.n	800a546 <CircularQueue_Sense+0xb6>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	891b      	ldrh	r3, [r3, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d012      	beq.n	800a56c <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68da      	ldr	r2, [r3, #12]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a54e:	429a      	cmp	r2, r3
 800a550:	d933      	bls.n	800a5ba <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	891b      	ldrh	r3, [r3, #8]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d02f      	beq.n	800a5ba <CircularQueue_Sense+0x12a>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	8912      	ldrh	r2, [r2, #8]
 800a568:	4293      	cmp	r3, r2
 800a56a:	d226      	bcs.n	800a5ba <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a56c:	2300      	movs	r3, #0
 800a56e:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	891b      	ldrh	r3, [r3, #8]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d11d      	bne.n	800a5b4 <CircularQueue_Sense+0x124>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4413      	add	r3, r2
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	b29a      	uxth	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6819      	ldr	r1, [r3, #0]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	1c58      	adds	r0, r3, #1
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	4298      	cmp	r0, r3
 800a592:	d305      	bcc.n	800a5a0 <CircularQueue_Sense+0x110>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	1ac3      	subs	r3, r0, r3
 800a59c:	3301      	adds	r3, #1
 800a59e:	e001      	b.n	800a5a4 <CircularQueue_Sense+0x114>
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	440b      	add	r3, r1
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	021b      	lsls	r3, r3, #8
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	4413      	add	r3, r2
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	e001      	b.n	800a5b8 <CircularQueue_Sense+0x128>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	891b      	ldrh	r3, [r3, #8]
 800a5b8:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	7af9      	ldrb	r1, [r7, #11]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4419      	add	r1, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	4299      	cmp	r1, r3
 800a5ca:	d306      	bcc.n	800a5da <CircularQueue_Sense+0x14a>
 800a5cc:	7af9      	ldrb	r1, [r7, #11]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	4419      	add	r1, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	1acb      	subs	r3, r1, r3
 800a5d8:	e002      	b.n	800a5e0 <CircularQueue_Sense+0x150>
 800a5da:	7af9      	ldrb	r1, [r7, #11]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	440b      	add	r3, r1
 800a5e0:	4413      	add	r3, r2
 800a5e2:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d002      	beq.n	800a5f0 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	8a7a      	ldrh	r2, [r7, #18]
 800a5ee:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800a5f0:	697b      	ldr	r3, [r7, #20]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	371c      	adds	r7, #28
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
	...

0800a600 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a600:	b480      	push	{r7}
 800a602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a604:	4b03      	ldr	r3, [pc, #12]	; (800a614 <LL_FLASH_GetUDN+0x14>)
 800a606:	681b      	ldr	r3, [r3, #0]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	1fff7580 	.word	0x1fff7580

0800a618 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a618:	b480      	push	{r7}
 800a61a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a61c:	4b03      	ldr	r3, [pc, #12]	; (800a62c <LL_FLASH_GetDeviceID+0x14>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	b2db      	uxtb	r3, r3
}
 800a622:	4618      	mov	r0, r3
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	1fff7584 	.word	0x1fff7584

0800a630 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a630:	b480      	push	{r7}
 800a632:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800a634:	4b03      	ldr	r3, [pc, #12]	; (800a644 <LL_FLASH_GetSTCompanyID+0x14>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	0a1b      	lsrs	r3, r3, #8
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	1fff7584 	.word	0x1fff7584

0800a648 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800a648:	b5b0      	push	{r4, r5, r7, lr}
 800a64a:	b090      	sub	sp, #64	; 0x40
 800a64c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a64e:	2392      	movs	r3, #146	; 0x92
 800a650:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a654:	4b4a      	ldr	r3, [pc, #296]	; (800a780 <APP_BLE_Init+0x138>)
 800a656:	1d3c      	adds	r4, r7, #4
 800a658:	461d      	mov	r5, r3
 800a65a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a65c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a65e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a666:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a66a:	c403      	stmia	r4!, {r0, r1}
 800a66c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800a66e:	f000 fbab 	bl	800adc8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a672:	2101      	movs	r1, #1
 800a674:	2002      	movs	r0, #2
 800a676:	f002 f879 	bl	800c76c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a67a:	4a42      	ldr	r2, [pc, #264]	; (800a784 <APP_BLE_Init+0x13c>)
 800a67c:	2100      	movs	r1, #0
 800a67e:	2010      	movs	r0, #16
 800a680:	f002 f9a0 	bl	800c9c4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800a684:	1d3b      	adds	r3, r7, #4
 800a686:	4618      	mov	r0, r3
 800a688:	f7fe fbe6 	bl	8008e58 <SHCI_C2_BLE_Init>
 800a68c:	4603      	mov	r3, r0
 800a68e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800a692:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a696:	2b00      	cmp	r3, #0
 800a698:	d012      	beq.n	800a6c0 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800a69a:	483b      	ldr	r0, [pc, #236]	; (800a788 <APP_BLE_Init+0x140>)
 800a69c:	f7ff f9ea 	bl	8009a74 <DbgTraceGetFileName>
 800a6a0:	4601      	mov	r1, r0
 800a6a2:	f44f 739b 	mov.w	r3, #310	; 0x136
 800a6a6:	4a39      	ldr	r2, [pc, #228]	; (800a78c <APP_BLE_Init+0x144>)
 800a6a8:	4839      	ldr	r0, [pc, #228]	; (800a790 <APP_BLE_Init+0x148>)
 800a6aa:	f002 fb8f 	bl	800cdcc <iprintf>
 800a6ae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4837      	ldr	r0, [pc, #220]	; (800a794 <APP_BLE_Init+0x14c>)
 800a6b6:	f002 fb89 	bl	800cdcc <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800a6ba:	f7f8 f9f9 	bl	8002ab0 <Error_Handler>
 800a6be:	e00c      	b.n	800a6da <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800a6c0:	4831      	ldr	r0, [pc, #196]	; (800a788 <APP_BLE_Init+0x140>)
 800a6c2:	f7ff f9d7 	bl	8009a74 <DbgTraceGetFileName>
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	f44f 739e 	mov.w	r3, #316	; 0x13c
 800a6cc:	4a2f      	ldr	r2, [pc, #188]	; (800a78c <APP_BLE_Init+0x144>)
 800a6ce:	4830      	ldr	r0, [pc, #192]	; (800a790 <APP_BLE_Init+0x148>)
 800a6d0:	f002 fb7c 	bl	800cdcc <iprintf>
 800a6d4:	4830      	ldr	r0, [pc, #192]	; (800a798 <APP_BLE_Init+0x150>)
 800a6d6:	f002 fb79 	bl	800cdcc <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a6da:	f000 fb8b 	bl	800adf4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a6de:	f7fe faf9 	bl	8008cd4 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800a6e2:	4a2e      	ldr	r2, [pc, #184]	; (800a79c <APP_BLE_Init+0x154>)
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	f002 f96c 	bl	800c9c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 800a6ec:	4a2c      	ldr	r2, [pc, #176]	; (800a7a0 <APP_BLE_Init+0x158>)
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	2002      	movs	r0, #2
 800a6f2:	f002 f967 	bl	800c9c4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a6f6:	4b2b      	ldr	r3, [pc, #172]	; (800a7a4 <APP_BLE_Init+0x15c>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  ret = aci_hal_set_radio_activity_mask(0x0020);
 800a6fe:	2020      	movs	r0, #32
 800a700:	f7fe f90d 	bl	800891e <aci_hal_set_radio_activity_mask>
 800a704:	4603      	mov	r3, r0
 800a706:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800a70a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d010      	beq.n	800a734 <APP_BLE_Init+0xec>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800a712:	481d      	ldr	r0, [pc, #116]	; (800a788 <APP_BLE_Init+0x140>)
 800a714:	f7ff f9ae 	bl	8009a74 <DbgTraceGetFileName>
 800a718:	4601      	mov	r1, r0
 800a71a:	f240 1359 	movw	r3, #345	; 0x159
 800a71e:	4a1b      	ldr	r2, [pc, #108]	; (800a78c <APP_BLE_Init+0x144>)
 800a720:	481b      	ldr	r0, [pc, #108]	; (800a790 <APP_BLE_Init+0x148>)
 800a722:	f002 fb53 	bl	800cdcc <iprintf>
 800a726:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a72a:	4619      	mov	r1, r3
 800a72c:	481e      	ldr	r0, [pc, #120]	; (800a7a8 <APP_BLE_Init+0x160>)
 800a72e:	f002 fb4d 	bl	800cdcc <iprintf>
 800a732:	e00c      	b.n	800a74e <APP_BLE_Init+0x106>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800a734:	4814      	ldr	r0, [pc, #80]	; (800a788 <APP_BLE_Init+0x140>)
 800a736:	f7ff f99d 	bl	8009a74 <DbgTraceGetFileName>
 800a73a:	4601      	mov	r1, r0
 800a73c:	f240 135d 	movw	r3, #349	; 0x15d
 800a740:	4a12      	ldr	r2, [pc, #72]	; (800a78c <APP_BLE_Init+0x144>)
 800a742:	4813      	ldr	r0, [pc, #76]	; (800a790 <APP_BLE_Init+0x148>)
 800a744:	f002 fb42 	bl	800cdcc <iprintf>
 800a748:	4818      	ldr	r0, [pc, #96]	; (800a7ac <APP_BLE_Init+0x164>)
 800a74a:	f002 fb3f 	bl	800cdcc <iprintf>
  }
  APP_DBG_MSG("\n");
 800a74e:	480e      	ldr	r0, [pc, #56]	; (800a788 <APP_BLE_Init+0x140>)
 800a750:	f7ff f990 	bl	8009a74 <DbgTraceGetFileName>
 800a754:	4601      	mov	r1, r0
 800a756:	f240 135f 	movw	r3, #351	; 0x15f
 800a75a:	4a0c      	ldr	r2, [pc, #48]	; (800a78c <APP_BLE_Init+0x144>)
 800a75c:	480c      	ldr	r0, [pc, #48]	; (800a790 <APP_BLE_Init+0x148>)
 800a75e:	f002 fb35 	bl	800cdcc <iprintf>
 800a762:	200a      	movs	r0, #10
 800a764:	f002 fb44 	bl	800cdf0 <putchar>
#endif
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 800a768:	f000 fefa 	bl	800b560 <P2PC_APP_Init>
  /* USER CODE BEGIN APP_BLE_Init_3 */

  /* USER CODE END APP_BLE_Init_3 */

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800a76c:	4b10      	ldr	r3, [pc, #64]	; (800a7b0 <APP_BLE_Init+0x168>)
 800a76e:	2200      	movs	r2, #0
 800a770:	4910      	ldr	r1, [pc, #64]	; (800a7b4 <APP_BLE_Init+0x16c>)
 800a772:	2000      	movs	r0, #0
 800a774:	f7f7 fd04 	bl	8002180 <HW_TS_Create>
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */
  return;
 800a778:	bf00      	nop
}
 800a77a:	3740      	adds	r7, #64	; 0x40
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bdb0      	pop	{r4, r5, r7, pc}
 800a780:	0800e184 	.word	0x0800e184
 800a784:	08009075 	.word	0x08009075
 800a788:	0800e078 	.word	0x0800e078
 800a78c:	0800efd4 	.word	0x0800efd4
 800a790:	0800e094 	.word	0x0800e094
 800a794:	0800e0a8 	.word	0x0800e0a8
 800a798:	0800e0e0 	.word	0x0800e0e0
 800a79c:	0800b2c9 	.word	0x0800b2c9
 800a7a0:	0800b371 	.word	0x0800b371
 800a7a4:	20001494 	.word	0x20001494
 800a7a8:	0800e108 	.word	0x0800e108
 800a7ac:	0800e14c 	.word	0x0800e14c
 800a7b0:	0800b415 	.word	0x0800b415
 800a7b4:	20001515 	.word	0x20001515

0800a7b8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 800a7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ba:	b097      	sub	sp, #92	; 0x5c
 800a7bc:	af06      	add	r7, sp, #24
 800a7be:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blecore_aci *blecore_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c8:	3302      	adds	r3, #2
 800a7ca:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
#if (OOB_DEMO != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a7d0:	2392      	movs	r3, #146	; 0x92
 800a7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif

  switch (event_pckt->evt)
 800a7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	2bff      	cmp	r3, #255	; 0xff
 800a7dc:	d009      	beq.n	800a7f2 <SVCCTL_App_Notification+0x3a>
 800a7de:	2bff      	cmp	r3, #255	; 0xff
 800a7e0:	f300 829f 	bgt.w	800ad22 <SVCCTL_App_Notification+0x56a>
 800a7e4:	2b05      	cmp	r3, #5
 800a7e6:	f000 811b 	beq.w	800aa20 <SVCCTL_App_Notification+0x268>
 800a7ea:	2b3e      	cmp	r3, #62	; 0x3e
 800a7ec:	f000 8140 	beq.w	800aa70 <SVCCTL_App_Notification+0x2b8>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 800a7f0:	e297      	b.n	800ad22 <SVCCTL_App_Notification+0x56a>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800a7f2:	4ba4      	ldr	r3, [pc, #656]	; (800aa84 <SVCCTL_App_Notification+0x2cc>)
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	701a      	strb	r2, [r3, #0]
        blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fa:	3302      	adds	r3, #2
 800a7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        switch (blecore_evt->ecode)
 800a7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a800:	881b      	ldrh	r3, [r3, #0]
 800a802:	b29b      	uxth	r3, r3
 800a804:	f640 0202 	movw	r2, #2050	; 0x802
 800a808:	4293      	cmp	r3, r2
 800a80a:	d046      	beq.n	800a89a <SVCCTL_App_Notification+0xe2>
 800a80c:	f640 0202 	movw	r2, #2050	; 0x802
 800a810:	4293      	cmp	r3, r2
 800a812:	f300 8101 	bgt.w	800aa18 <SVCCTL_App_Notification+0x260>
 800a816:	2b04      	cmp	r3, #4
 800a818:	f000 80f4 	beq.w	800aa04 <SVCCTL_App_Notification+0x24c>
 800a81c:	f240 4207 	movw	r2, #1031	; 0x407
 800a820:	4293      	cmp	r3, r2
 800a822:	f040 80f9 	bne.w	800aa18 <SVCCTL_App_Notification+0x260>
              aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blecore_evt->data;
 800a826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a828:	3302      	adds	r3, #2
 800a82a:	627b      	str	r3, [r7, #36]	; 0x24
              if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	2b02      	cmp	r3, #2
 800a832:	f040 80f3 	bne.w	800aa1c <SVCCTL_App_Notification+0x264>
                  && gap_evt_proc_complete->Status == 0x00)
 800a836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a838:	785b      	ldrb	r3, [r3, #1]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f040 80ee 	bne.w	800aa1c <SVCCTL_App_Notification+0x264>
            	Blue_Off();
 800a840:	f7f6 ffa4 	bl	800178c <Blue_Off>
                APP_DBG_MSG("LED BLUE OFF\n");
 800a844:	4890      	ldr	r0, [pc, #576]	; (800aa88 <SVCCTL_App_Notification+0x2d0>)
 800a846:	f7ff f915 	bl	8009a74 <DbgTraceGetFileName>
 800a84a:	4601      	mov	r1, r0
 800a84c:	f240 13a9 	movw	r3, #425	; 0x1a9
 800a850:	4a8e      	ldr	r2, [pc, #568]	; (800aa8c <SVCCTL_App_Notification+0x2d4>)
 800a852:	488f      	ldr	r0, [pc, #572]	; (800aa90 <SVCCTL_App_Notification+0x2d8>)
 800a854:	f002 faba 	bl	800cdcc <iprintf>
 800a858:	488e      	ldr	r0, [pc, #568]	; (800aa94 <SVCCTL_App_Notification+0x2dc>)
 800a85a:	f002 fb25 	bl	800cea8 <puts>
                APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n\r");
 800a85e:	488a      	ldr	r0, [pc, #552]	; (800aa88 <SVCCTL_App_Notification+0x2d0>)
 800a860:	f7ff f908 	bl	8009a74 <DbgTraceGetFileName>
 800a864:	4601      	mov	r1, r0
 800a866:	f240 13ab 	movw	r3, #427	; 0x1ab
 800a86a:	4a88      	ldr	r2, [pc, #544]	; (800aa8c <SVCCTL_App_Notification+0x2d4>)
 800a86c:	4888      	ldr	r0, [pc, #544]	; (800aa90 <SVCCTL_App_Notification+0x2d8>)
 800a86e:	f002 faad 	bl	800cdcc <iprintf>
 800a872:	4889      	ldr	r0, [pc, #548]	; (800aa98 <SVCCTL_App_Notification+0x2e0>)
 800a874:	f002 faaa 	bl	800cdcc <iprintf>
                if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800a878:	4b88      	ldr	r3, [pc, #544]	; (800aa9c <SVCCTL_App_Notification+0x2e4>)
 800a87a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a87e:	2b01      	cmp	r3, #1
 800a880:	f040 80cc 	bne.w	800aa1c <SVCCTL_App_Notification+0x264>
 800a884:	4b85      	ldr	r3, [pc, #532]	; (800aa9c <SVCCTL_App_Notification+0x2e4>)
 800a886:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a88a:	2b06      	cmp	r3, #6
 800a88c:	f000 80c6 	beq.w	800aa1c <SVCCTL_App_Notification+0x264>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800a890:	2100      	movs	r1, #0
 800a892:	2002      	movs	r0, #2
 800a894:	f002 f8b8 	bl	800ca08 <UTIL_SEQ_SetTask>
            break;
 800a898:	e0c0      	b.n	800aa1c <SVCCTL_App_Notification+0x264>
              aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blecore_evt->data;
 800a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89c:	3302      	adds	r3, #2
 800a89e:	62bb      	str	r3, [r7, #40]	; 0x28
              ret = aci_hal_set_radio_activity_mask(0x0000);
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	f7fe f83c 	bl	800891e <aci_hal_set_radio_activity_mask>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 800a8ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d010      	beq.n	800a8d6 <SVCCTL_App_Notification+0x11e>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800a8b4:	4874      	ldr	r0, [pc, #464]	; (800aa88 <SVCCTL_App_Notification+0x2d0>)
 800a8b6:	f7ff f8dd 	bl	8009a74 <DbgTraceGetFileName>
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	f240 13bf 	movw	r3, #447	; 0x1bf
 800a8c0:	4a72      	ldr	r2, [pc, #456]	; (800aa8c <SVCCTL_App_Notification+0x2d4>)
 800a8c2:	4873      	ldr	r0, [pc, #460]	; (800aa90 <SVCCTL_App_Notification+0x2d8>)
 800a8c4:	f002 fa82 	bl	800cdcc <iprintf>
 800a8c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	4874      	ldr	r0, [pc, #464]	; (800aaa0 <SVCCTL_App_Notification+0x2e8>)
 800a8d0:	f002 fa7c 	bl	800cdcc <iprintf>
 800a8d4:	e00c      	b.n	800a8f0 <SVCCTL_App_Notification+0x138>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800a8d6:	486c      	ldr	r0, [pc, #432]	; (800aa88 <SVCCTL_App_Notification+0x2d0>)
 800a8d8:	f7ff f8cc 	bl	8009a74 <DbgTraceGetFileName>
 800a8dc:	4601      	mov	r1, r0
 800a8de:	f240 13c3 	movw	r3, #451	; 0x1c3
 800a8e2:	4a6a      	ldr	r2, [pc, #424]	; (800aa8c <SVCCTL_App_Notification+0x2d4>)
 800a8e4:	486a      	ldr	r0, [pc, #424]	; (800aa90 <SVCCTL_App_Notification+0x2d8>)
 800a8e6:	f002 fa71 	bl	800cdcc <iprintf>
 800a8ea:	486e      	ldr	r0, [pc, #440]	; (800aaa4 <SVCCTL_App_Notification+0x2ec>)
 800a8ec:	f002 fa6e 	bl	800cdcc <iprintf>
              APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 800a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f2:	789a      	ldrb	r2, [r3, #2]
 800a8f4:	4b6c      	ldr	r3, [pc, #432]	; (800aaa8 <SVCCTL_App_Notification+0x2f0>)
 800a8f6:	701a      	strb	r2, [r3, #0]
              APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	4b69      	ldr	r3, [pc, #420]	; (800aaa8 <SVCCTL_App_Notification+0x2f0>)
 800a902:	805a      	strh	r2, [r3, #2]
              APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 800a904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a906:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	4b66      	ldr	r3, [pc, #408]	; (800aaa8 <SVCCTL_App_Notification+0x2f0>)
 800a90e:	809a      	strh	r2, [r3, #4]
              APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a916:	b29a      	uxth	r2, r3
 800a918:	4b63      	ldr	r3, [pc, #396]	; (800aaa8 <SVCCTL_App_Notification+0x2f0>)
 800a91a:	80da      	strh	r2, [r3, #6]
              APP_BLE_p2p_Conn_Update_req.Latency = pr->Latency;
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800a922:	b29a      	uxth	r2, r3
 800a924:	4b60      	ldr	r3, [pc, #384]	; (800aaa8 <SVCCTL_App_Notification+0x2f0>)
 800a926:	811a      	strh	r2, [r3, #8]
              APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800a92e:	b29a      	uxth	r2, r3
 800a930:	4b5d      	ldr	r3, [pc, #372]	; (800aaa8 <SVCCTL_App_Notification+0x2f0>)
 800a932:	815a      	strh	r2, [r3, #10]
              ret = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800a934:	4b59      	ldr	r3, [pc, #356]	; (800aa9c <SVCCTL_App_Notification+0x2e4>)
 800a936:	8ad8      	ldrh	r0, [r3, #22]
 800a938:	4b5b      	ldr	r3, [pc, #364]	; (800aaa8 <SVCCTL_App_Notification+0x2f0>)
 800a93a:	8899      	ldrh	r1, [r3, #4]
 800a93c:	4b5a      	ldr	r3, [pc, #360]	; (800aaa8 <SVCCTL_App_Notification+0x2f0>)
 800a93e:	88dc      	ldrh	r4, [r3, #6]
 800a940:	4b59      	ldr	r3, [pc, #356]	; (800aaa8 <SVCCTL_App_Notification+0x2f0>)
 800a942:	891d      	ldrh	r5, [r3, #8]
 800a944:	4b58      	ldr	r3, [pc, #352]	; (800aaa8 <SVCCTL_App_Notification+0x2f0>)
 800a946:	895b      	ldrh	r3, [r3, #10]
 800a948:	4a57      	ldr	r2, [pc, #348]	; (800aaa8 <SVCCTL_App_Notification+0x2f0>)
 800a94a:	7812      	ldrb	r2, [r2, #0]
 800a94c:	2601      	movs	r6, #1
 800a94e:	9604      	str	r6, [sp, #16]
 800a950:	9203      	str	r2, [sp, #12]
 800a952:	2210      	movs	r2, #16
 800a954:	9202      	str	r2, [sp, #8]
 800a956:	2210      	movs	r2, #16
 800a958:	9201      	str	r2, [sp, #4]
 800a95a:	9300      	str	r3, [sp, #0]
 800a95c:	462b      	mov	r3, r5
 800a95e:	4622      	mov	r2, r4
 800a960:	f7fe f855 	bl	8008a0e <aci_l2cap_connection_parameter_update_resp>
 800a964:	4603      	mov	r3, r0
 800a966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if(ret != BLE_STATUS_SUCCESS)
 800a96a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d012      	beq.n	800a998 <SVCCTL_App_Notification+0x1e0>
                APP_DBG_MSG("  Fail   : aci_l2cap_connection_parameter_update_resp command, result: 0x%x \n\r", ret);
 800a972:	4845      	ldr	r0, [pc, #276]	; (800aa88 <SVCCTL_App_Notification+0x2d0>)
 800a974:	f7ff f87e 	bl	8009a74 <DbgTraceGetFileName>
 800a978:	4601      	mov	r1, r0
 800a97a:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 800a97e:	4a43      	ldr	r2, [pc, #268]	; (800aa8c <SVCCTL_App_Notification+0x2d4>)
 800a980:	4843      	ldr	r0, [pc, #268]	; (800aa90 <SVCCTL_App_Notification+0x2d8>)
 800a982:	f002 fa23 	bl	800cdcc <iprintf>
 800a986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a98a:	4619      	mov	r1, r3
 800a98c:	4847      	ldr	r0, [pc, #284]	; (800aaac <SVCCTL_App_Notification+0x2f4>)
 800a98e:	f002 fa1d 	bl	800cdcc <iprintf>
                Red_On();
 800a992:	f7f6 fecb 	bl	800172c <Red_On>
 800a996:	e00c      	b.n	800a9b2 <SVCCTL_App_Notification+0x1fa>
                APP_DBG_MSG("  Success: aci_l2cap_connection_parameter_update_resp command\n\r");
 800a998:	483b      	ldr	r0, [pc, #236]	; (800aa88 <SVCCTL_App_Notification+0x2d0>)
 800a99a:	f7ff f86b 	bl	8009a74 <DbgTraceGetFileName>
 800a99e:	4601      	mov	r1, r0
 800a9a0:	f240 13df 	movw	r3, #479	; 0x1df
 800a9a4:	4a39      	ldr	r2, [pc, #228]	; (800aa8c <SVCCTL_App_Notification+0x2d4>)
 800a9a6:	483a      	ldr	r0, [pc, #232]	; (800aa90 <SVCCTL_App_Notification+0x2d8>)
 800a9a8:	f002 fa10 	bl	800cdcc <iprintf>
 800a9ac:	4840      	ldr	r0, [pc, #256]	; (800aab0 <SVCCTL_App_Notification+0x2f8>)
 800a9ae:	f002 fa0d 	bl	800cdcc <iprintf>
              ret = aci_hal_set_radio_activity_mask(0x0020);
 800a9b2:	2020      	movs	r0, #32
 800a9b4:	f7fd ffb3 	bl	800891e <aci_hal_set_radio_activity_mask>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 800a9be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d010      	beq.n	800a9e8 <SVCCTL_App_Notification+0x230>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800a9c6:	4830      	ldr	r0, [pc, #192]	; (800aa88 <SVCCTL_App_Notification+0x2d0>)
 800a9c8:	f7ff f854 	bl	8009a74 <DbgTraceGetFileName>
 800a9cc:	4601      	mov	r1, r0
 800a9ce:	f240 13e5 	movw	r3, #485	; 0x1e5
 800a9d2:	4a2e      	ldr	r2, [pc, #184]	; (800aa8c <SVCCTL_App_Notification+0x2d4>)
 800a9d4:	482e      	ldr	r0, [pc, #184]	; (800aa90 <SVCCTL_App_Notification+0x2d8>)
 800a9d6:	f002 f9f9 	bl	800cdcc <iprintf>
 800a9da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a9de:	4619      	mov	r1, r3
 800a9e0:	482f      	ldr	r0, [pc, #188]	; (800aaa0 <SVCCTL_App_Notification+0x2e8>)
 800a9e2:	f002 f9f3 	bl	800cdcc <iprintf>
            break;
 800a9e6:	e01a      	b.n	800aa1e <SVCCTL_App_Notification+0x266>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800a9e8:	4827      	ldr	r0, [pc, #156]	; (800aa88 <SVCCTL_App_Notification+0x2d0>)
 800a9ea:	f7ff f843 	bl	8009a74 <DbgTraceGetFileName>
 800a9ee:	4601      	mov	r1, r0
 800a9f0:	f240 13e9 	movw	r3, #489	; 0x1e9
 800a9f4:	4a25      	ldr	r2, [pc, #148]	; (800aa8c <SVCCTL_App_Notification+0x2d4>)
 800a9f6:	4826      	ldr	r0, [pc, #152]	; (800aa90 <SVCCTL_App_Notification+0x2d8>)
 800a9f8:	f002 f9e8 	bl	800cdcc <iprintf>
 800a9fc:	4829      	ldr	r0, [pc, #164]	; (800aaa4 <SVCCTL_App_Notification+0x2ec>)
 800a9fe:	f002 f9e5 	bl	800cdcc <iprintf>
            break;
 800aa02:	e00c      	b.n	800aa1e <SVCCTL_App_Notification+0x266>
              Green_On();
 800aa04:	f7f6 fe9e 	bl	8001744 <Green_On>
              HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800aa08:	4b24      	ldr	r3, [pc, #144]	; (800aa9c <SVCCTL_App_Notification+0x2e4>)
 800aa0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa0e:	210a      	movs	r1, #10
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7f7 fcb3 	bl	800237c <HW_TS_Start>
            break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800aa16:	e002      	b.n	800aa1e <SVCCTL_App_Notification+0x266>
            break;
 800aa18:	bf00      	nop
 800aa1a:	e185      	b.n	800ad28 <SVCCTL_App_Notification+0x570>
            break;
 800aa1c:	bf00      	nop
      break;
 800aa1e:	e183      	b.n	800ad28 <SVCCTL_App_Notification+0x570>
        if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800aa20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa22:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	4b1c      	ldr	r3, [pc, #112]	; (800aa9c <SVCCTL_App_Notification+0x2e4>)
 800aa2a:	8adb      	ldrh	r3, [r3, #22]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	f040 817a 	bne.w	800ad26 <SVCCTL_App_Notification+0x56e>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800aa32:	4b1a      	ldr	r3, [pc, #104]	; (800aa9c <SVCCTL_App_Notification+0x2e4>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800aa38:	4b18      	ldr	r3, [pc, #96]	; (800aa9c <SVCCTL_App_Notification+0x2e4>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n\r");
 800aa40:	4811      	ldr	r0, [pc, #68]	; (800aa88 <SVCCTL_App_Notification+0x2d0>)
 800aa42:	f7ff f817 	bl	8009a74 <DbgTraceGetFileName>
 800aa46:	4601      	mov	r1, r0
 800aa48:	f240 230e 	movw	r3, #526	; 0x20e
 800aa4c:	4a0f      	ldr	r2, [pc, #60]	; (800aa8c <SVCCTL_App_Notification+0x2d4>)
 800aa4e:	4810      	ldr	r0, [pc, #64]	; (800aa90 <SVCCTL_App_Notification+0x2d8>)
 800aa50:	f002 f9bc 	bl	800cdcc <iprintf>
 800aa54:	4817      	ldr	r0, [pc, #92]	; (800aab4 <SVCCTL_App_Notification+0x2fc>)
 800aa56:	f002 f9b9 	bl	800cdcc <iprintf>
          handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800aa5a:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <SVCCTL_App_Notification+0x2cc>)
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800aa60:	4b0e      	ldr	r3, [pc, #56]	; (800aa9c <SVCCTL_App_Notification+0x2e4>)
 800aa62:	8ada      	ldrh	r2, [r3, #22]
 800aa64:	4b07      	ldr	r3, [pc, #28]	; (800aa84 <SVCCTL_App_Notification+0x2cc>)
 800aa66:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 800aa68:	4806      	ldr	r0, [pc, #24]	; (800aa84 <SVCCTL_App_Notification+0x2cc>)
 800aa6a:	f000 fde7 	bl	800b63c <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800aa6e:	e15a      	b.n	800ad26 <SVCCTL_App_Notification+0x56e>
        meta_evt = (evt_le_meta_event*) event_pckt->data;
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	3302      	adds	r3, #2
 800aa74:	623b      	str	r3, [r7, #32]
        switch (meta_evt->subevent)
 800aa76:	6a3b      	ldr	r3, [r7, #32]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d01c      	beq.n	800aab8 <SVCCTL_App_Notification+0x300>
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d071      	beq.n	800ab66 <SVCCTL_App_Notification+0x3ae>
            break;
 800aa82:	e14d      	b.n	800ad20 <SVCCTL_App_Notification+0x568>
 800aa84:	20001490 	.word	0x20001490
 800aa88:	0800e078 	.word	0x0800e078
 800aa8c:	0800efe4 	.word	0x0800efe4
 800aa90:	0800e094 	.word	0x0800e094
 800aa94:	0800e1c0 	.word	0x0800e1c0
 800aa98:	0800e1d0 	.word	0x0800e1d0
 800aa9c:	20001494 	.word	0x20001494
 800aaa0:	0800e108 	.word	0x0800e108
 800aaa4:	0800e14c 	.word	0x0800e14c
 800aaa8:	20001518 	.word	0x20001518
 800aaac:	0800e200 	.word	0x0800e200
 800aab0:	0800e250 	.word	0x0800e250
 800aab4:	0800e290 	.word	0x0800e290
            connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	3301      	adds	r3, #1
 800aabc:	60fb      	str	r3, [r7, #12]
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	4b9b      	ldr	r3, [pc, #620]	; (800ad34 <SVCCTL_App_Notification+0x57c>)
 800aac8:	82da      	strh	r2, [r3, #22]
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800aaca:	4b9a      	ldr	r3, [pc, #616]	; (800ad34 <SVCCTL_App_Notification+0x57c>)
 800aacc:	2206      	movs	r2, #6
 800aace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            APP_DBG_MSG("\r\n\r**  CONNECTION COMPLETE EVENT WITH SERVER \n\r");
 800aad2:	4899      	ldr	r0, [pc, #612]	; (800ad38 <SVCCTL_App_Notification+0x580>)
 800aad4:	f7fe ffce 	bl	8009a74 <DbgTraceGetFileName>
 800aad8:	4601      	mov	r1, r0
 800aada:	f240 232f 	movw	r3, #559	; 0x22f
 800aade:	4a97      	ldr	r2, [pc, #604]	; (800ad3c <SVCCTL_App_Notification+0x584>)
 800aae0:	4897      	ldr	r0, [pc, #604]	; (800ad40 <SVCCTL_App_Notification+0x588>)
 800aae2:	f002 f973 	bl	800cdcc <iprintf>
 800aae6:	4897      	ldr	r0, [pc, #604]	; (800ad44 <SVCCTL_App_Notification+0x58c>)
 800aae8:	f002 f970 	bl	800cdcc <iprintf>
            handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800aaec:	4b96      	ldr	r3, [pc, #600]	; (800ad48 <SVCCTL_App_Notification+0x590>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800aaf2:	4b90      	ldr	r3, [pc, #576]	; (800ad34 <SVCCTL_App_Notification+0x57c>)
 800aaf4:	8ada      	ldrh	r2, [r3, #22]
 800aaf6:	4b94      	ldr	r3, [pc, #592]	; (800ad48 <SVCCTL_App_Notification+0x590>)
 800aaf8:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 800aafa:	4893      	ldr	r0, [pc, #588]	; (800ad48 <SVCCTL_App_Notification+0x590>)
 800aafc:	f000 fd9e 	bl	800b63c <P2PC_APP_Notification>
            result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ab00:	4b8c      	ldr	r3, [pc, #560]	; (800ad34 <SVCCTL_App_Notification+0x57c>)
 800ab02:	8adb      	ldrh	r3, [r3, #22]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fd fb89 	bl	800821c <aci_gatt_disc_all_primary_services>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	72fb      	strb	r3, [r7, #11]
            if (result == BLE_STATUS_SUCCESS)
 800ab0e:	7afb      	ldrb	r3, [r7, #11]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d11a      	bne.n	800ab4a <SVCCTL_App_Notification+0x392>
              APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n\r");
 800ab14:	4888      	ldr	r0, [pc, #544]	; (800ad38 <SVCCTL_App_Notification+0x580>)
 800ab16:	f7fe ffad 	bl	8009a74 <DbgTraceGetFileName>
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	f240 2337 	movw	r3, #567	; 0x237
 800ab20:	4a86      	ldr	r2, [pc, #536]	; (800ad3c <SVCCTL_App_Notification+0x584>)
 800ab22:	4887      	ldr	r0, [pc, #540]	; (800ad40 <SVCCTL_App_Notification+0x588>)
 800ab24:	f002 f952 	bl	800cdcc <iprintf>
 800ab28:	4888      	ldr	r0, [pc, #544]	; (800ad4c <SVCCTL_App_Notification+0x594>)
 800ab2a:	f002 f94f 	bl	800cdcc <iprintf>
              APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 800ab2e:	4882      	ldr	r0, [pc, #520]	; (800ad38 <SVCCTL_App_Notification+0x580>)
 800ab30:	f7fe ffa0 	bl	8009a74 <DbgTraceGetFileName>
 800ab34:	4601      	mov	r1, r0
 800ab36:	f44f 730e 	mov.w	r3, #568	; 0x238
 800ab3a:	4a80      	ldr	r2, [pc, #512]	; (800ad3c <SVCCTL_App_Notification+0x584>)
 800ab3c:	4880      	ldr	r0, [pc, #512]	; (800ad40 <SVCCTL_App_Notification+0x588>)
 800ab3e:	f002 f945 	bl	800cdcc <iprintf>
 800ab42:	4883      	ldr	r0, [pc, #524]	; (800ad50 <SVCCTL_App_Notification+0x598>)
 800ab44:	f002 f942 	bl	800cdcc <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800ab48:	e0ea      	b.n	800ad20 <SVCCTL_App_Notification+0x568>
              APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 800ab4a:	487b      	ldr	r0, [pc, #492]	; (800ad38 <SVCCTL_App_Notification+0x580>)
 800ab4c:	f7fe ff92 	bl	8009a74 <DbgTraceGetFileName>
 800ab50:	4601      	mov	r1, r0
 800ab52:	f44f 730f 	mov.w	r3, #572	; 0x23c
 800ab56:	4a79      	ldr	r2, [pc, #484]	; (800ad3c <SVCCTL_App_Notification+0x584>)
 800ab58:	4879      	ldr	r0, [pc, #484]	; (800ad40 <SVCCTL_App_Notification+0x588>)
 800ab5a:	f002 f937 	bl	800cdcc <iprintf>
 800ab5e:	487d      	ldr	r0, [pc, #500]	; (800ad54 <SVCCTL_App_Notification+0x59c>)
 800ab60:	f002 f934 	bl	800cdcc <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800ab64:	e0dc      	b.n	800ad20 <SVCCTL_App_Notification+0x568>
              le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	61fb      	str	r3, [r7, #28]
              event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	785b      	ldrb	r3, [r3, #1]
 800ab70:	76fb      	strb	r3, [r7, #27]
              event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	7a5b      	ldrb	r3, [r3, #9]
 800ab76:	76bb      	strb	r3, [r7, #26]
              adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	3309      	adds	r3, #9
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	617b      	str	r3, [r7, #20]
              k = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
              if (event_type == ADV_IND)
 800ab84:	7efb      	ldrb	r3, [r7, #27]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f040 80c9 	bne.w	800ad1e <SVCCTL_App_Notification+0x566>
                while(k < event_data_size)
 800ab8c:	e0c2      	b.n	800ad14 <SVCCTL_App_Notification+0x55c>
                  adlength = adv_report_data[k];
 800ab8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab90:	697a      	ldr	r2, [r7, #20]
 800ab92:	4413      	add	r3, r2
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	74fb      	strb	r3, [r7, #19]
                  adtype = adv_report_data[k + 1];
 800ab98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	697a      	ldr	r2, [r7, #20]
 800ab9e:	4413      	add	r3, r2
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	74bb      	strb	r3, [r7, #18]
                  switch (adtype)
 800aba4:	7cbb      	ldrb	r3, [r7, #18]
 800aba6:	2bff      	cmp	r3, #255	; 0xff
 800aba8:	d00d      	beq.n	800abc6 <SVCCTL_App_Notification+0x40e>
 800abaa:	2bff      	cmp	r3, #255	; 0xff
 800abac:	f300 80a6 	bgt.w	800acfc <SVCCTL_App_Notification+0x544>
 800abb0:	2b16      	cmp	r3, #22
 800abb2:	f000 80a5 	beq.w	800ad00 <SVCCTL_App_Notification+0x548>
 800abb6:	2b16      	cmp	r3, #22
 800abb8:	f300 80a0 	bgt.w	800acfc <SVCCTL_App_Notification+0x544>
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	f000 80a1 	beq.w	800ad04 <SVCCTL_App_Notification+0x54c>
 800abc2:	2b0a      	cmp	r3, #10
                      break;
 800abc4:	e0a1      	b.n	800ad0a <SVCCTL_App_Notification+0x552>
                        if (adlength >= 4 && adv_report_data[k + 2] == 0x01)
 800abc6:	7cfb      	ldrb	r3, [r7, #19]
 800abc8:	2b03      	cmp	r3, #3
 800abca:	d949      	bls.n	800ac60 <SVCCTL_App_Notification+0x4a8>
 800abcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abce:	3302      	adds	r3, #2
 800abd0:	697a      	ldr	r2, [r7, #20]
 800abd2:	4413      	add	r3, r2
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d142      	bne.n	800ac60 <SVCCTL_App_Notification+0x4a8>
                          switch (adv_report_data[k + 3])
 800abda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abdc:	3303      	adds	r3, #3
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	4413      	add	r3, r2
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b83      	cmp	r3, #131	; 0x83
 800abe6:	d13a      	bne.n	800ac5e <SVCCTL_App_Notification+0x4a6>
                             APP_DBG_MSG("--- ST MANUFACTURER ID --- \n\r");
 800abe8:	4853      	ldr	r0, [pc, #332]	; (800ad38 <SVCCTL_App_Notification+0x580>)
 800abea:	f7fe ff43 	bl	8009a74 <DbgTraceGetFileName>
 800abee:	4601      	mov	r1, r0
 800abf0:	f240 2373 	movw	r3, #627	; 0x273
 800abf4:	4a51      	ldr	r2, [pc, #324]	; (800ad3c <SVCCTL_App_Notification+0x584>)
 800abf6:	4852      	ldr	r0, [pc, #328]	; (800ad40 <SVCCTL_App_Notification+0x588>)
 800abf8:	f002 f8e8 	bl	800cdcc <iprintf>
 800abfc:	4856      	ldr	r0, [pc, #344]	; (800ad58 <SVCCTL_App_Notification+0x5a0>)
 800abfe:	f002 f8e5 	bl	800cdcc <iprintf>
                             APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n\r");
 800ac02:	484d      	ldr	r0, [pc, #308]	; (800ad38 <SVCCTL_App_Notification+0x580>)
 800ac04:	f7fe ff36 	bl	8009a74 <DbgTraceGetFileName>
 800ac08:	4601      	mov	r1, r0
 800ac0a:	f44f 731d 	mov.w	r3, #628	; 0x274
 800ac0e:	4a4b      	ldr	r2, [pc, #300]	; (800ad3c <SVCCTL_App_Notification+0x584>)
 800ac10:	484b      	ldr	r0, [pc, #300]	; (800ad40 <SVCCTL_App_Notification+0x588>)
 800ac12:	f002 f8db 	bl	800cdcc <iprintf>
 800ac16:	4851      	ldr	r0, [pc, #324]	; (800ad5c <SVCCTL_App_Notification+0x5a4>)
 800ac18:	f002 f8d8 	bl	800cdcc <iprintf>
                             BleApplicationContext.DeviceServerFound = 0x01;
 800ac1c:	4b45      	ldr	r3, [pc, #276]	; (800ad34 <SVCCTL_App_Notification+0x57c>)
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                             SERVER_REMOTE_ADDR_TYPE = le_advertising_event->Advertising_Report[0].Address_Type;
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	789a      	ldrb	r2, [r3, #2]
 800ac28:	4b4d      	ldr	r3, [pc, #308]	; (800ad60 <SVCCTL_App_Notification+0x5a8>)
 800ac2a:	701a      	strb	r2, [r3, #0]
                             SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	78da      	ldrb	r2, [r3, #3]
 800ac30:	4b4c      	ldr	r3, [pc, #304]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800ac32:	701a      	strb	r2, [r3, #0]
                             SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	791a      	ldrb	r2, [r3, #4]
 800ac38:	4b4a      	ldr	r3, [pc, #296]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800ac3a:	705a      	strb	r2, [r3, #1]
                             SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	795a      	ldrb	r2, [r3, #5]
 800ac40:	4b48      	ldr	r3, [pc, #288]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800ac42:	709a      	strb	r2, [r3, #2]
                             SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	799a      	ldrb	r2, [r3, #6]
 800ac48:	4b46      	ldr	r3, [pc, #280]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800ac4a:	70da      	strb	r2, [r3, #3]
                             SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	79da      	ldrb	r2, [r3, #7]
 800ac50:	4b44      	ldr	r3, [pc, #272]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800ac52:	711a      	strb	r2, [r3, #4]
                             SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	7a1a      	ldrb	r2, [r3, #8]
 800ac58:	4b42      	ldr	r3, [pc, #264]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800ac5a:	715a      	strb	r2, [r3, #5]
                             break;
 800ac5c:	e000      	b.n	800ac60 <SVCCTL_App_Notification+0x4a8>
                              break;
 800ac5e:	bf00      	nop
                      if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800ac60:	7cfb      	ldrb	r3, [r7, #19]
 800ac62:	2b06      	cmp	r3, #6
 800ac64:	d950      	bls.n	800ad08 <SVCCTL_App_Notification+0x550>
 800ac66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac68:	3302      	adds	r3, #2
 800ac6a:	697a      	ldr	r2, [r7, #20]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d149      	bne.n	800ad08 <SVCCTL_App_Notification+0x550>
                        APP_DBG_MSG("--- ST MANUFACTURER ID --- \n\r");
 800ac74:	4830      	ldr	r0, [pc, #192]	; (800ad38 <SVCCTL_App_Notification+0x580>)
 800ac76:	f7fe fefd 	bl	8009a74 <DbgTraceGetFileName>
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	f240 2386 	movw	r3, #646	; 0x286
 800ac80:	4a2e      	ldr	r2, [pc, #184]	; (800ad3c <SVCCTL_App_Notification+0x584>)
 800ac82:	482f      	ldr	r0, [pc, #188]	; (800ad40 <SVCCTL_App_Notification+0x588>)
 800ac84:	f002 f8a2 	bl	800cdcc <iprintf>
 800ac88:	4833      	ldr	r0, [pc, #204]	; (800ad58 <SVCCTL_App_Notification+0x5a0>)
 800ac8a:	f002 f89f 	bl	800cdcc <iprintf>
                        switch (adv_report_data[k + 3])
 800ac8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac90:	3303      	adds	r3, #3
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	4413      	add	r3, r2
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b83      	cmp	r3, #131	; 0x83
 800ac9a:	d12d      	bne.n	800acf8 <SVCCTL_App_Notification+0x540>
                           APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n\r");
 800ac9c:	4826      	ldr	r0, [pc, #152]	; (800ad38 <SVCCTL_App_Notification+0x580>)
 800ac9e:	f7fe fee9 	bl	8009a74 <DbgTraceGetFileName>
 800aca2:	4601      	mov	r1, r0
 800aca4:	f240 238a 	movw	r3, #650	; 0x28a
 800aca8:	4a24      	ldr	r2, [pc, #144]	; (800ad3c <SVCCTL_App_Notification+0x584>)
 800acaa:	4825      	ldr	r0, [pc, #148]	; (800ad40 <SVCCTL_App_Notification+0x588>)
 800acac:	f002 f88e 	bl	800cdcc <iprintf>
 800acb0:	482a      	ldr	r0, [pc, #168]	; (800ad5c <SVCCTL_App_Notification+0x5a4>)
 800acb2:	f002 f88b 	bl	800cdcc <iprintf>
                           BleApplicationContext.DeviceServerFound = 0x01;
 800acb6:	4b1f      	ldr	r3, [pc, #124]	; (800ad34 <SVCCTL_App_Notification+0x57c>)
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                           SERVER_REMOTE_ADDR_TYPE = le_advertising_event->Advertising_Report[0].Address_Type;
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	789a      	ldrb	r2, [r3, #2]
 800acc2:	4b27      	ldr	r3, [pc, #156]	; (800ad60 <SVCCTL_App_Notification+0x5a8>)
 800acc4:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	78da      	ldrb	r2, [r3, #3]
 800acca:	4b26      	ldr	r3, [pc, #152]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800accc:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	791a      	ldrb	r2, [r3, #4]
 800acd2:	4b24      	ldr	r3, [pc, #144]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800acd4:	705a      	strb	r2, [r3, #1]
                           SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	795a      	ldrb	r2, [r3, #5]
 800acda:	4b22      	ldr	r3, [pc, #136]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800acdc:	709a      	strb	r2, [r3, #2]
                           SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	799a      	ldrb	r2, [r3, #6]
 800ace2:	4b20      	ldr	r3, [pc, #128]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800ace4:	70da      	strb	r2, [r3, #3]
                           SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	79da      	ldrb	r2, [r3, #7]
 800acea:	4b1e      	ldr	r3, [pc, #120]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800acec:	711a      	strb	r2, [r3, #4]
                           SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	7a1a      	ldrb	r2, [r3, #8]
 800acf2:	4b1c      	ldr	r3, [pc, #112]	; (800ad64 <SVCCTL_App_Notification+0x5ac>)
 800acf4:	715a      	strb	r2, [r3, #5]
                           break;
 800acf6:	e000      	b.n	800acfa <SVCCTL_App_Notification+0x542>
                            break;
 800acf8:	bf00      	nop
                      break;
 800acfa:	e005      	b.n	800ad08 <SVCCTL_App_Notification+0x550>
                      break;
 800acfc:	bf00      	nop
 800acfe:	e004      	b.n	800ad0a <SVCCTL_App_Notification+0x552>
                      break;
 800ad00:	bf00      	nop
 800ad02:	e002      	b.n	800ad0a <SVCCTL_App_Notification+0x552>
                      break;
 800ad04:	bf00      	nop
 800ad06:	e000      	b.n	800ad0a <SVCCTL_App_Notification+0x552>
                      break;
 800ad08:	bf00      	nop
                  k += adlength + 1;
 800ad0a:	7cfb      	ldrb	r3, [r7, #19]
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad10:	4413      	add	r3, r2
 800ad12:	63fb      	str	r3, [r7, #60]	; 0x3c
                while(k < event_data_size)
 800ad14:	7ebb      	ldrb	r3, [r7, #26]
 800ad16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	f6ff af38 	blt.w	800ab8e <SVCCTL_App_Notification+0x3d6>
            break;
 800ad1e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800ad20:	e002      	b.n	800ad28 <SVCCTL_App_Notification+0x570>
      break;
 800ad22:	bf00      	nop
 800ad24:	e000      	b.n	800ad28 <SVCCTL_App_Notification+0x570>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ad26:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800ad28:	2301      	movs	r3, #1
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3744      	adds	r7, #68	; 0x44
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20001494 	.word	0x20001494
 800ad38:	0800e078 	.word	0x0800e078
 800ad3c:	0800efe4 	.word	0x0800efe4
 800ad40:	0800e094 	.word	0x0800e094
 800ad44:	0800e2bc 	.word	0x0800e2bc
 800ad48:	20001490 	.word	0x20001490
 800ad4c:	0800e2ec 	.word	0x0800e2ec
 800ad50:	0800e320 	.word	0x0800e320
 800ad54:	0800e350 	.word	0x0800e350
 800ad58:	0800e390 	.word	0x0800e390
 800ad5c:	0800e3b0 	.word	0x0800e3b0
 800ad60:	2000148e 	.word	0x2000148e
 800ad64:	20001488 	.word	0x20001488

0800ad68 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status(uint16_t Connection_Handle)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	4603      	mov	r3, r0
 800ad70:	80fb      	strh	r3, [r7, #6]
  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800ad72:	4b08      	ldr	r3, [pc, #32]	; (800ad94 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800ad74:	8adb      	ldrh	r3, [r3, #22]
 800ad76:	88fa      	ldrh	r2, [r7, #6]
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d103      	bne.n	800ad84 <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 800ad7c:	4b05      	ldr	r3, [pc, #20]	; (800ad94 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800ad7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad82:	e000      	b.n	800ad86 <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	20001494 	.word	0x20001494

0800ad98 <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void) //TODO button 1 pressed
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	af00      	add	r7, sp, #0
	P2PC_APP_SW1_Button_Action();
 800ad9c:	f000 fc80 	bl	800b6a0 <P2PC_APP_SW1_Button_Action>
}
 800ada0:	bf00      	nop
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	af00      	add	r7, sp, #0
	P2PC_APP_SW2_Button_Action();
 800ada8:	f000 fc88 	bl	800b6bc <P2PC_APP_SW2_Button_Action>
}
 800adac:	bf00      	nop
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	af00      	add	r7, sp, #0
	P2PC_APP_SW3_Button_Action();
 800adb4:	f000 fc8a 	bl	800b6cc <P2PC_APP_SW3_Button_Action>
}
 800adb8:	bf00      	nop
 800adba:	bd80      	pop	{r7, pc}

0800adbc <APP_BLE_Key_Hall_Sensor_Action>:

void APP_BLE_Key_Hall_Sensor_Action(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	af00      	add	r7, sp, #0
	P2PC_APP_Hall_Sensor_Action();
 800adc0:	f000 fc8c 	bl	800b6dc <P2PC_APP_Hall_Sensor_Action>
}
 800adc4:	bf00      	nop
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800adce:	4b06      	ldr	r3, [pc, #24]	; (800ade8 <Ble_Tl_Init+0x20>)
 800add0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800add2:	4b06      	ldr	r3, [pc, #24]	; (800adec <Ble_Tl_Init+0x24>)
 800add4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800add6:	463b      	mov	r3, r7
 800add8:	4619      	mov	r1, r3
 800adda:	4805      	ldr	r0, [pc, #20]	; (800adf0 <Ble_Tl_Init+0x28>)
 800addc:	f7fe f92e 	bl	800903c <hci_init>

  return;
 800ade0:	bf00      	nop
}
 800ade2:	3708      	adds	r7, #8
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	200300d8 	.word	0x200300d8
 800adec:	0800b525 	.word	0x0800b525
 800adf0:	0800b4ed 	.word	0x0800b4ed

0800adf4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800adf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adf6:	b08d      	sub	sp, #52	; 0x34
 800adf8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;

  uint16_t a_appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800adfa:	2300      	movs	r3, #0
 800adfc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800adfe:	2392      	movs	r3, #146	; 0x92
 800ae00:	75fb      	strb	r3, [r7, #23]

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800ae02:	48a3      	ldr	r0, [pc, #652]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ae04:	f7fe fe36 	bl	8009a74 <DbgTraceGetFileName>
 800ae08:	4601      	mov	r1, r0
 800ae0a:	f240 3306 	movw	r3, #774	; 0x306
 800ae0e:	4aa1      	ldr	r2, [pc, #644]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ae10:	48a1      	ldr	r0, [pc, #644]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ae12:	f001 ffdb 	bl	800cdcc <iprintf>
 800ae16:	48a1      	ldr	r0, [pc, #644]	; (800b09c <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800ae18:	f002 f846 	bl	800cea8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800ae1c:	f7fd fdd3 	bl	80089c6 <hci_reset>
 800ae20:	4603      	mov	r3, r0
 800ae22:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ae24:	7dfb      	ldrb	r3, [r7, #23]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00f      	beq.n	800ae4a <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800ae2a:	4899      	ldr	r0, [pc, #612]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ae2c:	f7fe fe22 	bl	8009a74 <DbgTraceGetFileName>
 800ae30:	4601      	mov	r1, r0
 800ae32:	f240 330f 	movw	r3, #783	; 0x30f
 800ae36:	4a97      	ldr	r2, [pc, #604]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ae38:	4897      	ldr	r0, [pc, #604]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ae3a:	f001 ffc7 	bl	800cdcc <iprintf>
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	4619      	mov	r1, r3
 800ae42:	4897      	ldr	r0, [pc, #604]	; (800b0a0 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800ae44:	f001 ffc2 	bl	800cdcc <iprintf>
 800ae48:	e00c      	b.n	800ae64 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800ae4a:	4891      	ldr	r0, [pc, #580]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ae4c:	f7fe fe12 	bl	8009a74 <DbgTraceGetFileName>
 800ae50:	4601      	mov	r1, r0
 800ae52:	f240 3313 	movw	r3, #787	; 0x313
 800ae56:	4a8f      	ldr	r2, [pc, #572]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ae58:	488f      	ldr	r0, [pc, #572]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ae5a:	f001 ffb7 	bl	800cdcc <iprintf>
 800ae5e:	4891      	ldr	r0, [pc, #580]	; (800b0a4 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800ae60:	f002 f822 	bl	800cea8 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800ae64:	f000 fadc 	bl	800b420 <BleGetBdAddress>
 800ae68:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	2106      	movs	r1, #6
 800ae6e:	2000      	movs	r0, #0
 800ae70:	f7fd fc69 	bl	8008746 <aci_hal_write_config_data>
 800ae74:	4603      	mov	r3, r0
 800ae76:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ae78:	7dfb      	ldrb	r3, [r7, #23]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00f      	beq.n	800ae9e <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800ae7e:	4884      	ldr	r0, [pc, #528]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ae80:	f7fe fdf8 	bl	8009a74 <DbgTraceGetFileName>
 800ae84:	4601      	mov	r1, r0
 800ae86:	f240 331d 	movw	r3, #797	; 0x31d
 800ae8a:	4a82      	ldr	r2, [pc, #520]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ae8c:	4882      	ldr	r0, [pc, #520]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ae8e:	f001 ff9d 	bl	800cdcc <iprintf>
 800ae92:	7dfb      	ldrb	r3, [r7, #23]
 800ae94:	4619      	mov	r1, r3
 800ae96:	4884      	ldr	r0, [pc, #528]	; (800b0a8 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800ae98:	f001 ff98 	bl	800cdcc <iprintf>
 800ae9c:	e035      	b.n	800af0a <Ble_Hci_Gap_Gatt_Init+0x116>
  }
   else
   {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800ae9e:	487c      	ldr	r0, [pc, #496]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800aea0:	f7fe fde8 	bl	8009a74 <DbgTraceGetFileName>
 800aea4:	4601      	mov	r1, r0
 800aea6:	f240 3321 	movw	r3, #801	; 0x321
 800aeaa:	4a7a      	ldr	r2, [pc, #488]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800aeac:	487a      	ldr	r0, [pc, #488]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800aeae:	f001 ff8d 	bl	800cdcc <iprintf>
 800aeb2:	487e      	ldr	r0, [pc, #504]	; (800b0ac <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800aeb4:	f001 fff8 	bl	800cea8 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800aeb8:	4875      	ldr	r0, [pc, #468]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800aeba:	f7fe fddb 	bl	8009a74 <DbgTraceGetFileName>
 800aebe:	4601      	mov	r1, r0
 800aec0:	f240 3322 	movw	r3, #802	; 0x322
 800aec4:	4a73      	ldr	r2, [pc, #460]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800aec6:	4874      	ldr	r0, [pc, #464]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800aec8:	f001 ff80 	bl	800cdcc <iprintf>
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	3305      	adds	r3, #5
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	4618      	mov	r0, r3
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	3304      	adds	r3, #4
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	461c      	mov	r4, r3
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	3303      	adds	r3, #3
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	461d      	mov	r5, r3
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	3302      	adds	r3, #2
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	461a      	mov	r2, r3
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	3301      	adds	r3, #1
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	4619      	mov	r1, r3
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	9302      	str	r3, [sp, #8]
 800aefa:	9101      	str	r1, [sp, #4]
 800aefc:	9200      	str	r2, [sp, #0]
 800aefe:	462b      	mov	r3, r5
 800af00:	4622      	mov	r2, r4
 800af02:	4601      	mov	r1, r0
 800af04:	486a      	ldr	r0, [pc, #424]	; (800b0b0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800af06:	f001 ff61 	bl	800cdcc <iprintf>
   }

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800af0a:	4a6a      	ldr	r2, [pc, #424]	; (800b0b4 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800af0c:	2110      	movs	r1, #16
 800af0e:	2018      	movs	r0, #24
 800af10:	f7fd fc19 	bl	8008746 <aci_hal_write_config_data>
 800af14:	4603      	mov	r3, r0
 800af16:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800af18:	7dfb      	ldrb	r3, [r7, #23]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00f      	beq.n	800af3e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800af1e:	485c      	ldr	r0, [pc, #368]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800af20:	f7fe fda8 	bl	8009a74 <DbgTraceGetFileName>
 800af24:	4601      	mov	r1, r0
 800af26:	f240 332b 	movw	r3, #811	; 0x32b
 800af2a:	4a5a      	ldr	r2, [pc, #360]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800af2c:	485a      	ldr	r0, [pc, #360]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800af2e:	f001 ff4d 	bl	800cdcc <iprintf>
 800af32:	7dfb      	ldrb	r3, [r7, #23]
 800af34:	4619      	mov	r1, r3
 800af36:	4860      	ldr	r0, [pc, #384]	; (800b0b8 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800af38:	f001 ff48 	bl	800cdcc <iprintf>
 800af3c:	e00c      	b.n	800af58 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800af3e:	4854      	ldr	r0, [pc, #336]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800af40:	f7fe fd98 	bl	8009a74 <DbgTraceGetFileName>
 800af44:	4601      	mov	r1, r0
 800af46:	f240 332f 	movw	r3, #815	; 0x32f
 800af4a:	4a52      	ldr	r2, [pc, #328]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800af4c:	4852      	ldr	r0, [pc, #328]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800af4e:	f001 ff3d 	bl	800cdcc <iprintf>
 800af52:	485a      	ldr	r0, [pc, #360]	; (800b0bc <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800af54:	f001 ffa8 	bl	800cea8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800af58:	4a59      	ldr	r2, [pc, #356]	; (800b0c0 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800af5a:	2110      	movs	r1, #16
 800af5c:	2008      	movs	r0, #8
 800af5e:	f7fd fbf2 	bl	8008746 <aci_hal_write_config_data>
 800af62:	4603      	mov	r3, r0
 800af64:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00f      	beq.n	800af8c <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800af6c:	4848      	ldr	r0, [pc, #288]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800af6e:	f7fe fd81 	bl	8009a74 <DbgTraceGetFileName>
 800af72:	4601      	mov	r1, r0
 800af74:	f44f 734e 	mov.w	r3, #824	; 0x338
 800af78:	4a46      	ldr	r2, [pc, #280]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800af7a:	4847      	ldr	r0, [pc, #284]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800af7c:	f001 ff26 	bl	800cdcc <iprintf>
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	4619      	mov	r1, r3
 800af84:	484f      	ldr	r0, [pc, #316]	; (800b0c4 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800af86:	f001 ff21 	bl	800cdcc <iprintf>
 800af8a:	e00c      	b.n	800afa6 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800af8c:	4840      	ldr	r0, [pc, #256]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800af8e:	f7fe fd71 	bl	8009a74 <DbgTraceGetFileName>
 800af92:	4601      	mov	r1, r0
 800af94:	f44f 734f 	mov.w	r3, #828	; 0x33c
 800af98:	4a3e      	ldr	r2, [pc, #248]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800af9a:	483f      	ldr	r0, [pc, #252]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800af9c:	f001 ff16 	bl	800cdcc <iprintf>
 800afa0:	4849      	ldr	r0, [pc, #292]	; (800b0c8 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800afa2:	f001 ff81 	bl	800cea8 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800afa6:	2118      	movs	r1, #24
 800afa8:	2001      	movs	r0, #1
 800afaa:	f7fd fc51 	bl	8008850 <aci_hal_set_tx_power_level>
 800afae:	4603      	mov	r3, r0
 800afb0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800afb2:	7dfb      	ldrb	r3, [r7, #23]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00f      	beq.n	800afd8 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800afb8:	4835      	ldr	r0, [pc, #212]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800afba:	f7fe fd5b 	bl	8009a74 <DbgTraceGetFileName>
 800afbe:	4601      	mov	r1, r0
 800afc0:	f240 3345 	movw	r3, #837	; 0x345
 800afc4:	4a33      	ldr	r2, [pc, #204]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800afc6:	4834      	ldr	r0, [pc, #208]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800afc8:	f001 ff00 	bl	800cdcc <iprintf>
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	4619      	mov	r1, r3
 800afd0:	483e      	ldr	r0, [pc, #248]	; (800b0cc <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800afd2:	f001 fefb 	bl	800cdcc <iprintf>
 800afd6:	e00c      	b.n	800aff2 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800afd8:	482d      	ldr	r0, [pc, #180]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800afda:	f7fe fd4b 	bl	8009a74 <DbgTraceGetFileName>
 800afde:	4601      	mov	r1, r0
 800afe0:	f240 3349 	movw	r3, #841	; 0x349
 800afe4:	4a2b      	ldr	r2, [pc, #172]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800afe6:	482c      	ldr	r0, [pc, #176]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800afe8:	f001 fef0 	bl	800cdcc <iprintf>
 800afec:	4838      	ldr	r0, [pc, #224]	; (800b0d0 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800afee:	f001 ff5b 	bl	800cea8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800aff2:	f7fd f845 	bl	8008080 <aci_gatt_init>
 800aff6:	4603      	mov	r3, r0
 800aff8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800affa:	7dfb      	ldrb	r3, [r7, #23]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00f      	beq.n	800b020 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800b000:	4823      	ldr	r0, [pc, #140]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b002:	f7fe fd37 	bl	8009a74 <DbgTraceGetFileName>
 800b006:	4601      	mov	r1, r0
 800b008:	f240 3352 	movw	r3, #850	; 0x352
 800b00c:	4a21      	ldr	r2, [pc, #132]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b00e:	4822      	ldr	r0, [pc, #136]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b010:	f001 fedc 	bl	800cdcc <iprintf>
 800b014:	7dfb      	ldrb	r3, [r7, #23]
 800b016:	4619      	mov	r1, r3
 800b018:	482e      	ldr	r0, [pc, #184]	; (800b0d4 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800b01a:	f001 fed7 	bl	800cdcc <iprintf>
 800b01e:	e00c      	b.n	800b03a <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800b020:	481b      	ldr	r0, [pc, #108]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b022:	f7fe fd27 	bl	8009a74 <DbgTraceGetFileName>
 800b026:	4601      	mov	r1, r0
 800b028:	f240 3356 	movw	r3, #854	; 0x356
 800b02c:	4a19      	ldr	r2, [pc, #100]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b02e:	481a      	ldr	r0, [pc, #104]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b030:	f001 fecc 	bl	800cdcc <iprintf>
 800b034:	4828      	ldr	r0, [pc, #160]	; (800b0d8 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800b036:	f001 ff37 	bl	800cea8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73fb      	strb	r3, [r7, #15]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif /* BLE_CFG_PERIPHERAL == 1 */

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
 800b040:	f043 0304 	orr.w	r3, r3, #4
 800b044:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b046:	7bfb      	ldrb	r3, [r7, #15]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d069      	beq.n	800b120 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = "BASE";
 800b04c:	4b23      	ldr	r3, [pc, #140]	; (800b0dc <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800b04e:	60bb      	str	r3, [r7, #8]

    ret = aci_gap_init(role,
 800b050:	1dba      	adds	r2, r7, #6
 800b052:	7bf8      	ldrb	r0, [r7, #15]
 800b054:	1cbb      	adds	r3, r7, #2
 800b056:	9301      	str	r3, [sp, #4]
 800b058:	1d3b      	adds	r3, r7, #4
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	4613      	mov	r3, r2
 800b05e:	2207      	movs	r2, #7
 800b060:	2100      	movs	r1, #0
 800b062:	f7fc fdcd 	bl	8007c00 <aci_gap_init>
 800b066:	4603      	mov	r3, r0
 800b068:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d039      	beq.n	800b0e4 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800b070:	4807      	ldr	r0, [pc, #28]	; (800b090 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b072:	f7fe fcff 	bl	8009a74 <DbgTraceGetFileName>
 800b076:	4601      	mov	r1, r0
 800b078:	f240 3377 	movw	r3, #887	; 0x377
 800b07c:	4a05      	ldr	r2, [pc, #20]	; (800b094 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b07e:	4806      	ldr	r0, [pc, #24]	; (800b098 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b080:	f001 fea4 	bl	800cdcc <iprintf>
 800b084:	7dfb      	ldrb	r3, [r7, #23]
 800b086:	4619      	mov	r1, r3
 800b088:	4815      	ldr	r0, [pc, #84]	; (800b0e0 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800b08a:	f001 fe9f 	bl	800cdcc <iprintf>
 800b08e:	e036      	b.n	800b0fe <Ble_Hci_Gap_Gatt_Init+0x30a>
 800b090:	0800e078 	.word	0x0800e078
 800b094:	0800effc 	.word	0x0800effc
 800b098:	0800e094 	.word	0x0800e094
 800b09c:	0800e3d4 	.word	0x0800e3d4
 800b0a0:	0800e400 	.word	0x0800e400
 800b0a4:	0800e430 	.word	0x0800e430
 800b0a8:	0800e450 	.word	0x0800e450
 800b0ac:	0800e4ac 	.word	0x0800e4ac
 800b0b0:	0800e4f8 	.word	0x0800e4f8
 800b0b4:	0800efb4 	.word	0x0800efb4
 800b0b8:	0800e534 	.word	0x0800e534
 800b0bc:	0800e58c 	.word	0x0800e58c
 800b0c0:	0800efc4 	.word	0x0800efc4
 800b0c4:	0800e5d4 	.word	0x0800e5d4
 800b0c8:	0800e62c 	.word	0x0800e62c
 800b0cc:	0800e674 	.word	0x0800e674
 800b0d0:	0800e6b4 	.word	0x0800e6b4
 800b0d4:	0800e6e4 	.word	0x0800e6e4
 800b0d8:	0800e718 	.word	0x0800e718
 800b0dc:	0800e73c 	.word	0x0800e73c
 800b0e0:	0800e744 	.word	0x0800e744
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800b0e4:	486b      	ldr	r0, [pc, #428]	; (800b294 <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800b0e6:	f7fe fcc5 	bl	8009a74 <DbgTraceGetFileName>
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	f240 337b 	movw	r3, #891	; 0x37b
 800b0f0:	4a69      	ldr	r2, [pc, #420]	; (800b298 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800b0f2:	486a      	ldr	r0, [pc, #424]	; (800b29c <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800b0f4:	f001 fe6a 	bl	800cdcc <iprintf>
 800b0f8:	4869      	ldr	r0, [pc, #420]	; (800b2a0 <Ble_Hci_Gap_Gatt_Init+0x4ac>)
 800b0fa:	f001 fed5 	bl	800cea8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b0fe:	88fc      	ldrh	r4, [r7, #6]
 800b100:	88bd      	ldrh	r5, [r7, #4]
 800b102:	68b8      	ldr	r0, [r7, #8]
 800b104:	f7f5 f83c 	bl	8000180 <strlen>
 800b108:	4603      	mov	r3, r0
 800b10a:	b2da      	uxtb	r2, r3
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	4613      	mov	r3, r2
 800b112:	2200      	movs	r2, #0
 800b114:	4629      	mov	r1, r5
 800b116:	4620      	mov	r0, r4
 800b118:	f7fc ffd7 	bl	80080ca <aci_gatt_update_char_value>
 800b11c:	4603      	mov	r3, r0
 800b11e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b120:	88f8      	ldrh	r0, [r7, #6]
 800b122:	8879      	ldrh	r1, [r7, #2]
 800b124:	463b      	mov	r3, r7
 800b126:	9300      	str	r3, [sp, #0]
 800b128:	2302      	movs	r3, #2
 800b12a:	2200      	movs	r2, #0
 800b12c:	f7fc ffcd 	bl	80080ca <aci_gatt_update_char_value>
 800b130:	4603      	mov	r3, r0
 800b132:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b134:	4b5b      	ldr	r3, [pc, #364]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b136:	2201      	movs	r2, #1
 800b138:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b13a:	4b5a      	ldr	r3, [pc, #360]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fc fc46 	bl	80079d0 <aci_gap_set_io_capability>
 800b144:	4603      	mov	r3, r0
 800b146:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b148:	7dfb      	ldrb	r3, [r7, #23]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00f      	beq.n	800b16e <Ble_Hci_Gap_Gatt_Init+0x37a>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800b14e:	4851      	ldr	r0, [pc, #324]	; (800b294 <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800b150:	f7fe fc90 	bl	8009a74 <DbgTraceGetFileName>
 800b154:	4601      	mov	r1, r0
 800b156:	f240 339e 	movw	r3, #926	; 0x39e
 800b15a:	4a4f      	ldr	r2, [pc, #316]	; (800b298 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800b15c:	484f      	ldr	r0, [pc, #316]	; (800b29c <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800b15e:	f001 fe35 	bl	800cdcc <iprintf>
 800b162:	7dfb      	ldrb	r3, [r7, #23]
 800b164:	4619      	mov	r1, r3
 800b166:	4850      	ldr	r0, [pc, #320]	; (800b2a8 <Ble_Hci_Gap_Gatt_Init+0x4b4>)
 800b168:	f001 fe30 	bl	800cdcc <iprintf>
 800b16c:	e00c      	b.n	800b188 <Ble_Hci_Gap_Gatt_Init+0x394>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800b16e:	4849      	ldr	r0, [pc, #292]	; (800b294 <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800b170:	f7fe fc80 	bl	8009a74 <DbgTraceGetFileName>
 800b174:	4601      	mov	r1, r0
 800b176:	f240 33a2 	movw	r3, #930	; 0x3a2
 800b17a:	4a47      	ldr	r2, [pc, #284]	; (800b298 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800b17c:	4847      	ldr	r0, [pc, #284]	; (800b29c <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800b17e:	f001 fe25 	bl	800cdcc <iprintf>
 800b182:	484a      	ldr	r0, [pc, #296]	; (800b2ac <Ble_Hci_Gap_Gatt_Init+0x4b8>)
 800b184:	f001 fe90 	bl	800cea8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b188:	4b46      	ldr	r3, [pc, #280]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b18a:	2201      	movs	r2, #1
 800b18c:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b18e:	4b45      	ldr	r3, [pc, #276]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b190:	2208      	movs	r2, #8
 800b192:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b194:	4b43      	ldr	r3, [pc, #268]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b196:	2210      	movs	r2, #16
 800b198:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b19a:	4b42      	ldr	r3, [pc, #264]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b19c:	2201      	movs	r2, #1
 800b19e:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b1a0:	4b40      	ldr	r3, [pc, #256]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b1a2:	4a43      	ldr	r2, [pc, #268]	; (800b2b0 <Ble_Hci_Gap_Gatt_Init+0x4bc>)
 800b1a4:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b1a6:	4b3f      	ldr	r3, [pc, #252]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b1ac:	4b3d      	ldr	r3, [pc, #244]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b1ae:	789c      	ldrb	r4, [r3, #2]
 800b1b0:	4b3c      	ldr	r3, [pc, #240]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b1b2:	785d      	ldrb	r5, [r3, #1]
 800b1b4:	4b3b      	ldr	r3, [pc, #236]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b1b6:	791b      	ldrb	r3, [r3, #4]
 800b1b8:	4a3a      	ldr	r2, [pc, #232]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b1ba:	7952      	ldrb	r2, [r2, #5]
 800b1bc:	4939      	ldr	r1, [pc, #228]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b1be:	78c9      	ldrb	r1, [r1, #3]
 800b1c0:	4838      	ldr	r0, [pc, #224]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b1c2:	6880      	ldr	r0, [r0, #8]
 800b1c4:	2600      	movs	r6, #0
 800b1c6:	9604      	str	r6, [sp, #16]
 800b1c8:	9003      	str	r0, [sp, #12]
 800b1ca:	9102      	str	r1, [sp, #8]
 800b1cc:	9201      	str	r2, [sp, #4]
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f7fc fc4e 	bl	8007a78 <aci_gap_set_authentication_requirement>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00f      	beq.n	800b206 <Ble_Hci_Gap_Gatt_Init+0x412>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800b1e6:	482b      	ldr	r0, [pc, #172]	; (800b294 <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800b1e8:	f7fe fc44 	bl	8009a74 <DbgTraceGetFileName>
 800b1ec:	4601      	mov	r1, r0
 800b1ee:	f240 33ba 	movw	r3, #954	; 0x3ba
 800b1f2:	4a29      	ldr	r2, [pc, #164]	; (800b298 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800b1f4:	4829      	ldr	r0, [pc, #164]	; (800b29c <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800b1f6:	f001 fde9 	bl	800cdcc <iprintf>
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	482d      	ldr	r0, [pc, #180]	; (800b2b4 <Ble_Hci_Gap_Gatt_Init+0x4c0>)
 800b200:	f001 fde4 	bl	800cdcc <iprintf>
 800b204:	e00c      	b.n	800b220 <Ble_Hci_Gap_Gatt_Init+0x42c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800b206:	4823      	ldr	r0, [pc, #140]	; (800b294 <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800b208:	f7fe fc34 	bl	8009a74 <DbgTraceGetFileName>
 800b20c:	4601      	mov	r1, r0
 800b20e:	f240 33be 	movw	r3, #958	; 0x3be
 800b212:	4a21      	ldr	r2, [pc, #132]	; (800b298 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800b214:	4821      	ldr	r0, [pc, #132]	; (800b29c <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800b216:	f001 fdd9 	bl	800cdcc <iprintf>
 800b21a:	4827      	ldr	r0, [pc, #156]	; (800b2b8 <Ble_Hci_Gap_Gatt_Init+0x4c4>)
 800b21c:	f001 fe44 	bl	800cea8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b220:	4b20      	ldr	r3, [pc, #128]	; (800b2a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>)
 800b222:	789b      	ldrb	r3, [r3, #2]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d023      	beq.n	800b270 <Ble_Hci_Gap_Gatt_Init+0x47c>
  {
    ret = aci_gap_configure_whitelist();
 800b228:	f7fc fd97 	bl	8007d5a <aci_gap_configure_filter_accept_list>
 800b22c:	4603      	mov	r3, r0
 800b22e:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800b230:	7dfb      	ldrb	r3, [r7, #23]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d00f      	beq.n	800b256 <Ble_Hci_Gap_Gatt_Init+0x462>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800b236:	4817      	ldr	r0, [pc, #92]	; (800b294 <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800b238:	f7fe fc1c 	bl	8009a74 <DbgTraceGetFileName>
 800b23c:	4601      	mov	r1, r0
 800b23e:	f240 33c9 	movw	r3, #969	; 0x3c9
 800b242:	4a15      	ldr	r2, [pc, #84]	; (800b298 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800b244:	4815      	ldr	r0, [pc, #84]	; (800b29c <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800b246:	f001 fdc1 	bl	800cdcc <iprintf>
 800b24a:	7dfb      	ldrb	r3, [r7, #23]
 800b24c:	4619      	mov	r1, r3
 800b24e:	481b      	ldr	r0, [pc, #108]	; (800b2bc <Ble_Hci_Gap_Gatt_Init+0x4c8>)
 800b250:	f001 fdbc 	bl	800cdcc <iprintf>
 800b254:	e00c      	b.n	800b270 <Ble_Hci_Gap_Gatt_Init+0x47c>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800b256:	480f      	ldr	r0, [pc, #60]	; (800b294 <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800b258:	f7fe fc0c 	bl	8009a74 <DbgTraceGetFileName>
 800b25c:	4601      	mov	r1, r0
 800b25e:	f240 33cd 	movw	r3, #973	; 0x3cd
 800b262:	4a0d      	ldr	r2, [pc, #52]	; (800b298 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800b264:	480d      	ldr	r0, [pc, #52]	; (800b29c <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800b266:	f001 fdb1 	bl	800cdcc <iprintf>
 800b26a:	4815      	ldr	r0, [pc, #84]	; (800b2c0 <Ble_Hci_Gap_Gatt_Init+0x4cc>)
 800b26c:	f001 fe1c 	bl	800cea8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800b270:	4808      	ldr	r0, [pc, #32]	; (800b294 <Ble_Hci_Gap_Gatt_Init+0x4a0>)
 800b272:	f7fe fbff 	bl	8009a74 <DbgTraceGetFileName>
 800b276:	4601      	mov	r1, r0
 800b278:	f44f 7374 	mov.w	r3, #976	; 0x3d0
 800b27c:	4a06      	ldr	r2, [pc, #24]	; (800b298 <Ble_Hci_Gap_Gatt_Init+0x4a4>)
 800b27e:	4807      	ldr	r0, [pc, #28]	; (800b29c <Ble_Hci_Gap_Gatt_Init+0x4a8>)
 800b280:	f001 fda4 	bl	800cdcc <iprintf>
 800b284:	480f      	ldr	r0, [pc, #60]	; (800b2c4 <Ble_Hci_Gap_Gatt_Init+0x4d0>)
 800b286:	f001 fda1 	bl	800cdcc <iprintf>
}
 800b28a:	bf00      	nop
 800b28c:	371c      	adds	r7, #28
 800b28e:	46bd      	mov	sp, r7
 800b290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b292:	bf00      	nop
 800b294:	0800e078 	.word	0x0800e078
 800b298:	0800effc 	.word	0x0800effc
 800b29c:	0800e094 	.word	0x0800e094
 800b2a0:	0800e774 	.word	0x0800e774
 800b2a4:	20001494 	.word	0x20001494
 800b2a8:	0800e794 	.word	0x0800e794
 800b2ac:	0800e7d4 	.word	0x0800e7d4
 800b2b0:	0001b207 	.word	0x0001b207
 800b2b4:	0800e804 	.word	0x0800e804
 800b2b8:	0800e850 	.word	0x0800e850
 800b2bc:	0800e88c 	.word	0x0800e88c
 800b2c0:	0800e8cc 	.word	0x0800e8cc
 800b2c4:	0800e8fc 	.word	0x0800e8fc

0800b2c8 <Scan_Request>:

static void Scan_Request(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800b2ce:	4b21      	ldr	r3, [pc, #132]	; (800b354 <Scan_Request+0x8c>)
 800b2d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2d4:	2b06      	cmp	r3, #6
 800b2d6:	d039      	beq.n	800b34c <Scan_Request+0x84>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
	Blue_On();
 800b2d8:	f7f6 fa4c 	bl	8001774 <Blue_On>
    APP_DBG_MSG("LED BLUE ON\n");
 800b2dc:	481e      	ldr	r0, [pc, #120]	; (800b358 <Scan_Request+0x90>)
 800b2de:	f7fe fbc9 	bl	8009a74 <DbgTraceGetFileName>
 800b2e2:	4601      	mov	r1, r0
 800b2e4:	f240 33dd 	movw	r3, #989	; 0x3dd
 800b2e8:	4a1c      	ldr	r2, [pc, #112]	; (800b35c <Scan_Request+0x94>)
 800b2ea:	481d      	ldr	r0, [pc, #116]	; (800b360 <Scan_Request+0x98>)
 800b2ec:	f001 fd6e 	bl	800cdcc <iprintf>
 800b2f0:	481c      	ldr	r0, [pc, #112]	; (800b364 <Scan_Request+0x9c>)
 800b2f2:	f001 fdd9 	bl	800cea8 <puts>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, CFG_BLE_ADDRESS_TYPE, 1);
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f44f 7148 	mov.w	r1, #800	; 0x320
 800b2fe:	f44f 7048 	mov.w	r0, #800	; 0x320
 800b302:	f7fc fd4e 	bl	8007da2 <aci_gap_start_general_discovery_proc>
 800b306:	4603      	mov	r3, r0
 800b308:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 800b30a:	79fb      	ldrb	r3, [r7, #7]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d10d      	bne.n	800b32c <Scan_Request+0x64>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 800b310:	4811      	ldr	r0, [pc, #68]	; (800b358 <Scan_Request+0x90>)
 800b312:	f7fe fbaf 	bl	8009a74 <DbgTraceGetFileName>
 800b316:	4601      	mov	r1, r0
 800b318:	f240 33e5 	movw	r3, #997	; 0x3e5
 800b31c:	4a0f      	ldr	r2, [pc, #60]	; (800b35c <Scan_Request+0x94>)
 800b31e:	4810      	ldr	r0, [pc, #64]	; (800b360 <Scan_Request+0x98>)
 800b320:	f001 fd54 	bl	800cdcc <iprintf>
 800b324:	4810      	ldr	r0, [pc, #64]	; (800b368 <Scan_Request+0xa0>)
 800b326:	f001 fd51 	bl	800cdcc <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 800b32a:	e00f      	b.n	800b34c <Scan_Request+0x84>
    	Red_On();
 800b32c:	f7f6 f9fe 	bl	800172c <Red_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 800b330:	4809      	ldr	r0, [pc, #36]	; (800b358 <Scan_Request+0x90>)
 800b332:	f7fe fb9f 	bl	8009a74 <DbgTraceGetFileName>
 800b336:	4601      	mov	r1, r0
 800b338:	f44f 737b 	mov.w	r3, #1004	; 0x3ec
 800b33c:	4a07      	ldr	r2, [pc, #28]	; (800b35c <Scan_Request+0x94>)
 800b33e:	4808      	ldr	r0, [pc, #32]	; (800b360 <Scan_Request+0x98>)
 800b340:	f001 fd44 	bl	800cdcc <iprintf>
 800b344:	4809      	ldr	r0, [pc, #36]	; (800b36c <Scan_Request+0xa4>)
 800b346:	f001 fd41 	bl	800cdcc <iprintf>
  return;
 800b34a:	bf00      	nop
 800b34c:	bf00      	nop
}
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20001494 	.word	0x20001494
 800b358:	0800e078 	.word	0x0800e078
 800b35c:	0800f014 	.word	0x0800f014
 800b360:	0800e094 	.word	0x0800e094
 800b364:	0800e928 	.word	0x0800e928
 800b368:	0800e934 	.word	0x0800e934
 800b36c:	0800e964 	.word	0x0800e964

0800b370 <Connect_Request>:

static void Connect_Request(void)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b08a      	sub	sp, #40	; 0x28
 800b374:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 800b376:	4820      	ldr	r0, [pc, #128]	; (800b3f8 <Connect_Request+0x88>)
 800b378:	f7fe fb7c 	bl	8009a74 <DbgTraceGetFileName>
 800b37c:	4601      	mov	r1, r0
 800b37e:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800b382:	4a1e      	ldr	r2, [pc, #120]	; (800b3fc <Connect_Request+0x8c>)
 800b384:	481e      	ldr	r0, [pc, #120]	; (800b400 <Connect_Request+0x90>)
 800b386:	f001 fd21 	bl	800cdcc <iprintf>
 800b38a:	481e      	ldr	r0, [pc, #120]	; (800b404 <Connect_Request+0x94>)
 800b38c:	f001 fd1e 	bl	800cdcc <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800b390:	4b1d      	ldr	r3, [pc, #116]	; (800b408 <Connect_Request+0x98>)
 800b392:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b396:	2b06      	cmp	r3, #6
 800b398:	d02a      	beq.n	800b3f0 <Connect_Request+0x80>
  {
    result = aci_gap_create_connection(SCAN_P,
 800b39a:	4b1c      	ldr	r3, [pc, #112]	; (800b40c <Connect_Request+0x9c>)
 800b39c:	781a      	ldrb	r2, [r3, #0]
 800b39e:	2310      	movs	r3, #16
 800b3a0:	9306      	str	r3, [sp, #24]
 800b3a2:	2310      	movs	r3, #16
 800b3a4:	9305      	str	r3, [sp, #20]
 800b3a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b3aa:	9304      	str	r3, [sp, #16]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	9303      	str	r3, [sp, #12]
 800b3b0:	2350      	movs	r3, #80	; 0x50
 800b3b2:	9302      	str	r3, [sp, #8]
 800b3b4:	2328      	movs	r3, #40	; 0x28
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	4b14      	ldr	r3, [pc, #80]	; (800b410 <Connect_Request+0xa0>)
 800b3be:	f44f 7148 	mov.w	r1, #800	; 0x320
 800b3c2:	f44f 7048 	mov.w	r0, #800	; 0x320
 800b3c6:	f7fc fd80 	bl	8007eca <aci_gap_create_connection>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800b3ce:	79fb      	ldrb	r3, [r7, #7]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d106      	bne.n	800b3e2 <Connect_Request+0x72>
    {
      /* USER CODE BEGIN BLE_CONNECT_SUCCESS */
    	Blue_Off();
 800b3d4:	f7f6 f9da 	bl	800178c <Blue_Off>
      /* USER CODE END BLE_CONNECT_SUCCESS */
      BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800b3d8:	4b0b      	ldr	r3, [pc, #44]	; (800b408 <Connect_Request+0x98>)
 800b3da:	2204      	movs	r2, #4
 800b3dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800b3e0:	e006      	b.n	800b3f0 <Connect_Request+0x80>
    	Red_On();
 800b3e2:	f7f6 f9a3 	bl	800172c <Red_On>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b3e6:	4b08      	ldr	r3, [pc, #32]	; (800b408 <Connect_Request+0x98>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 800b3ee:	bf00      	nop
 800b3f0:	bf00      	nop
}
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	0800e078 	.word	0x0800e078
 800b3fc:	0800f024 	.word	0x0800f024
 800b400:	0800e094 	.word	0x0800e094
 800b404:	0800e994 	.word	0x0800e994
 800b408:	20001494 	.word	0x20001494
 800b40c:	2000148e 	.word	0x2000148e
 800b410:	20001488 	.word	0x20001488

0800b414 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800b414:	b580      	push	{r7, lr}
 800b416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
	Green_Off();
 800b418:	f7f6 f9a0 	bl	800175c <Green_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 800b41c:	bf00      	nop
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b426:	f7ff f8eb 	bl	800a600 <LL_FLASH_GetUDN>
 800b42a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b432:	d023      	beq.n	800b47c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b434:	f7ff f8fc 	bl	800a630 <LL_FLASH_GetSTCompanyID>
 800b438:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b43a:	f7ff f8ed 	bl	800a618 <LL_FLASH_GetDeviceID>
 800b43e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	b2da      	uxtb	r2, r3
 800b444:	4b16      	ldr	r3, [pc, #88]	; (800b4a0 <BleGetBdAddress+0x80>)
 800b446:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	0a1b      	lsrs	r3, r3, #8
 800b44c:	b2da      	uxtb	r2, r3
 800b44e:	4b14      	ldr	r3, [pc, #80]	; (800b4a0 <BleGetBdAddress+0x80>)
 800b450:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	b2da      	uxtb	r2, r3
 800b456:	4b12      	ldr	r3, [pc, #72]	; (800b4a0 <BleGetBdAddress+0x80>)
 800b458:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	4b10      	ldr	r3, [pc, #64]	; (800b4a0 <BleGetBdAddress+0x80>)
 800b460:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	0a1b      	lsrs	r3, r3, #8
 800b466:	b2da      	uxtb	r2, r3
 800b468:	4b0d      	ldr	r3, [pc, #52]	; (800b4a0 <BleGetBdAddress+0x80>)
 800b46a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	0c1b      	lsrs	r3, r3, #16
 800b470:	b2da      	uxtb	r2, r3
 800b472:	4b0b      	ldr	r3, [pc, #44]	; (800b4a0 <BleGetBdAddress+0x80>)
 800b474:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b476:	4b0a      	ldr	r3, [pc, #40]	; (800b4a0 <BleGetBdAddress+0x80>)
 800b478:	617b      	str	r3, [r7, #20]
 800b47a:	e00b      	b.n	800b494 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b47c:	2000      	movs	r0, #0
 800b47e:	f7fe fbd7 	bl	8009c30 <OTP_Read>
 800b482:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d002      	beq.n	800b490 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	617b      	str	r3, [r7, #20]
 800b48e:	e001      	b.n	800b494 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b490:	4b04      	ldr	r3, [pc, #16]	; (800b4a4 <BleGetBdAddress+0x84>)
 800b492:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b494:	697b      	ldr	r3, [r7, #20]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3718      	adds	r7, #24
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	20001480 	.word	0x20001480
 800b4a4:	0800efac 	.word	0x0800efac

0800b4a8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	2010      	movs	r0, #16
 800b4b4:	f001 faa8 	bl	800ca08 <UTIL_SEQ_SetTask>
  return;
 800b4b8:	bf00      	nop
}
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	f001 fb09 	bl	800cae0 <UTIL_SEQ_SetEvt>
  return;
 800b4ce:	bf00      	nop
}
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b4de:	2001      	movs	r0, #1
 800b4e0:	f001 fb1e 	bl	800cb20 <UTIL_SEQ_WaitEvt>
  return;
 800b4e4:	bf00      	nop
}
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	3308      	adds	r3, #8
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fd fc3a 	bl	8008d78 <SVCCTL_UserEvtRx>
 800b504:	4603      	mov	r3, r0
 800b506:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b508:	7afb      	ldrb	r3, [r7, #11]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d003      	beq.n	800b516 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2201      	movs	r2, #1
 800b512:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b514:	e003      	b.n	800b51e <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	701a      	strb	r2, [r3, #0]
  return;
 800b51c:	bf00      	nop
}
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	4603      	mov	r3, r0
 800b52c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <BLE_StatusNot+0x16>
 800b534:	2b01      	cmp	r3, #1
 800b536:	d007      	beq.n	800b548 <BLE_StatusNot+0x24>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 800b538:	e00d      	b.n	800b556 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b53a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b53e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f001 fa8d 	bl	800ca60 <UTIL_SEQ_PauseTask>
      break;
 800b546:	e006      	b.n	800b556 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b548:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800b54c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f001 faa6 	bl	800caa0 <UTIL_SEQ_ResumeTask>
      break;
 800b554:	bf00      	nop
  }
  return;
 800b556:	bf00      	nop
}
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
	...

0800b560 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
  uint8_t index =0;
 800b566:	2300      	movs	r3, #0
 800b568:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */
  //TODO register tasks to sequencer
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 800b56a:	4a27      	ldr	r2, [pc, #156]	; (800b608 <P2PC_APP_Init+0xa8>)
 800b56c:	2100      	movs	r1, #0
 800b56e:	2004      	movs	r0, #4
 800b570:	f001 fa28 	bl	800c9c4 <UTIL_SEQ_RegTask>
  //UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button1_Trigger_Received );
 800b574:	4a25      	ldr	r2, [pc, #148]	; (800b60c <P2PC_APP_Init+0xac>)
 800b576:	2100      	movs	r1, #0
 800b578:	2020      	movs	r0, #32
 800b57a:	f001 fa23 	bl	800c9c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button2_Trigger_Received );
 800b57e:	4a24      	ldr	r2, [pc, #144]	; (800b610 <P2PC_APP_Init+0xb0>)
 800b580:	2100      	movs	r1, #0
 800b582:	2040      	movs	r0, #64	; 0x40
 800b584:	f001 fa1e 	bl	800c9c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW3_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button3_Trigger_Received );
 800b588:	4a22      	ldr	r2, [pc, #136]	; (800b614 <P2PC_APP_Init+0xb4>)
 800b58a:	2100      	movs	r1, #0
 800b58c:	2080      	movs	r0, #128	; 0x80
 800b58e:	f001 fa19 	bl	800c9c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_HALL_SENSOR_TRIGGERED_ID, UTIL_SEQ_RFU, Update_Speed );
 800b592:	4a21      	ldr	r2, [pc, #132]	; (800b618 <P2PC_APP_Init+0xb8>)
 800b594:	2100      	movs	r1, #0
 800b596:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b59a:	f001 fa13 	bl	800c9c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_DONE_LAUNCH, UTIL_SEQ_RFU, Done_Launch);
 800b59e:	4a1f      	ldr	r2, [pc, #124]	; (800b61c <P2PC_APP_Init+0xbc>)
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b5a6:	f001 fa0d 	bl	800c9c4 <UTIL_SEQ_RegTask>
  /**
   * Initialize LedButton Service
   */
  //TODO initialize structs
  P2P_Client_App_Context.Notification_Status=0;
 800b5aa:	4b1d      	ldr	r3, [pc, #116]	; (800b620 <P2PC_APP_Init+0xc0>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	701a      	strb	r2, [r3, #0]
  P2P_Client_App_Context.ConnectionHandle =  0x00;
 800b5b0:	4b1b      	ldr	r3, [pc, #108]	; (800b620 <P2PC_APP_Init+0xc0>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	809a      	strh	r2, [r3, #4]

  P2P_Client_App_Context.State_Status = STOPPED;
 800b5b6:	4b1a      	ldr	r3, [pc, #104]	; (800b620 <P2PC_APP_Init+0xc0>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	705a      	strb	r2, [r3, #1]
  P2P_Client_App_Context.small_motor_goal_speed = 0;
 800b5bc:	4b18      	ldr	r3, [pc, #96]	; (800b620 <P2PC_APP_Init+0xc0>)
 800b5be:	2200      	movs	r2, #0
 800b5c0:	805a      	strh	r2, [r3, #2]

/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	71fb      	strb	r3, [r7, #7]
 800b5c6:	e008      	b.n	800b5da <P2PC_APP_Init+0x7a>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 800b5c8:	79fb      	ldrb	r3, [r7, #7]
 800b5ca:	4a16      	ldr	r2, [pc, #88]	; (800b624 <P2PC_APP_Init+0xc4>)
 800b5cc:	011b      	lsls	r3, r3, #4
 800b5ce:	4413      	add	r3, r2
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800b5d4:	79fb      	ldrb	r3, [r7, #7]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	71fb      	strb	r3, [r7, #7]
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d0f3      	beq.n	800b5c8 <P2PC_APP_Init+0x68>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 800b5e0:	4811      	ldr	r0, [pc, #68]	; (800b628 <P2PC_APP_Init+0xc8>)
 800b5e2:	f7fd fbaf 	bl	8008d44 <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 800b5e6:	4811      	ldr	r0, [pc, #68]	; (800b62c <P2PC_APP_Init+0xcc>)
 800b5e8:	f7fe fa44 	bl	8009a74 <DbgTraceGetFileName>
 800b5ec:	4601      	mov	r1, r0
 800b5ee:	23e3      	movs	r3, #227	; 0xe3
 800b5f0:	4a0f      	ldr	r2, [pc, #60]	; (800b630 <P2PC_APP_Init+0xd0>)
 800b5f2:	4810      	ldr	r0, [pc, #64]	; (800b634 <P2PC_APP_Init+0xd4>)
 800b5f4:	f001 fbea 	bl	800cdcc <iprintf>
 800b5f8:	480f      	ldr	r0, [pc, #60]	; (800b638 <P2PC_APP_Init+0xd8>)
 800b5fa:	f001 fc55 	bl	800cea8 <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 800b5fe:	bf00      	nop
}
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	0800c099 	.word	0x0800c099
 800b60c:	0800bf61 	.word	0x0800bf61
 800b610:	0800bfd9 	.word	0x0800bfd9
 800b614:	0800c025 	.word	0x0800c025
 800b618:	0800c035 	.word	0x0800c035
 800b61c:	0800c04d 	.word	0x0800c04d
 800b620:	20001534 	.word	0x20001534
 800b624:	20001524 	.word	0x20001524
 800b628:	0800b7b5 	.word	0x0800b7b5
 800b62c:	0800e9c0 	.word	0x0800e9c0
 800b630:	0800f034 	.word	0x0800f034
 800b634:	0800e9e4 	.word	0x0800e9e4
 800b638:	0800e9f8 	.word	0x0800e9f8

0800b63c <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <P2PC_APP_Notification+0x16>
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d005      	beq.n	800b65c <P2PC_APP_Notification+0x20>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 800b650:	e01d      	b.n	800b68e <P2PC_APP_Notification+0x52>
    P2P_Client_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	885a      	ldrh	r2, [r3, #2]
 800b656:	4b10      	ldr	r3, [pc, #64]	; (800b698 <P2PC_APP_Notification+0x5c>)
 800b658:	809a      	strh	r2, [r3, #4]
      break;
 800b65a:	e018      	b.n	800b68e <P2PC_APP_Notification+0x52>
      uint8_t index = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	73fb      	strb	r3, [r7, #15]
      P2P_Client_App_Context.ConnectionHandle =  0x00;
 800b660:	4b0d      	ldr	r3, [pc, #52]	; (800b698 <P2PC_APP_Notification+0x5c>)
 800b662:	2200      	movs	r2, #0
 800b664:	809a      	strh	r2, [r3, #4]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b666:	e005      	b.n	800b674 <P2PC_APP_Notification+0x38>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 800b668:	7bfb      	ldrb	r3, [r7, #15]
 800b66a:	4a0c      	ldr	r2, [pc, #48]	; (800b69c <P2PC_APP_Notification+0x60>)
 800b66c:	011b      	lsls	r3, r3, #4
 800b66e:	4413      	add	r3, r2
 800b670:	2200      	movs	r2, #0
 800b672:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b674:	7bfb      	ldrb	r3, [r7, #15]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <P2PC_APP_Notification+0x4c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
 800b67c:	4a07      	ldr	r2, [pc, #28]	; (800b69c <P2PC_APP_Notification+0x60>)
 800b67e:	011b      	lsls	r3, r3, #4
 800b680:	4413      	add	r3, r2
 800b682:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1ef      	bne.n	800b668 <P2PC_APP_Notification+0x2c>
      Blue_Off(); //TODO disconnect event
 800b688:	f7f6 f880 	bl	800178c <Blue_Off>
      break;
 800b68c:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 800b68e:	bf00      	nop
}
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	20001534 	.word	0x20001534
 800b69c:	20001524 	.word	0x20001524

0800b6a0 <P2PC_APP_SW1_Button_Action>:
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void) //called from button interrupt
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	af00      	add	r7, sp, #0
	//TODO run task from sequencer
	P2P_Client_App_Context.small_motor_goal_speed = DISC_SPIN_GOAL_SPEED;
 800b6a4:	4b04      	ldr	r3, [pc, #16]	; (800b6b8 <P2PC_APP_SW1_Button_Action+0x18>)
 800b6a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b6aa:	805a      	strh	r2, [r3, #2]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	2020      	movs	r0, #32
 800b6b0:	f001 f9aa 	bl	800ca08 <UTIL_SEQ_SetTask>

}
 800b6b4:	bf00      	nop
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	20001534 	.word	0x20001534

0800b6bc <P2PC_APP_SW2_Button_Action>:

void P2PC_APP_SW2_Button_Action(void) //called from button interrupt
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	af00      	add	r7, sp, #0
	//TODO run task from sequencer
  UTIL_SEQ_SetTask(1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	2040      	movs	r0, #64	; 0x40
 800b6c4:	f001 f9a0 	bl	800ca08 <UTIL_SEQ_SetTask>

}
 800b6c8:	bf00      	nop
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <P2PC_APP_SW3_Button_Action>:

void P2PC_APP_SW3_Button_Action(void) //called from button interrupt
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	af00      	add	r7, sp, #0
	//TODO run task from sequencer
  UTIL_SEQ_SetTask(1<<CFG_TASK_SW3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	2080      	movs	r0, #128	; 0x80
 800b6d4:	f001 f998 	bl	800ca08 <UTIL_SEQ_SetTask>

}
 800b6d8:	bf00      	nop
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <P2PC_APP_Hall_Sensor_Action>:

void P2PC_APP_Hall_Sensor_Action(void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
	uint32_t curr_tick = HAL_GetTick();
 800b6e2:	f7f7 ff77 	bl	80035d4 <HAL_GetTick>
 800b6e6:	6038      	str	r0, [r7, #0]
	uint32_t time_since_last = 0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	607b      	str	r3, [r7, #4]
	if (curr_tick > hs_prev_tick){
 800b6ec:	4b29      	ldr	r3, [pc, #164]	; (800b794 <P2PC_APP_Hall_Sensor_Action+0xb8>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	683a      	ldr	r2, [r7, #0]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d904      	bls.n	800b700 <P2PC_APP_Hall_Sensor_Action+0x24>
		time_since_last = curr_tick - hs_prev_tick;
 800b6f6:	4b27      	ldr	r3, [pc, #156]	; (800b794 <P2PC_APP_Hall_Sensor_Action+0xb8>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	607b      	str	r3, [r7, #4]
	}
	current_rpm = (uint32_t)(1.0 / time_since_last * 60.0 * 1000.0);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7f4 fed7 	bl	80004b4 <__aeabi_ui2d>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	f04f 0000 	mov.w	r0, #0
 800b70e:	4922      	ldr	r1, [pc, #136]	; (800b798 <P2PC_APP_Hall_Sensor_Action+0xbc>)
 800b710:	f7f5 f874 	bl	80007fc <__aeabi_ddiv>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	4610      	mov	r0, r2
 800b71a:	4619      	mov	r1, r3
 800b71c:	f04f 0200 	mov.w	r2, #0
 800b720:	4b1e      	ldr	r3, [pc, #120]	; (800b79c <P2PC_APP_Hall_Sensor_Action+0xc0>)
 800b722:	f7f4 ff41 	bl	80005a8 <__aeabi_dmul>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	4610      	mov	r0, r2
 800b72c:	4619      	mov	r1, r3
 800b72e:	f04f 0200 	mov.w	r2, #0
 800b732:	4b1b      	ldr	r3, [pc, #108]	; (800b7a0 <P2PC_APP_Hall_Sensor_Action+0xc4>)
 800b734:	f7f4 ff38 	bl	80005a8 <__aeabi_dmul>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4610      	mov	r0, r2
 800b73e:	4619      	mov	r1, r3
 800b740:	f7f5 f944 	bl	80009cc <__aeabi_d2uiz>
 800b744:	4603      	mov	r3, r0
 800b746:	4a17      	ldr	r2, [pc, #92]	; (800b7a4 <P2PC_APP_Hall_Sensor_Action+0xc8>)
 800b748:	6013      	str	r3, [r2, #0]
	hs_prev_tick = curr_tick;
 800b74a:	4a12      	ldr	r2, [pc, #72]	; (800b794 <P2PC_APP_Hall_Sensor_Action+0xb8>)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	6013      	str	r3, [r2, #0]

	if (ready_to_launch == 1 && P2P_Client_App_Context.State_Status == DONE){
 800b750:	4b15      	ldr	r3, [pc, #84]	; (800b7a8 <P2PC_APP_Hall_Sensor_Action+0xcc>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d114      	bne.n	800b782 <P2PC_APP_Hall_Sensor_Action+0xa6>
 800b758:	4b14      	ldr	r3, [pc, #80]	; (800b7ac <P2PC_APP_Hall_Sensor_Action+0xd0>)
 800b75a:	785b      	ldrb	r3, [r3, #1]
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d110      	bne.n	800b782 <P2PC_APP_Hall_Sensor_Action+0xa6>
		ready_to_launch = 0;
 800b760:	4b11      	ldr	r3, [pc, #68]	; (800b7a8 <P2PC_APP_Hall_Sensor_Action+0xcc>)
 800b762:	2200      	movs	r2, #0
 800b764:	701a      	strb	r2, [r3, #0]
		Launch_Disc_State(current_rpm);
 800b766:	4b0f      	ldr	r3, [pc, #60]	; (800b7a4 <P2PC_APP_Hall_Sensor_Action+0xc8>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7f7 faff 	bl	8002d70 <Launch_Disc_State>
		launched = 1;
 800b772:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <P2PC_APP_Hall_Sensor_Action+0xd4>)
 800b774:	2201      	movs	r2, #1
 800b776:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_DONE_LAUNCH, CFG_SCH_PRIO_0);
 800b778:	2100      	movs	r1, #0
 800b77a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b77e:	f001 f943 	bl	800ca08 <UTIL_SEQ_SetTask>
	}
	UTIL_SEQ_SetTask(1<<CFG_TASK_HALL_SENSOR_TRIGGERED_ID, CFG_SCH_PRIO_0);
 800b782:	2100      	movs	r1, #0
 800b784:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b788:	f001 f93e 	bl	800ca08 <UTIL_SEQ_SetTask>

}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	20001540 	.word	0x20001540
 800b798:	3ff00000 	.word	0x3ff00000
 800b79c:	404e0000 	.word	0x404e0000
 800b7a0:	408f4000 	.word	0x408f4000
 800b7a4:	2000153c 	.word	0x2000153c
 800b7a8:	20001544 	.word	0x20001544
 800b7ac:	20001534 	.word	0x20001534
 800b7b0:	20001545 	.word	0x20001545

0800b7b4 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b094      	sub	sp, #80	; 0x50
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 800b7c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2bff      	cmp	r3, #255	; 0xff
 800b7ce:	f040 82f6 	bne.w	800bdbe <Event_Handler+0x60a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7d4:	3302      	adds	r3, #2
 800b7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blecore_evt->ecode)
 800b7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800b7e2:	2b0c      	cmp	r3, #12
 800b7e4:	f200 82df 	bhi.w	800bda6 <Event_Handler+0x5f2>
 800b7e8:	a201      	add	r2, pc, #4	; (adr r2, 800b7f0 <Event_Handler+0x3c>)
 800b7ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ee:	bf00      	nop
 800b7f0:	0800bb7d 	.word	0x0800bb7d
 800b7f4:	0800bda7 	.word	0x0800bda7
 800b7f8:	0800b9ef 	.word	0x0800b9ef
 800b7fc:	0800bda7 	.word	0x0800bda7
 800b800:	0800bda7 	.word	0x0800bda7
 800b804:	0800bda7 	.word	0x0800bda7
 800b808:	0800b825 	.word	0x0800b825
 800b80c:	0800bda7 	.word	0x0800bda7
 800b810:	0800bda7 	.word	0x0800bda7
 800b814:	0800bda7 	.word	0x0800bda7
 800b818:	0800bda7 	.word	0x0800bda7
 800b81c:	0800bcad 	.word	0x0800bcad
 800b820:	0800bd29 	.word	0x0800bd29
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800b824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b826:	3302      	adds	r3, #2
 800b828:	633b      	str	r3, [r7, #48]	; 0x30
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	781a      	ldrb	r2, [r3, #0]
 800b82e:	785b      	ldrb	r3, [r3, #1]
 800b830:	021b      	lsls	r3, r3, #8
 800b832:	4313      	orrs	r3, r2
 800b834:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b83c:	e02e      	b.n	800b89c <Event_Handler+0xe8>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800b83e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b842:	4aab      	ldr	r2, [pc, #684]	; (800baf0 <Event_Handler+0x33c>)
 800b844:	011b      	lsls	r3, r3, #4
 800b846:	4413      	add	r3, r2
 800b848:	3302      	adds	r3, #2
 800b84a:	881b      	ldrh	r3, [r3, #0]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7ff fa8b 	bl	800ad68 <APP_BLE_Get_Client_Connection_Status>
 800b852:	4603      	mov	r3, r0
 800b854:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 800b858:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b85c:	4aa4      	ldr	r2, [pc, #656]	; (800baf0 <Event_Handler+0x33c>)
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	4413      	add	r3, r2
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	2b06      	cmp	r3, #6
 800b866:	d114      	bne.n	800b892 <Event_Handler+0xde>
 800b868:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d110      	bne.n	800b892 <Event_Handler+0xde>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 800b870:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b874:	4a9e      	ldr	r2, [pc, #632]	; (800baf0 <Event_Handler+0x33c>)
 800b876:	011b      	lsls	r3, r3, #4
 800b878:	4413      	add	r3, r2
 800b87a:	2200      	movs	r2, #0
 800b87c:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 800b87e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b882:	4a9b      	ldr	r2, [pc, #620]	; (800baf0 <Event_Handler+0x33c>)
 800b884:	011b      	lsls	r3, r3, #4
 800b886:	4413      	add	r3, r2
 800b888:	3302      	adds	r3, #2
 800b88a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b88e:	801a      	strh	r2, [r3, #0]
              break;
 800b890:	e010      	b.n	800b8b4 <Event_Handler+0x100>
            }
            index++;
 800b892:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b896:	3301      	adds	r3, #1
 800b898:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b89c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d107      	bne.n	800b8b4 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800b8a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b8a8:	4a91      	ldr	r2, [pc, #580]	; (800baf0 <Event_Handler+0x33c>)
 800b8aa:	011b      	lsls	r3, r3, #4
 800b8ac:	4413      	add	r3, r2
 800b8ae:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1c4      	bne.n	800b83e <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800b8b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f040 8276 	bne.w	800bdaa <Event_Handler+0x5f6>
          {
            aP2PClientContext[index].connHandle= handle;
 800b8be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b8c2:	4a8b      	ldr	r2, [pc, #556]	; (800baf0 <Event_Handler+0x33c>)
 800b8c4:	011b      	lsls	r3, r3, #4
 800b8c6:	4413      	add	r3, r2
 800b8c8:	3302      	adds	r3, #2
 800b8ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b8cc:	801a      	strh	r2, [r3, #0]

            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800b8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d0:	78da      	ldrb	r2, [r3, #3]
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	789b      	ldrb	r3, [r3, #2]
 800b8d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8da:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)
          if (pr->Attribute_Data_Length == 20)
 800b8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e0:	789b      	ldrb	r3, [r3, #2]
 800b8e2:	2b14      	cmp	r3, #20
 800b8e4:	f040 8261 	bne.w	800bdaa <Event_Handler+0x5f6>
          {
            idx = 16;
 800b8e8:	2310      	movs	r3, #16
 800b8ea:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
#else
          if (pr->Attribute_Data_Length == 6)
          {
            idx = 4;
#endif
              for (i=0; i<numServ; i++)
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b8f4:	e074      	b.n	800b9e0 <Event_Handler+0x22c>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800b8f6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b8fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8fc:	4413      	add	r3, r2
 800b8fe:	791b      	ldrb	r3, [r3, #4]
 800b900:	b29a      	uxth	r2, r3
 800b902:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b906:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b908:	440b      	add	r3, r1
 800b90a:	3304      	adds	r3, #4
 800b90c:	3301      	adds	r3, #1
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	b29b      	uxth	r3, r3
 800b912:	021b      	lsls	r3, r3, #8
 800b914:	b29b      	uxth	r3, r3
 800b916:	4313      	orrs	r3, r2
 800b918:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 800b91a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b91c:	f64f 6240 	movw	r2, #65088	; 0xfe40
 800b920:	4293      	cmp	r3, r2
 800b922:	d153      	bne.n	800b9cc <Event_Handler+0x218>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 800b924:	4873      	ldr	r0, [pc, #460]	; (800baf4 <Event_Handler+0x340>)
 800b926:	f7fe f8a5 	bl	8009a74 <DbgTraceGetFileName>
 800b92a:	4601      	mov	r1, r0
 800b92c:	f240 139d 	movw	r3, #413	; 0x19d
 800b930:	4a71      	ldr	r2, [pc, #452]	; (800baf8 <Event_Handler+0x344>)
 800b932:	4872      	ldr	r0, [pc, #456]	; (800bafc <Event_Handler+0x348>)
 800b934:	f001 fa4a 	bl	800cdcc <iprintf>
 800b938:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b93c:	4a6c      	ldr	r2, [pc, #432]	; (800baf0 <Event_Handler+0x33c>)
 800b93e:	011b      	lsls	r3, r3, #4
 800b940:	4413      	add	r3, r2
 800b942:	3302      	adds	r3, #2
 800b944:	881b      	ldrh	r3, [r3, #0]
 800b946:	4619      	mov	r1, r3
 800b948:	486d      	ldr	r0, [pc, #436]	; (800bb00 <Event_Handler+0x34c>)
 800b94a:	f001 fa3f 	bl	800cdcc <iprintf>
#endif
#if (UUID_128BIT_FORMAT==1)
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800b94e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b952:	3b10      	subs	r3, #16
 800b954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b956:	4413      	add	r3, r2
 800b958:	791b      	ldrb	r3, [r3, #4]
 800b95a:	b299      	uxth	r1, r3
 800b95c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b960:	3b10      	subs	r3, #16
 800b962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b964:	4413      	add	r3, r2
 800b966:	3304      	adds	r3, #4
 800b968:	3301      	adds	r3, #1
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	021b      	lsls	r3, r3, #8
 800b970:	b29a      	uxth	r2, r3
 800b972:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b976:	430a      	orrs	r2, r1
 800b978:	b291      	uxth	r1, r2
 800b97a:	4a5d      	ldr	r2, [pc, #372]	; (800baf0 <Event_Handler+0x33c>)
 800b97c:	011b      	lsls	r3, r3, #4
 800b97e:	4413      	add	r3, r2
 800b980:	3304      	adds	r3, #4
 800b982:	460a      	mov	r2, r1
 800b984:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800b986:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b98a:	3b0e      	subs	r3, #14
 800b98c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b98e:	4413      	add	r3, r2
 800b990:	791b      	ldrb	r3, [r3, #4]
 800b992:	b299      	uxth	r1, r3
 800b994:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b998:	3b0e      	subs	r3, #14
 800b99a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b99c:	4413      	add	r3, r2
 800b99e:	3304      	adds	r3, #4
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	021b      	lsls	r3, r3, #8
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	b291      	uxth	r1, r2
 800b9b2:	4a4f      	ldr	r2, [pc, #316]	; (800baf0 <Event_Handler+0x33c>)
 800b9b4:	011b      	lsls	r3, r3, #4
 800b9b6:	4413      	add	r3, r2
 800b9b8:	3306      	adds	r3, #6
 800b9ba:	460a      	mov	r2, r1
 800b9bc:	801a      	strh	r2, [r3, #0]
#else
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800b9be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b9c2:	4a4b      	ldr	r2, [pc, #300]	; (800baf0 <Event_Handler+0x33c>)
 800b9c4:	011b      	lsls	r3, r3, #4
 800b9c6:	4413      	add	r3, r2
 800b9c8:	2208      	movs	r2, #8
 800b9ca:	701a      	strb	r2, [r3, #0]
                }
                idx += 6;
 800b9cc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b9d0:	3306      	adds	r3, #6
 800b9d2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800b9d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b9da:	3301      	adds	r3, #1
 800b9dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b9e0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800b9e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d384      	bcc.n	800b8f6 <Event_Handler+0x142>
              }
            }
          }
        }
        break;
 800b9ec:	e1dd      	b.n	800bdaa <Event_Handler+0x5f6>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800b9ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9f0:	3302      	adds	r3, #2
 800b9f2:	627b      	str	r3, [r7, #36]	; 0x24
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b9fa:	e004      	b.n	800ba06 <Event_Handler+0x252>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800b9fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ba00:	3301      	adds	r3, #1
 800ba02:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ba06:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10b      	bne.n	800ba26 <Event_Handler+0x272>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800ba0e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ba12:	4a37      	ldr	r2, [pc, #220]	; (800baf0 <Event_Handler+0x33c>)
 800ba14:	011b      	lsls	r3, r3, #4
 800ba16:	4413      	add	r3, r2
 800ba18:	3302      	adds	r3, #2
 800ba1a:	881a      	ldrh	r2, [r3, #0]
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	881b      	ldrh	r3, [r3, #0]
 800ba20:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d1ea      	bne.n	800b9fc <Event_Handler+0x248>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800ba26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f040 81bf 	bne.w	800bdae <Event_Handler+0x5fa>
          {

            /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
            idx = 17;
 800ba30:	2311      	movs	r3, #17
 800ba32:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800ba36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba38:	789b      	ldrb	r3, [r3, #2]
 800ba3a:	2b15      	cmp	r3, #21
 800ba3c:	f040 81b7 	bne.w	800bdae <Event_Handler+0x5fa>
#else
              idx = 5;
            if (pr->Handle_Value_Pair_Length == 7)
#endif
            {
              pr->Data_Length -= 1;
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	78db      	ldrb	r3, [r3, #3]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	b2da      	uxtb	r2, r3
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 800ba4c:	e090      	b.n	800bb70 <Event_Handler+0x3bc>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800ba4e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ba52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba54:	4413      	add	r3, r2
 800ba56:	791b      	ldrb	r3, [r3, #4]
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ba5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba60:	440b      	add	r3, r1
 800ba62:	3304      	adds	r3, #4
 800ba64:	3301      	adds	r3, #1
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	021b      	lsls	r3, r3, #8
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	847b      	strh	r3, [r7, #34]	; 0x22
                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800ba72:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ba76:	3b0e      	subs	r3, #14
 800ba78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba7a:	4413      	add	r3, r2
 800ba7c:	791b      	ldrb	r3, [r3, #4]
 800ba7e:	b29a      	uxth	r2, r3
 800ba80:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ba84:	3b0e      	subs	r3, #14
 800ba86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba88:	440b      	add	r3, r1
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	021b      	lsls	r3, r3, #8
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	4313      	orrs	r3, r2
 800ba98:	843b      	strh	r3, [r7, #32]
#else
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                if(uuid == P2P_WRITE_CHAR_UUID)
 800ba9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba9c:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d131      	bne.n	800bb08 <Event_Handler+0x354>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800baa4:	4813      	ldr	r0, [pc, #76]	; (800baf4 <Event_Handler+0x340>)
 800baa6:	f7fd ffe5 	bl	8009a74 <DbgTraceGetFileName>
 800baaa:	4601      	mov	r1, r0
 800baac:	f240 13dd 	movw	r3, #477	; 0x1dd
 800bab0:	4a11      	ldr	r2, [pc, #68]	; (800baf8 <Event_Handler+0x344>)
 800bab2:	4812      	ldr	r0, [pc, #72]	; (800bafc <Event_Handler+0x348>)
 800bab4:	f001 f98a 	bl	800cdcc <iprintf>
 800bab8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800babc:	4a0c      	ldr	r2, [pc, #48]	; (800baf0 <Event_Handler+0x33c>)
 800babe:	011b      	lsls	r3, r3, #4
 800bac0:	4413      	add	r3, r2
 800bac2:	3302      	adds	r3, #2
 800bac4:	881b      	ldrh	r3, [r3, #0]
 800bac6:	4619      	mov	r1, r3
 800bac8:	480e      	ldr	r0, [pc, #56]	; (800bb04 <Event_Handler+0x350>)
 800baca:	f001 f97f 	bl	800cdcc <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 800bace:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800bad2:	4a07      	ldr	r2, [pc, #28]	; (800baf0 <Event_Handler+0x33c>)
 800bad4:	011b      	lsls	r3, r3, #4
 800bad6:	4413      	add	r3, r2
 800bad8:	2209      	movs	r2, #9
 800bada:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 800badc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800bae0:	4a03      	ldr	r2, [pc, #12]	; (800baf0 <Event_Handler+0x33c>)
 800bae2:	011b      	lsls	r3, r3, #4
 800bae4:	4413      	add	r3, r2
 800bae6:	3308      	adds	r3, #8
 800bae8:	8c3a      	ldrh	r2, [r7, #32]
 800baea:	801a      	strh	r2, [r3, #0]
 800baec:	e035      	b.n	800bb5a <Event_Handler+0x3a6>
 800baee:	bf00      	nop
 800baf0:	20001524 	.word	0x20001524
 800baf4:	0800e9c0 	.word	0x0800e9c0
 800baf8:	0800f044 	.word	0x0800f044
 800bafc:	0800e9e4 	.word	0x0800e9e4
 800bb00:	0800ea14 	.word	0x0800ea14
 800bb04:	0800ea50 	.word	0x0800ea50
                }

                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800bb08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb0a:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d123      	bne.n	800bb5a <Event_Handler+0x3a6>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800bb12:	48ae      	ldr	r0, [pc, #696]	; (800bdcc <Event_Handler+0x618>)
 800bb14:	f7fd ffae 	bl	8009a74 <DbgTraceGetFileName>
 800bb18:	4601      	mov	r1, r0
 800bb1a:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
 800bb1e:	4aac      	ldr	r2, [pc, #688]	; (800bdd0 <Event_Handler+0x61c>)
 800bb20:	48ac      	ldr	r0, [pc, #688]	; (800bdd4 <Event_Handler+0x620>)
 800bb22:	f001 f953 	bl	800cdcc <iprintf>
 800bb26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800bb2a:	4aab      	ldr	r2, [pc, #684]	; (800bdd8 <Event_Handler+0x624>)
 800bb2c:	011b      	lsls	r3, r3, #4
 800bb2e:	4413      	add	r3, r2
 800bb30:	3302      	adds	r3, #2
 800bb32:	881b      	ldrh	r3, [r3, #0]
 800bb34:	4619      	mov	r1, r3
 800bb36:	48a9      	ldr	r0, [pc, #676]	; (800bddc <Event_Handler+0x628>)
 800bb38:	f001 f948 	bl	800cdcc <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800bb3c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800bb40:	4aa5      	ldr	r2, [pc, #660]	; (800bdd8 <Event_Handler+0x624>)
 800bb42:	011b      	lsls	r3, r3, #4
 800bb44:	4413      	add	r3, r2
 800bb46:	220a      	movs	r2, #10
 800bb48:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 800bb4a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800bb4e:	4aa2      	ldr	r2, [pc, #648]	; (800bdd8 <Event_Handler+0x624>)
 800bb50:	011b      	lsls	r3, r3, #4
 800bb52:	4413      	add	r3, r2
 800bb54:	330c      	adds	r3, #12
 800bb56:	8c3a      	ldrh	r2, [r7, #32]
 800bb58:	801a      	strh	r2, [r3, #0]
                }
#if (UUID_128BIT_FORMAT==1)
                pr->Data_Length -= 21;
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	78db      	ldrb	r3, [r3, #3]
 800bb5e:	3b15      	subs	r3, #21
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb64:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800bb66:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800bb6a:	3315      	adds	r3, #21
 800bb6c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	78db      	ldrb	r3, [r3, #3]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f47f af6a 	bne.w	800ba4e <Event_Handler+0x29a>
#endif
              }
            }
          }
        }
        break;
 800bb7a:	e118      	b.n	800bdae <Event_Handler+0x5fa>

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800bb7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb7e:	3302      	adds	r3, #2
 800bb80:	61fb      	str	r3, [r7, #28]
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bb88:	e004      	b.n	800bb94 <Event_Handler+0x3e0>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 800bb8a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bb8e:	3301      	adds	r3, #1
 800bb90:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bb94:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10b      	bne.n	800bbb4 <Event_Handler+0x400>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800bb9c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bba0:	4a8d      	ldr	r2, [pc, #564]	; (800bdd8 <Event_Handler+0x624>)
 800bba2:	011b      	lsls	r3, r3, #4
 800bba4:	4413      	add	r3, r2
 800bba6:	3302      	adds	r3, #2
 800bba8:	881a      	ldrh	r2, [r3, #0]
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	881b      	ldrh	r3, [r3, #0]
 800bbae:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d1ea      	bne.n	800bb8a <Event_Handler+0x3d6>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800bbb4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f040 80fa 	bne.w	800bdb2 <Event_Handler+0x5fe>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	78db      	ldrb	r3, [r3, #3]
 800bbc2:	089b      	lsrs	r3, r3, #2
 800bbc4:	76fb      	strb	r3, [r7, #27]
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	789b      	ldrb	r3, [r3, #2]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	f040 80ee 	bne.w	800bdb2 <Event_Handler+0x5fe>
            {
              for (i=0; i<numDesc; i++)
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800bbdc:	e060      	b.n	800bca0 <Event_Handler+0x4ec>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800bbde:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800bbe2:	69fa      	ldr	r2, [r7, #28]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	791b      	ldrb	r3, [r3, #4]
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800bbee:	69f9      	ldr	r1, [r7, #28]
 800bbf0:	440b      	add	r3, r1
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	021b      	lsls	r3, r3, #8
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800bc02:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800bc06:	3302      	adds	r3, #2
 800bc08:	69fa      	ldr	r2, [r7, #28]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	791b      	ldrb	r3, [r3, #4]
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800bc14:	3302      	adds	r3, #2
 800bc16:	69f9      	ldr	r1, [r7, #28]
 800bc18:	440b      	add	r3, r1
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	021b      	lsls	r3, r3, #8
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	4313      	orrs	r3, r2
 800bc28:	82fb      	strh	r3, [r7, #22]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800bc2a:	8afb      	ldrh	r3, [r7, #22]
 800bc2c:	f642 1202 	movw	r2, #10498	; 0x2902
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d12b      	bne.n	800bc8c <Event_Handler+0x4d8>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800bc34:	4865      	ldr	r0, [pc, #404]	; (800bdcc <Event_Handler+0x618>)
 800bc36:	f7fd ff1d 	bl	8009a74 <DbgTraceGetFileName>
 800bc3a:	4601      	mov	r1, r0
 800bc3c:	f240 231d 	movw	r3, #541	; 0x21d
 800bc40:	4a63      	ldr	r2, [pc, #396]	; (800bdd0 <Event_Handler+0x61c>)
 800bc42:	4864      	ldr	r0, [pc, #400]	; (800bdd4 <Event_Handler+0x620>)
 800bc44:	f001 f8c2 	bl	800cdcc <iprintf>
 800bc48:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bc4c:	4a62      	ldr	r2, [pc, #392]	; (800bdd8 <Event_Handler+0x624>)
 800bc4e:	011b      	lsls	r3, r3, #4
 800bc50:	4413      	add	r3, r2
 800bc52:	3302      	adds	r3, #2
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	4619      	mov	r1, r3
 800bc58:	4861      	ldr	r0, [pc, #388]	; (800bde0 <Event_Handler+0x62c>)
 800bc5a:	f001 f8b7 	bl	800cdcc <iprintf>
#endif
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800bc5e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bc62:	4a5d      	ldr	r2, [pc, #372]	; (800bdd8 <Event_Handler+0x624>)
 800bc64:	011b      	lsls	r3, r3, #4
 800bc66:	4413      	add	r3, r2
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	2b0a      	cmp	r3, #10
 800bc6c:	d10e      	bne.n	800bc8c <Event_Handler+0x4d8>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800bc6e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bc72:	4a59      	ldr	r2, [pc, #356]	; (800bdd8 <Event_Handler+0x624>)
 800bc74:	011b      	lsls	r3, r3, #4
 800bc76:	4413      	add	r3, r2
 800bc78:	330e      	adds	r3, #14
 800bc7a:	8b3a      	ldrh	r2, [r7, #24]
 800bc7c:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800bc7e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bc82:	4a55      	ldr	r2, [pc, #340]	; (800bdd8 <Event_Handler+0x624>)
 800bc84:	011b      	lsls	r3, r3, #4
 800bc86:	4413      	add	r3, r2
 800bc88:	220b      	movs	r2, #11
 800bc8a:	701a      	strb	r2, [r3, #0]

                  }
                }
                idx += 4;
 800bc8c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800bc90:	3304      	adds	r3, #4
 800bc92:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 800bc96:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800bca0:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800bca4:	7efb      	ldrb	r3, [r7, #27]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d399      	bcc.n	800bbde <Event_Handler+0x42a>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800bcaa:	e082      	b.n	800bdb2 <Event_Handler+0x5fe>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
          aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 800bcac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcae:	3302      	adds	r3, #2
 800bcb0:	637b      	str	r3, [r7, #52]	; 0x34
          uint8_t index;

          index = 0;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bcb8:	e004      	b.n	800bcc4 <Event_Handler+0x510>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800bcba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bcc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10b      	bne.n	800bce4 <Event_Handler+0x530>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800bccc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bcd0:	4a41      	ldr	r2, [pc, #260]	; (800bdd8 <Event_Handler+0x624>)
 800bcd2:	011b      	lsls	r3, r3, #4
 800bcd4:	4413      	add	r3, r2
 800bcd6:	3302      	adds	r3, #2
 800bcd8:	881a      	ldrh	r2, [r3, #0]
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	881b      	ldrh	r3, [r3, #0]
 800bcde:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d1ea      	bne.n	800bcba <Event_Handler+0x506>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800bce4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d164      	bne.n	800bdb6 <Event_Handler+0x602>
          {

            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800bcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcee:	885b      	ldrh	r3, [r3, #2]
 800bcf0:	b29a      	uxth	r2, r3
 800bcf2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bcf6:	4938      	ldr	r1, [pc, #224]	; (800bdd8 <Event_Handler+0x624>)
 800bcf8:	011b      	lsls	r3, r3, #4
 800bcfa:	440b      	add	r3, r1
 800bcfc:	330c      	adds	r3, #12
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d158      	bne.n	800bdb6 <Event_Handler+0x602>
                    (pr->Attribute_Value_Length == (2)) )
 800bd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd06:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800bd08:	2b02      	cmp	r3, #2
 800bd0a:	d154      	bne.n	800bdb6 <Event_Handler+0x602>
            {

              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 800bd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd12:	791b      	ldrb	r3, [r3, #4]
 800bd14:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 800bd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd18:	3305      	adds	r3, #5
 800bd1a:	60fb      	str	r3, [r7, #12]

              Gatt_Notification(&Notification);
 800bd1c:	f107 0308 	add.w	r3, r7, #8
 800bd20:	4618      	mov	r0, r3
 800bd22:	f000 f861 	bl	800bde8 <Gatt_Notification>
              /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

            }
          }
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800bd26:	e046      	b.n	800bdb6 <Event_Handler+0x602>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 800bd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2a:	3302      	adds	r3, #2
 800bd2c:	63bb      	str	r3, [r7, #56]	; 0x38
#if(CFG_DEBUG_APP_TRACE != 0)
          APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE \n");
 800bd2e:	4827      	ldr	r0, [pc, #156]	; (800bdcc <Event_Handler+0x618>)
 800bd30:	f7fd fea0 	bl	8009a74 <DbgTraceGetFileName>
 800bd34:	4601      	mov	r1, r0
 800bd36:	f44f 7314 	mov.w	r3, #592	; 0x250
 800bd3a:	4a25      	ldr	r2, [pc, #148]	; (800bdd0 <Event_Handler+0x61c>)
 800bd3c:	4825      	ldr	r0, [pc, #148]	; (800bdd4 <Event_Handler+0x620>)
 800bd3e:	f001 f845 	bl	800cdcc <iprintf>
 800bd42:	4828      	ldr	r0, [pc, #160]	; (800bde4 <Event_Handler+0x630>)
 800bd44:	f001 f8b0 	bl	800cea8 <puts>
          APP_DBG_MSG("\n");
 800bd48:	4820      	ldr	r0, [pc, #128]	; (800bdcc <Event_Handler+0x618>)
 800bd4a:	f7fd fe93 	bl	8009a74 <DbgTraceGetFileName>
 800bd4e:	4601      	mov	r1, r0
 800bd50:	f240 2351 	movw	r3, #593	; 0x251
 800bd54:	4a1e      	ldr	r2, [pc, #120]	; (800bdd0 <Event_Handler+0x61c>)
 800bd56:	481f      	ldr	r0, [pc, #124]	; (800bdd4 <Event_Handler+0x620>)
 800bd58:	f001 f838 	bl	800cdcc <iprintf>
 800bd5c:	200a      	movs	r0, #10
 800bd5e:	f001 f847 	bl	800cdf0 <putchar>
#endif

          uint8_t index;

          index = 0;
 800bd62:	2300      	movs	r3, #0
 800bd64:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bd68:	e004      	b.n	800bd74 <Event_Handler+0x5c0>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800bd6a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd6e:	3301      	adds	r3, #1
 800bd70:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bd74:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10b      	bne.n	800bd94 <Event_Handler+0x5e0>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800bd7c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd80:	4a15      	ldr	r2, [pc, #84]	; (800bdd8 <Event_Handler+0x624>)
 800bd82:	011b      	lsls	r3, r3, #4
 800bd84:	4413      	add	r3, r2
 800bd86:	3302      	adds	r3, #2
 800bd88:	881a      	ldrh	r2, [r3, #0]
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d1ea      	bne.n	800bd6a <Event_Handler+0x5b6>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800bd94:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10e      	bne.n	800bdba <Event_Handler+0x606>
          {

            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	2004      	movs	r0, #4
 800bda0:	f000 fe32 	bl	800ca08 <UTIL_SEQ_SetTask>

          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800bda4:	e009      	b.n	800bdba <Event_Handler+0x606>
        default:
          break;
 800bda6:	bf00      	nop
 800bda8:	e00a      	b.n	800bdc0 <Event_Handler+0x60c>
        break;
 800bdaa:	bf00      	nop
 800bdac:	e008      	b.n	800bdc0 <Event_Handler+0x60c>
        break;
 800bdae:	bf00      	nop
 800bdb0:	e006      	b.n	800bdc0 <Event_Handler+0x60c>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800bdb2:	bf00      	nop
 800bdb4:	e004      	b.n	800bdc0 <Event_Handler+0x60c>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800bdb6:	bf00      	nop
 800bdb8:	e002      	b.n	800bdc0 <Event_Handler+0x60c>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800bdba:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bdbc:	e000      	b.n	800bdc0 <Event_Handler+0x60c>

    default:
      break;
 800bdbe:	bf00      	nop
  }

  return(return_value);
 800bdc0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3750      	adds	r7, #80	; 0x50
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	0800e9c0 	.word	0x0800e9c0
 800bdd0:	0800f044 	.word	0x0800f044
 800bdd4:	0800e9e4 	.word	0x0800e9e4
 800bdd8:	20001524 	.word	0x20001524
 800bddc:	0800ea88 	.word	0x0800ea88
 800bde0:	0800eacc 	.word	0x0800eacc
 800bde4:	0800eb14 	.word	0x0800eb14

0800bde8 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	2b02      	cmp	r3, #2
 800bdf6:	d163      	bne.n	800bec0 <Gatt_Notification+0xd8>

    case P2P_NOTIFICATION_INFO_RECEIVED_EVT:
/* USER CODE BEGIN P2P_NOTIFICATION_INFO_RECEIVED_EVT */
    {
        //TODO got notification from server
    	P2P_Client_App_Context.State_Status = pNotification->DataTransfered.pPayload[1];
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	781a      	ldrb	r2, [r3, #0]
 800be00:	4b32      	ldr	r3, [pc, #200]	; (800becc <Gatt_Notification+0xe4>)
 800be02:	705a      	strb	r2, [r3, #1]
    	switch(P2P_Client_App_Context.State_Status ){
 800be04:	4b31      	ldr	r3, [pc, #196]	; (800becc <Gatt_Notification+0xe4>)
 800be06:	785b      	ldrb	r3, [r3, #1]
 800be08:	2b02      	cmp	r3, #2
 800be0a:	d03c      	beq.n	800be86 <Gatt_Notification+0x9e>
 800be0c:	2b02      	cmp	r3, #2
 800be0e:	dc55      	bgt.n	800bebc <Gatt_Notification+0xd4>
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <Gatt_Notification+0x32>
 800be14:	2b01      	cmp	r3, #1
 800be16:	d01b      	beq.n	800be50 <Gatt_Notification+0x68>
    		//SetState(0);
    		APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - MOTOR DONE \n\r");
    		APP_DBG_MSG(" \n\r");
    		break;
    	}
    	default : break;
 800be18:	e050      	b.n	800bebc <Gatt_Notification+0xd4>
    		APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - MOTOR STOPPED \n\r");
 800be1a:	482d      	ldr	r0, [pc, #180]	; (800bed0 <Gatt_Notification+0xe8>)
 800be1c:	f7fd fe2a 	bl	8009a74 <DbgTraceGetFileName>
 800be20:	4601      	mov	r1, r0
 800be22:	f44f 7321 	mov.w	r3, #644	; 0x284
 800be26:	4a2b      	ldr	r2, [pc, #172]	; (800bed4 <Gatt_Notification+0xec>)
 800be28:	482b      	ldr	r0, [pc, #172]	; (800bed8 <Gatt_Notification+0xf0>)
 800be2a:	f000 ffcf 	bl	800cdcc <iprintf>
 800be2e:	482b      	ldr	r0, [pc, #172]	; (800bedc <Gatt_Notification+0xf4>)
 800be30:	f000 ffcc 	bl	800cdcc <iprintf>
    		APP_DBG_MSG(" \n\r");
 800be34:	4826      	ldr	r0, [pc, #152]	; (800bed0 <Gatt_Notification+0xe8>)
 800be36:	f7fd fe1d 	bl	8009a74 <DbgTraceGetFileName>
 800be3a:	4601      	mov	r1, r0
 800be3c:	f240 2385 	movw	r3, #645	; 0x285
 800be40:	4a24      	ldr	r2, [pc, #144]	; (800bed4 <Gatt_Notification+0xec>)
 800be42:	4825      	ldr	r0, [pc, #148]	; (800bed8 <Gatt_Notification+0xf0>)
 800be44:	f000 ffc2 	bl	800cdcc <iprintf>
 800be48:	4825      	ldr	r0, [pc, #148]	; (800bee0 <Gatt_Notification+0xf8>)
 800be4a:	f000 ffbf 	bl	800cdcc <iprintf>
    		break;
 800be4e:	e036      	b.n	800bebe <Gatt_Notification+0xd6>
    		APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - MOTOR PENDING \n\r");
 800be50:	481f      	ldr	r0, [pc, #124]	; (800bed0 <Gatt_Notification+0xe8>)
 800be52:	f7fd fe0f 	bl	8009a74 <DbgTraceGetFileName>
 800be56:	4601      	mov	r1, r0
 800be58:	f240 238a 	movw	r3, #650	; 0x28a
 800be5c:	4a1d      	ldr	r2, [pc, #116]	; (800bed4 <Gatt_Notification+0xec>)
 800be5e:	481e      	ldr	r0, [pc, #120]	; (800bed8 <Gatt_Notification+0xf0>)
 800be60:	f000 ffb4 	bl	800cdcc <iprintf>
 800be64:	481f      	ldr	r0, [pc, #124]	; (800bee4 <Gatt_Notification+0xfc>)
 800be66:	f000 ffb1 	bl	800cdcc <iprintf>
    		APP_DBG_MSG(" \n\r");
 800be6a:	4819      	ldr	r0, [pc, #100]	; (800bed0 <Gatt_Notification+0xe8>)
 800be6c:	f7fd fe02 	bl	8009a74 <DbgTraceGetFileName>
 800be70:	4601      	mov	r1, r0
 800be72:	f240 238b 	movw	r3, #651	; 0x28b
 800be76:	4a17      	ldr	r2, [pc, #92]	; (800bed4 <Gatt_Notification+0xec>)
 800be78:	4817      	ldr	r0, [pc, #92]	; (800bed8 <Gatt_Notification+0xf0>)
 800be7a:	f000 ffa7 	bl	800cdcc <iprintf>
 800be7e:	4818      	ldr	r0, [pc, #96]	; (800bee0 <Gatt_Notification+0xf8>)
 800be80:	f000 ffa4 	bl	800cdcc <iprintf>
    		break;
 800be84:	e01b      	b.n	800bebe <Gatt_Notification+0xd6>
    		APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - MOTOR DONE \n\r");
 800be86:	4812      	ldr	r0, [pc, #72]	; (800bed0 <Gatt_Notification+0xe8>)
 800be88:	f7fd fdf4 	bl	8009a74 <DbgTraceGetFileName>
 800be8c:	4601      	mov	r1, r0
 800be8e:	f44f 7324 	mov.w	r3, #656	; 0x290
 800be92:	4a10      	ldr	r2, [pc, #64]	; (800bed4 <Gatt_Notification+0xec>)
 800be94:	4810      	ldr	r0, [pc, #64]	; (800bed8 <Gatt_Notification+0xf0>)
 800be96:	f000 ff99 	bl	800cdcc <iprintf>
 800be9a:	4813      	ldr	r0, [pc, #76]	; (800bee8 <Gatt_Notification+0x100>)
 800be9c:	f000 ff96 	bl	800cdcc <iprintf>
    		APP_DBG_MSG(" \n\r");
 800bea0:	480b      	ldr	r0, [pc, #44]	; (800bed0 <Gatt_Notification+0xe8>)
 800bea2:	f7fd fde7 	bl	8009a74 <DbgTraceGetFileName>
 800bea6:	4601      	mov	r1, r0
 800bea8:	f240 2391 	movw	r3, #657	; 0x291
 800beac:	4a09      	ldr	r2, [pc, #36]	; (800bed4 <Gatt_Notification+0xec>)
 800beae:	480a      	ldr	r0, [pc, #40]	; (800bed8 <Gatt_Notification+0xf0>)
 800beb0:	f000 ff8c 	bl	800cdcc <iprintf>
 800beb4:	480a      	ldr	r0, [pc, #40]	; (800bee0 <Gatt_Notification+0xf8>)
 800beb6:	f000 ff89 	bl	800cdcc <iprintf>
    		break;
 800beba:	e000      	b.n	800bebe <Gatt_Notification+0xd6>
    	default : break;
 800bebc:	bf00      	nop
        default : break;
      }*/

    }
/* USER CODE END P2P_NOTIFICATION_INFO_RECEIVED_EVT */
      break;
 800bebe:	e000      	b.n	800bec2 <Gatt_Notification+0xda>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 800bec0:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 800bec2:	bf00      	nop
}
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	20001534 	.word	0x20001534
 800bed0:	0800e9c0 	.word	0x0800e9c0
 800bed4:	0800f054 	.word	0x0800f054
 800bed8:	0800e9e4 	.word	0x0800e9e4
 800bedc:	0800eb44 	.word	0x0800eb44
 800bee0:	0800eb8c 	.word	0x0800eb8c
 800bee4:	0800eb90 	.word	0x0800eb90
 800bee8:	0800ebd8 	.word	0x0800ebd8

0800beec <Write_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
tBleStatus Write_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload) //TODO increase payload size
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	4603      	mov	r3, r0
 800bef4:	603a      	str	r2, [r7, #0]
 800bef6:	80fb      	strh	r3, [r7, #6]
 800bef8:	460b      	mov	r3, r1
 800befa:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800befc:	2392      	movs	r3, #146	; 0x92
 800befe:	73fb      	strb	r3, [r7, #15]
  uint8_t index;

  index = 0;
 800bf00:	2300      	movs	r3, #0
 800bf02:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bf04:	e01b      	b.n	800bf3e <Write_Char+0x52>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(UUID)
 800bf06:	88fb      	ldrh	r3, [r7, #6]
 800bf08:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d112      	bne.n	800bf36 <Write_Char+0x4a>
    {
      case P2P_WRITE_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
    	  //TODO write to server
        ret = aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	4a12      	ldr	r2, [pc, #72]	; (800bf5c <Write_Char+0x70>)
 800bf14:	011b      	lsls	r3, r3, #4
 800bf16:	4413      	add	r3, r2
 800bf18:	3302      	adds	r3, #2
 800bf1a:	8818      	ldrh	r0, [r3, #0]
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
 800bf1e:	4a0f      	ldr	r2, [pc, #60]	; (800bf5c <Write_Char+0x70>)
 800bf20:	011b      	lsls	r3, r3, #4
 800bf22:	4413      	add	r3, r2
 800bf24:	3308      	adds	r3, #8
 800bf26:	8819      	ldrh	r1, [r3, #0]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	f7fc fb6f 	bl	800860e <aci_gatt_write_without_resp>
 800bf30:	4603      	mov	r3, r0
 800bf32:	73fb      	strb	r3, [r7, #15]
                                         aP2PClientContext[index].P2PWriteToServerCharHdle,
                                         2, /* charValueLen */
                                         (uint8_t *)  pPayload);
        break;
 800bf34:	e000      	b.n	800bf38 <Write_Char+0x4c>
      default:
        break;
 800bf36:	bf00      	nop
    }
    index++;
 800bf38:	7bbb      	ldrb	r3, [r7, #14]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bf3e:	7bbb      	ldrb	r3, [r7, #14]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d106      	bne.n	800bf52 <Write_Char+0x66>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800bf44:	7bbb      	ldrb	r3, [r7, #14]
 800bf46:	4a05      	ldr	r2, [pc, #20]	; (800bf5c <Write_Char+0x70>)
 800bf48:	011b      	lsls	r3, r3, #4
 800bf4a:	4413      	add	r3, r2
 800bf4c:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1d9      	bne.n	800bf06 <Write_Char+0x1a>
  }

  return ret;
 800bf52:	7bfb      	ldrb	r3, [r7, #15]
}/* end Write_Char() */
 800bf54:	4618      	mov	r0, r3
 800bf56:	3710      	adds	r7, #16
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	20001524 	.word	0x20001524

0800bf60 <Button1_Trigger_Received>:

  return;
}
*/
void Button1_Trigger_Received(void)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
	  APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON PUSHED - WRITE TO SERVER \n ");
 800bf66:	4816      	ldr	r0, [pc, #88]	; (800bfc0 <Button1_Trigger_Received+0x60>)
 800bf68:	f7fd fd84 	bl	8009a74 <DbgTraceGetFileName>
 800bf6c:	4601      	mov	r1, r0
 800bf6e:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 800bf72:	4a14      	ldr	r2, [pc, #80]	; (800bfc4 <Button1_Trigger_Received+0x64>)
 800bf74:	4814      	ldr	r0, [pc, #80]	; (800bfc8 <Button1_Trigger_Received+0x68>)
 800bf76:	f000 ff29 	bl	800cdcc <iprintf>
 800bf7a:	4814      	ldr	r0, [pc, #80]	; (800bfcc <Button1_Trigger_Received+0x6c>)
 800bf7c:	f000 ff26 	bl	800cdcc <iprintf>
	  APP_DBG_MSG(" \n\r");
 800bf80:	480f      	ldr	r0, [pc, #60]	; (800bfc0 <Button1_Trigger_Received+0x60>)
 800bf82:	f7fd fd77 	bl	8009a74 <DbgTraceGetFileName>
 800bf86:	4601      	mov	r1, r0
 800bf88:	f240 23f5 	movw	r3, #757	; 0x2f5
 800bf8c:	4a0d      	ldr	r2, [pc, #52]	; (800bfc4 <Button1_Trigger_Received+0x64>)
 800bf8e:	480e      	ldr	r0, [pc, #56]	; (800bfc8 <Button1_Trigger_Received+0x68>)
 800bf90:	f000 ff1c 	bl	800cdcc <iprintf>
 800bf94:	480e      	ldr	r0, [pc, #56]	; (800bfd0 <Button1_Trigger_Received+0x70>)
 800bf96:	f000 ff19 	bl	800cdcc <iprintf>

	  uint8_t payload [2];
	  Speed_To_Payload(P2P_Client_App_Context.small_motor_goal_speed, payload);
 800bf9a:	4b0e      	ldr	r3, [pc, #56]	; (800bfd4 <Button1_Trigger_Received+0x74>)
 800bf9c:	885b      	ldrh	r3, [r3, #2]
 800bf9e:	1d3a      	adds	r2, r7, #4
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 f860 	bl	800c068 <Speed_To_Payload>

	  Write_Char( P2P_WRITE_CHAR_UUID, 0, payload);
 800bfa8:	1d3b      	adds	r3, r7, #4
 800bfaa:	461a      	mov	r2, r3
 800bfac:	2100      	movs	r1, #0
 800bfae:	f64f 6041 	movw	r0, #65089	; 0xfe41
 800bfb2:	f7ff ff9b 	bl	800beec <Write_Char>

	return;
 800bfb6:	bf00      	nop
}
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	0800e9c0 	.word	0x0800e9c0
 800bfc4:	0800f068 	.word	0x0800f068
 800bfc8:	0800e9e4 	.word	0x0800e9e4
 800bfcc:	0800ec1c 	.word	0x0800ec1c
 800bfd0:	0800eb8c 	.word	0x0800eb8c
 800bfd4:	20001534 	.word	0x20001534

0800bfd8 <Button2_Trigger_Received>:

void Button2_Trigger_Received(void)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	af00      	add	r7, sp, #0
	if (state == 0){
 800bfdc:	4b0e      	ldr	r3, [pc, #56]	; (800c018 <Button2_Trigger_Received+0x40>)
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d109      	bne.n	800bff8 <Button2_Trigger_Received+0x20>
		state = 1;
 800bfe4:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <Button2_Trigger_Received+0x40>)
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	701a      	strb	r2, [r3, #0]
		state_changed = 1;
 800bfea:	4b0c      	ldr	r3, [pc, #48]	; (800c01c <Button2_Trigger_Received+0x44>)
 800bfec:	2201      	movs	r2, #1
 800bfee:	701a      	strb	r2, [r3, #0]
		ready_to_launch = 1;
 800bff0:	4b0b      	ldr	r3, [pc, #44]	; (800c020 <Button2_Trigger_Received+0x48>)
 800bff2:	2201      	movs	r2, #1
 800bff4:	701a      	strb	r2, [r3, #0]
	}
	else if (state == 3){
		state = 0;
		state_changed = 1;
	}
	return;
 800bff6:	e00a      	b.n	800c00e <Button2_Trigger_Received+0x36>
	else if (state == 3){
 800bff8:	4b07      	ldr	r3, [pc, #28]	; (800c018 <Button2_Trigger_Received+0x40>)
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	d106      	bne.n	800c00e <Button2_Trigger_Received+0x36>
		state = 0;
 800c000:	4b05      	ldr	r3, [pc, #20]	; (800c018 <Button2_Trigger_Received+0x40>)
 800c002:	2200      	movs	r2, #0
 800c004:	701a      	strb	r2, [r3, #0]
		state_changed = 1;
 800c006:	4b05      	ldr	r3, [pc, #20]	; (800c01c <Button2_Trigger_Received+0x44>)
 800c008:	2201      	movs	r2, #1
 800c00a:	701a      	strb	r2, [r3, #0]
	return;
 800c00c:	bf00      	nop
 800c00e:	bf00      	nop
}
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	20001546 	.word	0x20001546
 800c01c:	20001547 	.word	0x20001547
 800c020:	20001544 	.word	0x20001544

0800c024 <Button3_Trigger_Received>:

void Button3_Trigger_Received(void)
{
 800c024:	b480      	push	{r7}
 800c026:	af00      	add	r7, sp, #0
	return;
 800c028:	bf00      	nop
}
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
	...

0800c034 <Update_Speed>:

void Update_Speed(void)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	af00      	add	r7, sp, #0
	SevenSegment_UpdateAllDigits(current_rpm);
 800c038:	4b03      	ldr	r3, [pc, #12]	; (800c048 <Update_Speed+0x14>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7f6 fd3f 	bl	8002ac0 <SevenSegment_UpdateAllDigits>
}
 800c042:	bf00      	nop
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	2000153c 	.word	0x2000153c

0800c04c <Done_Launch>:

void Done_Launch(void)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	af00      	add	r7, sp, #0
	P2P_Client_App_Context.small_motor_goal_speed = 0;
 800c050:	4b04      	ldr	r3, [pc, #16]	; (800c064 <Done_Launch+0x18>)
 800c052:	2200      	movs	r2, #0
 800c054:	805a      	strh	r2, [r3, #2]
	UTIL_SEQ_SetTask(1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800c056:	2100      	movs	r1, #0
 800c058:	2040      	movs	r0, #64	; 0x40
 800c05a:	f000 fcd5 	bl	800ca08 <UTIL_SEQ_SetTask>
}
 800c05e:	bf00      	nop
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	20001534 	.word	0x20001534

0800c068 <Speed_To_Payload>:

void Speed_To_Payload(uint16_t speed, uint8_t payload[2])
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	6039      	str	r1, [r7, #0]
 800c072:	80fb      	strh	r3, [r7, #6]
	//uint8_t test1 = (speed & 0xFF00) >> 8;
	//uint8_t test2 = (speed & 0x00FF);
	payload[0] = (speed & 0xFF00) >> 8; //most significant bits
 800c074:	88fb      	ldrh	r3, [r7, #6]
 800c076:	0a1b      	lsrs	r3, r3, #8
 800c078:	b29b      	uxth	r3, r3
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	701a      	strb	r2, [r3, #0]
	payload[1] = (speed & 0x00FF); //least significant bits
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	3301      	adds	r3, #1
 800c084:	88fa      	ldrh	r2, [r7, #6]
 800c086:	b2d2      	uxtb	r2, r2
 800c088:	701a      	strb	r2, [r3, #0]
}
 800c08a:	bf00      	nop
 800c08c:	370c      	adds	r7, #12
 800c08e:	46bd      	mov	sp, r7
 800c090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c094:	4770      	bx	lr
	...

0800c098 <Update_Service>:

void Update_Service()
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	80bb      	strh	r3, [r7, #4]
  uint16_t disable = 0x0000;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	807b      	strh	r3, [r7, #2]
  uint8_t index;

  index = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c0aa:	e0e1      	b.n	800c270 <Update_Service+0x1d8>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(aP2PClientContext[index].state)
 800c0ac:	79fb      	ldrb	r3, [r7, #7]
 800c0ae:	4a78      	ldr	r2, [pc, #480]	; (800c290 <Update_Service+0x1f8>)
 800c0b0:	011b      	lsls	r3, r3, #4
 800c0b2:	4413      	add	r3, r2
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	3b07      	subs	r3, #7
 800c0b8:	2b05      	cmp	r3, #5
 800c0ba:	f200 80d5 	bhi.w	800c268 <Update_Service+0x1d0>
 800c0be:	a201      	add	r2, pc, #4	; (adr r2, 800c0c4 <Update_Service+0x2c>)
 800c0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c4:	0800c0dd 	.word	0x0800c0dd
 800c0c8:	0800c0f9 	.word	0x0800c0f9
 800c0cc:	0800c13f 	.word	0x0800c13f
 800c0d0:	0800c189 	.word	0x0800c189
 800c0d4:	0800c1d3 	.word	0x0800c1d3
 800c0d8:	0800c221 	.word	0x0800c221
    {
      case APP_BLE_DISCOVER_SERVICES:
        APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
 800c0dc:	486d      	ldr	r0, [pc, #436]	; (800c294 <Update_Service+0x1fc>)
 800c0de:	f7fd fcc9 	bl	8009a74 <DbgTraceGetFileName>
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	f240 3332 	movw	r3, #818	; 0x332
 800c0e8:	4a6b      	ldr	r2, [pc, #428]	; (800c298 <Update_Service+0x200>)
 800c0ea:	486c      	ldr	r0, [pc, #432]	; (800c29c <Update_Service+0x204>)
 800c0ec:	f000 fe6e 	bl	800cdcc <iprintf>
 800c0f0:	486b      	ldr	r0, [pc, #428]	; (800c2a0 <Update_Service+0x208>)
 800c0f2:	f000 fed9 	bl	800cea8 <puts>
        break;
 800c0f6:	e0b8      	b.n	800c26a <Update_Service+0x1d2>
      case APP_BLE_DISCOVER_CHARACS:
        APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
 800c0f8:	4866      	ldr	r0, [pc, #408]	; (800c294 <Update_Service+0x1fc>)
 800c0fa:	f7fd fcbb 	bl	8009a74 <DbgTraceGetFileName>
 800c0fe:	4601      	mov	r1, r0
 800c100:	f240 3335 	movw	r3, #821	; 0x335
 800c104:	4a64      	ldr	r2, [pc, #400]	; (800c298 <Update_Service+0x200>)
 800c106:	4865      	ldr	r0, [pc, #404]	; (800c29c <Update_Service+0x204>)
 800c108:	f000 fe60 	bl	800cdcc <iprintf>
 800c10c:	4865      	ldr	r0, [pc, #404]	; (800c2a4 <Update_Service+0x20c>)
 800c10e:	f000 fecb 	bl	800cea8 <puts>
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800c112:	79fb      	ldrb	r3, [r7, #7]
 800c114:	4a5e      	ldr	r2, [pc, #376]	; (800c290 <Update_Service+0x1f8>)
 800c116:	011b      	lsls	r3, r3, #4
 800c118:	4413      	add	r3, r2
 800c11a:	3302      	adds	r3, #2
 800c11c:	8818      	ldrh	r0, [r3, #0]
 800c11e:	79fb      	ldrb	r3, [r7, #7]
 800c120:	4a5b      	ldr	r2, [pc, #364]	; (800c290 <Update_Service+0x1f8>)
 800c122:	011b      	lsls	r3, r3, #4
 800c124:	4413      	add	r3, r2
 800c126:	3304      	adds	r3, #4
 800c128:	8819      	ldrh	r1, [r3, #0]
 800c12a:	79fb      	ldrb	r3, [r7, #7]
 800c12c:	4a58      	ldr	r2, [pc, #352]	; (800c290 <Update_Service+0x1f8>)
 800c12e:	011b      	lsls	r3, r3, #4
 800c130:	4413      	add	r3, r2
 800c132:	3306      	adds	r3, #6
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	461a      	mov	r2, r3
 800c138:	f7fc f8c8 	bl	80082cc <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                          aP2PClientContext[index].P2PServiceEndHandle);
        break;
 800c13c:	e095      	b.n	800c26a <Update_Service+0x1d2>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No descriptor */
        APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write  Characteristic\n");
 800c13e:	4855      	ldr	r0, [pc, #340]	; (800c294 <Update_Service+0x1fc>)
 800c140:	f7fd fc98 	bl	8009a74 <DbgTraceGetFileName>
 800c144:	4601      	mov	r1, r0
 800c146:	f240 333b 	movw	r3, #827	; 0x33b
 800c14a:	4a53      	ldr	r2, [pc, #332]	; (800c298 <Update_Service+0x200>)
 800c14c:	4853      	ldr	r0, [pc, #332]	; (800c29c <Update_Service+0x204>)
 800c14e:	f000 fe3d 	bl	800cdcc <iprintf>
 800c152:	4855      	ldr	r0, [pc, #340]	; (800c2a8 <Update_Service+0x210>)
 800c154:	f000 fea8 	bl	800cea8 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800c158:	79fb      	ldrb	r3, [r7, #7]
 800c15a:	4a4d      	ldr	r2, [pc, #308]	; (800c290 <Update_Service+0x1f8>)
 800c15c:	011b      	lsls	r3, r3, #4
 800c15e:	4413      	add	r3, r2
 800c160:	3302      	adds	r3, #2
 800c162:	8818      	ldrh	r0, [r3, #0]
 800c164:	79fb      	ldrb	r3, [r7, #7]
 800c166:	4a4a      	ldr	r2, [pc, #296]	; (800c290 <Update_Service+0x1f8>)
 800c168:	011b      	lsls	r3, r3, #4
 800c16a:	4413      	add	r3, r2
 800c16c:	3308      	adds	r3, #8
 800c16e:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 800c170:	79fb      	ldrb	r3, [r7, #7]
 800c172:	4a47      	ldr	r2, [pc, #284]	; (800c290 <Update_Service+0x1f8>)
 800c174:	011b      	lsls	r3, r3, #4
 800c176:	4413      	add	r3, r2
 800c178:	3308      	adds	r3, #8
 800c17a:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800c17c:	3302      	adds	r3, #2
 800c17e:	b29b      	uxth	r3, r3
 800c180:	461a      	mov	r2, r3
 800c182:	f7fc f924 	bl	80083ce <aci_gatt_disc_all_char_desc>
        break;
 800c186:	e070      	b.n	800c26a <Update_Service+0x1d2>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification  Characteristic\n");
 800c188:	4842      	ldr	r0, [pc, #264]	; (800c294 <Update_Service+0x1fc>)
 800c18a:	f7fd fc73 	bl	8009a74 <DbgTraceGetFileName>
 800c18e:	4601      	mov	r1, r0
 800c190:	f240 3341 	movw	r3, #833	; 0x341
 800c194:	4a40      	ldr	r2, [pc, #256]	; (800c298 <Update_Service+0x200>)
 800c196:	4841      	ldr	r0, [pc, #260]	; (800c29c <Update_Service+0x204>)
 800c198:	f000 fe18 	bl	800cdcc <iprintf>
 800c19c:	4843      	ldr	r0, [pc, #268]	; (800c2ac <Update_Service+0x214>)
 800c19e:	f000 fe83 	bl	800cea8 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800c1a2:	79fb      	ldrb	r3, [r7, #7]
 800c1a4:	4a3a      	ldr	r2, [pc, #232]	; (800c290 <Update_Service+0x1f8>)
 800c1a6:	011b      	lsls	r3, r3, #4
 800c1a8:	4413      	add	r3, r2
 800c1aa:	3302      	adds	r3, #2
 800c1ac:	8818      	ldrh	r0, [r3, #0]
 800c1ae:	79fb      	ldrb	r3, [r7, #7]
 800c1b0:	4a37      	ldr	r2, [pc, #220]	; (800c290 <Update_Service+0x1f8>)
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	4413      	add	r3, r2
 800c1b6:	330c      	adds	r3, #12
 800c1b8:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 800c1ba:	79fb      	ldrb	r3, [r7, #7]
 800c1bc:	4a34      	ldr	r2, [pc, #208]	; (800c290 <Update_Service+0x1f8>)
 800c1be:	011b      	lsls	r3, r3, #4
 800c1c0:	4413      	add	r3, r2
 800c1c2:	330c      	adds	r3, #12
 800c1c4:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800c1c6:	3302      	adds	r3, #2
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	f7fc f8ff 	bl	80083ce <aci_gatt_disc_all_char_desc>
        break;
 800c1d0:	e04b      	b.n	800c26a <Update_Service+0x1d2>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        APP_DBG_MSG("* GATT : Enable Server Notification\n");
 800c1d2:	4830      	ldr	r0, [pc, #192]	; (800c294 <Update_Service+0x1fc>)
 800c1d4:	f7fd fc4e 	bl	8009a74 <DbgTraceGetFileName>
 800c1d8:	4601      	mov	r1, r0
 800c1da:	f240 3347 	movw	r3, #839	; 0x347
 800c1de:	4a2e      	ldr	r2, [pc, #184]	; (800c298 <Update_Service+0x200>)
 800c1e0:	482e      	ldr	r0, [pc, #184]	; (800c29c <Update_Service+0x204>)
 800c1e2:	f000 fdf3 	bl	800cdcc <iprintf>
 800c1e6:	4832      	ldr	r0, [pc, #200]	; (800c2b0 <Update_Service+0x218>)
 800c1e8:	f000 fe5e 	bl	800cea8 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800c1ec:	79fb      	ldrb	r3, [r7, #7]
 800c1ee:	4a28      	ldr	r2, [pc, #160]	; (800c290 <Update_Service+0x1f8>)
 800c1f0:	011b      	lsls	r3, r3, #4
 800c1f2:	4413      	add	r3, r2
 800c1f4:	3302      	adds	r3, #2
 800c1f6:	8818      	ldrh	r0, [r3, #0]
 800c1f8:	79fb      	ldrb	r3, [r7, #7]
 800c1fa:	4a25      	ldr	r2, [pc, #148]	; (800c290 <Update_Service+0x1f8>)
 800c1fc:	011b      	lsls	r3, r3, #4
 800c1fe:	4413      	add	r3, r2
 800c200:	330e      	adds	r3, #14
 800c202:	8819      	ldrh	r1, [r3, #0]
 800c204:	1d3b      	adds	r3, r7, #4
 800c206:	2202      	movs	r2, #2
 800c208:	f7fc f962 	bl	80084d0 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800c20c:	79fb      	ldrb	r3, [r7, #7]
 800c20e:	4a20      	ldr	r2, [pc, #128]	; (800c290 <Update_Service+0x1f8>)
 800c210:	011b      	lsls	r3, r3, #4
 800c212:	4413      	add	r3, r2
 800c214:	2206      	movs	r2, #6
 800c216:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_RED); //TODO maybe get rid of this
 800c218:	2002      	movs	r0, #2
 800c21a:	f7f7 f8a3 	bl	8003364 <BSP_LED_Off>
        break;
 800c21e:	e024      	b.n	800c26a <Update_Service+0x1d2>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        APP_DBG_MSG("* GATT : Disable Server Notification\n");
 800c220:	481c      	ldr	r0, [pc, #112]	; (800c294 <Update_Service+0x1fc>)
 800c222:	f7fd fc27 	bl	8009a74 <DbgTraceGetFileName>
 800c226:	4601      	mov	r1, r0
 800c228:	f44f 7354 	mov.w	r3, #848	; 0x350
 800c22c:	4a1a      	ldr	r2, [pc, #104]	; (800c298 <Update_Service+0x200>)
 800c22e:	481b      	ldr	r0, [pc, #108]	; (800c29c <Update_Service+0x204>)
 800c230:	f000 fdcc 	bl	800cdcc <iprintf>
 800c234:	481f      	ldr	r0, [pc, #124]	; (800c2b4 <Update_Service+0x21c>)
 800c236:	f000 fe37 	bl	800cea8 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800c23a:	79fb      	ldrb	r3, [r7, #7]
 800c23c:	4a14      	ldr	r2, [pc, #80]	; (800c290 <Update_Service+0x1f8>)
 800c23e:	011b      	lsls	r3, r3, #4
 800c240:	4413      	add	r3, r2
 800c242:	3302      	adds	r3, #2
 800c244:	8818      	ldrh	r0, [r3, #0]
 800c246:	79fb      	ldrb	r3, [r7, #7]
 800c248:	4a11      	ldr	r2, [pc, #68]	; (800c290 <Update_Service+0x1f8>)
 800c24a:	011b      	lsls	r3, r3, #4
 800c24c:	4413      	add	r3, r2
 800c24e:	330e      	adds	r3, #14
 800c250:	8819      	ldrh	r1, [r3, #0]
 800c252:	1cbb      	adds	r3, r7, #2
 800c254:	2202      	movs	r2, #2
 800c256:	f7fc f93b 	bl	80084d0 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&disable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	4a0c      	ldr	r2, [pc, #48]	; (800c290 <Update_Service+0x1f8>)
 800c25e:	011b      	lsls	r3, r3, #4
 800c260:	4413      	add	r3, r2
 800c262:	2206      	movs	r2, #6
 800c264:	701a      	strb	r2, [r3, #0]
        break;
 800c266:	e000      	b.n	800c26a <Update_Service+0x1d2>
      default:
        break;
 800c268:	bf00      	nop
    }
    index++;
 800c26a:	79fb      	ldrb	r3, [r7, #7]
 800c26c:	3301      	adds	r3, #1
 800c26e:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c270:	79fb      	ldrb	r3, [r7, #7]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d108      	bne.n	800c288 <Update_Service+0x1f0>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800c276:	79fb      	ldrb	r3, [r7, #7]
 800c278:	4a05      	ldr	r2, [pc, #20]	; (800c290 <Update_Service+0x1f8>)
 800c27a:	011b      	lsls	r3, r3, #4
 800c27c:	4413      	add	r3, r2
 800c27e:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c280:	2b00      	cmp	r3, #0
 800c282:	f47f af13 	bne.w	800c0ac <Update_Service+0x14>
  }
  return;
 800c286:	bf00      	nop
 800c288:	bf00      	nop
}
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	20001524 	.word	0x20001524
 800c294:	0800e9c0 	.word	0x0800e9c0
 800c298:	0800f084 	.word	0x0800f084
 800c29c:	0800e9e4 	.word	0x0800e9e4
 800c2a0:	0800ec5c 	.word	0x0800ec5c
 800c2a4:	0800ec74 	.word	0x0800ec74
 800c2a8:	0800ec9c 	.word	0x0800ec9c
 800c2ac:	0800ecd8 	.word	0x0800ecd8
 800c2b0:	0800ed1c 	.word	0x0800ed1c
 800c2b4:	0800ed40 	.word	0x0800ed40

0800c2b8 <LL_PWR_EnableBootC2>:
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c2bc:	4b05      	ldr	r3, [pc, #20]	; (800c2d4 <LL_PWR_EnableBootC2+0x1c>)
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	4a04      	ldr	r2, [pc, #16]	; (800c2d4 <LL_PWR_EnableBootC2+0x1c>)
 800c2c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2c6:	60d3      	str	r3, [r2, #12]
}
 800c2c8:	bf00      	nop
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	58000400 	.word	0x58000400

0800c2d8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c2e0:	4b06      	ldr	r3, [pc, #24]	; (800c2fc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c2e2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c2e6:	4905      	ldr	r1, [pc, #20]	; (800c2fc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	58000800 	.word	0x58000800

0800c300 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c308:	4b05      	ldr	r3, [pc, #20]	; (800c320 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c30a:	6a1a      	ldr	r2, [r3, #32]
 800c30c:	4904      	ldr	r1, [pc, #16]	; (800c320 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4313      	orrs	r3, r2
 800c312:	620b      	str	r3, [r1, #32]
}
 800c314:	bf00      	nop
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	58000800 	.word	0x58000800

0800c324 <LL_AHB3_GRP1_EnableClock>:
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c32c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4313      	orrs	r3, r2
 800c33a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c33c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4013      	ands	r3, r2
 800c346:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c348:	68fb      	ldr	r3, [r7, #12]
}
 800c34a:	bf00      	nop
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr

0800c356 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c356:	b480      	push	{r7}
 800c358:	b085      	sub	sp, #20
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c35e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c362:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c376:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4013      	ands	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c380:	68fb      	ldr	r3, [r7, #12]
}
 800c382:	bf00      	nop
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800c38e:	b480      	push	{r7}
 800c390:	b083      	sub	sp, #12
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	601a      	str	r2, [r3, #0]
}
 800c3a2:	bf00      	nop
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800c3ae:	b480      	push	{r7}
 800c3b0:	b083      	sub	sp, #12
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f043 0201 	orr.w	r2, r3, #1
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	601a      	str	r2, [r3, #0]
}
 800c3c2:	bf00      	nop
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b083      	sub	sp, #12
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	041b      	lsls	r3, r3, #16
 800c3e0:	43db      	mvns	r3, r3
 800c3e2:	401a      	ands	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	605a      	str	r2, [r3, #4]
}
 800c3e8:	bf00      	nop
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685a      	ldr	r2, [r3, #4]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	041b      	lsls	r3, r3, #16
 800c406:	431a      	orrs	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	605a      	str	r2, [r3, #4]
}
 800c40c:	bf00      	nop
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr

0800c418 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	43db      	mvns	r3, r3
 800c42a:	401a      	ands	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	605a      	str	r2, [r3, #4]
}
 800c430:	bf00      	nop
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	683a      	ldr	r2, [r7, #0]
 800c44a:	609a      	str	r2, [r3, #8]
}
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr

0800c458 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	041a      	lsls	r2, r3, #16
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	609a      	str	r2, [r3, #8]
}
 800c46a:	bf00      	nop
 800c46c:	370c      	adds	r7, #12
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr

0800c476 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c476:	b480      	push	{r7}
 800c478:	b083      	sub	sp, #12
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
 800c47e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	68da      	ldr	r2, [r3, #12]
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	4013      	ands	r3, r2
 800c488:	683a      	ldr	r2, [r7, #0]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d101      	bne.n	800c492 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c48e:	2301      	movs	r3, #1
 800c490:	e000      	b.n	800c494 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	69da      	ldr	r2, [r3, #28]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	4013      	ands	r3, r2
 800c4b2:	683a      	ldr	r2, [r7, #0]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d101      	bne.n	800c4bc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e000      	b.n	800c4be <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	370c      	adds	r7, #12
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
	...

0800c4cc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c4d0:	2102      	movs	r1, #2
 800c4d2:	4818      	ldr	r0, [pc, #96]	; (800c534 <HW_IPCC_Rx_Handler+0x68>)
 800c4d4:	f7ff ffe4 	bl	800c4a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d008      	beq.n	800c4f0 <HW_IPCC_Rx_Handler+0x24>
 800c4de:	4b15      	ldr	r3, [pc, #84]	; (800c534 <HW_IPCC_Rx_Handler+0x68>)
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	f003 0302 	and.w	r3, r3, #2
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d102      	bne.n	800c4f0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800c4ea:	f000 f8d5 	bl	800c698 <HW_IPCC_SYS_EvtHandler>
 800c4ee:	e01e      	b.n	800c52e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	4810      	ldr	r0, [pc, #64]	; (800c534 <HW_IPCC_Rx_Handler+0x68>)
 800c4f4:	f7ff ffd4 	bl	800c4a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d008      	beq.n	800c510 <HW_IPCC_Rx_Handler+0x44>
 800c4fe:	4b0d      	ldr	r3, [pc, #52]	; (800c534 <HW_IPCC_Rx_Handler+0x68>)
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	2b00      	cmp	r3, #0
 800c508:	d102      	bne.n	800c510 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800c50a:	f000 f889 	bl	800c620 <HW_IPCC_BLE_EvtHandler>
 800c50e:	e00e      	b.n	800c52e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c510:	2108      	movs	r1, #8
 800c512:	4808      	ldr	r0, [pc, #32]	; (800c534 <HW_IPCC_Rx_Handler+0x68>)
 800c514:	f7ff ffc4 	bl	800c4a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d008      	beq.n	800c530 <HW_IPCC_Rx_Handler+0x64>
 800c51e:	4b05      	ldr	r3, [pc, #20]	; (800c534 <HW_IPCC_Rx_Handler+0x68>)
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	f003 0308 	and.w	r3, r3, #8
 800c526:	2b00      	cmp	r3, #0
 800c528:	d102      	bne.n	800c530 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c52a:	f000 f901 	bl	800c730 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c52e:	bf00      	nop
 800c530:	bf00      	nop
}
 800c532:	bd80      	pop	{r7, pc}
 800c534:	58000c00 	.word	0x58000c00

0800c538 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c53c:	2102      	movs	r1, #2
 800c53e:	4818      	ldr	r0, [pc, #96]	; (800c5a0 <HW_IPCC_Tx_Handler+0x68>)
 800c540:	f7ff ff99 	bl	800c476 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d108      	bne.n	800c55c <HW_IPCC_Tx_Handler+0x24>
 800c54a:	4b15      	ldr	r3, [pc, #84]	; (800c5a0 <HW_IPCC_Tx_Handler+0x68>)
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d102      	bne.n	800c55c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c556:	f000 f893 	bl	800c680 <HW_IPCC_SYS_CmdEvtHandler>
 800c55a:	e01e      	b.n	800c59a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c55c:	2108      	movs	r1, #8
 800c55e:	4810      	ldr	r0, [pc, #64]	; (800c5a0 <HW_IPCC_Tx_Handler+0x68>)
 800c560:	f7ff ff89 	bl	800c476 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d108      	bne.n	800c57c <HW_IPCC_Tx_Handler+0x44>
 800c56a:	4b0d      	ldr	r3, [pc, #52]	; (800c5a0 <HW_IPCC_Tx_Handler+0x68>)
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c572:	2b00      	cmp	r3, #0
 800c574:	d102      	bne.n	800c57c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c576:	f000 f8bd 	bl	800c6f4 <HW_IPCC_MM_FreeBufHandler>
 800c57a:	e00e      	b.n	800c59a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c57c:	2120      	movs	r1, #32
 800c57e:	4808      	ldr	r0, [pc, #32]	; (800c5a0 <HW_IPCC_Tx_Handler+0x68>)
 800c580:	f7ff ff79 	bl	800c476 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c584:	4603      	mov	r3, r0
 800c586:	2b00      	cmp	r3, #0
 800c588:	d108      	bne.n	800c59c <HW_IPCC_Tx_Handler+0x64>
 800c58a:	4b05      	ldr	r3, [pc, #20]	; (800c5a0 <HW_IPCC_Tx_Handler+0x68>)
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c592:	2b00      	cmp	r3, #0
 800c594:	d102      	bne.n	800c59c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c596:	f000 f84f 	bl	800c638 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c59a:	bf00      	nop
 800c59c:	bf00      	nop
}
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	58000c00 	.word	0x58000c00

0800c5a4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c5a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c5ac:	f7ff fed3 	bl	800c356 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c5b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c5b4:	f7ff fea4 	bl	800c300 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c5b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c5bc:	f7ff fe8c 	bl	800c2d8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c5c0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c5c2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c5c4:	f7ff fe78 	bl	800c2b8 <LL_PWR_EnableBootC2>

  return;
 800c5c8:	bf00      	nop
}
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c5d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c5d4:	f7ff fea6 	bl	800c324 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c5d8:	4806      	ldr	r0, [pc, #24]	; (800c5f4 <HW_IPCC_Init+0x28>)
 800c5da:	f7ff fee8 	bl	800c3ae <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c5de:	4805      	ldr	r0, [pc, #20]	; (800c5f4 <HW_IPCC_Init+0x28>)
 800c5e0:	f7ff fed5 	bl	800c38e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c5e4:	202c      	movs	r0, #44	; 0x2c
 800c5e6:	f7f7 f97a 	bl	80038de <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c5ea:	202d      	movs	r0, #45	; 0x2d
 800c5ec:	f7f7 f977 	bl	80038de <HAL_NVIC_EnableIRQ>

  return;
 800c5f0:	bf00      	nop
}
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	58000c00 	.word	0x58000c00

0800c5f8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c5fc:	2101      	movs	r1, #1
 800c5fe:	4802      	ldr	r0, [pc, #8]	; (800c608 <HW_IPCC_BLE_Init+0x10>)
 800c600:	f7ff ff0a 	bl	800c418 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c604:	bf00      	nop
}
 800c606:	bd80      	pop	{r7, pc}
 800c608:	58000c00 	.word	0x58000c00

0800c60c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c610:	2101      	movs	r1, #1
 800c612:	4802      	ldr	r0, [pc, #8]	; (800c61c <HW_IPCC_BLE_SendCmd+0x10>)
 800c614:	f7ff ff20 	bl	800c458 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c618:	bf00      	nop
}
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	58000c00 	.word	0x58000c00

0800c620 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c624:	f7fd f86e 	bl	8009704 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c628:	2101      	movs	r1, #1
 800c62a:	4802      	ldr	r0, [pc, #8]	; (800c634 <HW_IPCC_BLE_EvtHandler+0x14>)
 800c62c:	f7ff ff06 	bl	800c43c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c630:	bf00      	nop
}
 800c632:	bd80      	pop	{r7, pc}
 800c634:	58000c00 	.word	0x58000c00

0800c638 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c63c:	2120      	movs	r1, #32
 800c63e:	4803      	ldr	r0, [pc, #12]	; (800c64c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c640:	f7ff fed8 	bl	800c3f4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c644:	f7fd f88e 	bl	8009764 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c648:	bf00      	nop
}
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	58000c00 	.word	0x58000c00

0800c650 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c654:	2102      	movs	r1, #2
 800c656:	4802      	ldr	r0, [pc, #8]	; (800c660 <HW_IPCC_SYS_Init+0x10>)
 800c658:	f7ff fede 	bl	800c418 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c65c:	bf00      	nop
}
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	58000c00 	.word	0x58000c00

0800c664 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c668:	2102      	movs	r1, #2
 800c66a:	4804      	ldr	r0, [pc, #16]	; (800c67c <HW_IPCC_SYS_SendCmd+0x18>)
 800c66c:	f7ff fef4 	bl	800c458 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c670:	2102      	movs	r1, #2
 800c672:	4802      	ldr	r0, [pc, #8]	; (800c67c <HW_IPCC_SYS_SendCmd+0x18>)
 800c674:	f7ff feab 	bl	800c3ce <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c678:	bf00      	nop
}
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	58000c00 	.word	0x58000c00

0800c680 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c684:	2102      	movs	r1, #2
 800c686:	4803      	ldr	r0, [pc, #12]	; (800c694 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c688:	f7ff feb4 	bl	800c3f4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c68c:	f7fd f8ba 	bl	8009804 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c690:	bf00      	nop
}
 800c692:	bd80      	pop	{r7, pc}
 800c694:	58000c00 	.word	0x58000c00

0800c698 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c69c:	f7fd f8c8 	bl	8009830 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c6a0:	2102      	movs	r1, #2
 800c6a2:	4802      	ldr	r0, [pc, #8]	; (800c6ac <HW_IPCC_SYS_EvtHandler+0x14>)
 800c6a4:	f7ff feca 	bl	800c43c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c6a8:	bf00      	nop
}
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	58000c00 	.word	0x58000c00

0800c6b0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c6b8:	2108      	movs	r1, #8
 800c6ba:	480c      	ldr	r0, [pc, #48]	; (800c6ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c6bc:	f7ff fedb 	bl	800c476 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d007      	beq.n	800c6d6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c6c6:	4a0a      	ldr	r2, [pc, #40]	; (800c6f0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c6cc:	2108      	movs	r1, #8
 800c6ce:	4807      	ldr	r0, [pc, #28]	; (800c6ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c6d0:	f7ff fe7d 	bl	800c3ce <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c6d4:	e006      	b.n	800c6e4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c6da:	2108      	movs	r1, #8
 800c6dc:	4803      	ldr	r0, [pc, #12]	; (800c6ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c6de:	f7ff febb 	bl	800c458 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c6e2:	bf00      	nop
}
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	58000c00 	.word	0x58000c00
 800c6f0:	20001548 	.word	0x20001548

0800c6f4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c6f8:	2108      	movs	r1, #8
 800c6fa:	4806      	ldr	r0, [pc, #24]	; (800c714 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c6fc:	f7ff fe7a 	bl	800c3f4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c700:	4b05      	ldr	r3, [pc, #20]	; (800c718 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c706:	2108      	movs	r1, #8
 800c708:	4802      	ldr	r0, [pc, #8]	; (800c714 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c70a:	f7ff fea5 	bl	800c458 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c70e:	bf00      	nop
}
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	58000c00 	.word	0x58000c00
 800c718:	20001548 	.word	0x20001548

0800c71c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c720:	2108      	movs	r1, #8
 800c722:	4802      	ldr	r0, [pc, #8]	; (800c72c <HW_IPCC_TRACES_Init+0x10>)
 800c724:	f7ff fe78 	bl	800c418 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c728:	bf00      	nop
}
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	58000c00 	.word	0x58000c00

0800c730 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c734:	f7fd f924 	bl	8009980 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c738:	2108      	movs	r1, #8
 800c73a:	4802      	ldr	r0, [pc, #8]	; (800c744 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c73c:	f7ff fe7e 	bl	800c43c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c740:	bf00      	nop
}
 800c742:	bd80      	pop	{r7, pc}
 800c744:	58000c00 	.word	0x58000c00

0800c748 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c748:	b480      	push	{r7}
 800c74a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c74c:	4b05      	ldr	r3, [pc, #20]	; (800c764 <UTIL_LPM_Init+0x1c>)
 800c74e:	2200      	movs	r2, #0
 800c750:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c752:	4b05      	ldr	r3, [pc, #20]	; (800c768 <UTIL_LPM_Init+0x20>)
 800c754:	2200      	movs	r2, #0
 800c756:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c758:	bf00      	nop
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	2000154c 	.word	0x2000154c
 800c768:	20001550 	.word	0x20001550

0800c76c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c76c:	b480      	push	{r7}
 800c76e:	b087      	sub	sp, #28
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	460b      	mov	r3, r1
 800c776:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c778:	f3ef 8310 	mrs	r3, PRIMASK
 800c77c:	613b      	str	r3, [r7, #16]
  return(result);
 800c77e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c780:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c782:	b672      	cpsid	i
}
 800c784:	bf00      	nop
  
  switch(state)
 800c786:	78fb      	ldrb	r3, [r7, #3]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d008      	beq.n	800c79e <UTIL_LPM_SetOffMode+0x32>
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d10e      	bne.n	800c7ae <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c790:	4b0d      	ldr	r3, [pc, #52]	; (800c7c8 <UTIL_LPM_SetOffMode+0x5c>)
 800c792:	681a      	ldr	r2, [r3, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	4313      	orrs	r3, r2
 800c798:	4a0b      	ldr	r2, [pc, #44]	; (800c7c8 <UTIL_LPM_SetOffMode+0x5c>)
 800c79a:	6013      	str	r3, [r2, #0]
      break;
 800c79c:	e008      	b.n	800c7b0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	43da      	mvns	r2, r3
 800c7a2:	4b09      	ldr	r3, [pc, #36]	; (800c7c8 <UTIL_LPM_SetOffMode+0x5c>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	4a07      	ldr	r2, [pc, #28]	; (800c7c8 <UTIL_LPM_SetOffMode+0x5c>)
 800c7aa:	6013      	str	r3, [r2, #0]
      break;
 800c7ac:	e000      	b.n	800c7b0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c7ae:	bf00      	nop
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f383 8810 	msr	PRIMASK, r3
}
 800c7ba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c7bc:	bf00      	nop
 800c7be:	371c      	adds	r7, #28
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr
 800c7c8:	20001550 	.word	0x20001550

0800c7cc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b090      	sub	sp, #64	; 0x40
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c7d4:	4b73      	ldr	r3, [pc, #460]	; (800c9a4 <UTIL_SEQ_Run+0x1d8>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c7da:	4b72      	ldr	r3, [pc, #456]	; (800c9a4 <UTIL_SEQ_Run+0x1d8>)
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4013      	ands	r3, r2
 800c7e2:	4a70      	ldr	r2, [pc, #448]	; (800c9a4 <UTIL_SEQ_Run+0x1d8>)
 800c7e4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c7e6:	4b70      	ldr	r3, [pc, #448]	; (800c9a8 <UTIL_SEQ_Run+0x1dc>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c7ec:	4b6f      	ldr	r3, [pc, #444]	; (800c9ac <UTIL_SEQ_Run+0x1e0>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c7f2:	4b6f      	ldr	r3, [pc, #444]	; (800c9b0 <UTIL_SEQ_Run+0x1e4>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c7f8:	4b6e      	ldr	r3, [pc, #440]	; (800c9b4 <UTIL_SEQ_Run+0x1e8>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c7fe:	e08d      	b.n	800c91c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c800:	2300      	movs	r3, #0
 800c802:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c804:	e002      	b.n	800c80c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c808:	3301      	adds	r3, #1
 800c80a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c80c:	4a6a      	ldr	r2, [pc, #424]	; (800c9b8 <UTIL_SEQ_Run+0x1ec>)
 800c80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c810:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c816:	401a      	ands	r2, r3
 800c818:	4b62      	ldr	r3, [pc, #392]	; (800c9a4 <UTIL_SEQ_Run+0x1d8>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4013      	ands	r3, r2
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d0f1      	beq.n	800c806 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c822:	4a65      	ldr	r2, [pc, #404]	; (800c9b8 <UTIL_SEQ_Run+0x1ec>)
 800c824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c826:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82c:	401a      	ands	r2, r3
 800c82e:	4b5d      	ldr	r3, [pc, #372]	; (800c9a4 <UTIL_SEQ_Run+0x1d8>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4013      	ands	r3, r2
 800c834:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c836:	4a60      	ldr	r2, [pc, #384]	; (800c9b8 <UTIL_SEQ_Run+0x1ec>)
 800c838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c83a:	00db      	lsls	r3, r3, #3
 800c83c:	4413      	add	r3, r2
 800c83e:	685a      	ldr	r2, [r3, #4]
 800c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c842:	4013      	ands	r3, r2
 800c844:	2b00      	cmp	r3, #0
 800c846:	d106      	bne.n	800c856 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c848:	4a5b      	ldr	r2, [pc, #364]	; (800c9b8 <UTIL_SEQ_Run+0x1ec>)
 800c84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c84c:	00db      	lsls	r3, r3, #3
 800c84e:	4413      	add	r3, r2
 800c850:	f04f 32ff 	mov.w	r2, #4294967295
 800c854:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c856:	4a58      	ldr	r2, [pc, #352]	; (800c9b8 <UTIL_SEQ_Run+0x1ec>)
 800c858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c85a:	00db      	lsls	r3, r3, #3
 800c85c:	4413      	add	r3, r2
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	4013      	ands	r3, r2
 800c864:	4618      	mov	r0, r3
 800c866:	f000 f9b3 	bl	800cbd0 <SEQ_BitPosition>
 800c86a:	4603      	mov	r3, r0
 800c86c:	461a      	mov	r2, r3
 800c86e:	4b53      	ldr	r3, [pc, #332]	; (800c9bc <UTIL_SEQ_Run+0x1f0>)
 800c870:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c872:	4a51      	ldr	r2, [pc, #324]	; (800c9b8 <UTIL_SEQ_Run+0x1ec>)
 800c874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c876:	00db      	lsls	r3, r3, #3
 800c878:	4413      	add	r3, r2
 800c87a:	685a      	ldr	r2, [r3, #4]
 800c87c:	4b4f      	ldr	r3, [pc, #316]	; (800c9bc <UTIL_SEQ_Run+0x1f0>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2101      	movs	r1, #1
 800c882:	fa01 f303 	lsl.w	r3, r1, r3
 800c886:	43db      	mvns	r3, r3
 800c888:	401a      	ands	r2, r3
 800c88a:	494b      	ldr	r1, [pc, #300]	; (800c9b8 <UTIL_SEQ_Run+0x1ec>)
 800c88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c88e:	00db      	lsls	r3, r3, #3
 800c890:	440b      	add	r3, r1
 800c892:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c894:	f3ef 8310 	mrs	r3, PRIMASK
 800c898:	61bb      	str	r3, [r7, #24]
  return(result);
 800c89a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c89c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c89e:	b672      	cpsid	i
}
 800c8a0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c8a2:	4b46      	ldr	r3, [pc, #280]	; (800c9bc <UTIL_SEQ_Run+0x1f0>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ac:	43da      	mvns	r2, r3
 800c8ae:	4b3e      	ldr	r3, [pc, #248]	; (800c9a8 <UTIL_SEQ_Run+0x1dc>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	4a3c      	ldr	r2, [pc, #240]	; (800c9a8 <UTIL_SEQ_Run+0x1dc>)
 800c8b6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8bc:	e013      	b.n	800c8e6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c8be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	4a3d      	ldr	r2, [pc, #244]	; (800c9b8 <UTIL_SEQ_Run+0x1ec>)
 800c8c4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c8c8:	4b3c      	ldr	r3, [pc, #240]	; (800c9bc <UTIL_SEQ_Run+0x1f0>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c8d2:	43da      	mvns	r2, r3
 800c8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	400a      	ands	r2, r1
 800c8da:	4937      	ldr	r1, [pc, #220]	; (800c9b8 <UTIL_SEQ_Run+0x1ec>)
 800c8dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c8e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1e8      	bne.n	800c8be <UTIL_SEQ_Run+0xf2>
 800c8ec:	6a3b      	ldr	r3, [r7, #32]
 800c8ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	f383 8810 	msr	PRIMASK, r3
}
 800c8f6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c8f8:	4b30      	ldr	r3, [pc, #192]	; (800c9bc <UTIL_SEQ_Run+0x1f0>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a30      	ldr	r2, [pc, #192]	; (800c9c0 <UTIL_SEQ_Run+0x1f4>)
 800c8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c902:	4798      	blx	r3

    local_taskset = TaskSet;
 800c904:	4b28      	ldr	r3, [pc, #160]	; (800c9a8 <UTIL_SEQ_Run+0x1dc>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c90a:	4b28      	ldr	r3, [pc, #160]	; (800c9ac <UTIL_SEQ_Run+0x1e0>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c910:	4b27      	ldr	r3, [pc, #156]	; (800c9b0 <UTIL_SEQ_Run+0x1e4>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c916:	4b27      	ldr	r3, [pc, #156]	; (800c9b4 <UTIL_SEQ_Run+0x1e8>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c91c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c920:	401a      	ands	r2, r3
 800c922:	4b20      	ldr	r3, [pc, #128]	; (800c9a4 <UTIL_SEQ_Run+0x1d8>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4013      	ands	r3, r2
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d005      	beq.n	800c938 <UTIL_SEQ_Run+0x16c>
 800c92c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c930:	4013      	ands	r3, r2
 800c932:	2b00      	cmp	r3, #0
 800c934:	f43f af64 	beq.w	800c800 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c938:	4b20      	ldr	r3, [pc, #128]	; (800c9bc <UTIL_SEQ_Run+0x1f0>)
 800c93a:	f04f 32ff 	mov.w	r2, #4294967295
 800c93e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c940:	f000 f938 	bl	800cbb4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c944:	f3ef 8310 	mrs	r3, PRIMASK
 800c948:	613b      	str	r3, [r7, #16]
  return(result);
 800c94a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c94c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c94e:	b672      	cpsid	i
}
 800c950:	bf00      	nop
  local_taskset = TaskSet;
 800c952:	4b15      	ldr	r3, [pc, #84]	; (800c9a8 <UTIL_SEQ_Run+0x1dc>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c958:	4b14      	ldr	r3, [pc, #80]	; (800c9ac <UTIL_SEQ_Run+0x1e0>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c95e:	4b14      	ldr	r3, [pc, #80]	; (800c9b0 <UTIL_SEQ_Run+0x1e4>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	401a      	ands	r2, r3
 800c96a:	4b0e      	ldr	r3, [pc, #56]	; (800c9a4 <UTIL_SEQ_Run+0x1d8>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4013      	ands	r3, r2
 800c970:	2b00      	cmp	r3, #0
 800c972:	d107      	bne.n	800c984 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c974:	4b0f      	ldr	r3, [pc, #60]	; (800c9b4 <UTIL_SEQ_Run+0x1e8>)
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c97a:	4013      	ands	r3, r2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d101      	bne.n	800c984 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c980:	f7f4 fe77 	bl	8001672 <UTIL_SEQ_Idle>
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f383 8810 	msr	PRIMASK, r3
}
 800c98e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c990:	f000 f917 	bl	800cbc2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c994:	4a03      	ldr	r2, [pc, #12]	; (800c9a4 <UTIL_SEQ_Run+0x1d8>)
 800c996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c998:	6013      	str	r3, [r2, #0]

  return;
 800c99a:	bf00      	nop
}
 800c99c:	3740      	adds	r7, #64	; 0x40
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	20000030 	.word	0x20000030
 800c9a8:	20001554 	.word	0x20001554
 800c9ac:	20001558 	.word	0x20001558
 800c9b0:	2000002c 	.word	0x2000002c
 800c9b4:	2000155c 	.word	0x2000155c
 800c9b8:	200015e4 	.word	0x200015e4
 800c9bc:	20001560 	.word	0x20001560
 800c9c0:	20001564 	.word	0x20001564

0800c9c4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b088      	sub	sp, #32
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9d0:	f3ef 8310 	mrs	r3, PRIMASK
 800c9d4:	617b      	str	r3, [r7, #20]
  return(result);
 800c9d6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c9d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9da:	b672      	cpsid	i
}
 800c9dc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 f8f6 	bl	800cbd0 <SEQ_BitPosition>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	4a06      	ldr	r2, [pc, #24]	; (800ca04 <UTIL_SEQ_RegTask+0x40>)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	f383 8810 	msr	PRIMASK, r3
}
 800c9fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c9fc:	bf00      	nop
}
 800c9fe:	3720      	adds	r7, #32
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	20001564 	.word	0x20001564

0800ca08 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b087      	sub	sp, #28
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca12:	f3ef 8310 	mrs	r3, PRIMASK
 800ca16:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca18:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ca1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca1c:	b672      	cpsid	i
}
 800ca1e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ca20:	4b0d      	ldr	r3, [pc, #52]	; (800ca58 <UTIL_SEQ_SetTask+0x50>)
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	4a0b      	ldr	r2, [pc, #44]	; (800ca58 <UTIL_SEQ_SetTask+0x50>)
 800ca2a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ca2c:	4a0b      	ldr	r2, [pc, #44]	; (800ca5c <UTIL_SEQ_SetTask+0x54>)
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	431a      	orrs	r2, r3
 800ca38:	4908      	ldr	r1, [pc, #32]	; (800ca5c <UTIL_SEQ_SetTask+0x54>)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	f383 8810 	msr	PRIMASK, r3
}
 800ca4a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ca4c:	bf00      	nop
}
 800ca4e:	371c      	adds	r7, #28
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr
 800ca58:	20001554 	.word	0x20001554
 800ca5c:	200015e4 	.word	0x200015e4

0800ca60 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ca60:	b480      	push	{r7}
 800ca62:	b087      	sub	sp, #28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca68:	f3ef 8310 	mrs	r3, PRIMASK
 800ca6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ca70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca72:	b672      	cpsid	i
}
 800ca74:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	43da      	mvns	r2, r3
 800ca7a:	4b08      	ldr	r3, [pc, #32]	; (800ca9c <UTIL_SEQ_PauseTask+0x3c>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4013      	ands	r3, r2
 800ca80:	4a06      	ldr	r2, [pc, #24]	; (800ca9c <UTIL_SEQ_PauseTask+0x3c>)
 800ca82:	6013      	str	r3, [r2, #0]
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	f383 8810 	msr	PRIMASK, r3
}
 800ca8e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ca90:	bf00      	nop
}
 800ca92:	371c      	adds	r7, #28
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	2000002c 	.word	0x2000002c

0800caa0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800caa0:	b480      	push	{r7}
 800caa2:	b087      	sub	sp, #28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800caa8:	f3ef 8310 	mrs	r3, PRIMASK
 800caac:	60fb      	str	r3, [r7, #12]
  return(result);
 800caae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cab0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cab2:	b672      	cpsid	i
}
 800cab4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800cab6:	4b09      	ldr	r3, [pc, #36]	; (800cadc <UTIL_SEQ_ResumeTask+0x3c>)
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4313      	orrs	r3, r2
 800cabe:	4a07      	ldr	r2, [pc, #28]	; (800cadc <UTIL_SEQ_ResumeTask+0x3c>)
 800cac0:	6013      	str	r3, [r2, #0]
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	f383 8810 	msr	PRIMASK, r3
}
 800cacc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cace:	bf00      	nop
}
 800cad0:	371c      	adds	r7, #28
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	2000002c 	.word	0x2000002c

0800cae0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800cae0:	b480      	push	{r7}
 800cae2:	b087      	sub	sp, #28
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cae8:	f3ef 8310 	mrs	r3, PRIMASK
 800caec:	60fb      	str	r3, [r7, #12]
  return(result);
 800caee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800caf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800caf2:	b672      	cpsid	i
}
 800caf4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800caf6:	4b09      	ldr	r3, [pc, #36]	; (800cb1c <UTIL_SEQ_SetEvt+0x3c>)
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	4a07      	ldr	r2, [pc, #28]	; (800cb1c <UTIL_SEQ_SetEvt+0x3c>)
 800cb00:	6013      	str	r3, [r2, #0]
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	f383 8810 	msr	PRIMASK, r3
}
 800cb0c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cb0e:	bf00      	nop
}
 800cb10:	371c      	adds	r7, #28
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	20001558 	.word	0x20001558

0800cb20 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b088      	sub	sp, #32
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800cb28:	4b1f      	ldr	r3, [pc, #124]	; (800cba8 <UTIL_SEQ_WaitEvt+0x88>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800cb2e:	4b1e      	ldr	r3, [pc, #120]	; (800cba8 <UTIL_SEQ_WaitEvt+0x88>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb36:	d102      	bne.n	800cb3e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	61fb      	str	r3, [r7, #28]
 800cb3c:	e005      	b.n	800cb4a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800cb3e:	4b1a      	ldr	r3, [pc, #104]	; (800cba8 <UTIL_SEQ_WaitEvt+0x88>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2201      	movs	r2, #1
 800cb44:	fa02 f303 	lsl.w	r3, r2, r3
 800cb48:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800cb4a:	4b18      	ldr	r3, [pc, #96]	; (800cbac <UTIL_SEQ_WaitEvt+0x8c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800cb50:	4a16      	ldr	r2, [pc, #88]	; (800cbac <UTIL_SEQ_WaitEvt+0x8c>)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800cb56:	e003      	b.n	800cb60 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	69f8      	ldr	r0, [r7, #28]
 800cb5c:	f7f4 fd90 	bl	8001680 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800cb60:	4b13      	ldr	r3, [pc, #76]	; (800cbb0 <UTIL_SEQ_WaitEvt+0x90>)
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4013      	ands	r3, r2
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d0f5      	beq.n	800cb58 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800cb6c:	4a0e      	ldr	r2, [pc, #56]	; (800cba8 <UTIL_SEQ_WaitEvt+0x88>)
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb72:	f3ef 8310 	mrs	r3, PRIMASK
 800cb76:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb78:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cb7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb7c:	b672      	cpsid	i
}
 800cb7e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	43da      	mvns	r2, r3
 800cb84:	4b0a      	ldr	r3, [pc, #40]	; (800cbb0 <UTIL_SEQ_WaitEvt+0x90>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4013      	ands	r3, r2
 800cb8a:	4a09      	ldr	r2, [pc, #36]	; (800cbb0 <UTIL_SEQ_WaitEvt+0x90>)
 800cb8c:	6013      	str	r3, [r2, #0]
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f383 8810 	msr	PRIMASK, r3
}
 800cb98:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800cb9a:	4a04      	ldr	r2, [pc, #16]	; (800cbac <UTIL_SEQ_WaitEvt+0x8c>)
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	6013      	str	r3, [r2, #0]
  return;
 800cba0:	bf00      	nop
}
 800cba2:	3720      	adds	r7, #32
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	20001560 	.word	0x20001560
 800cbac:	2000155c 	.word	0x2000155c
 800cbb0:	20001558 	.word	0x20001558

0800cbb4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cbb8:	bf00      	nop
}
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr

0800cbc2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800cbc2:	b480      	push	{r7}
 800cbc4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cbc6:	bf00      	nop
}
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	0c1b      	lsrs	r3, r3, #16
 800cbe4:	041b      	lsls	r3, r3, #16
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d104      	bne.n	800cbf4 <SEQ_BitPosition+0x24>
 800cbea:	2310      	movs	r3, #16
 800cbec:	73fb      	strb	r3, [r7, #15]
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	041b      	lsls	r3, r3, #16
 800cbf2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d105      	bne.n	800cc0a <SEQ_BitPosition+0x3a>
 800cbfe:	7bfb      	ldrb	r3, [r7, #15]
 800cc00:	3308      	adds	r3, #8
 800cc02:	73fb      	strb	r3, [r7, #15]
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	021b      	lsls	r3, r3, #8
 800cc08:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d105      	bne.n	800cc20 <SEQ_BitPosition+0x50>
 800cc14:	7bfb      	ldrb	r3, [r7, #15]
 800cc16:	3304      	adds	r3, #4
 800cc18:	73fb      	strb	r3, [r7, #15]
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	011b      	lsls	r3, r3, #4
 800cc1e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	0f1b      	lsrs	r3, r3, #28
 800cc24:	4a07      	ldr	r2, [pc, #28]	; (800cc44 <SEQ_BitPosition+0x74>)
 800cc26:	5cd2      	ldrb	r2, [r2, r3]
 800cc28:	7bfb      	ldrb	r3, [r7, #15]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800cc2e:	7bfb      	ldrb	r3, [r7, #15]
 800cc30:	f1c3 031f 	rsb	r3, r3, #31
 800cc34:	b2db      	uxtb	r3, r3
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3714      	adds	r7, #20
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	0800f094 	.word	0x0800f094

0800cc48 <std>:
 800cc48:	2300      	movs	r3, #0
 800cc4a:	b510      	push	{r4, lr}
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	e9c0 3300 	strd	r3, r3, [r0]
 800cc52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc56:	6083      	str	r3, [r0, #8]
 800cc58:	8181      	strh	r1, [r0, #12]
 800cc5a:	6643      	str	r3, [r0, #100]	; 0x64
 800cc5c:	81c2      	strh	r2, [r0, #14]
 800cc5e:	6183      	str	r3, [r0, #24]
 800cc60:	4619      	mov	r1, r3
 800cc62:	2208      	movs	r2, #8
 800cc64:	305c      	adds	r0, #92	; 0x5c
 800cc66:	f000 f9ff 	bl	800d068 <memset>
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	; (800cca0 <std+0x58>)
 800cc6c:	6263      	str	r3, [r4, #36]	; 0x24
 800cc6e:	4b0d      	ldr	r3, [pc, #52]	; (800cca4 <std+0x5c>)
 800cc70:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc72:	4b0d      	ldr	r3, [pc, #52]	; (800cca8 <std+0x60>)
 800cc74:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc76:	4b0d      	ldr	r3, [pc, #52]	; (800ccac <std+0x64>)
 800cc78:	6323      	str	r3, [r4, #48]	; 0x30
 800cc7a:	4b0d      	ldr	r3, [pc, #52]	; (800ccb0 <std+0x68>)
 800cc7c:	6224      	str	r4, [r4, #32]
 800cc7e:	429c      	cmp	r4, r3
 800cc80:	d006      	beq.n	800cc90 <std+0x48>
 800cc82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cc86:	4294      	cmp	r4, r2
 800cc88:	d002      	beq.n	800cc90 <std+0x48>
 800cc8a:	33d0      	adds	r3, #208	; 0xd0
 800cc8c:	429c      	cmp	r4, r3
 800cc8e:	d105      	bne.n	800cc9c <std+0x54>
 800cc90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc98:	f000 ba70 	b.w	800d17c <__retarget_lock_init_recursive>
 800cc9c:	bd10      	pop	{r4, pc}
 800cc9e:	bf00      	nop
 800cca0:	0800ceb9 	.word	0x0800ceb9
 800cca4:	0800cedb 	.word	0x0800cedb
 800cca8:	0800cf13 	.word	0x0800cf13
 800ccac:	0800cf37 	.word	0x0800cf37
 800ccb0:	200015f4 	.word	0x200015f4

0800ccb4 <stdio_exit_handler>:
 800ccb4:	4a02      	ldr	r2, [pc, #8]	; (800ccc0 <stdio_exit_handler+0xc>)
 800ccb6:	4903      	ldr	r1, [pc, #12]	; (800ccc4 <stdio_exit_handler+0x10>)
 800ccb8:	4803      	ldr	r0, [pc, #12]	; (800ccc8 <stdio_exit_handler+0x14>)
 800ccba:	f000 b869 	b.w	800cd90 <_fwalk_sglue>
 800ccbe:	bf00      	nop
 800ccc0:	20000034 	.word	0x20000034
 800ccc4:	0800da45 	.word	0x0800da45
 800ccc8:	20000040 	.word	0x20000040

0800cccc <cleanup_stdio>:
 800cccc:	6841      	ldr	r1, [r0, #4]
 800ccce:	4b0c      	ldr	r3, [pc, #48]	; (800cd00 <cleanup_stdio+0x34>)
 800ccd0:	4299      	cmp	r1, r3
 800ccd2:	b510      	push	{r4, lr}
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	d001      	beq.n	800ccdc <cleanup_stdio+0x10>
 800ccd8:	f000 feb4 	bl	800da44 <_fflush_r>
 800ccdc:	68a1      	ldr	r1, [r4, #8]
 800ccde:	4b09      	ldr	r3, [pc, #36]	; (800cd04 <cleanup_stdio+0x38>)
 800cce0:	4299      	cmp	r1, r3
 800cce2:	d002      	beq.n	800ccea <cleanup_stdio+0x1e>
 800cce4:	4620      	mov	r0, r4
 800cce6:	f000 fead 	bl	800da44 <_fflush_r>
 800ccea:	68e1      	ldr	r1, [r4, #12]
 800ccec:	4b06      	ldr	r3, [pc, #24]	; (800cd08 <cleanup_stdio+0x3c>)
 800ccee:	4299      	cmp	r1, r3
 800ccf0:	d004      	beq.n	800ccfc <cleanup_stdio+0x30>
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccf8:	f000 bea4 	b.w	800da44 <_fflush_r>
 800ccfc:	bd10      	pop	{r4, pc}
 800ccfe:	bf00      	nop
 800cd00:	200015f4 	.word	0x200015f4
 800cd04:	2000165c 	.word	0x2000165c
 800cd08:	200016c4 	.word	0x200016c4

0800cd0c <global_stdio_init.part.0>:
 800cd0c:	b510      	push	{r4, lr}
 800cd0e:	4b0b      	ldr	r3, [pc, #44]	; (800cd3c <global_stdio_init.part.0+0x30>)
 800cd10:	4c0b      	ldr	r4, [pc, #44]	; (800cd40 <global_stdio_init.part.0+0x34>)
 800cd12:	4a0c      	ldr	r2, [pc, #48]	; (800cd44 <global_stdio_init.part.0+0x38>)
 800cd14:	601a      	str	r2, [r3, #0]
 800cd16:	4620      	mov	r0, r4
 800cd18:	2200      	movs	r2, #0
 800cd1a:	2104      	movs	r1, #4
 800cd1c:	f7ff ff94 	bl	800cc48 <std>
 800cd20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cd24:	2201      	movs	r2, #1
 800cd26:	2109      	movs	r1, #9
 800cd28:	f7ff ff8e 	bl	800cc48 <std>
 800cd2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cd30:	2202      	movs	r2, #2
 800cd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd36:	2112      	movs	r1, #18
 800cd38:	f7ff bf86 	b.w	800cc48 <std>
 800cd3c:	2000172c 	.word	0x2000172c
 800cd40:	200015f4 	.word	0x200015f4
 800cd44:	0800ccb5 	.word	0x0800ccb5

0800cd48 <__sfp_lock_acquire>:
 800cd48:	4801      	ldr	r0, [pc, #4]	; (800cd50 <__sfp_lock_acquire+0x8>)
 800cd4a:	f000 ba18 	b.w	800d17e <__retarget_lock_acquire_recursive>
 800cd4e:	bf00      	nop
 800cd50:	20001735 	.word	0x20001735

0800cd54 <__sfp_lock_release>:
 800cd54:	4801      	ldr	r0, [pc, #4]	; (800cd5c <__sfp_lock_release+0x8>)
 800cd56:	f000 ba13 	b.w	800d180 <__retarget_lock_release_recursive>
 800cd5a:	bf00      	nop
 800cd5c:	20001735 	.word	0x20001735

0800cd60 <__sinit>:
 800cd60:	b510      	push	{r4, lr}
 800cd62:	4604      	mov	r4, r0
 800cd64:	f7ff fff0 	bl	800cd48 <__sfp_lock_acquire>
 800cd68:	6a23      	ldr	r3, [r4, #32]
 800cd6a:	b11b      	cbz	r3, 800cd74 <__sinit+0x14>
 800cd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd70:	f7ff bff0 	b.w	800cd54 <__sfp_lock_release>
 800cd74:	4b04      	ldr	r3, [pc, #16]	; (800cd88 <__sinit+0x28>)
 800cd76:	6223      	str	r3, [r4, #32]
 800cd78:	4b04      	ldr	r3, [pc, #16]	; (800cd8c <__sinit+0x2c>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d1f5      	bne.n	800cd6c <__sinit+0xc>
 800cd80:	f7ff ffc4 	bl	800cd0c <global_stdio_init.part.0>
 800cd84:	e7f2      	b.n	800cd6c <__sinit+0xc>
 800cd86:	bf00      	nop
 800cd88:	0800cccd 	.word	0x0800cccd
 800cd8c:	2000172c 	.word	0x2000172c

0800cd90 <_fwalk_sglue>:
 800cd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd94:	4607      	mov	r7, r0
 800cd96:	4688      	mov	r8, r1
 800cd98:	4614      	mov	r4, r2
 800cd9a:	2600      	movs	r6, #0
 800cd9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cda0:	f1b9 0901 	subs.w	r9, r9, #1
 800cda4:	d505      	bpl.n	800cdb2 <_fwalk_sglue+0x22>
 800cda6:	6824      	ldr	r4, [r4, #0]
 800cda8:	2c00      	cmp	r4, #0
 800cdaa:	d1f7      	bne.n	800cd9c <_fwalk_sglue+0xc>
 800cdac:	4630      	mov	r0, r6
 800cdae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdb2:	89ab      	ldrh	r3, [r5, #12]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d907      	bls.n	800cdc8 <_fwalk_sglue+0x38>
 800cdb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	d003      	beq.n	800cdc8 <_fwalk_sglue+0x38>
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	47c0      	blx	r8
 800cdc6:	4306      	orrs	r6, r0
 800cdc8:	3568      	adds	r5, #104	; 0x68
 800cdca:	e7e9      	b.n	800cda0 <_fwalk_sglue+0x10>

0800cdcc <iprintf>:
 800cdcc:	b40f      	push	{r0, r1, r2, r3}
 800cdce:	b507      	push	{r0, r1, r2, lr}
 800cdd0:	4906      	ldr	r1, [pc, #24]	; (800cdec <iprintf+0x20>)
 800cdd2:	ab04      	add	r3, sp, #16
 800cdd4:	6808      	ldr	r0, [r1, #0]
 800cdd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdda:	6881      	ldr	r1, [r0, #8]
 800cddc:	9301      	str	r3, [sp, #4]
 800cdde:	f000 fb01 	bl	800d3e4 <_vfiprintf_r>
 800cde2:	b003      	add	sp, #12
 800cde4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cde8:	b004      	add	sp, #16
 800cdea:	4770      	bx	lr
 800cdec:	2000008c 	.word	0x2000008c

0800cdf0 <putchar>:
 800cdf0:	4b02      	ldr	r3, [pc, #8]	; (800cdfc <putchar+0xc>)
 800cdf2:	4601      	mov	r1, r0
 800cdf4:	6818      	ldr	r0, [r3, #0]
 800cdf6:	6882      	ldr	r2, [r0, #8]
 800cdf8:	f000 beae 	b.w	800db58 <_putc_r>
 800cdfc:	2000008c 	.word	0x2000008c

0800ce00 <_puts_r>:
 800ce00:	6a03      	ldr	r3, [r0, #32]
 800ce02:	b570      	push	{r4, r5, r6, lr}
 800ce04:	6884      	ldr	r4, [r0, #8]
 800ce06:	4605      	mov	r5, r0
 800ce08:	460e      	mov	r6, r1
 800ce0a:	b90b      	cbnz	r3, 800ce10 <_puts_r+0x10>
 800ce0c:	f7ff ffa8 	bl	800cd60 <__sinit>
 800ce10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce12:	07db      	lsls	r3, r3, #31
 800ce14:	d405      	bmi.n	800ce22 <_puts_r+0x22>
 800ce16:	89a3      	ldrh	r3, [r4, #12]
 800ce18:	0598      	lsls	r0, r3, #22
 800ce1a:	d402      	bmi.n	800ce22 <_puts_r+0x22>
 800ce1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce1e:	f000 f9ae 	bl	800d17e <__retarget_lock_acquire_recursive>
 800ce22:	89a3      	ldrh	r3, [r4, #12]
 800ce24:	0719      	lsls	r1, r3, #28
 800ce26:	d513      	bpl.n	800ce50 <_puts_r+0x50>
 800ce28:	6923      	ldr	r3, [r4, #16]
 800ce2a:	b18b      	cbz	r3, 800ce50 <_puts_r+0x50>
 800ce2c:	3e01      	subs	r6, #1
 800ce2e:	68a3      	ldr	r3, [r4, #8]
 800ce30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ce34:	3b01      	subs	r3, #1
 800ce36:	60a3      	str	r3, [r4, #8]
 800ce38:	b9e9      	cbnz	r1, 800ce76 <_puts_r+0x76>
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	da2e      	bge.n	800ce9c <_puts_r+0x9c>
 800ce3e:	4622      	mov	r2, r4
 800ce40:	210a      	movs	r1, #10
 800ce42:	4628      	mov	r0, r5
 800ce44:	f000 f87b 	bl	800cf3e <__swbuf_r>
 800ce48:	3001      	adds	r0, #1
 800ce4a:	d007      	beq.n	800ce5c <_puts_r+0x5c>
 800ce4c:	250a      	movs	r5, #10
 800ce4e:	e007      	b.n	800ce60 <_puts_r+0x60>
 800ce50:	4621      	mov	r1, r4
 800ce52:	4628      	mov	r0, r5
 800ce54:	f000 f8b0 	bl	800cfb8 <__swsetup_r>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d0e7      	beq.n	800ce2c <_puts_r+0x2c>
 800ce5c:	f04f 35ff 	mov.w	r5, #4294967295
 800ce60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce62:	07da      	lsls	r2, r3, #31
 800ce64:	d405      	bmi.n	800ce72 <_puts_r+0x72>
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	059b      	lsls	r3, r3, #22
 800ce6a:	d402      	bmi.n	800ce72 <_puts_r+0x72>
 800ce6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce6e:	f000 f987 	bl	800d180 <__retarget_lock_release_recursive>
 800ce72:	4628      	mov	r0, r5
 800ce74:	bd70      	pop	{r4, r5, r6, pc}
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	da04      	bge.n	800ce84 <_puts_r+0x84>
 800ce7a:	69a2      	ldr	r2, [r4, #24]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	dc06      	bgt.n	800ce8e <_puts_r+0x8e>
 800ce80:	290a      	cmp	r1, #10
 800ce82:	d004      	beq.n	800ce8e <_puts_r+0x8e>
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	1c5a      	adds	r2, r3, #1
 800ce88:	6022      	str	r2, [r4, #0]
 800ce8a:	7019      	strb	r1, [r3, #0]
 800ce8c:	e7cf      	b.n	800ce2e <_puts_r+0x2e>
 800ce8e:	4622      	mov	r2, r4
 800ce90:	4628      	mov	r0, r5
 800ce92:	f000 f854 	bl	800cf3e <__swbuf_r>
 800ce96:	3001      	adds	r0, #1
 800ce98:	d1c9      	bne.n	800ce2e <_puts_r+0x2e>
 800ce9a:	e7df      	b.n	800ce5c <_puts_r+0x5c>
 800ce9c:	6823      	ldr	r3, [r4, #0]
 800ce9e:	250a      	movs	r5, #10
 800cea0:	1c5a      	adds	r2, r3, #1
 800cea2:	6022      	str	r2, [r4, #0]
 800cea4:	701d      	strb	r5, [r3, #0]
 800cea6:	e7db      	b.n	800ce60 <_puts_r+0x60>

0800cea8 <puts>:
 800cea8:	4b02      	ldr	r3, [pc, #8]	; (800ceb4 <puts+0xc>)
 800ceaa:	4601      	mov	r1, r0
 800ceac:	6818      	ldr	r0, [r3, #0]
 800ceae:	f7ff bfa7 	b.w	800ce00 <_puts_r>
 800ceb2:	bf00      	nop
 800ceb4:	2000008c 	.word	0x2000008c

0800ceb8 <__sread>:
 800ceb8:	b510      	push	{r4, lr}
 800ceba:	460c      	mov	r4, r1
 800cebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec0:	f000 f914 	bl	800d0ec <_read_r>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	bfab      	itete	ge
 800cec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ceca:	89a3      	ldrhlt	r3, [r4, #12]
 800cecc:	181b      	addge	r3, r3, r0
 800cece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ced2:	bfac      	ite	ge
 800ced4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ced6:	81a3      	strhlt	r3, [r4, #12]
 800ced8:	bd10      	pop	{r4, pc}

0800ceda <__swrite>:
 800ceda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cede:	461f      	mov	r7, r3
 800cee0:	898b      	ldrh	r3, [r1, #12]
 800cee2:	05db      	lsls	r3, r3, #23
 800cee4:	4605      	mov	r5, r0
 800cee6:	460c      	mov	r4, r1
 800cee8:	4616      	mov	r6, r2
 800ceea:	d505      	bpl.n	800cef8 <__swrite+0x1e>
 800ceec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cef0:	2302      	movs	r3, #2
 800cef2:	2200      	movs	r2, #0
 800cef4:	f000 f8e8 	bl	800d0c8 <_lseek_r>
 800cef8:	89a3      	ldrh	r3, [r4, #12]
 800cefa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cefe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf02:	81a3      	strh	r3, [r4, #12]
 800cf04:	4632      	mov	r2, r6
 800cf06:	463b      	mov	r3, r7
 800cf08:	4628      	mov	r0, r5
 800cf0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0e:	f000 b8ff 	b.w	800d110 <_write_r>

0800cf12 <__sseek>:
 800cf12:	b510      	push	{r4, lr}
 800cf14:	460c      	mov	r4, r1
 800cf16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf1a:	f000 f8d5 	bl	800d0c8 <_lseek_r>
 800cf1e:	1c43      	adds	r3, r0, #1
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	bf15      	itete	ne
 800cf24:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf2e:	81a3      	strheq	r3, [r4, #12]
 800cf30:	bf18      	it	ne
 800cf32:	81a3      	strhne	r3, [r4, #12]
 800cf34:	bd10      	pop	{r4, pc}

0800cf36 <__sclose>:
 800cf36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf3a:	f000 b8b5 	b.w	800d0a8 <_close_r>

0800cf3e <__swbuf_r>:
 800cf3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf40:	460e      	mov	r6, r1
 800cf42:	4614      	mov	r4, r2
 800cf44:	4605      	mov	r5, r0
 800cf46:	b118      	cbz	r0, 800cf50 <__swbuf_r+0x12>
 800cf48:	6a03      	ldr	r3, [r0, #32]
 800cf4a:	b90b      	cbnz	r3, 800cf50 <__swbuf_r+0x12>
 800cf4c:	f7ff ff08 	bl	800cd60 <__sinit>
 800cf50:	69a3      	ldr	r3, [r4, #24]
 800cf52:	60a3      	str	r3, [r4, #8]
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	071a      	lsls	r2, r3, #28
 800cf58:	d525      	bpl.n	800cfa6 <__swbuf_r+0x68>
 800cf5a:	6923      	ldr	r3, [r4, #16]
 800cf5c:	b31b      	cbz	r3, 800cfa6 <__swbuf_r+0x68>
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	6922      	ldr	r2, [r4, #16]
 800cf62:	1a98      	subs	r0, r3, r2
 800cf64:	6963      	ldr	r3, [r4, #20]
 800cf66:	b2f6      	uxtb	r6, r6
 800cf68:	4283      	cmp	r3, r0
 800cf6a:	4637      	mov	r7, r6
 800cf6c:	dc04      	bgt.n	800cf78 <__swbuf_r+0x3a>
 800cf6e:	4621      	mov	r1, r4
 800cf70:	4628      	mov	r0, r5
 800cf72:	f000 fd67 	bl	800da44 <_fflush_r>
 800cf76:	b9e0      	cbnz	r0, 800cfb2 <__swbuf_r+0x74>
 800cf78:	68a3      	ldr	r3, [r4, #8]
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	60a3      	str	r3, [r4, #8]
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	6022      	str	r2, [r4, #0]
 800cf84:	701e      	strb	r6, [r3, #0]
 800cf86:	6962      	ldr	r2, [r4, #20]
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d004      	beq.n	800cf98 <__swbuf_r+0x5a>
 800cf8e:	89a3      	ldrh	r3, [r4, #12]
 800cf90:	07db      	lsls	r3, r3, #31
 800cf92:	d506      	bpl.n	800cfa2 <__swbuf_r+0x64>
 800cf94:	2e0a      	cmp	r6, #10
 800cf96:	d104      	bne.n	800cfa2 <__swbuf_r+0x64>
 800cf98:	4621      	mov	r1, r4
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	f000 fd52 	bl	800da44 <_fflush_r>
 800cfa0:	b938      	cbnz	r0, 800cfb2 <__swbuf_r+0x74>
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfa6:	4621      	mov	r1, r4
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f000 f805 	bl	800cfb8 <__swsetup_r>
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d0d5      	beq.n	800cf5e <__swbuf_r+0x20>
 800cfb2:	f04f 37ff 	mov.w	r7, #4294967295
 800cfb6:	e7f4      	b.n	800cfa2 <__swbuf_r+0x64>

0800cfb8 <__swsetup_r>:
 800cfb8:	b538      	push	{r3, r4, r5, lr}
 800cfba:	4b2a      	ldr	r3, [pc, #168]	; (800d064 <__swsetup_r+0xac>)
 800cfbc:	4605      	mov	r5, r0
 800cfbe:	6818      	ldr	r0, [r3, #0]
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	b118      	cbz	r0, 800cfcc <__swsetup_r+0x14>
 800cfc4:	6a03      	ldr	r3, [r0, #32]
 800cfc6:	b90b      	cbnz	r3, 800cfcc <__swsetup_r+0x14>
 800cfc8:	f7ff feca 	bl	800cd60 <__sinit>
 800cfcc:	89a3      	ldrh	r3, [r4, #12]
 800cfce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfd2:	0718      	lsls	r0, r3, #28
 800cfd4:	d422      	bmi.n	800d01c <__swsetup_r+0x64>
 800cfd6:	06d9      	lsls	r1, r3, #27
 800cfd8:	d407      	bmi.n	800cfea <__swsetup_r+0x32>
 800cfda:	2309      	movs	r3, #9
 800cfdc:	602b      	str	r3, [r5, #0]
 800cfde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfe2:	81a3      	strh	r3, [r4, #12]
 800cfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe8:	e034      	b.n	800d054 <__swsetup_r+0x9c>
 800cfea:	0758      	lsls	r0, r3, #29
 800cfec:	d512      	bpl.n	800d014 <__swsetup_r+0x5c>
 800cfee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cff0:	b141      	cbz	r1, 800d004 <__swsetup_r+0x4c>
 800cff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cff6:	4299      	cmp	r1, r3
 800cff8:	d002      	beq.n	800d000 <__swsetup_r+0x48>
 800cffa:	4628      	mov	r0, r5
 800cffc:	f000 f8d0 	bl	800d1a0 <_free_r>
 800d000:	2300      	movs	r3, #0
 800d002:	6363      	str	r3, [r4, #52]	; 0x34
 800d004:	89a3      	ldrh	r3, [r4, #12]
 800d006:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	2300      	movs	r3, #0
 800d00e:	6063      	str	r3, [r4, #4]
 800d010:	6923      	ldr	r3, [r4, #16]
 800d012:	6023      	str	r3, [r4, #0]
 800d014:	89a3      	ldrh	r3, [r4, #12]
 800d016:	f043 0308 	orr.w	r3, r3, #8
 800d01a:	81a3      	strh	r3, [r4, #12]
 800d01c:	6923      	ldr	r3, [r4, #16]
 800d01e:	b94b      	cbnz	r3, 800d034 <__swsetup_r+0x7c>
 800d020:	89a3      	ldrh	r3, [r4, #12]
 800d022:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d02a:	d003      	beq.n	800d034 <__swsetup_r+0x7c>
 800d02c:	4621      	mov	r1, r4
 800d02e:	4628      	mov	r0, r5
 800d030:	f000 fd56 	bl	800dae0 <__smakebuf_r>
 800d034:	89a0      	ldrh	r0, [r4, #12]
 800d036:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d03a:	f010 0301 	ands.w	r3, r0, #1
 800d03e:	d00a      	beq.n	800d056 <__swsetup_r+0x9e>
 800d040:	2300      	movs	r3, #0
 800d042:	60a3      	str	r3, [r4, #8]
 800d044:	6963      	ldr	r3, [r4, #20]
 800d046:	425b      	negs	r3, r3
 800d048:	61a3      	str	r3, [r4, #24]
 800d04a:	6923      	ldr	r3, [r4, #16]
 800d04c:	b943      	cbnz	r3, 800d060 <__swsetup_r+0xa8>
 800d04e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d052:	d1c4      	bne.n	800cfde <__swsetup_r+0x26>
 800d054:	bd38      	pop	{r3, r4, r5, pc}
 800d056:	0781      	lsls	r1, r0, #30
 800d058:	bf58      	it	pl
 800d05a:	6963      	ldrpl	r3, [r4, #20]
 800d05c:	60a3      	str	r3, [r4, #8]
 800d05e:	e7f4      	b.n	800d04a <__swsetup_r+0x92>
 800d060:	2000      	movs	r0, #0
 800d062:	e7f7      	b.n	800d054 <__swsetup_r+0x9c>
 800d064:	2000008c 	.word	0x2000008c

0800d068 <memset>:
 800d068:	4402      	add	r2, r0
 800d06a:	4603      	mov	r3, r0
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d100      	bne.n	800d072 <memset+0xa>
 800d070:	4770      	bx	lr
 800d072:	f803 1b01 	strb.w	r1, [r3], #1
 800d076:	e7f9      	b.n	800d06c <memset+0x4>

0800d078 <strrchr>:
 800d078:	b513      	push	{r0, r1, r4, lr}
 800d07a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800d07e:	4603      	mov	r3, r0
 800d080:	d110      	bne.n	800d0a4 <strrchr+0x2c>
 800d082:	b002      	add	sp, #8
 800d084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d088:	f000 bd9a 	b.w	800dbc0 <strchr>
 800d08c:	1c43      	adds	r3, r0, #1
 800d08e:	4604      	mov	r4, r0
 800d090:	4618      	mov	r0, r3
 800d092:	9101      	str	r1, [sp, #4]
 800d094:	f000 fd94 	bl	800dbc0 <strchr>
 800d098:	9901      	ldr	r1, [sp, #4]
 800d09a:	2800      	cmp	r0, #0
 800d09c:	d1f6      	bne.n	800d08c <strrchr+0x14>
 800d09e:	4620      	mov	r0, r4
 800d0a0:	b002      	add	sp, #8
 800d0a2:	bd10      	pop	{r4, pc}
 800d0a4:	2400      	movs	r4, #0
 800d0a6:	e7f3      	b.n	800d090 <strrchr+0x18>

0800d0a8 <_close_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	4d06      	ldr	r5, [pc, #24]	; (800d0c4 <_close_r+0x1c>)
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	4608      	mov	r0, r1
 800d0b2:	602b      	str	r3, [r5, #0]
 800d0b4:	f000 fdc4 	bl	800dc40 <_close>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	d102      	bne.n	800d0c2 <_close_r+0x1a>
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	b103      	cbz	r3, 800d0c2 <_close_r+0x1a>
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	20001730 	.word	0x20001730

0800d0c8 <_lseek_r>:
 800d0c8:	b538      	push	{r3, r4, r5, lr}
 800d0ca:	4d07      	ldr	r5, [pc, #28]	; (800d0e8 <_lseek_r+0x20>)
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	4608      	mov	r0, r1
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	602a      	str	r2, [r5, #0]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	f000 fdca 	bl	800dc70 <_lseek>
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	d102      	bne.n	800d0e6 <_lseek_r+0x1e>
 800d0e0:	682b      	ldr	r3, [r5, #0]
 800d0e2:	b103      	cbz	r3, 800d0e6 <_lseek_r+0x1e>
 800d0e4:	6023      	str	r3, [r4, #0]
 800d0e6:	bd38      	pop	{r3, r4, r5, pc}
 800d0e8:	20001730 	.word	0x20001730

0800d0ec <_read_r>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	4d07      	ldr	r5, [pc, #28]	; (800d10c <_read_r+0x20>)
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	4608      	mov	r0, r1
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	602a      	str	r2, [r5, #0]
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	f000 fdc0 	bl	800dc80 <_read>
 800d100:	1c43      	adds	r3, r0, #1
 800d102:	d102      	bne.n	800d10a <_read_r+0x1e>
 800d104:	682b      	ldr	r3, [r5, #0]
 800d106:	b103      	cbz	r3, 800d10a <_read_r+0x1e>
 800d108:	6023      	str	r3, [r4, #0]
 800d10a:	bd38      	pop	{r3, r4, r5, pc}
 800d10c:	20001730 	.word	0x20001730

0800d110 <_write_r>:
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	4d07      	ldr	r5, [pc, #28]	; (800d130 <_write_r+0x20>)
 800d114:	4604      	mov	r4, r0
 800d116:	4608      	mov	r0, r1
 800d118:	4611      	mov	r1, r2
 800d11a:	2200      	movs	r2, #0
 800d11c:	602a      	str	r2, [r5, #0]
 800d11e:	461a      	mov	r2, r3
 800d120:	f7fc fd1e 	bl	8009b60 <_write>
 800d124:	1c43      	adds	r3, r0, #1
 800d126:	d102      	bne.n	800d12e <_write_r+0x1e>
 800d128:	682b      	ldr	r3, [r5, #0]
 800d12a:	b103      	cbz	r3, 800d12e <_write_r+0x1e>
 800d12c:	6023      	str	r3, [r4, #0]
 800d12e:	bd38      	pop	{r3, r4, r5, pc}
 800d130:	20001730 	.word	0x20001730

0800d134 <__libc_init_array>:
 800d134:	b570      	push	{r4, r5, r6, lr}
 800d136:	4d0d      	ldr	r5, [pc, #52]	; (800d16c <__libc_init_array+0x38>)
 800d138:	4c0d      	ldr	r4, [pc, #52]	; (800d170 <__libc_init_array+0x3c>)
 800d13a:	1b64      	subs	r4, r4, r5
 800d13c:	10a4      	asrs	r4, r4, #2
 800d13e:	2600      	movs	r6, #0
 800d140:	42a6      	cmp	r6, r4
 800d142:	d109      	bne.n	800d158 <__libc_init_array+0x24>
 800d144:	4d0b      	ldr	r5, [pc, #44]	; (800d174 <__libc_init_array+0x40>)
 800d146:	4c0c      	ldr	r4, [pc, #48]	; (800d178 <__libc_init_array+0x44>)
 800d148:	f000 fdb0 	bl	800dcac <_init>
 800d14c:	1b64      	subs	r4, r4, r5
 800d14e:	10a4      	asrs	r4, r4, #2
 800d150:	2600      	movs	r6, #0
 800d152:	42a6      	cmp	r6, r4
 800d154:	d105      	bne.n	800d162 <__libc_init_array+0x2e>
 800d156:	bd70      	pop	{r4, r5, r6, pc}
 800d158:	f855 3b04 	ldr.w	r3, [r5], #4
 800d15c:	4798      	blx	r3
 800d15e:	3601      	adds	r6, #1
 800d160:	e7ee      	b.n	800d140 <__libc_init_array+0xc>
 800d162:	f855 3b04 	ldr.w	r3, [r5], #4
 800d166:	4798      	blx	r3
 800d168:	3601      	adds	r6, #1
 800d16a:	e7f2      	b.n	800d152 <__libc_init_array+0x1e>
 800d16c:	0800f0e0 	.word	0x0800f0e0
 800d170:	0800f0e0 	.word	0x0800f0e0
 800d174:	0800f0e0 	.word	0x0800f0e0
 800d178:	0800f0e4 	.word	0x0800f0e4

0800d17c <__retarget_lock_init_recursive>:
 800d17c:	4770      	bx	lr

0800d17e <__retarget_lock_acquire_recursive>:
 800d17e:	4770      	bx	lr

0800d180 <__retarget_lock_release_recursive>:
 800d180:	4770      	bx	lr

0800d182 <memcpy>:
 800d182:	440a      	add	r2, r1
 800d184:	4291      	cmp	r1, r2
 800d186:	f100 33ff 	add.w	r3, r0, #4294967295
 800d18a:	d100      	bne.n	800d18e <memcpy+0xc>
 800d18c:	4770      	bx	lr
 800d18e:	b510      	push	{r4, lr}
 800d190:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d194:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d198:	4291      	cmp	r1, r2
 800d19a:	d1f9      	bne.n	800d190 <memcpy+0xe>
 800d19c:	bd10      	pop	{r4, pc}
	...

0800d1a0 <_free_r>:
 800d1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1a2:	2900      	cmp	r1, #0
 800d1a4:	d044      	beq.n	800d230 <_free_r+0x90>
 800d1a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1aa:	9001      	str	r0, [sp, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f1a1 0404 	sub.w	r4, r1, #4
 800d1b2:	bfb8      	it	lt
 800d1b4:	18e4      	addlt	r4, r4, r3
 800d1b6:	f000 f8df 	bl	800d378 <__malloc_lock>
 800d1ba:	4a1e      	ldr	r2, [pc, #120]	; (800d234 <_free_r+0x94>)
 800d1bc:	9801      	ldr	r0, [sp, #4]
 800d1be:	6813      	ldr	r3, [r2, #0]
 800d1c0:	b933      	cbnz	r3, 800d1d0 <_free_r+0x30>
 800d1c2:	6063      	str	r3, [r4, #4]
 800d1c4:	6014      	str	r4, [r2, #0]
 800d1c6:	b003      	add	sp, #12
 800d1c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1cc:	f000 b8da 	b.w	800d384 <__malloc_unlock>
 800d1d0:	42a3      	cmp	r3, r4
 800d1d2:	d908      	bls.n	800d1e6 <_free_r+0x46>
 800d1d4:	6825      	ldr	r5, [r4, #0]
 800d1d6:	1961      	adds	r1, r4, r5
 800d1d8:	428b      	cmp	r3, r1
 800d1da:	bf01      	itttt	eq
 800d1dc:	6819      	ldreq	r1, [r3, #0]
 800d1de:	685b      	ldreq	r3, [r3, #4]
 800d1e0:	1949      	addeq	r1, r1, r5
 800d1e2:	6021      	streq	r1, [r4, #0]
 800d1e4:	e7ed      	b.n	800d1c2 <_free_r+0x22>
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	b10b      	cbz	r3, 800d1f0 <_free_r+0x50>
 800d1ec:	42a3      	cmp	r3, r4
 800d1ee:	d9fa      	bls.n	800d1e6 <_free_r+0x46>
 800d1f0:	6811      	ldr	r1, [r2, #0]
 800d1f2:	1855      	adds	r5, r2, r1
 800d1f4:	42a5      	cmp	r5, r4
 800d1f6:	d10b      	bne.n	800d210 <_free_r+0x70>
 800d1f8:	6824      	ldr	r4, [r4, #0]
 800d1fa:	4421      	add	r1, r4
 800d1fc:	1854      	adds	r4, r2, r1
 800d1fe:	42a3      	cmp	r3, r4
 800d200:	6011      	str	r1, [r2, #0]
 800d202:	d1e0      	bne.n	800d1c6 <_free_r+0x26>
 800d204:	681c      	ldr	r4, [r3, #0]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	6053      	str	r3, [r2, #4]
 800d20a:	440c      	add	r4, r1
 800d20c:	6014      	str	r4, [r2, #0]
 800d20e:	e7da      	b.n	800d1c6 <_free_r+0x26>
 800d210:	d902      	bls.n	800d218 <_free_r+0x78>
 800d212:	230c      	movs	r3, #12
 800d214:	6003      	str	r3, [r0, #0]
 800d216:	e7d6      	b.n	800d1c6 <_free_r+0x26>
 800d218:	6825      	ldr	r5, [r4, #0]
 800d21a:	1961      	adds	r1, r4, r5
 800d21c:	428b      	cmp	r3, r1
 800d21e:	bf04      	itt	eq
 800d220:	6819      	ldreq	r1, [r3, #0]
 800d222:	685b      	ldreq	r3, [r3, #4]
 800d224:	6063      	str	r3, [r4, #4]
 800d226:	bf04      	itt	eq
 800d228:	1949      	addeq	r1, r1, r5
 800d22a:	6021      	streq	r1, [r4, #0]
 800d22c:	6054      	str	r4, [r2, #4]
 800d22e:	e7ca      	b.n	800d1c6 <_free_r+0x26>
 800d230:	b003      	add	sp, #12
 800d232:	bd30      	pop	{r4, r5, pc}
 800d234:	20001738 	.word	0x20001738

0800d238 <sbrk_aligned>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	4e0e      	ldr	r6, [pc, #56]	; (800d274 <sbrk_aligned+0x3c>)
 800d23c:	460c      	mov	r4, r1
 800d23e:	6831      	ldr	r1, [r6, #0]
 800d240:	4605      	mov	r5, r0
 800d242:	b911      	cbnz	r1, 800d24a <sbrk_aligned+0x12>
 800d244:	f000 fcec 	bl	800dc20 <_sbrk_r>
 800d248:	6030      	str	r0, [r6, #0]
 800d24a:	4621      	mov	r1, r4
 800d24c:	4628      	mov	r0, r5
 800d24e:	f000 fce7 	bl	800dc20 <_sbrk_r>
 800d252:	1c43      	adds	r3, r0, #1
 800d254:	d00a      	beq.n	800d26c <sbrk_aligned+0x34>
 800d256:	1cc4      	adds	r4, r0, #3
 800d258:	f024 0403 	bic.w	r4, r4, #3
 800d25c:	42a0      	cmp	r0, r4
 800d25e:	d007      	beq.n	800d270 <sbrk_aligned+0x38>
 800d260:	1a21      	subs	r1, r4, r0
 800d262:	4628      	mov	r0, r5
 800d264:	f000 fcdc 	bl	800dc20 <_sbrk_r>
 800d268:	3001      	adds	r0, #1
 800d26a:	d101      	bne.n	800d270 <sbrk_aligned+0x38>
 800d26c:	f04f 34ff 	mov.w	r4, #4294967295
 800d270:	4620      	mov	r0, r4
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	2000173c 	.word	0x2000173c

0800d278 <_malloc_r>:
 800d278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d27c:	1ccd      	adds	r5, r1, #3
 800d27e:	f025 0503 	bic.w	r5, r5, #3
 800d282:	3508      	adds	r5, #8
 800d284:	2d0c      	cmp	r5, #12
 800d286:	bf38      	it	cc
 800d288:	250c      	movcc	r5, #12
 800d28a:	2d00      	cmp	r5, #0
 800d28c:	4607      	mov	r7, r0
 800d28e:	db01      	blt.n	800d294 <_malloc_r+0x1c>
 800d290:	42a9      	cmp	r1, r5
 800d292:	d905      	bls.n	800d2a0 <_malloc_r+0x28>
 800d294:	230c      	movs	r3, #12
 800d296:	603b      	str	r3, [r7, #0]
 800d298:	2600      	movs	r6, #0
 800d29a:	4630      	mov	r0, r6
 800d29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d374 <_malloc_r+0xfc>
 800d2a4:	f000 f868 	bl	800d378 <__malloc_lock>
 800d2a8:	f8d8 3000 	ldr.w	r3, [r8]
 800d2ac:	461c      	mov	r4, r3
 800d2ae:	bb5c      	cbnz	r4, 800d308 <_malloc_r+0x90>
 800d2b0:	4629      	mov	r1, r5
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	f7ff ffc0 	bl	800d238 <sbrk_aligned>
 800d2b8:	1c43      	adds	r3, r0, #1
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	d155      	bne.n	800d36a <_malloc_r+0xf2>
 800d2be:	f8d8 4000 	ldr.w	r4, [r8]
 800d2c2:	4626      	mov	r6, r4
 800d2c4:	2e00      	cmp	r6, #0
 800d2c6:	d145      	bne.n	800d354 <_malloc_r+0xdc>
 800d2c8:	2c00      	cmp	r4, #0
 800d2ca:	d048      	beq.n	800d35e <_malloc_r+0xe6>
 800d2cc:	6823      	ldr	r3, [r4, #0]
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	eb04 0903 	add.w	r9, r4, r3
 800d2d6:	f000 fca3 	bl	800dc20 <_sbrk_r>
 800d2da:	4581      	cmp	r9, r0
 800d2dc:	d13f      	bne.n	800d35e <_malloc_r+0xe6>
 800d2de:	6821      	ldr	r1, [r4, #0]
 800d2e0:	1a6d      	subs	r5, r5, r1
 800d2e2:	4629      	mov	r1, r5
 800d2e4:	4638      	mov	r0, r7
 800d2e6:	f7ff ffa7 	bl	800d238 <sbrk_aligned>
 800d2ea:	3001      	adds	r0, #1
 800d2ec:	d037      	beq.n	800d35e <_malloc_r+0xe6>
 800d2ee:	6823      	ldr	r3, [r4, #0]
 800d2f0:	442b      	add	r3, r5
 800d2f2:	6023      	str	r3, [r4, #0]
 800d2f4:	f8d8 3000 	ldr.w	r3, [r8]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d038      	beq.n	800d36e <_malloc_r+0xf6>
 800d2fc:	685a      	ldr	r2, [r3, #4]
 800d2fe:	42a2      	cmp	r2, r4
 800d300:	d12b      	bne.n	800d35a <_malloc_r+0xe2>
 800d302:	2200      	movs	r2, #0
 800d304:	605a      	str	r2, [r3, #4]
 800d306:	e00f      	b.n	800d328 <_malloc_r+0xb0>
 800d308:	6822      	ldr	r2, [r4, #0]
 800d30a:	1b52      	subs	r2, r2, r5
 800d30c:	d41f      	bmi.n	800d34e <_malloc_r+0xd6>
 800d30e:	2a0b      	cmp	r2, #11
 800d310:	d917      	bls.n	800d342 <_malloc_r+0xca>
 800d312:	1961      	adds	r1, r4, r5
 800d314:	42a3      	cmp	r3, r4
 800d316:	6025      	str	r5, [r4, #0]
 800d318:	bf18      	it	ne
 800d31a:	6059      	strne	r1, [r3, #4]
 800d31c:	6863      	ldr	r3, [r4, #4]
 800d31e:	bf08      	it	eq
 800d320:	f8c8 1000 	streq.w	r1, [r8]
 800d324:	5162      	str	r2, [r4, r5]
 800d326:	604b      	str	r3, [r1, #4]
 800d328:	4638      	mov	r0, r7
 800d32a:	f104 060b 	add.w	r6, r4, #11
 800d32e:	f000 f829 	bl	800d384 <__malloc_unlock>
 800d332:	f026 0607 	bic.w	r6, r6, #7
 800d336:	1d23      	adds	r3, r4, #4
 800d338:	1af2      	subs	r2, r6, r3
 800d33a:	d0ae      	beq.n	800d29a <_malloc_r+0x22>
 800d33c:	1b9b      	subs	r3, r3, r6
 800d33e:	50a3      	str	r3, [r4, r2]
 800d340:	e7ab      	b.n	800d29a <_malloc_r+0x22>
 800d342:	42a3      	cmp	r3, r4
 800d344:	6862      	ldr	r2, [r4, #4]
 800d346:	d1dd      	bne.n	800d304 <_malloc_r+0x8c>
 800d348:	f8c8 2000 	str.w	r2, [r8]
 800d34c:	e7ec      	b.n	800d328 <_malloc_r+0xb0>
 800d34e:	4623      	mov	r3, r4
 800d350:	6864      	ldr	r4, [r4, #4]
 800d352:	e7ac      	b.n	800d2ae <_malloc_r+0x36>
 800d354:	4634      	mov	r4, r6
 800d356:	6876      	ldr	r6, [r6, #4]
 800d358:	e7b4      	b.n	800d2c4 <_malloc_r+0x4c>
 800d35a:	4613      	mov	r3, r2
 800d35c:	e7cc      	b.n	800d2f8 <_malloc_r+0x80>
 800d35e:	230c      	movs	r3, #12
 800d360:	603b      	str	r3, [r7, #0]
 800d362:	4638      	mov	r0, r7
 800d364:	f000 f80e 	bl	800d384 <__malloc_unlock>
 800d368:	e797      	b.n	800d29a <_malloc_r+0x22>
 800d36a:	6025      	str	r5, [r4, #0]
 800d36c:	e7dc      	b.n	800d328 <_malloc_r+0xb0>
 800d36e:	605b      	str	r3, [r3, #4]
 800d370:	deff      	udf	#255	; 0xff
 800d372:	bf00      	nop
 800d374:	20001738 	.word	0x20001738

0800d378 <__malloc_lock>:
 800d378:	4801      	ldr	r0, [pc, #4]	; (800d380 <__malloc_lock+0x8>)
 800d37a:	f7ff bf00 	b.w	800d17e <__retarget_lock_acquire_recursive>
 800d37e:	bf00      	nop
 800d380:	20001734 	.word	0x20001734

0800d384 <__malloc_unlock>:
 800d384:	4801      	ldr	r0, [pc, #4]	; (800d38c <__malloc_unlock+0x8>)
 800d386:	f7ff befb 	b.w	800d180 <__retarget_lock_release_recursive>
 800d38a:	bf00      	nop
 800d38c:	20001734 	.word	0x20001734

0800d390 <__sfputc_r>:
 800d390:	6893      	ldr	r3, [r2, #8]
 800d392:	3b01      	subs	r3, #1
 800d394:	2b00      	cmp	r3, #0
 800d396:	b410      	push	{r4}
 800d398:	6093      	str	r3, [r2, #8]
 800d39a:	da08      	bge.n	800d3ae <__sfputc_r+0x1e>
 800d39c:	6994      	ldr	r4, [r2, #24]
 800d39e:	42a3      	cmp	r3, r4
 800d3a0:	db01      	blt.n	800d3a6 <__sfputc_r+0x16>
 800d3a2:	290a      	cmp	r1, #10
 800d3a4:	d103      	bne.n	800d3ae <__sfputc_r+0x1e>
 800d3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3aa:	f7ff bdc8 	b.w	800cf3e <__swbuf_r>
 800d3ae:	6813      	ldr	r3, [r2, #0]
 800d3b0:	1c58      	adds	r0, r3, #1
 800d3b2:	6010      	str	r0, [r2, #0]
 800d3b4:	7019      	strb	r1, [r3, #0]
 800d3b6:	4608      	mov	r0, r1
 800d3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <__sfputs_r>:
 800d3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	460f      	mov	r7, r1
 800d3c4:	4614      	mov	r4, r2
 800d3c6:	18d5      	adds	r5, r2, r3
 800d3c8:	42ac      	cmp	r4, r5
 800d3ca:	d101      	bne.n	800d3d0 <__sfputs_r+0x12>
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	e007      	b.n	800d3e0 <__sfputs_r+0x22>
 800d3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3d4:	463a      	mov	r2, r7
 800d3d6:	4630      	mov	r0, r6
 800d3d8:	f7ff ffda 	bl	800d390 <__sfputc_r>
 800d3dc:	1c43      	adds	r3, r0, #1
 800d3de:	d1f3      	bne.n	800d3c8 <__sfputs_r+0xa>
 800d3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3e4 <_vfiprintf_r>:
 800d3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e8:	460d      	mov	r5, r1
 800d3ea:	b09d      	sub	sp, #116	; 0x74
 800d3ec:	4614      	mov	r4, r2
 800d3ee:	4698      	mov	r8, r3
 800d3f0:	4606      	mov	r6, r0
 800d3f2:	b118      	cbz	r0, 800d3fc <_vfiprintf_r+0x18>
 800d3f4:	6a03      	ldr	r3, [r0, #32]
 800d3f6:	b90b      	cbnz	r3, 800d3fc <_vfiprintf_r+0x18>
 800d3f8:	f7ff fcb2 	bl	800cd60 <__sinit>
 800d3fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3fe:	07d9      	lsls	r1, r3, #31
 800d400:	d405      	bmi.n	800d40e <_vfiprintf_r+0x2a>
 800d402:	89ab      	ldrh	r3, [r5, #12]
 800d404:	059a      	lsls	r2, r3, #22
 800d406:	d402      	bmi.n	800d40e <_vfiprintf_r+0x2a>
 800d408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d40a:	f7ff feb8 	bl	800d17e <__retarget_lock_acquire_recursive>
 800d40e:	89ab      	ldrh	r3, [r5, #12]
 800d410:	071b      	lsls	r3, r3, #28
 800d412:	d501      	bpl.n	800d418 <_vfiprintf_r+0x34>
 800d414:	692b      	ldr	r3, [r5, #16]
 800d416:	b99b      	cbnz	r3, 800d440 <_vfiprintf_r+0x5c>
 800d418:	4629      	mov	r1, r5
 800d41a:	4630      	mov	r0, r6
 800d41c:	f7ff fdcc 	bl	800cfb8 <__swsetup_r>
 800d420:	b170      	cbz	r0, 800d440 <_vfiprintf_r+0x5c>
 800d422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d424:	07dc      	lsls	r4, r3, #31
 800d426:	d504      	bpl.n	800d432 <_vfiprintf_r+0x4e>
 800d428:	f04f 30ff 	mov.w	r0, #4294967295
 800d42c:	b01d      	add	sp, #116	; 0x74
 800d42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d432:	89ab      	ldrh	r3, [r5, #12]
 800d434:	0598      	lsls	r0, r3, #22
 800d436:	d4f7      	bmi.n	800d428 <_vfiprintf_r+0x44>
 800d438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d43a:	f7ff fea1 	bl	800d180 <__retarget_lock_release_recursive>
 800d43e:	e7f3      	b.n	800d428 <_vfiprintf_r+0x44>
 800d440:	2300      	movs	r3, #0
 800d442:	9309      	str	r3, [sp, #36]	; 0x24
 800d444:	2320      	movs	r3, #32
 800d446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d44a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d44e:	2330      	movs	r3, #48	; 0x30
 800d450:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d604 <_vfiprintf_r+0x220>
 800d454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d458:	f04f 0901 	mov.w	r9, #1
 800d45c:	4623      	mov	r3, r4
 800d45e:	469a      	mov	sl, r3
 800d460:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d464:	b10a      	cbz	r2, 800d46a <_vfiprintf_r+0x86>
 800d466:	2a25      	cmp	r2, #37	; 0x25
 800d468:	d1f9      	bne.n	800d45e <_vfiprintf_r+0x7a>
 800d46a:	ebba 0b04 	subs.w	fp, sl, r4
 800d46e:	d00b      	beq.n	800d488 <_vfiprintf_r+0xa4>
 800d470:	465b      	mov	r3, fp
 800d472:	4622      	mov	r2, r4
 800d474:	4629      	mov	r1, r5
 800d476:	4630      	mov	r0, r6
 800d478:	f7ff ffa1 	bl	800d3be <__sfputs_r>
 800d47c:	3001      	adds	r0, #1
 800d47e:	f000 80a9 	beq.w	800d5d4 <_vfiprintf_r+0x1f0>
 800d482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d484:	445a      	add	r2, fp
 800d486:	9209      	str	r2, [sp, #36]	; 0x24
 800d488:	f89a 3000 	ldrb.w	r3, [sl]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f000 80a1 	beq.w	800d5d4 <_vfiprintf_r+0x1f0>
 800d492:	2300      	movs	r3, #0
 800d494:	f04f 32ff 	mov.w	r2, #4294967295
 800d498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d49c:	f10a 0a01 	add.w	sl, sl, #1
 800d4a0:	9304      	str	r3, [sp, #16]
 800d4a2:	9307      	str	r3, [sp, #28]
 800d4a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4a8:	931a      	str	r3, [sp, #104]	; 0x68
 800d4aa:	4654      	mov	r4, sl
 800d4ac:	2205      	movs	r2, #5
 800d4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b2:	4854      	ldr	r0, [pc, #336]	; (800d604 <_vfiprintf_r+0x220>)
 800d4b4:	f7f2 fe6c 	bl	8000190 <memchr>
 800d4b8:	9a04      	ldr	r2, [sp, #16]
 800d4ba:	b9d8      	cbnz	r0, 800d4f4 <_vfiprintf_r+0x110>
 800d4bc:	06d1      	lsls	r1, r2, #27
 800d4be:	bf44      	itt	mi
 800d4c0:	2320      	movmi	r3, #32
 800d4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4c6:	0713      	lsls	r3, r2, #28
 800d4c8:	bf44      	itt	mi
 800d4ca:	232b      	movmi	r3, #43	; 0x2b
 800d4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d4d6:	d015      	beq.n	800d504 <_vfiprintf_r+0x120>
 800d4d8:	9a07      	ldr	r2, [sp, #28]
 800d4da:	4654      	mov	r4, sl
 800d4dc:	2000      	movs	r0, #0
 800d4de:	f04f 0c0a 	mov.w	ip, #10
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4e8:	3b30      	subs	r3, #48	; 0x30
 800d4ea:	2b09      	cmp	r3, #9
 800d4ec:	d94d      	bls.n	800d58a <_vfiprintf_r+0x1a6>
 800d4ee:	b1b0      	cbz	r0, 800d51e <_vfiprintf_r+0x13a>
 800d4f0:	9207      	str	r2, [sp, #28]
 800d4f2:	e014      	b.n	800d51e <_vfiprintf_r+0x13a>
 800d4f4:	eba0 0308 	sub.w	r3, r0, r8
 800d4f8:	fa09 f303 	lsl.w	r3, r9, r3
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	9304      	str	r3, [sp, #16]
 800d500:	46a2      	mov	sl, r4
 800d502:	e7d2      	b.n	800d4aa <_vfiprintf_r+0xc6>
 800d504:	9b03      	ldr	r3, [sp, #12]
 800d506:	1d19      	adds	r1, r3, #4
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	9103      	str	r1, [sp, #12]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	bfbb      	ittet	lt
 800d510:	425b      	neglt	r3, r3
 800d512:	f042 0202 	orrlt.w	r2, r2, #2
 800d516:	9307      	strge	r3, [sp, #28]
 800d518:	9307      	strlt	r3, [sp, #28]
 800d51a:	bfb8      	it	lt
 800d51c:	9204      	strlt	r2, [sp, #16]
 800d51e:	7823      	ldrb	r3, [r4, #0]
 800d520:	2b2e      	cmp	r3, #46	; 0x2e
 800d522:	d10c      	bne.n	800d53e <_vfiprintf_r+0x15a>
 800d524:	7863      	ldrb	r3, [r4, #1]
 800d526:	2b2a      	cmp	r3, #42	; 0x2a
 800d528:	d134      	bne.n	800d594 <_vfiprintf_r+0x1b0>
 800d52a:	9b03      	ldr	r3, [sp, #12]
 800d52c:	1d1a      	adds	r2, r3, #4
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	9203      	str	r2, [sp, #12]
 800d532:	2b00      	cmp	r3, #0
 800d534:	bfb8      	it	lt
 800d536:	f04f 33ff 	movlt.w	r3, #4294967295
 800d53a:	3402      	adds	r4, #2
 800d53c:	9305      	str	r3, [sp, #20]
 800d53e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d614 <_vfiprintf_r+0x230>
 800d542:	7821      	ldrb	r1, [r4, #0]
 800d544:	2203      	movs	r2, #3
 800d546:	4650      	mov	r0, sl
 800d548:	f7f2 fe22 	bl	8000190 <memchr>
 800d54c:	b138      	cbz	r0, 800d55e <_vfiprintf_r+0x17a>
 800d54e:	9b04      	ldr	r3, [sp, #16]
 800d550:	eba0 000a 	sub.w	r0, r0, sl
 800d554:	2240      	movs	r2, #64	; 0x40
 800d556:	4082      	lsls	r2, r0
 800d558:	4313      	orrs	r3, r2
 800d55a:	3401      	adds	r4, #1
 800d55c:	9304      	str	r3, [sp, #16]
 800d55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d562:	4829      	ldr	r0, [pc, #164]	; (800d608 <_vfiprintf_r+0x224>)
 800d564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d568:	2206      	movs	r2, #6
 800d56a:	f7f2 fe11 	bl	8000190 <memchr>
 800d56e:	2800      	cmp	r0, #0
 800d570:	d03f      	beq.n	800d5f2 <_vfiprintf_r+0x20e>
 800d572:	4b26      	ldr	r3, [pc, #152]	; (800d60c <_vfiprintf_r+0x228>)
 800d574:	bb1b      	cbnz	r3, 800d5be <_vfiprintf_r+0x1da>
 800d576:	9b03      	ldr	r3, [sp, #12]
 800d578:	3307      	adds	r3, #7
 800d57a:	f023 0307 	bic.w	r3, r3, #7
 800d57e:	3308      	adds	r3, #8
 800d580:	9303      	str	r3, [sp, #12]
 800d582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d584:	443b      	add	r3, r7
 800d586:	9309      	str	r3, [sp, #36]	; 0x24
 800d588:	e768      	b.n	800d45c <_vfiprintf_r+0x78>
 800d58a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d58e:	460c      	mov	r4, r1
 800d590:	2001      	movs	r0, #1
 800d592:	e7a6      	b.n	800d4e2 <_vfiprintf_r+0xfe>
 800d594:	2300      	movs	r3, #0
 800d596:	3401      	adds	r4, #1
 800d598:	9305      	str	r3, [sp, #20]
 800d59a:	4619      	mov	r1, r3
 800d59c:	f04f 0c0a 	mov.w	ip, #10
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5a6:	3a30      	subs	r2, #48	; 0x30
 800d5a8:	2a09      	cmp	r2, #9
 800d5aa:	d903      	bls.n	800d5b4 <_vfiprintf_r+0x1d0>
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d0c6      	beq.n	800d53e <_vfiprintf_r+0x15a>
 800d5b0:	9105      	str	r1, [sp, #20]
 800d5b2:	e7c4      	b.n	800d53e <_vfiprintf_r+0x15a>
 800d5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e7f0      	b.n	800d5a0 <_vfiprintf_r+0x1bc>
 800d5be:	ab03      	add	r3, sp, #12
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	462a      	mov	r2, r5
 800d5c4:	4b12      	ldr	r3, [pc, #72]	; (800d610 <_vfiprintf_r+0x22c>)
 800d5c6:	a904      	add	r1, sp, #16
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	f3af 8000 	nop.w
 800d5ce:	4607      	mov	r7, r0
 800d5d0:	1c78      	adds	r0, r7, #1
 800d5d2:	d1d6      	bne.n	800d582 <_vfiprintf_r+0x19e>
 800d5d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5d6:	07d9      	lsls	r1, r3, #31
 800d5d8:	d405      	bmi.n	800d5e6 <_vfiprintf_r+0x202>
 800d5da:	89ab      	ldrh	r3, [r5, #12]
 800d5dc:	059a      	lsls	r2, r3, #22
 800d5de:	d402      	bmi.n	800d5e6 <_vfiprintf_r+0x202>
 800d5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5e2:	f7ff fdcd 	bl	800d180 <__retarget_lock_release_recursive>
 800d5e6:	89ab      	ldrh	r3, [r5, #12]
 800d5e8:	065b      	lsls	r3, r3, #25
 800d5ea:	f53f af1d 	bmi.w	800d428 <_vfiprintf_r+0x44>
 800d5ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5f0:	e71c      	b.n	800d42c <_vfiprintf_r+0x48>
 800d5f2:	ab03      	add	r3, sp, #12
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	462a      	mov	r2, r5
 800d5f8:	4b05      	ldr	r3, [pc, #20]	; (800d610 <_vfiprintf_r+0x22c>)
 800d5fa:	a904      	add	r1, sp, #16
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f000 f879 	bl	800d6f4 <_printf_i>
 800d602:	e7e4      	b.n	800d5ce <_vfiprintf_r+0x1ea>
 800d604:	0800f0a4 	.word	0x0800f0a4
 800d608:	0800f0ae 	.word	0x0800f0ae
 800d60c:	00000000 	.word	0x00000000
 800d610:	0800d3bf 	.word	0x0800d3bf
 800d614:	0800f0aa 	.word	0x0800f0aa

0800d618 <_printf_common>:
 800d618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d61c:	4616      	mov	r6, r2
 800d61e:	4699      	mov	r9, r3
 800d620:	688a      	ldr	r2, [r1, #8]
 800d622:	690b      	ldr	r3, [r1, #16]
 800d624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d628:	4293      	cmp	r3, r2
 800d62a:	bfb8      	it	lt
 800d62c:	4613      	movlt	r3, r2
 800d62e:	6033      	str	r3, [r6, #0]
 800d630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d634:	4607      	mov	r7, r0
 800d636:	460c      	mov	r4, r1
 800d638:	b10a      	cbz	r2, 800d63e <_printf_common+0x26>
 800d63a:	3301      	adds	r3, #1
 800d63c:	6033      	str	r3, [r6, #0]
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	0699      	lsls	r1, r3, #26
 800d642:	bf42      	ittt	mi
 800d644:	6833      	ldrmi	r3, [r6, #0]
 800d646:	3302      	addmi	r3, #2
 800d648:	6033      	strmi	r3, [r6, #0]
 800d64a:	6825      	ldr	r5, [r4, #0]
 800d64c:	f015 0506 	ands.w	r5, r5, #6
 800d650:	d106      	bne.n	800d660 <_printf_common+0x48>
 800d652:	f104 0a19 	add.w	sl, r4, #25
 800d656:	68e3      	ldr	r3, [r4, #12]
 800d658:	6832      	ldr	r2, [r6, #0]
 800d65a:	1a9b      	subs	r3, r3, r2
 800d65c:	42ab      	cmp	r3, r5
 800d65e:	dc26      	bgt.n	800d6ae <_printf_common+0x96>
 800d660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d664:	1e13      	subs	r3, r2, #0
 800d666:	6822      	ldr	r2, [r4, #0]
 800d668:	bf18      	it	ne
 800d66a:	2301      	movne	r3, #1
 800d66c:	0692      	lsls	r2, r2, #26
 800d66e:	d42b      	bmi.n	800d6c8 <_printf_common+0xb0>
 800d670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d674:	4649      	mov	r1, r9
 800d676:	4638      	mov	r0, r7
 800d678:	47c0      	blx	r8
 800d67a:	3001      	adds	r0, #1
 800d67c:	d01e      	beq.n	800d6bc <_printf_common+0xa4>
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	6922      	ldr	r2, [r4, #16]
 800d682:	f003 0306 	and.w	r3, r3, #6
 800d686:	2b04      	cmp	r3, #4
 800d688:	bf02      	ittt	eq
 800d68a:	68e5      	ldreq	r5, [r4, #12]
 800d68c:	6833      	ldreq	r3, [r6, #0]
 800d68e:	1aed      	subeq	r5, r5, r3
 800d690:	68a3      	ldr	r3, [r4, #8]
 800d692:	bf0c      	ite	eq
 800d694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d698:	2500      	movne	r5, #0
 800d69a:	4293      	cmp	r3, r2
 800d69c:	bfc4      	itt	gt
 800d69e:	1a9b      	subgt	r3, r3, r2
 800d6a0:	18ed      	addgt	r5, r5, r3
 800d6a2:	2600      	movs	r6, #0
 800d6a4:	341a      	adds	r4, #26
 800d6a6:	42b5      	cmp	r5, r6
 800d6a8:	d11a      	bne.n	800d6e0 <_printf_common+0xc8>
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	e008      	b.n	800d6c0 <_printf_common+0xa8>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	4652      	mov	r2, sl
 800d6b2:	4649      	mov	r1, r9
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	47c0      	blx	r8
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	d103      	bne.n	800d6c4 <_printf_common+0xac>
 800d6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c4:	3501      	adds	r5, #1
 800d6c6:	e7c6      	b.n	800d656 <_printf_common+0x3e>
 800d6c8:	18e1      	adds	r1, r4, r3
 800d6ca:	1c5a      	adds	r2, r3, #1
 800d6cc:	2030      	movs	r0, #48	; 0x30
 800d6ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6d2:	4422      	add	r2, r4
 800d6d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6dc:	3302      	adds	r3, #2
 800d6de:	e7c7      	b.n	800d670 <_printf_common+0x58>
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	4622      	mov	r2, r4
 800d6e4:	4649      	mov	r1, r9
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	47c0      	blx	r8
 800d6ea:	3001      	adds	r0, #1
 800d6ec:	d0e6      	beq.n	800d6bc <_printf_common+0xa4>
 800d6ee:	3601      	adds	r6, #1
 800d6f0:	e7d9      	b.n	800d6a6 <_printf_common+0x8e>
	...

0800d6f4 <_printf_i>:
 800d6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f8:	7e0f      	ldrb	r7, [r1, #24]
 800d6fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d6fc:	2f78      	cmp	r7, #120	; 0x78
 800d6fe:	4691      	mov	r9, r2
 800d700:	4680      	mov	r8, r0
 800d702:	460c      	mov	r4, r1
 800d704:	469a      	mov	sl, r3
 800d706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d70a:	d807      	bhi.n	800d71c <_printf_i+0x28>
 800d70c:	2f62      	cmp	r7, #98	; 0x62
 800d70e:	d80a      	bhi.n	800d726 <_printf_i+0x32>
 800d710:	2f00      	cmp	r7, #0
 800d712:	f000 80d4 	beq.w	800d8be <_printf_i+0x1ca>
 800d716:	2f58      	cmp	r7, #88	; 0x58
 800d718:	f000 80c0 	beq.w	800d89c <_printf_i+0x1a8>
 800d71c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d724:	e03a      	b.n	800d79c <_printf_i+0xa8>
 800d726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d72a:	2b15      	cmp	r3, #21
 800d72c:	d8f6      	bhi.n	800d71c <_printf_i+0x28>
 800d72e:	a101      	add	r1, pc, #4	; (adr r1, 800d734 <_printf_i+0x40>)
 800d730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d734:	0800d78d 	.word	0x0800d78d
 800d738:	0800d7a1 	.word	0x0800d7a1
 800d73c:	0800d71d 	.word	0x0800d71d
 800d740:	0800d71d 	.word	0x0800d71d
 800d744:	0800d71d 	.word	0x0800d71d
 800d748:	0800d71d 	.word	0x0800d71d
 800d74c:	0800d7a1 	.word	0x0800d7a1
 800d750:	0800d71d 	.word	0x0800d71d
 800d754:	0800d71d 	.word	0x0800d71d
 800d758:	0800d71d 	.word	0x0800d71d
 800d75c:	0800d71d 	.word	0x0800d71d
 800d760:	0800d8a5 	.word	0x0800d8a5
 800d764:	0800d7cd 	.word	0x0800d7cd
 800d768:	0800d85f 	.word	0x0800d85f
 800d76c:	0800d71d 	.word	0x0800d71d
 800d770:	0800d71d 	.word	0x0800d71d
 800d774:	0800d8c7 	.word	0x0800d8c7
 800d778:	0800d71d 	.word	0x0800d71d
 800d77c:	0800d7cd 	.word	0x0800d7cd
 800d780:	0800d71d 	.word	0x0800d71d
 800d784:	0800d71d 	.word	0x0800d71d
 800d788:	0800d867 	.word	0x0800d867
 800d78c:	682b      	ldr	r3, [r5, #0]
 800d78e:	1d1a      	adds	r2, r3, #4
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	602a      	str	r2, [r5, #0]
 800d794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d79c:	2301      	movs	r3, #1
 800d79e:	e09f      	b.n	800d8e0 <_printf_i+0x1ec>
 800d7a0:	6820      	ldr	r0, [r4, #0]
 800d7a2:	682b      	ldr	r3, [r5, #0]
 800d7a4:	0607      	lsls	r7, r0, #24
 800d7a6:	f103 0104 	add.w	r1, r3, #4
 800d7aa:	6029      	str	r1, [r5, #0]
 800d7ac:	d501      	bpl.n	800d7b2 <_printf_i+0xbe>
 800d7ae:	681e      	ldr	r6, [r3, #0]
 800d7b0:	e003      	b.n	800d7ba <_printf_i+0xc6>
 800d7b2:	0646      	lsls	r6, r0, #25
 800d7b4:	d5fb      	bpl.n	800d7ae <_printf_i+0xba>
 800d7b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d7ba:	2e00      	cmp	r6, #0
 800d7bc:	da03      	bge.n	800d7c6 <_printf_i+0xd2>
 800d7be:	232d      	movs	r3, #45	; 0x2d
 800d7c0:	4276      	negs	r6, r6
 800d7c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7c6:	485a      	ldr	r0, [pc, #360]	; (800d930 <_printf_i+0x23c>)
 800d7c8:	230a      	movs	r3, #10
 800d7ca:	e012      	b.n	800d7f2 <_printf_i+0xfe>
 800d7cc:	682b      	ldr	r3, [r5, #0]
 800d7ce:	6820      	ldr	r0, [r4, #0]
 800d7d0:	1d19      	adds	r1, r3, #4
 800d7d2:	6029      	str	r1, [r5, #0]
 800d7d4:	0605      	lsls	r5, r0, #24
 800d7d6:	d501      	bpl.n	800d7dc <_printf_i+0xe8>
 800d7d8:	681e      	ldr	r6, [r3, #0]
 800d7da:	e002      	b.n	800d7e2 <_printf_i+0xee>
 800d7dc:	0641      	lsls	r1, r0, #25
 800d7de:	d5fb      	bpl.n	800d7d8 <_printf_i+0xe4>
 800d7e0:	881e      	ldrh	r6, [r3, #0]
 800d7e2:	4853      	ldr	r0, [pc, #332]	; (800d930 <_printf_i+0x23c>)
 800d7e4:	2f6f      	cmp	r7, #111	; 0x6f
 800d7e6:	bf0c      	ite	eq
 800d7e8:	2308      	moveq	r3, #8
 800d7ea:	230a      	movne	r3, #10
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d7f2:	6865      	ldr	r5, [r4, #4]
 800d7f4:	60a5      	str	r5, [r4, #8]
 800d7f6:	2d00      	cmp	r5, #0
 800d7f8:	bfa2      	ittt	ge
 800d7fa:	6821      	ldrge	r1, [r4, #0]
 800d7fc:	f021 0104 	bicge.w	r1, r1, #4
 800d800:	6021      	strge	r1, [r4, #0]
 800d802:	b90e      	cbnz	r6, 800d808 <_printf_i+0x114>
 800d804:	2d00      	cmp	r5, #0
 800d806:	d04b      	beq.n	800d8a0 <_printf_i+0x1ac>
 800d808:	4615      	mov	r5, r2
 800d80a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d80e:	fb03 6711 	mls	r7, r3, r1, r6
 800d812:	5dc7      	ldrb	r7, [r0, r7]
 800d814:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d818:	4637      	mov	r7, r6
 800d81a:	42bb      	cmp	r3, r7
 800d81c:	460e      	mov	r6, r1
 800d81e:	d9f4      	bls.n	800d80a <_printf_i+0x116>
 800d820:	2b08      	cmp	r3, #8
 800d822:	d10b      	bne.n	800d83c <_printf_i+0x148>
 800d824:	6823      	ldr	r3, [r4, #0]
 800d826:	07de      	lsls	r6, r3, #31
 800d828:	d508      	bpl.n	800d83c <_printf_i+0x148>
 800d82a:	6923      	ldr	r3, [r4, #16]
 800d82c:	6861      	ldr	r1, [r4, #4]
 800d82e:	4299      	cmp	r1, r3
 800d830:	bfde      	ittt	le
 800d832:	2330      	movle	r3, #48	; 0x30
 800d834:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d838:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d83c:	1b52      	subs	r2, r2, r5
 800d83e:	6122      	str	r2, [r4, #16]
 800d840:	f8cd a000 	str.w	sl, [sp]
 800d844:	464b      	mov	r3, r9
 800d846:	aa03      	add	r2, sp, #12
 800d848:	4621      	mov	r1, r4
 800d84a:	4640      	mov	r0, r8
 800d84c:	f7ff fee4 	bl	800d618 <_printf_common>
 800d850:	3001      	adds	r0, #1
 800d852:	d14a      	bne.n	800d8ea <_printf_i+0x1f6>
 800d854:	f04f 30ff 	mov.w	r0, #4294967295
 800d858:	b004      	add	sp, #16
 800d85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	f043 0320 	orr.w	r3, r3, #32
 800d864:	6023      	str	r3, [r4, #0]
 800d866:	4833      	ldr	r0, [pc, #204]	; (800d934 <_printf_i+0x240>)
 800d868:	2778      	movs	r7, #120	; 0x78
 800d86a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	6829      	ldr	r1, [r5, #0]
 800d872:	061f      	lsls	r7, r3, #24
 800d874:	f851 6b04 	ldr.w	r6, [r1], #4
 800d878:	d402      	bmi.n	800d880 <_printf_i+0x18c>
 800d87a:	065f      	lsls	r7, r3, #25
 800d87c:	bf48      	it	mi
 800d87e:	b2b6      	uxthmi	r6, r6
 800d880:	07df      	lsls	r7, r3, #31
 800d882:	bf48      	it	mi
 800d884:	f043 0320 	orrmi.w	r3, r3, #32
 800d888:	6029      	str	r1, [r5, #0]
 800d88a:	bf48      	it	mi
 800d88c:	6023      	strmi	r3, [r4, #0]
 800d88e:	b91e      	cbnz	r6, 800d898 <_printf_i+0x1a4>
 800d890:	6823      	ldr	r3, [r4, #0]
 800d892:	f023 0320 	bic.w	r3, r3, #32
 800d896:	6023      	str	r3, [r4, #0]
 800d898:	2310      	movs	r3, #16
 800d89a:	e7a7      	b.n	800d7ec <_printf_i+0xf8>
 800d89c:	4824      	ldr	r0, [pc, #144]	; (800d930 <_printf_i+0x23c>)
 800d89e:	e7e4      	b.n	800d86a <_printf_i+0x176>
 800d8a0:	4615      	mov	r5, r2
 800d8a2:	e7bd      	b.n	800d820 <_printf_i+0x12c>
 800d8a4:	682b      	ldr	r3, [r5, #0]
 800d8a6:	6826      	ldr	r6, [r4, #0]
 800d8a8:	6961      	ldr	r1, [r4, #20]
 800d8aa:	1d18      	adds	r0, r3, #4
 800d8ac:	6028      	str	r0, [r5, #0]
 800d8ae:	0635      	lsls	r5, r6, #24
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	d501      	bpl.n	800d8b8 <_printf_i+0x1c4>
 800d8b4:	6019      	str	r1, [r3, #0]
 800d8b6:	e002      	b.n	800d8be <_printf_i+0x1ca>
 800d8b8:	0670      	lsls	r0, r6, #25
 800d8ba:	d5fb      	bpl.n	800d8b4 <_printf_i+0x1c0>
 800d8bc:	8019      	strh	r1, [r3, #0]
 800d8be:	2300      	movs	r3, #0
 800d8c0:	6123      	str	r3, [r4, #16]
 800d8c2:	4615      	mov	r5, r2
 800d8c4:	e7bc      	b.n	800d840 <_printf_i+0x14c>
 800d8c6:	682b      	ldr	r3, [r5, #0]
 800d8c8:	1d1a      	adds	r2, r3, #4
 800d8ca:	602a      	str	r2, [r5, #0]
 800d8cc:	681d      	ldr	r5, [r3, #0]
 800d8ce:	6862      	ldr	r2, [r4, #4]
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	f7f2 fc5c 	bl	8000190 <memchr>
 800d8d8:	b108      	cbz	r0, 800d8de <_printf_i+0x1ea>
 800d8da:	1b40      	subs	r0, r0, r5
 800d8dc:	6060      	str	r0, [r4, #4]
 800d8de:	6863      	ldr	r3, [r4, #4]
 800d8e0:	6123      	str	r3, [r4, #16]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8e8:	e7aa      	b.n	800d840 <_printf_i+0x14c>
 800d8ea:	6923      	ldr	r3, [r4, #16]
 800d8ec:	462a      	mov	r2, r5
 800d8ee:	4649      	mov	r1, r9
 800d8f0:	4640      	mov	r0, r8
 800d8f2:	47d0      	blx	sl
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	d0ad      	beq.n	800d854 <_printf_i+0x160>
 800d8f8:	6823      	ldr	r3, [r4, #0]
 800d8fa:	079b      	lsls	r3, r3, #30
 800d8fc:	d413      	bmi.n	800d926 <_printf_i+0x232>
 800d8fe:	68e0      	ldr	r0, [r4, #12]
 800d900:	9b03      	ldr	r3, [sp, #12]
 800d902:	4298      	cmp	r0, r3
 800d904:	bfb8      	it	lt
 800d906:	4618      	movlt	r0, r3
 800d908:	e7a6      	b.n	800d858 <_printf_i+0x164>
 800d90a:	2301      	movs	r3, #1
 800d90c:	4632      	mov	r2, r6
 800d90e:	4649      	mov	r1, r9
 800d910:	4640      	mov	r0, r8
 800d912:	47d0      	blx	sl
 800d914:	3001      	adds	r0, #1
 800d916:	d09d      	beq.n	800d854 <_printf_i+0x160>
 800d918:	3501      	adds	r5, #1
 800d91a:	68e3      	ldr	r3, [r4, #12]
 800d91c:	9903      	ldr	r1, [sp, #12]
 800d91e:	1a5b      	subs	r3, r3, r1
 800d920:	42ab      	cmp	r3, r5
 800d922:	dcf2      	bgt.n	800d90a <_printf_i+0x216>
 800d924:	e7eb      	b.n	800d8fe <_printf_i+0x20a>
 800d926:	2500      	movs	r5, #0
 800d928:	f104 0619 	add.w	r6, r4, #25
 800d92c:	e7f5      	b.n	800d91a <_printf_i+0x226>
 800d92e:	bf00      	nop
 800d930:	0800f0b5 	.word	0x0800f0b5
 800d934:	0800f0c6 	.word	0x0800f0c6

0800d938 <__sflush_r>:
 800d938:	898a      	ldrh	r2, [r1, #12]
 800d93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d93e:	4605      	mov	r5, r0
 800d940:	0710      	lsls	r0, r2, #28
 800d942:	460c      	mov	r4, r1
 800d944:	d458      	bmi.n	800d9f8 <__sflush_r+0xc0>
 800d946:	684b      	ldr	r3, [r1, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	dc05      	bgt.n	800d958 <__sflush_r+0x20>
 800d94c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d94e:	2b00      	cmp	r3, #0
 800d950:	dc02      	bgt.n	800d958 <__sflush_r+0x20>
 800d952:	2000      	movs	r0, #0
 800d954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d95a:	2e00      	cmp	r6, #0
 800d95c:	d0f9      	beq.n	800d952 <__sflush_r+0x1a>
 800d95e:	2300      	movs	r3, #0
 800d960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d964:	682f      	ldr	r7, [r5, #0]
 800d966:	6a21      	ldr	r1, [r4, #32]
 800d968:	602b      	str	r3, [r5, #0]
 800d96a:	d032      	beq.n	800d9d2 <__sflush_r+0x9a>
 800d96c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d96e:	89a3      	ldrh	r3, [r4, #12]
 800d970:	075a      	lsls	r2, r3, #29
 800d972:	d505      	bpl.n	800d980 <__sflush_r+0x48>
 800d974:	6863      	ldr	r3, [r4, #4]
 800d976:	1ac0      	subs	r0, r0, r3
 800d978:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d97a:	b10b      	cbz	r3, 800d980 <__sflush_r+0x48>
 800d97c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d97e:	1ac0      	subs	r0, r0, r3
 800d980:	2300      	movs	r3, #0
 800d982:	4602      	mov	r2, r0
 800d984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d986:	6a21      	ldr	r1, [r4, #32]
 800d988:	4628      	mov	r0, r5
 800d98a:	47b0      	blx	r6
 800d98c:	1c43      	adds	r3, r0, #1
 800d98e:	89a3      	ldrh	r3, [r4, #12]
 800d990:	d106      	bne.n	800d9a0 <__sflush_r+0x68>
 800d992:	6829      	ldr	r1, [r5, #0]
 800d994:	291d      	cmp	r1, #29
 800d996:	d82b      	bhi.n	800d9f0 <__sflush_r+0xb8>
 800d998:	4a29      	ldr	r2, [pc, #164]	; (800da40 <__sflush_r+0x108>)
 800d99a:	410a      	asrs	r2, r1
 800d99c:	07d6      	lsls	r6, r2, #31
 800d99e:	d427      	bmi.n	800d9f0 <__sflush_r+0xb8>
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	6062      	str	r2, [r4, #4]
 800d9a4:	04d9      	lsls	r1, r3, #19
 800d9a6:	6922      	ldr	r2, [r4, #16]
 800d9a8:	6022      	str	r2, [r4, #0]
 800d9aa:	d504      	bpl.n	800d9b6 <__sflush_r+0x7e>
 800d9ac:	1c42      	adds	r2, r0, #1
 800d9ae:	d101      	bne.n	800d9b4 <__sflush_r+0x7c>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	b903      	cbnz	r3, 800d9b6 <__sflush_r+0x7e>
 800d9b4:	6560      	str	r0, [r4, #84]	; 0x54
 800d9b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9b8:	602f      	str	r7, [r5, #0]
 800d9ba:	2900      	cmp	r1, #0
 800d9bc:	d0c9      	beq.n	800d952 <__sflush_r+0x1a>
 800d9be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9c2:	4299      	cmp	r1, r3
 800d9c4:	d002      	beq.n	800d9cc <__sflush_r+0x94>
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f7ff fbea 	bl	800d1a0 <_free_r>
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	6360      	str	r0, [r4, #52]	; 0x34
 800d9d0:	e7c0      	b.n	800d954 <__sflush_r+0x1c>
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	47b0      	blx	r6
 800d9d8:	1c41      	adds	r1, r0, #1
 800d9da:	d1c8      	bne.n	800d96e <__sflush_r+0x36>
 800d9dc:	682b      	ldr	r3, [r5, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d0c5      	beq.n	800d96e <__sflush_r+0x36>
 800d9e2:	2b1d      	cmp	r3, #29
 800d9e4:	d001      	beq.n	800d9ea <__sflush_r+0xb2>
 800d9e6:	2b16      	cmp	r3, #22
 800d9e8:	d101      	bne.n	800d9ee <__sflush_r+0xb6>
 800d9ea:	602f      	str	r7, [r5, #0]
 800d9ec:	e7b1      	b.n	800d952 <__sflush_r+0x1a>
 800d9ee:	89a3      	ldrh	r3, [r4, #12]
 800d9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f4:	81a3      	strh	r3, [r4, #12]
 800d9f6:	e7ad      	b.n	800d954 <__sflush_r+0x1c>
 800d9f8:	690f      	ldr	r7, [r1, #16]
 800d9fa:	2f00      	cmp	r7, #0
 800d9fc:	d0a9      	beq.n	800d952 <__sflush_r+0x1a>
 800d9fe:	0793      	lsls	r3, r2, #30
 800da00:	680e      	ldr	r6, [r1, #0]
 800da02:	bf08      	it	eq
 800da04:	694b      	ldreq	r3, [r1, #20]
 800da06:	600f      	str	r7, [r1, #0]
 800da08:	bf18      	it	ne
 800da0a:	2300      	movne	r3, #0
 800da0c:	eba6 0807 	sub.w	r8, r6, r7
 800da10:	608b      	str	r3, [r1, #8]
 800da12:	f1b8 0f00 	cmp.w	r8, #0
 800da16:	dd9c      	ble.n	800d952 <__sflush_r+0x1a>
 800da18:	6a21      	ldr	r1, [r4, #32]
 800da1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da1c:	4643      	mov	r3, r8
 800da1e:	463a      	mov	r2, r7
 800da20:	4628      	mov	r0, r5
 800da22:	47b0      	blx	r6
 800da24:	2800      	cmp	r0, #0
 800da26:	dc06      	bgt.n	800da36 <__sflush_r+0xfe>
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da2e:	81a3      	strh	r3, [r4, #12]
 800da30:	f04f 30ff 	mov.w	r0, #4294967295
 800da34:	e78e      	b.n	800d954 <__sflush_r+0x1c>
 800da36:	4407      	add	r7, r0
 800da38:	eba8 0800 	sub.w	r8, r8, r0
 800da3c:	e7e9      	b.n	800da12 <__sflush_r+0xda>
 800da3e:	bf00      	nop
 800da40:	dfbffffe 	.word	0xdfbffffe

0800da44 <_fflush_r>:
 800da44:	b538      	push	{r3, r4, r5, lr}
 800da46:	690b      	ldr	r3, [r1, #16]
 800da48:	4605      	mov	r5, r0
 800da4a:	460c      	mov	r4, r1
 800da4c:	b913      	cbnz	r3, 800da54 <_fflush_r+0x10>
 800da4e:	2500      	movs	r5, #0
 800da50:	4628      	mov	r0, r5
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	b118      	cbz	r0, 800da5e <_fflush_r+0x1a>
 800da56:	6a03      	ldr	r3, [r0, #32]
 800da58:	b90b      	cbnz	r3, 800da5e <_fflush_r+0x1a>
 800da5a:	f7ff f981 	bl	800cd60 <__sinit>
 800da5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d0f3      	beq.n	800da4e <_fflush_r+0xa>
 800da66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da68:	07d0      	lsls	r0, r2, #31
 800da6a:	d404      	bmi.n	800da76 <_fflush_r+0x32>
 800da6c:	0599      	lsls	r1, r3, #22
 800da6e:	d402      	bmi.n	800da76 <_fflush_r+0x32>
 800da70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da72:	f7ff fb84 	bl	800d17e <__retarget_lock_acquire_recursive>
 800da76:	4628      	mov	r0, r5
 800da78:	4621      	mov	r1, r4
 800da7a:	f7ff ff5d 	bl	800d938 <__sflush_r>
 800da7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da80:	07da      	lsls	r2, r3, #31
 800da82:	4605      	mov	r5, r0
 800da84:	d4e4      	bmi.n	800da50 <_fflush_r+0xc>
 800da86:	89a3      	ldrh	r3, [r4, #12]
 800da88:	059b      	lsls	r3, r3, #22
 800da8a:	d4e1      	bmi.n	800da50 <_fflush_r+0xc>
 800da8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da8e:	f7ff fb77 	bl	800d180 <__retarget_lock_release_recursive>
 800da92:	e7dd      	b.n	800da50 <_fflush_r+0xc>

0800da94 <__swhatbuf_r>:
 800da94:	b570      	push	{r4, r5, r6, lr}
 800da96:	460c      	mov	r4, r1
 800da98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da9c:	2900      	cmp	r1, #0
 800da9e:	b096      	sub	sp, #88	; 0x58
 800daa0:	4615      	mov	r5, r2
 800daa2:	461e      	mov	r6, r3
 800daa4:	da0d      	bge.n	800dac2 <__swhatbuf_r+0x2e>
 800daa6:	89a3      	ldrh	r3, [r4, #12]
 800daa8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800daac:	f04f 0100 	mov.w	r1, #0
 800dab0:	bf0c      	ite	eq
 800dab2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dab6:	2340      	movne	r3, #64	; 0x40
 800dab8:	2000      	movs	r0, #0
 800daba:	6031      	str	r1, [r6, #0]
 800dabc:	602b      	str	r3, [r5, #0]
 800dabe:	b016      	add	sp, #88	; 0x58
 800dac0:	bd70      	pop	{r4, r5, r6, pc}
 800dac2:	466a      	mov	r2, sp
 800dac4:	f000 f88a 	bl	800dbdc <_fstat_r>
 800dac8:	2800      	cmp	r0, #0
 800daca:	dbec      	blt.n	800daa6 <__swhatbuf_r+0x12>
 800dacc:	9901      	ldr	r1, [sp, #4]
 800dace:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dad2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dad6:	4259      	negs	r1, r3
 800dad8:	4159      	adcs	r1, r3
 800dada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dade:	e7eb      	b.n	800dab8 <__swhatbuf_r+0x24>

0800dae0 <__smakebuf_r>:
 800dae0:	898b      	ldrh	r3, [r1, #12]
 800dae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dae4:	079d      	lsls	r5, r3, #30
 800dae6:	4606      	mov	r6, r0
 800dae8:	460c      	mov	r4, r1
 800daea:	d507      	bpl.n	800dafc <__smakebuf_r+0x1c>
 800daec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800daf0:	6023      	str	r3, [r4, #0]
 800daf2:	6123      	str	r3, [r4, #16]
 800daf4:	2301      	movs	r3, #1
 800daf6:	6163      	str	r3, [r4, #20]
 800daf8:	b002      	add	sp, #8
 800dafa:	bd70      	pop	{r4, r5, r6, pc}
 800dafc:	ab01      	add	r3, sp, #4
 800dafe:	466a      	mov	r2, sp
 800db00:	f7ff ffc8 	bl	800da94 <__swhatbuf_r>
 800db04:	9900      	ldr	r1, [sp, #0]
 800db06:	4605      	mov	r5, r0
 800db08:	4630      	mov	r0, r6
 800db0a:	f7ff fbb5 	bl	800d278 <_malloc_r>
 800db0e:	b948      	cbnz	r0, 800db24 <__smakebuf_r+0x44>
 800db10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db14:	059a      	lsls	r2, r3, #22
 800db16:	d4ef      	bmi.n	800daf8 <__smakebuf_r+0x18>
 800db18:	f023 0303 	bic.w	r3, r3, #3
 800db1c:	f043 0302 	orr.w	r3, r3, #2
 800db20:	81a3      	strh	r3, [r4, #12]
 800db22:	e7e3      	b.n	800daec <__smakebuf_r+0xc>
 800db24:	89a3      	ldrh	r3, [r4, #12]
 800db26:	6020      	str	r0, [r4, #0]
 800db28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db2c:	81a3      	strh	r3, [r4, #12]
 800db2e:	9b00      	ldr	r3, [sp, #0]
 800db30:	6163      	str	r3, [r4, #20]
 800db32:	9b01      	ldr	r3, [sp, #4]
 800db34:	6120      	str	r0, [r4, #16]
 800db36:	b15b      	cbz	r3, 800db50 <__smakebuf_r+0x70>
 800db38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db3c:	4630      	mov	r0, r6
 800db3e:	f000 f85f 	bl	800dc00 <_isatty_r>
 800db42:	b128      	cbz	r0, 800db50 <__smakebuf_r+0x70>
 800db44:	89a3      	ldrh	r3, [r4, #12]
 800db46:	f023 0303 	bic.w	r3, r3, #3
 800db4a:	f043 0301 	orr.w	r3, r3, #1
 800db4e:	81a3      	strh	r3, [r4, #12]
 800db50:	89a3      	ldrh	r3, [r4, #12]
 800db52:	431d      	orrs	r5, r3
 800db54:	81a5      	strh	r5, [r4, #12]
 800db56:	e7cf      	b.n	800daf8 <__smakebuf_r+0x18>

0800db58 <_putc_r>:
 800db58:	b570      	push	{r4, r5, r6, lr}
 800db5a:	460d      	mov	r5, r1
 800db5c:	4614      	mov	r4, r2
 800db5e:	4606      	mov	r6, r0
 800db60:	b118      	cbz	r0, 800db6a <_putc_r+0x12>
 800db62:	6a03      	ldr	r3, [r0, #32]
 800db64:	b90b      	cbnz	r3, 800db6a <_putc_r+0x12>
 800db66:	f7ff f8fb 	bl	800cd60 <__sinit>
 800db6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db6c:	07d8      	lsls	r0, r3, #31
 800db6e:	d405      	bmi.n	800db7c <_putc_r+0x24>
 800db70:	89a3      	ldrh	r3, [r4, #12]
 800db72:	0599      	lsls	r1, r3, #22
 800db74:	d402      	bmi.n	800db7c <_putc_r+0x24>
 800db76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db78:	f7ff fb01 	bl	800d17e <__retarget_lock_acquire_recursive>
 800db7c:	68a3      	ldr	r3, [r4, #8]
 800db7e:	3b01      	subs	r3, #1
 800db80:	2b00      	cmp	r3, #0
 800db82:	60a3      	str	r3, [r4, #8]
 800db84:	da05      	bge.n	800db92 <_putc_r+0x3a>
 800db86:	69a2      	ldr	r2, [r4, #24]
 800db88:	4293      	cmp	r3, r2
 800db8a:	db12      	blt.n	800dbb2 <_putc_r+0x5a>
 800db8c:	b2eb      	uxtb	r3, r5
 800db8e:	2b0a      	cmp	r3, #10
 800db90:	d00f      	beq.n	800dbb2 <_putc_r+0x5a>
 800db92:	6823      	ldr	r3, [r4, #0]
 800db94:	1c5a      	adds	r2, r3, #1
 800db96:	6022      	str	r2, [r4, #0]
 800db98:	701d      	strb	r5, [r3, #0]
 800db9a:	b2ed      	uxtb	r5, r5
 800db9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db9e:	07da      	lsls	r2, r3, #31
 800dba0:	d405      	bmi.n	800dbae <_putc_r+0x56>
 800dba2:	89a3      	ldrh	r3, [r4, #12]
 800dba4:	059b      	lsls	r3, r3, #22
 800dba6:	d402      	bmi.n	800dbae <_putc_r+0x56>
 800dba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbaa:	f7ff fae9 	bl	800d180 <__retarget_lock_release_recursive>
 800dbae:	4628      	mov	r0, r5
 800dbb0:	bd70      	pop	{r4, r5, r6, pc}
 800dbb2:	4629      	mov	r1, r5
 800dbb4:	4622      	mov	r2, r4
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	f7ff f9c1 	bl	800cf3e <__swbuf_r>
 800dbbc:	4605      	mov	r5, r0
 800dbbe:	e7ed      	b.n	800db9c <_putc_r+0x44>

0800dbc0 <strchr>:
 800dbc0:	b2c9      	uxtb	r1, r1
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbc8:	b11a      	cbz	r2, 800dbd2 <strchr+0x12>
 800dbca:	428a      	cmp	r2, r1
 800dbcc:	d1f9      	bne.n	800dbc2 <strchr+0x2>
 800dbce:	4618      	mov	r0, r3
 800dbd0:	4770      	bx	lr
 800dbd2:	2900      	cmp	r1, #0
 800dbd4:	bf18      	it	ne
 800dbd6:	2300      	movne	r3, #0
 800dbd8:	e7f9      	b.n	800dbce <strchr+0xe>
	...

0800dbdc <_fstat_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4d07      	ldr	r5, [pc, #28]	; (800dbfc <_fstat_r+0x20>)
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	4611      	mov	r1, r2
 800dbe8:	602b      	str	r3, [r5, #0]
 800dbea:	f000 f831 	bl	800dc50 <_fstat>
 800dbee:	1c43      	adds	r3, r0, #1
 800dbf0:	d102      	bne.n	800dbf8 <_fstat_r+0x1c>
 800dbf2:	682b      	ldr	r3, [r5, #0]
 800dbf4:	b103      	cbz	r3, 800dbf8 <_fstat_r+0x1c>
 800dbf6:	6023      	str	r3, [r4, #0]
 800dbf8:	bd38      	pop	{r3, r4, r5, pc}
 800dbfa:	bf00      	nop
 800dbfc:	20001730 	.word	0x20001730

0800dc00 <_isatty_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4d06      	ldr	r5, [pc, #24]	; (800dc1c <_isatty_r+0x1c>)
 800dc04:	2300      	movs	r3, #0
 800dc06:	4604      	mov	r4, r0
 800dc08:	4608      	mov	r0, r1
 800dc0a:	602b      	str	r3, [r5, #0]
 800dc0c:	f000 f828 	bl	800dc60 <_isatty>
 800dc10:	1c43      	adds	r3, r0, #1
 800dc12:	d102      	bne.n	800dc1a <_isatty_r+0x1a>
 800dc14:	682b      	ldr	r3, [r5, #0]
 800dc16:	b103      	cbz	r3, 800dc1a <_isatty_r+0x1a>
 800dc18:	6023      	str	r3, [r4, #0]
 800dc1a:	bd38      	pop	{r3, r4, r5, pc}
 800dc1c:	20001730 	.word	0x20001730

0800dc20 <_sbrk_r>:
 800dc20:	b538      	push	{r3, r4, r5, lr}
 800dc22:	4d06      	ldr	r5, [pc, #24]	; (800dc3c <_sbrk_r+0x1c>)
 800dc24:	2300      	movs	r3, #0
 800dc26:	4604      	mov	r4, r0
 800dc28:	4608      	mov	r0, r1
 800dc2a:	602b      	str	r3, [r5, #0]
 800dc2c:	f000 f830 	bl	800dc90 <_sbrk>
 800dc30:	1c43      	adds	r3, r0, #1
 800dc32:	d102      	bne.n	800dc3a <_sbrk_r+0x1a>
 800dc34:	682b      	ldr	r3, [r5, #0]
 800dc36:	b103      	cbz	r3, 800dc3a <_sbrk_r+0x1a>
 800dc38:	6023      	str	r3, [r4, #0]
 800dc3a:	bd38      	pop	{r3, r4, r5, pc}
 800dc3c:	20001730 	.word	0x20001730

0800dc40 <_close>:
 800dc40:	4b02      	ldr	r3, [pc, #8]	; (800dc4c <_close+0xc>)
 800dc42:	2258      	movs	r2, #88	; 0x58
 800dc44:	601a      	str	r2, [r3, #0]
 800dc46:	f04f 30ff 	mov.w	r0, #4294967295
 800dc4a:	4770      	bx	lr
 800dc4c:	20001730 	.word	0x20001730

0800dc50 <_fstat>:
 800dc50:	4b02      	ldr	r3, [pc, #8]	; (800dc5c <_fstat+0xc>)
 800dc52:	2258      	movs	r2, #88	; 0x58
 800dc54:	601a      	str	r2, [r3, #0]
 800dc56:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5a:	4770      	bx	lr
 800dc5c:	20001730 	.word	0x20001730

0800dc60 <_isatty>:
 800dc60:	4b02      	ldr	r3, [pc, #8]	; (800dc6c <_isatty+0xc>)
 800dc62:	2258      	movs	r2, #88	; 0x58
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	2000      	movs	r0, #0
 800dc68:	4770      	bx	lr
 800dc6a:	bf00      	nop
 800dc6c:	20001730 	.word	0x20001730

0800dc70 <_lseek>:
 800dc70:	4b02      	ldr	r3, [pc, #8]	; (800dc7c <_lseek+0xc>)
 800dc72:	2258      	movs	r2, #88	; 0x58
 800dc74:	601a      	str	r2, [r3, #0]
 800dc76:	f04f 30ff 	mov.w	r0, #4294967295
 800dc7a:	4770      	bx	lr
 800dc7c:	20001730 	.word	0x20001730

0800dc80 <_read>:
 800dc80:	4b02      	ldr	r3, [pc, #8]	; (800dc8c <_read+0xc>)
 800dc82:	2258      	movs	r2, #88	; 0x58
 800dc84:	601a      	str	r2, [r3, #0]
 800dc86:	f04f 30ff 	mov.w	r0, #4294967295
 800dc8a:	4770      	bx	lr
 800dc8c:	20001730 	.word	0x20001730

0800dc90 <_sbrk>:
 800dc90:	4a04      	ldr	r2, [pc, #16]	; (800dca4 <_sbrk+0x14>)
 800dc92:	6811      	ldr	r1, [r2, #0]
 800dc94:	4603      	mov	r3, r0
 800dc96:	b909      	cbnz	r1, 800dc9c <_sbrk+0xc>
 800dc98:	4903      	ldr	r1, [pc, #12]	; (800dca8 <_sbrk+0x18>)
 800dc9a:	6011      	str	r1, [r2, #0]
 800dc9c:	6810      	ldr	r0, [r2, #0]
 800dc9e:	4403      	add	r3, r0
 800dca0:	6013      	str	r3, [r2, #0]
 800dca2:	4770      	bx	lr
 800dca4:	20001740 	.word	0x20001740
 800dca8:	20001748 	.word	0x20001748

0800dcac <_init>:
 800dcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcae:	bf00      	nop
 800dcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcb2:	bc08      	pop	{r3}
 800dcb4:	469e      	mov	lr, r3
 800dcb6:	4770      	bx	lr

0800dcb8 <_fini>:
 800dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcba:	bf00      	nop
 800dcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcbe:	bc08      	pop	{r3}
 800dcc0:	469e      	mov	lr, r3
 800dcc2:	4770      	bx	lr
