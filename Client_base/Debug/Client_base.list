
Client_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8c8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001368  0800da08  0800da08  0001da08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ed70  0800ed70  0001ed70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ed78  0800ed78  0001ed78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ed7c  0800ed7c  0001ed7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000008  0800ed80  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000039  20000090  0800ee08  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000cc  0800ee41  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001774  200000e0  0800ee52  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001854  0800ee52  00021854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800ee52  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002f698  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000690d  00000000  00000000  00050172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002a18  00000000  00000000  00056a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000202c  00000000  00000000  00059498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002c69c  00000000  00000000  0005b4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000300a0  00000000  00000000  00087b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f9144  00000000  00000000  000b7c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000b710  00000000  00000000  001b0d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007f  00000000  00000000  001bc454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d9f0 	.word	0x0800d9f0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0800d9f0 	.word	0x0800d9f0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b970 	b.w	8000548 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9e08      	ldr	r6, [sp, #32]
 8000286:	460d      	mov	r5, r1
 8000288:	4604      	mov	r4, r0
 800028a:	460f      	mov	r7, r1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d14a      	bne.n	8000326 <__udivmoddi4+0xa6>
 8000290:	428a      	cmp	r2, r1
 8000292:	4694      	mov	ip, r2
 8000294:	d965      	bls.n	8000362 <__udivmoddi4+0xe2>
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	b143      	cbz	r3, 80002ae <__udivmoddi4+0x2e>
 800029c:	fa02 fc03 	lsl.w	ip, r2, r3
 80002a0:	f1c3 0220 	rsb	r2, r3, #32
 80002a4:	409f      	lsls	r7, r3
 80002a6:	fa20 f202 	lsr.w	r2, r0, r2
 80002aa:	4317      	orrs	r7, r2
 80002ac:	409c      	lsls	r4, r3
 80002ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002b2:	fa1f f58c 	uxth.w	r5, ip
 80002b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ba:	0c22      	lsrs	r2, r4, #16
 80002bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002c4:	fb01 f005 	mul.w	r0, r1, r5
 80002c8:	4290      	cmp	r0, r2
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x62>
 80002cc:	eb1c 0202 	adds.w	r2, ip, r2
 80002d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002d4:	f080 811c 	bcs.w	8000510 <__udivmoddi4+0x290>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f240 8119 	bls.w	8000510 <__udivmoddi4+0x290>
 80002de:	3902      	subs	r1, #2
 80002e0:	4462      	add	r2, ip
 80002e2:	1a12      	subs	r2, r2, r0
 80002e4:	b2a4      	uxth	r4, r4
 80002e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f2:	fb00 f505 	mul.w	r5, r0, r5
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	d90a      	bls.n	8000310 <__udivmoddi4+0x90>
 80002fa:	eb1c 0404 	adds.w	r4, ip, r4
 80002fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000302:	f080 8107 	bcs.w	8000514 <__udivmoddi4+0x294>
 8000306:	42a5      	cmp	r5, r4
 8000308:	f240 8104 	bls.w	8000514 <__udivmoddi4+0x294>
 800030c:	4464      	add	r4, ip
 800030e:	3802      	subs	r0, #2
 8000310:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	2100      	movs	r1, #0
 8000318:	b11e      	cbz	r6, 8000322 <__udivmoddi4+0xa2>
 800031a:	40dc      	lsrs	r4, r3
 800031c:	2300      	movs	r3, #0
 800031e:	e9c6 4300 	strd	r4, r3, [r6]
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0xbc>
 800032a:	2e00      	cmp	r6, #0
 800032c:	f000 80ed 	beq.w	800050a <__udivmoddi4+0x28a>
 8000330:	2100      	movs	r1, #0
 8000332:	e9c6 0500 	strd	r0, r5, [r6]
 8000336:	4608      	mov	r0, r1
 8000338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033c:	fab3 f183 	clz	r1, r3
 8000340:	2900      	cmp	r1, #0
 8000342:	d149      	bne.n	80003d8 <__udivmoddi4+0x158>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d302      	bcc.n	800034e <__udivmoddi4+0xce>
 8000348:	4282      	cmp	r2, r0
 800034a:	f200 80f8 	bhi.w	800053e <__udivmoddi4+0x2be>
 800034e:	1a84      	subs	r4, r0, r2
 8000350:	eb65 0203 	sbc.w	r2, r5, r3
 8000354:	2001      	movs	r0, #1
 8000356:	4617      	mov	r7, r2
 8000358:	2e00      	cmp	r6, #0
 800035a:	d0e2      	beq.n	8000322 <__udivmoddi4+0xa2>
 800035c:	e9c6 4700 	strd	r4, r7, [r6]
 8000360:	e7df      	b.n	8000322 <__udivmoddi4+0xa2>
 8000362:	b902      	cbnz	r2, 8000366 <__udivmoddi4+0xe6>
 8000364:	deff      	udf	#255	; 0xff
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	2b00      	cmp	r3, #0
 800036c:	f040 8090 	bne.w	8000490 <__udivmoddi4+0x210>
 8000370:	1a8a      	subs	r2, r1, r2
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2101      	movs	r1, #1
 800037c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000380:	fb07 2015 	mls	r0, r7, r5, r2
 8000384:	0c22      	lsrs	r2, r4, #16
 8000386:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800038a:	fb0e f005 	mul.w	r0, lr, r5
 800038e:	4290      	cmp	r0, r2
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x124>
 8000392:	eb1c 0202 	adds.w	r2, ip, r2
 8000396:	f105 38ff 	add.w	r8, r5, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x122>
 800039c:	4290      	cmp	r0, r2
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2b8>
 80003a2:	4645      	mov	r5, r8
 80003a4:	1a12      	subs	r2, r2, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ac:	fb07 2210 	mls	r2, r7, r0, r2
 80003b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x14e>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x14c>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2c2>
 80003cc:	4610      	mov	r0, r2
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003d6:	e79f      	b.n	8000318 <__udivmoddi4+0x98>
 80003d8:	f1c1 0720 	rsb	r7, r1, #32
 80003dc:	408b      	lsls	r3, r1
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ea:	fa20 f307 	lsr.w	r3, r0, r7
 80003ee:	40fd      	lsrs	r5, r7
 80003f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f4:	4323      	orrs	r3, r4
 80003f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000402:	0c1c      	lsrs	r4, r3, #16
 8000404:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000408:	fb08 f50e 	mul.w	r5, r8, lr
 800040c:	42a5      	cmp	r5, r4
 800040e:	fa02 f201 	lsl.w	r2, r2, r1
 8000412:	fa00 f001 	lsl.w	r0, r0, r1
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b0>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2b4>
 8000424:	42a5      	cmp	r5, r4
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2b4>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4464      	add	r4, ip
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	b29d      	uxth	r5, r3
 8000434:	fbb4 f3f9 	udiv	r3, r4, r9
 8000438:	fb09 4413 	mls	r4, r9, r3, r4
 800043c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000440:	fb03 fe0e 	mul.w	lr, r3, lr
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1da>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2ac>
 8000452:	45a6      	cmp	lr, r4
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2ac>
 8000456:	3b02      	subs	r3, #2
 8000458:	4464      	add	r4, ip
 800045a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800045e:	fba3 9502 	umull	r9, r5, r3, r2
 8000462:	eba4 040e 	sub.w	r4, r4, lr
 8000466:	42ac      	cmp	r4, r5
 8000468:	46c8      	mov	r8, r9
 800046a:	46ae      	mov	lr, r5
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x29c>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x298>
 8000470:	b156      	cbz	r6, 8000488 <__udivmoddi4+0x208>
 8000472:	ebb0 0208 	subs.w	r2, r0, r8
 8000476:	eb64 040e 	sbc.w	r4, r4, lr
 800047a:	fa04 f707 	lsl.w	r7, r4, r7
 800047e:	40ca      	lsrs	r2, r1
 8000480:	40cc      	lsrs	r4, r1
 8000482:	4317      	orrs	r7, r2
 8000484:	e9c6 7400 	strd	r7, r4, [r6]
 8000488:	4618      	mov	r0, r3
 800048a:	2100      	movs	r1, #0
 800048c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000490:	f1c3 0120 	rsb	r1, r3, #32
 8000494:	fa02 fc03 	lsl.w	ip, r2, r3
 8000498:	fa20 f201 	lsr.w	r2, r0, r1
 800049c:	fa25 f101 	lsr.w	r1, r5, r1
 80004a0:	409d      	lsls	r5, r3
 80004a2:	432a      	orrs	r2, r5
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b0:	fb07 1510 	mls	r5, r7, r0, r1
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ba:	fb00 f50e 	mul.w	r5, r0, lr
 80004be:	428d      	cmp	r5, r1
 80004c0:	fa04 f403 	lsl.w	r4, r4, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x258>
 80004c6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 80004d0:	428d      	cmp	r5, r1
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b0>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1b49      	subs	r1, r1, r5
 80004da:	b292      	uxth	r2, r2
 80004dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004e0:	fb07 1115 	mls	r1, r7, r5, r1
 80004e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ec:	4291      	cmp	r1, r2
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x282>
 80004f0:	eb1c 0202 	adds.w	r2, ip, r2
 80004f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2a8>
 80004fa:	4291      	cmp	r1, r2
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2a8>
 80004fe:	3d02      	subs	r5, #2
 8000500:	4462      	add	r2, ip
 8000502:	1a52      	subs	r2, r2, r1
 8000504:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0xfc>
 800050a:	4631      	mov	r1, r6
 800050c:	4630      	mov	r0, r6
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xa2>
 8000510:	4639      	mov	r1, r7
 8000512:	e6e6      	b.n	80002e2 <__udivmoddi4+0x62>
 8000514:	4610      	mov	r0, r2
 8000516:	e6fb      	b.n	8000310 <__udivmoddi4+0x90>
 8000518:	4548      	cmp	r0, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f0>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000524:	3b01      	subs	r3, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f0>
 8000528:	4645      	mov	r5, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x282>
 800052c:	462b      	mov	r3, r5
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1da>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x258>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b0>
 8000538:	3d02      	subs	r5, #2
 800053a:	4462      	add	r2, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x124>
 800053e:	4608      	mov	r0, r1
 8000540:	e70a      	b.n	8000358 <__udivmoddi4+0xd8>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x14e>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <LL_EXTI_EnableIT_32_63+0x24>)
 8000556:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800055a:	4905      	ldr	r1, [pc, #20]	; (8000570 <LL_EXTI_EnableIT_32_63+0x24>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4313      	orrs	r3, r2
 8000560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	58000800 	.word	0x58000800

08000574 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800057c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4313      	orrs	r3, r2
 800058a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800058c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000590:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4013      	ands	r3, r2
 8000596:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000598:	68fb      	ldr	r3, [r7, #12]
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b085      	sub	sp, #20
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80005ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4313      	orrs	r3, r2
 80005be:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005d0:	68fb      	ldr	r3, [r7, #12]
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005e2:	f002 fc33 	bl	8002e4c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005e6:	f002 fc37 	bl	8002e58 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005ee:	f7ff ffad 	bl	800054c <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005f2:	f009 fd3d 	bl	800a070 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005f6:	f000 f821 	bl	800063c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005fa:	f000 f8c1 	bl	8000780 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005fe:	bf00      	nop
}
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000604:	b5b0      	push	{r4, r5, r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <APPD_EnableCPU2+0x34>)
 800060c:	1d3c      	adds	r4, r7, #4
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	c403      	stmia	r4!, {r0, r1}
 800061a:	8022      	strh	r2, [r4, #0]
 800061c:	3402      	adds	r4, #2
 800061e:	0c13      	lsrs	r3, r2, #16
 8000620:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000622:	f009 fc61 	bl	8009ee8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f008 fef2 	bl	8009412 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800062e:	bf00      	nop
}
 8000630:	3720      	adds	r7, #32
 8000632:	46bd      	mov	sp, r7
 8000634:	bdb0      	pop	{r4, r5, r7, pc}
 8000636:	bf00      	nop
 8000638:	0800da08 	.word	0x0800da08

0800063c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800065c:	2300      	movs	r3, #0
 800065e:	77fb      	strb	r3, [r7, #31]
 8000660:	e036      	b.n	80006d0 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000662:	7ffb      	ldrb	r3, [r7, #31]
 8000664:	4a43      	ldr	r2, [pc, #268]	; (8000774 <APPD_SetCPU2GpioConfig+0x138>)
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	4413      	add	r3, r2
 800066a:	799b      	ldrb	r3, [r3, #6]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d02c      	beq.n	80006ca <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000670:	7ffb      	ldrb	r3, [r7, #31]
 8000672:	4a40      	ldr	r2, [pc, #256]	; (8000774 <APPD_SetCPU2GpioConfig+0x138>)
 8000674:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000678:	4a3f      	ldr	r2, [pc, #252]	; (8000778 <APPD_SetCPU2GpioConfig+0x13c>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d01b      	beq.n	80006b6 <APPD_SetCPU2GpioConfig+0x7a>
 800067e:	4a3e      	ldr	r2, [pc, #248]	; (8000778 <APPD_SetCPU2GpioConfig+0x13c>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d821      	bhi.n	80006c8 <APPD_SetCPU2GpioConfig+0x8c>
 8000684:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000688:	d003      	beq.n	8000692 <APPD_SetCPU2GpioConfig+0x56>
 800068a:	4a3c      	ldr	r2, [pc, #240]	; (800077c <APPD_SetCPU2GpioConfig+0x140>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d009      	beq.n	80006a4 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000690:	e01a      	b.n	80006c8 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000692:	7ffb      	ldrb	r3, [r7, #31]
 8000694:	4a37      	ldr	r2, [pc, #220]	; (8000774 <APPD_SetCPU2GpioConfig+0x138>)
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	889a      	ldrh	r2, [r3, #4]
 800069c:	8bbb      	ldrh	r3, [r7, #28]
 800069e:	4313      	orrs	r3, r2
 80006a0:	83bb      	strh	r3, [r7, #28]
          break;
 80006a2:	e012      	b.n	80006ca <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80006a4:	7ffb      	ldrb	r3, [r7, #31]
 80006a6:	4a33      	ldr	r2, [pc, #204]	; (8000774 <APPD_SetCPU2GpioConfig+0x138>)
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	4413      	add	r3, r2
 80006ac:	889a      	ldrh	r2, [r3, #4]
 80006ae:	8b7b      	ldrh	r3, [r7, #26]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	837b      	strh	r3, [r7, #26]
          break;
 80006b4:	e009      	b.n	80006ca <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80006b6:	7ffb      	ldrb	r3, [r7, #31]
 80006b8:	4a2e      	ldr	r2, [pc, #184]	; (8000774 <APPD_SetCPU2GpioConfig+0x138>)
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	4413      	add	r3, r2
 80006be:	889a      	ldrh	r2, [r3, #4]
 80006c0:	8b3b      	ldrh	r3, [r7, #24]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	833b      	strh	r3, [r7, #24]
          break;
 80006c6:	e000      	b.n	80006ca <APPD_SetCPU2GpioConfig+0x8e>
          break;
 80006c8:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006ca:	7ffb      	ldrb	r3, [r7, #31]
 80006cc:	3301      	adds	r3, #1
 80006ce:	77fb      	strb	r3, [r7, #31]
 80006d0:	7ffb      	ldrb	r3, [r7, #31]
 80006d2:	2b25      	cmp	r3, #37	; 0x25
 80006d4:	d9c5      	bls.n	8000662 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006e2:	8bbb      	ldrh	r3, [r7, #28]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d014      	beq.n	8000712 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006e8:	8bbb      	ldrh	r3, [r7, #28]
 80006ea:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ff41 	bl	8000574 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff ff57 	bl	80005a6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f003 f8de 	bl	80038c0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000704:	8bbb      	ldrh	r3, [r7, #28]
 8000706:	2200      	movs	r2, #0
 8000708:	4619      	mov	r1, r3
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f003 fa47 	bl	8003ba0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000712:	8b7b      	ldrh	r3, [r7, #26]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d012      	beq.n	800073e <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000718:	8b7b      	ldrh	r3, [r7, #26]
 800071a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	2002      	movs	r0, #2
 800071e:	f7ff ff29 	bl	8000574 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000722:	2002      	movs	r0, #2
 8000724:	f7ff ff3f 	bl	80005a6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4813      	ldr	r0, [pc, #76]	; (800077c <APPD_SetCPU2GpioConfig+0x140>)
 800072e:	f003 f8c7 	bl	80038c0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000732:	8b7b      	ldrh	r3, [r7, #26]
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	4810      	ldr	r0, [pc, #64]	; (800077c <APPD_SetCPU2GpioConfig+0x140>)
 800073a:	f003 fa31 	bl	8003ba0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800073e:	8b3b      	ldrh	r3, [r7, #24]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d013      	beq.n	800076c <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000744:	8b3b      	ldrh	r3, [r7, #24]
 8000746:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000748:	2004      	movs	r0, #4
 800074a:	f7ff ff13 	bl	8000574 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800074e:	2004      	movs	r0, #4
 8000750:	f7ff ff29 	bl	80005a6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <APPD_SetCPU2GpioConfig+0x13c>)
 800075a:	f003 f8b1 	bl	80038c0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800075e:	8b3b      	ldrh	r3, [r7, #24]
 8000760:	2200      	movs	r2, #0
 8000762:	4619      	mov	r1, r3
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <APPD_SetCPU2GpioConfig+0x13c>)
 8000766:	f003 fa1b 	bl	8003ba0 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800076a:	bf00      	nop
 800076c:	bf00      	nop
}
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	0800eaf8 	.word	0x0800eaf8
 8000778:	48000800 	.word	0x48000800
 800077c:	48000400 	.word	0x48000400

08000780 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000784:	bf00      	nop
}
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000792:	f001 fd87 	bl	80022a4 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000796:	bf00      	nop
}
 8000798:	bd80      	pop	{r7, pc}

0800079a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b084      	sub	sp, #16
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	460b      	mov	r3, r1
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80007a8:	897a      	ldrh	r2, [r7, #10]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	68f9      	ldr	r1, [r7, #12]
 80007ae:	2000      	movs	r0, #0
 80007b0:	f001 fbb0 	bl	8001f14 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80007b4:	bf00      	nop
}
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007c4:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007ca:	f023 0207 	bic.w	r2, r3, #7
 80007ce:	4905      	ldr	r1, [pc, #20]	; (80007e4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	58000400 	.word	0x58000400

080007e8 <LL_EXTI_EnableIT_32_63>:
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <LL_EXTI_EnableIT_32_63+0x24>)
 80007f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007f6:	4905      	ldr	r1, [pc, #20]	; (800080c <LL_EXTI_EnableIT_32_63+0x24>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	58000800 	.word	0x58000800

08000810 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800081e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800082a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000836:	4313      	orrs	r3, r2
 8000838:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	cafecafe 	.word	0xcafecafe

0800084c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800085e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4313      	orrs	r3, r2
 8000866:	608b      	str	r3, [r1, #8]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008cc:	d101      	bne.n	80008d2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008ce:	2301      	movs	r3, #1
 80008d0:	e000      	b.n	80008d4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008f2:	d101      	bne.n	80008f8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008f4:	2301      	movs	r3, #1
 80008f6:	e000      	b.n	80008fa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <LL_AHB3_GRP1_EnableClock>:
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800090c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4313      	orrs	r3, r2
 800091a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800091c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000928:	68fb      	ldr	r3, [r7, #12]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <LL_DBGMCU_GetDeviceID+0x18>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e0042000 	.word	0xe0042000

08000954 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <LL_DBGMCU_GetRevisionID+0x18>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	0c1b      	lsrs	r3, r3, #16
 800095e:	b29b      	uxth	r3, r3
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e0042000 	.word	0xe0042000

08000970 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	041b      	lsls	r3, r3, #16
 8000982:	431a      	orrs	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	605a      	str	r2, [r3, #4]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	431a      	orrs	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	605a      	str	r2, [r3, #4]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
 80009be:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	041b      	lsls	r3, r3, #16
 80009c8:	431a      	orrs	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	615a      	str	r2, [r3, #20]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	431a      	orrs	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	615a      	str	r2, [r3, #20]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	609a      	str	r2, [r3, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	619a      	str	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <LL_LPM_EnableSleep+0x1c>)
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <LL_LPM_EnableSleep+0x1c>)
 8000a3e:	f023 0304 	bic.w	r3, r3, #4
 8000a42:	6113      	str	r3, [r2, #16]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	22ff      	movs	r2, #255	; 0xff
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	22ca      	movs	r2, #202	; 0xca
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2253      	movs	r2, #83	; 0x53
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f023 0207 	bic.w	r2, r3, #7
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <MX_APPE_Config+0x18>)
 8000aba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000abe:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000ac0:	f000 f830 	bl	8000b24 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000ac4:	f000 f870 	bl	8000ba8 <Config_HSE>

  return;
 8000ac8:	bf00      	nop
}
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	58004000 	.word	0x58004000

08000ad0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000ad4:	f000 f87c 	bl	8000bd0 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000ad8:	f000 f894 	bl	8000c04 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000adc:	4909      	ldr	r1, [pc, #36]	; (8000b04 <MX_APPE_Init+0x34>)
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 ff88 	bl	80019f4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000ae4:	f7ff fd7b 	bl	80005de <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000ae8:	2101      	movs	r1, #1
 8000aea:	2001      	movs	r0, #1
 8000aec:	f00b fd06 	bl	800c4fc <UTIL_LPM_SetOffMode>

  Led_Init();
 8000af0:	f000 f9ea 	bl	8000ec8 <Led_Init>

  Button_Init();
 8000af4:	f000 f9f8 	bl	8000ee8 <Button_Init>
  
  RxUART_Init();
 8000af8:	f000 fa88 	bl	800100c <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000afc:	f000 f890 	bl	8000c20 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000b00:	bf00      	nop
}
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200004dc 	.word	0x200004dc

08000b08 <Init_Smps>:

void Init_Smps(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000b0c:	bf00      	nop
}
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <Init_Exti>:

void Init_Exti(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000b1a:	2050      	movs	r0, #80	; 0x50
 8000b1c:	f7ff fe64 	bl	80007e8 <LL_EXTI_EnableIT_32_63>

  return;
 8000b20:	bf00      	nop
}
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000b28:	f000 f804 	bl	8000b34 <Reset_BackupDomain>

  Reset_IPCC();
 8000b2c:	f000 f81a 	bl	8000b64 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000b30:	bf00      	nop
}
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000b38:	f7ff febe 	bl	80008b8 <LL_RCC_IsActiveFlag_PINRST>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d00d      	beq.n	8000b5e <Reset_BackupDomain+0x2a>
 8000b42:	f7ff fecc 	bl	80008de <LL_RCC_IsActiveFlag_SFTRST>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d108      	bne.n	8000b5e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000b4c:	f003 f902 	bl	8003d54 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000b50:	f003 f900 	bl	8003d54 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000b54:	f7ff fe8e 	bl	8000874 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b58:	f7ff fe9d 	bl	8000896 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
}
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b68:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b6c:	f7ff feca 	bl	8000904 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b70:	213f      	movs	r1, #63	; 0x3f
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b74:	f7ff ff42 	bl	80009fc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b78:	213f      	movs	r1, #63	; 0x3f
 8000b7a:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b7c:	f7ff ff4c 	bl	8000a18 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b80:	213f      	movs	r1, #63	; 0x3f
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b84:	f7ff fef4 	bl	8000970 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b88:	213f      	movs	r1, #63	; 0x3f
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b8c:	f7ff ff13 	bl	80009b6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b90:	213f      	movs	r1, #63	; 0x3f
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b94:	f7ff fefe 	bl	8000994 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b98:	213f      	movs	r1, #63	; 0x3f
 8000b9a:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <Reset_IPCC+0x40>)
 8000b9c:	f7ff ff1d 	bl	80009da <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000ba0:	bf00      	nop
}
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	58000c00 	.word	0x58000c00

08000ba8 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f009 fadc 	bl	800a16c <OTP_Read>
 8000bb4:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	799b      	ldrb	r3, [r3, #6]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fe25 	bl	8000810 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
}
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <System_Init>:

static void System_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  Init_Smps();
 8000bd4:	f7ff ff98 	bl	8000b08 <Init_Smps>

  Init_Exti();
 8000bd8:	f7ff ff9d 	bl	8000b16 <Init_Exti>

  Init_Rtc();
 8000bdc:	f000 f802 	bl	8000be4 <Init_Rtc>

  return;
 8000be0:	bf00      	nop
}
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <Init_Rtc+0x1c>)
 8000bea:	f7ff ff40 	bl	8000a6e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <Init_Rtc+0x1c>)
 8000bf2:	f7ff ff4c 	bl	8000a8e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000bf6:	4802      	ldr	r0, [pc, #8]	; (8000c00 <Init_Rtc+0x1c>)
 8000bf8:	f7ff ff2c 	bl	8000a54 <LL_RTC_EnableWriteProtection>

  return;
 8000bfc:	bf00      	nop
}
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40002800 	.word	0x40002800

08000c04 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c0c:	f7ff fe1e 	bl	800084c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c10:	f00b fc62 	bl	800c4d8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c14:	2004      	movs	r0, #4
 8000c16:	f7ff fdd1 	bl	80007bc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000c1a:	bf00      	nop
}
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8000c26:	f008 ffa9 	bl	8009b7c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000c2a:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <appe_Tl_Init+0x50>)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c32:	f00b fd8f 	bl	800c754 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <appe_Tl_Init+0x54>)
 8000c38:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <appe_Tl_Init+0x58>)
 8000c3c:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	480e      	ldr	r0, [pc, #56]	; (8000c7c <appe_Tl_Init+0x5c>)
 8000c44:	f008 fe5c 	bl	8009900 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <appe_Tl_Init+0x60>)
 8000c4a:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <appe_Tl_Init+0x64>)
 8000c4e:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <appe_Tl_Init+0x68>)
 8000c52:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c54:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c58:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f009 f8ce 	bl	8009e00 <TL_MM_Init>

  TL_Enable();
 8000c64:	f008 ff84 	bl	8009b70 <TL_Enable>

  return;
 8000c68:	bf00      	nop
}
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	08009939 	.word	0x08009939
 8000c74:	20030734 	.word	0x20030734
 8000c78:	08000c8d 	.word	0x08000c8d
 8000c7c:	08000ca5 	.word	0x08000ca5
 8000c80:	2003094c 	.word	0x2003094c
 8000c84:	20030840 	.word	0x20030840
 8000c88:	200301f8 	.word	0x200301f8

08000c8c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c96:	bf00      	nop
}
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	330b      	adds	r3, #11
 8000cb2:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	d860      	bhi.n	8000d84 <APPE_SysUserEvtRx+0xe0>
 8000cc2:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <APPE_SysUserEvtRx+0x24>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000ce9 	.word	0x08000ce9
 8000ccc:	08000d2b 	.word	0x08000d2b
 8000cd0:	08000d39 	.word	0x08000d39
 8000cd4:	08000d85 	.word	0x08000d85
 8000cd8:	08000d55 	.word	0x08000d55
 8000cdc:	08000d65 	.word	0x08000d65
 8000ce0:	08000d6d 	.word	0x08000d6d
 8000ce4:	08000d7d 	.word	0x08000d7d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4618      	mov	r0, r3
 8000cee:	f008 fbbd 	bl	800946c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000cf2:	7b3b      	ldrb	r3, [r7, #12]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	7b7b      	ldrb	r3, [r7, #13]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	4824      	ldr	r0, [pc, #144]	; (8000d90 <APPE_SysUserEvtRx+0xec>)
 8000cfe:	f00b ff2d 	bl	800cb5c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000d02:	7c3b      	ldrb	r3, [r7, #16]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4823      	ldr	r0, [pc, #140]	; (8000d94 <APPE_SysUserEvtRx+0xf0>)
 8000d08:	f00b ff28 	bl	800cb5c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000d0c:	7dbb      	ldrb	r3, [r7, #22]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	461a      	mov	r2, r3
 8000d14:	7e3b      	ldrb	r3, [r7, #24]
 8000d16:	4820      	ldr	r0, [pc, #128]	; (8000d98 <APPE_SysUserEvtRx+0xf4>)
 8000d18:	f00b ff20 	bl	800cb5c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000d1c:	481f      	ldr	r0, [pc, #124]	; (8000d9c <APPE_SysUserEvtRx+0xf8>)
 8000d1e:	f00b ff1d 	bl	800cb5c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f870 	bl	8000e08 <APPE_SysEvtReadyProcessing>
    break;
 8000d28:	e02d      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000d2a:	481d      	ldr	r0, [pc, #116]	; (8000da0 <APPE_SysUserEvtRx+0xfc>)
 8000d2c:	f00b ff16 	bl	800cb5c <iprintf>
    APPE_SysEvtError(pPayload);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f843 	bl	8000dbc <APPE_SysEvtError>
    break;
 8000d36:	e026      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000d38:	481a      	ldr	r0, [pc, #104]	; (8000da4 <APPE_SysUserEvtRx+0x100>)
 8000d3a:	f00b ff7d 	bl	800cc38 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000d42:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4816      	ldr	r0, [pc, #88]	; (8000da8 <APPE_SysUserEvtRx+0x104>)
 8000d4e:	f00b ff05 	bl	800cb5c <iprintf>
    break;
 8000d52:	e018      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4813      	ldr	r0, [pc, #76]	; (8000dac <APPE_SysUserEvtRx+0x108>)
 8000d5e:	f00b fefd 	bl	800cb5c <iprintf>
    break;
 8000d62:	e010      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8000d64:	4812      	ldr	r0, [pc, #72]	; (8000db0 <APPE_SysUserEvtRx+0x10c>)
 8000d66:	f00b fef9 	bl	800cb5c <iprintf>
    break;
 8000d6a:	e00c      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4619      	mov	r1, r3
 8000d74:	480f      	ldr	r0, [pc, #60]	; (8000db4 <APPE_SysUserEvtRx+0x110>)
 8000d76:	f00b fef1 	bl	800cb5c <iprintf>
    break;
 8000d7a:	e004      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8000d7c:	480e      	ldr	r0, [pc, #56]	; (8000db8 <APPE_SysUserEvtRx+0x114>)
 8000d7e:	f00b feed 	bl	800cb5c <iprintf>
    break;
 8000d82:	e000      	b.n	8000d86 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8000d84:	bf00      	nop
  }

  return;
 8000d86:	bf00      	nop
}
 8000d88:	3720      	adds	r7, #32
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	0800da24 	.word	0x0800da24
 8000d94:	0800da48 	.word	0x0800da48
 8000d98:	0800da64 	.word	0x0800da64
 8000d9c:	0800da7c 	.word	0x0800da7c
 8000da0:	0800da9c 	.word	0x0800da9c
 8000da4:	0800dac0 	.word	0x0800dac0
 8000da8:	0800db10 	.word	0x0800db10
 8000dac:	0800db38 	.word	0x0800db38
 8000db0:	0800db74 	.word	0x0800db74
 8000db4:	0800db98 	.word	0x0800db98
 8000db8:	0800dbd4 	.word	0x0800dbd4

08000dbc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	330b      	adds	r3, #11
 8000dca:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3302      	adds	r3, #2
 8000dd0:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <APPE_SysEvtError+0x40>)
 8000dda:	f00b febf 	bl	800cb5c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d103      	bne.n	8000dee <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <APPE_SysEvtError+0x44>)
 8000de8:	f00b ff26 	bl	800cc38 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000dec:	e003      	b.n	8000df6 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <APPE_SysEvtError+0x48>)
 8000df0:	f00b ff22 	bl	800cc38 <puts>
  return;
 8000df4:	bf00      	nop
}
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	0800dbf8 	.word	0x0800dbf8
 8000e00:	0800dc28 	.word	0x0800dc28
 8000e04:	0800dc64 	.word	0x0800dc64

08000e08 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	330b      	adds	r3, #11
 8000e2c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3302      	adds	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d128      	bne.n	8000e8e <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8000e3c:	481d      	ldr	r0, [pc, #116]	; (8000eb4 <APPE_SysEvtReadyProcessing+0xac>)
 8000e3e:	f00b fefb 	bl	800cc38 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000e42:	f7ff fbdf 	bl	8000604 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000e46:	230f      	movs	r3, #15
 8000e48:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000e4a:	237f      	movs	r3, #127	; 0x7f
 8000e4c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000e4e:	f7ff fd81 	bl	8000954 <LL_DBGMCU_GetRevisionID>
 8000e52:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8000e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e56:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <APPE_SysEvtReadyProcessing+0xb0>)
 8000e58:	f00b fe80 	bl	800cb5c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000e62:	f7ff fd69 	bl	8000938 <LL_DBGMCU_GetDeviceID>
 8000e66:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8000e68:	6a39      	ldr	r1, [r7, #32]
 8000e6a:	4814      	ldr	r0, [pc, #80]	; (8000ebc <APPE_SysEvtReadyProcessing+0xb4>)
 8000e6c:	f00b fe76 	bl	800cb5c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8000e70:	6a3b      	ldr	r3, [r7, #32]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f008 fae0 	bl	8009440 <SHCI_C2_Config>

    APP_BLE_Init();
 8000e80:	f009 fe80 	bl	800ab84 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000e84:	2100      	movs	r1, #0
 8000e86:	2001      	movs	r0, #1
 8000e88:	f00b fb38 	bl	800c4fc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000e8c:	e00e      	b.n	8000eac <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <APPE_SysEvtReadyProcessing+0xb8>)
 8000e98:	f00b fe60 	bl	800cb5c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
  return;
 8000ea2:	e003      	b.n	8000eac <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8000ea4:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <APPE_SysEvtReadyProcessing+0xbc>)
 8000ea6:	f00b fe59 	bl	800cb5c <iprintf>
  return;
 8000eaa:	bf00      	nop
}
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	0800dc9c 	.word	0x0800dc9c
 8000eb8:	0800dcb8 	.word	0x0800dcb8
 8000ebc:	0800dcdc 	.word	0x0800dcdc
 8000ec0:	0800dcfc 	.word	0x0800dcfc
 8000ec4:	0800dd30 	.word	0x0800dd30

08000ec8 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f001 fd9d 	bl	8002a0c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f001 fd9a 	bl	8002a0c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f001 fd97 	bl	8002a0c <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f001 fdce 	bl	8002a80 <BSP_LED_On>
#endif

  return;
 8000ee4:	bf00      	nop
}
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <Button_Init>:

static void Button_Init( void )
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000eec:	2101      	movs	r1, #1
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f001 fdfa 	bl	8002ae8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f001 fdf6 	bl	8002ae8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000efc:	2101      	movs	r1, #1
 8000efe:	2002      	movs	r0, #2
 8000f00:	f001 fdf2 	bl	8002ae8 <BSP_PB_Init>
#endif

  return;
 8000f04:	bf00      	nop
}
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f001 ff78 	bl	8002e04 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d00a      	beq.n	8000f38 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000f22:	f001 ff87 	bl	8002e34 <HAL_GetTickFreq>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f30:	e002      	b.n	8000f38 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000f32:	f7ff fd7f 	bl	8000a34 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000f36:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000f38:	f001 ff64 	bl	8002e04 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f4      	bhi.n	8000f32 <HAL_Delay+0x2a>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000f56:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5a:	f00b faff 	bl	800c55c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000f66:	bf00      	nop
}
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7e:	f00b faed 	bl	800c55c <UTIL_SEQ_Run>
  return;
 8000f82:	bf00      	nop
}
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000f92:	2100      	movs	r1, #0
 8000f94:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f98:	f00b fbfe 	bl	800c798 <UTIL_SEQ_SetTask>
  return;
 8000f9c:	bf00      	nop
}
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000fac:	2002      	movs	r0, #2
 8000fae:	f00b fc5f 	bl	800c870 <UTIL_SEQ_SetEvt>
  return;
 8000fb2:	bf00      	nop
}
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f00b fc74 	bl	800c8b0 <UTIL_SEQ_WaitEvt>
  return;
 8000fc8:	bf00      	nop
}
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	2b10      	cmp	r3, #16
 8000fde:	d006      	beq.n	8000fee <HAL_GPIO_EXTI_Callback+0x1e>
 8000fe0:	2b10      	cmp	r3, #16
 8000fe2:	dc0d      	bgt.n	8001000 <HAL_GPIO_EXTI_Callback+0x30>
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d005      	beq.n	8000ff4 <HAL_GPIO_EXTI_Callback+0x24>
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000fec:	e008      	b.n	8001000 <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 8000fee:	f00a f845 	bl	800b07c <APP_BLE_Key_Button1_Action>
      break; 
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8000ff4:	f00a f852 	bl	800b09c <APP_BLE_Key_Button2_Action>
      break; 
 8000ff8:	e003      	b.n	8001002 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8000ffa:	f00a f855 	bl	800b0a8 <APP_BLE_Key_Button3_Action>
      break;
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001000:	bf00      	nop

  }
  return;
 8001002:	bf00      	nop
}
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <RxUART_Init>:

static void RxUART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <RxUART_Init+0x14>)
 8001012:	2201      	movs	r2, #1
 8001014:	4903      	ldr	r1, [pc, #12]	; (8001024 <RxUART_Init+0x18>)
 8001016:	2000      	movs	r0, #0
 8001018:	f000 ff58 	bl	8001ecc <HW_UART_Receive_IT>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	08001029 	.word	0x08001029
 8001024:	20000104 	.word	0x20000104

08001028 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <RxCpltCallback+0x5c>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2bff      	cmp	r3, #255	; 0xff
 8001032:	d81e      	bhi.n	8001072 <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <RxCpltCallback+0x60>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b0d      	cmp	r3, #13
 800103a:	d10f      	bne.n	800105c <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 800103c:	4913      	ldr	r1, [pc, #76]	; (800108c <RxCpltCallback+0x64>)
 800103e:	4814      	ldr	r0, [pc, #80]	; (8001090 <RxCpltCallback+0x68>)
 8001040:	f00b fd8c 	bl	800cb5c <iprintf>

      UartCmdExecute();
 8001044:	f000 f828 	bl	8001098 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <RxCpltCallback+0x5c>)
 800104a:	2200      	movs	r2, #0
 800104c:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 800104e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001052:	2100      	movs	r1, #0
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <RxCpltCallback+0x64>)
 8001056:	f00b fecf 	bl	800cdf8 <memset>
 800105a:	e00a      	b.n	8001072 <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <RxCpltCallback+0x5c>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	b291      	uxth	r1, r2
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <RxCpltCallback+0x5c>)
 8001066:	8011      	strh	r1, [r2, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <RxCpltCallback+0x60>)
 800106c:	7819      	ldrb	r1, [r3, #0]
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <RxCpltCallback+0x64>)
 8001070:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <RxCpltCallback+0x6c>)
 8001074:	2201      	movs	r2, #1
 8001076:	4904      	ldr	r1, [pc, #16]	; (8001088 <RxCpltCallback+0x60>)
 8001078:	2000      	movs	r0, #0
 800107a:	f000 ff27 	bl	8001ecc <HW_UART_Receive_IT>
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000020c 	.word	0x2000020c
 8001088:	20000104 	.word	0x20000104
 800108c:	2000010c 	.word	0x2000010c
 8001090:	0800dd64 	.word	0x0800dd64
 8001094:	08001029 	.word	0x08001029

08001098 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 800109c:	491c      	ldr	r1, [pc, #112]	; (8001110 <UartCmdExecute+0x78>)
 800109e:	481d      	ldr	r0, [pc, #116]	; (8001114 <UartCmdExecute+0x7c>)
 80010a0:	f7ff f86e 	bl	8000180 <strcmp>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d109      	bne.n	80010be <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <UartCmdExecute+0x80>)
 80010ac:	f00b fdc4 	bl	800cc38 <puts>
    exti_handle.Line = EXTI_LINE_4;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <UartCmdExecute+0x84>)
 80010b2:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <UartCmdExecute+0x88>)
 80010b4:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80010b6:	4819      	ldr	r0, [pc, #100]	; (800111c <UartCmdExecute+0x84>)
 80010b8:	f002 fbe0 	bl	800387c <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 80010bc:	e026      	b.n	800110c <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 80010be:	4919      	ldr	r1, [pc, #100]	; (8001124 <UartCmdExecute+0x8c>)
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <UartCmdExecute+0x7c>)
 80010c2:	f7ff f85d 	bl	8000180 <strcmp>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10a      	bne.n	80010e2 <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 80010cc:	4816      	ldr	r0, [pc, #88]	; (8001128 <UartCmdExecute+0x90>)
 80010ce:	f00b fdb3 	bl	800cc38 <puts>
    exti_handle.Line = EXTI_LINE_0;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <UartCmdExecute+0x84>)
 80010d4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80010d8:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80010da:	4810      	ldr	r0, [pc, #64]	; (800111c <UartCmdExecute+0x84>)
 80010dc:	f002 fbce 	bl	800387c <HAL_EXTI_GenerateSWI>
}
 80010e0:	e014      	b.n	800110c <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 80010e2:	4912      	ldr	r1, [pc, #72]	; (800112c <UartCmdExecute+0x94>)
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <UartCmdExecute+0x7c>)
 80010e6:	f7ff f84b 	bl	8000180 <strcmp>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 80010f0:	480f      	ldr	r0, [pc, #60]	; (8001130 <UartCmdExecute+0x98>)
 80010f2:	f00b fda1 	bl	800cc38 <puts>
    exti_handle.Line = EXTI_LINE_1;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <UartCmdExecute+0x84>)
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <UartCmdExecute+0x9c>)
 80010fa:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <UartCmdExecute+0x84>)
 80010fe:	f002 fbbd 	bl	800387c <HAL_EXTI_GenerateSWI>
}
 8001102:	e003      	b.n	800110c <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 8001104:	4903      	ldr	r1, [pc, #12]	; (8001114 <UartCmdExecute+0x7c>)
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <UartCmdExecute+0xa0>)
 8001108:	f00b fd28 	bl	800cb5c <iprintf>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	0800dd74 	.word	0x0800dd74
 8001114:	2000010c 	.word	0x2000010c
 8001118:	0800dd78 	.word	0x0800dd78
 800111c:	200000fc 	.word	0x200000fc
 8001120:	16000004 	.word	0x16000004
 8001124:	0800dd80 	.word	0x0800dd80
 8001128:	0800dd84 	.word	0x0800dd84
 800112c:	0800dd8c 	.word	0x0800dd8c
 8001130:	0800dd90 	.word	0x0800dd90
 8001134:	16000001 	.word	0x16000001
 8001138:	0800dd98 	.word	0x0800dd98

0800113c <Red_On>:

/* Private function prototypes -----------------------------------------------*/

/* Private user code ---------------------------------------------------------*/
void Red_On()
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2102      	movs	r1, #2
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <Red_On+0x14>)
 8001146:	f002 fd2b 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	48000400 	.word	0x48000400

08001154 <Red_Off>:

void Red_Off()
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2102      	movs	r1, #2
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <Red_Off+0x14>)
 800115e:	f002 fd1f 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	48000400 	.word	0x48000400

0800116c <Green_On>:

void Green_On()
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2101      	movs	r1, #1
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <Green_On+0x14>)
 8001176:	f002 fd13 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	48000400 	.word	0x48000400

08001184 <Green_Off>:

void Green_Off()
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2101      	movs	r1, #1
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <Green_Off+0x14>)
 800118e:	f002 fd07 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	48000400 	.word	0x48000400

0800119c <Blue_On>:

void Blue_On()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2120      	movs	r1, #32
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <Blue_On+0x14>)
 80011a6:	f002 fcfb 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	48000400 	.word	0x48000400

080011b4 <Blue_Off>:

void Blue_Off()
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2120      	movs	r1, #32
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <Blue_Off+0x14>)
 80011be:	f002 fcef 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	48000400 	.word	0x48000400

080011cc <LL_EXTI_EnableIT_0_31>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80011d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80011da:	4905      	ldr	r1, [pc, #20]	; (80011f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	58000800 	.word	0x58000800

080011f4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4904      	ldr	r1, [pc, #16]	; (8001214 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4313      	orrs	r3, r2
 8001206:	600b      	str	r3, [r1, #0]

}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	58000800 	.word	0x58000800

08001218 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <ReadRtcSsrValue+0x3c>)
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	b29b      	uxth	r3, r3
 8001224:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <ReadRtcSsrValue+0x3c>)
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	b29b      	uxth	r3, r3
 800122c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800122e:	e005      	b.n	800123c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <ReadRtcSsrValue+0x3c>)
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	b29b      	uxth	r3, r3
 800123a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d1f5      	bne.n	8001230 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001244:	683b      	ldr	r3, [r7, #0]
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40002800 	.word	0x40002800

08001258 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001268:	79ba      	ldrb	r2, [r7, #6]
 800126a:	491d      	ldr	r1, [pc, #116]	; (80012e0 <LinkTimerAfter+0x88>)
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	3315      	adds	r3, #21
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b06      	cmp	r3, #6
 8001280:	d009      	beq.n	8001296 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	4916      	ldr	r1, [pc, #88]	; (80012e0 <LinkTimerAfter+0x88>)
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	440b      	add	r3, r1
 8001290:	3314      	adds	r3, #20
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001296:	79fa      	ldrb	r2, [r7, #7]
 8001298:	4911      	ldr	r1, [pc, #68]	; (80012e0 <LinkTimerAfter+0x88>)
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	3315      	adds	r3, #21
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <LinkTimerAfter+0x88>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	3314      	adds	r3, #20
 80012ba:	79ba      	ldrb	r2, [r7, #6]
 80012bc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80012be:	79ba      	ldrb	r2, [r7, #6]
 80012c0:	4907      	ldr	r1, [pc, #28]	; (80012e0 <LinkTimerAfter+0x88>)
 80012c2:	4613      	mov	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	440b      	add	r3, r1
 80012cc:	3315      	adds	r3, #21
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	701a      	strb	r2, [r3, #0]

  return;
 80012d2:	bf00      	nop
}
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000210 	.word	0x20000210

080012e4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	460a      	mov	r2, r1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	4613      	mov	r3, r2
 80012f2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <LinkTimerBefore+0xb8>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	79ba      	ldrb	r2, [r7, #6]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d032      	beq.n	8001366 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001300:	79ba      	ldrb	r2, [r7, #6]
 8001302:	4927      	ldr	r1, [pc, #156]	; (80013a0 <LinkTimerBefore+0xbc>)
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	440b      	add	r3, r1
 800130e:	3314      	adds	r3, #20
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	4922      	ldr	r1, [pc, #136]	; (80013a0 <LinkTimerBefore+0xbc>)
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	440b      	add	r3, r1
 8001322:	3315      	adds	r3, #21
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	491d      	ldr	r1, [pc, #116]	; (80013a0 <LinkTimerBefore+0xbc>)
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	440b      	add	r3, r1
 8001336:	3315      	adds	r3, #21
 8001338:	79ba      	ldrb	r2, [r7, #6]
 800133a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800133c:	79fa      	ldrb	r2, [r7, #7]
 800133e:	4918      	ldr	r1, [pc, #96]	; (80013a0 <LinkTimerBefore+0xbc>)
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	440b      	add	r3, r1
 800134a:	3314      	adds	r3, #20
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001350:	79ba      	ldrb	r2, [r7, #6]
 8001352:	4913      	ldr	r1, [pc, #76]	; (80013a0 <LinkTimerBefore+0xbc>)
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	3314      	adds	r3, #20
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001364:	e014      	b.n	8001390 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001366:	79fa      	ldrb	r2, [r7, #7]
 8001368:	490d      	ldr	r1, [pc, #52]	; (80013a0 <LinkTimerBefore+0xbc>)
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	440b      	add	r3, r1
 8001374:	3315      	adds	r3, #21
 8001376:	79ba      	ldrb	r2, [r7, #6]
 8001378:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800137a:	79ba      	ldrb	r2, [r7, #6]
 800137c:	4908      	ldr	r1, [pc, #32]	; (80013a0 <LinkTimerBefore+0xbc>)
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	3314      	adds	r3, #20
 800138a:	79fa      	ldrb	r2, [r7, #7]
 800138c:	701a      	strb	r2, [r3, #0]
  return;
 800138e:	bf00      	nop
}
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	200002a0 	.word	0x200002a0
 80013a0:	20000210 	.word	0x20000210

080013a4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013ae:	4b4e      	ldr	r3, [pc, #312]	; (80014e8 <linkTimer+0x144>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b06      	cmp	r3, #6
 80013b6:	d118      	bne.n	80013ea <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80013b8:	4b4b      	ldr	r3, [pc, #300]	; (80014e8 <linkTimer+0x144>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <linkTimer+0x148>)
 80013c0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80013c2:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <linkTimer+0x144>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	4949      	ldr	r1, [pc, #292]	; (80014f0 <linkTimer+0x14c>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	3315      	adds	r3, #21
 80013d8:	2206      	movs	r2, #6
 80013da:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80013dc:	4b45      	ldr	r3, [pc, #276]	; (80014f4 <linkTimer+0x150>)
 80013de:	f04f 32ff 	mov.w	r2, #4294967295
 80013e2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	81fb      	strh	r3, [r7, #14]
 80013e8:	e078      	b.n	80014dc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80013ea:	f000 f909 	bl	8001600 <ReturnTimeElapsed>
 80013ee:	4603      	mov	r3, r0
 80013f0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80013f2:	79fa      	ldrb	r2, [r7, #7]
 80013f4:	493e      	ldr	r1, [pc, #248]	; (80014f0 <linkTimer+0x14c>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	3308      	adds	r3, #8
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	89fb      	ldrh	r3, [r7, #14]
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	4419      	add	r1, r3
 800140a:	4839      	ldr	r0, [pc, #228]	; (80014f0 <linkTimer+0x14c>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4403      	add	r3, r0
 8001416:	3308      	adds	r3, #8
 8001418:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	4934      	ldr	r1, [pc, #208]	; (80014f0 <linkTimer+0x14c>)
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	440b      	add	r3, r1
 8001428:	3308      	adds	r3, #8
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <linkTimer+0x144>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4619      	mov	r1, r3
 8001436:	4a2e      	ldr	r2, [pc, #184]	; (80014f0 <linkTimer+0x14c>)
 8001438:	460b      	mov	r3, r1
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	440b      	add	r3, r1
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4413      	add	r3, r2
 8001442:	3308      	adds	r3, #8
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	429a      	cmp	r2, r3
 800144a:	d337      	bcc.n	80014bc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800144c:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <linkTimer+0x144>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001452:	7b7a      	ldrb	r2, [r7, #13]
 8001454:	4926      	ldr	r1, [pc, #152]	; (80014f0 <linkTimer+0x14c>)
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	3315      	adds	r3, #21
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001466:	e013      	b.n	8001490 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001468:	7b7a      	ldrb	r2, [r7, #13]
 800146a:	4921      	ldr	r1, [pc, #132]	; (80014f0 <linkTimer+0x14c>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	3315      	adds	r3, #21
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800147c:	7b7a      	ldrb	r2, [r7, #13]
 800147e:	491c      	ldr	r1, [pc, #112]	; (80014f0 <linkTimer+0x14c>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	3315      	adds	r3, #21
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001490:	7b3b      	ldrb	r3, [r7, #12]
 8001492:	2b06      	cmp	r3, #6
 8001494:	d00b      	beq.n	80014ae <linkTimer+0x10a>
 8001496:	7b3a      	ldrb	r2, [r7, #12]
 8001498:	4915      	ldr	r1, [pc, #84]	; (80014f0 <linkTimer+0x14c>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	440b      	add	r3, r1
 80014a4:	3308      	adds	r3, #8
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d2dc      	bcs.n	8001468 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80014ae:	7b7a      	ldrb	r2, [r7, #13]
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fecf 	bl	8001258 <LinkTimerAfter>
 80014ba:	e00f      	b.n	80014dc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <linkTimer+0x144>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff0c 	bl	80012e4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <linkTimer+0x144>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <linkTimer+0x148>)
 80014d4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <linkTimer+0x144>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80014dc:	89fb      	ldrh	r3, [r7, #14]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200002a0 	.word	0x200002a0
 80014ec:	200002a1 	.word	0x200002a1
 80014f0:	20000210 	.word	0x20000210
 80014f4:	200002a4 	.word	0x200002a4

080014f8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <UnlinkTimer+0xf8>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	79fa      	ldrb	r2, [r7, #7]
 8001510:	429a      	cmp	r2, r3
 8001512:	d111      	bne.n	8001538 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <UnlinkTimer+0xf8>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <UnlinkTimer+0xfc>)
 800151c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800151e:	79fa      	ldrb	r2, [r7, #7]
 8001520:	4935      	ldr	r1, [pc, #212]	; (80015f8 <UnlinkTimer+0x100>)
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	3315      	adds	r3, #21
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <UnlinkTimer+0xf8>)
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	e03e      	b.n	80015b6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001538:	79fa      	ldrb	r2, [r7, #7]
 800153a:	492f      	ldr	r1, [pc, #188]	; (80015f8 <UnlinkTimer+0x100>)
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	3314      	adds	r3, #20
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800154c:	79fa      	ldrb	r2, [r7, #7]
 800154e:	492a      	ldr	r1, [pc, #168]	; (80015f8 <UnlinkTimer+0x100>)
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	3315      	adds	r3, #21
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001560:	79f9      	ldrb	r1, [r7, #7]
 8001562:	7bfa      	ldrb	r2, [r7, #15]
 8001564:	4824      	ldr	r0, [pc, #144]	; (80015f8 <UnlinkTimer+0x100>)
 8001566:	460b      	mov	r3, r1
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	440b      	add	r3, r1
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4403      	add	r3, r0
 8001570:	3315      	adds	r3, #21
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2d8      	uxtb	r0, r3
 8001576:	4920      	ldr	r1, [pc, #128]	; (80015f8 <UnlinkTimer+0x100>)
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3315      	adds	r3, #21
 8001584:	4602      	mov	r2, r0
 8001586:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	2b06      	cmp	r3, #6
 800158c:	d013      	beq.n	80015b6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800158e:	79f9      	ldrb	r1, [r7, #7]
 8001590:	7bba      	ldrb	r2, [r7, #14]
 8001592:	4819      	ldr	r0, [pc, #100]	; (80015f8 <UnlinkTimer+0x100>)
 8001594:	460b      	mov	r3, r1
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	440b      	add	r3, r1
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4403      	add	r3, r0
 800159e:	3314      	adds	r3, #20
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2d8      	uxtb	r0, r3
 80015a4:	4914      	ldr	r1, [pc, #80]	; (80015f8 <UnlinkTimer+0x100>)
 80015a6:	4613      	mov	r3, r2
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	440b      	add	r3, r1
 80015b0:	3314      	adds	r3, #20
 80015b2:	4602      	mov	r2, r0
 80015b4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	490f      	ldr	r1, [pc, #60]	; (80015f8 <UnlinkTimer+0x100>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	330c      	adds	r3, #12
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <UnlinkTimer+0xf8>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b06      	cmp	r3, #6
 80015d2:	d107      	bne.n	80015e4 <UnlinkTimer+0xec>
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d104      	bne.n	80015e4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <UnlinkTimer+0x104>)
 80015dc:	f04f 32ff 	mov.w	r2, #4294967295
 80015e0:	601a      	str	r2, [r3, #0]
  }

  return;
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
}
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	200002a0 	.word	0x200002a0
 80015f4:	200002a1 	.word	0x200002a1
 80015f8:	20000210 	.word	0x20000210
 80015fc:	200002a4 	.word	0x200002a4

08001600 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <ReturnTimeElapsed+0x70>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160e:	d026      	beq.n	800165e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001610:	f7ff fe02 	bl	8001218 <ReadRtcSsrValue>
 8001614:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <ReturnTimeElapsed+0x70>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	d805      	bhi.n	800162c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <ReturnTimeElapsed+0x70>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	e00a      	b.n	8001642 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <ReturnTimeElapsed+0x74>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <ReturnTimeElapsed+0x70>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	4413      	add	r3, r2
 8001640:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <ReturnTimeElapsed+0x78>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <ReturnTimeElapsed+0x7c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	40d3      	lsrs	r3, r2
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	e001      	b.n	8001662 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	b29b      	uxth	r3, r3
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002a4 	.word	0x200002a4
 8001674:	200002ac 	.word	0x200002ac
 8001678:	200002aa 	.word	0x200002aa
 800167c:	200002a9 	.word	0x200002a9

08001680 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d108      	bne.n	80016a2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001690:	f7ff fdc2 	bl	8001218 <ReadRtcSsrValue>
 8001694:	4603      	mov	r3, r0
 8001696:	4a21      	ldr	r2, [pc, #132]	; (800171c <RestartWakeupCounter+0x9c>)
 8001698:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800169a:	2003      	movs	r0, #3
 800169c:	f001 fd5f 	bl	800315e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80016a0:	e039      	b.n	8001716 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d803      	bhi.n	80016b0 <RestartWakeupCounter+0x30>
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <RestartWakeupCounter+0xa0>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d002      	beq.n	80016b6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80016b6:	bf00      	nop
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <RestartWakeupCounter+0xa4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f8      	beq.n	80016b8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <RestartWakeupCounter+0xa4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <RestartWakeupCounter+0xa4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80016d6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <RestartWakeupCounter+0xa8>)
 80016da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016de:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80016e0:	2003      	movs	r0, #3
 80016e2:	f001 fd4a 	bl	800317a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <RestartWakeupCounter+0xac>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	88fa      	ldrh	r2, [r7, #6]
 80016f0:	490e      	ldr	r1, [pc, #56]	; (800172c <RestartWakeupCounter+0xac>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80016f6:	f7ff fd8f 	bl	8001218 <ReadRtcSsrValue>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a07      	ldr	r2, [pc, #28]	; (800171c <RestartWakeupCounter+0x9c>)
 80016fe:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <RestartWakeupCounter+0xa4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	4b07      	ldr	r3, [pc, #28]	; (8001724 <RestartWakeupCounter+0xa4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800170e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001710:	f3af 8000 	nop.w
  return ;
 8001714:	bf00      	nop
}
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002a4 	.word	0x200002a4
 8001720:	200002a9 	.word	0x200002a9
 8001724:	200004dc 	.word	0x200004dc
 8001728:	58000800 	.word	0x58000800
 800172c:	40002800 	.word	0x40002800

08001730 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001736:	4b45      	ldr	r3, [pc, #276]	; (800184c <RescheduleTimerList+0x11c>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d107      	bne.n	8001754 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001744:	bf00      	nop
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <RescheduleTimerList+0x120>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f8      	bne.n	8001746 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001754:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <RescheduleTimerList+0x120>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <RescheduleTimerList+0x120>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001762:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001764:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <RescheduleTimerList+0x124>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	493a      	ldr	r1, [pc, #232]	; (8001858 <RescheduleTimerList+0x128>)
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3308      	adds	r3, #8
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800177e:	f7ff ff3f 	bl	8001600 <ReturnTimeElapsed>
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	429a      	cmp	r2, r3
 800178c:	d205      	bcs.n	800179a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <RescheduleTimerList+0x12c>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	e04d      	b.n	8001836 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	4a30      	ldr	r2, [pc, #192]	; (8001860 <RescheduleTimerList+0x130>)
 800179e:	8812      	ldrh	r2, [r2, #0]
 80017a0:	b292      	uxth	r2, r2
 80017a2:	4413      	add	r3, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d906      	bls.n	80017ba <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80017ac:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <RescheduleTimerList+0x130>)
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <RescheduleTimerList+0x12c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e03d      	b.n	8001836 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <RescheduleTimerList+0x12c>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017ca:	e034      	b.n	8001836 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	4922      	ldr	r1, [pc, #136]	; (8001858 <RescheduleTimerList+0x128>)
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	3308      	adds	r3, #8
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d20a      	bcs.n	80017fa <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	491c      	ldr	r1, [pc, #112]	; (8001858 <RescheduleTimerList+0x128>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	3308      	adds	r3, #8
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e013      	b.n	8001822 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	4916      	ldr	r1, [pc, #88]	; (8001858 <RescheduleTimerList+0x128>)
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	3308      	adds	r3, #8
 800180a:	6819      	ldr	r1, [r3, #0]
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	1ac9      	subs	r1, r1, r3
 8001812:	4811      	ldr	r0, [pc, #68]	; (8001858 <RescheduleTimerList+0x128>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4403      	add	r3, r0
 800181e:	3308      	adds	r3, #8
 8001820:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001822:	7bfa      	ldrb	r2, [r7, #15]
 8001824:	490c      	ldr	r1, [pc, #48]	; (8001858 <RescheduleTimerList+0x128>)
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3315      	adds	r3, #21
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	2b06      	cmp	r3, #6
 800183a:	d1c7      	bne.n	80017cc <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800183c:	89bb      	ldrh	r3, [r7, #12]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff1e 	bl	8001680 <RestartWakeupCounter>

  return ;
 8001844:	bf00      	nop
}
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40002800 	.word	0x40002800
 8001850:	200004dc 	.word	0x200004dc
 8001854:	200002a0 	.word	0x200002a0
 8001858:	20000210 	.word	0x20000210
 800185c:	200002a8 	.word	0x200002a8
 8001860:	200002ae 	.word	0x200002ae

08001864 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800186a:	f3ef 8310 	mrs	r3, PRIMASK
 800186e:	617b      	str	r3, [r7, #20]
  return(result);
 8001870:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	22ca      	movs	r2, #202	; 0xca
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
 8001880:	4b57      	ldr	r3, [pc, #348]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2253      	movs	r2, #83	; 0x53
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001888:	4b55      	ldr	r3, [pc, #340]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	4b54      	ldr	r3, [pc, #336]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001896:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001898:	4b52      	ldr	r3, [pc, #328]	; (80019e4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80018a0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018a4:	4950      	ldr	r1, [pc, #320]	; (80019e8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	330c      	adds	r3, #12
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d16e      	bne.n	8001998 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80018ba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018be:	494a      	ldr	r1, [pc, #296]	; (80019e8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80018ce:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018d2:	4945      	ldr	r1, [pc, #276]	; (80019e8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	3310      	adds	r3, #16
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80018e4:	4b41      	ldr	r3, [pc, #260]	; (80019ec <HW_TS_RTC_Wakeup_Handler+0x188>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d04c      	beq.n	8001988 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80018ee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018f2:	493d      	ldr	r1, [pc, #244]	; (80019e8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	330d      	adds	r3, #13
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d124      	bne.n	8001952 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800190c:	2101      	movs	r1, #1
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fdf2 	bl	80014f8 <UnlinkTimer>
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f383 8810 	msr	PRIMASK, r3
}
 800191e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001920:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001924:	4930      	ldr	r1, [pc, #192]	; (80019e8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	3304      	adds	r3, #4
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f000 fa32 	bl	8001da4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	22ca      	movs	r2, #202	; 0xca
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2253      	movs	r2, #83	; 0x53
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
 8001950:	e012      	b.n	8001978 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f383 8810 	msr	PRIMASK, r3
}
 800195c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800195e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f99a 	bl	8001c9c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001968:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	22ca      	movs	r2, #202	; 0xca
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
 8001970:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2253      	movs	r2, #83	; 0x53
 8001976:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001978:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	4619      	mov	r1, r3
 8001980:	69b8      	ldr	r0, [r7, #24]
 8001982:	f000 fa95 	bl	8001eb0 <HW_TS_RTC_Int_AppNot>
 8001986:	e022      	b.n	80019ce <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001988:	f7ff fed2 	bl	8001730 <RescheduleTimerList>
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f383 8810 	msr	PRIMASK, r3
}
 8001996:	e01a      	b.n	80019ce <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001998:	bf00      	nop
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f8      	beq.n	800199a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80019b8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80019bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f383 8810 	msr	PRIMASK, r3
}
 80019cc:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	22ff      	movs	r2, #255	; 0xff
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80019d6:	bf00      	nop
}
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200004dc 	.word	0x200004dc
 80019e4:	200002a0 	.word	0x200002a0
 80019e8:	20000210 	.word	0x20000210
 80019ec:	200002a8 	.word	0x200002a8
 80019f0:	58000800 	.word	0x58000800

080019f4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001a00:	4b5e      	ldr	r3, [pc, #376]	; (8001b7c <HW_TS_Init+0x188>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	22ca      	movs	r2, #202	; 0xca
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
 8001a08:	4b5c      	ldr	r3, [pc, #368]	; (8001b7c <HW_TS_Init+0x188>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2253      	movs	r2, #83	; 0x53
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001a10:	4b5b      	ldr	r3, [pc, #364]	; (8001b80 <HW_TS_Init+0x18c>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a5a      	ldr	r2, [pc, #360]	; (8001b80 <HW_TS_Init+0x18c>)
 8001a16:	f043 0320 	orr.w	r3, r3, #32
 8001a1a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001a1c:	4b58      	ldr	r3, [pc, #352]	; (8001b80 <HW_TS_Init+0x18c>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f1c3 0304 	rsb	r3, r3, #4
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b55      	ldr	r3, [pc, #340]	; (8001b84 <HW_TS_Init+0x190>)
 8001a30:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001a32:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HW_TS_Init+0x18c>)
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a3a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001a3e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	fa92 f2a2 	rbit	r2, r2
 8001a46:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	2a00      	cmp	r2, #0
 8001a50:	d101      	bne.n	8001a56 <HW_TS_Init+0x62>
  {
    return 32U;
 8001a52:	2220      	movs	r2, #32
 8001a54:	e003      	b.n	8001a5e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	fab2 f282 	clz	r2, r2
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	40d3      	lsrs	r3, r2
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	3301      	adds	r3, #1
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <HW_TS_Init+0x194>)
 8001a68:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001a6a:	4b45      	ldr	r3, [pc, #276]	; (8001b80 <HW_TS_Init+0x18c>)
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <HW_TS_Init+0x198>)
 8001a7c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001a7e:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HW_TS_Init+0x198>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	4a40      	ldr	r2, [pc, #256]	; (8001b88 <HW_TS_Init+0x194>)
 8001a86:	7812      	ldrb	r2, [r2, #0]
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a90:	4a3c      	ldr	r2, [pc, #240]	; (8001b84 <HW_TS_Init+0x190>)
 8001a92:	7812      	ldrb	r2, [r2, #0]
 8001a94:	40d3      	lsrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d904      	bls.n	8001aac <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <HW_TS_Init+0x19c>)
 8001aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa8:	801a      	strh	r2, [r3, #0]
 8001aaa:	e003      	b.n	8001ab4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HW_TS_Init+0x19c>)
 8001ab2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001ab4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ab8:	f7ff fb9c 	bl	80011f4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001abc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ac0:	f7ff fb84 	bl	80011cc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d13d      	bne.n	8001b46 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001aca:	4b32      	ldr	r3, [pc, #200]	; (8001b94 <HW_TS_Init+0x1a0>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ad0:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HW_TS_Init+0x1a4>)
 8001ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	77fb      	strb	r3, [r7, #31]
 8001adc:	e00c      	b.n	8001af8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001ade:	7ffa      	ldrb	r2, [r7, #31]
 8001ae0:	492e      	ldr	r1, [pc, #184]	; (8001b9c <HW_TS_Init+0x1a8>)
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	440b      	add	r3, r1
 8001aec:	330c      	adds	r3, #12
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001af2:	7ffb      	ldrb	r3, [r7, #31]
 8001af4:	3301      	adds	r3, #1
 8001af6:	77fb      	strb	r3, [r7, #31]
 8001af8:	7ffb      	ldrb	r3, [r7, #31]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d9ef      	bls.n	8001ade <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001afe:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HW_TS_Init+0x1ac>)
 8001b00:	2206      	movs	r2, #6
 8001b02:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HW_TS_Init+0x188>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HW_TS_Init+0x188>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b12:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <HW_TS_Init+0x188>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <HW_TS_Init+0x188>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001b24:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <HW_TS_Init+0x1b0>)
 8001b28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b2c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001b2e:	2003      	movs	r0, #3
 8001b30:	f001 fb23 	bl	800317a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HW_TS_Init+0x188>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HW_TS_Init+0x188>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	e009      	b.n	8001b5a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HW_TS_Init+0x188>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f001 fb02 	bl	800315e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HW_TS_Init+0x188>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	22ff      	movs	r2, #255	; 0xff
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001b62:	2200      	movs	r2, #0
 8001b64:	2103      	movs	r1, #3
 8001b66:	2003      	movs	r0, #3
 8001b68:	f001 fab7 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f001 face 	bl	800310e <HAL_NVIC_EnableIRQ>

  return;
 8001b72:	bf00      	nop
}
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200004dc 	.word	0x200004dc
 8001b80:	40002800 	.word	0x40002800
 8001b84:	200002a9 	.word	0x200002a9
 8001b88:	200002aa 	.word	0x200002aa
 8001b8c:	200002ac 	.word	0x200002ac
 8001b90:	200002ae 	.word	0x200002ae
 8001b94:	200002a8 	.word	0x200002a8
 8001b98:	200002a4 	.word	0x200002a4
 8001b9c:	20000210 	.word	0x20000210
 8001ba0:	200002a0 	.word	0x200002a0
 8001ba4:	58000800 	.word	0x58000800

08001ba8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b08b      	sub	sp, #44	; 0x2c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8001bc2:	61fb      	str	r3, [r7, #28]
  return(result);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001bc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc8:	b672      	cpsid	i
}
 8001bca:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001bcc:	e004      	b.n	8001bd8 <HW_TS_Create+0x30>
  {
    loop++;
 8001bce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001bd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d80c      	bhi.n	8001bfa <HW_TS_Create+0x52>
 8001be0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001be4:	492c      	ldr	r1, [pc, #176]	; (8001c98 <HW_TS_Create+0xf0>)
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	330c      	adds	r3, #12
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1e9      	bne.n	8001bce <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d038      	beq.n	8001c74 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001c02:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001c06:	4924      	ldr	r1, [pc, #144]	; (8001c98 <HW_TS_Create+0xf0>)
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	330c      	adds	r3, #12
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	f383 8810 	msr	PRIMASK, r3
}
 8001c22:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001c24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001c28:	491b      	ldr	r1, [pc, #108]	; (8001c98 <HW_TS_Create+0xf0>)
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	3310      	adds	r3, #16
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001c3a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001c3e:	4916      	ldr	r1, [pc, #88]	; (8001c98 <HW_TS_Create+0xf0>)
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	440b      	add	r3, r1
 8001c4a:	330d      	adds	r3, #13
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001c50:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001c54:	4910      	ldr	r1, [pc, #64]	; (8001c98 <HW_TS_Create+0xf0>)
 8001c56:	4613      	mov	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4413      	add	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	440b      	add	r3, r1
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001c6a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c72:	e008      	b.n	8001c86 <HW_TS_Create+0xde>
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f383 8810 	msr	PRIMASK, r3
}
 8001c7e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001c86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	372c      	adds	r7, #44	; 0x2c
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000210 	.word	0x20000210

08001c9c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8001caa:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cac:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001cae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb0:	b672      	cpsid	i
}
 8001cb2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f001 fa38 	bl	800312a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cba:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <HW_TS_Stop+0xf0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	22ca      	movs	r2, #202	; 0xca
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8001cc2:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <HW_TS_Stop+0xf0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2253      	movs	r2, #83	; 0x53
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001cca:	79fa      	ldrb	r2, [r7, #7]
 8001ccc:	4930      	ldr	r1, [pc, #192]	; (8001d90 <HW_TS_Stop+0xf4>)
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	330c      	adds	r3, #12
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d142      	bne.n	8001d68 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fc06 	bl	80014f8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001cec:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <HW_TS_Stop+0xf8>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cf2:	7cfb      	ldrb	r3, [r7, #19]
 8001cf4:	2b06      	cmp	r3, #6
 8001cf6:	d12f      	bne.n	8001d58 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HW_TS_Stop+0xfc>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d04:	d107      	bne.n	8001d16 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d06:	bf00      	nop
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HW_TS_Stop+0xf0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f8      	bne.n	8001d08 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HW_TS_Stop+0xf0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HW_TS_Stop+0xf0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d24:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d26:	bf00      	nop
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HW_TS_Stop+0xf0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f8      	beq.n	8001d28 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HW_TS_Stop+0xf0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HW_TS_Stop+0xf0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d46:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HW_TS_Stop+0x100>)
 8001d4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d4e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d50:	2003      	movs	r0, #3
 8001d52:	f001 fa12 	bl	800317a <HAL_NVIC_ClearPendingIRQ>
 8001d56:	e007      	b.n	8001d68 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HW_TS_Stop+0x104>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	7cfa      	ldrb	r2, [r7, #19]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001d64:	f7ff fce4 	bl	8001730 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HW_TS_Stop+0xf0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	22ff      	movs	r2, #255	; 0xff
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001d70:	2003      	movs	r0, #3
 8001d72:	f001 f9cc 	bl	800310e <HAL_NVIC_EnableIRQ>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f383 8810 	msr	PRIMASK, r3
}
 8001d80:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001d82:	bf00      	nop
}
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200004dc 	.word	0x200004dc
 8001d90:	20000210 	.word	0x20000210
 8001d94:	200002a0 	.word	0x200002a0
 8001d98:	40002800 	.word	0x40002800
 8001d9c:	58000800 	.word	0x58000800
 8001da0:	200002a1 	.word	0x200002a1

08001da4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001db0:	79fa      	ldrb	r2, [r7, #7]
 8001db2:	493b      	ldr	r1, [pc, #236]	; (8001ea0 <HW_TS_Start+0xfc>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	440b      	add	r3, r1
 8001dbe:	330c      	adds	r3, #12
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d103      	bne.n	8001dd0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff66 	bl	8001c9c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8001dd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001dd8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dda:	b672      	cpsid	i
}
 8001ddc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001dde:	2003      	movs	r0, #3
 8001de0:	f001 f9a3 	bl	800312a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001de4:	4b2f      	ldr	r3, [pc, #188]	; (8001ea4 <HW_TS_Start+0x100>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	22ca      	movs	r2, #202	; 0xca
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HW_TS_Start+0x100>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2253      	movs	r2, #83	; 0x53
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001df4:	79fa      	ldrb	r2, [r7, #7]
 8001df6:	492a      	ldr	r1, [pc, #168]	; (8001ea0 <HW_TS_Start+0xfc>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	330c      	adds	r3, #12
 8001e04:	2202      	movs	r2, #2
 8001e06:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001e08:	79fa      	ldrb	r2, [r7, #7]
 8001e0a:	4925      	ldr	r1, [pc, #148]	; (8001ea0 <HW_TS_Start+0xfc>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	3308      	adds	r3, #8
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001e1c:	79fa      	ldrb	r2, [r7, #7]
 8001e1e:	4920      	ldr	r1, [pc, #128]	; (8001ea0 <HW_TS_Start+0xfc>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fab6 	bl	80013a4 <linkTimer>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HW_TS_Start+0x104>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HW_TS_Start+0x108>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	7c7a      	ldrb	r2, [r7, #17]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d002      	beq.n	8001e54 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001e4e:	f7ff fc6f 	bl	8001730 <RescheduleTimerList>
 8001e52:	e013      	b.n	8001e7c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001e54:	79fa      	ldrb	r2, [r7, #7]
 8001e56:	4912      	ldr	r1, [pc, #72]	; (8001ea0 <HW_TS_Start+0xfc>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	3308      	adds	r3, #8
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	8a7b      	ldrh	r3, [r7, #18]
 8001e68:	79fa      	ldrb	r2, [r7, #7]
 8001e6a:	1ac9      	subs	r1, r1, r3
 8001e6c:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <HW_TS_Start+0xfc>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4403      	add	r3, r0
 8001e78:	3308      	adds	r3, #8
 8001e7a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HW_TS_Start+0x100>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	22ff      	movs	r2, #255	; 0xff
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e84:	2003      	movs	r0, #3
 8001e86:	f001 f942 	bl	800310e <HAL_NVIC_EnableIRQ>
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f383 8810 	msr	PRIMASK, r3
}
 8001e94:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001e96:	bf00      	nop
}
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000210 	.word	0x20000210
 8001ea4:	200004dc 	.word	0x200004dc
 8001ea8:	200002a0 	.word	0x200002a0
 8001eac:	200002a1 	.word	0x200002a1

08001eb0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4798      	blx	r3

  return;
 8001ec2:	bf00      	nop
}
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	4613      	mov	r3, r2
 8001edc:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10c      	bne.n	8001efe <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8001ee4:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HW_UART_Receive_IT+0x3c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HW_UART_Receive_IT+0x40>)
 8001eec:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HW_UART_Receive_IT+0x44>)
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	89bb      	ldrh	r3, [r7, #12]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <HW_UART_Receive_IT+0x40>)
 8001ef8:	f003 ff5a 	bl	8005db0 <HAL_UART_Receive_IT>
            break;
 8001efc:	e000      	b.n	8001f00 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8001efe:	bf00      	nop
    }

    return;
 8001f00:	bf00      	nop
}
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200002b0 	.word	0x200002b0
 8001f0c:	20000388 	.word	0x20000388
 8001f10:	40013800 	.word	0x40013800

08001f14 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	4613      	mov	r3, r2
 8001f24:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10e      	bne.n	8001f52 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001f34:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <HW_UART_Transmit_DMA+0x80>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <HW_UART_Transmit_DMA+0x84>)
 8001f3c:	4a17      	ldr	r2, [pc, #92]	; (8001f9c <HW_UART_Transmit_DMA+0x88>)
 8001f3e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001f40:	89bb      	ldrh	r3, [r7, #12]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	4814      	ldr	r0, [pc, #80]	; (8001f98 <HW_UART_Transmit_DMA+0x84>)
 8001f48:	f003 ff7e 	bl	8005e48 <HAL_UART_Transmit_DMA>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	75fb      	strb	r3, [r7, #23]
            break;
 8001f50:	e000      	b.n	8001f54 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001f52:	bf00      	nop
    }

    switch (hal_status)
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d816      	bhi.n	8001f88 <HW_UART_Transmit_DMA+0x74>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <HW_UART_Transmit_DMA+0x4c>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f77 	.word	0x08001f77
 8001f68:	08001f7d 	.word	0x08001f7d
 8001f6c:	08001f83 	.word	0x08001f83
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001f70:	2300      	movs	r3, #0
 8001f72:	75bb      	strb	r3, [r7, #22]
            break;
 8001f74:	e009      	b.n	8001f8a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001f76:	2301      	movs	r3, #1
 8001f78:	75bb      	strb	r3, [r7, #22]
            break;
 8001f7a:	e006      	b.n	8001f8a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	75bb      	strb	r3, [r7, #22]
            break;
 8001f80:	e003      	b.n	8001f8a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001f82:	2303      	movs	r3, #3
 8001f84:	75bb      	strb	r3, [r7, #22]
            break;
 8001f86:	e000      	b.n	8001f8a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8001f88:	bf00      	nop
    }

    return hw_status;
 8001f8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200002b4 	.word	0x200002b4
 8001f98:	20000388 	.word	0x20000388
 8001f9c:	40013800 	.word	0x40013800

08001fa0 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_UART_RxCpltCallback+0x34>)
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d107      	bne.n	8001fc4 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_UART_RxCpltCallback+0x38>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_UART_RxCpltCallback+0x38>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4798      	blx	r3
            }
            break;
 8001fc2:	e001      	b.n	8001fc8 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001fc4:	bf00      	nop
 8001fc6:	e000      	b.n	8001fca <HAL_UART_RxCpltCallback+0x2a>
            break;
 8001fc8:	bf00      	nop
    }

    return;
 8001fca:	bf00      	nop
}
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40013800 	.word	0x40013800
 8001fd8:	200002b0 	.word	0x200002b0

08001fdc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_UART_TxCpltCallback+0x34>)
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d107      	bne.n	8002000 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_UART_TxCpltCallback+0x38>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_UART_TxCpltCallback+0x38>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4798      	blx	r3
            }
            break;
 8001ffe:	e001      	b.n	8002004 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002000:	bf00      	nop
 8002002:	e000      	b.n	8002006 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002004:	bf00      	nop
    }

    return;
 8002006:	bf00      	nop
}
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40013800 	.word	0x40013800
 8002014:	200002b4 	.word	0x200002b4

08002018 <LL_RCC_LSE_SetDriveCapability>:
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	f023 0218 	bic.w	r2, r3, #24
 800202c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_AHB1_GRP1_EnableClock>:
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4313      	orrs	r3, r2
 800205a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002068:	68fb      	ldr	r3, [r7, #12]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_AHB2_GRP1_EnableClock>:
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800207e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002084:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4313      	orrs	r3, r2
 800208c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4013      	ands	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ac:	f000 fe3c 	bl	8002d28 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80020b0:	f7fe fd00 	bl	8000ab4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020b4:	f000 f866 	bl	8002184 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80020b8:	f000 f8c0 	bl	800223c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80020bc:	f000 f8de 	bl	800227c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c0:	f000 f998 	bl	80023f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80020c4:	f000 f978 	bl	80023b8 <MX_DMA_Init>
  MX_RTC_Init();
 80020c8:	f000 f942 	bl	8002350 <MX_RTC_Init>
  MX_RF_Init();
 80020cc:	f000 f938 	bl	8002340 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  state = 3;
 80020d0:	4b2a      	ldr	r3, [pc, #168]	; (800217c <main+0xd4>)
 80020d2:	2203      	movs	r2, #3
 80020d4:	701a      	strb	r2, [r3, #0]
  state_changed = 1;
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <main+0xd8>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80020dc:	f7fe fcf8 	bl	8000ad0 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80020e0:	f7fe ff37 	bl	8000f52 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    if (state == 0) //motor DONE, waiting for button action
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <main+0xd4>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10c      	bne.n	8002106 <main+0x5e>
    {
    	if (state_changed == 1)
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <main+0xd8>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d108      	bne.n	8002106 <main+0x5e>
    	{
    		Blue_On();
 80020f4:	f7ff f852 	bl	800119c <Blue_On>
    		Green_Off();
 80020f8:	f7ff f844 	bl	8001184 <Green_Off>
    		Red_Off();
 80020fc:	f7ff f82a 	bl	8001154 <Red_Off>
    		state_changed = 0;
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <main+0xd8>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
    	}
    }
    if (state == 1) //Waiting for motor pending, should be short state unless error
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <main+0xd4>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10c      	bne.n	8002128 <main+0x80>
    {
    	if (state_changed == 1)
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <main+0xd8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d108      	bne.n	8002128 <main+0x80>
    	{
    		Blue_Off();
 8002116:	f7ff f84d 	bl	80011b4 <Blue_Off>
    		Green_Off();
 800211a:	f7ff f833 	bl	8001184 <Green_Off>
    		Red_Off();
 800211e:	f7ff f819 	bl	8001154 <Red_Off>
    		state_changed = 0;
 8002122:	4b17      	ldr	r3, [pc, #92]	; (8002180 <main+0xd8>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
    	}
    }
    if (state == 2) //Motor PENDING
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <main+0xd4>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d10c      	bne.n	800214a <main+0xa2>
    {
    	if (state_changed == 1)
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <main+0xd8>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d108      	bne.n	800214a <main+0xa2>
    	{
    		Blue_Off();
 8002138:	f7ff f83c 	bl	80011b4 <Blue_Off>
    		Green_On();
 800213c:	f7ff f816 	bl	800116c <Green_On>
    		Red_Off();
 8002140:	f7ff f808 	bl	8001154 <Red_Off>
    		state_changed = 0;
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <main+0xd8>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
    	}
    }
    if (state == 3)//Motor STOPPED
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <main+0xd4>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d10d      	bne.n	800216e <main+0xc6>
    {
    	if (state_changed == 1)
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <main+0xd8>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d1c2      	bne.n	80020e0 <main+0x38>
    	{
    		Blue_Off();
 800215a:	f7ff f82b 	bl	80011b4 <Blue_Off>
    		Green_Off();
 800215e:	f7ff f811 	bl	8001184 <Green_Off>
    		Red_On();
 8002162:	f7fe ffeb 	bl	800113c <Red_On>
    		state_changed = 0;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <main+0xd8>)
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
 800216c:	e7b8      	b.n	80020e0 <main+0x38>
    	}
    }
    else
    {
    	state = 0;
 800216e:	4b03      	ldr	r3, [pc, #12]	; (800217c <main+0xd4>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
    	state_changed = 1;
 8002174:	4b02      	ldr	r3, [pc, #8]	; (8002180 <main+0xd8>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
    MX_APPE_Process();
 800217a:	e7b1      	b.n	80020e0 <main+0x38>
 800217c:	20000500 	.word	0x20000500
 8002180:	20000501 	.word	0x20000501

08002184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b09a      	sub	sp, #104	; 0x68
 8002188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218a:	f107 0320 	add.w	r3, r7, #32
 800218e:	2248      	movs	r2, #72	; 0x48
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f00a fe30 	bl	800cdf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]
 80021a6:	615a      	str	r2, [r3, #20]
 80021a8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021aa:	f001 fdd3 	bl	8003d54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7ff ff32 	bl	8002018 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b4:	4b20      	ldr	r3, [pc, #128]	; (8002238 <SystemClock_Config+0xb4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021bc:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <SystemClock_Config+0xb4>)
 80021be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <SystemClock_Config+0xb4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80021d0:	2307      	movs	r3, #7
 80021d2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80021da:	2301      	movs	r3, #1
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021e4:	2340      	movs	r3, #64	; 0x40
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ec:	f107 0320 	add.w	r3, r7, #32
 80021f0:	4618      	mov	r0, r3
 80021f2:	f002 f943 	bl	800447c <HAL_RCC_OscConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80021fc:	f000 f972 	bl	80024e4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002200:	236f      	movs	r3, #111	; 0x6f
 8002202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002204:	2302      	movs	r3, #2
 8002206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	2101      	movs	r1, #1
 8002220:	4618      	mov	r0, r3
 8002222:	f002 fc9f 	bl	8004b64 <HAL_RCC_ClockConfig>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800222c:	f000 f95a 	bl	80024e4 <Error_Handler>
  }
}
 8002230:	bf00      	nop
 8002232:	3768      	adds	r7, #104	; 0x68
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	58000400 	.word	0x58000400

0800223c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b094      	sub	sp, #80	; 0x50
 8002240:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002242:	463b      	mov	r3, r7
 8002244:	2250      	movs	r2, #80	; 0x50
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f00a fdd5 	bl	800cdf8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800224e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002252:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002254:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002258:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800225a:	2302      	movs	r3, #2
 800225c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800225e:	2310      	movs	r3, #16
 8002260:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002262:	463b      	mov	r3, r7
 8002264:	4618      	mov	r0, r3
 8002266:	f003 f8ba 	bl	80053de <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002270:	f000 f938 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002274:	bf00      	nop
 8002276:	3750      	adds	r7, #80	; 0x50
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_IPCC_Init+0x20>)
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <MX_IPCC_Init+0x24>)
 8002284:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_IPCC_Init+0x20>)
 8002288:	f001 fcde 	bl	8003c48 <HAL_IPCC_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002292:	f000 f927 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200002b8 	.word	0x200002b8
 80022a0:	58000c00 	.word	0x58000c00

080022a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022aa:	4a24      	ldr	r2, [pc, #144]	; (800233c <MX_USART1_UART_Init+0x98>)
 80022ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022ca:	220c      	movs	r2, #12
 80022cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022da:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ee:	4812      	ldr	r0, [pc, #72]	; (8002338 <MX_USART1_UART_Init+0x94>)
 80022f0:	f003 fd0e 	bl	8005d10 <HAL_UART_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80022fa:	f000 f8f3 	bl	80024e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022fe:	2100      	movs	r1, #0
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <MX_USART1_UART_Init+0x94>)
 8002302:	f005 fd60 	bl	8007dc6 <HAL_UARTEx_SetTxFifoThreshold>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800230c:	f000 f8ea 	bl	80024e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002310:	2100      	movs	r1, #0
 8002312:	4809      	ldr	r0, [pc, #36]	; (8002338 <MX_USART1_UART_Init+0x94>)
 8002314:	f005 fd95 	bl	8007e42 <HAL_UARTEx_SetRxFifoThreshold>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800231e:	f000 f8e1 	bl	80024e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_USART1_UART_Init+0x94>)
 8002324:	f005 fd16 	bl	8007d54 <HAL_UARTEx_DisableFifoMode>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800232e:	f000 f8d9 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000388 	.word	0x20000388
 800233c:	40013800 	.word	0x40013800

08002340 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <MX_RTC_Init+0x60>)
 8002356:	4a17      	ldr	r2, [pc, #92]	; (80023b4 <MX_RTC_Init+0x64>)
 8002358:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <MX_RTC_Init+0x60>)
 800235c:	2200      	movs	r2, #0
 800235e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <MX_RTC_Init+0x60>)
 8002362:	220f      	movs	r2, #15
 8002364:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <MX_RTC_Init+0x60>)
 8002368:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800236c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <MX_RTC_Init+0x60>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MX_RTC_Init+0x60>)
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <MX_RTC_Init+0x60>)
 800237c:	2200      	movs	r2, #0
 800237e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <MX_RTC_Init+0x60>)
 8002382:	2200      	movs	r2, #0
 8002384:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002386:	480a      	ldr	r0, [pc, #40]	; (80023b0 <MX_RTC_Init+0x60>)
 8002388:	f003 fab0 	bl	80058ec <HAL_RTC_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002392:	f000 f8a7 	bl	80024e4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_RTC_Init+0x60>)
 800239c:	f003 fba6 	bl	8005aec <HAL_RTCEx_SetWakeUpTimer_IT>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80023a6:	f000 f89d 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200004dc 	.word	0x200004dc
 80023b4:	40002800 	.word	0x40002800

080023b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80023bc:	2004      	movs	r0, #4
 80023be:	f7ff fe41 	bl	8002044 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023c2:	2002      	movs	r0, #2
 80023c4:	f7ff fe3e 	bl	8002044 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7ff fe3b 	bl	8002044 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	210f      	movs	r1, #15
 80023d2:	200e      	movs	r0, #14
 80023d4:	f000 fe81 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80023d8:	200e      	movs	r0, #14
 80023da:	f000 fe98 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	210f      	movs	r1, #15
 80023e2:	203a      	movs	r0, #58	; 0x3a
 80023e4:	f000 fe79 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80023e8:	203a      	movs	r0, #58	; 0x3a
 80023ea:	f000 fe90 	bl	800310e <HAL_NVIC_EnableIRQ>

}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002408:	2004      	movs	r0, #4
 800240a:	f7ff fe34 	bl	8002076 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2001      	movs	r0, #1
 8002410:	f7ff fe31 	bl	8002076 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002414:	2002      	movs	r0, #2
 8002416:	f7ff fe2e 	bl	8002076 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800241a:	2008      	movs	r0, #8
 800241c:	f7ff fe2b 	bl	8002076 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	2123      	movs	r1, #35	; 0x23
 8002424:	4821      	ldr	r0, [pc, #132]	; (80024ac <MX_GPIO_Init+0xb8>)
 8002426:	f001 fbbb 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800242a:	2310      	movs	r3, #16
 800242c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800242e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002432:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002434:	2301      	movs	r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	4619      	mov	r1, r3
 800243c:	481c      	ldr	r0, [pc, #112]	; (80024b0 <MX_GPIO_Init+0xbc>)
 800243e:	f001 fa3f 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002442:	2323      	movs	r3, #35	; 0x23
 8002444:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	2301      	movs	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4815      	ldr	r0, [pc, #84]	; (80024ac <MX_GPIO_Init+0xb8>)
 8002458:	f001 fa32 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800245c:	2303      	movs	r3, #3
 800245e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002460:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002466:	2301      	movs	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	4619      	mov	r1, r3
 800246e:	4811      	ldr	r0, [pc, #68]	; (80024b4 <MX_GPIO_Init+0xc0>)
 8002470:	f001 fa26 	bl	80038c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	2006      	movs	r0, #6
 800247a:	f000 fe2e 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800247e:	2006      	movs	r0, #6
 8002480:	f000 fe45 	bl	800310e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	2007      	movs	r0, #7
 800248a:	f000 fe26 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800248e:	2007      	movs	r0, #7
 8002490:	f000 fe3d 	bl	800310e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002494:	2200      	movs	r2, #0
 8002496:	2100      	movs	r1, #0
 8002498:	200a      	movs	r0, #10
 800249a:	f000 fe1e 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800249e:	200a      	movs	r0, #10
 80024a0:	f000 fe35 	bl	800310e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	48000400 	.word	0x48000400
 80024b0:	48000800 	.word	0x48000800
 80024b4:	48000c00 	.word	0x48000c00

080024b8 <SetState>:
	else if(GPIO_PIN == B3_Pin){state = 2;} //2
	state_changed = 1;
} */

void SetState(uint8_t state_in)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
	state = state_in;
 80024c2:	4a06      	ldr	r2, [pc, #24]	; (80024dc <SetState+0x24>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	7013      	strb	r3, [r2, #0]
	state_changed = 1;
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <SetState+0x28>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000500 	.word	0x20000500
 80024e0:	20000501 	.word	0x20000501

080024e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_RCC_EnableRTC>:
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80024f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_AHB2_GRP1_EnableClock>:
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800251c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4313      	orrs	r3, r2
 800252a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800252c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002530:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002538:	68fb      	ldr	r3, [r7, #12]
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_AHB3_GRP1_EnableClock>:
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4313      	orrs	r3, r2
 800255c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4013      	ands	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_APB1_GRP1_EnableClock>:
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002584:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4313      	orrs	r3, r2
 800258e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002594:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4013      	ands	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800259c:	68fb      	ldr	r3, [r7, #12]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_APB1_GRP2_EnableClock>:
{
 80025aa:	b480      	push	{r7}
 80025ac:	b085      	sub	sp, #20
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4313      	orrs	r3, r2
 80025c0:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4013      	ands	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_APB2_GRP1_EnableClock>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80025e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4013      	ands	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002600:	68fb      	ldr	r3, [r7, #12]
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002612:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002616:	f7ff ff96 	bl	8002546 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	202e      	movs	r0, #46	; 0x2e
 8002620:	f000 fd5b 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002624:	202e      	movs	r0, #46	; 0x2e
 8002626:	f000 fd72 	bl	800310e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0d      	ldr	r2, [pc, #52]	; (8002674 <HAL_IPCC_MspInit+0x44>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d113      	bne.n	800266a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002642:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002646:	f7ff ff7e 	bl	8002546 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	202c      	movs	r0, #44	; 0x2c
 8002650:	f000 fd43 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002654:	202c      	movs	r0, #44	; 0x2c
 8002656:	f000 fd5a 	bl	800310e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	202d      	movs	r0, #45	; 0x2d
 8002660:	f000 fd3b 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002664:	202d      	movs	r0, #45	; 0x2d
 8002666:	f000 fd52 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	58000c00 	.word	0x58000c00

08002678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b0a0      	sub	sp, #128	; 0x80
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002680:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	2250      	movs	r2, #80	; 0x50
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f00a fbad 	bl	800cdf8 <memset>
  if(huart->Instance==LPUART1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a68      	ldr	r2, [pc, #416]	; (8002844 <HAL_UART_MspInit+0x1cc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d16e      	bne.n	8002786 <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80026a8:	2302      	movs	r3, #2
 80026aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 fe92 	bl	80053de <HAL_RCCEx_PeriphCLKConfig>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026c0:	f7ff ff10 	bl	80024e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7ff ff70 	bl	80025aa <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	2001      	movs	r0, #1
 80026cc:	f7ff ff22 	bl	8002514 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026d0:	230c      	movs	r3, #12
 80026d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026dc:	2303      	movs	r3, #3
 80026de:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80026e0:	2308      	movs	r3, #8
 80026e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ee:	f001 f8e7 	bl	80038c0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80026f2:	4b55      	ldr	r3, [pc, #340]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 80026f4:	4a55      	ldr	r2, [pc, #340]	; (800284c <HAL_UART_MspInit+0x1d4>)
 80026f6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 80026fa:	2211      	movs	r2, #17
 80026fc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026fe:	4b52      	ldr	r3, [pc, #328]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 8002700:	2210      	movs	r2, #16
 8002702:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002704:	4b50      	ldr	r3, [pc, #320]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800270a:	4b4f      	ldr	r3, [pc, #316]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 800270c:	2280      	movs	r2, #128	; 0x80
 800270e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002710:	4b4d      	ldr	r3, [pc, #308]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 8002712:	2200      	movs	r2, #0
 8002714:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002716:	4b4c      	ldr	r3, [pc, #304]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800271c:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002722:	4b49      	ldr	r3, [pc, #292]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 8002724:	2200      	movs	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002728:	4847      	ldr	r0, [pc, #284]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 800272a:	f000 fd35 	bl	8003198 <HAL_DMA_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002734:	f7ff fed6 	bl	80024e4 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002738:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800273c:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800273e:	2300      	movs	r3, #0
 8002740:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 800274e:	2301      	movs	r3, #1
 8002750:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002752:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002756:	4619      	mov	r1, r3
 8002758:	483b      	ldr	r0, [pc, #236]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 800275a:	f001 f84f 	bl	80037fc <HAL_DMAEx_ConfigMuxSync>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002764:	f7ff febe 	bl	80024e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a37      	ldr	r2, [pc, #220]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 800276c:	67da      	str	r2, [r3, #124]	; 0x7c
 800276e:	4a36      	ldr	r2, [pc, #216]	; (8002848 <HAL_UART_MspInit+0x1d0>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002774:	2200      	movs	r2, #0
 8002776:	2100      	movs	r1, #0
 8002778:	2025      	movs	r0, #37	; 0x25
 800277a:	f000 fcae 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800277e:	2025      	movs	r0, #37	; 0x25
 8002780:	f000 fcc5 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002784:	e05a      	b.n	800283c <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a31      	ldr	r2, [pc, #196]	; (8002850 <HAL_UART_MspInit+0x1d8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d155      	bne.n	800283c <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002790:	2301      	movs	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	4618      	mov	r0, r3
 800279e:	f002 fe1e 	bl	80053de <HAL_RCCEx_PeriphCLKConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_UART_MspInit+0x134>
      Error_Handler();
 80027a8:	f7ff fe9c 	bl	80024e4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80027b0:	f7ff ff14 	bl	80025dc <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b4:	2002      	movs	r0, #2
 80027b6:	f7ff fead 	bl	8002514 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027ba:	23c0      	movs	r3, #192	; 0xc0
 80027bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c2:	2301      	movs	r3, #1
 80027c4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ca:	2307      	movs	r3, #7
 80027cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027d2:	4619      	mov	r1, r3
 80027d4:	481f      	ldr	r0, [pc, #124]	; (8002854 <HAL_UART_MspInit+0x1dc>)
 80027d6:	f001 f873 	bl	80038c0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 80027dc:	4a1f      	ldr	r2, [pc, #124]	; (800285c <HAL_UART_MspInit+0x1e4>)
 80027de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 80027e2:	220f      	movs	r2, #15
 80027e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 80027e8:	2210      	movs	r2, #16
 80027ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027f2:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002804:	4b14      	ldr	r3, [pc, #80]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 8002806:	2200      	movs	r2, #0
 8002808:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 800280c:	2200      	movs	r2, #0
 800280e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002810:	4811      	ldr	r0, [pc, #68]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 8002812:	f000 fcc1 	bl	8003198 <HAL_DMA_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 800281c:	f7ff fe62 	bl	80024e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 8002824:	67da      	str	r2, [r3, #124]	; 0x7c
 8002826:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <HAL_UART_MspInit+0x1e0>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2100      	movs	r1, #0
 8002830:	2024      	movs	r0, #36	; 0x24
 8002832:	f000 fc52 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002836:	2024      	movs	r0, #36	; 0x24
 8002838:	f000 fc69 	bl	800310e <HAL_NVIC_EnableIRQ>
}
 800283c:	bf00      	nop
 800283e:	3780      	adds	r7, #128	; 0x80
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40008000 	.word	0x40008000
 8002848:	2000041c 	.word	0x2000041c
 800284c:	40020044 	.word	0x40020044
 8002850:	40013800 	.word	0x40013800
 8002854:	48000400 	.word	0x48000400
 8002858:	2000047c 	.word	0x2000047c
 800285c:	40020444 	.word	0x40020444

08002860 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b096      	sub	sp, #88	; 0x58
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002868:	f107 0308 	add.w	r3, r7, #8
 800286c:	2250      	movs	r2, #80	; 0x50
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f00a fac1 	bl	800cdf8 <memset>
  if(hrtc->Instance==RTC)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_RTC_MspInit+0x6c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d120      	bne.n	80028c2 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002880:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002884:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800288a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800288c:	f107 0308 	add.w	r3, r7, #8
 8002890:	4618      	mov	r0, r3
 8002892:	f002 fda4 	bl	80053de <HAL_RCCEx_PeriphCLKConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800289c:	f7ff fe22 	bl	80024e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80028a0:	f7ff fe27 	bl	80024f2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80028a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80028a8:	f7ff fe66 	bl	8002578 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80028ac:	2200      	movs	r2, #0
 80028ae:	2100      	movs	r1, #0
 80028b0:	2003      	movs	r0, #3
 80028b2:	f000 fc12 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80028b6:	2003      	movs	r0, #3
 80028b8:	f000 fc29 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f003 f9d1 	bl	8005c64 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80028c2:	bf00      	nop
 80028c4:	3758      	adds	r7, #88	; 0x58
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40002800 	.word	0x40002800

080028d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e2:	e7fe      	b.n	80028e2 <HardFault_Handler+0x4>

080028e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <MemManage_Handler+0x4>

080028ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <BusFault_Handler+0x4>

080028f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <UsageFault_Handler+0x4>

080028f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002924:	f000 fa5a 	bl	8002ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	bd80      	pop	{r7, pc}

0800292c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002930:	f7fe ff98 	bl	8001864 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}

08002938 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 800293c:	2001      	movs	r0, #1
 800293e:	f001 f947 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}

08002946 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 800294a:	2002      	movs	r0, #2
 800294c:	f001 f940 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}

08002954 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002958:	2010      	movs	r0, #16
 800295a:	f001 f939 	bl	8003bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <DMA1_Channel4_IRQHandler+0x10>)
 800296a:	f000 fdf6 	bl	800355a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000041c 	.word	0x2000041c

08002978 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <USART1_IRQHandler+0x10>)
 800297e:	f003 fae3 	bl	8005f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000388 	.word	0x20000388

0800298c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002990:	4802      	ldr	r0, [pc, #8]	; (800299c <LPUART1_IRQHandler+0x10>)
 8002992:	f003 fad9 	bl	8005f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200002f4 	.word	0x200002f4

080029a0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80029a4:	f009 fc5a 	bl	800c25c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}

080029ac <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80029b0:	f009 fc8a 	bl	800c2c8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80029bc:	f001 f920 	bl	8003c00 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <DMA2_Channel4_IRQHandler+0x10>)
 80029ca:	f000 fdc6 	bl	800355a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000047c 	.word	0x2000047c

080029d8 <LL_AHB2_GRP1_EnableClock>:
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029fc:	68fb      	ldr	r3, [r7, #12]
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002a16:	f107 030c 	add.w	r3, r7, #12
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002a26:	2002      	movs	r0, #2
 8002a28:	f7ff ffd6 	bl	80029d8 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <BSP_LED_Init+0x6c>)
 8002a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a34:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a36:	2301      	movs	r3, #1
 8002a38:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <BSP_LED_Init+0x70>)
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	f107 020c 	add.w	r2, r7, #12
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 ff35 	bl	80038c0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <BSP_LED_Init+0x70>)
 8002a5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	4a05      	ldr	r2, [pc, #20]	; (8002a78 <BSP_LED_Init+0x6c>)
 8002a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a66:	2200      	movs	r2, #0
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f001 f899 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 8002a6e:	bf00      	nop
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	0800ec28 	.word	0x0800ec28
 8002a7c:	20000008 	.word	0x20000008

08002a80 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	4a07      	ldr	r2, [pc, #28]	; (8002aac <BSP_LED_On+0x2c>)
 8002a8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <BSP_LED_On+0x30>)
 8002a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f001 f87f 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000008 	.word	0x20000008
 8002ab0:	0800ec28 	.word	0x0800ec28

08002ab4 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <BSP_LED_Off+0x2c>)
 8002ac2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <BSP_LED_Off+0x30>)
 8002aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f001 f865 	bl	8003ba0 <HAL_GPIO_WritePin>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000008 	.word	0x20000008
 8002ae4:	0800ec28 	.word	0x0800ec28

08002ae8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	460a      	mov	r2, r1
 8002af2:	71fb      	strb	r3, [r7, #7]
 8002af4:	4613      	mov	r3, r2
 8002af6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <BSP_PB_Init+0x2e>
 8002b0e:	2004      	movs	r0, #4
 8002b10:	f7ff ff62 	bl	80029d8 <LL_AHB2_GRP1_EnableClock>
 8002b14:	e00c      	b.n	8002b30 <BSP_PB_Init+0x48>
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d103      	bne.n	8002b24 <BSP_PB_Init+0x3c>
 8002b1c:	2008      	movs	r0, #8
 8002b1e:	f7ff ff5b 	bl	80029d8 <LL_AHB2_GRP1_EnableClock>
 8002b22:	e005      	b.n	8002b30 <BSP_PB_Init+0x48>
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d102      	bne.n	8002b30 <BSP_PB_Init+0x48>
 8002b2a:	2008      	movs	r0, #8
 8002b2c:	f7ff ff54 	bl	80029d8 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002b30:	79bb      	ldrb	r3, [r7, #6]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d117      	bne.n	8002b66 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	4a20      	ldr	r2, [pc, #128]	; (8002bbc <BSP_PB_Init+0xd4>)
 8002b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b3e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002b44:	2301      	movs	r3, #1
 8002b46:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <BSP_PB_Init+0xd8>)
 8002b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b54:	f107 020c 	add.w	r2, r7, #12
 8002b58:	4611      	mov	r1, r2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 feb0 	bl	80038c0 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8002b60:	2001      	movs	r0, #1
 8002b62:	f7fe f9d1 	bl	8000f08 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002b66:	79bb      	ldrb	r3, [r7, #6]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d123      	bne.n	8002bb4 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <BSP_PB_Init+0xd4>)
 8002b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b74:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002b76:	2301      	movs	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8002b7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b7e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <BSP_PB_Init+0xd8>)
 8002b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b88:	f107 020c 	add.w	r2, r7, #12
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fe96 	bl	80038c0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <BSP_PB_Init+0xdc>)
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fa9a 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	4a06      	ldr	r2, [pc, #24]	; (8002bc4 <BSP_PB_Init+0xdc>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 faad 	bl	800310e <HAL_NVIC_EnableIRQ>
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	0800ec30 	.word	0x0800ec30
 8002bc0:	20000014 	.word	0x20000014
 8002bc4:	0800ec38 	.word	0x0800ec38

08002bc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002bcc:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <SystemInit+0xa0>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002bd2:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <SystemInit+0xa0>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd8:	4a23      	ldr	r2, [pc, #140]	; (8002c68 <SystemInit+0xa0>)
 8002bda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002bfa:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <SystemInit+0xa4>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c18:	f023 0305 	bic.w	r3, r3, #5
 8002c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <SystemInit+0xa8>)
 8002c3a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c40:	4a0b      	ldr	r2, [pc, #44]	; (8002c70 <SystemInit+0xa8>)
 8002c42:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c58:	2200      	movs	r2, #0
 8002c5a:	619a      	str	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000ed00 	.word	0xe000ed00
 8002c6c:	faf6fefb 	.word	0xfaf6fefb
 8002c70:	22041000 	.word	0x22041000

08002c74 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002c74:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c76:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c78:	3304      	adds	r3, #4

08002c7a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c7a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002c7e:	d3f9      	bcc.n	8002c74 <CopyDataInit>
  bx lr
 8002c80:	4770      	bx	lr

08002c82 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002c82:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002c84:	3004      	adds	r0, #4

08002c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002c86:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002c88:	d3fb      	bcc.n	8002c82 <FillZerobss>
  bx lr
 8002c8a:	4770      	bx	lr

08002c8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c8c:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c90:	f7ff ff9a 	bl	8002bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002c94:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <LoopForever+0x6>)
 8002c96:	490c      	ldr	r1, [pc, #48]	; (8002cc8 <LoopForever+0xa>)
 8002c98:	4a0c      	ldr	r2, [pc, #48]	; (8002ccc <LoopForever+0xe>)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f7ff ffed 	bl	8002c7a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002ca0:	480b      	ldr	r0, [pc, #44]	; (8002cd0 <LoopForever+0x12>)
 8002ca2:	490c      	ldr	r1, [pc, #48]	; (8002cd4 <LoopForever+0x16>)
 8002ca4:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <LoopForever+0x1a>)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f7ff ffe7 	bl	8002c7a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002cac:	480b      	ldr	r0, [pc, #44]	; (8002cdc <LoopForever+0x1e>)
 8002cae:	490c      	ldr	r1, [pc, #48]	; (8002ce0 <LoopForever+0x22>)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f7ff ffe8 	bl	8002c86 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cb6:	f00a f8ed 	bl	800ce94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002cba:	f7ff f9f5 	bl	80020a8 <main>

08002cbe <LoopForever>:

LoopForever:
  b LoopForever
 8002cbe:	e7fe      	b.n	8002cbe <LoopForever>
  ldr   r0, =_estack
 8002cc0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002cc4:	20000008 	.word	0x20000008
 8002cc8:	20000090 	.word	0x20000090
 8002ccc:	0800ed80 	.word	0x0800ed80
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002cd0:	200301e4 	.word	0x200301e4
 8002cd4:	20030a67 	.word	0x20030a67
 8002cd8:	0800ee52 	.word	0x0800ee52
  INIT_BSS _sbss, _ebss
 8002cdc:	200000e0 	.word	0x200000e0
 8002ce0:	20001854 	.word	0x20001854

08002ce4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ce4:	e7fe      	b.n	8002ce4 <ADC1_IRQHandler>
	...

08002ce8 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6053      	str	r3, [r2, #4]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e0042000 	.word	0xe0042000

08002d08 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	6053      	str	r3, [r2, #4]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e0042000 	.word	0xe0042000

08002d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d32:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_Init+0x3c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a0b      	ldr	r2, [pc, #44]	; (8002d64 <HAL_Init+0x3c>)
 8002d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d3e:	2003      	movs	r0, #3
 8002d40:	f000 f9c0 	bl	80030c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d44:	2000      	movs	r0, #0
 8002d46:	f000 f80f 	bl	8002d68 <HAL_InitTick>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	71fb      	strb	r3, [r7, #7]
 8002d54:	e001      	b.n	8002d5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d56:	f7ff fc5a 	bl	800260e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	58004000 	.word	0x58004000

08002d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002d74:	4b17      	ldr	r3, [pc, #92]	; (8002dd4 <HAL_InitTick+0x6c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d024      	beq.n	8002dc6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d7c:	f002 f89e 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <HAL_InitTick+0x6c>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	4619      	mov	r1, r3
 8002d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 f9d6 	bl	8003146 <HAL_SYSTICK_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	d809      	bhi.n	8002dba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002da6:	2200      	movs	r2, #0
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	f04f 30ff 	mov.w	r0, #4294967295
 8002dae:	f000 f994 	bl	80030da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_InitTick+0x70>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e007      	b.n	8002dca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e004      	b.n	8002dca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e001      	b.n	8002dca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000028 	.word	0x20000028
 8002dd8:	20000024 	.word	0x20000024

08002ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_IncTick+0x20>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_IncTick+0x24>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <HAL_IncTick+0x24>)
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000028 	.word	0x20000028
 8002e00:	20000504 	.word	0x20000504

08002e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return uwTick;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_GetTick+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000504 	.word	0x20000504

08002e1c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <HAL_GetTickPrio+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	20000024 	.word	0x20000024

08002e34 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_GetTickFreq+0x14>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000028 	.word	0x20000028

08002e4c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002e50:	f7ff ff4a 	bl	8002ce8 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002e5c:	f7ff ff54 	bl	8002d08 <LL_DBGMCU_EnableDBGStopMode>
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 0307 	and.w	r3, r3, #7
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0b      	blt.n	8002ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4907      	ldr	r1, [pc, #28]	; (8002f00 <__NVIC_EnableIRQ+0x38>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	db12      	blt.n	8002f3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	490a      	ldr	r1, [pc, #40]	; (8002f48 <__NVIC_DisableIRQ+0x44>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2001      	movs	r0, #1
 8002f26:	fa00 f202 	lsl.w	r2, r0, r2
 8002f2a:	3320      	adds	r3, #32
 8002f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f30:	f3bf 8f4f 	dsb	sy
}
 8002f34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f36:	f3bf 8f6f 	isb	sy
}
 8002f3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000e100 	.word	0xe000e100

08002f4c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db0c      	blt.n	8002f78 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	4907      	ldr	r1, [pc, #28]	; (8002f84 <__NVIC_SetPendingIRQ+0x38>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f72:	3340      	adds	r3, #64	; 0x40
 8002f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000e100 	.word	0xe000e100

08002f88 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	db0c      	blt.n	8002fb4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	4907      	ldr	r1, [pc, #28]	; (8002fc0 <__NVIC_ClearPendingIRQ+0x38>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2001      	movs	r0, #1
 8002faa:	fa00 f202 	lsl.w	r2, r0, r2
 8002fae:	3360      	adds	r3, #96	; 0x60
 8002fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db0a      	blt.n	8002fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	490c      	ldr	r1, [pc, #48]	; (8003010 <__NVIC_SetPriority+0x4c>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	0112      	lsls	r2, r2, #4
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fec:	e00a      	b.n	8003004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4908      	ldr	r1, [pc, #32]	; (8003014 <__NVIC_SetPriority+0x50>)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3b04      	subs	r3, #4
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	440b      	add	r3, r1
 8003002:	761a      	strb	r2, [r3, #24]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	2b04      	cmp	r3, #4
 8003034:	bf28      	it	cs
 8003036:	2304      	movcs	r3, #4
 8003038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3304      	adds	r3, #4
 800303e:	2b06      	cmp	r3, #6
 8003040:	d902      	bls.n	8003048 <NVIC_EncodePriority+0x30>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3b03      	subs	r3, #3
 8003046:	e000      	b.n	800304a <NVIC_EncodePriority+0x32>
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	f04f 32ff 	mov.w	r2, #4294967295
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	401a      	ands	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003060:	f04f 31ff 	mov.w	r1, #4294967295
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43d9      	mvns	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	4313      	orrs	r3, r2
         );
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003090:	d301      	bcc.n	8003096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003092:	2301      	movs	r3, #1
 8003094:	e00f      	b.n	80030b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003096:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <SysTick_Config+0x40>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3b01      	subs	r3, #1
 800309c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309e:	210f      	movs	r1, #15
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	f7ff ff8e 	bl	8002fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <SysTick_Config+0x40>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ae:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <SysTick_Config+0x40>)
 80030b0:	2207      	movs	r2, #7
 80030b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	e000e010 	.word	0xe000e010

080030c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fec9 	bl	8002e64 <__NVIC_SetPriorityGrouping>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030e8:	f7ff fee0 	bl	8002eac <__NVIC_GetPriorityGrouping>
 80030ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	6978      	ldr	r0, [r7, #20]
 80030f4:	f7ff ff90 	bl	8003018 <NVIC_EncodePriority>
 80030f8:	4602      	mov	r2, r0
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff5f 	bl	8002fc4 <__NVIC_SetPriority>
}
 8003106:	bf00      	nop
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fed3 	bl	8002ec8 <__NVIC_EnableIRQ>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fee3 	bl	8002f04 <__NVIC_DisableIRQ>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff96 	bl	8003080 <SysTick_Config>
 8003154:	4603      	mov	r3, r0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	4603      	mov	r3, r0
 8003166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff feed 	bl	8002f4c <__NVIC_SetPendingIRQ>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fefd 	bl	8002f88 <__NVIC_ClearPendingIRQ>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e08e      	b.n	80032c8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_DMA_Init+0x138>)
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d80f      	bhi.n	80031d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b45      	ldr	r3, [pc, #276]	; (80032d4 <HAL_DMA_Init+0x13c>)
 80031be:	4413      	add	r3, r2
 80031c0:	4a45      	ldr	r2, [pc, #276]	; (80032d8 <HAL_DMA_Init+0x140>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	009a      	lsls	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a42      	ldr	r2, [pc, #264]	; (80032dc <HAL_DMA_Init+0x144>)
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
 80031d4:	e00e      	b.n	80031f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	4b40      	ldr	r3, [pc, #256]	; (80032e0 <HAL_DMA_Init+0x148>)
 80031de:	4413      	add	r3, r2
 80031e0:	4a3d      	ldr	r2, [pc, #244]	; (80032d8 <HAL_DMA_Init+0x140>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	009a      	lsls	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <HAL_DMA_Init+0x14c>)
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003218:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003224:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003230:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fa74 	bl	8003734 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003254:	d102      	bne.n	800325c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003264:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003268:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003272:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <HAL_DMA_Init+0x106>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d80c      	bhi.n	800329e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 fa93 	bl	80037b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	e008      	b.n	80032b0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40020407 	.word	0x40020407
 80032d4:	bffdfff8 	.word	0xbffdfff8
 80032d8:	cccccccd 	.word	0xcccccccd
 80032dc:	40020000 	.word	0x40020000
 80032e0:	bffdfbf8 	.word	0xbffdfbf8
 80032e4:	40020400 	.word	0x40020400

080032e8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_DMA_Start_IT+0x20>
 8003304:	2302      	movs	r3, #2
 8003306:	e066      	b.n	80033d6 <HAL_DMA_Start_IT+0xee>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d155      	bne.n	80033c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f9b9 	bl	80036b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 020e 	orr.w	r2, r2, #14
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e00f      	b.n	8003380 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0204 	bic.w	r2, r2, #4
 800336e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 020a 	orr.w	r2, r2, #10
 800337e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800339c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e005      	b.n	80033d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
 80033d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e04f      	b.n	8003490 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d008      	beq.n	800340e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2204      	movs	r2, #4
 8003400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e040      	b.n	8003490 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 020e 	bic.w	r2, r2, #14
 800341c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800342c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0201 	bic.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f003 021c 	and.w	r2, r3, #28
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2101      	movs	r1, #1
 800344c:	fa01 f202 	lsl.w	r2, r1, r2
 8003450:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800345a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00c      	beq.n	800347e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003472:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800347c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d005      	beq.n	80034c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2204      	movs	r2, #4
 80034b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
 80034be:	e047      	b.n	8003550 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 020e 	bic.w	r2, r2, #14
 80034ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	f003 021c 	and.w	r2, r3, #28
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003502:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800350c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003524:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800352e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
    }
  }
  return status;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f003 031c 	and.w	r3, r3, #28
 800357a:	2204      	movs	r2, #4
 800357c:	409a      	lsls	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d026      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x7a>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b00      	cmp	r3, #0
 800358e:	d021      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d107      	bne.n	80035ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0204 	bic.w	r2, r2, #4
 80035ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f003 021c 	and.w	r2, r3, #28
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2104      	movs	r1, #4
 80035bc:	fa01 f202 	lsl.w	r2, r1, r2
 80035c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d071      	beq.n	80036ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035d2:	e06c      	b.n	80036ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d8:	f003 031c 	and.w	r3, r3, #28
 80035dc:	2202      	movs	r2, #2
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02e      	beq.n	8003646 <HAL_DMA_IRQHandler+0xec>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d029      	beq.n	8003646 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 020a 	bic.w	r2, r2, #10
 800360e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	f003 021c 	and.w	r2, r3, #28
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2102      	movs	r1, #2
 8003626:	fa01 f202 	lsl.w	r2, r1, r2
 800362a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d038      	beq.n	80036ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003644:	e033      	b.n	80036ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f003 031c 	and.w	r3, r3, #28
 800364e:	2208      	movs	r2, #8
 8003650:	409a      	lsls	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d02a      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x156>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d025      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 020e 	bic.w	r2, r2, #14
 8003672:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	f003 021c 	and.w	r2, r3, #28
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	2101      	movs	r1, #1
 8003682:	fa01 f202 	lsl.w	r2, r1, r2
 8003686:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
}
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d004      	beq.n	80036e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f003 021c 	and.w	r2, r3, #28
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2101      	movs	r1, #1
 80036f0:	fa01 f202 	lsl.w	r2, r1, r2
 80036f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b10      	cmp	r3, #16
 8003704:	d108      	bne.n	8003718 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003716:	e007      	b.n	8003728 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003744:	429a      	cmp	r2, r3
 8003746:	d80a      	bhi.n	800375e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003754:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6493      	str	r3, [r2, #72]	; 0x48
 800375c:	e007      	b.n	800376e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	089b      	lsrs	r3, r3, #2
 8003764:	009a      	lsls	r2, r3, #2
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003768:	4413      	add	r3, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3b08      	subs	r3, #8
 8003776:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003784:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	2201      	movs	r2, #1
 800378e:	409a      	lsls	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	40020407 	.word	0x40020407
 80037a4:	4002081c 	.word	0x4002081c
 80037a8:	cccccccd 	.word	0xcccccccd
 80037ac:	40020880 	.word	0x40020880

080037b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	461a      	mov	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80037d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3b01      	subs	r3, #1
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2201      	movs	r2, #1
 80037e0:	409a      	lsls	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	1000823f 	.word	0x1000823f
 80037f8:	40020940 	.word	0x40020940

080037fc <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d12b      	bne.n	800386a <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_DMAEx_ConfigMuxSync+0x24>
 800381c:	2302      	movs	r3, #2
 800381e:	e025      	b.n	800386c <HAL_DMAEx_ConfigMuxSync+0x70>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8003830:	4013      	ands	r3, r2
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	6811      	ldr	r1, [r2, #0]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	68d2      	ldr	r2, [r2, #12]
 800383a:	3a01      	subs	r2, #1
 800383c:	04d2      	lsls	r2, r2, #19
 800383e:	4311      	orrs	r1, r2
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	6852      	ldr	r2, [r2, #4]
 8003844:	4311      	orrs	r1, r2
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	7a12      	ldrb	r2, [r2, #8]
 800384a:	0412      	lsls	r2, r2, #16
 800384c:	4311      	orrs	r1, r2
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	7a52      	ldrb	r2, [r2, #9]
 8003852:	0252      	lsls	r2, r2, #9
 8003854:	4311      	orrs	r1, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800385a:	430b      	orrs	r3, r1
 800385c:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8003866:	2300      	movs	r3, #0
 8003868:	e000      	b.n	800386c <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
  }
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	e000fdff 	.word	0xe000fdff

0800387c <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2201      	movs	r2, #1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	015b      	lsls	r3, r3, #5
 80038a4:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80038a8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80038ac:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	601a      	str	r2, [r3, #0]
}
 80038b4:	bf00      	nop
 80038b6:	371c      	adds	r7, #28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ce:	e14c      	b.n	8003b6a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	2101      	movs	r1, #1
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	fa01 f303 	lsl.w	r3, r1, r3
 80038dc:	4013      	ands	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 813e 	beq.w	8003b64 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d005      	beq.n	8003900 <HAL_GPIO_Init+0x40>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d130      	bne.n	8003962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003936:	2201      	movs	r2, #1
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	f003 0201 	and.w	r2, r3, #1
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b03      	cmp	r3, #3
 800396c:	d017      	beq.n	800399e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d123      	bne.n	80039f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	08da      	lsrs	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3208      	adds	r2, #8
 80039b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	220f      	movs	r2, #15
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4013      	ands	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	08da      	lsrs	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3208      	adds	r2, #8
 80039ec:	6939      	ldr	r1, [r7, #16]
 80039ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	2203      	movs	r2, #3
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43db      	mvns	r3, r3
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0203 	and.w	r2, r3, #3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8098 	beq.w	8003b64 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003a34:	4a54      	ldr	r2, [pc, #336]	; (8003b88 <HAL_GPIO_Init+0x2c8>)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	220f      	movs	r2, #15
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a5e:	d019      	beq.n	8003a94 <HAL_GPIO_Init+0x1d4>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a4a      	ldr	r2, [pc, #296]	; (8003b8c <HAL_GPIO_Init+0x2cc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <HAL_GPIO_Init+0x1d0>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a49      	ldr	r2, [pc, #292]	; (8003b90 <HAL_GPIO_Init+0x2d0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00d      	beq.n	8003a8c <HAL_GPIO_Init+0x1cc>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a48      	ldr	r2, [pc, #288]	; (8003b94 <HAL_GPIO_Init+0x2d4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d007      	beq.n	8003a88 <HAL_GPIO_Init+0x1c8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a47      	ldr	r2, [pc, #284]	; (8003b98 <HAL_GPIO_Init+0x2d8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_GPIO_Init+0x1c4>
 8003a80:	2304      	movs	r3, #4
 8003a82:	e008      	b.n	8003a96 <HAL_GPIO_Init+0x1d6>
 8003a84:	2307      	movs	r3, #7
 8003a86:	e006      	b.n	8003a96 <HAL_GPIO_Init+0x1d6>
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e004      	b.n	8003a96 <HAL_GPIO_Init+0x1d6>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e002      	b.n	8003a96 <HAL_GPIO_Init+0x1d6>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <HAL_GPIO_Init+0x1d6>
 8003a94:	2300      	movs	r3, #0
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	f002 0203 	and.w	r2, r2, #3
 8003a9c:	0092      	lsls	r2, r2, #2
 8003a9e:	4093      	lsls	r3, r2
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aa6:	4938      	ldr	r1, [pc, #224]	; (8003b88 <HAL_GPIO_Init+0x2c8>)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	3302      	adds	r3, #2
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ab4:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <HAL_GPIO_Init+0x2dc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ad8:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <HAL_GPIO_Init+0x2dc>)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ade:	4b2f      	ldr	r3, [pc, #188]	; (8003b9c <HAL_GPIO_Init+0x2dc>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b02:	4a26      	ldr	r2, [pc, #152]	; (8003b9c <HAL_GPIO_Init+0x2dc>)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b08:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <HAL_GPIO_Init+0x2dc>)
 8003b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b2e:	4a1b      	ldr	r2, [pc, #108]	; (8003b9c <HAL_GPIO_Init+0x2dc>)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003b36:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_GPIO_Init+0x2dc>)
 8003b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b5c:	4a0f      	ldr	r2, [pc, #60]	; (8003b9c <HAL_GPIO_Init+0x2dc>)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3301      	adds	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f47f aeab 	bne.w	80038d0 <HAL_GPIO_Init+0x10>
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	48000400 	.word	0x48000400
 8003b90:	48000800 	.word	0x48000800
 8003b94:	48000c00 	.word	0x48000c00
 8003b98:	48001000 	.word	0x48001000
 8003b9c:	58000800 	.word	0x58000800

08003ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]
 8003bac:	4613      	mov	r3, r2
 8003bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bb0:	787b      	ldrb	r3, [r7, #1]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb6:	887a      	ldrh	r2, [r7, #2]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bbc:	e002      	b.n	8003bc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d006      	beq.n	8003bf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003be6:	4a05      	ldr	r2, [pc, #20]	; (8003bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd f9ee 	bl	8000fd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	58000800 	.word	0x58000800

08003c00 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <HAL_HSEM_IRQHandler+0x30>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_HSEM_IRQHandler+0x30>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	4906      	ldr	r1, [pc, #24]	; (8003c30 <HAL_HSEM_IRQHandler+0x30>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003c1a:	4a05      	ldr	r2, [pc, #20]	; (8003c30 <HAL_HSEM_IRQHandler+0x30>)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f807 	bl	8003c34 <HAL_HSEM_FreeCallback>
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	58001500 	.word	0x58001500

08003c34 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01e      	beq.n	8003c98 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003c5a:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <HAL_IPCC_Init+0x60>)
 8003c5c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fe fce0 	bl	8002630 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003c70:	68b8      	ldr	r0, [r7, #8]
 8003c72:	f000 f85b 	bl	8003d2c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f82c 	bl	8003ce0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003c96:	e001      	b.n	8003c9c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	58000c00 	.word	0x58000c00

08003cac <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b085      	sub	sp, #20
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e00f      	b.n	8003d0e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4a0b      	ldr	r2, [pc, #44]	; (8003d24 <IPCC_SetDefaultCallbacks+0x44>)
 8003cf8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3306      	adds	r3, #6
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <IPCC_SetDefaultCallbacks+0x48>)
 8003d06:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b05      	cmp	r3, #5
 8003d12:	d9ec      	bls.n	8003cee <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	08003cad 	.word	0x08003cad
 8003d28:	08003cc7 	.word	0x08003cc7

08003d2c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003d40:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223f      	movs	r2, #63	; 0x3f
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d62:	6013      	str	r3, [r2, #0]
}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	58000400 	.word	0x58000400

08003d74 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_PWREx_GetVoltageRange+0x18>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	58000400 	.word	0x58000400

08003d90 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da2:	d101      	bne.n	8003da8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_RCC_HSE_Enable>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_RCC_HSE_Disable>:
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de4:	6013      	str	r3, [r2, #0]
}
 8003de6:	bf00      	nop
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_RCC_HSE_IsReady>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e02:	d101      	bne.n	8003e08 <LL_RCC_HSE_IsReady+0x18>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <LL_RCC_HSE_IsReady+0x1a>
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_RCC_HSI_Enable>:
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <LL_RCC_HSI_Disable>:
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e44:	6013      	str	r3, [r2, #0]
}
 8003e46:	bf00      	nop
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_RCC_HSI_IsReady>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e62:	d101      	bne.n	8003e68 <LL_RCC_HSI_IsReady+0x18>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <LL_RCC_HSI_IsReady+0x1a>
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	061b      	lsls	r3, r3, #24
 8003e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <LL_RCC_HSI48_Enable>:
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003eb6:	bf00      	nop
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <LL_RCC_HSI48_Disable>:
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_HSI48_IsReady>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d101      	bne.n	8003efa <LL_RCC_HSI48_IsReady+0x18>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <LL_RCC_HSI48_IsReady+0x1a>
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <LL_RCC_LSE_Enable>:
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_RCC_LSE_Disable>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <LL_RCC_LSE_EnableBypass>:
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f5a:	f043 0304 	orr.w	r3, r3, #4
 8003f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <LL_RCC_LSE_DisableBypass>:
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f7c:	f023 0304 	bic.w	r3, r3, #4
 8003f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_LSE_IsReady>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d101      	bne.n	8003fa6 <LL_RCC_LSE_IsReady+0x18>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <LL_RCC_LSE_IsReady+0x1a>
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_RCC_LSI1_Enable>:
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_RCC_LSI1_Disable>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <LL_RCC_LSI1_IsReady>:
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	d101      	bne.n	800400e <LL_RCC_LSI1_IsReady+0x18>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <LL_RCC_LSI1_IsReady+0x1a>
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <LL_RCC_LSI2_Enable>:
{
 800401a:	b480      	push	{r7}
 800401c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_RCC_LSI2_Disable>:
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <LL_RCC_LSI2_IsReady>:
{
 800405e:	b480      	push	{r7}
 8004060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b08      	cmp	r3, #8
 8004070:	d101      	bne.n	8004076 <LL_RCC_LSI2_IsReady+0x18>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <LL_RCC_LSI2_IsReady+0x1a>
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <LL_RCC_LSI2_SetTrimming>:
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800408a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004092:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_RCC_MSI_Enable>:
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80040b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LL_RCC_MSI_Disable>:
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80040d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040dc:	f023 0301 	bic.w	r3, r3, #1
 80040e0:	6013      	str	r3, [r2, #0]
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_MSI_IsReady>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d101      	bne.n	8004102 <LL_RCC_MSI_IsReady+0x16>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <LL_RCC_MSI_IsReady+0x18>
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_RCC_MSI_SetRange>:
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_RCC_MSI_GetRange>:
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004146:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2bb0      	cmp	r3, #176	; 0xb0
 800414c:	d901      	bls.n	8004152 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800414e:	23b0      	movs	r3, #176	; 0xb0
 8004150:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004152:	687b      	ldr	r3, [r7, #4]
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <LL_RCC_SetSysClkSource>:
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f023 0203 	bic.w	r2, r3, #3
 800419c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <LL_RCC_GetSysClkSource>:
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80041b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 030c 	and.w	r3, r3, #12
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <LL_RCC_SetAHBPrescaler>:
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80041d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80041f2:	b480      	push	{r7}
 80041f4:	b083      	sub	sp, #12
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80041fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <LL_RCC_SetAHB4Prescaler>:
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800422e:	f023 020f 	bic.w	r2, r3, #15
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <LL_RCC_SetAPB1Prescaler>:
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800425e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <LL_RCC_SetAPB2Prescaler>:
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4313      	orrs	r3, r2
 800428e:	608b      	str	r3, [r1, #8]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_RCC_GetAHBPrescaler>:
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80042a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_RCC_GetAHB4Prescaler>:
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <LL_RCC_GetAPB1Prescaler>:
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80042de:	4618      	mov	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <LL_RCC_GetAPB2Prescaler>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80042ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_RCC_PLL_Enable>:
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800430e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004312:	6013      	str	r3, [r2, #0]
}
 8004314:	bf00      	nop
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_RCC_PLL_Disable>:
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004330:	6013      	str	r3, [r2, #0]
}
 8004332:	bf00      	nop
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <LL_RCC_PLL_IsReady>:
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800434e:	d101      	bne.n	8004354 <LL_RCC_PLL_IsReady+0x18>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <LL_RCC_PLL_IsReady+0x1a>
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <LL_RCC_PLL_GetN>:
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_RCC_PLL_GetR>:
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <LL_RCC_PLL_GetDivider>:
{
 8004392:	b480      	push	{r7}
 8004394:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <LL_RCC_PLL_GetMainSource>:
{
 80043aa:	b480      	push	{r7}
 80043ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0303 	and.w	r3, r3, #3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <LL_RCC_IsActiveFlag_HPRE>:
{
 80043c2:	b480      	push	{r7}
 80043c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d101      	bne.n	80043da <LL_RCC_IsActiveFlag_HPRE+0x18>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80043ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043fa:	d101      	bne.n	8004400 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004414:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004420:	d101      	bne.n	8004426 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004432:	b480      	push	{r7}
 8004434:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004444:	d101      	bne.n	800444a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004456:	b480      	push	{r7}
 8004458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800445a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004464:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004468:	d101      	bne.n	800446e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800447c:	b590      	push	{r4, r7, lr}
 800447e:	b08d      	sub	sp, #52	; 0x34
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e363      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 808d 	beq.w	80045b6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449c:	f7ff fe89 	bl	80041b2 <LL_RCC_GetSysClkSource>
 80044a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a2:	f7ff ff82 	bl	80043aa <LL_RCC_PLL_GetMainSource>
 80044a6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <HAL_RCC_OscConfig+0x3e>
 80044ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b0:	2b0c      	cmp	r3, #12
 80044b2:	d147      	bne.n	8004544 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d144      	bne.n	8004544 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e347      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80044ca:	f7ff fe34 	bl	8004136 <LL_RCC_MSI_GetRange>
 80044ce:	4603      	mov	r3, r0
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d914      	bls.n	80044fe <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fd2f 	bl	8004f3c <RCC_SetFlashLatencyFromMSIRange>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e336      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fe0e 	bl	800410e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fe32 	bl	8004160 <LL_RCC_MSI_SetCalibTrimming>
 80044fc:	e013      	b.n	8004526 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fe03 	bl	800410e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fe27 	bl	8004160 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fd10 	bl	8004f3c <RCC_SetFlashLatencyFromMSIRange>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e317      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004526:	f000 fcc9 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 800452a:	4603      	mov	r3, r0
 800452c:	4aa4      	ldr	r2, [pc, #656]	; (80047c0 <HAL_RCC_OscConfig+0x344>)
 800452e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004530:	4ba4      	ldr	r3, [pc, #656]	; (80047c4 <HAL_RCC_OscConfig+0x348>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe fc17 	bl	8002d68 <HAL_InitTick>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d039      	beq.n	80045b4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e308      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01e      	beq.n	800458a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800454c:	f7ff fdb0 	bl	80040b0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004550:	f7fe fc58 	bl	8002e04 <HAL_GetTick>
 8004554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004558:	f7fe fc54 	bl	8002e04 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e2f5      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800456a:	f7ff fdbf 	bl	80040ec <LL_RCC_MSI_IsReady>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f1      	beq.n	8004558 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fdc8 	bl	800410e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fdec 	bl	8004160 <LL_RCC_MSI_SetCalibTrimming>
 8004588:	e015      	b.n	80045b6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800458a:	f7ff fda0 	bl	80040ce <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800458e:	f7fe fc39 	bl	8002e04 <HAL_GetTick>
 8004592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004596:	f7fe fc35 	bl	8002e04 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e2d6      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80045a8:	f7ff fda0 	bl	80040ec <LL_RCC_MSI_IsReady>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f1      	bne.n	8004596 <HAL_RCC_OscConfig+0x11a>
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80045b4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d047      	beq.n	8004652 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045c2:	f7ff fdf6 	bl	80041b2 <LL_RCC_GetSysClkSource>
 80045c6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045c8:	f7ff feef 	bl	80043aa <LL_RCC_PLL_GetMainSource>
 80045cc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_OscConfig+0x164>
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d108      	bne.n	80045ec <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d105      	bne.n	80045ec <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d134      	bne.n	8004652 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e2b4      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f4:	d102      	bne.n	80045fc <HAL_RCC_OscConfig+0x180>
 80045f6:	f7ff fbdd 	bl	8003db4 <LL_RCC_HSE_Enable>
 80045fa:	e001      	b.n	8004600 <HAL_RCC_OscConfig+0x184>
 80045fc:	f7ff fbe9 	bl	8003dd2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d012      	beq.n	800462e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fe fbfc 	bl	8002e04 <HAL_GetTick>
 800460c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fe fbf8 	bl	8002e04 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e299      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004622:	f7ff fbe5 	bl	8003df0 <LL_RCC_HSE_IsReady>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f1      	beq.n	8004610 <HAL_RCC_OscConfig+0x194>
 800462c:	e011      	b.n	8004652 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462e:	f7fe fbe9 	bl	8002e04 <HAL_GetTick>
 8004632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004636:	f7fe fbe5 	bl	8002e04 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b64      	cmp	r3, #100	; 0x64
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e286      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004648:	f7ff fbd2 	bl	8003df0 <LL_RCC_HSE_IsReady>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f1      	bne.n	8004636 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d04c      	beq.n	80046f8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800465e:	f7ff fda8 	bl	80041b2 <LL_RCC_GetSysClkSource>
 8004662:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004664:	f7ff fea1 	bl	80043aa <LL_RCC_PLL_GetMainSource>
 8004668:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d005      	beq.n	800467c <HAL_RCC_OscConfig+0x200>
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b0c      	cmp	r3, #12
 8004674:	d10e      	bne.n	8004694 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d10b      	bne.n	8004694 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e266      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fbf1 	bl	8003e74 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004692:	e031      	b.n	80046f8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d019      	beq.n	80046d0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800469c:	f7ff fbba 	bl	8003e14 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fe fbb0 	bl	8002e04 <HAL_GetTick>
 80046a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a8:	f7fe fbac 	bl	8002e04 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e24d      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80046ba:	f7ff fbc9 	bl	8003e50 <LL_RCC_HSI_IsReady>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f1      	beq.n	80046a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fbd3 	bl	8003e74 <LL_RCC_HSI_SetCalibTrimming>
 80046ce:	e013      	b.n	80046f8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046d0:	f7ff fbaf 	bl	8003e32 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fe fb96 	bl	8002e04 <HAL_GetTick>
 80046d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046dc:	f7fe fb92 	bl	8002e04 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e233      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80046ee:	f7ff fbaf 	bl	8003e50 <LL_RCC_HSI_IsReady>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f1      	bne.n	80046dc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d106      	bne.n	8004712 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80a3 	beq.w	8004858 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d076      	beq.n	8004808 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	d046      	beq.n	80047b4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004726:	f7ff fc66 	bl	8003ff6 <LL_RCC_LSI1_IsReady>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d113      	bne.n	8004758 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004730:	f7ff fc3f 	bl	8003fb2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004734:	f7fe fb66 	bl	8002e04 <HAL_GetTick>
 8004738:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800473c:	f7fe fb62 	bl	8002e04 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e203      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800474e:	f7ff fc52 	bl	8003ff6 <LL_RCC_LSI1_IsReady>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f1      	beq.n	800473c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004758:	f7ff fc5f 	bl	800401a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fe fb52 	bl	8002e04 <HAL_GetTick>
 8004760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004764:	f7fe fb4e 	bl	8002e04 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b03      	cmp	r3, #3
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e1ef      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004776:	f7ff fc72 	bl	800405e <LL_RCC_LSI2_IsReady>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f1      	beq.n	8004764 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fc7c 	bl	8004082 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800478a:	f7ff fc23 	bl	8003fd4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478e:	f7fe fb39 	bl	8002e04 <HAL_GetTick>
 8004792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004794:	e008      	b.n	80047a8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004796:	f7fe fb35 	bl	8002e04 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d901      	bls.n	80047a8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e1d6      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80047a8:	f7ff fc25 	bl	8003ff6 <LL_RCC_LSI1_IsReady>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f1      	bne.n	8004796 <HAL_RCC_OscConfig+0x31a>
 80047b2:	e051      	b.n	8004858 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80047b4:	f7ff fbfd 	bl	8003fb2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fe fb24 	bl	8002e04 <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80047be:	e00c      	b.n	80047da <HAL_RCC_OscConfig+0x35e>
 80047c0:	20000020 	.word	0x20000020
 80047c4:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80047c8:	f7fe fb1c 	bl	8002e04 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e1bd      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80047da:	f7ff fc0c 	bl	8003ff6 <LL_RCC_LSI1_IsReady>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f1      	beq.n	80047c8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80047e4:	f7ff fc2a 	bl	800403c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80047e8:	e008      	b.n	80047fc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80047ea:	f7fe fb0b 	bl	8002e04 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e1ac      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80047fc:	f7ff fc2f 	bl	800405e <LL_RCC_LSI2_IsReady>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f1      	bne.n	80047ea <HAL_RCC_OscConfig+0x36e>
 8004806:	e027      	b.n	8004858 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004808:	f7ff fc18 	bl	800403c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480c:	f7fe fafa 	bl	8002e04 <HAL_GetTick>
 8004810:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004814:	f7fe faf6 	bl	8002e04 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b03      	cmp	r3, #3
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e197      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004826:	f7ff fc1a 	bl	800405e <LL_RCC_LSI2_IsReady>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f1      	bne.n	8004814 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004830:	f7ff fbd0 	bl	8003fd4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004834:	f7fe fae6 	bl	8002e04 <HAL_GetTick>
 8004838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800483c:	f7fe fae2 	bl	8002e04 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e183      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800484e:	f7ff fbd2 	bl	8003ff6 <LL_RCC_LSI1_IsReady>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f1      	bne.n	800483c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d05b      	beq.n	800491c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004864:	4ba7      	ldr	r3, [pc, #668]	; (8004b04 <HAL_RCC_OscConfig+0x688>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d114      	bne.n	800489a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004870:	f7ff fa70 	bl	8003d54 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004874:	f7fe fac6 	bl	8002e04 <HAL_GetTick>
 8004878:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487c:	f7fe fac2 	bl	8002e04 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e163      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800488e:	4b9d      	ldr	r3, [pc, #628]	; (8004b04 <HAL_RCC_OscConfig+0x688>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d102      	bne.n	80048a8 <HAL_RCC_OscConfig+0x42c>
 80048a2:	f7ff fb30 	bl	8003f06 <LL_RCC_LSE_Enable>
 80048a6:	e00c      	b.n	80048c2 <HAL_RCC_OscConfig+0x446>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	d104      	bne.n	80048ba <HAL_RCC_OscConfig+0x43e>
 80048b0:	f7ff fb4b 	bl	8003f4a <LL_RCC_LSE_EnableBypass>
 80048b4:	f7ff fb27 	bl	8003f06 <LL_RCC_LSE_Enable>
 80048b8:	e003      	b.n	80048c2 <HAL_RCC_OscConfig+0x446>
 80048ba:	f7ff fb35 	bl	8003f28 <LL_RCC_LSE_Disable>
 80048be:	f7ff fb55 	bl	8003f6c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d014      	beq.n	80048f4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ca:	f7fe fa9b 	bl	8002e04 <HAL_GetTick>
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80048d0:	e00a      	b.n	80048e8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fe fa97 	bl	8002e04 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e136      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80048e8:	f7ff fb51 	bl	8003f8e <LL_RCC_LSE_IsReady>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0ef      	beq.n	80048d2 <HAL_RCC_OscConfig+0x456>
 80048f2:	e013      	b.n	800491c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fe fa86 	bl	8002e04 <HAL_GetTick>
 80048f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fc:	f7fe fa82 	bl	8002e04 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e121      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004912:	f7ff fb3c 	bl	8003f8e <LL_RCC_LSE_IsReady>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1ef      	bne.n	80048fc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d02c      	beq.n	8004982 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	2b00      	cmp	r3, #0
 800492e:	d014      	beq.n	800495a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004930:	f7ff fab5 	bl	8003e9e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004934:	f7fe fa66 	bl	8002e04 <HAL_GetTick>
 8004938:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800493c:	f7fe fa62 	bl	8002e04 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e103      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800494e:	f7ff fac8 	bl	8003ee2 <LL_RCC_HSI48_IsReady>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f1      	beq.n	800493c <HAL_RCC_OscConfig+0x4c0>
 8004958:	e013      	b.n	8004982 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800495a:	f7ff fab1 	bl	8003ec0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495e:	f7fe fa51 	bl	8002e04 <HAL_GetTick>
 8004962:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004966:	f7fe fa4d 	bl	8002e04 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e0ee      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004978:	f7ff fab3 	bl	8003ee2 <LL_RCC_HSI48_IsReady>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f1      	bne.n	8004966 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80e4 	beq.w	8004b54 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800498c:	f7ff fc11 	bl	80041b2 <LL_RCC_GetSysClkSource>
 8004990:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	2b02      	cmp	r3, #2
 80049a0:	f040 80b4 	bne.w	8004b0c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 0203 	and.w	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d123      	bne.n	80049fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d11c      	bne.n	80049fa <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	0a1b      	lsrs	r3, r3, #8
 80049c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d114      	bne.n	80049fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d10d      	bne.n	80049fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d106      	bne.n	80049fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d05d      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b0c      	cmp	r3, #12
 80049fe:	d058      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0a1      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a12:	f7ff fc84 	bl	800431e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a16:	f7fe f9f5 	bl	8002e04 <HAL_GetTick>
 8004a1a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fe f9f1 	bl	8002e04 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e092      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1ef      	bne.n	8004a1e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	4b30      	ldr	r3, [pc, #192]	; (8004b08 <HAL_RCC_OscConfig+0x68c>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a50:	4311      	orrs	r1, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a56:	0212      	lsls	r2, r2, #8
 8004a58:	4311      	orrs	r1, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a5e:	4311      	orrs	r1, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a64:	4311      	orrs	r1, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a74:	f7ff fc44 	bl	8004300 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a88:	f7fe f9bc 	bl	8002e04 <HAL_GetTick>
 8004a8c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fe f9b8 	bl	8002e04 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e059      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ef      	beq.n	8004a90 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab0:	e050      	b.n	8004b54 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e04f      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d147      	bne.n	8004b54 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ac4:	f7ff fc1c 	bl	8004300 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ad8:	f7fe f994 	bl	8002e04 <HAL_GetTick>
 8004adc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae0:	f7fe f990 	bl	8002e04 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e031      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0ef      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x664>
 8004b00:	e028      	b.n	8004b54 <HAL_RCC_OscConfig+0x6d8>
 8004b02:	bf00      	nop
 8004b04:	58000400 	.word	0x58000400
 8004b08:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d01e      	beq.n	8004b50 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b12:	f7ff fc04 	bl	800431e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fe f975 	bl	8002e04 <HAL_GetTick>
 8004b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fe f971 	bl	8002e04 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e012      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1ef      	bne.n	8004b1e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b48:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_OscConfig+0x6e4>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60cb      	str	r3, [r1, #12]
 8004b4e:	e001      	b.n	8004b54 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3734      	adds	r7, #52	; 0x34
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd90      	pop	{r4, r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	eefefffc 	.word	0xeefefffc

08004b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e12d      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b78:	4b98      	ldr	r3, [pc, #608]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d91b      	bls.n	8004bbe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b86:	4b95      	ldr	r3, [pc, #596]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 0207 	bic.w	r2, r3, #7
 8004b8e:	4993      	ldr	r1, [pc, #588]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b96:	f7fe f935 	bl	8002e04 <HAL_GetTick>
 8004b9a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b9e:	f7fe f931 	bl	8002e04 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e111      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb0:	4b8a      	ldr	r3, [pc, #552]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d1ef      	bne.n	8004b9e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fafb 	bl	80041ca <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bd4:	f7fe f916 	bl	8002e04 <HAL_GetTick>
 8004bd8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bdc:	f7fe f912 	bl	8002e04 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e0f2      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004bee:	f7ff fbe8 	bl	80043c2 <LL_RCC_IsActiveFlag_HPRE>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0f1      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d016      	beq.n	8004c32 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff faf2 	bl	80041f2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c0e:	f7fe f8f9 	bl	8002e04 <HAL_GetTick>
 8004c12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c16:	f7fe f8f5 	bl	8002e04 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0d5      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004c28:	f7ff fbdd 	bl	80043e6 <LL_RCC_IsActiveFlag_C2HPRE>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f1      	beq.n	8004c16 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d016      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff faeb 	bl	800421e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c48:	f7fe f8dc 	bl	8002e04 <HAL_GetTick>
 8004c4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c50:	f7fe f8d8 	bl	8002e04 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e0b8      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004c62:	f7ff fbd3 	bl	800440c <LL_RCC_IsActiveFlag_SHDHPRE>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f1      	beq.n	8004c50 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d016      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fae5 	bl	800424c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c82:	f7fe f8bf 	bl	8002e04 <HAL_GetTick>
 8004c86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c8a:	f7fe f8bb 	bl	8002e04 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e09b      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004c9c:	f7ff fbc9 	bl	8004432 <LL_RCC_IsActiveFlag_PPRE1>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f1      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d017      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fadb 	bl	8004274 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cbe:	f7fe f8a1 	bl	8002e04 <HAL_GetTick>
 8004cc2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cc6:	f7fe f89d 	bl	8002e04 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e07d      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004cd8:	f7ff fbbd 	bl	8004456 <LL_RCC_IsActiveFlag_PPRE2>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f1      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d043      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d106      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004cf6:	f7ff f87b 	bl	8003df0 <LL_RCC_HSE_IsReady>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11e      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e067      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d106      	bne.n	8004d1a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004d0c:	f7ff fb16 	bl	800433c <LL_RCC_PLL_IsReady>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d113      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e05c      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004d22:	f7ff f9e3 	bl	80040ec <LL_RCC_MSI_IsReady>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d108      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e051      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004d30:	f7ff f88e 	bl	8003e50 <LL_RCC_HSI_IsReady>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e04a      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff fa21 	bl	800418a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d48:	f7fe f85c 	bl	8002e04 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4e:	e00a      	b.n	8004d66 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d50:	f7fe f858 	bl	8002e04 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e036      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d66:	f7ff fa24 	bl	80041b2 <LL_RCC_GetSysClkSource>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d1ec      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d76:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d21b      	bcs.n	8004dbc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d84:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f023 0207 	bic.w	r2, r3, #7
 8004d8c:	4913      	ldr	r1, [pc, #76]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d94:	f7fe f836 	bl	8002e04 <HAL_GetTick>
 8004d98:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d9c:	f7fe f832 	bl	8002e04 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e012      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dae:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_RCC_ClockConfig+0x278>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d1ef      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004dbc:	f000 f87e 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4a07      	ldr	r2, [pc, #28]	; (8004de0 <HAL_RCC_ClockConfig+0x27c>)
 8004dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004dc6:	f7fe f829 	bl	8002e1c <HAL_GetTickPrio>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fd ffcb 	bl	8002d68 <HAL_InitTick>
 8004dd2:	4603      	mov	r3, r0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	58004000 	.word	0x58004000
 8004de0:	20000020 	.word	0x20000020

08004de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de4:	b590      	push	{r4, r7, lr}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dea:	f7ff f9e2 	bl	80041b2 <LL_RCC_GetSysClkSource>
 8004dee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10a      	bne.n	8004e0c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004df6:	f7ff f99e 	bl	8004136 <LL_RCC_MSI_GetRange>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	4a2b      	ldr	r2, [pc, #172]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e04b      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d102      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e12:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	e045      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d10a      	bne.n	8004e34 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004e1e:	f7fe ffb7 	bl	8003d90 <LL_RCC_HSE_IsEnabledDiv2>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d102      	bne.n	8004e2e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004e28:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	e03a      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004e2e:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e037      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004e34:	f7ff fab9 	bl	80043aa <LL_RCC_PLL_GetMainSource>
 8004e38:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d003      	beq.n	8004e48 <HAL_RCC_GetSysClockFreq+0x64>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d003      	beq.n	8004e4e <HAL_RCC_GetSysClockFreq+0x6a>
 8004e46:	e00d      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004e48:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e4a:	60bb      	str	r3, [r7, #8]
        break;
 8004e4c:	e015      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004e4e:	f7fe ff9f 	bl	8003d90 <LL_RCC_HSE_IsEnabledDiv2>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d102      	bne.n	8004e5e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004e58:	4b16      	ldr	r3, [pc, #88]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e5a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004e5c:	e00d      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004e5e:	4b16      	ldr	r3, [pc, #88]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004e60:	60bb      	str	r3, [r7, #8]
        break;
 8004e62:	e00a      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004e64:	f7ff f967 	bl	8004136 <LL_RCC_MSI_GetRange>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	091b      	lsrs	r3, r3, #4
 8004e6c:	f003 030f 	and.w	r3, r3, #15
 8004e70:	4a0f      	ldr	r2, [pc, #60]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e76:	60bb      	str	r3, [r7, #8]
        break;
 8004e78:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004e7a:	f7ff fa71 	bl	8004360 <LL_RCC_PLL_GetN>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	fb03 f402 	mul.w	r4, r3, r2
 8004e86:	f7ff fa84 	bl	8004392 <LL_RCC_PLL_GetDivider>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	3301      	adds	r3, #1
 8004e90:	fbb4 f4f3 	udiv	r4, r4, r3
 8004e94:	f7ff fa71 	bl	800437a <LL_RCC_PLL_GetR>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	0f5b      	lsrs	r3, r3, #29
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004ea2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd90      	pop	{r4, r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	0800ec9c 	.word	0x0800ec9c
 8004eb4:	00f42400 	.word	0x00f42400
 8004eb8:	01e84800 	.word	0x01e84800

08004ebc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ebc:	b598      	push	{r3, r4, r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004ec0:	f7ff ff90 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	f7ff f9e9 	bl	800429c <LL_RCC_GetAHBPrescaler>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	4a03      	ldr	r2, [pc, #12]	; (8004ee0 <HAL_RCC_GetHCLKFreq+0x24>)
 8004ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	bd98      	pop	{r3, r4, r7, pc}
 8004ee0:	0800ec3c 	.word	0x0800ec3c

08004ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ee4:	b598      	push	{r3, r4, r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004ee8:	f7ff ffe8 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004eec:	4604      	mov	r4, r0
 8004eee:	f7ff f9ef 	bl	80042d0 <LL_RCC_GetAPB1Prescaler>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	0a1b      	lsrs	r3, r3, #8
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	4a04      	ldr	r2, [pc, #16]	; (8004f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd98      	pop	{r3, r4, r7, pc}
 8004f0c:	0800ec7c 	.word	0x0800ec7c

08004f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f10:	b598      	push	{r3, r4, r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004f14:	f7ff ffd2 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004f18:	4604      	mov	r4, r0
 8004f1a:	f7ff f9e5 	bl	80042e8 <LL_RCC_GetAPB2Prescaler>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	0adb      	lsrs	r3, r3, #11
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	4a04      	ldr	r2, [pc, #16]	; (8004f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd98      	pop	{r3, r4, r7, pc}
 8004f38:	0800ec7c 	.word	0x0800ec7c

08004f3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004f3c:	b590      	push	{r4, r7, lr}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2bb0      	cmp	r3, #176	; 0xb0
 8004f48:	d903      	bls.n	8004f52 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004f4a:	4b15      	ldr	r3, [pc, #84]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e007      	b.n	8004f62 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	4a11      	ldr	r2, [pc, #68]	; (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f60:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004f62:	f7ff f9a7 	bl	80042b4 <LL_RCC_GetAHB4Prescaler>
 8004f66:	4603      	mov	r3, r0
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	4a0d      	ldr	r2, [pc, #52]	; (8004fa4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	0c9c      	lsrs	r4, r3, #18
 8004f86:	f7fe fef5 	bl	8003d74 <HAL_PWREx_GetVoltageRange>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f000 f80c 	bl	8004fac <RCC_SetFlashLatency>
 8004f94:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd90      	pop	{r4, r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	0800ec9c 	.word	0x0800ec9c
 8004fa4:	0800ec3c 	.word	0x0800ec3c
 8004fa8:	431bde83 	.word	0x431bde83

08004fac <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004fac:	b590      	push	{r4, r7, lr}
 8004fae:	b093      	sub	sp, #76	; 0x4c
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004fb6:	4b37      	ldr	r3, [pc, #220]	; (8005094 <RCC_SetFlashLatency+0xe8>)
 8004fb8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004fbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004fc2:	4a35      	ldr	r2, [pc, #212]	; (8005098 <RCC_SetFlashLatency+0xec>)
 8004fc4:	f107 031c 	add.w	r3, r7, #28
 8004fc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004fca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004fce:	4b33      	ldr	r3, [pc, #204]	; (800509c <RCC_SetFlashLatency+0xf0>)
 8004fd0:	f107 040c 	add.w	r4, r7, #12
 8004fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004fda:	2300      	movs	r3, #0
 8004fdc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe4:	d11a      	bne.n	800501c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8004fea:	e013      	b.n	8005014 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	3348      	adds	r3, #72	; 0x48
 8004ff2:	443b      	add	r3, r7
 8004ff4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d807      	bhi.n	800500e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	3348      	adds	r3, #72	; 0x48
 8005004:	443b      	add	r3, r7
 8005006:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800500a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800500c:	e020      	b.n	8005050 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800500e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005010:	3301      	adds	r3, #1
 8005012:	643b      	str	r3, [r7, #64]	; 0x40
 8005014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005016:	2b03      	cmp	r3, #3
 8005018:	d9e8      	bls.n	8004fec <RCC_SetFlashLatency+0x40>
 800501a:	e019      	b.n	8005050 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800501c:	2300      	movs	r3, #0
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005020:	e013      	b.n	800504a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	3348      	adds	r3, #72	; 0x48
 8005028:	443b      	add	r3, r7
 800502a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d807      	bhi.n	8005044 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	3348      	adds	r3, #72	; 0x48
 800503a:	443b      	add	r3, r7
 800503c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005040:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005042:	e005      	b.n	8005050 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005046:	3301      	adds	r3, #1
 8005048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800504a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504c:	2b02      	cmp	r3, #2
 800504e:	d9e8      	bls.n	8005022 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <RCC_SetFlashLatency+0xf4>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f023 0207 	bic.w	r2, r3, #7
 8005058:	4911      	ldr	r1, [pc, #68]	; (80050a0 <RCC_SetFlashLatency+0xf4>)
 800505a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505c:	4313      	orrs	r3, r2
 800505e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005060:	f7fd fed0 	bl	8002e04 <HAL_GetTick>
 8005064:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005066:	e008      	b.n	800507a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005068:	f7fd fecc 	bl	8002e04 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e007      	b.n	800508a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <RCC_SetFlashLatency+0xf4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005084:	429a      	cmp	r2, r3
 8005086:	d1ef      	bne.n	8005068 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	374c      	adds	r7, #76	; 0x4c
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
 8005092:	bf00      	nop
 8005094:	0800ddb8 	.word	0x0800ddb8
 8005098:	0800ddc8 	.word	0x0800ddc8
 800509c:	0800ddd4 	.word	0x0800ddd4
 80050a0:	58004000 	.word	0x58004000

080050a4 <LL_RCC_LSE_IsEnabled>:
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80050a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <LL_RCC_LSE_IsEnabled+0x18>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <LL_RCC_LSE_IsEnabled+0x1a>
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <LL_RCC_LSE_IsReady>:
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80050cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d101      	bne.n	80050e0 <LL_RCC_LSE_IsReady+0x18>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <LL_RCC_LSE_IsReady+0x1a>
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <LL_RCC_SetRFWKPClockSource>:
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80050f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <LL_RCC_SetSMPSClockSource>:
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	f023 0203 	bic.w	r2, r3, #3
 800512a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4313      	orrs	r3, r2
 8005132:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <LL_RCC_SetSMPSPrescaler>:
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005152:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4313      	orrs	r3, r2
 800515a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <LL_RCC_SetUSARTClockSource>:
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005178:	f023 0203 	bic.w	r2, r3, #3
 800517c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <LL_RCC_SetLPUARTClockSource>:
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800519c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_RCC_SetI2CClockSource>:
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80051c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80051d8:	43db      	mvns	r3, r3
 80051da:	401a      	ands	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80051e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <LL_RCC_SetLPTIMClockSource>:
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005206:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	0c1b      	lsrs	r3, r3, #16
 800520e:	041b      	lsls	r3, r3, #16
 8005210:	43db      	mvns	r3, r3
 8005212:	401a      	ands	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	041b      	lsls	r3, r3, #16
 8005218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <LL_RCC_SetSAIClockSource>:
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <LL_RCC_SetRNGClockSource>:
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800526e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <LL_RCC_SetCLK48ClockSource>:
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800528e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800529a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <LL_RCC_SetUSBClockSource>:
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff ffe3 	bl	8005286 <LL_RCC_SetCLK48ClockSource>
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <LL_RCC_SetADCClockSource>:
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80052d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <LL_RCC_SetRTCClockSource>:
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80052fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <LL_RCC_GetRTCClockSource>:
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005330:	4618      	mov	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_RCC_ForceBackupDomainReset>:
{
 800533a:	b480      	push	{r7}
 800533c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800533e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800534a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005352:	bf00      	nop
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <LL_RCC_ReleaseBackupDomainReset>:
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800536c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <LL_RCC_PLLSAI1_Enable>:
{
 800537e:	b480      	push	{r7}
 8005380:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800538c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005390:	6013      	str	r3, [r2, #0]
}
 8005392:	bf00      	nop
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <LL_RCC_PLLSAI1_Disable>:
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80053a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053ae:	6013      	str	r3, [r2, #0]
}
 80053b0:	bf00      	nop
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <LL_RCC_PLLSAI1_IsReady>:
{
 80053ba:	b480      	push	{r7}
 80053bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80053be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053cc:	d101      	bne.n	80053d2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b088      	sub	sp, #32
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80053e6:	2300      	movs	r3, #0
 80053e8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80053ea:	2300      	movs	r3, #0
 80053ec:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d034      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005402:	d021      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005404:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005408:	d81b      	bhi.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800540a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800540e:	d01d      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005410:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005414:	d815      	bhi.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00b      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800541a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800541e:	d110      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800542a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800542e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005430:	e00d      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3304      	adds	r3, #4
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f947 	bl	80056ca <RCCEx_PLLSAI1_ConfigNP>
 800543c:	4603      	mov	r3, r0
 800543e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005440:	e005      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	77fb      	strb	r3, [r7, #31]
        break;
 8005446:	e002      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005448:	bf00      	nop
 800544a:	e000      	b.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800544c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544e:	7ffb      	ldrb	r3, [r7, #31]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff fee8 	bl	800522e <LL_RCC_SetSAIClockSource>
 800545e:	e001      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	7ffb      	ldrb	r3, [r7, #31]
 8005462:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800546c:	2b00      	cmp	r3, #0
 800546e:	d046      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005470:	f7ff ff56 	bl	8005320 <LL_RCC_GetRTCClockSource>
 8005474:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	429a      	cmp	r2, r3
 800547e:	d03c      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005480:	f7fe fc68 	bl	8003d54 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ff30 	bl	80052f4 <LL_RCC_SetRTCClockSource>
 8005494:	e02e      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80054a0:	f7ff ff4b 	bl	800533a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80054a4:	f7ff ff5a 	bl	800535c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80054b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80054c0:	f7ff fdf0 	bl	80050a4 <LL_RCC_LSE_IsEnabled>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d114      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054ca:	f7fd fc9b 	bl	8002e04 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80054d0:	e00b      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d2:	f7fd fc97 	bl	8002e04 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d902      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	77fb      	strb	r3, [r7, #31]
              break;
 80054e8:	e004      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80054ea:	f7ff fded 	bl	80050c8 <LL_RCC_LSE_IsReady>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d1ee      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80054f4:	7ffb      	ldrb	r3, [r7, #31]
 80054f6:	77bb      	strb	r3, [r7, #30]
 80054f8:	e001      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	7ffb      	ldrb	r3, [r7, #31]
 80054fc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d004      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff fe2a 	bl	8005168 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fe35 	bl	8005194 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b00      	cmp	r3, #0
 8005534:	d004      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff fe5d 	bl	80051fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d004      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff fe52 	bl	80051fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fe2a 	bl	80051c0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d004      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fe1f 	bl	80051c0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d022      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fe8d 	bl	80052b2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a0:	d107      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80055a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055b0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ba:	d10b      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 f8dd 	bl	8005780 <RCCEx_PLLSAI1_ConfigNQ>
 80055c6:	4603      	mov	r3, r0
 80055c8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80055ca:	7ffb      	ldrb	r3, [r7, #31]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80055d0:	7ffb      	ldrb	r3, [r7, #31]
 80055d2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d02b      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d008      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f2:	d003      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d105      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fe2a 	bl	800525a <LL_RCC_SetRNGClockSource>
 8005606:	e00a      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	2000      	movs	r0, #0
 8005614:	f7ff fe21 	bl	800525a <LL_RCC_SetRNGClockSource>
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff fe34 	bl	8005286 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005626:	d107      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005636:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005640:	2b00      	cmp	r3, #0
 8005642:	d022      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff fe3d 	bl	80052c8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005656:	d107      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005666:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005670:	d10b      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3304      	adds	r3, #4
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f8dd 	bl	8005836 <RCCEx_PLLSAI1_ConfigNR>
 800567c:	4603      	mov	r3, r0
 800567e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005680:	7ffb      	ldrb	r3, [r7, #31]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005686:	7ffb      	ldrb	r3, [r7, #31]
 8005688:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fd26 	bl	80050ec <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff fd45 	bl	8005140 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fd2c 	bl	8005118 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80056c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80056d6:	f7ff fe61 	bl	800539c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056da:	f7fd fb93 	bl	8002e04 <HAL_GetTick>
 80056de:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056e0:	e009      	b.n	80056f6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056e2:	f7fd fb8f 	bl	8002e04 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d902      	bls.n	80056f6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	73fb      	strb	r3, [r7, #15]
      break;
 80056f4:	e004      	b.n	8005700 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056f6:	f7ff fe60 	bl	80053ba <LL_RCC_PLLSAI1_IsReady>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f0      	bne.n	80056e2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d137      	bne.n	8005776 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800571a:	4313      	orrs	r3, r2
 800571c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005730:	4313      	orrs	r3, r2
 8005732:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005734:	f7ff fe23 	bl	800537e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005738:	f7fd fb64 	bl	8002e04 <HAL_GetTick>
 800573c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800573e:	e009      	b.n	8005754 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005740:	f7fd fb60 	bl	8002e04 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d902      	bls.n	8005754 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	73fb      	strb	r3, [r7, #15]
        break;
 8005752:	e004      	b.n	800575e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005754:	f7ff fe31 	bl	80053ba <LL_RCC_PLLSAI1_IsReady>
 8005758:	4603      	mov	r3, r0
 800575a:	2b01      	cmp	r3, #1
 800575c:	d1f0      	bne.n	8005740 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d108      	bne.n	8005776 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005772:	4313      	orrs	r3, r2
 8005774:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005776:	7bfb      	ldrb	r3, [r7, #15]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800578c:	f7ff fe06 	bl	800539c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005790:	f7fd fb38 	bl	8002e04 <HAL_GetTick>
 8005794:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005796:	e009      	b.n	80057ac <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005798:	f7fd fb34 	bl	8002e04 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d902      	bls.n	80057ac <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	73fb      	strb	r3, [r7, #15]
      break;
 80057aa:	e004      	b.n	80057b6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057ac:	f7ff fe05 	bl	80053ba <LL_RCC_PLLSAI1_IsReady>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d137      	bne.n	800582c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80057bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057d0:	4313      	orrs	r3, r2
 80057d2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80057d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057e6:	4313      	orrs	r3, r2
 80057e8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80057ea:	f7ff fdc8 	bl	800537e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ee:	f7fd fb09 	bl	8002e04 <HAL_GetTick>
 80057f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057f4:	e009      	b.n	800580a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057f6:	f7fd fb05 	bl	8002e04 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d902      	bls.n	800580a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	73fb      	strb	r3, [r7, #15]
        break;
 8005808:	e004      	b.n	8005814 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800580a:	f7ff fdd6 	bl	80053ba <LL_RCC_PLLSAI1_IsReady>
 800580e:	4603      	mov	r3, r0
 8005810:	2b01      	cmp	r3, #1
 8005812:	d1f0      	bne.n	80057f6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800581a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005828:	4313      	orrs	r3, r2
 800582a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800582c:	7bfb      	ldrb	r3, [r7, #15]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b084      	sub	sp, #16
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005842:	f7ff fdab 	bl	800539c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005846:	f7fd fadd 	bl	8002e04 <HAL_GetTick>
 800584a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800584c:	e009      	b.n	8005862 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800584e:	f7fd fad9 	bl	8002e04 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d902      	bls.n	8005862 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	73fb      	strb	r3, [r7, #15]
      break;
 8005860:	e004      	b.n	800586c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005862:	f7ff fdaa 	bl	80053ba <LL_RCC_PLLSAI1_IsReady>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f0      	bne.n	800584e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d137      	bne.n	80058e2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005886:	4313      	orrs	r3, r2
 8005888:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800588a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800589c:	4313      	orrs	r3, r2
 800589e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058a0:	f7ff fd6d 	bl	800537e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a4:	f7fd faae 	bl	8002e04 <HAL_GetTick>
 80058a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058aa:	e009      	b.n	80058c0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058ac:	f7fd faaa 	bl	8002e04 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d902      	bls.n	80058c0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	73fb      	strb	r3, [r7, #15]
        break;
 80058be:	e004      	b.n	80058ca <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058c0:	f7ff fd7b 	bl	80053ba <LL_RCC_PLLSAI1_IsReady>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d1f0      	bne.n	80058ac <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d108      	bne.n	80058e2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058de:	4313      	orrs	r3, r2
 80058e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e09f      	b.n	8005a3e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fc ffa4 	bl	8002860 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005920:	4b49      	ldr	r3, [pc, #292]	; (8005a48 <HAL_RTC_Init+0x15c>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0310 	and.w	r3, r3, #16
 8005928:	2b10      	cmp	r3, #16
 800592a:	d07e      	beq.n	8005a2a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	22ca      	movs	r2, #202	; 0xca
 8005932:	625a      	str	r2, [r3, #36]	; 0x24
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2253      	movs	r2, #83	; 0x53
 800593a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f8ab 	bl	8005a98 <RTC_EnterInitMode>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	22ff      	movs	r2, #255	; 0xff
 800594e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2204      	movs	r2, #4
 8005954:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
 800595c:	e067      	b.n	8005a2e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800596c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005970:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6899      	ldr	r1, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	431a      	orrs	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68d2      	ldr	r2, [r2, #12]
 8005998:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6919      	ldr	r1, [r3, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	041a      	lsls	r2, r3, #16
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059bc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0203 	bic.w	r2, r2, #3
 80059cc:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d113      	bne.n	8005a1c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f829 	bl	8005a4c <HAL_RTC_WaitForSynchro>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00d      	beq.n	8005a1c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	22ff      	movs	r2, #255	; 0xff
 8005a06:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e010      	b.n	8005a3e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	22ff      	movs	r2, #255	; 0xff
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	e001      	b.n	8005a2e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d103      	bne.n	8005a3c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40002800 	.word	0x40002800

08005a4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a62:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005a64:	f7fd f9ce 	bl	8002e04 <HAL_GetTick>
 8005a68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a6a:	e009      	b.n	8005a80 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a6c:	f7fd f9ca 	bl	8002e04 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a7a:	d901      	bls.n	8005a80 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e007      	b.n	8005a90 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0ee      	beq.n	8005a6c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d119      	bne.n	8005ae2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ab8:	f7fd f9a4 	bl	8002e04 <HAL_GetTick>
 8005abc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005abe:	e009      	b.n	8005ad4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005ac0:	f7fd f9a0 	bl	8002e04 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ace:	d901      	bls.n	8005ad4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e007      	b.n	8005ae4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0ee      	beq.n	8005ac0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e0a8      	b.n	8005c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2202      	movs	r2, #2
 8005b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	22ca      	movs	r2, #202	; 0xca
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2253      	movs	r2, #83	; 0x53
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d020      	beq.n	8005b76 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005b34:	f7fd f966 	bl	8002e04 <HAL_GetTick>
 8005b38:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005b3a:	e015      	b.n	8005b68 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b3c:	f7fd f962 	bl	8002e04 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b4a:	d90d      	bls.n	8005b68 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	22ff      	movs	r2, #255	; 0xff
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2203      	movs	r2, #3
 8005b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e077      	b.n	8005c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e2      	bne.n	8005b3c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b84:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005b96:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005b98:	f7fd f934 	bl	8002e04 <HAL_GetTick>
 8005b9c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005b9e:	e015      	b.n	8005bcc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ba0:	f7fd f930 	bl	8002e04 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bae:	d90d      	bls.n	8005bcc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	22ff      	movs	r2, #255	; 0xff
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2203      	movs	r2, #3
 8005bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e045      	b.n	8005c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0e2      	beq.n	8005ba0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0207 	bic.w	r2, r2, #7
 8005bf0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6899      	ldr	r1, [r3, #8]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005c02:	4b17      	ldr	r3, [pc, #92]	; (8005c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c08:	4a15      	ldr	r2, [pc, #84]	; (8005c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005c0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005c12:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a12      	ldr	r2, [pc, #72]	; (8005c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c1c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c2c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c3c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	22ff      	movs	r2, #255	; 0xff
 8005c44:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	58000800 	.word	0x58000800

08005c64 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_RTCEx_EnableBypassShadow+0x16>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e024      	b.n	8005cc4 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	22ca      	movs	r2, #202	; 0xca
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2253      	movs	r2, #83	; 0x53
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0220 	orr.w	r2, r2, #32
 8005ca8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	22ff      	movs	r2, #255	; 0xff
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <LL_RCC_GetUSARTClockSource>:
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4013      	ands	r3, r2
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <LL_RCC_GetLPUARTClockSource>:
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4013      	ands	r3, r2
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e042      	b.n	8005da8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7fc fc9f 	bl	8002678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2224      	movs	r2, #36	; 0x24
 8005d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fe60 	bl	8006a20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fc35 	bl	80065d0 <UART_SetConfig>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e01b      	b.n	8005da8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fedf 	bl	8006b64 <UART_CheckIdleState>
 8005da6:	4603      	mov	r3, r0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08a      	sub	sp, #40	; 0x28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	4613      	mov	r3, r2
 8005dbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d137      	bne.n	8005e38 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_UART_Receive_IT+0x24>
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e030      	b.n	8005e3a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a18      	ldr	r2, [pc, #96]	; (8005e44 <HAL_UART_Receive_IT+0x94>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d01f      	beq.n	8005e28 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d018      	beq.n	8005e28 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	e853 3f00 	ldrex	r3, [r3]
 8005e02:	613b      	str	r3, [r7, #16]
   return(result);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	69f9      	ldr	r1, [r7, #28]
 8005e1a:	6a3a      	ldr	r2, [r7, #32]
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e6      	bne.n	8005df6 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e28:	88fb      	ldrh	r3, [r7, #6]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 ffb0 	bl	8006d94 <UART_Start_Receive_IT>
 8005e34:	4603      	mov	r3, r0
 8005e36:	e000      	b.n	8005e3a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e38:	2302      	movs	r3, #2
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3728      	adds	r7, #40	; 0x28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40008000 	.word	0x40008000

08005e48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	4613      	mov	r3, r2
 8005e54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d167      	bne.n	8005f30 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <HAL_UART_Transmit_DMA+0x24>
 8005e66:	88fb      	ldrh	r3, [r7, #6]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e060      	b.n	8005f32 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	88fa      	ldrh	r2, [r7, #6]
 8005e7a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2221      	movs	r2, #33	; 0x21
 8005e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d028      	beq.n	8005ef0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ea2:	4a26      	ldr	r2, [pc, #152]	; (8005f3c <HAL_UART_Transmit_DMA+0xf4>)
 8005ea4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eaa:	4a25      	ldr	r2, [pc, #148]	; (8005f40 <HAL_UART_Transmit_DMA+0xf8>)
 8005eac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eb2:	4a24      	ldr	r2, [pc, #144]	; (8005f44 <HAL_UART_Transmit_DMA+0xfc>)
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eba:	2200      	movs	r2, #0
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3328      	adds	r3, #40	; 0x28
 8005ece:	461a      	mov	r2, r3
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	f7fd fa09 	bl	80032e8 <HAL_DMA_Start_IT>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d009      	beq.n	8005ef0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2210      	movs	r2, #16
 8005ee0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e020      	b.n	8005f32 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2240      	movs	r2, #64	; 0x40
 8005ef6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3308      	adds	r3, #8
 8005efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	e853 3f00 	ldrex	r3, [r3]
 8005f06:	613b      	str	r3, [r7, #16]
   return(result);
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f18:	623a      	str	r2, [r7, #32]
 8005f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	69f9      	ldr	r1, [r7, #28]
 8005f1e:	6a3a      	ldr	r2, [r7, #32]
 8005f20:	e841 2300 	strex	r3, r2, [r1]
 8005f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e5      	bne.n	8005ef8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e000      	b.n	8005f32 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
  }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3728      	adds	r7, #40	; 0x28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	08007127 	.word	0x08007127
 8005f40:	080071c1 	.word	0x080071c1
 8005f44:	080071dd 	.word	0x080071dd

08005f48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b0ba      	sub	sp, #232	; 0xe8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005f72:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f76:	4013      	ands	r3, r2
 8005f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005f7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d11b      	bne.n	8005fbc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f88:	f003 0320 	and.w	r3, r3, #32
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d015      	beq.n	8005fbc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f94:	f003 0320 	and.w	r3, r3, #32
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d105      	bne.n	8005fa8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d009      	beq.n	8005fbc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 82e3 	beq.w	8006578 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	4798      	blx	r3
      }
      return;
 8005fba:	e2dd      	b.n	8006578 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8123 	beq.w	800620c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005fc6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005fca:	4b8d      	ldr	r3, [pc, #564]	; (8006200 <HAL_UART_IRQHandler+0x2b8>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005fd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005fd6:	4b8b      	ldr	r3, [pc, #556]	; (8006204 <HAL_UART_IRQHandler+0x2bc>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 8116 	beq.w	800620c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d011      	beq.n	8006010 <HAL_UART_IRQHandler+0xc8>
 8005fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00b      	beq.n	8006010 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006006:	f043 0201 	orr.w	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d011      	beq.n	8006040 <HAL_UART_IRQHandler+0xf8>
 800601c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2202      	movs	r2, #2
 800602e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006036:	f043 0204 	orr.w	r2, r3, #4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d011      	beq.n	8006070 <HAL_UART_IRQHandler+0x128>
 800604c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2204      	movs	r2, #4
 800605e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	f043 0202 	orr.w	r2, r3, #2
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d017      	beq.n	80060ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800607c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b00      	cmp	r3, #0
 8006086:	d105      	bne.n	8006094 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006088:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800608c:	4b5c      	ldr	r3, [pc, #368]	; (8006200 <HAL_UART_IRQHandler+0x2b8>)
 800608e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00b      	beq.n	80060ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2208      	movs	r2, #8
 800609a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	f043 0208 	orr.w	r2, r3, #8
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80060ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d012      	beq.n	80060de <HAL_UART_IRQHandler+0x196>
 80060b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00c      	beq.n	80060de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 8249 	beq.w	800657c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d013      	beq.n	800611e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d005      	beq.n	8006142 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800613a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800613e:	2b00      	cmp	r3, #0
 8006140:	d054      	beq.n	80061ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 ff89 	bl	800705a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d146      	bne.n	80061e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3308      	adds	r3, #8
 800615c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800616c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3308      	adds	r3, #8
 800617e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006182:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800618e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800619a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1d9      	bne.n	8006156 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d017      	beq.n	80061dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b2:	4a15      	ldr	r2, [pc, #84]	; (8006208 <HAL_UART_IRQHandler+0x2c0>)
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fd f96d 	bl	800349c <HAL_DMA_Abort_IT>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d019      	beq.n	80061fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80061d6:	4610      	mov	r0, r2
 80061d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061da:	e00f      	b.n	80061fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f9e1 	bl	80065a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e2:	e00b      	b.n	80061fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f9dd 	bl	80065a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ea:	e007      	b.n	80061fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f9d9 	bl	80065a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80061fa:	e1bf      	b.n	800657c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061fc:	bf00      	nop
    return;
 80061fe:	e1bd      	b.n	800657c <HAL_UART_IRQHandler+0x634>
 8006200:	10000001 	.word	0x10000001
 8006204:	04000120 	.word	0x04000120
 8006208:	0800725d 	.word	0x0800725d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006210:	2b01      	cmp	r3, #1
 8006212:	f040 8153 	bne.w	80064bc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 814c 	beq.w	80064bc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8145 	beq.w	80064bc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2210      	movs	r2, #16
 8006238:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006244:	2b40      	cmp	r3, #64	; 0x40
 8006246:	f040 80bb 	bne.w	80063c0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 818f 	beq.w	8006580 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006268:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800626c:	429a      	cmp	r2, r3
 800626e:	f080 8187 	bcs.w	8006580 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006278:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 8087 	bne.w	800639e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006298:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	461a      	mov	r2, r3
 80062b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1da      	bne.n	8006290 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3308      	adds	r3, #8
 80062e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3308      	adds	r3, #8
 80062fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006302:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006306:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e1      	bne.n	80062da <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3308      	adds	r3, #8
 800631c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800632c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3308      	adds	r3, #8
 8006336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800633a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800633c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006340:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e3      	bne.n	8006316 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800636a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636c:	f023 0310 	bic.w	r3, r3, #16
 8006370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800637e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006380:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006384:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800638c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e4      	bne.n	800635c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006398:	4618      	mov	r0, r3
 800639a:	f7fd f820 	bl	80033de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f8fd 	bl	80065b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063be:	e0df      	b.n	8006580 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063da:	b29b      	uxth	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 80d1 	beq.w	8006584 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80063e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 80cc 	beq.w	8006584 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	e853 3f00 	ldrex	r3, [r3]
 80063f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006400:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800640e:	647b      	str	r3, [r7, #68]	; 0x44
 8006410:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006412:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800641c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1e4      	bne.n	80063ec <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3308      	adds	r3, #8
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	623b      	str	r3, [r7, #32]
   return(result);
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800644a:	633a      	str	r2, [r7, #48]	; 0x30
 800644c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006452:	e841 2300 	strex	r3, r2, [r1]
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e1      	bne.n	8006422 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0310 	bic.w	r3, r3, #16
 8006486:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	69b9      	ldr	r1, [r7, #24]
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	617b      	str	r3, [r7, #20]
   return(result);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e4      	bne.n	8006472 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f87f 	bl	80065b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064ba:	e063      	b.n	8006584 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00e      	beq.n	80064e6 <HAL_UART_IRQHandler+0x59e>
 80064c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80064dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f001 fc1a 	bl	8007d18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064e4:	e051      	b.n	800658a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d014      	beq.n	800651c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80064f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d105      	bne.n	800650a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80064fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d008      	beq.n	800651c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800650e:	2b00      	cmp	r3, #0
 8006510:	d03a      	beq.n	8006588 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
    }
    return;
 800651a:	e035      	b.n	8006588 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800651c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	d009      	beq.n	800653c <HAL_UART_IRQHandler+0x5f4>
 8006528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fea7 	bl	8007288 <UART_EndTransmit_IT>
    return;
 800653a:	e026      	b.n	800658a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800653c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d009      	beq.n	800655c <HAL_UART_IRQHandler+0x614>
 8006548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f001 fbf3 	bl	8007d40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800655a:	e016      	b.n	800658a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800655c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d010      	beq.n	800658a <HAL_UART_IRQHandler+0x642>
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656c:	2b00      	cmp	r3, #0
 800656e:	da0c      	bge.n	800658a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fbdb 	bl	8007d2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006576:	e008      	b.n	800658a <HAL_UART_IRQHandler+0x642>
      return;
 8006578:	bf00      	nop
 800657a:	e006      	b.n	800658a <HAL_UART_IRQHandler+0x642>
    return;
 800657c:	bf00      	nop
 800657e:	e004      	b.n	800658a <HAL_UART_IRQHandler+0x642>
      return;
 8006580:	bf00      	nop
 8006582:	e002      	b.n	800658a <HAL_UART_IRQHandler+0x642>
      return;
 8006584:	bf00      	nop
 8006586:	e000      	b.n	800658a <HAL_UART_IRQHandler+0x642>
    return;
 8006588:	bf00      	nop
  }
}
 800658a:	37e8      	adds	r7, #232	; 0xe8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d4:	b08c      	sub	sp, #48	; 0x30
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4baf      	ldr	r3, [pc, #700]	; (80068bc <UART_SetConfig+0x2ec>)
 8006600:	4013      	ands	r3, r2
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006608:	430b      	orrs	r3, r1
 800660a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4aa4      	ldr	r2, [pc, #656]	; (80068c0 <UART_SetConfig+0x2f0>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006638:	4313      	orrs	r3, r2
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006646:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	6812      	ldr	r2, [r2, #0]
 800664e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006650:	430b      	orrs	r3, r1
 8006652:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	f023 010f 	bic.w	r1, r3, #15
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a95      	ldr	r2, [pc, #596]	; (80068c4 <UART_SetConfig+0x2f4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d125      	bne.n	80066c0 <UART_SetConfig+0xf0>
 8006674:	2003      	movs	r0, #3
 8006676:	f7ff fb2b 	bl	8005cd0 <LL_RCC_GetUSARTClockSource>
 800667a:	4603      	mov	r3, r0
 800667c:	2b03      	cmp	r3, #3
 800667e:	d81b      	bhi.n	80066b8 <UART_SetConfig+0xe8>
 8006680:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <UART_SetConfig+0xb8>)
 8006682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006686:	bf00      	nop
 8006688:	08006699 	.word	0x08006699
 800668c:	080066a9 	.word	0x080066a9
 8006690:	080066a1 	.word	0x080066a1
 8006694:	080066b1 	.word	0x080066b1
 8006698:	2301      	movs	r3, #1
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669e:	e042      	b.n	8006726 <UART_SetConfig+0x156>
 80066a0:	2302      	movs	r3, #2
 80066a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a6:	e03e      	b.n	8006726 <UART_SetConfig+0x156>
 80066a8:	2304      	movs	r3, #4
 80066aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ae:	e03a      	b.n	8006726 <UART_SetConfig+0x156>
 80066b0:	2308      	movs	r3, #8
 80066b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066b6:	e036      	b.n	8006726 <UART_SetConfig+0x156>
 80066b8:	2310      	movs	r3, #16
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066be:	e032      	b.n	8006726 <UART_SetConfig+0x156>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a7e      	ldr	r2, [pc, #504]	; (80068c0 <UART_SetConfig+0x2f0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d12a      	bne.n	8006720 <UART_SetConfig+0x150>
 80066ca:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80066ce:	f7ff fb0f 	bl	8005cf0 <LL_RCC_GetLPUARTClockSource>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066d8:	d01a      	beq.n	8006710 <UART_SetConfig+0x140>
 80066da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066de:	d81b      	bhi.n	8006718 <UART_SetConfig+0x148>
 80066e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066e4:	d00c      	beq.n	8006700 <UART_SetConfig+0x130>
 80066e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ea:	d815      	bhi.n	8006718 <UART_SetConfig+0x148>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <UART_SetConfig+0x128>
 80066f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f4:	d008      	beq.n	8006708 <UART_SetConfig+0x138>
 80066f6:	e00f      	b.n	8006718 <UART_SetConfig+0x148>
 80066f8:	2300      	movs	r3, #0
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fe:	e012      	b.n	8006726 <UART_SetConfig+0x156>
 8006700:	2302      	movs	r3, #2
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006706:	e00e      	b.n	8006726 <UART_SetConfig+0x156>
 8006708:	2304      	movs	r3, #4
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670e:	e00a      	b.n	8006726 <UART_SetConfig+0x156>
 8006710:	2308      	movs	r3, #8
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006716:	e006      	b.n	8006726 <UART_SetConfig+0x156>
 8006718:	2310      	movs	r3, #16
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671e:	e002      	b.n	8006726 <UART_SetConfig+0x156>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a65      	ldr	r2, [pc, #404]	; (80068c0 <UART_SetConfig+0x2f0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	f040 8097 	bne.w	8006860 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006732:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006736:	2b08      	cmp	r3, #8
 8006738:	d823      	bhi.n	8006782 <UART_SetConfig+0x1b2>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <UART_SetConfig+0x170>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006765 	.word	0x08006765
 8006744:	08006783 	.word	0x08006783
 8006748:	0800676d 	.word	0x0800676d
 800674c:	08006783 	.word	0x08006783
 8006750:	08006773 	.word	0x08006773
 8006754:	08006783 	.word	0x08006783
 8006758:	08006783 	.word	0x08006783
 800675c:	08006783 	.word	0x08006783
 8006760:	0800677b 	.word	0x0800677b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006764:	f7fe fbbe 	bl	8004ee4 <HAL_RCC_GetPCLK1Freq>
 8006768:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800676a:	e010      	b.n	800678e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800676c:	4b56      	ldr	r3, [pc, #344]	; (80068c8 <UART_SetConfig+0x2f8>)
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006770:	e00d      	b.n	800678e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006772:	f7fe fb37 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 8006776:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006778:	e009      	b.n	800678e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800677a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006780:	e005      	b.n	800678e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800678c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 812b 	beq.w	80069ec <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	4a4c      	ldr	r2, [pc, #304]	; (80068cc <UART_SetConfig+0x2fc>)
 800679c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067a0:	461a      	mov	r2, r3
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	4413      	add	r3, r2
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d305      	bcc.n	80067c6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d903      	bls.n	80067ce <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80067cc:	e10e      	b.n	80069ec <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	2200      	movs	r2, #0
 80067d2:	60bb      	str	r3, [r7, #8]
 80067d4:	60fa      	str	r2, [r7, #12]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	4a3c      	ldr	r2, [pc, #240]	; (80068cc <UART_SetConfig+0x2fc>)
 80067dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2200      	movs	r2, #0
 80067e4:	603b      	str	r3, [r7, #0]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067f0:	f7f9 fd2e 	bl	8000250 <__aeabi_uldivmod>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4610      	mov	r0, r2
 80067fa:	4619      	mov	r1, r3
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	f04f 0300 	mov.w	r3, #0
 8006804:	020b      	lsls	r3, r1, #8
 8006806:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800680a:	0202      	lsls	r2, r0, #8
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	6849      	ldr	r1, [r1, #4]
 8006810:	0849      	lsrs	r1, r1, #1
 8006812:	2000      	movs	r0, #0
 8006814:	460c      	mov	r4, r1
 8006816:	4605      	mov	r5, r0
 8006818:	eb12 0804 	adds.w	r8, r2, r4
 800681c:	eb43 0905 	adc.w	r9, r3, r5
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	469a      	mov	sl, r3
 8006828:	4693      	mov	fp, r2
 800682a:	4652      	mov	r2, sl
 800682c:	465b      	mov	r3, fp
 800682e:	4640      	mov	r0, r8
 8006830:	4649      	mov	r1, r9
 8006832:	f7f9 fd0d 	bl	8000250 <__aeabi_uldivmod>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	4613      	mov	r3, r2
 800683c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006844:	d308      	bcc.n	8006858 <UART_SetConfig+0x288>
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800684c:	d204      	bcs.n	8006858 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6a3a      	ldr	r2, [r7, #32]
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	e0c9      	b.n	80069ec <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800685e:	e0c5      	b.n	80069ec <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006868:	d16d      	bne.n	8006946 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800686a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800686e:	3b01      	subs	r3, #1
 8006870:	2b07      	cmp	r3, #7
 8006872:	d82d      	bhi.n	80068d0 <UART_SetConfig+0x300>
 8006874:	a201      	add	r2, pc, #4	; (adr r2, 800687c <UART_SetConfig+0x2ac>)
 8006876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687a:	bf00      	nop
 800687c:	0800689d 	.word	0x0800689d
 8006880:	080068a5 	.word	0x080068a5
 8006884:	080068d1 	.word	0x080068d1
 8006888:	080068ab 	.word	0x080068ab
 800688c:	080068d1 	.word	0x080068d1
 8006890:	080068d1 	.word	0x080068d1
 8006894:	080068d1 	.word	0x080068d1
 8006898:	080068b3 	.word	0x080068b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800689c:	f7fe fb38 	bl	8004f10 <HAL_RCC_GetPCLK2Freq>
 80068a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068a2:	e01b      	b.n	80068dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a4:	4b08      	ldr	r3, [pc, #32]	; (80068c8 <UART_SetConfig+0x2f8>)
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068a8:	e018      	b.n	80068dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068aa:	f7fe fa9b 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 80068ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80068b0:	e014      	b.n	80068dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068b8:	e010      	b.n	80068dc <UART_SetConfig+0x30c>
 80068ba:	bf00      	nop
 80068bc:	cfff69f3 	.word	0xcfff69f3
 80068c0:	40008000 	.word	0x40008000
 80068c4:	40013800 	.word	0x40013800
 80068c8:	00f42400 	.word	0x00f42400
 80068cc:	0800ecdc 	.word	0x0800ecdc
      default:
        pclk = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 8084 	beq.w	80069ec <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	4a4b      	ldr	r2, [pc, #300]	; (8006a18 <UART_SetConfig+0x448>)
 80068ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068ee:	461a      	mov	r2, r3
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80068f6:	005a      	lsls	r2, r3, #1
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	085b      	lsrs	r3, r3, #1
 80068fe:	441a      	add	r2, r3
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	fbb2 f3f3 	udiv	r3, r2, r3
 8006908:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	2b0f      	cmp	r3, #15
 800690e:	d916      	bls.n	800693e <UART_SetConfig+0x36e>
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006916:	d212      	bcs.n	800693e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	b29b      	uxth	r3, r3
 800691c:	f023 030f 	bic.w	r3, r3, #15
 8006920:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	085b      	lsrs	r3, r3, #1
 8006926:	b29b      	uxth	r3, r3
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	b29a      	uxth	r2, r3
 800692e:	8bfb      	ldrh	r3, [r7, #30]
 8006930:	4313      	orrs	r3, r2
 8006932:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	8bfa      	ldrh	r2, [r7, #30]
 800693a:	60da      	str	r2, [r3, #12]
 800693c:	e056      	b.n	80069ec <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006944:	e052      	b.n	80069ec <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800694a:	3b01      	subs	r3, #1
 800694c:	2b07      	cmp	r3, #7
 800694e:	d822      	bhi.n	8006996 <UART_SetConfig+0x3c6>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <UART_SetConfig+0x388>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	08006979 	.word	0x08006979
 800695c:	08006981 	.word	0x08006981
 8006960:	08006997 	.word	0x08006997
 8006964:	08006987 	.word	0x08006987
 8006968:	08006997 	.word	0x08006997
 800696c:	08006997 	.word	0x08006997
 8006970:	08006997 	.word	0x08006997
 8006974:	0800698f 	.word	0x0800698f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006978:	f7fe faca 	bl	8004f10 <HAL_RCC_GetPCLK2Freq>
 800697c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800697e:	e010      	b.n	80069a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006980:	4b26      	ldr	r3, [pc, #152]	; (8006a1c <UART_SetConfig+0x44c>)
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006984:	e00d      	b.n	80069a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006986:	f7fe fa2d 	bl	8004de4 <HAL_RCC_GetSysClockFreq>
 800698a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800698c:	e009      	b.n	80069a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006994:	e005      	b.n	80069a2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069a0:	bf00      	nop
    }

    if (pclk != 0U)
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d021      	beq.n	80069ec <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	4a1a      	ldr	r2, [pc, #104]	; (8006a18 <UART_SetConfig+0x448>)
 80069ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b2:	461a      	mov	r2, r3
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	441a      	add	r2, r3
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	2b0f      	cmp	r3, #15
 80069d0:	d909      	bls.n	80069e6 <UART_SetConfig+0x416>
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d8:	d205      	bcs.n	80069e6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	b29a      	uxth	r2, r3
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60da      	str	r2, [r3, #12]
 80069e4:	e002      	b.n	80069ec <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	2200      	movs	r2, #0
 8006a00:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2200      	movs	r2, #0
 8006a06:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006a08:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3730      	adds	r7, #48	; 0x30
 8006a10:	46bd      	mov	sp, r7
 8006a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a16:	bf00      	nop
 8006a18:	0800ecdc 	.word	0x0800ecdc
 8006a1c:	00f42400 	.word	0x00f42400

08006a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00a      	beq.n	8006a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01a      	beq.n	8006b36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b1e:	d10a      	bne.n	8006b36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	605a      	str	r2, [r3, #4]
  }
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b098      	sub	sp, #96	; 0x60
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b74:	f7fc f946 	bl	8002e04 <HAL_GetTick>
 8006b78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d12f      	bne.n	8006be8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b90:	2200      	movs	r2, #0
 8006b92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f88e 	bl	8006cb8 <UART_WaitOnFlagUntilTimeout>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d022      	beq.n	8006be8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e6      	bne.n	8006ba2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e063      	b.n	8006cb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d149      	bne.n	8006c8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bf6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f857 	bl	8006cb8 <UART_WaitOnFlagUntilTimeout>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d03c      	beq.n	8006c8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c30:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e6      	bne.n	8006c10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f023 0301 	bic.w	r3, r3, #1
 8006c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c62:	61fa      	str	r2, [r7, #28]
 8006c64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	69b9      	ldr	r1, [r7, #24]
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	617b      	str	r3, [r7, #20]
   return(result);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e5      	bne.n	8006c42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e012      	b.n	8006cb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3758      	adds	r7, #88	; 0x58
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc8:	e04f      	b.n	8006d6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd0:	d04b      	beq.n	8006d6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cd2:	f7fc f897 	bl	8002e04 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d302      	bcc.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e04e      	b.n	8006d8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d037      	beq.n	8006d6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b80      	cmp	r3, #128	; 0x80
 8006cfe:	d034      	beq.n	8006d6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b40      	cmp	r3, #64	; 0x40
 8006d04:	d031      	beq.n	8006d6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d110      	bne.n	8006d36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2208      	movs	r2, #8
 8006d1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f99c 	bl	800705a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2208      	movs	r2, #8
 8006d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e029      	b.n	8006d8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d44:	d111      	bne.n	8006d6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 f982 	bl	800705a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e00f      	b.n	8006d8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	69da      	ldr	r2, [r3, #28]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4013      	ands	r3, r2
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	bf0c      	ite	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	2300      	movne	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	461a      	mov	r2, r3
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d0a0      	beq.n	8006cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b0a3      	sub	sp, #140	; 0x8c
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	88fa      	ldrh	r2, [r7, #6]
 8006dac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	88fa      	ldrh	r2, [r7, #6]
 8006db4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc6:	d10e      	bne.n	8006de6 <UART_Start_Receive_IT+0x52>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d105      	bne.n	8006ddc <UART_Start_Receive_IT+0x48>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006dd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dda:	e02d      	b.n	8006e38 <UART_Start_Receive_IT+0xa4>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	22ff      	movs	r2, #255	; 0xff
 8006de0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006de4:	e028      	b.n	8006e38 <UART_Start_Receive_IT+0xa4>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10d      	bne.n	8006e0a <UART_Start_Receive_IT+0x76>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <UART_Start_Receive_IT+0x6c>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	22ff      	movs	r2, #255	; 0xff
 8006dfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006dfe:	e01b      	b.n	8006e38 <UART_Start_Receive_IT+0xa4>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	227f      	movs	r2, #127	; 0x7f
 8006e04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e08:	e016      	b.n	8006e38 <UART_Start_Receive_IT+0xa4>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e12:	d10d      	bne.n	8006e30 <UART_Start_Receive_IT+0x9c>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d104      	bne.n	8006e26 <UART_Start_Receive_IT+0x92>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	227f      	movs	r2, #127	; 0x7f
 8006e20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e24:	e008      	b.n	8006e38 <UART_Start_Receive_IT+0xa4>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	223f      	movs	r2, #63	; 0x3f
 8006e2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e2e:	e003      	b.n	8006e38 <UART_Start_Receive_IT+0xa4>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2222      	movs	r2, #34	; 0x22
 8006e44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006e58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e5a:	f043 0301 	orr.w	r3, r3, #1
 8006e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006e6c:	673a      	str	r2, [r7, #112]	; 0x70
 8006e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006e72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e3      	bne.n	8006e48 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e88:	d14f      	bne.n	8006f2a <UART_Start_Receive_IT+0x196>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e90:	88fa      	ldrh	r2, [r7, #6]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d349      	bcc.n	8006f2a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e9e:	d107      	bne.n	8006eb0 <UART_Start_Receive_IT+0x11c>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d103      	bne.n	8006eb0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4a47      	ldr	r2, [pc, #284]	; (8006fc8 <UART_Start_Receive_IT+0x234>)
 8006eac:	675a      	str	r2, [r3, #116]	; 0x74
 8006eae:	e002      	b.n	8006eb6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a46      	ldr	r2, [pc, #280]	; (8006fcc <UART_Start_Receive_IT+0x238>)
 8006eb4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01a      	beq.n	8006ef4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ed2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ee2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ee6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e4      	bne.n	8006ebe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3308      	adds	r3, #8
 8006efa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3308      	adds	r3, #8
 8006f12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006f14:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f16:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f1c:	e841 2300 	strex	r3, r2, [r1]
 8006f20:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e5      	bne.n	8006ef4 <UART_Start_Receive_IT+0x160>
 8006f28:	e046      	b.n	8006fb8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f32:	d107      	bne.n	8006f44 <UART_Start_Receive_IT+0x1b0>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d103      	bne.n	8006f44 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4a24      	ldr	r2, [pc, #144]	; (8006fd0 <UART_Start_Receive_IT+0x23c>)
 8006f40:	675a      	str	r2, [r3, #116]	; 0x74
 8006f42:	e002      	b.n	8006f4a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4a23      	ldr	r2, [pc, #140]	; (8006fd4 <UART_Start_Receive_IT+0x240>)
 8006f48:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d019      	beq.n	8006f86 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006f66:	677b      	str	r3, [r7, #116]	; 0x74
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f70:	637b      	str	r3, [r7, #52]	; 0x34
 8006f72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e6      	bne.n	8006f52 <UART_Start_Receive_IT+0x1be>
 8006f84:	e018      	b.n	8006fb8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	613b      	str	r3, [r7, #16]
   return(result);
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f043 0320 	orr.w	r3, r3, #32
 8006f9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fa4:	623b      	str	r3, [r7, #32]
 8006fa6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	69f9      	ldr	r1, [r7, #28]
 8006faa:	6a3a      	ldr	r2, [r7, #32]
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e6      	bne.n	8006f86 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	378c      	adds	r7, #140	; 0x8c
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	080079b1 	.word	0x080079b1
 8006fcc:	08007651 	.word	0x08007651
 8006fd0:	08007499 	.word	0x08007499
 8006fd4:	080072e1 	.word	0x080072e1

08006fd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b08f      	sub	sp, #60	; 0x3c
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007000:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e6      	bne.n	8006fe0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3308      	adds	r3, #8
 8007018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	60bb      	str	r3, [r7, #8]
   return(result);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007028:	633b      	str	r3, [r7, #48]	; 0x30
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007032:	61ba      	str	r2, [r7, #24]
 8007034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6979      	ldr	r1, [r7, #20]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	613b      	str	r3, [r7, #16]
   return(result);
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e5      	bne.n	8007012 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800704e:	bf00      	nop
 8007050:	373c      	adds	r7, #60	; 0x3c
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800705a:	b480      	push	{r7}
 800705c:	b095      	sub	sp, #84	; 0x54
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007080:	643b      	str	r3, [r7, #64]	; 0x40
 8007082:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007086:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e6      	bne.n	8007062 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3308      	adds	r3, #8
 800709a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070aa:	f023 0301 	bic.w	r3, r3, #1
 80070ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3308      	adds	r3, #8
 80070b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e3      	bne.n	8007094 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d118      	bne.n	8007106 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f023 0310 	bic.w	r3, r3, #16
 80070e8:	647b      	str	r3, [r7, #68]	; 0x44
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f2:	61bb      	str	r3, [r7, #24]
 80070f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	6979      	ldr	r1, [r7, #20]
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e6      	bne.n	80070d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	675a      	str	r2, [r3, #116]	; 0x74
}
 800711a:	bf00      	nop
 800711c:	3754      	adds	r7, #84	; 0x54
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b090      	sub	sp, #64	; 0x40
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	d137      	bne.n	80071b2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007144:	2200      	movs	r2, #0
 8007146:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3308      	adds	r3, #8
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	623b      	str	r3, [r7, #32]
   return(result);
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007160:	63bb      	str	r3, [r7, #56]	; 0x38
 8007162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3308      	adds	r3, #8
 8007168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716a:	633a      	str	r2, [r7, #48]	; 0x30
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e5      	bne.n	800714a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800717e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	60fb      	str	r3, [r7, #12]
   return(result);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
 8007194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	69b9      	ldr	r1, [r7, #24]
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	617b      	str	r3, [r7, #20]
   return(result);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e6      	bne.n	800717e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071b0:	e002      	b.n	80071b8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80071b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80071b4:	f7fa ff12 	bl	8001fdc <HAL_UART_TxCpltCallback>
}
 80071b8:	bf00      	nop
 80071ba:	3740      	adds	r7, #64	; 0x40
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff f9de 	bl	8006590 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007204:	2b80      	cmp	r3, #128	; 0x80
 8007206:	d109      	bne.n	800721c <UART_DMAError+0x40>
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b21      	cmp	r3, #33	; 0x21
 800720c:	d106      	bne.n	800721c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2200      	movs	r2, #0
 8007212:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007216:	6978      	ldr	r0, [r7, #20]
 8007218:	f7ff fede 	bl	8006fd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d109      	bne.n	800723e <UART_DMAError+0x62>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b22      	cmp	r3, #34	; 0x22
 800722e:	d106      	bne.n	800723e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2200      	movs	r2, #0
 8007234:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007238:	6978      	ldr	r0, [r7, #20]
 800723a:	f7ff ff0e 	bl	800705a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007244:	f043 0210 	orr.w	r2, r3, #16
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800724e:	6978      	ldr	r0, [r7, #20]
 8007250:	f7ff f9a8 	bl	80065a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007254:	bf00      	nop
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f7ff f992 	bl	80065a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	60bb      	str	r3, [r7, #8]
   return(result);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072a4:	61fb      	str	r3, [r7, #28]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6979      	ldr	r1, [r7, #20]
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	613b      	str	r3, [r7, #16]
   return(result);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e6      	bne.n	8007290 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7fa fe83 	bl	8001fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072d6:	bf00      	nop
 80072d8:	3720      	adds	r7, #32
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b09c      	sub	sp, #112	; 0x70
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80072ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072f8:	2b22      	cmp	r3, #34	; 0x22
 80072fa:	f040 80be 	bne.w	800747a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007308:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800730c:	b2d9      	uxtb	r1, r3
 800730e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007312:	b2da      	uxtb	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007318:	400a      	ands	r2, r1
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b29a      	uxth	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007340:	b29b      	uxth	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	f040 80a1 	bne.w	800748a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800735c:	66bb      	str	r3, [r7, #104]	; 0x68
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007366:	65bb      	str	r3, [r7, #88]	; 0x58
 8007368:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800736c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800736e:	e841 2300 	strex	r3, r2, [r1]
 8007372:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1e6      	bne.n	8007348 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3308      	adds	r3, #8
 8007380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	e853 3f00 	ldrex	r3, [r3]
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738c:	f023 0301 	bic.w	r3, r3, #1
 8007390:	667b      	str	r3, [r7, #100]	; 0x64
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3308      	adds	r3, #8
 8007398:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800739a:	647a      	str	r2, [r7, #68]	; 0x44
 800739c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1e5      	bne.n	800737a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a33      	ldr	r2, [pc, #204]	; (8007494 <UART_RxISR_8BIT+0x1b4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d01f      	beq.n	800740c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d018      	beq.n	800740c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	623b      	str	r3, [r7, #32]
   return(result);
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073ee:	663b      	str	r3, [r7, #96]	; 0x60
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073f8:	633b      	str	r3, [r7, #48]	; 0x30
 80073fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e6      	bne.n	80073da <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d12e      	bne.n	8007472 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	60fb      	str	r3, [r7, #12]
   return(result);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f023 0310 	bic.w	r3, r3, #16
 800742e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007438:	61fb      	str	r3, [r7, #28]
 800743a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	69b9      	ldr	r1, [r7, #24]
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	617b      	str	r3, [r7, #20]
   return(result);
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e6      	bne.n	800741a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f003 0310 	and.w	r3, r3, #16
 8007456:	2b10      	cmp	r3, #16
 8007458:	d103      	bne.n	8007462 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2210      	movs	r2, #16
 8007460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff f8a4 	bl	80065b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007470:	e00b      	b.n	800748a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fa fd94 	bl	8001fa0 <HAL_UART_RxCpltCallback>
}
 8007478:	e007      	b.n	800748a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	699a      	ldr	r2, [r3, #24]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f042 0208 	orr.w	r2, r2, #8
 8007488:	619a      	str	r2, [r3, #24]
}
 800748a:	bf00      	nop
 800748c:	3770      	adds	r7, #112	; 0x70
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	40008000 	.word	0x40008000

08007498 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b09c      	sub	sp, #112	; 0x70
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074b0:	2b22      	cmp	r3, #34	; 0x22
 80074b2:	f040 80be 	bne.w	8007632 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80074c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80074ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80074ce:	4013      	ands	r3, r2
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074da:	1c9a      	adds	r2, r3, #2
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	3b01      	subs	r3, #1
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 80a1 	bne.w	8007642 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800750e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007514:	667b      	str	r3, [r7, #100]	; 0x64
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800751e:	657b      	str	r3, [r7, #84]	; 0x54
 8007520:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007524:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800752c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e6      	bne.n	8007500 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3308      	adds	r3, #8
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	663b      	str	r3, [r7, #96]	; 0x60
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007552:	643a      	str	r2, [r7, #64]	; 0x40
 8007554:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007558:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e5      	bne.n	8007532 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a33      	ldr	r2, [pc, #204]	; (800764c <UART_RxISR_16BIT+0x1b4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d01f      	beq.n	80075c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d018      	beq.n	80075c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	61fb      	str	r3, [r7, #28]
   return(result);
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075b2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e6      	bne.n	8007592 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d12e      	bne.n	800762a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	60bb      	str	r3, [r7, #8]
   return(result);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f023 0310 	bic.w	r3, r3, #16
 80075e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075f0:	61bb      	str	r3, [r7, #24]
 80075f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f4:	6979      	ldr	r1, [r7, #20]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	e841 2300 	strex	r3, r2, [r1]
 80075fc:	613b      	str	r3, [r7, #16]
   return(result);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e6      	bne.n	80075d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f003 0310 	and.w	r3, r3, #16
 800760e:	2b10      	cmp	r3, #16
 8007610:	d103      	bne.n	800761a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2210      	movs	r2, #16
 8007618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fe ffc8 	bl	80065b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007628:	e00b      	b.n	8007642 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fa fcb8 	bl	8001fa0 <HAL_UART_RxCpltCallback>
}
 8007630:	e007      	b.n	8007642 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699a      	ldr	r2, [r3, #24]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0208 	orr.w	r2, r2, #8
 8007640:	619a      	str	r2, [r3, #24]
}
 8007642:	bf00      	nop
 8007644:	3770      	adds	r7, #112	; 0x70
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	40008000 	.word	0x40008000

08007650 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b0ac      	sub	sp, #176	; 0xb0
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800765e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007686:	2b22      	cmp	r3, #34	; 0x22
 8007688:	f040 8182 	bne.w	8007990 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007692:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007696:	e125      	b.n	80078e4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80076a6:	b2d9      	uxtb	r1, r3
 80076a8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b2:	400a      	ands	r2, r1
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80076de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d053      	beq.n	8007792 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d011      	beq.n	800771a <UART_RxISR_8BIT_FIFOEN+0xca>
 80076f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80076fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00b      	beq.n	800771a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2201      	movs	r2, #1
 8007708:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007710:	f043 0201 	orr.w	r2, r3, #1
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800771a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d011      	beq.n	800774a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00b      	beq.n	800774a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2202      	movs	r2, #2
 8007738:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007740:	f043 0204 	orr.w	r2, r3, #4
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800774a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800774e:	f003 0304 	and.w	r3, r3, #4
 8007752:	2b00      	cmp	r3, #0
 8007754:	d011      	beq.n	800777a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00b      	beq.n	800777a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2204      	movs	r2, #4
 8007768:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007770:	f043 0202 	orr.w	r2, r3, #2
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007780:	2b00      	cmp	r3, #0
 8007782:	d006      	beq.n	8007792 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7fe ff0d 	bl	80065a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	f040 80a2 	bne.w	80078e4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80077ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	461a      	mov	r2, r3
 80077be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80077c4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80077c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80077d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e4      	bne.n	80077a0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	3308      	adds	r3, #8
 80077dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80077e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077ec:	f023 0301 	bic.w	r3, r3, #1
 80077f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3308      	adds	r3, #8
 80077fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077fe:	66ba      	str	r2, [r7, #104]	; 0x68
 8007800:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007804:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800780c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e1      	bne.n	80077d6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a5f      	ldr	r2, [pc, #380]	; (80079a8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d021      	beq.n	8007874 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d01a      	beq.n	8007874 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800784c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800784e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	461a      	mov	r2, r3
 800785c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007860:	657b      	str	r3, [r7, #84]	; 0x54
 8007862:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007866:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800786e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e4      	bne.n	800783e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007878:	2b01      	cmp	r3, #1
 800787a:	d130      	bne.n	80078de <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	f023 0310 	bic.w	r3, r3, #16
 8007896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078a4:	643b      	str	r3, [r7, #64]	; 0x40
 80078a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e4      	bne.n	8007882 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f003 0310 	and.w	r3, r3, #16
 80078c2:	2b10      	cmp	r3, #16
 80078c4:	d103      	bne.n	80078ce <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2210      	movs	r2, #16
 80078cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7fe fe6e 	bl	80065b8 <HAL_UARTEx_RxEventCallback>
 80078dc:	e002      	b.n	80078e4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fa fb5e 	bl	8001fa0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d006      	beq.n	80078fa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80078ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078f0:	f003 0320 	and.w	r3, r3, #32
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f47f aecf 	bne.w	8007698 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007900:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007904:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007908:	2b00      	cmp	r3, #0
 800790a:	d049      	beq.n	80079a0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007912:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007916:	429a      	cmp	r2, r3
 8007918:	d242      	bcs.n	80079a0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3308      	adds	r3, #8
 8007920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	61fb      	str	r3, [r7, #28]
   return(result);
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3308      	adds	r3, #8
 800793a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800793e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007940:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e3      	bne.n	800791a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a15      	ldr	r2, [pc, #84]	; (80079ac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007956:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	60bb      	str	r3, [r7, #8]
   return(result);
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f043 0320 	orr.w	r3, r3, #32
 800796c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800797a:	61bb      	str	r3, [r7, #24]
 800797c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6979      	ldr	r1, [r7, #20]
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	613b      	str	r3, [r7, #16]
   return(result);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e4      	bne.n	8007958 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800798e:	e007      	b.n	80079a0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699a      	ldr	r2, [r3, #24]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0208 	orr.w	r2, r2, #8
 800799e:	619a      	str	r2, [r3, #24]
}
 80079a0:	bf00      	nop
 80079a2:	37b0      	adds	r7, #176	; 0xb0
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	40008000 	.word	0x40008000
 80079ac:	080072e1 	.word	0x080072e1

080079b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b0ae      	sub	sp, #184	; 0xb8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079be:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079e6:	2b22      	cmp	r3, #34	; 0x22
 80079e8:	f040 8186 	bne.w	8007cf8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079f6:	e129      	b.n	8007c4c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007a0a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007a0e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007a12:	4013      	ands	r3, r2
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	1c9a      	adds	r2, r3, #2
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007a42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d053      	beq.n	8007af6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d011      	beq.n	8007a7e <UART_RxISR_16BIT_FIFOEN+0xce>
 8007a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a74:	f043 0201 	orr.w	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d011      	beq.n	8007aae <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa4:	f043 0204 	orr.w	r2, r3, #4
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ab2:	f003 0304 	and.w	r3, r3, #4
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d011      	beq.n	8007ade <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007aba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2204      	movs	r2, #4
 8007acc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad4:	f043 0202 	orr.w	r2, r3, #2
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d006      	beq.n	8007af6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7fe fd5b 	bl	80065a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f040 80a4 	bne.w	8007c4c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b2a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e2      	bne.n	8007b04 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b54:	f023 0301 	bic.w	r3, r3, #1
 8007b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3308      	adds	r3, #8
 8007b62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e1      	bne.n	8007b3e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a5f      	ldr	r2, [pc, #380]	; (8007d10 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d021      	beq.n	8007bdc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d01a      	beq.n	8007bdc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e4      	bne.n	8007ba6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d130      	bne.n	8007c46 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfa:	f023 0310 	bic.w	r3, r3, #16
 8007bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e4      	bne.n	8007bea <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	f003 0310 	and.w	r3, r3, #16
 8007c2a:	2b10      	cmp	r3, #16
 8007c2c:	d103      	bne.n	8007c36 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2210      	movs	r2, #16
 8007c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fe fcba 	bl	80065b8 <HAL_UARTEx_RxEventCallback>
 8007c44:	e002      	b.n	8007c4c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fa f9aa 	bl	8001fa0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d006      	beq.n	8007c62 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007c54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c58:	f003 0320 	and.w	r3, r3, #32
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f47f aecb 	bne.w	80079f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c68:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007c6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d049      	beq.n	8007d08 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c7a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d242      	bcs.n	8007d08 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3308      	adds	r3, #8
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	623b      	str	r3, [r7, #32]
   return(result);
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007ca6:	633a      	str	r2, [r7, #48]	; 0x30
 8007ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e3      	bne.n	8007c82 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a15      	ldr	r2, [pc, #84]	; (8007d14 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007cbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f043 0320 	orr.w	r3, r3, #32
 8007cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	69b9      	ldr	r1, [r7, #24]
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	617b      	str	r3, [r7, #20]
   return(result);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e4      	bne.n	8007cc0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cf6:	e007      	b.n	8007d08 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0208 	orr.w	r2, r2, #8
 8007d06:	619a      	str	r2, [r3, #24]
}
 8007d08:	bf00      	nop
 8007d0a:	37b8      	adds	r7, #184	; 0xb8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	40008000 	.word	0x40008000
 8007d14:	08007499 	.word	0x08007499

08007d18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d101      	bne.n	8007d6a <HAL_UARTEx_DisableFifoMode+0x16>
 8007d66:	2302      	movs	r3, #2
 8007d68:	e027      	b.n	8007dba <HAL_UARTEx_DisableFifoMode+0x66>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2224      	movs	r2, #36	; 0x24
 8007d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 0201 	bic.w	r2, r2, #1
 8007d90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e02d      	b.n	8007e3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2224      	movs	r2, #36	; 0x24
 8007dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0201 	bic.w	r2, r2, #1
 8007e04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f850 	bl	8007ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e56:	2302      	movs	r3, #2
 8007e58:	e02d      	b.n	8007eb6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2224      	movs	r2, #36	; 0x24
 8007e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 0201 	bic.w	r2, r2, #1
 8007e80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f812 	bl	8007ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d108      	bne.n	8007ee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ee0:	e031      	b.n	8007f46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ee2:	2308      	movs	r3, #8
 8007ee4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	0e5b      	lsrs	r3, r3, #25
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	0f5b      	lsrs	r3, r3, #29
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	7b3a      	ldrb	r2, [r7, #12]
 8007f0e:	4911      	ldr	r1, [pc, #68]	; (8007f54 <UARTEx_SetNbDataToProcess+0x94>)
 8007f10:	5c8a      	ldrb	r2, [r1, r2]
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f16:	7b3a      	ldrb	r2, [r7, #12]
 8007f18:	490f      	ldr	r1, [pc, #60]	; (8007f58 <UARTEx_SetNbDataToProcess+0x98>)
 8007f1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	7b7a      	ldrb	r2, [r7, #13]
 8007f2c:	4909      	ldr	r1, [pc, #36]	; (8007f54 <UARTEx_SetNbDataToProcess+0x94>)
 8007f2e:	5c8a      	ldrb	r2, [r1, r2]
 8007f30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f34:	7b7a      	ldrb	r2, [r7, #13]
 8007f36:	4908      	ldr	r1, [pc, #32]	; (8007f58 <UARTEx_SetNbDataToProcess+0x98>)
 8007f38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	0800ecf4 	.word	0x0800ecf4
 8007f58:	0800ecfc 	.word	0x0800ecfc

08007f5c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b0cc      	sub	sp, #304	; 0x130
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4602      	mov	r2, r0
 8007f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f68:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007f6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007f6e:	f107 0310 	add.w	r3, r7, #16
 8007f72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f7e:	2200      	movs	r2, #0
 8007f80:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f90:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007f94:	7812      	ldrb	r2, [r2, #0]
 8007f96:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fa2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fa6:	2218      	movs	r2, #24
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f001 f8c9 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007fb0:	233f      	movs	r3, #63	; 0x3f
 8007fb2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007fb6:	2385      	movs	r3, #133	; 0x85
 8007fb8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007fbc:	f107 0310 	add.w	r3, r7, #16
 8007fc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007fc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007fcc:	f107 030f 	add.w	r3, r7, #15
 8007fd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fde:	2100      	movs	r1, #0
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f001 fb5b 	bl	800969c <hci_send_req>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	da01      	bge.n	8007ff0 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007fec:	23ff      	movs	r3, #255	; 0xff
 8007fee:	e004      	b.n	8007ffa <aci_gap_set_io_capability+0x9e>
  return status;
 8007ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ff8:	781b      	ldrb	r3, [r3, #0]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008004:	b5b0      	push	{r4, r5, r7, lr}
 8008006:	b0cc      	sub	sp, #304	; 0x130
 8008008:	af00      	add	r7, sp, #0
 800800a:	4605      	mov	r5, r0
 800800c:	460c      	mov	r4, r1
 800800e:	4610      	mov	r0, r2
 8008010:	4619      	mov	r1, r3
 8008012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008016:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800801a:	462a      	mov	r2, r5
 800801c:	701a      	strb	r2, [r3, #0]
 800801e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008022:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008026:	4622      	mov	r2, r4
 8008028:	701a      	strb	r2, [r3, #0]
 800802a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008032:	4602      	mov	r2, r0
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800803e:	460a      	mov	r2, r1
 8008040:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008042:	f107 0310 	add.w	r3, r7, #16
 8008046:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800804a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008052:	2200      	movs	r2, #0
 8008054:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800805c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008060:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008064:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008068:	7812      	ldrb	r2, [r2, #0]
 800806a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800806c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008070:	3301      	adds	r3, #1
 8008072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800807a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800807e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008082:	7812      	ldrb	r2, [r2, #0]
 8008084:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008086:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800808a:	3301      	adds	r3, #1
 800808c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008094:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008098:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800809c:	7812      	ldrb	r2, [r2, #0]
 800809e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80080a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080a4:	3301      	adds	r3, #1
 80080a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80080aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080b2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80080b6:	7812      	ldrb	r2, [r2, #0]
 80080b8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80080ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080be:	3301      	adds	r3, #1
 80080c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80080c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80080cc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80080ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080d2:	3301      	adds	r3, #1
 80080d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80080d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080dc:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80080e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80080e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080e6:	3301      	adds	r3, #1
 80080e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80080ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80080f4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80080f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080fa:	3301      	adds	r3, #1
 80080fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008104:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008108:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800810c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008110:	3304      	adds	r3, #4
 8008112:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800811a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800811e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008120:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008124:	3301      	adds	r3, #1
 8008126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800812a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800812e:	2218      	movs	r2, #24
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f001 f805 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008138:	233f      	movs	r3, #63	; 0x3f
 800813a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800813e:	2386      	movs	r3, #134	; 0x86
 8008140:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008144:	f107 0310 	add.w	r3, r7, #16
 8008148:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800814c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008150:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008154:	f107 030f 	add.w	r3, r7, #15
 8008158:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800815c:	2301      	movs	r3, #1
 800815e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008162:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008166:	2100      	movs	r1, #0
 8008168:	4618      	mov	r0, r3
 800816a:	f001 fa97 	bl	800969c <hci_send_req>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	da01      	bge.n	8008178 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008174:	23ff      	movs	r3, #255	; 0xff
 8008176:	e004      	b.n	8008182 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008180:	781b      	ldrb	r3, [r3, #0]
}
 8008182:	4618      	mov	r0, r3
 8008184:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008188:	46bd      	mov	sp, r7
 800818a:	bdb0      	pop	{r4, r5, r7, pc}

0800818c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800818c:	b590      	push	{r4, r7, lr}
 800818e:	b0cd      	sub	sp, #308	; 0x134
 8008190:	af00      	add	r7, sp, #0
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	4611      	mov	r1, r2
 8008198:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800819c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80081aa:	4622      	mov	r2, r4
 80081ac:	701a      	strb	r2, [r3, #0]
 80081ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80081b6:	4602      	mov	r2, r0
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081be:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80081c2:	460a      	mov	r2, r1
 80081c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80081c6:	f107 0310 	add.w	r3, r7, #16
 80081ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	2207      	movs	r2, #7
 80081d4:	2100      	movs	r1, #0
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 ffb3 	bl	8009142 <Osal_MemSet>
  int index_input = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80081e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081ea:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80081f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081f6:	3301      	adds	r3, #1
 80081f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80081fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008200:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008204:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008208:	7812      	ldrb	r2, [r2, #0]
 800820a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800820c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008210:	3301      	adds	r3, #1
 8008212:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800821a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800821e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008222:	7812      	ldrb	r2, [r2, #0]
 8008224:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008226:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800822a:	3301      	adds	r3, #1
 800822c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008230:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008234:	2218      	movs	r2, #24
 8008236:	2100      	movs	r1, #0
 8008238:	4618      	mov	r0, r3
 800823a:	f000 ff82 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 800823e:	233f      	movs	r3, #63	; 0x3f
 8008240:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008244:	238a      	movs	r3, #138	; 0x8a
 8008246:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800824a:	f107 0310 	add.w	r3, r7, #16
 800824e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008252:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008256:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800825a:	f107 0308 	add.w	r3, r7, #8
 800825e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008262:	2307      	movs	r3, #7
 8008264:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008268:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800826c:	2100      	movs	r1, #0
 800826e:	4618      	mov	r0, r3
 8008270:	f001 fa14 	bl	800969c <hci_send_req>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	da01      	bge.n	800827e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800827a:	23ff      	movs	r3, #255	; 0xff
 800827c:	e02e      	b.n	80082dc <aci_gap_init+0x150>
  if ( resp.Status )
 800827e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008282:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <aci_gap_init+0x10c>
    return resp.Status;
 800828c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008290:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	e021      	b.n	80082dc <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80082a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80082b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80082ba:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80082c4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80082c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80082ce:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80082d8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd90      	pop	{r4, r7, pc}

080082e6 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b088      	sub	sp, #32
 80082ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082f0:	f107 0308 	add.w	r3, r7, #8
 80082f4:	2218      	movs	r2, #24
 80082f6:	2100      	movs	r1, #0
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 ff22 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 80082fe:	233f      	movs	r3, #63	; 0x3f
 8008300:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008302:	2392      	movs	r3, #146	; 0x92
 8008304:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008306:	1dfb      	adds	r3, r7, #7
 8008308:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800830a:	2301      	movs	r3, #1
 800830c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800830e:	f107 0308 	add.w	r3, r7, #8
 8008312:	2100      	movs	r1, #0
 8008314:	4618      	mov	r0, r3
 8008316:	f001 f9c1 	bl	800969c <hci_send_req>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	da01      	bge.n	8008324 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008320:	23ff      	movs	r3, #255	; 0xff
 8008322:	e000      	b.n	8008326 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8008324:	79fb      	ldrb	r3, [r7, #7]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3720      	adds	r7, #32
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 800832e:	b5b0      	push	{r4, r5, r7, lr}
 8008330:	b0cc      	sub	sp, #304	; 0x130
 8008332:	af00      	add	r7, sp, #0
 8008334:	4605      	mov	r5, r0
 8008336:	460c      	mov	r4, r1
 8008338:	4610      	mov	r0, r2
 800833a:	4619      	mov	r1, r3
 800833c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008340:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008344:	462a      	mov	r2, r5
 8008346:	801a      	strh	r2, [r3, #0]
 8008348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008350:	4622      	mov	r2, r4
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008358:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800835c:	4602      	mov	r2, r0
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008364:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008368:	460a      	mov	r2, r1
 800836a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800836c:	f107 0310 	add.w	r3, r7, #16
 8008370:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008378:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800837c:	2200      	movs	r2, #0
 800837e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8008386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800838e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008392:	8812      	ldrh	r2, [r2, #0]
 8008394:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008396:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800839a:	3302      	adds	r3, #2
 800839c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 80083a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083a8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80083ac:	8812      	ldrh	r2, [r2, #0]
 80083ae:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80083b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083b4:	3302      	adds	r3, #2
 80083b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80083ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083c2:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80083c6:	7812      	ldrb	r2, [r2, #0]
 80083c8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80083ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083ce:	3301      	adds	r3, #1
 80083d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 80083d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083dc:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80083e0:	7812      	ldrb	r2, [r2, #0]
 80083e2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80083e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083e8:	3301      	adds	r3, #1
 80083ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80083f2:	2218      	movs	r2, #24
 80083f4:	2100      	movs	r1, #0
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fea3 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 80083fc:	233f      	movs	r3, #63	; 0x3f
 80083fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8008402:	2397      	movs	r3, #151	; 0x97
 8008404:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008408:	230f      	movs	r3, #15
 800840a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800840e:	f107 0310 	add.w	r3, r7, #16
 8008412:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800841a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800841e:	f107 030f 	add.w	r3, r7, #15
 8008422:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008426:	2301      	movs	r3, #1
 8008428:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800842c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f001 f932 	bl	800969c <hci_send_req>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	da01      	bge.n	8008442 <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 800843e:	23ff      	movs	r3, #255	; 0xff
 8008440:	e004      	b.n	800844c <aci_gap_start_general_discovery_proc+0x11e>
  return status;
 8008442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008446:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800844a:	781b      	ldrb	r3, [r3, #0]
}
 800844c:	4618      	mov	r0, r3
 800844e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008452:	46bd      	mov	sp, r7
 8008454:	bdb0      	pop	{r4, r5, r7, pc}

08008456 <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 8008456:	b590      	push	{r4, r7, lr}
 8008458:	b0cf      	sub	sp, #316	; 0x13c
 800845a:	af00      	add	r7, sp, #0
 800845c:	4604      	mov	r4, r0
 800845e:	4608      	mov	r0, r1
 8008460:	4611      	mov	r1, r2
 8008462:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008466:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008470:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008474:	4622      	mov	r2, r4
 8008476:	801a      	strh	r2, [r3, #0]
 8008478:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800847c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008480:	4602      	mov	r2, r0
 8008482:	801a      	strh	r2, [r3, #0]
 8008484:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008488:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800848c:	460a      	mov	r2, r1
 800848e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8008490:	f107 0318 	add.w	r3, r7, #24
 8008494:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008498:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800849c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80084a0:	2200      	movs	r2, #0
 80084a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 80084aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80084ae:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80084b2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80084b6:	8812      	ldrh	r2, [r2, #0]
 80084b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80084ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80084be:	3302      	adds	r3, #2
 80084c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 80084c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80084c8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80084cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80084d0:	8812      	ldrh	r2, [r2, #0]
 80084d2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80084d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80084d8:	3302      	adds	r3, #2
 80084da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 80084de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80084e2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80084e6:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80084ea:	7812      	ldrb	r2, [r2, #0]
 80084ec:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80084ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80084f2:	3301      	adds	r3, #1
 80084f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 80084f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80084fc:	1d58      	adds	r0, r3, #5
 80084fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008502:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008506:	2206      	movs	r2, #6
 8008508:	6819      	ldr	r1, [r3, #0]
 800850a:	f000 fe0a 	bl	8009122 <Osal_MemCpy>
  index_input += 6;
 800850e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008512:	3306      	adds	r3, #6
 8008514:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 8008518:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800851c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008520:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008522:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008526:	3301      	adds	r3, #1
 8008528:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800852c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008530:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8008534:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8008536:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800853a:	3302      	adds	r3, #2
 800853c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8008540:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008544:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8008548:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 800854a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800854e:	3302      	adds	r3, #2
 8008550:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 8008554:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008558:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 800855c:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 800855e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008562:	3302      	adds	r3, #2
 8008564:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 8008568:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800856c:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8008570:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 8008572:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008576:	3302      	adds	r3, #2
 8008578:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 800857c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008580:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008584:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 8008586:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800858a:	3302      	adds	r3, #2
 800858c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8008590:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008594:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008598:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 800859a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800859e:	3302      	adds	r3, #2
 80085a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085a8:	2218      	movs	r2, #24
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fdc8 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 80085b2:	233f      	movs	r3, #63	; 0x3f
 80085b4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 80085b8:	239c      	movs	r3, #156	; 0x9c
 80085ba:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 80085be:	230f      	movs	r3, #15
 80085c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 80085c4:	f107 0318 	add.w	r3, r7, #24
 80085c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80085cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 80085d4:	f107 0317 	add.w	r3, r7, #23
 80085d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 80085dc:	2301      	movs	r3, #1
 80085de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 f857 	bl	800969c <hci_send_req>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	da01      	bge.n	80085f8 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 80085f4:	23ff      	movs	r3, #255	; 0xff
 80085f6:	e004      	b.n	8008602 <aci_gap_create_connection+0x1ac>
  return status;
 80085f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80085fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008600:	781b      	ldrb	r3, [r3, #0]
}
 8008602:	4618      	mov	r0, r3
 8008604:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008608:	46bd      	mov	sp, r7
 800860a:	bd90      	pop	{r4, r7, pc}

0800860c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008616:	f107 0308 	add.w	r3, r7, #8
 800861a:	2218      	movs	r2, #24
 800861c:	2100      	movs	r1, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f000 fd8f 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008624:	233f      	movs	r3, #63	; 0x3f
 8008626:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008628:	f240 1301 	movw	r3, #257	; 0x101
 800862c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800862e:	1dfb      	adds	r3, r7, #7
 8008630:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008632:	2301      	movs	r3, #1
 8008634:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008636:	f107 0308 	add.w	r3, r7, #8
 800863a:	2100      	movs	r1, #0
 800863c:	4618      	mov	r0, r3
 800863e:	f001 f82d 	bl	800969c <hci_send_req>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	da01      	bge.n	800864c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008648:	23ff      	movs	r3, #255	; 0xff
 800864a:	e000      	b.n	800864e <aci_gatt_init+0x42>
  return status;
 800864c:	79fb      	ldrb	r3, [r7, #7]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3720      	adds	r7, #32
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008656:	b5b0      	push	{r4, r5, r7, lr}
 8008658:	b0cc      	sub	sp, #304	; 0x130
 800865a:	af00      	add	r7, sp, #0
 800865c:	4605      	mov	r5, r0
 800865e:	460c      	mov	r4, r1
 8008660:	4610      	mov	r0, r2
 8008662:	4619      	mov	r1, r3
 8008664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008668:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800866c:	462a      	mov	r2, r5
 800866e:	801a      	strh	r2, [r3, #0]
 8008670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008678:	4622      	mov	r2, r4
 800867a:	801a      	strh	r2, [r3, #0]
 800867c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008680:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008684:	4602      	mov	r2, r0
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800868c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008690:	460a      	mov	r2, r1
 8008692:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008694:	f107 0310 	add.w	r3, r7, #16
 8008698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800869c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80086a4:	2200      	movs	r2, #0
 80086a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80086a8:	2300      	movs	r3, #0
 80086aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80086ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086b6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80086ba:	8812      	ldrh	r2, [r2, #0]
 80086bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80086be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086c2:	3302      	adds	r3, #2
 80086c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80086c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086d0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80086d4:	8812      	ldrh	r2, [r2, #0]
 80086d6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80086d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086dc:	3302      	adds	r3, #2
 80086de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80086e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80086ea:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80086ee:	7812      	ldrb	r2, [r2, #0]
 80086f0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80086f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086f6:	3301      	adds	r3, #1
 80086f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80086fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008700:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008704:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800870c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008710:	3301      	adds	r3, #1
 8008712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800871a:	1d98      	adds	r0, r3, #6
 800871c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008720:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800872c:	f000 fcf9 	bl	8009122 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008734:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800873e:	4413      	add	r3, r2
 8008740:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008744:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008748:	2218      	movs	r2, #24
 800874a:	2100      	movs	r1, #0
 800874c:	4618      	mov	r0, r3
 800874e:	f000 fcf8 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008752:	233f      	movs	r3, #63	; 0x3f
 8008754:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008758:	f44f 7383 	mov.w	r3, #262	; 0x106
 800875c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008760:	f107 0310 	add.w	r3, r7, #16
 8008764:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008768:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800876c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008770:	f107 030f 	add.w	r3, r7, #15
 8008774:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008778:	2301      	movs	r3, #1
 800877a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800877e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008782:	2100      	movs	r1, #0
 8008784:	4618      	mov	r0, r3
 8008786:	f000 ff89 	bl	800969c <hci_send_req>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	da01      	bge.n	8008794 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8008790:	23ff      	movs	r3, #255	; 0xff
 8008792:	e004      	b.n	800879e <aci_gatt_update_char_value+0x148>
  return status;
 8008794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008798:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800879c:	781b      	ldrb	r3, [r3, #0]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bdb0      	pop	{r4, r5, r7, pc}

080087a8 <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b0cc      	sub	sp, #304	; 0x130
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4602      	mov	r2, r0
 80087b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80087b8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 80087ba:	f107 0310 	add.w	r3, r7, #16
 80087be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80087c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80087ca:	2200      	movs	r2, #0
 80087cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80087d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087dc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80087e0:	8812      	ldrh	r2, [r2, #0]
 80087e2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80087e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087e8:	3302      	adds	r3, #2
 80087ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087f2:	2218      	movs	r2, #24
 80087f4:	2100      	movs	r1, #0
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 fca3 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 80087fc:	233f      	movs	r3, #63	; 0x3f
 80087fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 8008802:	f44f 7389 	mov.w	r3, #274	; 0x112
 8008806:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800880a:	230f      	movs	r3, #15
 800880c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008810:	f107 0310 	add.w	r3, r7, #16
 8008814:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008818:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800881c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008820:	f107 030f 	add.w	r3, r7, #15
 8008824:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008828:	2301      	movs	r3, #1
 800882a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800882e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008832:	2100      	movs	r1, #0
 8008834:	4618      	mov	r0, r3
 8008836:	f000 ff31 	bl	800969c <hci_send_req>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	da01      	bge.n	8008844 <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 8008840:	23ff      	movs	r3, #255	; 0xff
 8008842:	e004      	b.n	800884e <aci_gatt_disc_all_primary_services+0xa6>
  return status;
 8008844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008848:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800884c:	781b      	ldrb	r3, [r3, #0]
}
 800884e:	4618      	mov	r0, r3
 8008850:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 8008858:	b590      	push	{r4, r7, lr}
 800885a:	b0cd      	sub	sp, #308	; 0x134
 800885c:	af00      	add	r7, sp, #0
 800885e:	4604      	mov	r4, r0
 8008860:	4608      	mov	r0, r1
 8008862:	4611      	mov	r1, r2
 8008864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008868:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800886c:	4622      	mov	r2, r4
 800886e:	801a      	strh	r2, [r3, #0]
 8008870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008874:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008878:	4602      	mov	r2, r0
 800887a:	801a      	strh	r2, [r3, #0]
 800887c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008880:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008884:	460a      	mov	r2, r1
 8008886:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 8008888:	f107 0310 	add.w	r3, r7, #16
 800888c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008894:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80088a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088aa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80088ae:	8812      	ldrh	r2, [r2, #0]
 80088b0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80088b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088b6:	3302      	adds	r3, #2
 80088b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 80088bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088c4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80088c8:	8812      	ldrh	r2, [r2, #0]
 80088ca:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80088cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088d0:	3302      	adds	r3, #2
 80088d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80088d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80088de:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80088e2:	8812      	ldrh	r2, [r2, #0]
 80088e4:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80088e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088ea:	3302      	adds	r3, #2
 80088ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088f4:	2218      	movs	r2, #24
 80088f6:	2100      	movs	r1, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fc22 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 80088fe:	233f      	movs	r3, #63	; 0x3f
 8008900:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 8008904:	f240 1315 	movw	r3, #277	; 0x115
 8008908:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800890c:	230f      	movs	r3, #15
 800890e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008912:	f107 0310 	add.w	r3, r7, #16
 8008916:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800891a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800891e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008922:	f107 030f 	add.w	r3, r7, #15
 8008926:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800892a:	2301      	movs	r3, #1
 800892c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008930:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008934:	2100      	movs	r1, #0
 8008936:	4618      	mov	r0, r3
 8008938:	f000 feb0 	bl	800969c <hci_send_req>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	da01      	bge.n	8008946 <aci_gatt_disc_all_char_of_service+0xee>
    return BLE_STATUS_TIMEOUT;
 8008942:	23ff      	movs	r3, #255	; 0xff
 8008944:	e004      	b.n	8008950 <aci_gatt_disc_all_char_of_service+0xf8>
  return status;
 8008946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800894a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800894e:	781b      	ldrb	r3, [r3, #0]
}
 8008950:	4618      	mov	r0, r3
 8008952:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008956:	46bd      	mov	sp, r7
 8008958:	bd90      	pop	{r4, r7, pc}

0800895a <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 800895a:	b590      	push	{r4, r7, lr}
 800895c:	b0cd      	sub	sp, #308	; 0x134
 800895e:	af00      	add	r7, sp, #0
 8008960:	4604      	mov	r4, r0
 8008962:	4608      	mov	r0, r1
 8008964:	4611      	mov	r1, r2
 8008966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800896a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800896e:	4622      	mov	r2, r4
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800897a:	4602      	mov	r2, r0
 800897c:	801a      	strh	r2, [r3, #0]
 800897e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008982:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008986:	460a      	mov	r2, r1
 8008988:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800898a:	f107 0310 	add.w	r3, r7, #16
 800898e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008996:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800899a:	2200      	movs	r2, #0
 800899c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80089a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80089b0:	8812      	ldrh	r2, [r2, #0]
 80089b2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80089b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089b8:	3302      	adds	r3, #2
 80089ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80089be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089c6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80089ca:	8812      	ldrh	r2, [r2, #0]
 80089cc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80089ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089d2:	3302      	adds	r3, #2
 80089d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 80089d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089e0:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80089e4:	8812      	ldrh	r2, [r2, #0]
 80089e6:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80089e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089ec:	3302      	adds	r3, #2
 80089ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089f6:	2218      	movs	r2, #24
 80089f8:	2100      	movs	r1, #0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 fba1 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a00:	233f      	movs	r3, #63	; 0x3f
 8008a02:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 8008a06:	f240 1317 	movw	r3, #279	; 0x117
 8008a0a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008a0e:	230f      	movs	r3, #15
 8008a10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008a14:	f107 0310 	add.w	r3, r7, #16
 8008a18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008a24:	f107 030f 	add.w	r3, r7, #15
 8008a28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a36:	2100      	movs	r1, #0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fe2f 	bl	800969c <hci_send_req>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	da01      	bge.n	8008a48 <aci_gatt_disc_all_char_desc+0xee>
    return BLE_STATUS_TIMEOUT;
 8008a44:	23ff      	movs	r3, #255	; 0xff
 8008a46:	e004      	b.n	8008a52 <aci_gatt_disc_all_char_desc+0xf8>
  return status;
 8008a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a50:	781b      	ldrb	r3, [r3, #0]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd90      	pop	{r4, r7, pc}

08008a5c <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 8008a5c:	b590      	push	{r4, r7, lr}
 8008a5e:	b0cf      	sub	sp, #316	; 0x13c
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4604      	mov	r4, r0
 8008a64:	4608      	mov	r0, r1
 8008a66:	4611      	mov	r1, r2
 8008a68:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008a6c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a76:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	801a      	strh	r2, [r3, #0]
 8008a7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a86:	4602      	mov	r2, r0
 8008a88:	801a      	strh	r2, [r3, #0]
 8008a8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a8e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008a92:	460a      	mov	r2, r1
 8008a94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 8008a96:	f107 0318 	add.w	r3, r7, #24
 8008a9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008a9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008aa2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008ab0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ab4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008ab8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008abc:	8812      	ldrh	r2, [r2, #0]
 8008abe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008ac0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 8008aca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ace:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008ad2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008ad6:	8812      	ldrh	r2, [r2, #0]
 8008ad8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008ada:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ade:	3302      	adds	r3, #2
 8008ae0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8008ae4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ae8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008aec:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008af0:	7812      	ldrb	r2, [r2, #0]
 8008af2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008af4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008af8:	3301      	adds	r3, #1
 8008afa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8008afe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008b02:	1d58      	adds	r0, r3, #5
 8008b04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b08:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008b0c:	781a      	ldrb	r2, [r3, #0]
 8008b0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b12:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008b16:	6819      	ldr	r1, [r3, #0]
 8008b18:	f000 fb03 	bl	8009122 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8008b1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b20:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008b34:	2218      	movs	r2, #24
 8008b36:	2100      	movs	r1, #0
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 fb02 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b3e:	233f      	movs	r3, #63	; 0x3f
 8008b40:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 8008b44:	f240 1321 	movw	r3, #289	; 0x121
 8008b48:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8008b4c:	230f      	movs	r3, #15
 8008b4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8008b52:	f107 0318 	add.w	r3, r7, #24
 8008b56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008b5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8008b62:	f107 0317 	add.w	r3, r7, #23
 8008b66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008b74:	2100      	movs	r1, #0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fd90 	bl	800969c <hci_send_req>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	da01      	bge.n	8008b86 <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 8008b82:	23ff      	movs	r3, #255	; 0xff
 8008b84:	e004      	b.n	8008b90 <aci_gatt_write_char_desc+0x134>
  return status;
 8008b86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b8a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008b8e:	781b      	ldrb	r3, [r3, #0]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd90      	pop	{r4, r7, pc}

08008b9a <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 8008b9a:	b590      	push	{r4, r7, lr}
 8008b9c:	b0cf      	sub	sp, #316	; 0x13c
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	4608      	mov	r0, r1
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008baa:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008bb4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008bb8:	4622      	mov	r2, r4
 8008bba:	801a      	strh	r2, [r3, #0]
 8008bbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008bc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	801a      	strh	r2, [r3, #0]
 8008bc8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008bcc:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008bd0:	460a      	mov	r2, r1
 8008bd2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 8008bd4:	f107 0318 	add.w	r3, r7, #24
 8008bd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008bdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008be0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008be4:	2200      	movs	r2, #0
 8008be6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008bee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008bf2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008bf6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008bfa:	8812      	ldrh	r2, [r2, #0]
 8008bfc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008bfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c02:	3302      	adds	r3, #2
 8008c04:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 8008c08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c0c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c10:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008c14:	8812      	ldrh	r2, [r2, #0]
 8008c16:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008c18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c1c:	3302      	adds	r3, #2
 8008c1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8008c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c26:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c2a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008c32:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c36:	3301      	adds	r3, #1
 8008c38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8008c3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c40:	1d58      	adds	r0, r3, #5
 8008c42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c46:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008c54:	6819      	ldr	r1, [r3, #0]
 8008c56:	f000 fa64 	bl	8009122 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8008c5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008c5e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008c68:	4413      	add	r3, r2
 8008c6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008c72:	2218      	movs	r2, #24
 8008c74:	2100      	movs	r1, #0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 fa63 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c7c:	233f      	movs	r3, #63	; 0x3f
 8008c7e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 8008c82:	f240 1323 	movw	r3, #291	; 0x123
 8008c86:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008c8a:	f107 0318 	add.w	r3, r7, #24
 8008c8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008c92:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008c96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8008c9a:	f107 0317 	add.w	r3, r7, #23
 8008c9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ca8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 fcf4 	bl	800969c <hci_send_req>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	da01      	bge.n	8008cbe <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 8008cba:	23ff      	movs	r3, #255	; 0xff
 8008cbc:	e004      	b.n	8008cc8 <aci_gatt_write_without_resp+0x12e>
  return status;
 8008cbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cc2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008cc6:	781b      	ldrb	r3, [r3, #0]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd90      	pop	{r4, r7, pc}

08008cd2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b0cc      	sub	sp, #304	; 0x130
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008cea:	4602      	mov	r2, r0
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008cf6:	460a      	mov	r2, r1
 8008cf8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008cfa:	f107 0310 	add.w	r3, r7, #16
 8008cfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d06:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d1c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008d20:	7812      	ldrb	r2, [r2, #0]
 8008d22:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d28:	3301      	adds	r3, #1
 8008d2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d36:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008d3a:	7812      	ldrb	r2, [r2, #0]
 8008d3c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008d3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d42:	3301      	adds	r3, #1
 8008d44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d4c:	1c98      	adds	r0, r3, #2
 8008d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d52:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008d56:	781a      	ldrb	r2, [r3, #0]
 8008d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d60:	6819      	ldr	r1, [r3, #0]
 8008d62:	f000 f9de 	bl	8009122 <Osal_MemCpy>
  index_input += Length;
 8008d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008d74:	4413      	add	r3, r2
 8008d76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d7e:	2218      	movs	r2, #24
 8008d80:	2100      	movs	r1, #0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 f9dd 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d88:	233f      	movs	r3, #63	; 0x3f
 8008d8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008d8e:	230c      	movs	r3, #12
 8008d90:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d94:	f107 0310 	add.w	r3, r7, #16
 8008d98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008da0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008da4:	f107 030f 	add.w	r3, r7, #15
 8008da8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008db2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008db6:	2100      	movs	r1, #0
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fc6f 	bl	800969c <hci_send_req>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	da01      	bge.n	8008dc8 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008dc4:	23ff      	movs	r3, #255	; 0xff
 8008dc6:	e004      	b.n	8008dd2 <aci_hal_write_config_data+0x100>
  return status;
 8008dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dcc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008dd0:	781b      	ldrb	r3, [r3, #0]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b0cc      	sub	sp, #304	; 0x130
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4602      	mov	r2, r0
 8008de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008dec:	701a      	strb	r2, [r3, #0]
 8008dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008df6:	460a      	mov	r2, r1
 8008df8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008dfa:	f107 0310 	add.w	r3, r7, #16
 8008dfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e06:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e1c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008e20:	7812      	ldrb	r2, [r2, #0]
 8008e22:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e28:	3301      	adds	r3, #1
 8008e2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8008e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e36:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008e3a:	7812      	ldrb	r2, [r2, #0]
 8008e3c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e42:	3301      	adds	r3, #1
 8008e44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e4c:	2218      	movs	r2, #24
 8008e4e:	2100      	movs	r1, #0
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 f976 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e56:	233f      	movs	r3, #63	; 0x3f
 8008e58:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008e5c:	230f      	movs	r3, #15
 8008e5e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e62:	f107 0310 	add.w	r3, r7, #16
 8008e66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008e72:	f107 030f 	add.w	r3, r7, #15
 8008e76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e84:	2100      	movs	r1, #0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fc08 	bl	800969c <hci_send_req>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	da01      	bge.n	8008e96 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8008e92:	23ff      	movs	r3, #255	; 0xff
 8008e94:	e004      	b.n	8008ea0 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8008e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e9a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008e9e:	781b      	ldrb	r3, [r3, #0]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b0cc      	sub	sp, #304	; 0x130
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008eba:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008ebc:	f107 0310 	add.w	r3, r7, #16
 8008ec0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ecc:	2200      	movs	r2, #0
 8008ece:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ede:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008ee2:	8812      	ldrh	r2, [r2, #0]
 8008ee4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eea:	3302      	adds	r3, #2
 8008eec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ef0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ef4:	2218      	movs	r2, #24
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 f922 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008efe:	233f      	movs	r3, #63	; 0x3f
 8008f00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008f04:	2318      	movs	r3, #24
 8008f06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f0a:	f107 0310 	add.w	r3, r7, #16
 8008f0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008f1a:	f107 030f 	add.w	r3, r7, #15
 8008f1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 fbb4 	bl	800969c <hci_send_req>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	da01      	bge.n	8008f3e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8008f3a:	23ff      	movs	r3, #255	; 0xff
 8008f3c:	e004      	b.n	8008f48 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8008f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f46:	781b      	ldrb	r3, [r3, #0]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b088      	sub	sp, #32
 8008f56:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f5c:	f107 0308 	add.w	r3, r7, #8
 8008f60:	2218      	movs	r2, #24
 8008f62:	2100      	movs	r1, #0
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 f8ec 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x03;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f72:	1dfb      	adds	r3, r7, #7
 8008f74:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f76:	2301      	movs	r3, #1
 8008f78:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f7a:	f107 0308 	add.w	r3, r7, #8
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fb8b 	bl	800969c <hci_send_req>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	da01      	bge.n	8008f90 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008f8c:	23ff      	movs	r3, #255	; 0xff
 8008f8e:	e000      	b.n	8008f92 <hci_reset+0x40>
  return status;
 8008f90:	79fb      	ldrb	r3, [r7, #7]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3720      	adds	r7, #32
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 8008f9a:	b5b0      	push	{r4, r5, r7, lr}
 8008f9c:	b0cc      	sub	sp, #304	; 0x130
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fac:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008fb0:	462a      	mov	r2, r5
 8008fb2:	801a      	strh	r2, [r3, #0]
 8008fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	801a      	strh	r2, [r3, #0]
 8008fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8008fc8:	4602      	mov	r2, r0
 8008fca:	801a      	strh	r2, [r3, #0]
 8008fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fd4:	460a      	mov	r2, r1
 8008fd6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 8008fd8:	f107 0310 	add.w	r3, r7, #16
 8008fdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008fe8:	2200      	movs	r2, #0
 8008fea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ff6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ffa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008ffe:	8812      	ldrh	r2, [r2, #0]
 8009000:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009002:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009006:	3302      	adds	r3, #2
 8009008:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800900c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009010:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009014:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009018:	8812      	ldrh	r2, [r2, #0]
 800901a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800901c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009020:	3302      	adds	r3, #2
 8009022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8009026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800902a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800902e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009032:	8812      	ldrh	r2, [r2, #0]
 8009034:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8009036:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800903a:	3302      	adds	r3, #2
 800903c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 8009040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009044:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009048:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800904c:	8812      	ldrh	r2, [r2, #0]
 800904e:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8009050:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009054:	3302      	adds	r3, #2
 8009056:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800905a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800905e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8009062:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8009064:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009068:	3302      	adds	r3, #2
 800906a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 800906e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009072:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8009076:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 8009078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800907c:	3302      	adds	r3, #2
 800907e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8009082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009086:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 800908a:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800908c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009090:	3302      	adds	r3, #2
 8009092:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 8009096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800909a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800909e:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 80090a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090a4:	3301      	adds	r3, #1
 80090a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 80090aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ae:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80090b2:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 80090b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090b8:	3301      	adds	r3, #1
 80090ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090c2:	2218      	movs	r2, #24
 80090c4:	2100      	movs	r1, #0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f83b 	bl	8009142 <Osal_MemSet>
  rq.ogf = 0x3f;
 80090cc:	233f      	movs	r3, #63	; 0x3f
 80090ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 80090d2:	f44f 73c1 	mov.w	r3, #386	; 0x182
 80090d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80090da:	f107 0310 	add.w	r3, r7, #16
 80090de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80090e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80090ea:	f107 030f 	add.w	r3, r7, #15
 80090ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80090f2:	2301      	movs	r3, #1
 80090f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090fc:	2100      	movs	r1, #0
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 facc 	bl	800969c <hci_send_req>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	da01      	bge.n	800910e <aci_l2cap_connection_parameter_update_resp+0x174>
    return BLE_STATUS_TIMEOUT;
 800910a:	23ff      	movs	r3, #255	; 0xff
 800910c:	e004      	b.n	8009118 <aci_l2cap_connection_parameter_update_resp+0x17e>
  return status;
 800910e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009112:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009116:	781b      	ldrb	r3, [r3, #0]
}
 8009118:	4618      	mov	r0, r3
 800911a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800911e:	46bd      	mov	sp, r7
 8009120:	bdb0      	pop	{r4, r5, r7, pc}

08009122 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	68b9      	ldr	r1, [r7, #8]
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f003 fed5 	bl	800cee2 <memcpy>
 8009138:	4603      	mov	r3, r0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	68b9      	ldr	r1, [r7, #8]
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f003 fe50 	bl	800cdf8 <memset>
 8009158:	4603      	mov	r3, r0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009162:	b480      	push	{r7}
 8009164:	af00      	add	r7, sp, #0
  return;
 8009166:	bf00      	nop
}
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0
  return;
 8009174:	bf00      	nop
}
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800917e:	b480      	push	{r7}
 8009180:	af00      	add	r7, sp, #0
  return;
 8009182:	bf00      	nop
}
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800918c:	b480      	push	{r7}
 800918e:	af00      	add	r7, sp, #0
  return;
 8009190:	bf00      	nop
}
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800919a:	b480      	push	{r7}
 800919c:	af00      	add	r7, sp, #0
  return;
 800919e:	bf00      	nop
}
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80091a8:	b480      	push	{r7}
 80091aa:	af00      	add	r7, sp, #0
  return;
 80091ac:	bf00      	nop
}
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80091b6:	b480      	push	{r7}
 80091b8:	af00      	add	r7, sp, #0
  return;
 80091ba:	bf00      	nop
}
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0
  return;
 80091c8:	bf00      	nop
}
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80091d2:	b480      	push	{r7}
 80091d4:	af00      	add	r7, sp, #0
  return;
 80091d6:	bf00      	nop
}
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
  return;
 80091e4:	bf00      	nop
}
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80091ee:	b480      	push	{r7}
 80091f0:	af00      	add	r7, sp, #0
  return;
 80091f2:	bf00      	nop
}
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
  return;
 8009200:	bf00      	nop
}
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800920a:	b480      	push	{r7}
 800920c:	af00      	add	r7, sp, #0
  return;
 800920e:	bf00      	nop
}
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
  return;
 800921c:	bf00      	nop
}
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009226:	b480      	push	{r7}
 8009228:	af00      	add	r7, sp, #0
  return;
 800922a:	bf00      	nop
}
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009234:	b480      	push	{r7}
 8009236:	af00      	add	r7, sp, #0
  return;
 8009238:	bf00      	nop
}
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009242:	b480      	push	{r7}
 8009244:	af00      	add	r7, sp, #0
  return;
 8009246:	bf00      	nop
}
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8009250:	b480      	push	{r7}
 8009252:	af00      	add	r7, sp, #0
  return;
 8009254:	bf00      	nop
}
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
	...

08009260 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009264:	4b04      	ldr	r3, [pc, #16]	; (8009278 <SVCCTL_Init+0x18>)
 8009266:	2200      	movs	r2, #0
 8009268:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800926a:	4b04      	ldr	r3, [pc, #16]	; (800927c <SVCCTL_Init+0x1c>)
 800926c:	2200      	movs	r2, #0
 800926e:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009270:	f000 f806 	bl	8009280 <SVCCTL_SvcInit>

  return;
 8009274:	bf00      	nop
}
 8009276:	bd80      	pop	{r7, pc}
 8009278:	20000090 	.word	0x20000090
 800927c:	200000b0 	.word	0x200000b0

08009280 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	af00      	add	r7, sp, #0
  BAS_Init();
 8009284:	f7ff ff6d 	bl	8009162 <BAS_Init>

  BLS_Init();
 8009288:	f7ff ff72 	bl	8009170 <BLS_Init>

  CRS_STM_Init();
 800928c:	f7ff ff77 	bl	800917e <CRS_STM_Init>

  DIS_Init();
 8009290:	f7ff ff7c 	bl	800918c <DIS_Init>

  EDS_STM_Init();
 8009294:	f7ff ff81 	bl	800919a <EDS_STM_Init>

  HIDS_Init();
 8009298:	f7ff ff86 	bl	80091a8 <HIDS_Init>

  HRS_Init();
 800929c:	f7ff ff8b 	bl	80091b6 <HRS_Init>

  HTS_Init();
 80092a0:	f7ff ff90 	bl	80091c4 <HTS_Init>

  IAS_Init();
 80092a4:	f7ff ff95 	bl	80091d2 <IAS_Init>

  LLS_Init();
 80092a8:	f7ff ff9a 	bl	80091e0 <LLS_Init>

  TPS_Init();
 80092ac:	f7ff ff9f 	bl	80091ee <TPS_Init>

  MOTENV_STM_Init();
 80092b0:	f7ff ffa4 	bl	80091fc <MOTENV_STM_Init>

  P2PS_STM_Init();
 80092b4:	f7ff ffa9 	bl	800920a <P2PS_STM_Init>

  ZDD_STM_Init();
 80092b8:	f7ff ffae 	bl	8009218 <ZDD_STM_Init>

  OTAS_STM_Init();
 80092bc:	f7ff ffb3 	bl	8009226 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80092c0:	f7ff ffbf 	bl	8009242 <BVOPUS_STM_Init>

  MESH_Init();
 80092c4:	f7ff ffb6 	bl	8009234 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80092c8:	f7ff ffc2 	bl	8009250 <SVCCTL_InitCustomSvc>
  
  return;
 80092cc:	bf00      	nop
}
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 80092d8:	4b09      	ldr	r3, [pc, #36]	; (8009300 <SVCCTL_RegisterCltHandler+0x30>)
 80092da:	791b      	ldrb	r3, [r3, #4]
 80092dc:	4619      	mov	r1, r3
 80092de:	4a08      	ldr	r2, [pc, #32]	; (8009300 <SVCCTL_RegisterCltHandler+0x30>)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 80092e6:	4b06      	ldr	r3, [pc, #24]	; (8009300 <SVCCTL_RegisterCltHandler+0x30>)
 80092e8:	791b      	ldrb	r3, [r3, #4]
 80092ea:	3301      	adds	r3, #1
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	4b04      	ldr	r3, [pc, #16]	; (8009300 <SVCCTL_RegisterCltHandler+0x30>)
 80092f0:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 80092f2:	bf00      	nop
}
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	200000b0 	.word	0x200000b0

08009304 <SVCCTL_UserEvtRx>:

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3301      	adds	r3, #1
 8009310:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009312:	2300      	movs	r3, #0
 8009314:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	2bff      	cmp	r3, #255	; 0xff
 800931c:	d13f      	bne.n	800939e <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	3302      	adds	r3, #2
 8009322:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800932e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009332:	d132      	bne.n	800939a <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009334:	2300      	movs	r3, #0
 8009336:	757b      	strb	r3, [r7, #21]
 8009338:	e00d      	b.n	8009356 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800933a:	7d7b      	ldrb	r3, [r7, #21]
 800933c:	4a27      	ldr	r2, [pc, #156]	; (80093dc <SVCCTL_UserEvtRx+0xd8>)
 800933e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	4798      	blx	r3
 8009346:	4603      	mov	r3, r0
 8009348:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800934a:	7dfb      	ldrb	r3, [r7, #23]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d108      	bne.n	8009362 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009350:	7d7b      	ldrb	r3, [r7, #21]
 8009352:	3301      	adds	r3, #1
 8009354:	757b      	strb	r3, [r7, #21]
 8009356:	4b21      	ldr	r3, [pc, #132]	; (80093dc <SVCCTL_UserEvtRx+0xd8>)
 8009358:	7f1b      	ldrb	r3, [r3, #28]
 800935a:	7d7a      	ldrb	r2, [r7, #21]
 800935c:	429a      	cmp	r2, r3
 800935e:	d3ec      	bcc.n	800933a <SVCCTL_UserEvtRx+0x36>
 8009360:	e000      	b.n	8009364 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 8009362:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 8009364:	2300      	movs	r3, #0
 8009366:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8009368:	2300      	movs	r3, #0
 800936a:	757b      	strb	r3, [r7, #21]
 800936c:	e00d      	b.n	800938a <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800936e:	7d7b      	ldrb	r3, [r7, #21]
 8009370:	4a1b      	ldr	r2, [pc, #108]	; (80093e0 <SVCCTL_UserEvtRx+0xdc>)
 8009372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	4798      	blx	r3
 800937a:	4603      	mov	r3, r0
 800937c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800937e:	7dfb      	ldrb	r3, [r7, #23]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d108      	bne.n	8009396 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8009384:	7d7b      	ldrb	r3, [r7, #21]
 8009386:	3301      	adds	r3, #1
 8009388:	757b      	strb	r3, [r7, #21]
 800938a:	4b15      	ldr	r3, [pc, #84]	; (80093e0 <SVCCTL_UserEvtRx+0xdc>)
 800938c:	791b      	ldrb	r3, [r3, #4]
 800938e:	7d7a      	ldrb	r2, [r7, #21]
 8009390:	429a      	cmp	r2, r3
 8009392:	d3ec      	bcc.n	800936e <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 8009394:	e002      	b.n	800939c <SVCCTL_UserEvtRx+0x98>
              break;
 8009396:	bf00      	nop
          break;
 8009398:	e000      	b.n	800939c <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 800939a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800939c:	e000      	b.n	80093a0 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800939e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d00f      	beq.n	80093c6 <SVCCTL_UserEvtRx+0xc2>
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	dc10      	bgt.n	80093cc <SVCCTL_UserEvtRx+0xc8>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <SVCCTL_UserEvtRx+0xb0>
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d006      	beq.n	80093c0 <SVCCTL_UserEvtRx+0xbc>
 80093b2:	e00b      	b.n	80093cc <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f001 fc65 	bl	800ac84 <SVCCTL_App_Notification>
 80093ba:	4603      	mov	r3, r0
 80093bc:	75bb      	strb	r3, [r7, #22]
      break;
 80093be:	e008      	b.n	80093d2 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80093c0:	2301      	movs	r3, #1
 80093c2:	75bb      	strb	r3, [r7, #22]
      break;
 80093c4:	e005      	b.n	80093d2 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75bb      	strb	r3, [r7, #22]
      break;
 80093ca:	e002      	b.n	80093d2 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80093cc:	2301      	movs	r3, #1
 80093ce:	75bb      	strb	r3, [r7, #22]
      break;
 80093d0:	bf00      	nop
  }

  return (return_status);
 80093d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	20000090 	.word	0x20000090
 80093e0:	200000b0 	.word	0x200000b0

080093e4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80093ec:	f107 030c 	add.w	r3, r7, #12
 80093f0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	212e      	movs	r1, #46	; 0x2e
 80093fc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009400:	f000 fae8 	bl	80099d4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	330b      	adds	r3, #11
 8009408:	78db      	ldrb	r3, [r3, #3]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3720      	adds	r7, #32
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b088      	sub	sp, #32
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800941a:	f107 030c 	add.w	r3, r7, #12
 800941e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	210f      	movs	r1, #15
 800942a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800942e:	f000 fad1 	bl	80099d4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	330b      	adds	r3, #11
 8009436:	78db      	ldrb	r3, [r3, #3]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3720      	adds	r7, #32
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009448:	f107 030c 	add.w	r3, r7, #12
 800944c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	2110      	movs	r1, #16
 8009454:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009458:	f000 fabc 	bl	80099d4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	330b      	adds	r3, #11
 8009460:	78db      	ldrb	r3, [r3, #3]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3720      	adds	r7, #32
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
	...

0800946c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800946c:	b480      	push	{r7}
 800946e:	b08b      	sub	sp, #44	; 0x2c
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009478:	2300      	movs	r3, #0
 800947a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009488:	2300      	movs	r3, #0
 800948a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009494:	4b4a      	ldr	r3, [pc, #296]	; (80095c0 <SHCI_GetWirelessFwInfo+0x154>)
 8009496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009498:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800949c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80094a6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a44      	ldr	r2, [pc, #272]	; (80095c4 <SHCI_GetWirelessFwInfo+0x158>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d10f      	bne.n	80094d8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	617b      	str	r3, [r7, #20]
 80094d6:	e01a      	b.n	800950e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80094e0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80094e4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	0e1b      	lsrs	r3, r3, #24
 8009512:	b2da      	uxtb	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	0c1b      	lsrs	r3, r3, #16
 800951c:	b2da      	uxtb	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	0a1b      	lsrs	r3, r3, #8
 8009526:	b2da      	uxtb	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	091b      	lsrs	r3, r3, #4
 8009530:	b2db      	uxtb	r3, r3
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	b2da      	uxtb	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800953c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953e:	b2db      	uxtb	r3, r3
 8009540:	f003 030f 	and.w	r3, r3, #15
 8009544:	b2da      	uxtb	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	0e1b      	lsrs	r3, r3, #24
 800954e:	b2da      	uxtb	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	0c1b      	lsrs	r3, r3, #16
 8009558:	b2da      	uxtb	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	0a1b      	lsrs	r3, r3, #8
 8009562:	b2da      	uxtb	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009568:	6a3b      	ldr	r3, [r7, #32]
 800956a:	b2da      	uxtb	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	b2da      	uxtb	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	0e1b      	lsrs	r3, r3, #24
 800957c:	b2da      	uxtb	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	0c1b      	lsrs	r3, r3, #16
 8009586:	b2da      	uxtb	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	0a1b      	lsrs	r3, r3, #8
 8009590:	b2da      	uxtb	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	0e1b      	lsrs	r3, r3, #24
 800959a:	b2da      	uxtb	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	0c1b      	lsrs	r3, r3, #16
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	372c      	adds	r7, #44	; 0x2c
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	58004000 	.word	0x58004000
 80095c4:	a94656b9 	.word	0xa94656b9

080095c8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	4a08      	ldr	r2, [pc, #32]	; (80095f8 <hci_init+0x30>)
 80095d8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80095da:	4a08      	ldr	r2, [pc, #32]	; (80095fc <hci_init+0x34>)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80095e0:	4806      	ldr	r0, [pc, #24]	; (80095fc <hci_init+0x34>)
 80095e2:	f000 f979 	bl	80098d8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 f8da 	bl	80097a4 <TlInit>

  return;
 80095f0:	bf00      	nop
}
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	20000530 	.word	0x20000530
 80095fc:	20000508 	.word	0x20000508

08009600 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009606:	4822      	ldr	r0, [pc, #136]	; (8009690 <hci_user_evt_proc+0x90>)
 8009608:	f000 fde8 	bl	800a1dc <LST_is_empty>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d12b      	bne.n	800966a <hci_user_evt_proc+0x6a>
 8009612:	4b20      	ldr	r3, [pc, #128]	; (8009694 <hci_user_evt_proc+0x94>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d027      	beq.n	800966a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800961a:	f107 030c 	add.w	r3, r7, #12
 800961e:	4619      	mov	r1, r3
 8009620:	481b      	ldr	r0, [pc, #108]	; (8009690 <hci_user_evt_proc+0x90>)
 8009622:	f000 fe6a 	bl	800a2fa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009626:	4b1c      	ldr	r3, [pc, #112]	; (8009698 <hci_user_evt_proc+0x98>)
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00c      	beq.n	8009648 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009632:	2301      	movs	r3, #1
 8009634:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009636:	4b18      	ldr	r3, [pc, #96]	; (8009698 <hci_user_evt_proc+0x98>)
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	1d3a      	adds	r2, r7, #4
 800963c:	4610      	mov	r0, r2
 800963e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009640:	793a      	ldrb	r2, [r7, #4]
 8009642:	4b14      	ldr	r3, [pc, #80]	; (8009694 <hci_user_evt_proc+0x94>)
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	e002      	b.n	800964e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009648:	4b12      	ldr	r3, [pc, #72]	; (8009694 <hci_user_evt_proc+0x94>)
 800964a:	2201      	movs	r2, #1
 800964c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800964e:	4b11      	ldr	r3, [pc, #68]	; (8009694 <hci_user_evt_proc+0x94>)
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d004      	beq.n	8009660 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fc0d 	bl	8009e78 <TL_MM_EvtDone>
 800965e:	e004      	b.n	800966a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4619      	mov	r1, r3
 8009664:	480a      	ldr	r0, [pc, #40]	; (8009690 <hci_user_evt_proc+0x90>)
 8009666:	f000 fddb 	bl	800a220 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800966a:	4809      	ldr	r0, [pc, #36]	; (8009690 <hci_user_evt_proc+0x90>)
 800966c:	f000 fdb6 	bl	800a1dc <LST_is_empty>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d107      	bne.n	8009686 <hci_user_evt_proc+0x86>
 8009676:	4b07      	ldr	r3, [pc, #28]	; (8009694 <hci_user_evt_proc+0x94>)
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800967e:	4804      	ldr	r0, [pc, #16]	; (8009690 <hci_user_evt_proc+0x90>)
 8009680:	f001 ff66 	bl	800b550 <hci_notify_asynch_evt>
  }


  return;
 8009684:	bf00      	nop
 8009686:	bf00      	nop
}
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	200000bc 	.word	0x200000bc
 8009694:	200000c8 	.word	0x200000c8
 8009698:	20000508 	.word	0x20000508

0800969c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80096a8:	2000      	movs	r0, #0
 80096aa:	f000 f8d1 	bl	8009850 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80096ae:	2300      	movs	r3, #0
 80096b0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	885b      	ldrh	r3, [r3, #2]
 80096b6:	b21b      	sxth	r3, r3
 80096b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096bc:	b21a      	sxth	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	029b      	lsls	r3, r3, #10
 80096c4:	b21b      	sxth	r3, r3
 80096c6:	4313      	orrs	r3, r2
 80096c8:	b21b      	sxth	r3, r3
 80096ca:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80096cc:	4b33      	ldr	r3, [pc, #204]	; (800979c <hci_send_req+0x100>)
 80096ce:	2201      	movs	r2, #1
 80096d0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	b2d9      	uxtb	r1, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	8bbb      	ldrh	r3, [r7, #28]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 f890 	bl	8009804 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80096e4:	e04e      	b.n	8009784 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80096e6:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80096ea:	f001 ff48 	bl	800b57e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80096ee:	e043      	b.n	8009778 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80096f0:	f107 030c 	add.w	r3, r7, #12
 80096f4:	4619      	mov	r1, r3
 80096f6:	482a      	ldr	r0, [pc, #168]	; (80097a0 <hci_send_req+0x104>)
 80096f8:	f000 fdff 	bl	800a2fa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	7a5b      	ldrb	r3, [r3, #9]
 8009700:	2b0f      	cmp	r3, #15
 8009702:	d114      	bne.n	800972e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	330b      	adds	r3, #11
 8009708:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	885b      	ldrh	r3, [r3, #2]
 800970e:	b29b      	uxth	r3, r3
 8009710:	8bba      	ldrh	r2, [r7, #28]
 8009712:	429a      	cmp	r2, r3
 8009714:	d104      	bne.n	8009720 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	7812      	ldrb	r2, [r2, #0]
 800971e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	785b      	ldrb	r3, [r3, #1]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d027      	beq.n	8009778 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009728:	2301      	movs	r3, #1
 800972a:	77fb      	strb	r3, [r7, #31]
 800972c:	e024      	b.n	8009778 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	330b      	adds	r3, #11
 8009732:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800973a:	b29b      	uxth	r3, r3
 800973c:	8bba      	ldrh	r2, [r7, #28]
 800973e:	429a      	cmp	r2, r3
 8009740:	d114      	bne.n	800976c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	7a9b      	ldrb	r3, [r3, #10]
 8009746:	3b03      	subs	r3, #3
 8009748:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	695a      	ldr	r2, [r3, #20]
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	429a      	cmp	r2, r3
 8009752:	bfa8      	it	ge
 8009754:	461a      	movge	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6918      	ldr	r0, [r3, #16]
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	1cd9      	adds	r1, r3, #3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	461a      	mov	r2, r3
 8009768:	f003 fbbb 	bl	800cee2 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009774:	2301      	movs	r3, #1
 8009776:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009778:	4809      	ldr	r0, [pc, #36]	; (80097a0 <hci_send_req+0x104>)
 800977a:	f000 fd2f 	bl	800a1dc <LST_is_empty>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d0b5      	beq.n	80096f0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009784:	7ffb      	ldrb	r3, [r7, #31]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0ad      	beq.n	80096e6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800978a:	2001      	movs	r0, #1
 800978c:	f000 f860 	bl	8009850 <NotifyCmdStatus>

  return 0;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3720      	adds	r7, #32
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20000534 	.word	0x20000534
 80097a0:	20000528 	.word	0x20000528

080097a4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80097ac:	480f      	ldr	r0, [pc, #60]	; (80097ec <TlInit+0x48>)
 80097ae:	f000 fd05 	bl	800a1bc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80097b2:	4a0f      	ldr	r2, [pc, #60]	; (80097f0 <TlInit+0x4c>)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80097b8:	480e      	ldr	r0, [pc, #56]	; (80097f4 <TlInit+0x50>)
 80097ba:	f000 fcff 	bl	800a1bc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80097be:	4b0e      	ldr	r3, [pc, #56]	; (80097f8 <TlInit+0x54>)
 80097c0:	2201      	movs	r2, #1
 80097c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80097c4:	4b0d      	ldr	r3, [pc, #52]	; (80097fc <TlInit+0x58>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00a      	beq.n	80097e2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80097d0:	4b0b      	ldr	r3, [pc, #44]	; (8009800 <TlInit+0x5c>)
 80097d2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80097d4:	4b09      	ldr	r3, [pc, #36]	; (80097fc <TlInit+0x58>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f107 0208 	add.w	r2, r7, #8
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
  }

  return;
 80097e0:	bf00      	nop
 80097e2:	bf00      	nop
}
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20000528 	.word	0x20000528
 80097f0:	200000c4 	.word	0x200000c4
 80097f4:	200000bc 	.word	0x200000bc
 80097f8:	200000c8 	.word	0x200000c8
 80097fc:	20000508 	.word	0x20000508
 8009800:	08009891 	.word	0x08009891

08009804 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	603a      	str	r2, [r7, #0]
 800980e:	80fb      	strh	r3, [r7, #6]
 8009810:	460b      	mov	r3, r1
 8009812:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009814:	4b0c      	ldr	r3, [pc, #48]	; (8009848 <SendCmd+0x44>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	88fa      	ldrh	r2, [r7, #6]
 800981a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800981e:	4b0a      	ldr	r3, [pc, #40]	; (8009848 <SendCmd+0x44>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	797a      	ldrb	r2, [r7, #5]
 8009824:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009826:	4b08      	ldr	r3, [pc, #32]	; (8009848 <SendCmd+0x44>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	330c      	adds	r3, #12
 800982c:	797a      	ldrb	r2, [r7, #5]
 800982e:	6839      	ldr	r1, [r7, #0]
 8009830:	4618      	mov	r0, r3
 8009832:	f003 fb56 	bl	800cee2 <memcpy>

  hciContext.io.Send(0,0);
 8009836:	4b05      	ldr	r3, [pc, #20]	; (800984c <SendCmd+0x48>)
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	2100      	movs	r1, #0
 800983c:	2000      	movs	r0, #0
 800983e:	4798      	blx	r3

  return;
 8009840:	bf00      	nop
}
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	200000c4 	.word	0x200000c4
 800984c:	20000508 	.word	0x20000508

08009850 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800985a:	79fb      	ldrb	r3, [r7, #7]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d108      	bne.n	8009872 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009860:	4b0a      	ldr	r3, [pc, #40]	; (800988c <NotifyCmdStatus+0x3c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00d      	beq.n	8009884 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009868:	4b08      	ldr	r3, [pc, #32]	; (800988c <NotifyCmdStatus+0x3c>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2000      	movs	r0, #0
 800986e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009870:	e008      	b.n	8009884 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009872:	4b06      	ldr	r3, [pc, #24]	; (800988c <NotifyCmdStatus+0x3c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d004      	beq.n	8009884 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800987a:	4b04      	ldr	r3, [pc, #16]	; (800988c <NotifyCmdStatus+0x3c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2001      	movs	r0, #1
 8009880:	4798      	blx	r3
  return;
 8009882:	bf00      	nop
 8009884:	bf00      	nop
}
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20000530 	.word	0x20000530

08009890 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	7a5b      	ldrb	r3, [r3, #9]
 800989c:	2b0f      	cmp	r3, #15
 800989e:	d003      	beq.n	80098a8 <TlEvtReceived+0x18>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	7a5b      	ldrb	r3, [r3, #9]
 80098a4:	2b0e      	cmp	r3, #14
 80098a6:	d107      	bne.n	80098b8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80098a8:	6879      	ldr	r1, [r7, #4]
 80098aa:	4809      	ldr	r0, [pc, #36]	; (80098d0 <TlEvtReceived+0x40>)
 80098ac:	f000 fcde 	bl	800a26c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80098b0:	2000      	movs	r0, #0
 80098b2:	f001 fe59 	bl	800b568 <hci_cmd_resp_release>
 80098b6:	e006      	b.n	80098c6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4806      	ldr	r0, [pc, #24]	; (80098d4 <TlEvtReceived+0x44>)
 80098bc:	f000 fcd6 	bl	800a26c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80098c0:	4804      	ldr	r0, [pc, #16]	; (80098d4 <TlEvtReceived+0x44>)
 80098c2:	f001 fe45 	bl	800b550 <hci_notify_asynch_evt>
  }

  return;
 80098c6:	bf00      	nop
}
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20000528 	.word	0x20000528
 80098d4:	200000bc 	.word	0x200000bc

080098d8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a05      	ldr	r2, [pc, #20]	; (80098f8 <hci_register_io_bus+0x20>)
 80098e4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a04      	ldr	r2, [pc, #16]	; (80098fc <hci_register_io_bus+0x24>)
 80098ea:	611a      	str	r2, [r3, #16]

  return;
 80098ec:	bf00      	nop
}
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	08009bf1 	.word	0x08009bf1
 80098fc:	08009c59 	.word	0x08009c59

08009900 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	4a08      	ldr	r2, [pc, #32]	; (8009930 <shci_init+0x30>)
 8009910:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009912:	4a08      	ldr	r2, [pc, #32]	; (8009934 <shci_init+0x34>)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009918:	4806      	ldr	r0, [pc, #24]	; (8009934 <shci_init+0x34>)
 800991a:	f000 f915 	bl	8009b48 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4618      	mov	r0, r3
 8009924:	f000 f898 	bl	8009a58 <TlInit>

  return;
 8009928:	bf00      	nop
}
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	20000558 	.word	0x20000558
 8009934:	20000538 	.word	0x20000538

08009938 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800993e:	4822      	ldr	r0, [pc, #136]	; (80099c8 <shci_user_evt_proc+0x90>)
 8009940:	f000 fc4c 	bl	800a1dc <LST_is_empty>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d12b      	bne.n	80099a2 <shci_user_evt_proc+0x6a>
 800994a:	4b20      	ldr	r3, [pc, #128]	; (80099cc <shci_user_evt_proc+0x94>)
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d027      	beq.n	80099a2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009952:	f107 030c 	add.w	r3, r7, #12
 8009956:	4619      	mov	r1, r3
 8009958:	481b      	ldr	r0, [pc, #108]	; (80099c8 <shci_user_evt_proc+0x90>)
 800995a:	f000 fcce 	bl	800a2fa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800995e:	4b1c      	ldr	r3, [pc, #112]	; (80099d0 <shci_user_evt_proc+0x98>)
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00c      	beq.n	8009980 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800996a:	2301      	movs	r3, #1
 800996c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800996e:	4b18      	ldr	r3, [pc, #96]	; (80099d0 <shci_user_evt_proc+0x98>)
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	1d3a      	adds	r2, r7, #4
 8009974:	4610      	mov	r0, r2
 8009976:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009978:	793a      	ldrb	r2, [r7, #4]
 800997a:	4b14      	ldr	r3, [pc, #80]	; (80099cc <shci_user_evt_proc+0x94>)
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	e002      	b.n	8009986 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009980:	4b12      	ldr	r3, [pc, #72]	; (80099cc <shci_user_evt_proc+0x94>)
 8009982:	2201      	movs	r2, #1
 8009984:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009986:	4b11      	ldr	r3, [pc, #68]	; (80099cc <shci_user_evt_proc+0x94>)
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d004      	beq.n	8009998 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fa71 	bl	8009e78 <TL_MM_EvtDone>
 8009996:	e004      	b.n	80099a2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4619      	mov	r1, r3
 800999c:	480a      	ldr	r0, [pc, #40]	; (80099c8 <shci_user_evt_proc+0x90>)
 800999e:	f000 fc3f 	bl	800a220 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80099a2:	4809      	ldr	r0, [pc, #36]	; (80099c8 <shci_user_evt_proc+0x90>)
 80099a4:	f000 fc1a 	bl	800a1dc <LST_is_empty>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d107      	bne.n	80099be <shci_user_evt_proc+0x86>
 80099ae:	4b07      	ldr	r3, [pc, #28]	; (80099cc <shci_user_evt_proc+0x94>)
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80099b6:	4804      	ldr	r0, [pc, #16]	; (80099c8 <shci_user_evt_proc+0x90>)
 80099b8:	f7f7 fae7 	bl	8000f8a <shci_notify_asynch_evt>
  }


  return;
 80099bc:	bf00      	nop
 80099be:	bf00      	nop
}
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	200000cc 	.word	0x200000cc
 80099cc:	200000dc 	.word	0x200000dc
 80099d0:	20000538 	.word	0x20000538

080099d4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60ba      	str	r2, [r7, #8]
 80099dc:	607b      	str	r3, [r7, #4]
 80099de:	4603      	mov	r3, r0
 80099e0:	81fb      	strh	r3, [r7, #14]
 80099e2:	460b      	mov	r3, r1
 80099e4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80099e6:	2000      	movs	r0, #0
 80099e8:	f000 f868 	bl	8009abc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80099ec:	4b17      	ldr	r3, [pc, #92]	; (8009a4c <shci_send+0x78>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	89fa      	ldrh	r2, [r7, #14]
 80099f2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80099f6:	4b15      	ldr	r3, [pc, #84]	; (8009a4c <shci_send+0x78>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	7b7a      	ldrb	r2, [r7, #13]
 80099fc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80099fe:	4b13      	ldr	r3, [pc, #76]	; (8009a4c <shci_send+0x78>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	330c      	adds	r3, #12
 8009a04:	7b7a      	ldrb	r2, [r7, #13]
 8009a06:	68b9      	ldr	r1, [r7, #8]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f003 fa6a 	bl	800cee2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8009a0e:	4b10      	ldr	r3, [pc, #64]	; (8009a50 <shci_send+0x7c>)
 8009a10:	2201      	movs	r2, #1
 8009a12:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8009a14:	4b0f      	ldr	r3, [pc, #60]	; (8009a54 <shci_send+0x80>)
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	2100      	movs	r1, #0
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009a1e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009a22:	f7f7 faca 	bl	8000fba <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f103 0008 	add.w	r0, r3, #8
 8009a2c:	4b07      	ldr	r3, [pc, #28]	; (8009a4c <shci_send+0x78>)
 8009a2e:	6819      	ldr	r1, [r3, #0]
 8009a30:	4b06      	ldr	r3, [pc, #24]	; (8009a4c <shci_send+0x78>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	789b      	ldrb	r3, [r3, #2]
 8009a36:	3303      	adds	r3, #3
 8009a38:	461a      	mov	r2, r3
 8009a3a:	f003 fa52 	bl	800cee2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009a3e:	2001      	movs	r0, #1
 8009a40:	f000 f83c 	bl	8009abc <Cmd_SetStatus>

  return;
 8009a44:	bf00      	nop
}
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	200000d8 	.word	0x200000d8
 8009a50:	2000055c 	.word	0x2000055c
 8009a54:	20000538 	.word	0x20000538

08009a58 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009a60:	4a10      	ldr	r2, [pc, #64]	; (8009aa4 <TlInit+0x4c>)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009a66:	4810      	ldr	r0, [pc, #64]	; (8009aa8 <TlInit+0x50>)
 8009a68:	f000 fba8 	bl	800a1bc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009a6c:	2001      	movs	r0, #1
 8009a6e:	f000 f825 	bl	8009abc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009a72:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <TlInit+0x54>)
 8009a74:	2201      	movs	r2, #1
 8009a76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009a78:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <TlInit+0x58>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00c      	beq.n	8009a9a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009a84:	4b0b      	ldr	r3, [pc, #44]	; (8009ab4 <TlInit+0x5c>)
 8009a86:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009a88:	4b0b      	ldr	r3, [pc, #44]	; (8009ab8 <TlInit+0x60>)
 8009a8a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009a8c:	4b08      	ldr	r3, [pc, #32]	; (8009ab0 <TlInit+0x58>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f107 020c 	add.w	r2, r7, #12
 8009a94:	4610      	mov	r0, r2
 8009a96:	4798      	blx	r3
  }

  return;
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
}
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	200000d8 	.word	0x200000d8
 8009aa8:	200000cc 	.word	0x200000cc
 8009aac:	200000dc 	.word	0x200000dc
 8009ab0:	20000538 	.word	0x20000538
 8009ab4:	08009b0d 	.word	0x08009b0d
 8009ab8:	08009b25 	.word	0x08009b25

08009abc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8009ac6:	79fb      	ldrb	r3, [r7, #7]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10b      	bne.n	8009ae4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009acc:	4b0d      	ldr	r3, [pc, #52]	; (8009b04 <Cmd_SetStatus+0x48>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d003      	beq.n	8009adc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8009ad4:	4b0b      	ldr	r3, [pc, #44]	; (8009b04 <Cmd_SetStatus+0x48>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2000      	movs	r0, #0
 8009ada:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009adc:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <Cmd_SetStatus+0x4c>)
 8009ade:	2200      	movs	r2, #0
 8009ae0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8009ae2:	e00b      	b.n	8009afc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8009ae4:	4b08      	ldr	r3, [pc, #32]	; (8009b08 <Cmd_SetStatus+0x4c>)
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009aea:	4b06      	ldr	r3, [pc, #24]	; (8009b04 <Cmd_SetStatus+0x48>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d004      	beq.n	8009afc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009af2:	4b04      	ldr	r3, [pc, #16]	; (8009b04 <Cmd_SetStatus+0x48>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2001      	movs	r0, #1
 8009af8:	4798      	blx	r3
  return;
 8009afa:	bf00      	nop
 8009afc:	bf00      	nop
}
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	20000558 	.word	0x20000558
 8009b08:	200000d4 	.word	0x200000d4

08009b0c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009b14:	2000      	movs	r0, #0
 8009b16:	f7f7 fa45 	bl	8000fa4 <shci_cmd_resp_release>

  return;
 8009b1a:	bf00      	nop
}
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	4805      	ldr	r0, [pc, #20]	; (8009b44 <TlUserEvtReceived+0x20>)
 8009b30:	f000 fb9c 	bl	800a26c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009b34:	4803      	ldr	r0, [pc, #12]	; (8009b44 <TlUserEvtReceived+0x20>)
 8009b36:	f7f7 fa28 	bl	8000f8a <shci_notify_asynch_evt>

  return;
 8009b3a:	bf00      	nop
}
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	200000cc 	.word	0x200000cc

08009b48 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a05      	ldr	r2, [pc, #20]	; (8009b68 <shci_register_io_bus+0x20>)
 8009b54:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a04      	ldr	r2, [pc, #16]	; (8009b6c <shci_register_io_bus+0x24>)
 8009b5a:	611a      	str	r2, [r3, #16]

  return;
 8009b5c:	bf00      	nop
}
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr
 8009b68:	08009d05 	.word	0x08009d05
 8009b6c:	08009d59 	.word	0x08009d59

08009b70 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009b74:	f002 fbde 	bl	800c334 <HW_IPCC_Enable>

  return;
 8009b78:	bf00      	nop
}
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <TL_Init>:


void TL_Init( void )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009b80:	4b10      	ldr	r3, [pc, #64]	; (8009bc4 <TL_Init+0x48>)
 8009b82:	4a11      	ldr	r2, [pc, #68]	; (8009bc8 <TL_Init+0x4c>)
 8009b84:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009b86:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <TL_Init+0x48>)
 8009b88:	4a10      	ldr	r2, [pc, #64]	; (8009bcc <TL_Init+0x50>)
 8009b8a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009b8c:	4b0d      	ldr	r3, [pc, #52]	; (8009bc4 <TL_Init+0x48>)
 8009b8e:	4a10      	ldr	r2, [pc, #64]	; (8009bd0 <TL_Init+0x54>)
 8009b90:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009b92:	4b0c      	ldr	r3, [pc, #48]	; (8009bc4 <TL_Init+0x48>)
 8009b94:	4a0f      	ldr	r2, [pc, #60]	; (8009bd4 <TL_Init+0x58>)
 8009b96:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <TL_Init+0x48>)
 8009b9a:	4a0f      	ldr	r2, [pc, #60]	; (8009bd8 <TL_Init+0x5c>)
 8009b9c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <TL_Init+0x48>)
 8009ba0:	4a0e      	ldr	r2, [pc, #56]	; (8009bdc <TL_Init+0x60>)
 8009ba2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009ba4:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <TL_Init+0x48>)
 8009ba6:	4a0e      	ldr	r2, [pc, #56]	; (8009be0 <TL_Init+0x64>)
 8009ba8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009baa:	4b06      	ldr	r3, [pc, #24]	; (8009bc4 <TL_Init+0x48>)
 8009bac:	4a0d      	ldr	r2, [pc, #52]	; (8009be4 <TL_Init+0x68>)
 8009bae:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009bb0:	4b04      	ldr	r3, [pc, #16]	; (8009bc4 <TL_Init+0x48>)
 8009bb2:	4a0d      	ldr	r2, [pc, #52]	; (8009be8 <TL_Init+0x6c>)
 8009bb4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009bb6:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <TL_Init+0x48>)
 8009bb8:	4a0c      	ldr	r2, [pc, #48]	; (8009bec <TL_Init+0x70>)
 8009bba:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009bbc:	f002 fbce 	bl	800c35c <HW_IPCC_Init>

  return;
 8009bc0:	bf00      	nop
}
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20030000 	.word	0x20030000
 8009bc8:	20030028 	.word	0x20030028
 8009bcc:	20030048 	.word	0x20030048
 8009bd0:	20030058 	.word	0x20030058
 8009bd4:	20030068 	.word	0x20030068
 8009bd8:	20030070 	.word	0x20030070
 8009bdc:	20030078 	.word	0x20030078
 8009be0:	20030080 	.word	0x20030080
 8009be4:	2003009c 	.word	0x2003009c
 8009be8:	200300a0 	.word	0x200300a0
 8009bec:	200300ac 	.word	0x200300ac

08009bf0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009bfc:	4811      	ldr	r0, [pc, #68]	; (8009c44 <TL_BLE_Init+0x54>)
 8009bfe:	f000 fadd 	bl	800a1bc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009c02:	4b11      	ldr	r3, [pc, #68]	; (8009c48 <TL_BLE_Init+0x58>)
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	68da      	ldr	r2, [r3, #12]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	4a0c      	ldr	r2, [pc, #48]	; (8009c4c <TL_BLE_Init+0x5c>)
 8009c1c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	4a08      	ldr	r2, [pc, #32]	; (8009c44 <TL_BLE_Init+0x54>)
 8009c22:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009c24:	f002 fbb0 	bl	800c388 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a08      	ldr	r2, [pc, #32]	; (8009c50 <TL_BLE_Init+0x60>)
 8009c2e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	4a07      	ldr	r2, [pc, #28]	; (8009c54 <TL_BLE_Init+0x64>)
 8009c36:	6013      	str	r3, [r2, #0]

  return 0;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	200300c8 	.word	0x200300c8
 8009c48:	20030000 	.word	0x20030000
 8009c4c:	20030a58 	.word	0x20030a58
 8009c50:	20000568 	.word	0x20000568
 8009c54:	2000056c 	.word	0x2000056c

08009c58 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009c64:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <TL_BLE_SendCmd+0x34>)
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009c6e:	4b07      	ldr	r3, [pc, #28]	; (8009c8c <TL_BLE_SendCmd+0x34>)
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4619      	mov	r1, r3
 8009c76:	2001      	movs	r0, #1
 8009c78:	f000 f96c 	bl	8009f54 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009c7c:	f002 fb8e 	bl	800c39c <HW_IPCC_BLE_SendCmd>

  return 0;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20030000 	.word	0x20030000

08009c90 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009c96:	e01c      	b.n	8009cd2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009c98:	1d3b      	adds	r3, r7, #4
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4812      	ldr	r0, [pc, #72]	; (8009ce8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009c9e:	f000 fb2c 	bl	800a2fa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	7a5b      	ldrb	r3, [r3, #9]
 8009ca6:	2b0f      	cmp	r3, #15
 8009ca8:	d003      	beq.n	8009cb2 <HW_IPCC_BLE_RxEvtNot+0x22>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	7a5b      	ldrb	r3, [r3, #9]
 8009cae:	2b0e      	cmp	r3, #14
 8009cb0:	d105      	bne.n	8009cbe <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	2002      	movs	r0, #2
 8009cb8:	f000 f94c 	bl	8009f54 <OutputDbgTrace>
 8009cbc:	e004      	b.n	8009cc8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	2003      	movs	r0, #3
 8009cc4:	f000 f946 	bl	8009f54 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009cc8:	4b08      	ldr	r3, [pc, #32]	; (8009cec <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	4610      	mov	r0, r2
 8009cd0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009cd2:	4805      	ldr	r0, [pc, #20]	; (8009ce8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009cd4:	f000 fa82 	bl	800a1dc <LST_is_empty>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d0dc      	beq.n	8009c98 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009cde:	bf00      	nop
}
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	200300c8 	.word	0x200300c8
 8009cec:	20000568 	.word	0x20000568

08009cf0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009cf4:	4b02      	ldr	r3, [pc, #8]	; (8009d00 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4798      	blx	r3

  return;
 8009cfa:	bf00      	nop
}
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	2000056c 	.word	0x2000056c

08009d04 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009d10:	480d      	ldr	r0, [pc, #52]	; (8009d48 <TL_SYS_Init+0x44>)
 8009d12:	f000 fa53 	bl	800a1bc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009d16:	4b0d      	ldr	r3, [pc, #52]	; (8009d4c <TL_SYS_Init+0x48>)
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	4a08      	ldr	r2, [pc, #32]	; (8009d48 <TL_SYS_Init+0x44>)
 8009d28:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009d2a:	f002 fb59 	bl	800c3e0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a07      	ldr	r2, [pc, #28]	; (8009d50 <TL_SYS_Init+0x4c>)
 8009d34:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	4a06      	ldr	r2, [pc, #24]	; (8009d54 <TL_SYS_Init+0x50>)
 8009d3c:	6013      	str	r3, [r2, #0]

  return 0;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	200300d0 	.word	0x200300d0
 8009d4c:	20030000 	.word	0x20030000
 8009d50:	20000570 	.word	0x20000570
 8009d54:	20000574 	.word	0x20000574

08009d58 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009d64:	4b09      	ldr	r3, [pc, #36]	; (8009d8c <TL_SYS_SendCmd+0x34>)
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2210      	movs	r2, #16
 8009d6c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009d6e:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <TL_SYS_SendCmd+0x34>)
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4619      	mov	r1, r3
 8009d76:	2004      	movs	r0, #4
 8009d78:	f000 f8ec 	bl	8009f54 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009d7c:	f002 fb3a 	bl	800c3f4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20030000 	.word	0x20030000

08009d90 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009d94:	4b07      	ldr	r3, [pc, #28]	; (8009db4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	2005      	movs	r0, #5
 8009d9e:	f000 f8d9 	bl	8009f54 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009da2:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a03      	ldr	r2, [pc, #12]	; (8009db4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009da8:	68d2      	ldr	r2, [r2, #12]
 8009daa:	6812      	ldr	r2, [r2, #0]
 8009dac:	4610      	mov	r0, r2
 8009dae:	4798      	blx	r3

  return;
 8009db0:	bf00      	nop
}
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	20030000 	.word	0x20030000
 8009db8:	20000570 	.word	0x20000570

08009dbc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009dc2:	e00e      	b.n	8009de2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009dc4:	1d3b      	adds	r3, r7, #4
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	480b      	ldr	r0, [pc, #44]	; (8009df8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009dca:	f000 fa96 	bl	800a2fa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	2006      	movs	r0, #6
 8009dd4:	f000 f8be 	bl	8009f54 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009dd8:	4b08      	ldr	r3, [pc, #32]	; (8009dfc <HW_IPCC_SYS_EvtNot+0x40>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	4610      	mov	r0, r2
 8009de0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009de2:	4805      	ldr	r0, [pc, #20]	; (8009df8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009de4:	f000 f9fa 	bl	800a1dc <LST_is_empty>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0ea      	beq.n	8009dc4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009dee:	bf00      	nop
}
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	200300d0 	.word	0x200300d0
 8009dfc:	20000574 	.word	0x20000574

08009e00 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009e08:	4817      	ldr	r0, [pc, #92]	; (8009e68 <TL_MM_Init+0x68>)
 8009e0a:	f000 f9d7 	bl	800a1bc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009e0e:	4817      	ldr	r0, [pc, #92]	; (8009e6c <TL_MM_Init+0x6c>)
 8009e10:	f000 f9d4 	bl	800a1bc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009e14:	4b16      	ldr	r3, [pc, #88]	; (8009e70 <TL_MM_Init+0x70>)
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	4a16      	ldr	r2, [pc, #88]	; (8009e74 <TL_MM_Init+0x74>)
 8009e1a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009e1c:	4b15      	ldr	r3, [pc, #84]	; (8009e74 <TL_MM_Init+0x74>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	6892      	ldr	r2, [r2, #8]
 8009e24:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009e26:	4b13      	ldr	r3, [pc, #76]	; (8009e74 <TL_MM_Init+0x74>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	68d2      	ldr	r2, [r2, #12]
 8009e2e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009e30:	4b10      	ldr	r3, [pc, #64]	; (8009e74 <TL_MM_Init+0x74>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a0c      	ldr	r2, [pc, #48]	; (8009e68 <TL_MM_Init+0x68>)
 8009e36:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009e38:	4b0e      	ldr	r3, [pc, #56]	; (8009e74 <TL_MM_Init+0x74>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	6812      	ldr	r2, [r2, #0]
 8009e40:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009e42:	4b0c      	ldr	r3, [pc, #48]	; (8009e74 <TL_MM_Init+0x74>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	6852      	ldr	r2, [r2, #4]
 8009e4a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009e4c:	4b09      	ldr	r3, [pc, #36]	; (8009e74 <TL_MM_Init+0x74>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	6912      	ldr	r2, [r2, #16]
 8009e54:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009e56:	4b07      	ldr	r3, [pc, #28]	; (8009e74 <TL_MM_Init+0x74>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	6952      	ldr	r2, [r2, #20]
 8009e5e:	619a      	str	r2, [r3, #24]

  return;
 8009e60:	bf00      	nop
}
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	200300b8 	.word	0x200300b8
 8009e6c:	20000560 	.word	0x20000560
 8009e70:	20030000 	.word	0x20030000
 8009e74:	20000578 	.word	0x20000578

08009e78 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	4807      	ldr	r0, [pc, #28]	; (8009ea0 <TL_MM_EvtDone+0x28>)
 8009e84:	f000 f9f2 	bl	800a26c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	f000 f862 	bl	8009f54 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009e90:	4804      	ldr	r0, [pc, #16]	; (8009ea4 <TL_MM_EvtDone+0x2c>)
 8009e92:	f002 fad5 	bl	800c440 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009e96:	bf00      	nop
}
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20000560 	.word	0x20000560
 8009ea4:	08009ea9 	.word	0x08009ea9

08009ea8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009eae:	e00c      	b.n	8009eca <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009eb0:	1d3b      	adds	r3, r7, #4
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	480a      	ldr	r0, [pc, #40]	; (8009ee0 <SendFreeBuf+0x38>)
 8009eb6:	f000 fa20 	bl	800a2fa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009eba:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <SendFreeBuf+0x3c>)
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 f9d1 	bl	800a26c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009eca:	4805      	ldr	r0, [pc, #20]	; (8009ee0 <SendFreeBuf+0x38>)
 8009ecc:	f000 f986 	bl	800a1dc <LST_is_empty>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d0ec      	beq.n	8009eb0 <SendFreeBuf+0x8>
  }

  return;
 8009ed6:	bf00      	nop
}
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20000560 	.word	0x20000560
 8009ee4:	20030000 	.word	0x20030000

08009ee8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009eec:	4805      	ldr	r0, [pc, #20]	; (8009f04 <TL_TRACES_Init+0x1c>)
 8009eee:	f000 f965 	bl	800a1bc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009ef2:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <TL_TRACES_Init+0x20>)
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	4a03      	ldr	r2, [pc, #12]	; (8009f04 <TL_TRACES_Init+0x1c>)
 8009ef8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009efa:	f002 fad7 	bl	800c4ac <HW_IPCC_TRACES_Init>

  return;
 8009efe:	bf00      	nop
}
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	200300c0 	.word	0x200300c0
 8009f08:	20030000 	.word	0x20030000

08009f0c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009f12:	e008      	b.n	8009f26 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009f14:	1d3b      	adds	r3, r7, #4
 8009f16:	4619      	mov	r1, r3
 8009f18:	4808      	ldr	r0, [pc, #32]	; (8009f3c <HW_IPCC_TRACES_EvtNot+0x30>)
 8009f1a:	f000 f9ee 	bl	800a2fa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 f80d 	bl	8009f40 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009f26:	4805      	ldr	r0, [pc, #20]	; (8009f3c <HW_IPCC_TRACES_EvtNot+0x30>)
 8009f28:	f000 f958 	bl	800a1dc <LST_is_empty>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d0f0      	beq.n	8009f14 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009f32:	bf00      	nop
}
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	200300c0 	.word	0x200300c0

08009f40 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	6039      	str	r1, [r7, #0]
 8009f5e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	2b06      	cmp	r3, #6
 8009f64:	d845      	bhi.n	8009ff2 <OutputDbgTrace+0x9e>
 8009f66:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <OutputDbgTrace+0x18>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	08009f89 	.word	0x08009f89
 8009f70:	08009fad 	.word	0x08009fad
 8009f74:	08009fb3 	.word	0x08009fb3
 8009f78:	08009fc7 	.word	0x08009fc7
 8009f7c:	08009fd3 	.word	0x08009fd3
 8009f80:	08009fd9 	.word	0x08009fd9
 8009f84:	08009fe7 	.word	0x08009fe7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	7a5b      	ldrb	r3, [r3, #9]
 8009f90:	2bff      	cmp	r3, #255	; 0xff
 8009f92:	d005      	beq.n	8009fa0 <OutputDbgTrace+0x4c>
 8009f94:	2bff      	cmp	r3, #255	; 0xff
 8009f96:	dc05      	bgt.n	8009fa4 <OutputDbgTrace+0x50>
 8009f98:	2b0e      	cmp	r3, #14
 8009f9a:	d005      	beq.n	8009fa8 <OutputDbgTrace+0x54>
 8009f9c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009f9e:	e001      	b.n	8009fa4 <OutputDbgTrace+0x50>
          break;
 8009fa0:	bf00      	nop
 8009fa2:	e027      	b.n	8009ff4 <OutputDbgTrace+0xa0>
          break;
 8009fa4:	bf00      	nop
 8009fa6:	e025      	b.n	8009ff4 <OutputDbgTrace+0xa0>
          break;
 8009fa8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009faa:	e023      	b.n	8009ff4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009fb0:	e020      	b.n	8009ff4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	7a5b      	ldrb	r3, [r3, #9]
 8009fba:	2b0e      	cmp	r3, #14
 8009fbc:	d001      	beq.n	8009fc2 <OutputDbgTrace+0x6e>
 8009fbe:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009fc0:	e000      	b.n	8009fc4 <OutputDbgTrace+0x70>
          break;
 8009fc2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fc4:	e016      	b.n	8009ff4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	7a5b      	ldrb	r3, [r3, #9]
 8009fce:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fd0:	e010      	b.n	8009ff4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009fd6:	e00d      	b.n	8009ff4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	7a5b      	ldrb	r3, [r3, #9]
 8009fe0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009fe2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009fe4:	e006      	b.n	8009ff4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	7a5b      	ldrb	r3, [r3, #9]
 8009fee:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009ff0:	e000      	b.n	8009ff4 <OutputDbgTrace+0xa0>

    default:
      break;
 8009ff2:	bf00      	nop
  }

  return;
 8009ff4:	bf00      	nop
}
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a006:	f3ef 8310 	mrs	r3, PRIMASK
 800a00a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a00c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a00e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a010:	b672      	cpsid	i
}
 800a012:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a014:	1cbb      	adds	r3, r7, #2
 800a016:	4619      	mov	r1, r3
 800a018:	4812      	ldr	r0, [pc, #72]	; (800a064 <DbgTrace_TxCpltCallback+0x64>)
 800a01a:	f000 fbe6 	bl	800a7ea <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a01e:	1cbb      	adds	r3, r7, #2
 800a020:	4619      	mov	r1, r3
 800a022:	4810      	ldr	r0, [pc, #64]	; (800a064 <DbgTrace_TxCpltCallback+0x64>)
 800a024:	f000 fcd2 	bl	800a9cc <CircularQueue_Sense>
 800a028:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00c      	beq.n	800a04a <DbgTrace_TxCpltCallback+0x4a>
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	f383 8810 	msr	PRIMASK, r3
}
 800a03a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a03c:	887b      	ldrh	r3, [r7, #2]
 800a03e:	4a0a      	ldr	r2, [pc, #40]	; (800a068 <DbgTrace_TxCpltCallback+0x68>)
 800a040:	4619      	mov	r1, r3
 800a042:	6938      	ldr	r0, [r7, #16]
 800a044:	f7f6 fba9 	bl	800079a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a048:	e008      	b.n	800a05c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800a04a:	4b08      	ldr	r3, [pc, #32]	; (800a06c <DbgTrace_TxCpltCallback+0x6c>)
 800a04c:	2201      	movs	r2, #1
 800a04e:	701a      	strb	r2, [r3, #0]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f383 8810 	msr	PRIMASK, r3
}
 800a05a:	bf00      	nop
}
 800a05c:	bf00      	nop
 800a05e:	3718      	adds	r7, #24
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	2000057c 	.word	0x2000057c
 800a068:	0800a001 	.word	0x0800a001
 800a06c:	20000029 	.word	0x20000029

0800a070 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a076:	f7f6 fb8a 	bl	800078e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a07a:	2302      	movs	r3, #2
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	2300      	movs	r3, #0
 800a080:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a084:	4903      	ldr	r1, [pc, #12]	; (800a094 <DbgTraceInit+0x24>)
 800a086:	4804      	ldr	r0, [pc, #16]	; (800a098 <DbgTraceInit+0x28>)
 800a088:	f000 f956 	bl	800a338 <CircularQueue_Init>
#endif 
#endif
  return;
 800a08c:	bf00      	nop
}
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	2000059c 	.word	0x2000059c
 800a098:	2000057c 	.word	0x2000057c

0800a09c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	68b9      	ldr	r1, [r7, #8]
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 f805 	bl	800a0bc <DbgTraceWrite>
 800a0b2:	4603      	mov	r3, r0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b08a      	sub	sp, #40	; 0x28
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a0d0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a0d2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800a0d4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0dc:	d102      	bne.n	800a0e4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0e2:	e037      	b.n	800a154 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d006      	beq.n	800a0f8 <DbgTraceWrite+0x3c>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d003      	beq.n	800a0f8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800a0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0f6:	e02d      	b.n	800a154 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d02a      	beq.n	800a154 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800a102:	b672      	cpsid	i
}
 800a104:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	b29a      	uxth	r2, r3
 800a10a:	2301      	movs	r3, #1
 800a10c:	68b9      	ldr	r1, [r7, #8]
 800a10e:	4814      	ldr	r0, [pc, #80]	; (800a160 <DbgTraceWrite+0xa4>)
 800a110:	f000 f944 	bl	800a39c <CircularQueue_Add>
 800a114:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d015      	beq.n	800a148 <DbgTraceWrite+0x8c>
 800a11c:	4b11      	ldr	r3, [pc, #68]	; (800a164 <DbgTraceWrite+0xa8>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b00      	cmp	r3, #0
 800a124:	d010      	beq.n	800a148 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800a126:	4b0f      	ldr	r3, [pc, #60]	; (800a164 <DbgTraceWrite+0xa8>)
 800a128:	2200      	movs	r2, #0
 800a12a:	701a      	strb	r2, [r3, #0]
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	f383 8810 	msr	PRIMASK, r3
}
 800a136:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	4a0a      	ldr	r2, [pc, #40]	; (800a168 <DbgTraceWrite+0xac>)
 800a13e:	4619      	mov	r1, r3
 800a140:	69f8      	ldr	r0, [r7, #28]
 800a142:	f7f6 fb2a 	bl	800079a <DbgOutputTraces>
 800a146:	e005      	b.n	800a154 <DbgTraceWrite+0x98>
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f383 8810 	msr	PRIMASK, r3
}
 800a152:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a156:	4618      	mov	r0, r3
 800a158:	3728      	adds	r7, #40	; 0x28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	2000057c 	.word	0x2000057c
 800a164:	20000029 	.word	0x20000029
 800a168:	0800a001 	.word	0x0800a001

0800a16c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a176:	4b0f      	ldr	r3, [pc, #60]	; (800a1b4 <OTP_Read+0x48>)
 800a178:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a17a:	e002      	b.n	800a182 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	3b08      	subs	r3, #8
 800a180:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	3307      	adds	r3, #7
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	79fa      	ldrb	r2, [r7, #7]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d003      	beq.n	800a196 <OTP_Read+0x2a>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	4a09      	ldr	r2, [pc, #36]	; (800a1b8 <OTP_Read+0x4c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d1f2      	bne.n	800a17c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	3307      	adds	r3, #7
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	79fa      	ldrb	r2, [r7, #7]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d001      	beq.n	800a1a6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	1fff73f8 	.word	0x1fff73f8
 800a1b8:	1fff7000 	.word	0x1fff7000

0800a1bc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	605a      	str	r2, [r3, #4]
}
 800a1d0:	bf00      	nop
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b087      	sub	sp, #28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1e4:	f3ef 8310 	mrs	r3, PRIMASK
 800a1e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1ee:	b672      	cpsid	i
}
 800a1f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d102      	bne.n	800a202 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	75fb      	strb	r3, [r7, #23]
 800a200:	e001      	b.n	800a206 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a202:	2300      	movs	r3, #0
 800a204:	75fb      	strb	r3, [r7, #23]
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	f383 8810 	msr	PRIMASK, r3
}
 800a210:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a212:	7dfb      	ldrb	r3, [r7, #23]
}
 800a214:	4618      	mov	r0, r3
 800a216:	371c      	adds	r7, #28
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a22a:	f3ef 8310 	mrs	r3, PRIMASK
 800a22e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a230:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a232:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a234:	b672      	cpsid	i
}
 800a236:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	605a      	str	r2, [r3, #4]
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	f383 8810 	msr	PRIMASK, r3
}
 800a25e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a260:	bf00      	nop
 800a262:	371c      	adds	r7, #28
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b087      	sub	sp, #28
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a276:	f3ef 8310 	mrs	r3, PRIMASK
 800a27a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a27c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a27e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a280:	b672      	cpsid	i
}
 800a282:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	f383 8810 	msr	PRIMASK, r3
}
 800a2aa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a2ac:	bf00      	nop
 800a2ae:	371c      	adds	r7, #28
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a2c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2ca:	b672      	cpsid	i
}
 800a2cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	6812      	ldr	r2, [r2, #0]
 800a2d6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	6852      	ldr	r2, [r2, #4]
 800a2e0:	605a      	str	r2, [r3, #4]
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	f383 8810 	msr	PRIMASK, r3
}
 800a2ec:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a2ee:	bf00      	nop
 800a2f0:	371c      	adds	r7, #28
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b086      	sub	sp, #24
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a304:	f3ef 8310 	mrs	r3, PRIMASK
 800a308:	60fb      	str	r3, [r7, #12]
  return(result);
 800a30a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a30c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a30e:	b672      	cpsid	i
}
 800a310:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff ffca 	bl	800a2b8 <LST_remove_node>
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f383 8810 	msr	PRIMASK, r3
}
 800a32e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a330:	bf00      	nop
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	607a      	str	r2, [r7, #4]
 800a344:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	68ba      	ldr	r2, [r7, #8]
 800a34a:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	887a      	ldrh	r2, [r7, #2]
 800a36e:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	7e3a      	ldrb	r2, [r7, #24]
 800a374:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a376:	7e3b      	ldrb	r3, [r7, #24]
 800a378:	f003 0302 	and.w	r3, r3, #2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d006      	beq.n	800a38e <CircularQueue_Init+0x56>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	891b      	ldrh	r3, [r3, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a388:	f04f 33ff 	mov.w	r3, #4294967295
 800a38c:	e000      	b.n	800a390 <CircularQueue_Init+0x58>
  }
  return 0;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b08e      	sub	sp, #56	; 0x38
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	603b      	str	r3, [r7, #0]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3bc:	2300      	movs	r3, #0
 800a3be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	891b      	ldrh	r3, [r3, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <CircularQueue_Add+0x38>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e000      	b.n	800a3d6 <CircularQueue_Add+0x3a>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d02a      	beq.n	800a436 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	891b      	ldrh	r3, [r3, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d123      	bne.n	800a430 <CircularQueue_Add+0x94>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6819      	ldr	r1, [r3, #0]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	1c58      	adds	r0, r3, #1
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	4298      	cmp	r0, r3
 800a406:	d306      	bcc.n	800a416 <CircularQueue_Add+0x7a>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6918      	ldr	r0, [r3, #16]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	1ac3      	subs	r3, r0, r3
 800a412:	3301      	adds	r3, #1
 800a414:	e002      	b.n	800a41c <CircularQueue_Add+0x80>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	3301      	adds	r3, #1
 800a41c:	440b      	add	r3, r1
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	b29b      	uxth	r3, r3
 800a422:	021b      	lsls	r3, r3, #8
 800a424:	b29b      	uxth	r3, r3
 800a426:	4413      	add	r3, r2
 800a428:	b29b      	uxth	r3, r3
 800a42a:	3302      	adds	r3, #2
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	e001      	b.n	800a434 <CircularQueue_Add+0x98>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	891b      	ldrh	r3, [r3, #8]
 800a434:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	891b      	ldrh	r3, [r3, #8]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d002      	beq.n	800a444 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	891b      	ldrh	r3, [r3, #8]
 800a442:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	691a      	ldr	r2, [r3, #16]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d307      	bcc.n	800a460 <CircularQueue_Add+0xc4>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6919      	ldr	r1, [r3, #16]
 800a458:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a45a:	440b      	add	r3, r1
 800a45c:	1ad3      	subs	r3, r2, r3
 800a45e:	e000      	b.n	800a462 <CircularQueue_Add+0xc6>
 800a460:	2300      	movs	r3, #0
 800a462:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a464:	88fa      	ldrh	r2, [r7, #6]
 800a466:	7ffb      	ldrb	r3, [r7, #31]
 800a468:	4413      	add	r3, r2
 800a46a:	461a      	mov	r2, r3
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	fb02 f303 	mul.w	r3, r2, r3
 800a472:	69ba      	ldr	r2, [r7, #24]
 800a474:	429a      	cmp	r2, r3
 800a476:	d80b      	bhi.n	800a490 <CircularQueue_Add+0xf4>
 800a478:	88fa      	ldrh	r2, [r7, #6]
 800a47a:	7ffb      	ldrb	r3, [r7, #31]
 800a47c:	4413      	add	r3, r2
 800a47e:	461a      	mov	r2, r3
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	fbb3 f1f2 	udiv	r1, r3, r2
 800a486:	fb01 f202 	mul.w	r2, r1, r2
 800a48a:	1a9b      	subs	r3, r3, r2
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	e000      	b.n	800a492 <CircularQueue_Add+0xf6>
 800a490:	2300      	movs	r3, #0
 800a492:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a494:	7dfa      	ldrb	r2, [r7, #23]
 800a496:	7ffb      	ldrb	r3, [r7, #31]
 800a498:	429a      	cmp	r2, r3
 800a49a:	bf8c      	ite	hi
 800a49c:	2301      	movhi	r3, #1
 800a49e:	2300      	movls	r3, #0
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a4a4:	7fbb      	ldrb	r3, [r7, #30]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d008      	beq.n	800a4bc <CircularQueue_Add+0x120>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	7f1b      	ldrb	r3, [r3, #28]
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d002      	beq.n	800a4bc <CircularQueue_Add+0x120>
 800a4b6:	7dfb      	ldrb	r3, [r7, #23]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	e000      	b.n	800a4be <CircularQueue_Add+0x122>
 800a4bc:	8bbb      	ldrh	r3, [r7, #28]
 800a4be:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a4c0:	7fbb      	ldrb	r3, [r7, #30]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d008      	beq.n	800a4d8 <CircularQueue_Add+0x13c>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	7f1b      	ldrb	r3, [r3, #28]
 800a4ca:	f003 0302 	and.w	r3, r3, #2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d002      	beq.n	800a4d8 <CircularQueue_Add+0x13c>
 800a4d2:	7ffb      	ldrb	r3, [r7, #31]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	e000      	b.n	800a4da <CircularQueue_Add+0x13e>
 800a4d8:	8bbb      	ldrh	r3, [r7, #28]
 800a4da:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a4dc:	88fb      	ldrh	r3, [r7, #6]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 817e 	beq.w	800a7e0 <CircularQueue_Add+0x444>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	695a      	ldr	r2, [r3, #20]
 800a4e8:	88f9      	ldrh	r1, [r7, #6]
 800a4ea:	7ffb      	ldrb	r3, [r7, #31]
 800a4ec:	440b      	add	r3, r1
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	fb01 f303 	mul.w	r3, r1, r3
 800a4f6:	441a      	add	r2, r3
 800a4f8:	8bbb      	ldrh	r3, [r7, #28]
 800a4fa:	441a      	add	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	429a      	cmp	r2, r3
 800a502:	f200 816d 	bhi.w	800a7e0 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a506:	2300      	movs	r3, #0
 800a508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a50a:	e14a      	b.n	800a7a2 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	691a      	ldr	r2, [r3, #16]
 800a510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a512:	441a      	add	r2, r3
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d307      	bcc.n	800a52c <CircularQueue_Add+0x190>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	691a      	ldr	r2, [r3, #16]
 800a520:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a522:	441a      	add	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	e003      	b.n	800a534 <CircularQueue_Add+0x198>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	691a      	ldr	r2, [r3, #16]
 800a530:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a532:	4413      	add	r3, r2
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	891b      	ldrh	r3, [r3, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d130      	bne.n	800a5a8 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	1c59      	adds	r1, r3, #1
 800a54e:	6339      	str	r1, [r7, #48]	; 0x30
 800a550:	4413      	add	r3, r2
 800a552:	88fa      	ldrh	r2, [r7, #6]
 800a554:	b2d2      	uxtb	r2, r2
 800a556:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a55e:	429a      	cmp	r2, r3
 800a560:	d304      	bcc.n	800a56c <CircularQueue_Add+0x1d0>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	e000      	b.n	800a56e <CircularQueue_Add+0x1d2>
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a570:	88fb      	ldrh	r3, [r7, #6]
 800a572:	0a1b      	lsrs	r3, r3, #8
 800a574:	b298      	uxth	r0, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	1c59      	adds	r1, r3, #1
 800a57e:	6339      	str	r1, [r7, #48]	; 0x30
 800a580:	4413      	add	r3, r2
 800a582:	b2c2      	uxtb	r2, r0
 800a584:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d304      	bcc.n	800a59a <CircularQueue_Add+0x1fe>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	e000      	b.n	800a59c <CircularQueue_Add+0x200>
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	1c9a      	adds	r2, r3, #2
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a5a8:	88fa      	ldrh	r2, [r7, #6]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6859      	ldr	r1, [r3, #4]
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b0:	1acb      	subs	r3, r1, r3
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	bf28      	it	cs
 800a5b6:	4613      	movcs	r3, r2
 800a5b8:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a5ba:	88fb      	ldrh	r3, [r7, #6]
 800a5bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d007      	beq.n	800a5d2 <CircularQueue_Add+0x236>
 800a5c2:	88fb      	ldrh	r3, [r7, #6]
 800a5c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d225      	bcs.n	800a616 <CircularQueue_Add+0x27a>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	7f1b      	ldrb	r3, [r3, #28]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d121      	bne.n	800a616 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	18d0      	adds	r0, r2, r3
 800a5da:	88fb      	ldrh	r3, [r7, #6]
 800a5dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5de:	fb02 f303 	mul.w	r3, r2, r3
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	f002 fc7a 	bl	800cee2 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	695a      	ldr	r2, [r3, #20]
 800a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f4:	441a      	add	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a600:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a602:	88fa      	ldrh	r2, [r7, #6]
 800a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a60a:	7ffb      	ldrb	r3, [r7, #31]
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	88fb      	ldrh	r3, [r7, #6]
 800a610:	4413      	add	r3, r2
 800a612:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a614:	e0a4      	b.n	800a760 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f000 80a1 	beq.w	800a760 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	7f1b      	ldrb	r3, [r3, #28]
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	2b00      	cmp	r3, #0
 800a628:	d03a      	beq.n	800a6a0 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	891b      	ldrh	r3, [r3, #8]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10d      	bne.n	800a64e <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	3b02      	subs	r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	22ff      	movs	r2, #255	; 0xff
 800a63e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a646:	3b01      	subs	r3, #1
 800a648:	4413      	add	r3, r2
 800a64a:	22ff      	movs	r2, #255	; 0xff
 800a64c:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	695a      	ldr	r2, [r3, #20]
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a654:	441a      	add	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a65e:	88fb      	ldrh	r3, [r7, #6]
 800a660:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a662:	2300      	movs	r3, #0
 800a664:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	891b      	ldrh	r3, [r3, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d16f      	bne.n	800a74e <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	1c59      	adds	r1, r3, #1
 800a676:	6339      	str	r1, [r7, #48]	; 0x30
 800a678:	4413      	add	r3, r2
 800a67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a67c:	b2d2      	uxtb	r2, r2
 800a67e:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	0a18      	lsrs	r0, r3, #8
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68a:	1c59      	adds	r1, r3, #1
 800a68c:	6339      	str	r1, [r7, #48]	; 0x30
 800a68e:	4413      	add	r3, r2
 800a690:	b2c2      	uxtb	r2, r0
 800a692:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	695b      	ldr	r3, [r3, #20]
 800a698:	1c9a      	adds	r2, r3, #2
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	615a      	str	r2, [r3, #20]
 800a69e:	e056      	b.n	800a74e <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	7f1b      	ldrb	r3, [r3, #28]
 800a6a4:	f003 0302 	and.w	r3, r3, #2
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d050      	beq.n	800a74e <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	891b      	ldrh	r3, [r3, #8]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d14a      	bne.n	800a74a <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ba:	3b02      	subs	r3, #2
 800a6bc:	4413      	add	r3, r2
 800a6be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6c0:	b2d2      	uxtb	r2, r2
 800a6c2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	0a19      	lsrs	r1, r3, #8
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	4413      	add	r3, r2
 800a6d2:	b2ca      	uxtb	r2, r1
 800a6d4:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	18d0      	adds	r0, r2, r3
 800a6de:	88fb      	ldrh	r3, [r7, #6]
 800a6e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6e2:	fb02 f303 	mul.w	r3, r2, r3
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	f002 fbf8 	bl	800cee2 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	695a      	ldr	r2, [r3, #20]
 800a6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f8:	441a      	add	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a702:	88fa      	ldrh	r2, [r7, #6]
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	1c5a      	adds	r2, r3, #1
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a714:	2300      	movs	r3, #0
 800a716:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71e:	1c59      	adds	r1, r3, #1
 800a720:	6339      	str	r1, [r7, #48]	; 0x30
 800a722:	4413      	add	r3, r2
 800a724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a726:	b2d2      	uxtb	r2, r2
 800a728:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72c:	0a18      	lsrs	r0, r3, #8
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	1c59      	adds	r1, r3, #1
 800a736:	6339      	str	r1, [r7, #48]	; 0x30
 800a738:	4413      	add	r3, r2
 800a73a:	b2c2      	uxtb	r2, r0
 800a73c:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	1c9a      	adds	r2, r3, #2
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	615a      	str	r2, [r3, #20]
 800a748:	e001      	b.n	800a74e <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a74a:	2300      	movs	r3, #0
 800a74c:	e049      	b.n	800a7e2 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a74e:	7ffb      	ldrb	r3, [r7, #31]
 800a750:	b29a      	uxth	r2, r3
 800a752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a754:	b29b      	uxth	r3, r3
 800a756:	4413      	add	r3, r2
 800a758:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	2b00      	cmp	r3, #0
 800a764:	d015      	beq.n	800a792 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76c:	18d0      	adds	r0, r2, r3
 800a76e:	88fb      	ldrh	r3, [r7, #6]
 800a770:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a772:	fb03 f202 	mul.w	r2, r3, r2
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	4413      	add	r3, r2
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	4413      	add	r3, r2
 800a77e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a780:	4619      	mov	r1, r3
 800a782:	f002 fbae 	bl	800cee2 <memcpy>
        q->byteCount += NbBytesToCopy;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	695a      	ldr	r2, [r3, #20]
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	441a      	add	r2, r3
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79e:	3301      	adds	r3, #1
 800a7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	f4ff aeb0 	bcc.w	800a50c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6919      	ldr	r1, [r3, #16]
 800a7b4:	7ffb      	ldrb	r3, [r7, #31]
 800a7b6:	4419      	add	r1, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	4299      	cmp	r1, r3
 800a7be:	d307      	bcc.n	800a7d0 <CircularQueue_Add+0x434>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6919      	ldr	r1, [r3, #16]
 800a7c4:	7ffb      	ldrb	r3, [r7, #31]
 800a7c6:	4419      	add	r1, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	1acb      	subs	r3, r1, r3
 800a7ce:	e003      	b.n	800a7d8 <CircularQueue_Add+0x43c>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6919      	ldr	r1, [r3, #16]
 800a7d4:	7ffb      	ldrb	r3, [r7, #31]
 800a7d6:	440b      	add	r3, r1
 800a7d8:	4413      	add	r3, r2
 800a7da:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	e000      	b.n	800a7e2 <CircularQueue_Add+0x446>
    return NULL;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3738      	adds	r7, #56	; 0x38
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b085      	sub	sp, #20
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	891b      	ldrh	r3, [r3, #8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <CircularQueue_Remove+0x1e>
 800a804:	2302      	movs	r3, #2
 800a806:	e000      	b.n	800a80a <CircularQueue_Remove+0x20>
 800a808:	2300      	movs	r3, #0
 800a80a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 80cc 	beq.w	800a9b2 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	891b      	ldrh	r3, [r3, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d121      	bne.n	800a866 <CircularQueue_Remove+0x7c>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	4413      	add	r3, r2
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	b29a      	uxth	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6819      	ldr	r1, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	1c58      	adds	r0, r3, #1
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	4298      	cmp	r0, r3
 800a840:	d306      	bcc.n	800a850 <CircularQueue_Remove+0x66>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68d8      	ldr	r0, [r3, #12]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	1ac3      	subs	r3, r0, r3
 800a84c:	3301      	adds	r3, #1
 800a84e:	e002      	b.n	800a856 <CircularQueue_Remove+0x6c>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	3301      	adds	r3, #1
 800a856:	440b      	add	r3, r1
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	021b      	lsls	r3, r3, #8
 800a85e:	b29b      	uxth	r3, r3
 800a860:	4413      	add	r3, r2
 800a862:	b29b      	uxth	r3, r3
 800a864:	e001      	b.n	800a86a <CircularQueue_Remove+0x80>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	891b      	ldrh	r3, [r3, #8]
 800a86a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	7f1b      	ldrb	r3, [r3, #28]
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	2b00      	cmp	r3, #0
 800a876:	d057      	beq.n	800a928 <CircularQueue_Remove+0x13e>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	7f1b      	ldrb	r3, [r3, #28]
 800a87c:	f003 0302 	and.w	r3, r3, #2
 800a880:	2b00      	cmp	r3, #0
 800a882:	d151      	bne.n	800a928 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a884:	897b      	ldrh	r3, [r7, #10]
 800a886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d103      	bne.n	800a896 <CircularQueue_Remove+0xac>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	891b      	ldrh	r3, [r3, #8]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d012      	beq.n	800a8bc <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68da      	ldr	r2, [r3, #12]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d942      	bls.n	800a928 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	891b      	ldrh	r3, [r3, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d03e      	beq.n	800a928 <CircularQueue_Remove+0x13e>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	685a      	ldr	r2, [r3, #4]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	8912      	ldrh	r2, [r2, #8]
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d235      	bcs.n	800a928 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	695a      	ldr	r2, [r3, #20]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68d9      	ldr	r1, [r3, #12]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	1acb      	subs	r3, r1, r3
 800a8ca:	441a      	add	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	891b      	ldrh	r3, [r3, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d121      	bne.n	800a922 <CircularQueue_Remove+0x138>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6819      	ldr	r1, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	1c58      	adds	r0, r3, #1
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	4298      	cmp	r0, r3
 800a8fc:	d306      	bcc.n	800a90c <CircularQueue_Remove+0x122>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68d8      	ldr	r0, [r3, #12]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	1ac3      	subs	r3, r0, r3
 800a908:	3301      	adds	r3, #1
 800a90a:	e002      	b.n	800a912 <CircularQueue_Remove+0x128>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	3301      	adds	r3, #1
 800a912:	440b      	add	r3, r1
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	b29b      	uxth	r3, r3
 800a918:	021b      	lsls	r3, r3, #8
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	4413      	add	r3, r2
 800a91e:	b29b      	uxth	r3, r3
 800a920:	e001      	b.n	800a926 <CircularQueue_Remove+0x13c>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	891b      	ldrh	r3, [r3, #8]
 800a926:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68d9      	ldr	r1, [r3, #12]
 800a930:	7a7b      	ldrb	r3, [r7, #9]
 800a932:	4419      	add	r1, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	4299      	cmp	r1, r3
 800a93a:	d307      	bcc.n	800a94c <CircularQueue_Remove+0x162>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68d9      	ldr	r1, [r3, #12]
 800a940:	7a7b      	ldrb	r3, [r7, #9]
 800a942:	4419      	add	r1, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	1acb      	subs	r3, r1, r3
 800a94a:	e003      	b.n	800a954 <CircularQueue_Remove+0x16a>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68d9      	ldr	r1, [r3, #12]
 800a950:	7a7b      	ldrb	r3, [r7, #9]
 800a952:	440b      	add	r3, r1
 800a954:	4413      	add	r3, r2
 800a956:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	8979      	ldrh	r1, [r7, #10]
 800a95e:	7a7a      	ldrb	r2, [r7, #9]
 800a960:	440a      	add	r2, r1
 800a962:	1a9a      	subs	r2, r3, r2
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d01b      	beq.n	800a9a8 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	68da      	ldr	r2, [r3, #12]
 800a974:	897b      	ldrh	r3, [r7, #10]
 800a976:	441a      	add	r2, r3
 800a978:	7a7b      	ldrb	r3, [r7, #9]
 800a97a:	441a      	add	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	429a      	cmp	r2, r3
 800a982:	d309      	bcc.n	800a998 <CircularQueue_Remove+0x1ae>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68da      	ldr	r2, [r3, #12]
 800a988:	897b      	ldrh	r3, [r7, #10]
 800a98a:	441a      	add	r2, r3
 800a98c:	7a7b      	ldrb	r3, [r7, #9]
 800a98e:	441a      	add	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	e005      	b.n	800a9a4 <CircularQueue_Remove+0x1ba>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68da      	ldr	r2, [r3, #12]
 800a99c:	897b      	ldrh	r3, [r7, #10]
 800a99e:	441a      	add	r2, r3
 800a9a0:	7a7b      	ldrb	r3, [r7, #9]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	1e5a      	subs	r2, r3, #1
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d002      	beq.n	800a9be <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	897a      	ldrh	r2, [r7, #10]
 800a9bc:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a9be:	68fb      	ldr	r3, [r7, #12]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b087      	sub	sp, #28
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	891b      	ldrh	r3, [r3, #8]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d101      	bne.n	800a9ea <CircularQueue_Sense+0x1e>
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e000      	b.n	800a9ec <CircularQueue_Sense+0x20>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f000 8090 	beq.w	800ab20 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	891b      	ldrh	r3, [r3, #8]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d121      	bne.n	800aa52 <CircularQueue_Sense+0x86>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	4413      	add	r3, r2
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6819      	ldr	r1, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	1c58      	adds	r0, r3, #1
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	4298      	cmp	r0, r3
 800aa2c:	d306      	bcc.n	800aa3c <CircularQueue_Sense+0x70>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68d8      	ldr	r0, [r3, #12]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	1ac3      	subs	r3, r0, r3
 800aa38:	3301      	adds	r3, #1
 800aa3a:	e002      	b.n	800aa42 <CircularQueue_Sense+0x76>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	3301      	adds	r3, #1
 800aa42:	440b      	add	r3, r1
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	021b      	lsls	r3, r3, #8
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	4413      	add	r3, r2
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	e001      	b.n	800aa56 <CircularQueue_Sense+0x8a>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	891b      	ldrh	r3, [r3, #8]
 800aa56:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	7f1b      	ldrb	r3, [r3, #28]
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d048      	beq.n	800aaf6 <CircularQueue_Sense+0x12a>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	7f1b      	ldrb	r3, [r3, #28]
 800aa68:	f003 0302 	and.w	r3, r3, #2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d142      	bne.n	800aaf6 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aa70:	8a7b      	ldrh	r3, [r7, #18]
 800aa72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d103      	bne.n	800aa82 <CircularQueue_Sense+0xb6>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	891b      	ldrh	r3, [r3, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d012      	beq.n	800aaa8 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	68da      	ldr	r2, [r3, #12]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d933      	bls.n	800aaf6 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	891b      	ldrh	r3, [r3, #8]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d02f      	beq.n	800aaf6 <CircularQueue_Sense+0x12a>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685a      	ldr	r2, [r3, #4]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	8912      	ldrh	r2, [r2, #8]
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d226      	bcs.n	800aaf6 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	891b      	ldrh	r3, [r3, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d11d      	bne.n	800aaf0 <CircularQueue_Sense+0x124>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4413      	add	r3, r2
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6819      	ldr	r1, [r3, #0]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	1c58      	adds	r0, r3, #1
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	4298      	cmp	r0, r3
 800aace:	d305      	bcc.n	800aadc <CircularQueue_Sense+0x110>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	1ac3      	subs	r3, r0, r3
 800aad8:	3301      	adds	r3, #1
 800aada:	e001      	b.n	800aae0 <CircularQueue_Sense+0x114>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	3301      	adds	r3, #1
 800aae0:	440b      	add	r3, r1
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	021b      	lsls	r3, r3, #8
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	4413      	add	r3, r2
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	e001      	b.n	800aaf4 <CircularQueue_Sense+0x128>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	891b      	ldrh	r3, [r3, #8]
 800aaf4:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	7af9      	ldrb	r1, [r7, #11]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4419      	add	r1, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	4299      	cmp	r1, r3
 800ab06:	d306      	bcc.n	800ab16 <CircularQueue_Sense+0x14a>
 800ab08:	7af9      	ldrb	r1, [r7, #11]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4419      	add	r1, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	1acb      	subs	r3, r1, r3
 800ab14:	e002      	b.n	800ab1c <CircularQueue_Sense+0x150>
 800ab16:	7af9      	ldrb	r1, [r7, #11]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	440b      	add	r3, r1
 800ab1c:	4413      	add	r3, r2
 800ab1e:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d002      	beq.n	800ab2c <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	8a7a      	ldrh	r2, [r7, #18]
 800ab2a:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800ab2c:	697b      	ldr	r3, [r7, #20]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	371c      	adds	r7, #28
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
	...

0800ab3c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800ab40:	4b03      	ldr	r3, [pc, #12]	; (800ab50 <LL_FLASH_GetUDN+0x14>)
 800ab42:	681b      	ldr	r3, [r3, #0]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	1fff7580 	.word	0x1fff7580

0800ab54 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800ab54:	b480      	push	{r7}
 800ab56:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800ab58:	4b03      	ldr	r3, [pc, #12]	; (800ab68 <LL_FLASH_GetDeviceID+0x14>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	b2db      	uxtb	r3, r3
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	1fff7584 	.word	0x1fff7584

0800ab6c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800ab70:	4b03      	ldr	r3, [pc, #12]	; (800ab80 <LL_FLASH_GetSTCompanyID+0x14>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	0a1b      	lsrs	r3, r3, #8
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	1fff7584 	.word	0x1fff7584

0800ab84 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800ab84:	b5b0      	push	{r4, r5, r7, lr}
 800ab86:	b090      	sub	sp, #64	; 0x40
 800ab88:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ab8a:	2392      	movs	r3, #146	; 0x92
 800ab8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800ab90:	4b31      	ldr	r3, [pc, #196]	; (800ac58 <APP_BLE_Init+0xd4>)
 800ab92:	1d3c      	adds	r4, r7, #4
 800ab94:	461d      	mov	r5, r3
 800ab96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aba6:	c403      	stmia	r4!, {r0, r1}
 800aba8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800abaa:	f000 fa83 	bl	800b0b4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800abae:	2101      	movs	r1, #1
 800abb0:	2002      	movs	r0, #2
 800abb2:	f001 fca3 	bl	800c4fc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800abb6:	4a29      	ldr	r2, [pc, #164]	; (800ac5c <APP_BLE_Init+0xd8>)
 800abb8:	2100      	movs	r1, #0
 800abba:	2010      	movs	r0, #16
 800abbc:	f001 fdca 	bl	800c754 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800abc0:	1d3b      	adds	r3, r7, #4
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fe fc0e 	bl	80093e4 <SHCI_C2_BLE_Init>
 800abc8:	4603      	mov	r3, r0
 800abca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800abce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d008      	beq.n	800abe8 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800abd6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800abda:	4619      	mov	r1, r3
 800abdc:	4820      	ldr	r0, [pc, #128]	; (800ac60 <APP_BLE_Init+0xdc>)
 800abde:	f001 ffbd 	bl	800cb5c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800abe2:	f7f7 fc7f 	bl	80024e4 <Error_Handler>
 800abe6:	e002      	b.n	800abee <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800abe8:	481e      	ldr	r0, [pc, #120]	; (800ac64 <APP_BLE_Init+0xe0>)
 800abea:	f001 ffb7 	bl	800cb5c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800abee:	f000 fa77 	bl	800b0e0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800abf2:	f7fe fb35 	bl	8009260 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800abf6:	4a1c      	ldr	r2, [pc, #112]	; (800ac68 <APP_BLE_Init+0xe4>)
 800abf8:	2100      	movs	r1, #0
 800abfa:	2001      	movs	r0, #1
 800abfc:	f001 fdaa 	bl	800c754 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 800ac00:	4a1a      	ldr	r2, [pc, #104]	; (800ac6c <APP_BLE_Init+0xe8>)
 800ac02:	2100      	movs	r1, #0
 800ac04:	2002      	movs	r0, #2
 800ac06:	f001 fda5 	bl	800c754 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ac0a:	4b19      	ldr	r3, [pc, #100]	; (800ac70 <APP_BLE_Init+0xec>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  ret = aci_hal_set_radio_activity_mask(0x0020);
 800ac12:	2020      	movs	r0, #32
 800ac14:	f7fe f949 	bl	8008eaa <aci_hal_set_radio_activity_mask>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800ac1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d006      	beq.n	800ac34 <APP_BLE_Init+0xb0>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800ac26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	4811      	ldr	r0, [pc, #68]	; (800ac74 <APP_BLE_Init+0xf0>)
 800ac2e:	f001 ff95 	bl	800cb5c <iprintf>
 800ac32:	e002      	b.n	800ac3a <APP_BLE_Init+0xb6>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800ac34:	4810      	ldr	r0, [pc, #64]	; (800ac78 <APP_BLE_Init+0xf4>)
 800ac36:	f001 ff91 	bl	800cb5c <iprintf>
  }
  APP_DBG_MSG("\n");
 800ac3a:	200a      	movs	r0, #10
 800ac3c:	f001 ffa0 	bl	800cb80 <putchar>
#endif
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 800ac40:	f000 fce0 	bl	800b604 <P2PC_APP_Init>
  /* USER CODE BEGIN APP_BLE_Init_3 */

  /* USER CODE END APP_BLE_Init_3 */

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800ac44:	4b0d      	ldr	r3, [pc, #52]	; (800ac7c <APP_BLE_Init+0xf8>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	490d      	ldr	r1, [pc, #52]	; (800ac80 <APP_BLE_Init+0xfc>)
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	f7f6 ffac 	bl	8001ba8 <HW_TS_Create>
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */
  return;
 800ac50:	bf00      	nop
}
 800ac52:	3740      	adds	r7, #64	; 0x40
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bdb0      	pop	{r4, r5, r7, pc}
 800ac58:	0800dec0 	.word	0x0800dec0
 800ac5c:	08009601 	.word	0x08009601
 800ac60:	0800dde4 	.word	0x0800dde4
 800ac64:	0800de1c 	.word	0x0800de1c
 800ac68:	0800b3d1 	.word	0x0800b3d1
 800ac6c:	0800b435 	.word	0x0800b435
 800ac70:	200015b0 	.word	0x200015b0
 800ac74:	0800de44 	.word	0x0800de44
 800ac78:	0800de88 	.word	0x0800de88
 800ac7c:	0800b4b9 	.word	0x0800b4b9
 800ac80:	20001631 	.word	0x20001631

0800ac84 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 800ac84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac86:	b097      	sub	sp, #92	; 0x5c
 800ac88:	af06      	add	r7, sp, #24
 800ac8a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blecore_aci *blecore_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 800ac92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac94:	3302      	adds	r3, #2
 800ac96:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
#if (OOB_DEMO != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ac9c:	2392      	movs	r3, #146	; 0x92
 800ac9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif

  switch (event_pckt->evt)
 800aca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	2bff      	cmp	r3, #255	; 0xff
 800aca8:	d009      	beq.n	800acbe <SVCCTL_App_Notification+0x3a>
 800acaa:	2bff      	cmp	r3, #255	; 0xff
 800acac:	f300 81bc 	bgt.w	800b028 <SVCCTL_App_Notification+0x3a4>
 800acb0:	2b05      	cmp	r3, #5
 800acb2:	f000 80ce 	beq.w	800ae52 <SVCCTL_App_Notification+0x1ce>
 800acb6:	2b3e      	cmp	r3, #62	; 0x3e
 800acb8:	f000 80e9 	beq.w	800ae8e <SVCCTL_App_Notification+0x20a>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 800acbc:	e1b4      	b.n	800b028 <SVCCTL_App_Notification+0x3a4>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800acbe:	4ba6      	ldr	r3, [pc, #664]	; (800af58 <SVCCTL_App_Notification+0x2d4>)
 800acc0:	2201      	movs	r2, #1
 800acc2:	701a      	strb	r2, [r3, #0]
        blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800acc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc6:	3302      	adds	r3, #2
 800acc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        switch (blecore_evt->ecode)
 800acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800accc:	881b      	ldrh	r3, [r3, #0]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	f640 0202 	movw	r2, #2050	; 0x802
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d033      	beq.n	800ad40 <SVCCTL_App_Notification+0xbc>
 800acd8:	f640 0202 	movw	r2, #2050	; 0x802
 800acdc:	4293      	cmp	r3, r2
 800acde:	f300 80b4 	bgt.w	800ae4a <SVCCTL_App_Notification+0x1c6>
 800ace2:	2b04      	cmp	r3, #4
 800ace4:	f000 80a6 	beq.w	800ae34 <SVCCTL_App_Notification+0x1b0>
 800ace8:	f240 4207 	movw	r2, #1031	; 0x407
 800acec:	4293      	cmp	r3, r2
 800acee:	f040 80ac 	bne.w	800ae4a <SVCCTL_App_Notification+0x1c6>
              aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blecore_evt->data;
 800acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf4:	3302      	adds	r3, #2
 800acf6:	627b      	str	r3, [r7, #36]	; 0x24
              if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 800acf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	f040 80a6 	bne.w	800ae4e <SVCCTL_App_Notification+0x1ca>
                  && gap_evt_proc_complete->Status == 0x00)
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	785b      	ldrb	r3, [r3, #1]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f040 80a1 	bne.w	800ae4e <SVCCTL_App_Notification+0x1ca>
                BSP_LED_Off(LED_BLUE);
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	f7f7 fed1 	bl	8002ab4 <BSP_LED_Off>
                APP_DBG_MSG("LED BLUE OFF\n");
 800ad12:	4892      	ldr	r0, [pc, #584]	; (800af5c <SVCCTL_App_Notification+0x2d8>)
 800ad14:	f001 ff90 	bl	800cc38 <puts>
                APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n\r");
 800ad18:	4891      	ldr	r0, [pc, #580]	; (800af60 <SVCCTL_App_Notification+0x2dc>)
 800ad1a:	f001 ff1f 	bl	800cb5c <iprintf>
                if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800ad1e:	4b91      	ldr	r3, [pc, #580]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800ad20:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	f040 8092 	bne.w	800ae4e <SVCCTL_App_Notification+0x1ca>
 800ad2a:	4b8e      	ldr	r3, [pc, #568]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800ad2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad30:	2b06      	cmp	r3, #6
 800ad32:	f000 808c 	beq.w	800ae4e <SVCCTL_App_Notification+0x1ca>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800ad36:	2100      	movs	r1, #0
 800ad38:	2002      	movs	r0, #2
 800ad3a:	f001 fd2d 	bl	800c798 <UTIL_SEQ_SetTask>
            break;
 800ad3e:	e086      	b.n	800ae4e <SVCCTL_App_Notification+0x1ca>
              aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blecore_evt->data;
 800ad40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad42:	3302      	adds	r3, #2
 800ad44:	62bb      	str	r3, [r7, #40]	; 0x28
              ret = aci_hal_set_radio_activity_mask(0x0000);
 800ad46:	2000      	movs	r0, #0
 800ad48:	f7fe f8af 	bl	8008eaa <aci_hal_set_radio_activity_mask>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 800ad52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d006      	beq.n	800ad68 <SVCCTL_App_Notification+0xe4>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800ad5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad5e:	4619      	mov	r1, r3
 800ad60:	4881      	ldr	r0, [pc, #516]	; (800af68 <SVCCTL_App_Notification+0x2e4>)
 800ad62:	f001 fefb 	bl	800cb5c <iprintf>
 800ad66:	e002      	b.n	800ad6e <SVCCTL_App_Notification+0xea>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800ad68:	4880      	ldr	r0, [pc, #512]	; (800af6c <SVCCTL_App_Notification+0x2e8>)
 800ad6a:	f001 fef7 	bl	800cb5c <iprintf>
              APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 800ad6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad70:	789a      	ldrb	r2, [r3, #2]
 800ad72:	4b7f      	ldr	r3, [pc, #508]	; (800af70 <SVCCTL_App_Notification+0x2ec>)
 800ad74:	701a      	strb	r2, [r3, #0]
              APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 800ad76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad78:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	4b7c      	ldr	r3, [pc, #496]	; (800af70 <SVCCTL_App_Notification+0x2ec>)
 800ad80:	805a      	strh	r2, [r3, #2]
              APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 800ad82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad84:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	4b79      	ldr	r3, [pc, #484]	; (800af70 <SVCCTL_App_Notification+0x2ec>)
 800ad8c:	809a      	strh	r2, [r3, #4]
              APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 800ad8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad90:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	4b76      	ldr	r3, [pc, #472]	; (800af70 <SVCCTL_App_Notification+0x2ec>)
 800ad98:	80da      	strh	r2, [r3, #6]
              APP_BLE_p2p_Conn_Update_req.Latency = pr->Latency;
 800ad9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9c:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	4b73      	ldr	r3, [pc, #460]	; (800af70 <SVCCTL_App_Notification+0x2ec>)
 800ada4:	811a      	strh	r2, [r3, #8]
              APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 800ada6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada8:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800adac:	b29a      	uxth	r2, r3
 800adae:	4b70      	ldr	r3, [pc, #448]	; (800af70 <SVCCTL_App_Notification+0x2ec>)
 800adb0:	815a      	strh	r2, [r3, #10]
              ret = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800adb2:	4b6c      	ldr	r3, [pc, #432]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800adb4:	8ad8      	ldrh	r0, [r3, #22]
 800adb6:	4b6e      	ldr	r3, [pc, #440]	; (800af70 <SVCCTL_App_Notification+0x2ec>)
 800adb8:	8899      	ldrh	r1, [r3, #4]
 800adba:	4b6d      	ldr	r3, [pc, #436]	; (800af70 <SVCCTL_App_Notification+0x2ec>)
 800adbc:	88dc      	ldrh	r4, [r3, #6]
 800adbe:	4b6c      	ldr	r3, [pc, #432]	; (800af70 <SVCCTL_App_Notification+0x2ec>)
 800adc0:	891d      	ldrh	r5, [r3, #8]
 800adc2:	4b6b      	ldr	r3, [pc, #428]	; (800af70 <SVCCTL_App_Notification+0x2ec>)
 800adc4:	895b      	ldrh	r3, [r3, #10]
 800adc6:	4a6a      	ldr	r2, [pc, #424]	; (800af70 <SVCCTL_App_Notification+0x2ec>)
 800adc8:	7812      	ldrb	r2, [r2, #0]
 800adca:	2601      	movs	r6, #1
 800adcc:	9604      	str	r6, [sp, #16]
 800adce:	9203      	str	r2, [sp, #12]
 800add0:	2210      	movs	r2, #16
 800add2:	9202      	str	r2, [sp, #8]
 800add4:	2210      	movs	r2, #16
 800add6:	9201      	str	r2, [sp, #4]
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	462b      	mov	r3, r5
 800addc:	4622      	mov	r2, r4
 800adde:	f7fe f8dc 	bl	8008f9a <aci_l2cap_connection_parameter_update_resp>
 800ade2:	4603      	mov	r3, r0
 800ade4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if(ret != BLE_STATUS_SUCCESS)
 800ade8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800adec:	2b00      	cmp	r3, #0
 800adee:	d009      	beq.n	800ae04 <SVCCTL_App_Notification+0x180>
                APP_DBG_MSG("  Fail   : aci_l2cap_connection_parameter_update_resp command, result: 0x%x \n\r", ret);
 800adf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800adf4:	4619      	mov	r1, r3
 800adf6:	485f      	ldr	r0, [pc, #380]	; (800af74 <SVCCTL_App_Notification+0x2f0>)
 800adf8:	f001 feb0 	bl	800cb5c <iprintf>
                BSP_LED_On(LED_RED);
 800adfc:	2002      	movs	r0, #2
 800adfe:	f7f7 fe3f 	bl	8002a80 <BSP_LED_On>
 800ae02:	e002      	b.n	800ae0a <SVCCTL_App_Notification+0x186>
                APP_DBG_MSG("  Success: aci_l2cap_connection_parameter_update_resp command\n\r");
 800ae04:	485c      	ldr	r0, [pc, #368]	; (800af78 <SVCCTL_App_Notification+0x2f4>)
 800ae06:	f001 fea9 	bl	800cb5c <iprintf>
              ret = aci_hal_set_radio_activity_mask(0x0020);
 800ae0a:	2020      	movs	r0, #32
 800ae0c:	f7fe f84d 	bl	8008eaa <aci_hal_set_radio_activity_mask>
 800ae10:	4603      	mov	r3, r0
 800ae12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 800ae16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d006      	beq.n	800ae2c <SVCCTL_App_Notification+0x1a8>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800ae1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae22:	4619      	mov	r1, r3
 800ae24:	4850      	ldr	r0, [pc, #320]	; (800af68 <SVCCTL_App_Notification+0x2e4>)
 800ae26:	f001 fe99 	bl	800cb5c <iprintf>
            break;
 800ae2a:	e011      	b.n	800ae50 <SVCCTL_App_Notification+0x1cc>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800ae2c:	484f      	ldr	r0, [pc, #316]	; (800af6c <SVCCTL_App_Notification+0x2e8>)
 800ae2e:	f001 fe95 	bl	800cb5c <iprintf>
            break;
 800ae32:	e00d      	b.n	800ae50 <SVCCTL_App_Notification+0x1cc>
              BSP_LED_On(LED_GREEN);
 800ae34:	2001      	movs	r0, #1
 800ae36:	f7f7 fe23 	bl	8002a80 <BSP_LED_On>
              HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800ae3a:	4b4a      	ldr	r3, [pc, #296]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800ae3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ae40:	210a      	movs	r1, #10
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7f6 ffae 	bl	8001da4 <HW_TS_Start>
            break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800ae48:	e002      	b.n	800ae50 <SVCCTL_App_Notification+0x1cc>
            break;
 800ae4a:	bf00      	nop
 800ae4c:	e0ef      	b.n	800b02e <SVCCTL_App_Notification+0x3aa>
            break;
 800ae4e:	bf00      	nop
      break;
 800ae50:	e0ed      	b.n	800b02e <SVCCTL_App_Notification+0x3aa>
        if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ae52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	4b42      	ldr	r3, [pc, #264]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800ae5c:	8adb      	ldrh	r3, [r3, #22]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	f040 80e4 	bne.w	800b02c <SVCCTL_App_Notification+0x3a8>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ae64:	4b3f      	ldr	r3, [pc, #252]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800ae66:	2200      	movs	r2, #0
 800ae68:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ae6a:	4b3e      	ldr	r3, [pc, #248]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n\r");
 800ae72:	4842      	ldr	r0, [pc, #264]	; (800af7c <SVCCTL_App_Notification+0x2f8>)
 800ae74:	f001 fe72 	bl	800cb5c <iprintf>
          handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800ae78:	4b37      	ldr	r3, [pc, #220]	; (800af58 <SVCCTL_App_Notification+0x2d4>)
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ae7e:	4b39      	ldr	r3, [pc, #228]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800ae80:	8ada      	ldrh	r2, [r3, #22]
 800ae82:	4b35      	ldr	r3, [pc, #212]	; (800af58 <SVCCTL_App_Notification+0x2d4>)
 800ae84:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 800ae86:	4834      	ldr	r0, [pc, #208]	; (800af58 <SVCCTL_App_Notification+0x2d4>)
 800ae88:	f000 fc0a 	bl	800b6a0 <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ae8c:	e0ce      	b.n	800b02c <SVCCTL_App_Notification+0x3a8>
        meta_evt = (evt_le_meta_event*) event_pckt->data;
 800ae8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae90:	3302      	adds	r3, #2
 800ae92:	623b      	str	r3, [r7, #32]
        switch (meta_evt->subevent)
 800ae94:	6a3b      	ldr	r3, [r7, #32]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d002      	beq.n	800aea2 <SVCCTL_App_Notification+0x21e>
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d02f      	beq.n	800af00 <SVCCTL_App_Notification+0x27c>
            break;
 800aea0:	e0c1      	b.n	800b026 <SVCCTL_App_Notification+0x3a2>
            connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800aea2:	6a3b      	ldr	r3, [r7, #32]
 800aea4:	3301      	adds	r3, #1
 800aea6:	60fb      	str	r3, [r7, #12]
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	4b2c      	ldr	r3, [pc, #176]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800aeb2:	82da      	strh	r2, [r3, #22]
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800aeb4:	4b2b      	ldr	r3, [pc, #172]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800aeb6:	2206      	movs	r2, #6
 800aeb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            APP_DBG_MSG("\r\n\r**  CONNECTION COMPLETE EVENT WITH SERVER \n\r");
 800aebc:	4830      	ldr	r0, [pc, #192]	; (800af80 <SVCCTL_App_Notification+0x2fc>)
 800aebe:	f001 fe4d 	bl	800cb5c <iprintf>
            handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800aec2:	4b25      	ldr	r3, [pc, #148]	; (800af58 <SVCCTL_App_Notification+0x2d4>)
 800aec4:	2200      	movs	r2, #0
 800aec6:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800aec8:	4b26      	ldr	r3, [pc, #152]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800aeca:	8ada      	ldrh	r2, [r3, #22]
 800aecc:	4b22      	ldr	r3, [pc, #136]	; (800af58 <SVCCTL_App_Notification+0x2d4>)
 800aece:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 800aed0:	4821      	ldr	r0, [pc, #132]	; (800af58 <SVCCTL_App_Notification+0x2d4>)
 800aed2:	f000 fbe5 	bl	800b6a0 <P2PC_APP_Notification>
            result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800aed6:	4b23      	ldr	r3, [pc, #140]	; (800af64 <SVCCTL_App_Notification+0x2e0>)
 800aed8:	8adb      	ldrh	r3, [r3, #22]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fd fc64 	bl	80087a8 <aci_gatt_disc_all_primary_services>
 800aee0:	4603      	mov	r3, r0
 800aee2:	72fb      	strb	r3, [r7, #11]
            if (result == BLE_STATUS_SUCCESS)
 800aee4:	7afb      	ldrb	r3, [r7, #11]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <SVCCTL_App_Notification+0x274>
              APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n\r");
 800aeea:	4826      	ldr	r0, [pc, #152]	; (800af84 <SVCCTL_App_Notification+0x300>)
 800aeec:	f001 fe36 	bl	800cb5c <iprintf>
              APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 800aef0:	4825      	ldr	r0, [pc, #148]	; (800af88 <SVCCTL_App_Notification+0x304>)
 800aef2:	f001 fe33 	bl	800cb5c <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800aef6:	e096      	b.n	800b026 <SVCCTL_App_Notification+0x3a2>
              APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 800aef8:	4824      	ldr	r0, [pc, #144]	; (800af8c <SVCCTL_App_Notification+0x308>)
 800aefa:	f001 fe2f 	bl	800cb5c <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800aefe:	e092      	b.n	800b026 <SVCCTL_App_Notification+0x3a2>
              le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800af00:	6a3b      	ldr	r3, [r7, #32]
 800af02:	3301      	adds	r3, #1
 800af04:	61fb      	str	r3, [r7, #28]
              event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	785b      	ldrb	r3, [r3, #1]
 800af0a:	76fb      	strb	r3, [r7, #27]
              event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	7a5b      	ldrb	r3, [r3, #9]
 800af10:	76bb      	strb	r3, [r7, #26]
              adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	3309      	adds	r3, #9
 800af16:	3301      	adds	r3, #1
 800af18:	617b      	str	r3, [r7, #20]
              k = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	63fb      	str	r3, [r7, #60]	; 0x3c
              if (event_type == ADV_IND)
 800af1e:	7efb      	ldrb	r3, [r7, #27]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d17f      	bne.n	800b024 <SVCCTL_App_Notification+0x3a0>
                while(k < event_data_size)
 800af24:	e07a      	b.n	800b01c <SVCCTL_App_Notification+0x398>
                  adlength = adv_report_data[k];
 800af26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	4413      	add	r3, r2
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	74fb      	strb	r3, [r7, #19]
                  adtype = adv_report_data[k + 1];
 800af30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af32:	3301      	adds	r3, #1
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	4413      	add	r3, r2
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	74bb      	strb	r3, [r7, #18]
                  switch (adtype)
 800af3c:	7cbb      	ldrb	r3, [r7, #18]
 800af3e:	2bff      	cmp	r3, #255	; 0xff
 800af40:	d026      	beq.n	800af90 <SVCCTL_App_Notification+0x30c>
 800af42:	2bff      	cmp	r3, #255	; 0xff
 800af44:	dc5e      	bgt.n	800b004 <SVCCTL_App_Notification+0x380>
 800af46:	2b16      	cmp	r3, #22
 800af48:	d05e      	beq.n	800b008 <SVCCTL_App_Notification+0x384>
 800af4a:	2b16      	cmp	r3, #22
 800af4c:	dc5a      	bgt.n	800b004 <SVCCTL_App_Notification+0x380>
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d05c      	beq.n	800b00c <SVCCTL_App_Notification+0x388>
 800af52:	2b0a      	cmp	r3, #10
                      break;
 800af54:	e05d      	b.n	800b012 <SVCCTL_App_Notification+0x38e>
 800af56:	bf00      	nop
 800af58:	200015ac 	.word	0x200015ac
 800af5c:	0800defc 	.word	0x0800defc
 800af60:	0800df0c 	.word	0x0800df0c
 800af64:	200015b0 	.word	0x200015b0
 800af68:	0800de44 	.word	0x0800de44
 800af6c:	0800de88 	.word	0x0800de88
 800af70:	20001634 	.word	0x20001634
 800af74:	0800df3c 	.word	0x0800df3c
 800af78:	0800df8c 	.word	0x0800df8c
 800af7c:	0800dfcc 	.word	0x0800dfcc
 800af80:	0800dff8 	.word	0x0800dff8
 800af84:	0800e028 	.word	0x0800e028
 800af88:	0800e05c 	.word	0x0800e05c
 800af8c:	0800e08c 	.word	0x0800e08c
                      if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 800af90:	7cfb      	ldrb	r3, [r7, #19]
 800af92:	2b06      	cmp	r3, #6
 800af94:	d93c      	bls.n	800b010 <SVCCTL_App_Notification+0x38c>
 800af96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af98:	3302      	adds	r3, #2
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	4413      	add	r3, r2
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d135      	bne.n	800b010 <SVCCTL_App_Notification+0x38c>
                        APP_DBG_MSG("--- ST MANUFACTURER ID --- \n\r");
 800afa4:	4824      	ldr	r0, [pc, #144]	; (800b038 <SVCCTL_App_Notification+0x3b4>)
 800afa6:	f001 fdd9 	bl	800cb5c <iprintf>
                        switch (adv_report_data[k + 3])
 800afaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afac:	3303      	adds	r3, #3
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	4413      	add	r3, r2
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	2b83      	cmp	r3, #131	; 0x83
 800afb6:	d123      	bne.n	800b000 <SVCCTL_App_Notification+0x37c>
                           APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n\r");
 800afb8:	4820      	ldr	r0, [pc, #128]	; (800b03c <SVCCTL_App_Notification+0x3b8>)
 800afba:	f001 fdcf 	bl	800cb5c <iprintf>
                           BleApplicationContext.DeviceServerFound = 0x01;
 800afbe:	4b20      	ldr	r3, [pc, #128]	; (800b040 <SVCCTL_App_Notification+0x3bc>)
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                           SERVER_REMOTE_ADDR_TYPE = le_advertising_event->Advertising_Report[0].Address_Type;
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	789a      	ldrb	r2, [r3, #2]
 800afca:	4b1e      	ldr	r3, [pc, #120]	; (800b044 <SVCCTL_App_Notification+0x3c0>)
 800afcc:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	78da      	ldrb	r2, [r3, #3]
 800afd2:	4b1d      	ldr	r3, [pc, #116]	; (800b048 <SVCCTL_App_Notification+0x3c4>)
 800afd4:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	791a      	ldrb	r2, [r3, #4]
 800afda:	4b1b      	ldr	r3, [pc, #108]	; (800b048 <SVCCTL_App_Notification+0x3c4>)
 800afdc:	705a      	strb	r2, [r3, #1]
                           SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	795a      	ldrb	r2, [r3, #5]
 800afe2:	4b19      	ldr	r3, [pc, #100]	; (800b048 <SVCCTL_App_Notification+0x3c4>)
 800afe4:	709a      	strb	r2, [r3, #2]
                           SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	799a      	ldrb	r2, [r3, #6]
 800afea:	4b17      	ldr	r3, [pc, #92]	; (800b048 <SVCCTL_App_Notification+0x3c4>)
 800afec:	70da      	strb	r2, [r3, #3]
                           SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	79da      	ldrb	r2, [r3, #7]
 800aff2:	4b15      	ldr	r3, [pc, #84]	; (800b048 <SVCCTL_App_Notification+0x3c4>)
 800aff4:	711a      	strb	r2, [r3, #4]
                           SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	7a1a      	ldrb	r2, [r3, #8]
 800affa:	4b13      	ldr	r3, [pc, #76]	; (800b048 <SVCCTL_App_Notification+0x3c4>)
 800affc:	715a      	strb	r2, [r3, #5]
                           break;
 800affe:	e000      	b.n	800b002 <SVCCTL_App_Notification+0x37e>
                            break;
 800b000:	bf00      	nop
                      break;
 800b002:	e005      	b.n	800b010 <SVCCTL_App_Notification+0x38c>
                      break;
 800b004:	bf00      	nop
 800b006:	e004      	b.n	800b012 <SVCCTL_App_Notification+0x38e>
                      break;
 800b008:	bf00      	nop
 800b00a:	e002      	b.n	800b012 <SVCCTL_App_Notification+0x38e>
                      break;
 800b00c:	bf00      	nop
 800b00e:	e000      	b.n	800b012 <SVCCTL_App_Notification+0x38e>
                      break;
 800b010:	bf00      	nop
                  k += adlength + 1;
 800b012:	7cfb      	ldrb	r3, [r7, #19]
 800b014:	3301      	adds	r3, #1
 800b016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b018:	4413      	add	r3, r2
 800b01a:	63fb      	str	r3, [r7, #60]	; 0x3c
                while(k < event_data_size)
 800b01c:	7ebb      	ldrb	r3, [r7, #26]
 800b01e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b020:	429a      	cmp	r2, r3
 800b022:	db80      	blt.n	800af26 <SVCCTL_App_Notification+0x2a2>
            break;
 800b024:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b026:	e002      	b.n	800b02e <SVCCTL_App_Notification+0x3aa>
      break;
 800b028:	bf00      	nop
 800b02a:	e000      	b.n	800b02e <SVCCTL_App_Notification+0x3aa>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b02c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b02e:	2301      	movs	r3, #1
}
 800b030:	4618      	mov	r0, r3
 800b032:	3744      	adds	r7, #68	; 0x44
 800b034:	46bd      	mov	sp, r7
 800b036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b038:	0800e0cc 	.word	0x0800e0cc
 800b03c:	0800e0ec 	.word	0x0800e0ec
 800b040:	200015b0 	.word	0x200015b0
 800b044:	200015aa 	.word	0x200015aa
 800b048:	200015a4 	.word	0x200015a4

0800b04c <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status(uint16_t Connection_Handle)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	4603      	mov	r3, r0
 800b054:	80fb      	strh	r3, [r7, #6]
  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800b056:	4b08      	ldr	r3, [pc, #32]	; (800b078 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800b058:	8adb      	ldrh	r3, [r3, #22]
 800b05a:	88fa      	ldrh	r2, [r7, #6]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d103      	bne.n	800b068 <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 800b060:	4b05      	ldr	r3, [pc, #20]	; (800b078 <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800b062:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b066:	e000      	b.n	800b06a <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800b068:	2300      	movs	r3, #0
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	370c      	adds	r7, #12
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	200015b0 	.word	0x200015b0

0800b07c <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void) //TODO button 1 pressed
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0 
  P2PC_APP_SW1_Button_Action();
#else 
  if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 800b080:	f000 fe70 	bl	800bd64 <P2P_Client_APP_Get_State>
 800b084:	4603      	mov	r3, r0
 800b086:	2b06      	cmp	r3, #6
 800b088:	d004      	beq.n	800b094 <APP_BLE_Key_Button1_Action+0x18>
  {
    UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 800b08a:	2100      	movs	r1, #0
 800b08c:	2001      	movs	r0, #1
 800b08e:	f001 fb83 	bl	800c798 <UTIL_SEQ_SetTask>
  else 
  {
    P2PC_APP_SW1_Button_Action();
  }   
#endif 
}
 800b092:	e001      	b.n	800b098 <APP_BLE_Key_Button1_Action+0x1c>
    P2PC_APP_SW1_Button_Action();
 800b094:	f000 fb36 	bl	800b704 <P2PC_APP_SW1_Button_Action>
}
 800b098:	bf00      	nop
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	af00      	add	r7, sp, #0
	P2PC_APP_SW2_Button_Action();
 800b0a0:	f000 fb38 	bl	800b714 <P2PC_APP_SW2_Button_Action>
}
 800b0a4:	bf00      	nop
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	af00      	add	r7, sp, #0
	P2PC_APP_SW3_Button_Action();
 800b0ac:	f000 fb3a 	bl	800b724 <P2PC_APP_SW3_Button_Action>
}
 800b0b0:	bf00      	nop
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b0ba:	4b06      	ldr	r3, [pc, #24]	; (800b0d4 <Ble_Tl_Init+0x20>)
 800b0bc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b0be:	4b06      	ldr	r3, [pc, #24]	; (800b0d8 <Ble_Tl_Init+0x24>)
 800b0c0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b0c2:	463b      	mov	r3, r7
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	4805      	ldr	r0, [pc, #20]	; (800b0dc <Ble_Tl_Init+0x28>)
 800b0c8:	f7fe fa7e 	bl	80095c8 <hci_init>

  return;
 800b0cc:	bf00      	nop
}
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	200300d8 	.word	0x200300d8
 800b0d8:	0800b5cd 	.word	0x0800b5cd
 800b0dc:	0800b595 	.word	0x0800b595

0800b0e0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0e2:	b08d      	sub	sp, #52	; 0x34
 800b0e4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;

  uint16_t a_appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b0ea:	2392      	movs	r3, #146	; 0x92
 800b0ec:	75fb      	strb	r3, [r7, #23]

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800b0ee:	489c      	ldr	r0, [pc, #624]	; (800b360 <Ble_Hci_Gap_Gatt_Init+0x280>)
 800b0f0:	f001 fda2 	bl	800cc38 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b0f4:	f7fd ff2d 	bl	8008f52 <hci_reset>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d005      	beq.n	800b10e <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800b102:	7dfb      	ldrb	r3, [r7, #23]
 800b104:	4619      	mov	r1, r3
 800b106:	4897      	ldr	r0, [pc, #604]	; (800b364 <Ble_Hci_Gap_Gatt_Init+0x284>)
 800b108:	f001 fd28 	bl	800cb5c <iprintf>
 800b10c:	e002      	b.n	800b114 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800b10e:	4896      	ldr	r0, [pc, #600]	; (800b368 <Ble_Hci_Gap_Gatt_Init+0x288>)
 800b110:	f001 fd92 	bl	800cc38 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b114:	f000 f9d8 	bl	800b4c8 <BleGetBdAddress>
 800b118:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	2106      	movs	r1, #6
 800b11e:	2000      	movs	r0, #0
 800b120:	f7fd fdd7 	bl	8008cd2 <aci_hal_write_config_data>
 800b124:	4603      	mov	r3, r0
 800b126:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d005      	beq.n	800b13a <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800b12e:	7dfb      	ldrb	r3, [r7, #23]
 800b130:	4619      	mov	r1, r3
 800b132:	488e      	ldr	r0, [pc, #568]	; (800b36c <Ble_Hci_Gap_Gatt_Init+0x28c>)
 800b134:	f001 fd12 	bl	800cb5c <iprintf>
 800b138:	e021      	b.n	800b17e <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
   else
   {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800b13a:	488d      	ldr	r0, [pc, #564]	; (800b370 <Ble_Hci_Gap_Gatt_Init+0x290>)
 800b13c:	f001 fd7c 	bl	800cc38 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	3305      	adds	r3, #5
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	4618      	mov	r0, r3
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	3304      	adds	r3, #4
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	461c      	mov	r4, r3
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	3303      	adds	r3, #3
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	461d      	mov	r5, r3
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	3302      	adds	r3, #2
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	3301      	adds	r3, #1
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	4619      	mov	r1, r3
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	9302      	str	r3, [sp, #8]
 800b16e:	9101      	str	r1, [sp, #4]
 800b170:	9200      	str	r2, [sp, #0]
 800b172:	462b      	mov	r3, r5
 800b174:	4622      	mov	r2, r4
 800b176:	4601      	mov	r1, r0
 800b178:	487e      	ldr	r0, [pc, #504]	; (800b374 <Ble_Hci_Gap_Gatt_Init+0x294>)
 800b17a:	f001 fcef 	bl	800cb5c <iprintf>
   }

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b17e:	4a7e      	ldr	r2, [pc, #504]	; (800b378 <Ble_Hci_Gap_Gatt_Init+0x298>)
 800b180:	2110      	movs	r1, #16
 800b182:	2018      	movs	r0, #24
 800b184:	f7fd fda5 	bl	8008cd2 <aci_hal_write_config_data>
 800b188:	4603      	mov	r3, r0
 800b18a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b18c:	7dfb      	ldrb	r3, [r7, #23]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d005      	beq.n	800b19e <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800b192:	7dfb      	ldrb	r3, [r7, #23]
 800b194:	4619      	mov	r1, r3
 800b196:	4879      	ldr	r0, [pc, #484]	; (800b37c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b198:	f001 fce0 	bl	800cb5c <iprintf>
 800b19c:	e002      	b.n	800b1a4 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800b19e:	4878      	ldr	r0, [pc, #480]	; (800b380 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b1a0:	f001 fd4a 	bl	800cc38 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b1a4:	4a77      	ldr	r2, [pc, #476]	; (800b384 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b1a6:	2110      	movs	r1, #16
 800b1a8:	2008      	movs	r0, #8
 800b1aa:	f7fd fd92 	bl	8008cd2 <aci_hal_write_config_data>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d005      	beq.n	800b1c4 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800b1b8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	4872      	ldr	r0, [pc, #456]	; (800b388 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800b1be:	f001 fccd 	bl	800cb5c <iprintf>
 800b1c2:	e002      	b.n	800b1ca <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800b1c4:	4871      	ldr	r0, [pc, #452]	; (800b38c <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800b1c6:	f001 fd37 	bl	800cc38 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b1ca:	2118      	movs	r1, #24
 800b1cc:	2001      	movs	r0, #1
 800b1ce:	f7fd fe05 	bl	8008ddc <aci_hal_set_tx_power_level>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b1d6:	7dfb      	ldrb	r3, [r7, #23]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d005      	beq.n	800b1e8 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
 800b1de:	4619      	mov	r1, r3
 800b1e0:	486b      	ldr	r0, [pc, #428]	; (800b390 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800b1e2:	f001 fcbb 	bl	800cb5c <iprintf>
 800b1e6:	e002      	b.n	800b1ee <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800b1e8:	486a      	ldr	r0, [pc, #424]	; (800b394 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800b1ea:	f001 fd25 	bl	800cc38 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b1ee:	f7fd fa0d 	bl	800860c <aci_gatt_init>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b1f6:	7dfb      	ldrb	r3, [r7, #23]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800b1fc:	7dfb      	ldrb	r3, [r7, #23]
 800b1fe:	4619      	mov	r1, r3
 800b200:	4865      	ldr	r0, [pc, #404]	; (800b398 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800b202:	f001 fcab 	bl	800cb5c <iprintf>
 800b206:	e002      	b.n	800b20e <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800b208:	4864      	ldr	r0, [pc, #400]	; (800b39c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800b20a:	f001 fd15 	bl	800cc38 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif /* BLE_CFG_PERIPHERAL == 1 */

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	f043 0304 	orr.w	r3, r3, #4
 800b218:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d02b      	beq.n	800b278 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = "P2P_C";
 800b220:	4b5f      	ldr	r3, [pc, #380]	; (800b3a0 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800b222:	60bb      	str	r3, [r7, #8]

    ret = aci_gap_init(role,
 800b224:	1dba      	adds	r2, r7, #6
 800b226:	7bf8      	ldrb	r0, [r7, #15]
 800b228:	1cbb      	adds	r3, r7, #2
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	1d3b      	adds	r3, r7, #4
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	4613      	mov	r3, r2
 800b232:	2207      	movs	r2, #7
 800b234:	2100      	movs	r1, #0
 800b236:	f7fc ffa9 	bl	800818c <aci_gap_init>
 800b23a:	4603      	mov	r3, r0
 800b23c:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800b23e:	7dfb      	ldrb	r3, [r7, #23]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d005      	beq.n	800b250 <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800b244:	7dfb      	ldrb	r3, [r7, #23]
 800b246:	4619      	mov	r1, r3
 800b248:	4856      	ldr	r0, [pc, #344]	; (800b3a4 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800b24a:	f001 fc87 	bl	800cb5c <iprintf>
 800b24e:	e002      	b.n	800b256 <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800b250:	4855      	ldr	r0, [pc, #340]	; (800b3a8 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800b252:	f001 fcf1 	bl	800cc38 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b256:	88fc      	ldrh	r4, [r7, #6]
 800b258:	88bd      	ldrh	r5, [r7, #4]
 800b25a:	68b8      	ldr	r0, [r7, #8]
 800b25c:	f7f4 ff9a 	bl	8000194 <strlen>
 800b260:	4603      	mov	r3, r0
 800b262:	b2da      	uxtb	r2, r3
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	4613      	mov	r3, r2
 800b26a:	2200      	movs	r2, #0
 800b26c:	4629      	mov	r1, r5
 800b26e:	4620      	mov	r0, r4
 800b270:	f7fd f9f1 	bl	8008656 <aci_gatt_update_char_value>
 800b274:	4603      	mov	r3, r0
 800b276:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b278:	88f8      	ldrh	r0, [r7, #6]
 800b27a:	8879      	ldrh	r1, [r7, #2]
 800b27c:	463b      	mov	r3, r7
 800b27e:	9300      	str	r3, [sp, #0]
 800b280:	2302      	movs	r3, #2
 800b282:	2200      	movs	r2, #0
 800b284:	f7fd f9e7 	bl	8008656 <aci_gatt_update_char_value>
 800b288:	4603      	mov	r3, r0
 800b28a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b28c:	4b47      	ldr	r3, [pc, #284]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b28e:	2201      	movs	r2, #1
 800b290:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b292:	4b46      	ldr	r3, [pc, #280]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	4618      	mov	r0, r3
 800b298:	f7fc fe60 	bl	8007f5c <aci_gap_set_io_capability>
 800b29c:	4603      	mov	r3, r0
 800b29e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d005      	beq.n	800b2b2 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	4841      	ldr	r0, [pc, #260]	; (800b3b0 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800b2ac:	f001 fc56 	bl	800cb5c <iprintf>
 800b2b0:	e002      	b.n	800b2b8 <Ble_Hci_Gap_Gatt_Init+0x1d8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800b2b2:	4840      	ldr	r0, [pc, #256]	; (800b3b4 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800b2b4:	f001 fcc0 	bl	800cc38 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b2b8:	4b3c      	ldr	r3, [pc, #240]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b2be:	4b3b      	ldr	r3, [pc, #236]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2c0:	2208      	movs	r2, #8
 800b2c2:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b2c4:	4b39      	ldr	r3, [pc, #228]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2c6:	2210      	movs	r2, #16
 800b2c8:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b2ca:	4b38      	ldr	r3, [pc, #224]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b2d0:	4b36      	ldr	r3, [pc, #216]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2d2:	4a39      	ldr	r2, [pc, #228]	; (800b3b8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800b2d4:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b2d6:	4b35      	ldr	r3, [pc, #212]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2d8:	2201      	movs	r2, #1
 800b2da:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b2dc:	4b33      	ldr	r3, [pc, #204]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2de:	789c      	ldrb	r4, [r3, #2]
 800b2e0:	4b32      	ldr	r3, [pc, #200]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2e2:	785d      	ldrb	r5, [r3, #1]
 800b2e4:	4b31      	ldr	r3, [pc, #196]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2e6:	791b      	ldrb	r3, [r3, #4]
 800b2e8:	4a30      	ldr	r2, [pc, #192]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2ea:	7952      	ldrb	r2, [r2, #5]
 800b2ec:	492f      	ldr	r1, [pc, #188]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2ee:	78c9      	ldrb	r1, [r1, #3]
 800b2f0:	482e      	ldr	r0, [pc, #184]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b2f2:	6880      	ldr	r0, [r0, #8]
 800b2f4:	2600      	movs	r6, #0
 800b2f6:	9604      	str	r6, [sp, #16]
 800b2f8:	9003      	str	r0, [sp, #12]
 800b2fa:	9102      	str	r1, [sp, #8]
 800b2fc:	9201      	str	r2, [sp, #4]
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	2300      	movs	r3, #0
 800b302:	2201      	movs	r2, #1
 800b304:	4629      	mov	r1, r5
 800b306:	4620      	mov	r0, r4
 800b308:	f7fc fe7c 	bl	8008004 <aci_gap_set_authentication_requirement>
 800b30c:	4603      	mov	r3, r0
 800b30e:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800b310:	7dfb      	ldrb	r3, [r7, #23]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d005      	beq.n	800b322 <Ble_Hci_Gap_Gatt_Init+0x242>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800b316:	7dfb      	ldrb	r3, [r7, #23]
 800b318:	4619      	mov	r1, r3
 800b31a:	4828      	ldr	r0, [pc, #160]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800b31c:	f001 fc1e 	bl	800cb5c <iprintf>
 800b320:	e002      	b.n	800b328 <Ble_Hci_Gap_Gatt_Init+0x248>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800b322:	4827      	ldr	r0, [pc, #156]	; (800b3c0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800b324:	f001 fc88 	bl	800cc38 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b328:	4b20      	ldr	r3, [pc, #128]	; (800b3ac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b32a:	789b      	ldrb	r3, [r3, #2]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00f      	beq.n	800b350 <Ble_Hci_Gap_Gatt_Init+0x270>
  {
    ret = aci_gap_configure_whitelist();
 800b330:	f7fc ffd9 	bl	80082e6 <aci_gap_configure_filter_accept_list>
 800b334:	4603      	mov	r3, r0
 800b336:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d005      	beq.n	800b34a <Ble_Hci_Gap_Gatt_Init+0x26a>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	4619      	mov	r1, r3
 800b342:	4820      	ldr	r0, [pc, #128]	; (800b3c4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800b344:	f001 fc0a 	bl	800cb5c <iprintf>
 800b348:	e002      	b.n	800b350 <Ble_Hci_Gap_Gatt_Init+0x270>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800b34a:	481f      	ldr	r0, [pc, #124]	; (800b3c8 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800b34c:	f001 fc74 	bl	800cc38 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800b350:	481e      	ldr	r0, [pc, #120]	; (800b3cc <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800b352:	f001 fc03 	bl	800cb5c <iprintf>
}
 800b356:	bf00      	nop
 800b358:	371c      	adds	r7, #28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b35e:	bf00      	nop
 800b360:	0800e110 	.word	0x0800e110
 800b364:	0800e13c 	.word	0x0800e13c
 800b368:	0800e16c 	.word	0x0800e16c
 800b36c:	0800e18c 	.word	0x0800e18c
 800b370:	0800e1e8 	.word	0x0800e1e8
 800b374:	0800e234 	.word	0x0800e234
 800b378:	0800ed0c 	.word	0x0800ed0c
 800b37c:	0800e270 	.word	0x0800e270
 800b380:	0800e2c8 	.word	0x0800e2c8
 800b384:	0800ed1c 	.word	0x0800ed1c
 800b388:	0800e310 	.word	0x0800e310
 800b38c:	0800e368 	.word	0x0800e368
 800b390:	0800e3b0 	.word	0x0800e3b0
 800b394:	0800e3f0 	.word	0x0800e3f0
 800b398:	0800e420 	.word	0x0800e420
 800b39c:	0800e454 	.word	0x0800e454
 800b3a0:	0800e478 	.word	0x0800e478
 800b3a4:	0800e480 	.word	0x0800e480
 800b3a8:	0800e4b0 	.word	0x0800e4b0
 800b3ac:	200015b0 	.word	0x200015b0
 800b3b0:	0800e4d0 	.word	0x0800e4d0
 800b3b4:	0800e510 	.word	0x0800e510
 800b3b8:	0001b207 	.word	0x0001b207
 800b3bc:	0800e540 	.word	0x0800e540
 800b3c0:	0800e58c 	.word	0x0800e58c
 800b3c4:	0800e5c8 	.word	0x0800e5c8
 800b3c8:	0800e608 	.word	0x0800e608
 800b3cc:	0800e638 	.word	0x0800e638

0800b3d0 <Scan_Request>:

static void Scan_Request(void)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800b3d6:	4b13      	ldr	r3, [pc, #76]	; (800b424 <Scan_Request+0x54>)
 800b3d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3dc:	2b06      	cmp	r3, #6
 800b3de:	d01d      	beq.n	800b41c <Scan_Request+0x4c>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
    BSP_LED_On(LED_BLUE);
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	f7f7 fb4d 	bl	8002a80 <BSP_LED_On>
    APP_DBG_MSG("LED BLUE ON\n");
 800b3e6:	4810      	ldr	r0, [pc, #64]	; (800b428 <Scan_Request+0x58>)
 800b3e8:	f001 fc26 	bl	800cc38 <puts>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, CFG_BLE_ADDRESS_TYPE, 1);
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f44f 7148 	mov.w	r1, #800	; 0x320
 800b3f4:	f44f 7048 	mov.w	r0, #800	; 0x320
 800b3f8:	f7fc ff99 	bl	800832e <aci_gap_start_general_discovery_proc>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 800b400:	79fb      	ldrb	r3, [r7, #7]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d103      	bne.n	800b40e <Scan_Request+0x3e>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 800b406:	4809      	ldr	r0, [pc, #36]	; (800b42c <Scan_Request+0x5c>)
 800b408:	f001 fba8 	bl	800cb5c <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 800b40c:	e006      	b.n	800b41c <Scan_Request+0x4c>
      BSP_LED_On(LED_RED);
 800b40e:	2002      	movs	r0, #2
 800b410:	f7f7 fb36 	bl	8002a80 <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 800b414:	4806      	ldr	r0, [pc, #24]	; (800b430 <Scan_Request+0x60>)
 800b416:	f001 fba1 	bl	800cb5c <iprintf>
  return;
 800b41a:	bf00      	nop
 800b41c:	bf00      	nop
}
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	200015b0 	.word	0x200015b0
 800b428:	0800e664 	.word	0x0800e664
 800b42c:	0800e670 	.word	0x0800e670
 800b430:	0800e6a0 	.word	0x0800e6a0

0800b434 <Connect_Request>:

static void Connect_Request(void)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b08a      	sub	sp, #40	; 0x28
 800b438:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 800b43a:	481b      	ldr	r0, [pc, #108]	; (800b4a8 <Connect_Request+0x74>)
 800b43c:	f001 fb8e 	bl	800cb5c <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800b440:	4b1a      	ldr	r3, [pc, #104]	; (800b4ac <Connect_Request+0x78>)
 800b442:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b446:	2b06      	cmp	r3, #6
 800b448:	d029      	beq.n	800b49e <Connect_Request+0x6a>
  {
    result = aci_gap_create_connection(SCAN_P,
 800b44a:	4b19      	ldr	r3, [pc, #100]	; (800b4b0 <Connect_Request+0x7c>)
 800b44c:	781a      	ldrb	r2, [r3, #0]
 800b44e:	2310      	movs	r3, #16
 800b450:	9306      	str	r3, [sp, #24]
 800b452:	2310      	movs	r3, #16
 800b454:	9305      	str	r3, [sp, #20]
 800b456:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b45a:	9304      	str	r3, [sp, #16]
 800b45c:	2300      	movs	r3, #0
 800b45e:	9303      	str	r3, [sp, #12]
 800b460:	2350      	movs	r3, #80	; 0x50
 800b462:	9302      	str	r3, [sp, #8]
 800b464:	2328      	movs	r3, #40	; 0x28
 800b466:	9301      	str	r3, [sp, #4]
 800b468:	2300      	movs	r3, #0
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	4b11      	ldr	r3, [pc, #68]	; (800b4b4 <Connect_Request+0x80>)
 800b46e:	f44f 7148 	mov.w	r1, #800	; 0x320
 800b472:	f44f 7048 	mov.w	r0, #800	; 0x320
 800b476:	f7fc ffee 	bl	8008456 <aci_gap_create_connection>
 800b47a:	4603      	mov	r3, r0
 800b47c:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800b47e:	79fb      	ldrb	r3, [r7, #7]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d104      	bne.n	800b48e <Connect_Request+0x5a>
    {
      /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

      /* USER CODE END BLE_CONNECT_SUCCESS */
      BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800b484:	4b09      	ldr	r3, [pc, #36]	; (800b4ac <Connect_Request+0x78>)
 800b486:	2204      	movs	r2, #4
 800b488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800b48c:	e007      	b.n	800b49e <Connect_Request+0x6a>
      BSP_LED_On(LED_RED);
 800b48e:	2002      	movs	r0, #2
 800b490:	f7f7 faf6 	bl	8002a80 <BSP_LED_On>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b494:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <Connect_Request+0x78>)
 800b496:	2200      	movs	r2, #0
 800b498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 800b49c:	bf00      	nop
 800b49e:	bf00      	nop
}
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	0800e6d0 	.word	0x0800e6d0
 800b4ac:	200015b0 	.word	0x200015b0
 800b4b0:	200015aa 	.word	0x200015aa
 800b4b4:	200015a4 	.word	0x200015a4

0800b4b8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 800b4bc:	2001      	movs	r0, #1
 800b4be:	f7f7 faf9 	bl	8002ab4 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 800b4c2:	bf00      	nop
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b4ce:	f7ff fb35 	bl	800ab3c <LL_FLASH_GetUDN>
 800b4d2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4da:	d023      	beq.n	800b524 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b4dc:	f7ff fb46 	bl	800ab6c <LL_FLASH_GetSTCompanyID>
 800b4e0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b4e2:	f7ff fb37 	bl	800ab54 <LL_FLASH_GetDeviceID>
 800b4e6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	4b16      	ldr	r3, [pc, #88]	; (800b548 <BleGetBdAddress+0x80>)
 800b4ee:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	0a1b      	lsrs	r3, r3, #8
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	4b14      	ldr	r3, [pc, #80]	; (800b548 <BleGetBdAddress+0x80>)
 800b4f8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	4b12      	ldr	r3, [pc, #72]	; (800b548 <BleGetBdAddress+0x80>)
 800b500:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	b2da      	uxtb	r2, r3
 800b506:	4b10      	ldr	r3, [pc, #64]	; (800b548 <BleGetBdAddress+0x80>)
 800b508:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	0a1b      	lsrs	r3, r3, #8
 800b50e:	b2da      	uxtb	r2, r3
 800b510:	4b0d      	ldr	r3, [pc, #52]	; (800b548 <BleGetBdAddress+0x80>)
 800b512:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	0c1b      	lsrs	r3, r3, #16
 800b518:	b2da      	uxtb	r2, r3
 800b51a:	4b0b      	ldr	r3, [pc, #44]	; (800b548 <BleGetBdAddress+0x80>)
 800b51c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b51e:	4b0a      	ldr	r3, [pc, #40]	; (800b548 <BleGetBdAddress+0x80>)
 800b520:	617b      	str	r3, [r7, #20]
 800b522:	e00b      	b.n	800b53c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b524:	2000      	movs	r0, #0
 800b526:	f7fe fe21 	bl	800a16c <OTP_Read>
 800b52a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d002      	beq.n	800b538 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	617b      	str	r3, [r7, #20]
 800b536:	e001      	b.n	800b53c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b538:	4b04      	ldr	r3, [pc, #16]	; (800b54c <BleGetBdAddress+0x84>)
 800b53a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b53c:	697b      	ldr	r3, [r7, #20]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3718      	adds	r7, #24
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	2000159c 	.word	0x2000159c
 800b54c:	0800ed04 	.word	0x0800ed04

0800b550 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b558:	2100      	movs	r1, #0
 800b55a:	2010      	movs	r0, #16
 800b55c:	f001 f91c 	bl	800c798 <UTIL_SEQ_SetTask>
  return;
 800b560:	bf00      	nop
}
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b570:	2001      	movs	r0, #1
 800b572:	f001 f97d 	bl	800c870 <UTIL_SEQ_SetEvt>
  return;
 800b576:	bf00      	nop
}
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b586:	2001      	movs	r0, #1
 800b588:	f001 f992 	bl	800c8b0 <UTIL_SEQ_WaitEvt>
  return;
 800b58c:	bf00      	nop
}
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fd feac 	bl	8009304 <SVCCTL_UserEvtRx>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b5b0:	7afb      	ldrb	r3, [r7, #11]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b5bc:	e003      	b.n	800b5c6 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	701a      	strb	r2, [r3, #0]
  return;
 800b5c4:	bf00      	nop
}
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800b5d6:	79fb      	ldrb	r3, [r7, #7]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <BLE_StatusNot+0x16>
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d006      	beq.n	800b5ee <BLE_StatusNot+0x22>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 800b5e0:	e00b      	b.n	800b5fa <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b5e2:	23ff      	movs	r3, #255	; 0xff
 800b5e4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f001 f902 	bl	800c7f0 <UTIL_SEQ_PauseTask>
      break;
 800b5ec:	e005      	b.n	800b5fa <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b5ee:	23ff      	movs	r3, #255	; 0xff
 800b5f0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f001 f91c 	bl	800c830 <UTIL_SEQ_ResumeTask>
      break;
 800b5f8:	bf00      	nop
  }
  return;
 800b5fa:	bf00      	nop
}
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
	...

0800b604 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
  uint8_t index =0;
 800b60a:	2300      	movs	r3, #0
 800b60c:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */
  //TODO register tasks to sequencer
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 800b60e:	4a1c      	ldr	r2, [pc, #112]	; (800b680 <P2PC_APP_Init+0x7c>)
 800b610:	2100      	movs	r1, #0
 800b612:	2004      	movs	r0, #4
 800b614:	f001 f89e 	bl	800c754 <UTIL_SEQ_RegTask>
  //UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button1_Trigger_Received );
 800b618:	4a1a      	ldr	r2, [pc, #104]	; (800b684 <P2PC_APP_Init+0x80>)
 800b61a:	2100      	movs	r1, #0
 800b61c:	2020      	movs	r0, #32
 800b61e:	f001 f899 	bl	800c754 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button2_Trigger_Received );
 800b622:	4a19      	ldr	r2, [pc, #100]	; (800b688 <P2PC_APP_Init+0x84>)
 800b624:	2100      	movs	r1, #0
 800b626:	2040      	movs	r0, #64	; 0x40
 800b628:	f001 f894 	bl	800c754 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW3_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button3_Trigger_Received );
 800b62c:	4a17      	ldr	r2, [pc, #92]	; (800b68c <P2PC_APP_Init+0x88>)
 800b62e:	2100      	movs	r1, #0
 800b630:	2080      	movs	r0, #128	; 0x80
 800b632:	f001 f88f 	bl	800c754 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  //TODO initialize structs
  P2P_Client_App_Context.Notification_Status=0;
 800b636:	4b16      	ldr	r3, [pc, #88]	; (800b690 <P2PC_APP_Init+0x8c>)
 800b638:	2200      	movs	r2, #0
 800b63a:	701a      	strb	r2, [r3, #0]
  P2P_Client_App_Context.ConnectionHandle =  0x00;
 800b63c:	4b14      	ldr	r3, [pc, #80]	; (800b690 <P2PC_APP_Init+0x8c>)
 800b63e:	2200      	movs	r2, #0
 800b640:	80da      	strh	r2, [r3, #6]

  P2P_Client_App_Context.GoalControl.GoalSpeed=0; //goal speed is 0
 800b642:	4b13      	ldr	r3, [pc, #76]	; (800b690 <P2PC_APP_Init+0x8c>)
 800b644:	2200      	movs	r2, #0
 800b646:	805a      	strh	r2, [r3, #2]
  P2P_Client_App_Context.MotorStateControl.MotorState=STOPPED;
 800b648:	4b11      	ldr	r3, [pc, #68]	; (800b690 <P2PC_APP_Init+0x8c>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	711a      	strb	r2, [r3, #4]
  //P2P_Client_App_Context.LedControl.Device_Led_Selection=0x00;/* device Led */
  //P2P_Client_App_Context.LedControl.Led1=0x00; /* led OFF */
  //P2P_Client_App_Context.ButtonStatus.Device_Button_Selection=0x01;/* Device1 */
  //P2P_Client_App_Context.ButtonStatus.Button1=0x00;
/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800b64e:	2300      	movs	r3, #0
 800b650:	71fb      	strb	r3, [r7, #7]
 800b652:	e008      	b.n	800b666 <P2PC_APP_Init+0x62>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	4a0f      	ldr	r2, [pc, #60]	; (800b694 <P2PC_APP_Init+0x90>)
 800b658:	011b      	lsls	r3, r3, #4
 800b65a:	4413      	add	r3, r2
 800b65c:	2200      	movs	r2, #0
 800b65e:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	3301      	adds	r3, #1
 800b664:	71fb      	strb	r3, [r7, #7]
 800b666:	79fb      	ldrb	r3, [r7, #7]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d0f3      	beq.n	800b654 <P2PC_APP_Init+0x50>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 800b66c:	480a      	ldr	r0, [pc, #40]	; (800b698 <P2PC_APP_Init+0x94>)
 800b66e:	f7fd fe2f 	bl	80092d0 <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 800b672:	480a      	ldr	r0, [pc, #40]	; (800b69c <P2PC_APP_Init+0x98>)
 800b674:	f001 fae0 	bl	800cc38 <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 800b678:	bf00      	nop
}
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	0800bead 	.word	0x0800bead
 800b684:	0800bdf1 	.word	0x0800bdf1
 800b688:	0800be2d 	.word	0x0800be2d
 800b68c:	0800be6d 	.word	0x0800be6d
 800b690:	20001650 	.word	0x20001650
 800b694:	20001640 	.word	0x20001640
 800b698:	0800b735 	.word	0x0800b735
 800b69c:	0800e6fc 	.word	0x0800e6fc

0800b6a0 <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <P2PC_APP_Notification+0x16>
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d005      	beq.n	800b6c0 <P2PC_APP_Notification+0x20>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 800b6b4:	e01e      	b.n	800b6f4 <P2PC_APP_Notification+0x54>
    P2P_Client_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	885a      	ldrh	r2, [r3, #2]
 800b6ba:	4b10      	ldr	r3, [pc, #64]	; (800b6fc <P2PC_APP_Notification+0x5c>)
 800b6bc:	80da      	strh	r2, [r3, #6]
      break;
 800b6be:	e019      	b.n	800b6f4 <P2PC_APP_Notification+0x54>
      uint8_t index = 0;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	73fb      	strb	r3, [r7, #15]
      P2P_Client_App_Context.ConnectionHandle =  0x00;
 800b6c4:	4b0d      	ldr	r3, [pc, #52]	; (800b6fc <P2PC_APP_Notification+0x5c>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	80da      	strh	r2, [r3, #6]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b6ca:	e005      	b.n	800b6d8 <P2PC_APP_Notification+0x38>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	4a0c      	ldr	r2, [pc, #48]	; (800b700 <P2PC_APP_Notification+0x60>)
 800b6d0:	011b      	lsls	r3, r3, #4
 800b6d2:	4413      	add	r3, r2
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d106      	bne.n	800b6ec <P2PC_APP_Notification+0x4c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800b6de:	7bfb      	ldrb	r3, [r7, #15]
 800b6e0:	4a07      	ldr	r2, [pc, #28]	; (800b700 <P2PC_APP_Notification+0x60>)
 800b6e2:	011b      	lsls	r3, r3, #4
 800b6e4:	4413      	add	r3, r2
 800b6e6:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1ef      	bne.n	800b6cc <P2PC_APP_Notification+0x2c>
      BSP_LED_Off(LED_BLUE); //TODO disconnect event
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	f7f7 f9e1 	bl	8002ab4 <BSP_LED_Off>
      break;
 800b6f2:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 800b6f4:	bf00      	nop
}
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	20001650 	.word	0x20001650
 800b700:	20001640 	.word	0x20001640

0800b704 <P2PC_APP_SW1_Button_Action>:
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void) //called from button interrupt
{
 800b704:	b580      	push	{r7, lr}
 800b706:	af00      	add	r7, sp, #0
	//TODO run task from sequencer
  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800b708:	2100      	movs	r1, #0
 800b70a:	2020      	movs	r0, #32
 800b70c:	f001 f844 	bl	800c798 <UTIL_SEQ_SetTask>

}
 800b710:	bf00      	nop
 800b712:	bd80      	pop	{r7, pc}

0800b714 <P2PC_APP_SW2_Button_Action>:

void P2PC_APP_SW2_Button_Action(void) //called from button interrupt
{
 800b714:	b580      	push	{r7, lr}
 800b716:	af00      	add	r7, sp, #0
	//TODO run task from sequencer
  UTIL_SEQ_SetTask(1<<CFG_TASK_SW2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800b718:	2100      	movs	r1, #0
 800b71a:	2040      	movs	r0, #64	; 0x40
 800b71c:	f001 f83c 	bl	800c798 <UTIL_SEQ_SetTask>

}
 800b720:	bf00      	nop
 800b722:	bd80      	pop	{r7, pc}

0800b724 <P2PC_APP_SW3_Button_Action>:

void P2PC_APP_SW3_Button_Action(void) //called from button interrupt
{
 800b724:	b580      	push	{r7, lr}
 800b726:	af00      	add	r7, sp, #0
	//TODO run task from sequencer
  UTIL_SEQ_SetTask(1<<CFG_TASK_SW3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800b728:	2100      	movs	r1, #0
 800b72a:	2080      	movs	r0, #128	; 0x80
 800b72c:	f001 f834 	bl	800c798 <UTIL_SEQ_SetTask>

}
 800b730:	bf00      	nop
 800b732:	bd80      	pop	{r7, pc}

0800b734 <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b094      	sub	sp, #80	; 0x50
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800b73c:	2300      	movs	r3, #0
 800b73e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	3301      	adds	r3, #1
 800b746:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 800b748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	2bff      	cmp	r3, #255	; 0xff
 800b74e:	f040 82b4 	bne.w	800bcba <Event_Handler+0x586>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b754:	3302      	adds	r3, #2
 800b756:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blecore_evt->ecode)
 800b758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800b762:	2b0c      	cmp	r3, #12
 800b764:	f200 829d 	bhi.w	800bca2 <Event_Handler+0x56e>
 800b768:	a201      	add	r2, pc, #4	; (adr r2, 800b770 <Event_Handler+0x3c>)
 800b76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76e:	bf00      	nop
 800b770:	0800bab5 	.word	0x0800bab5
 800b774:	0800bca3 	.word	0x0800bca3
 800b778:	0800b95b 	.word	0x0800b95b
 800b77c:	0800bca3 	.word	0x0800bca3
 800b780:	0800bca3 	.word	0x0800bca3
 800b784:	0800bca3 	.word	0x0800bca3
 800b788:	0800b7a5 	.word	0x0800b7a5
 800b78c:	0800bca3 	.word	0x0800bca3
 800b790:	0800bca3 	.word	0x0800bca3
 800b794:	0800bca3 	.word	0x0800bca3
 800b798:	0800bca3 	.word	0x0800bca3
 800b79c:	0800bbd1 	.word	0x0800bbd1
 800b7a0:	0800bc4d 	.word	0x0800bc4d
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800b7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a6:	3302      	adds	r3, #2
 800b7a8:	633b      	str	r3, [r7, #48]	; 0x30
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	781a      	ldrb	r2, [r3, #0]
 800b7ae:	785b      	ldrb	r3, [r3, #1]
 800b7b0:	021b      	lsls	r3, r3, #8
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b7bc:	e02e      	b.n	800b81c <Event_Handler+0xe8>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800b7be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b7c2:	4ab8      	ldr	r2, [pc, #736]	; (800baa4 <Event_Handler+0x370>)
 800b7c4:	011b      	lsls	r3, r3, #4
 800b7c6:	4413      	add	r3, r2
 800b7c8:	3302      	adds	r3, #2
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fc3d 	bl	800b04c <APP_BLE_Get_Client_Connection_Status>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 800b7d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b7dc:	4ab1      	ldr	r2, [pc, #708]	; (800baa4 <Event_Handler+0x370>)
 800b7de:	011b      	lsls	r3, r3, #4
 800b7e0:	4413      	add	r3, r2
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	2b06      	cmp	r3, #6
 800b7e6:	d114      	bne.n	800b812 <Event_Handler+0xde>
 800b7e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d110      	bne.n	800b812 <Event_Handler+0xde>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 800b7f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b7f4:	4aab      	ldr	r2, [pc, #684]	; (800baa4 <Event_Handler+0x370>)
 800b7f6:	011b      	lsls	r3, r3, #4
 800b7f8:	4413      	add	r3, r2
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 800b7fe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b802:	4aa8      	ldr	r2, [pc, #672]	; (800baa4 <Event_Handler+0x370>)
 800b804:	011b      	lsls	r3, r3, #4
 800b806:	4413      	add	r3, r2
 800b808:	3302      	adds	r3, #2
 800b80a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b80e:	801a      	strh	r2, [r3, #0]
              break;
 800b810:	e010      	b.n	800b834 <Event_Handler+0x100>
            }
            index++;
 800b812:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b816:	3301      	adds	r3, #1
 800b818:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b81c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b820:	2b00      	cmp	r3, #0
 800b822:	d107      	bne.n	800b834 <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 800b824:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b828:	4a9e      	ldr	r2, [pc, #632]	; (800baa4 <Event_Handler+0x370>)
 800b82a:	011b      	lsls	r3, r3, #4
 800b82c:	4413      	add	r3, r2
 800b82e:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1c4      	bne.n	800b7be <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800b834:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f040 8234 	bne.w	800bca6 <Event_Handler+0x572>
          {
            aP2PClientContext[index].connHandle= handle;
 800b83e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b842:	4a98      	ldr	r2, [pc, #608]	; (800baa4 <Event_Handler+0x370>)
 800b844:	011b      	lsls	r3, r3, #4
 800b846:	4413      	add	r3, r2
 800b848:	3302      	adds	r3, #2
 800b84a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b84c:	801a      	strh	r2, [r3, #0]

            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800b84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b850:	78da      	ldrb	r2, [r3, #3]
 800b852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b854:	789b      	ldrb	r3, [r3, #2]
 800b856:	fbb2 f3f3 	udiv	r3, r2, r3
 800b85a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)
          if (pr->Attribute_Data_Length == 20)
 800b85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b860:	789b      	ldrb	r3, [r3, #2]
 800b862:	2b14      	cmp	r3, #20
 800b864:	f040 821f 	bne.w	800bca6 <Event_Handler+0x572>
          {
            idx = 16;
 800b868:	2310      	movs	r3, #16
 800b86a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
#else
          if (pr->Attribute_Data_Length == 6)
          {
            idx = 4;
#endif
              for (i=0; i<numServ; i++)
 800b86e:	2300      	movs	r3, #0
 800b870:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b874:	e06a      	b.n	800b94c <Event_Handler+0x218>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800b876:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b87a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b87c:	4413      	add	r3, r2
 800b87e:	791b      	ldrb	r3, [r3, #4]
 800b880:	b29a      	uxth	r2, r3
 800b882:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b888:	440b      	add	r3, r1
 800b88a:	3304      	adds	r3, #4
 800b88c:	3301      	adds	r3, #1
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	b29b      	uxth	r3, r3
 800b892:	021b      	lsls	r3, r3, #8
 800b894:	b29b      	uxth	r3, r3
 800b896:	4313      	orrs	r3, r2
 800b898:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 800b89a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b89c:	f64f 6240 	movw	r2, #65088	; 0xfe40
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d149      	bne.n	800b938 <Event_Handler+0x204>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 800b8a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b8a8:	4a7e      	ldr	r2, [pc, #504]	; (800baa4 <Event_Handler+0x370>)
 800b8aa:	011b      	lsls	r3, r3, #4
 800b8ac:	4413      	add	r3, r2
 800b8ae:	3302      	adds	r3, #2
 800b8b0:	881b      	ldrh	r3, [r3, #0]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	487c      	ldr	r0, [pc, #496]	; (800baa8 <Event_Handler+0x374>)
 800b8b6:	f001 f951 	bl	800cb5c <iprintf>
#endif
#if (UUID_128BIT_FORMAT==1)
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800b8ba:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b8be:	3b10      	subs	r3, #16
 800b8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c2:	4413      	add	r3, r2
 800b8c4:	791b      	ldrb	r3, [r3, #4]
 800b8c6:	b299      	uxth	r1, r3
 800b8c8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b8cc:	3b10      	subs	r3, #16
 800b8ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8d0:	4413      	add	r3, r2
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	021b      	lsls	r3, r3, #8
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	b291      	uxth	r1, r2
 800b8e6:	4a6f      	ldr	r2, [pc, #444]	; (800baa4 <Event_Handler+0x370>)
 800b8e8:	011b      	lsls	r3, r3, #4
 800b8ea:	4413      	add	r3, r2
 800b8ec:	3304      	adds	r3, #4
 800b8ee:	460a      	mov	r2, r1
 800b8f0:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800b8f2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b8f6:	3b0e      	subs	r3, #14
 800b8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8fa:	4413      	add	r3, r2
 800b8fc:	791b      	ldrb	r3, [r3, #4]
 800b8fe:	b299      	uxth	r1, r3
 800b900:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b904:	3b0e      	subs	r3, #14
 800b906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b908:	4413      	add	r3, r2
 800b90a:	3304      	adds	r3, #4
 800b90c:	3301      	adds	r3, #1
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	b29b      	uxth	r3, r3
 800b912:	021b      	lsls	r3, r3, #8
 800b914:	b29a      	uxth	r2, r3
 800b916:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b91a:	430a      	orrs	r2, r1
 800b91c:	b291      	uxth	r1, r2
 800b91e:	4a61      	ldr	r2, [pc, #388]	; (800baa4 <Event_Handler+0x370>)
 800b920:	011b      	lsls	r3, r3, #4
 800b922:	4413      	add	r3, r2
 800b924:	3306      	adds	r3, #6
 800b926:	460a      	mov	r2, r1
 800b928:	801a      	strh	r2, [r3, #0]
#else
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800b92a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b92e:	4a5d      	ldr	r2, [pc, #372]	; (800baa4 <Event_Handler+0x370>)
 800b930:	011b      	lsls	r3, r3, #4
 800b932:	4413      	add	r3, r2
 800b934:	2208      	movs	r2, #8
 800b936:	701a      	strb	r2, [r3, #0]
                }
                idx += 6;
 800b938:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b93c:	3306      	adds	r3, #6
 800b93e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800b942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b946:	3301      	adds	r3, #1
 800b948:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b94c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800b950:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b954:	429a      	cmp	r2, r3
 800b956:	d38e      	bcc.n	800b876 <Event_Handler+0x142>
              }
            }
          }
        }
        break;
 800b958:	e1a5      	b.n	800bca6 <Event_Handler+0x572>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800b95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b95c:	3302      	adds	r3, #2
 800b95e:	627b      	str	r3, [r7, #36]	; 0x24
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 800b960:	2300      	movs	r3, #0
 800b962:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b966:	e004      	b.n	800b972 <Event_Handler+0x23e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800b968:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b96c:	3301      	adds	r3, #1
 800b96e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b972:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10b      	bne.n	800b992 <Event_Handler+0x25e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800b97a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b97e:	4a49      	ldr	r2, [pc, #292]	; (800baa4 <Event_Handler+0x370>)
 800b980:	011b      	lsls	r3, r3, #4
 800b982:	4413      	add	r3, r2
 800b984:	3302      	adds	r3, #2
 800b986:	881a      	ldrh	r2, [r3, #0]
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	881b      	ldrh	r3, [r3, #0]
 800b98c:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b98e:	429a      	cmp	r2, r3
 800b990:	d1ea      	bne.n	800b968 <Event_Handler+0x234>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800b992:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b996:	2b00      	cmp	r3, #0
 800b998:	f040 8187 	bne.w	800bcaa <Event_Handler+0x576>
          {

            /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
            idx = 17;
 800b99c:	2311      	movs	r3, #17
 800b99e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800b9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a4:	789b      	ldrb	r3, [r3, #2]
 800b9a6:	2b15      	cmp	r3, #21
 800b9a8:	f040 817f 	bne.w	800bcaa <Event_Handler+0x576>
#else
              idx = 5;
            if (pr->Handle_Value_Pair_Length == 7)
#endif
            {
              pr->Data_Length -= 1;
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	78db      	ldrb	r3, [r3, #3]
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 800b9b8:	e06f      	b.n	800ba9a <Event_Handler+0x366>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800b9ba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b9be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c0:	4413      	add	r3, r2
 800b9c2:	791b      	ldrb	r3, [r3, #4]
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b9ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9cc:	440b      	add	r3, r1
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	021b      	lsls	r3, r3, #8
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	847b      	strh	r3, [r7, #34]	; 0x22
                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800b9de:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b9e2:	3b0e      	subs	r3, #14
 800b9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e6:	4413      	add	r3, r2
 800b9e8:	791b      	ldrb	r3, [r3, #4]
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800b9f0:	3b0e      	subs	r3, #14
 800b9f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9f4:	440b      	add	r3, r1
 800b9f6:	3304      	adds	r3, #4
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	021b      	lsls	r3, r3, #8
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	4313      	orrs	r3, r2
 800ba04:	843b      	strh	r3, [r7, #32]
#else
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                if(uuid == P2P_WRITE_CHAR_UUID)
 800ba06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba08:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d11a      	bne.n	800ba46 <Event_Handler+0x312>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800ba10:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ba14:	4a23      	ldr	r2, [pc, #140]	; (800baa4 <Event_Handler+0x370>)
 800ba16:	011b      	lsls	r3, r3, #4
 800ba18:	4413      	add	r3, r2
 800ba1a:	3302      	adds	r3, #2
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	4822      	ldr	r0, [pc, #136]	; (800baac <Event_Handler+0x378>)
 800ba22:	f001 f89b 	bl	800cb5c <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 800ba26:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ba2a:	4a1e      	ldr	r2, [pc, #120]	; (800baa4 <Event_Handler+0x370>)
 800ba2c:	011b      	lsls	r3, r3, #4
 800ba2e:	4413      	add	r3, r2
 800ba30:	2209      	movs	r2, #9
 800ba32:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 800ba34:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ba38:	4a1a      	ldr	r2, [pc, #104]	; (800baa4 <Event_Handler+0x370>)
 800ba3a:	011b      	lsls	r3, r3, #4
 800ba3c:	4413      	add	r3, r2
 800ba3e:	3308      	adds	r3, #8
 800ba40:	8c3a      	ldrh	r2, [r7, #32]
 800ba42:	801a      	strh	r2, [r3, #0]
 800ba44:	e01e      	b.n	800ba84 <Event_Handler+0x350>
                }

                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800ba46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba48:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d119      	bne.n	800ba84 <Event_Handler+0x350>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800ba50:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ba54:	4a13      	ldr	r2, [pc, #76]	; (800baa4 <Event_Handler+0x370>)
 800ba56:	011b      	lsls	r3, r3, #4
 800ba58:	4413      	add	r3, r2
 800ba5a:	3302      	adds	r3, #2
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	4813      	ldr	r0, [pc, #76]	; (800bab0 <Event_Handler+0x37c>)
 800ba62:	f001 f87b 	bl	800cb5c <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800ba66:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ba6a:	4a0e      	ldr	r2, [pc, #56]	; (800baa4 <Event_Handler+0x370>)
 800ba6c:	011b      	lsls	r3, r3, #4
 800ba6e:	4413      	add	r3, r2
 800ba70:	220a      	movs	r2, #10
 800ba72:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 800ba74:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800ba78:	4a0a      	ldr	r2, [pc, #40]	; (800baa4 <Event_Handler+0x370>)
 800ba7a:	011b      	lsls	r3, r3, #4
 800ba7c:	4413      	add	r3, r2
 800ba7e:	330c      	adds	r3, #12
 800ba80:	8c3a      	ldrh	r2, [r7, #32]
 800ba82:	801a      	strh	r2, [r3, #0]
                }
#if (UUID_128BIT_FORMAT==1)
                pr->Data_Length -= 21;
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba86:	78db      	ldrb	r3, [r3, #3]
 800ba88:	3b15      	subs	r3, #21
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	70da      	strb	r2, [r3, #3]
                idx += 21;
 800ba90:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800ba94:	3315      	adds	r3, #21
 800ba96:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9c:	78db      	ldrb	r3, [r3, #3]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d18b      	bne.n	800b9ba <Event_Handler+0x286>
#endif
              }
            }
          }
        }
        break;
 800baa2:	e102      	b.n	800bcaa <Event_Handler+0x576>
 800baa4:	20001640 	.word	0x20001640
 800baa8:	0800e718 	.word	0x0800e718
 800baac:	0800e754 	.word	0x0800e754
 800bab0:	0800e78c 	.word	0x0800e78c

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800bab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bab6:	3302      	adds	r3, #2
 800bab8:	61fb      	str	r3, [r7, #28]
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 800baba:	2300      	movs	r3, #0
 800babc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bac0:	e004      	b.n	800bacc <Event_Handler+0x398>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 800bac2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bac6:	3301      	adds	r3, #1
 800bac8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bacc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10b      	bne.n	800baec <Event_Handler+0x3b8>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800bad4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bad8:	4a7b      	ldr	r2, [pc, #492]	; (800bcc8 <Event_Handler+0x594>)
 800bada:	011b      	lsls	r3, r3, #4
 800badc:	4413      	add	r3, r2
 800bade:	3302      	adds	r3, #2
 800bae0:	881a      	ldrh	r2, [r3, #0]
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	881b      	ldrh	r3, [r3, #0]
 800bae6:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bae8:	429a      	cmp	r2, r3
 800baea:	d1ea      	bne.n	800bac2 <Event_Handler+0x38e>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800baec:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f040 80dc 	bne.w	800bcae <Event_Handler+0x57a>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	78db      	ldrb	r3, [r3, #3]
 800bafa:	089b      	lsrs	r3, r3, #2
 800bafc:	76fb      	strb	r3, [r7, #27]
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 800bafe:	2300      	movs	r3, #0
 800bb00:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	789b      	ldrb	r3, [r3, #2]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	f040 80d0 	bne.w	800bcae <Event_Handler+0x57a>
            {
              for (i=0; i<numDesc; i++)
 800bb0e:	2300      	movs	r3, #0
 800bb10:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800bb14:	e056      	b.n	800bbc4 <Event_Handler+0x490>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800bb16:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800bb1a:	69fa      	ldr	r2, [r7, #28]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	791b      	ldrb	r3, [r3, #4]
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800bb26:	69f9      	ldr	r1, [r7, #28]
 800bb28:	440b      	add	r3, r1
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	021b      	lsls	r3, r3, #8
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	4313      	orrs	r3, r2
 800bb38:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800bb3a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800bb3e:	3302      	adds	r3, #2
 800bb40:	69fa      	ldr	r2, [r7, #28]
 800bb42:	4413      	add	r3, r2
 800bb44:	791b      	ldrb	r3, [r3, #4]
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800bb4c:	3302      	adds	r3, #2
 800bb4e:	69f9      	ldr	r1, [r7, #28]
 800bb50:	440b      	add	r3, r1
 800bb52:	3304      	adds	r3, #4
 800bb54:	3301      	adds	r3, #1
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	021b      	lsls	r3, r3, #8
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	82fb      	strh	r3, [r7, #22]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800bb62:	8afb      	ldrh	r3, [r7, #22]
 800bb64:	f642 1202 	movw	r2, #10498	; 0x2902
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d121      	bne.n	800bbb0 <Event_Handler+0x47c>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 800bb6c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bb70:	4a55      	ldr	r2, [pc, #340]	; (800bcc8 <Event_Handler+0x594>)
 800bb72:	011b      	lsls	r3, r3, #4
 800bb74:	4413      	add	r3, r2
 800bb76:	3302      	adds	r3, #2
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	4853      	ldr	r0, [pc, #332]	; (800bccc <Event_Handler+0x598>)
 800bb7e:	f000 ffed 	bl	800cb5c <iprintf>
#endif
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800bb82:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bb86:	4a50      	ldr	r2, [pc, #320]	; (800bcc8 <Event_Handler+0x594>)
 800bb88:	011b      	lsls	r3, r3, #4
 800bb8a:	4413      	add	r3, r2
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	2b0a      	cmp	r3, #10
 800bb90:	d10e      	bne.n	800bbb0 <Event_Handler+0x47c>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800bb92:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bb96:	4a4c      	ldr	r2, [pc, #304]	; (800bcc8 <Event_Handler+0x594>)
 800bb98:	011b      	lsls	r3, r3, #4
 800bb9a:	4413      	add	r3, r2
 800bb9c:	330e      	adds	r3, #14
 800bb9e:	8b3a      	ldrh	r2, [r7, #24]
 800bba0:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800bba2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bba6:	4a48      	ldr	r2, [pc, #288]	; (800bcc8 <Event_Handler+0x594>)
 800bba8:	011b      	lsls	r3, r3, #4
 800bbaa:	4413      	add	r3, r2
 800bbac:	220b      	movs	r2, #11
 800bbae:	701a      	strb	r2, [r3, #0]

                  }
                }
                idx += 4;
 800bbb0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 800bbba:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800bbc4:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800bbc8:	7efb      	ldrb	r3, [r7, #27]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d3a3      	bcc.n	800bb16 <Event_Handler+0x3e2>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800bbce:	e06e      	b.n	800bcae <Event_Handler+0x57a>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
          aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 800bbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbd2:	3302      	adds	r3, #2
 800bbd4:	637b      	str	r3, [r7, #52]	; 0x34
          uint8_t index;

          index = 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bbdc:	e004      	b.n	800bbe8 <Event_Handler+0x4b4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800bbde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bbe8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10b      	bne.n	800bc08 <Event_Handler+0x4d4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800bbf0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bbf4:	4a34      	ldr	r2, [pc, #208]	; (800bcc8 <Event_Handler+0x594>)
 800bbf6:	011b      	lsls	r3, r3, #4
 800bbf8:	4413      	add	r3, r2
 800bbfa:	3302      	adds	r3, #2
 800bbfc:	881a      	ldrh	r2, [r3, #0]
 800bbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d1ea      	bne.n	800bbde <Event_Handler+0x4aa>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800bc08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d150      	bne.n	800bcb2 <Event_Handler+0x57e>
          {

            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800bc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc12:	885b      	ldrh	r3, [r3, #2]
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bc1a:	492b      	ldr	r1, [pc, #172]	; (800bcc8 <Event_Handler+0x594>)
 800bc1c:	011b      	lsls	r3, r3, #4
 800bc1e:	440b      	add	r3, r1
 800bc20:	330c      	adds	r3, #12
 800bc22:	881b      	ldrh	r3, [r3, #0]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d144      	bne.n	800bcb2 <Event_Handler+0x57e>
                    (pr->Attribute_Value_Length == (2)) )
 800bc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc2a:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d140      	bne.n	800bcb2 <Event_Handler+0x57e>
            {

              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 800bc30:	2302      	movs	r3, #2
 800bc32:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 800bc34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc36:	791b      	ldrb	r3, [r3, #4]
 800bc38:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 800bc3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3c:	3305      	adds	r3, #5
 800bc3e:	60fb      	str	r3, [r7, #12]

              Gatt_Notification(&Notification);
 800bc40:	f107 0308 	add.w	r3, r7, #8
 800bc44:	4618      	mov	r0, r3
 800bc46:	f000 f845 	bl	800bcd4 <Gatt_Notification>
              /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

            }
          }
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800bc4a:	e032      	b.n	800bcb2 <Event_Handler+0x57e>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 800bc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc4e:	3302      	adds	r3, #2
 800bc50:	63bb      	str	r3, [r7, #56]	; 0x38
#if(CFG_DEBUG_APP_TRACE != 0)
          APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE \n");
 800bc52:	481f      	ldr	r0, [pc, #124]	; (800bcd0 <Event_Handler+0x59c>)
 800bc54:	f000 fff0 	bl	800cc38 <puts>
          APP_DBG_MSG("\n");
 800bc58:	200a      	movs	r0, #10
 800bc5a:	f000 ff91 	bl	800cb80 <putchar>
#endif

          uint8_t index;

          index = 0;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bc64:	e004      	b.n	800bc70 <Event_Handler+0x53c>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800bc66:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bc70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10b      	bne.n	800bc90 <Event_Handler+0x55c>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800bc78:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bc7c:	4a12      	ldr	r2, [pc, #72]	; (800bcc8 <Event_Handler+0x594>)
 800bc7e:	011b      	lsls	r3, r3, #4
 800bc80:	4413      	add	r3, r2
 800bc82:	3302      	adds	r3, #2
 800bc84:	881a      	ldrh	r2, [r3, #0]
 800bc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d1ea      	bne.n	800bc66 <Event_Handler+0x532>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800bc90:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10e      	bne.n	800bcb6 <Event_Handler+0x582>
          {

            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 800bc98:	2100      	movs	r1, #0
 800bc9a:	2004      	movs	r0, #4
 800bc9c:	f000 fd7c 	bl	800c798 <UTIL_SEQ_SetTask>

          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800bca0:	e009      	b.n	800bcb6 <Event_Handler+0x582>
        default:
          break;
 800bca2:	bf00      	nop
 800bca4:	e00a      	b.n	800bcbc <Event_Handler+0x588>
        break;
 800bca6:	bf00      	nop
 800bca8:	e008      	b.n	800bcbc <Event_Handler+0x588>
        break;
 800bcaa:	bf00      	nop
 800bcac:	e006      	b.n	800bcbc <Event_Handler+0x588>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 800bcae:	bf00      	nop
 800bcb0:	e004      	b.n	800bcbc <Event_Handler+0x588>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800bcb2:	bf00      	nop
 800bcb4:	e002      	b.n	800bcbc <Event_Handler+0x588>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800bcb6:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bcb8:	e000      	b.n	800bcbc <Event_Handler+0x588>

    default:
      break;
 800bcba:	bf00      	nop
  }

  return(return_value);
 800bcbc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3750      	adds	r7, #80	; 0x50
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	20001640 	.word	0x20001640
 800bccc:	0800e7d0 	.word	0x0800e7d0
 800bcd0:	0800e818 	.word	0x0800e818

0800bcd4 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d12f      	bne.n	800bd44 <Gatt_Notification+0x70>

    case P2P_NOTIFICATION_INFO_RECEIVED_EVT:
/* USER CODE BEGIN P2P_NOTIFICATION_INFO_RECEIVED_EVT */
    {
        //TODO got notification from server
    	P2P_Client_App_Context.MotorStateControl.MotorState=pNotification->DataTransfered.pPayload[0];
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	781a      	ldrb	r2, [r3, #0]
 800bcea:	4b19      	ldr	r3, [pc, #100]	; (800bd50 <Gatt_Notification+0x7c>)
 800bcec:	711a      	strb	r2, [r3, #4]
    	switch(P2P_Client_App_Context.MotorStateControl.MotorState){
 800bcee:	4b18      	ldr	r3, [pc, #96]	; (800bd50 <Gatt_Notification+0x7c>)
 800bcf0:	791b      	ldrb	r3, [r3, #4]
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d01a      	beq.n	800bd2c <Gatt_Notification+0x58>
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	dc22      	bgt.n	800bd40 <Gatt_Notification+0x6c>
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d002      	beq.n	800bd04 <Gatt_Notification+0x30>
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d00a      	beq.n	800bd18 <Gatt_Notification+0x44>
    		SetState(0);
    		APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - MOTOR DONE \n\r");
    		APP_DBG_MSG(" \n\r");
    		break;
    	}
    	default : break;
 800bd02:	e01d      	b.n	800bd40 <Gatt_Notification+0x6c>
    		SetState(3);
 800bd04:	2003      	movs	r0, #3
 800bd06:	f7f6 fbd7 	bl	80024b8 <SetState>
    		APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - MOTOR STOPPED \n\r");
 800bd0a:	4812      	ldr	r0, [pc, #72]	; (800bd54 <Gatt_Notification+0x80>)
 800bd0c:	f000 ff26 	bl	800cb5c <iprintf>
    		APP_DBG_MSG(" \n\r");
 800bd10:	4811      	ldr	r0, [pc, #68]	; (800bd58 <Gatt_Notification+0x84>)
 800bd12:	f000 ff23 	bl	800cb5c <iprintf>
    		break;
 800bd16:	e014      	b.n	800bd42 <Gatt_Notification+0x6e>
    		SetState(2);
 800bd18:	2002      	movs	r0, #2
 800bd1a:	f7f6 fbcd 	bl	80024b8 <SetState>
    		APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - MOTOR PENDING \n\r");
 800bd1e:	480f      	ldr	r0, [pc, #60]	; (800bd5c <Gatt_Notification+0x88>)
 800bd20:	f000 ff1c 	bl	800cb5c <iprintf>
    		APP_DBG_MSG(" \n\r");
 800bd24:	480c      	ldr	r0, [pc, #48]	; (800bd58 <Gatt_Notification+0x84>)
 800bd26:	f000 ff19 	bl	800cb5c <iprintf>
    		break;
 800bd2a:	e00a      	b.n	800bd42 <Gatt_Notification+0x6e>
    		SetState(0);
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	f7f6 fbc3 	bl	80024b8 <SetState>
    		APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - MOTOR DONE \n\r");
 800bd32:	480b      	ldr	r0, [pc, #44]	; (800bd60 <Gatt_Notification+0x8c>)
 800bd34:	f000 ff12 	bl	800cb5c <iprintf>
    		APP_DBG_MSG(" \n\r");
 800bd38:	4807      	ldr	r0, [pc, #28]	; (800bd58 <Gatt_Notification+0x84>)
 800bd3a:	f000 ff0f 	bl	800cb5c <iprintf>
    		break;
 800bd3e:	e000      	b.n	800bd42 <Gatt_Notification+0x6e>
    	default : break;
 800bd40:	bf00      	nop
        default : break;
      }*/

    }
/* USER CODE END P2P_NOTIFICATION_INFO_RECEIVED_EVT */
      break;
 800bd42:	e000      	b.n	800bd46 <Gatt_Notification+0x72>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 800bd44:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 800bd46:	bf00      	nop
}
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	20001650 	.word	0x20001650
 800bd54:	0800e848 	.word	0x0800e848
 800bd58:	0800e890 	.word	0x0800e890
 800bd5c:	0800e894 	.word	0x0800e894
 800bd60:	0800e8dc 	.word	0x0800e8dc

0800bd64 <P2P_Client_APP_Get_State>:

uint8_t P2P_Client_APP_Get_State( void ) {
 800bd64:	b480      	push	{r7}
 800bd66:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 800bd68:	4b03      	ldr	r3, [pc, #12]	; (800bd78 <P2P_Client_APP_Get_State+0x14>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	20001640 	.word	0x20001640

0800bd7c <Write_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
tBleStatus Write_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload) //TODO increase payload size
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	4603      	mov	r3, r0
 800bd84:	603a      	str	r2, [r7, #0]
 800bd86:	80fb      	strh	r3, [r7, #6]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bd8c:	2392      	movs	r3, #146	; 0x92
 800bd8e:	73fb      	strb	r3, [r7, #15]
  uint8_t index;

  index = 0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bd94:	e01b      	b.n	800bdce <Write_Char+0x52>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(UUID)
 800bd96:	88fb      	ldrh	r3, [r7, #6]
 800bd98:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d112      	bne.n	800bdc6 <Write_Char+0x4a>
    {
      case P2P_WRITE_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
    	  //TODO write to server
        ret = aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 800bda0:	7bbb      	ldrb	r3, [r7, #14]
 800bda2:	4a12      	ldr	r2, [pc, #72]	; (800bdec <Write_Char+0x70>)
 800bda4:	011b      	lsls	r3, r3, #4
 800bda6:	4413      	add	r3, r2
 800bda8:	3302      	adds	r3, #2
 800bdaa:	8818      	ldrh	r0, [r3, #0]
 800bdac:	7bbb      	ldrb	r3, [r7, #14]
 800bdae:	4a0f      	ldr	r2, [pc, #60]	; (800bdec <Write_Char+0x70>)
 800bdb0:	011b      	lsls	r3, r3, #4
 800bdb2:	4413      	add	r3, r2
 800bdb4:	3308      	adds	r3, #8
 800bdb6:	8819      	ldrh	r1, [r3, #0]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	f7fc feed 	bl	8008b9a <aci_gatt_write_without_resp>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73fb      	strb	r3, [r7, #15]
                                         aP2PClientContext[index].P2PWriteToServerCharHdle,
                                         2, /* charValueLen */
                                         (uint8_t *)  pPayload);
        break;
 800bdc4:	e000      	b.n	800bdc8 <Write_Char+0x4c>
      default:
        break;
 800bdc6:	bf00      	nop
    }
    index++;
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bdce:	7bbb      	ldrb	r3, [r7, #14]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d106      	bne.n	800bde2 <Write_Char+0x66>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	4a05      	ldr	r2, [pc, #20]	; (800bdec <Write_Char+0x70>)
 800bdd8:	011b      	lsls	r3, r3, #4
 800bdda:	4413      	add	r3, r2
 800bddc:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1d9      	bne.n	800bd96 <Write_Char+0x1a>
  }

  return ret;
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
}/* end Write_Char() */
 800bde4:	4618      	mov	r0, r3
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	20001640 	.word	0x20001640

0800bdf0 <Button1_Trigger_Received>:

  return;
}
*/
void Button1_Trigger_Received(void)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	af00      	add	r7, sp, #0
	APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON 1 PUSHED - WRITE TO SERVER \n ");
 800bdf4:	4809      	ldr	r0, [pc, #36]	; (800be1c <Button1_Trigger_Received+0x2c>)
 800bdf6:	f000 feb1 	bl	800cb5c <iprintf>
	APP_DBG_MSG(" \n\r");
 800bdfa:	4809      	ldr	r0, [pc, #36]	; (800be20 <Button1_Trigger_Received+0x30>)
 800bdfc:	f000 feae 	bl	800cb5c <iprintf>

	P2P_Client_App_Context.GoalControl.GoalSpeed = 0;
 800be00:	4b08      	ldr	r3, [pc, #32]	; (800be24 <Button1_Trigger_Received+0x34>)
 800be02:	2200      	movs	r2, #0
 800be04:	805a      	strh	r2, [r3, #2]

	Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.GoalControl);
 800be06:	4a08      	ldr	r2, [pc, #32]	; (800be28 <Button1_Trigger_Received+0x38>)
 800be08:	2100      	movs	r1, #0
 800be0a:	f64f 6041 	movw	r0, #65089	; 0xfe41
 800be0e:	f7ff ffb5 	bl	800bd7c <Write_Char>
	SetState(1);
 800be12:	2001      	movs	r0, #1
 800be14:	f7f6 fb50 	bl	80024b8 <SetState>

	return;
 800be18:	bf00      	nop
}
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	0800e920 	.word	0x0800e920
 800be20:	0800e890 	.word	0x0800e890
 800be24:	20001650 	.word	0x20001650
 800be28:	20001652 	.word	0x20001652

0800be2c <Button2_Trigger_Received>:

void Button2_Trigger_Received(void)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	af00      	add	r7, sp, #0
	APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON 2 PUSHED - WRITE TO SERVER \n ");
 800be30:	480a      	ldr	r0, [pc, #40]	; (800be5c <Button2_Trigger_Received+0x30>)
 800be32:	f000 fe93 	bl	800cb5c <iprintf>
	APP_DBG_MSG(" \n\r");
 800be36:	480a      	ldr	r0, [pc, #40]	; (800be60 <Button2_Trigger_Received+0x34>)
 800be38:	f000 fe90 	bl	800cb5c <iprintf>

	P2P_Client_App_Context.GoalControl.GoalSpeed = 300;
 800be3c:	4b09      	ldr	r3, [pc, #36]	; (800be64 <Button2_Trigger_Received+0x38>)
 800be3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800be42:	805a      	strh	r2, [r3, #2]

	Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.GoalControl);
 800be44:	4a08      	ldr	r2, [pc, #32]	; (800be68 <Button2_Trigger_Received+0x3c>)
 800be46:	2100      	movs	r1, #0
 800be48:	f64f 6041 	movw	r0, #65089	; 0xfe41
 800be4c:	f7ff ff96 	bl	800bd7c <Write_Char>
	SetState(1);
 800be50:	2001      	movs	r0, #1
 800be52:	f7f6 fb31 	bl	80024b8 <SetState>

	return;
 800be56:	bf00      	nop
}
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	0800e964 	.word	0x0800e964
 800be60:	0800e890 	.word	0x0800e890
 800be64:	20001650 	.word	0x20001650
 800be68:	20001652 	.word	0x20001652

0800be6c <Button3_Trigger_Received>:

void Button3_Trigger_Received(void)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	af00      	add	r7, sp, #0
	APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON 3 PUSHED - WRITE TO SERVER \n ");
 800be70:	480a      	ldr	r0, [pc, #40]	; (800be9c <Button3_Trigger_Received+0x30>)
 800be72:	f000 fe73 	bl	800cb5c <iprintf>
	APP_DBG_MSG(" \n\r");
 800be76:	480a      	ldr	r0, [pc, #40]	; (800bea0 <Button3_Trigger_Received+0x34>)
 800be78:	f000 fe70 	bl	800cb5c <iprintf>

	P2P_Client_App_Context.GoalControl.GoalSpeed = 800;
 800be7c:	4b09      	ldr	r3, [pc, #36]	; (800bea4 <Button3_Trigger_Received+0x38>)
 800be7e:	f44f 7248 	mov.w	r2, #800	; 0x320
 800be82:	805a      	strh	r2, [r3, #2]

	Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.GoalControl);
 800be84:	4a08      	ldr	r2, [pc, #32]	; (800bea8 <Button3_Trigger_Received+0x3c>)
 800be86:	2100      	movs	r1, #0
 800be88:	f64f 6041 	movw	r0, #65089	; 0xfe41
 800be8c:	f7ff ff76 	bl	800bd7c <Write_Char>
	SetState(1);
 800be90:	2001      	movs	r0, #1
 800be92:	f7f6 fb11 	bl	80024b8 <SetState>

	return;
 800be96:	bf00      	nop
}
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	0800e9a8 	.word	0x0800e9a8
 800bea0:	0800e890 	.word	0x0800e890
 800bea4:	20001650 	.word	0x20001650
 800bea8:	20001652 	.word	0x20001652

0800beac <Update_Service>:

void Update_Service()
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 800beb2:	2301      	movs	r3, #1
 800beb4:	80bb      	strh	r3, [r7, #4]
  uint16_t disable = 0x0000;
 800beb6:	2300      	movs	r3, #0
 800beb8:	807b      	strh	r3, [r7, #2]
  uint8_t index;

  index = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800bebe:	e0a5      	b.n	800c00c <Update_Service+0x160>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(aP2PClientContext[index].state)
 800bec0:	79fb      	ldrb	r3, [r7, #7]
 800bec2:	4a5a      	ldr	r2, [pc, #360]	; (800c02c <Update_Service+0x180>)
 800bec4:	011b      	lsls	r3, r3, #4
 800bec6:	4413      	add	r3, r2
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	3b07      	subs	r3, #7
 800becc:	2b05      	cmp	r3, #5
 800bece:	f200 8099 	bhi.w	800c004 <Update_Service+0x158>
 800bed2:	a201      	add	r2, pc, #4	; (adr r2, 800bed8 <Update_Service+0x2c>)
 800bed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed8:	0800bef1 	.word	0x0800bef1
 800bedc:	0800bef9 	.word	0x0800bef9
 800bee0:	0800bf2b 	.word	0x0800bf2b
 800bee4:	0800bf61 	.word	0x0800bf61
 800bee8:	0800bf97 	.word	0x0800bf97
 800beec:	0800bfd1 	.word	0x0800bfd1
    {
      case APP_BLE_DISCOVER_SERVICES:
        APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
 800bef0:	484f      	ldr	r0, [pc, #316]	; (800c030 <Update_Service+0x184>)
 800bef2:	f000 fea1 	bl	800cc38 <puts>
        break;
 800bef6:	e086      	b.n	800c006 <Update_Service+0x15a>
      case APP_BLE_DISCOVER_CHARACS:
        APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
 800bef8:	484e      	ldr	r0, [pc, #312]	; (800c034 <Update_Service+0x188>)
 800befa:	f000 fe9d 	bl	800cc38 <puts>
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800befe:	79fb      	ldrb	r3, [r7, #7]
 800bf00:	4a4a      	ldr	r2, [pc, #296]	; (800c02c <Update_Service+0x180>)
 800bf02:	011b      	lsls	r3, r3, #4
 800bf04:	4413      	add	r3, r2
 800bf06:	3302      	adds	r3, #2
 800bf08:	8818      	ldrh	r0, [r3, #0]
 800bf0a:	79fb      	ldrb	r3, [r7, #7]
 800bf0c:	4a47      	ldr	r2, [pc, #284]	; (800c02c <Update_Service+0x180>)
 800bf0e:	011b      	lsls	r3, r3, #4
 800bf10:	4413      	add	r3, r2
 800bf12:	3304      	adds	r3, #4
 800bf14:	8819      	ldrh	r1, [r3, #0]
 800bf16:	79fb      	ldrb	r3, [r7, #7]
 800bf18:	4a44      	ldr	r2, [pc, #272]	; (800c02c <Update_Service+0x180>)
 800bf1a:	011b      	lsls	r3, r3, #4
 800bf1c:	4413      	add	r3, r2
 800bf1e:	3306      	adds	r3, #6
 800bf20:	881b      	ldrh	r3, [r3, #0]
 800bf22:	461a      	mov	r2, r3
 800bf24:	f7fc fc98 	bl	8008858 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                          aP2PClientContext[index].P2PServiceEndHandle);
        break;
 800bf28:	e06d      	b.n	800c006 <Update_Service+0x15a>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No descriptor */
        APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write  Characteristic\n");
 800bf2a:	4843      	ldr	r0, [pc, #268]	; (800c038 <Update_Service+0x18c>)
 800bf2c:	f000 fe84 	bl	800cc38 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800bf30:	79fb      	ldrb	r3, [r7, #7]
 800bf32:	4a3e      	ldr	r2, [pc, #248]	; (800c02c <Update_Service+0x180>)
 800bf34:	011b      	lsls	r3, r3, #4
 800bf36:	4413      	add	r3, r2
 800bf38:	3302      	adds	r3, #2
 800bf3a:	8818      	ldrh	r0, [r3, #0]
 800bf3c:	79fb      	ldrb	r3, [r7, #7]
 800bf3e:	4a3b      	ldr	r2, [pc, #236]	; (800c02c <Update_Service+0x180>)
 800bf40:	011b      	lsls	r3, r3, #4
 800bf42:	4413      	add	r3, r2
 800bf44:	3308      	adds	r3, #8
 800bf46:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 800bf48:	79fb      	ldrb	r3, [r7, #7]
 800bf4a:	4a38      	ldr	r2, [pc, #224]	; (800c02c <Update_Service+0x180>)
 800bf4c:	011b      	lsls	r3, r3, #4
 800bf4e:	4413      	add	r3, r2
 800bf50:	3308      	adds	r3, #8
 800bf52:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800bf54:	3302      	adds	r3, #2
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	461a      	mov	r2, r3
 800bf5a:	f7fc fcfe 	bl	800895a <aci_gatt_disc_all_char_desc>
        break;
 800bf5e:	e052      	b.n	800c006 <Update_Service+0x15a>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification  Characteristic\n");
 800bf60:	4836      	ldr	r0, [pc, #216]	; (800c03c <Update_Service+0x190>)
 800bf62:	f000 fe69 	bl	800cc38 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800bf66:	79fb      	ldrb	r3, [r7, #7]
 800bf68:	4a30      	ldr	r2, [pc, #192]	; (800c02c <Update_Service+0x180>)
 800bf6a:	011b      	lsls	r3, r3, #4
 800bf6c:	4413      	add	r3, r2
 800bf6e:	3302      	adds	r3, #2
 800bf70:	8818      	ldrh	r0, [r3, #0]
 800bf72:	79fb      	ldrb	r3, [r7, #7]
 800bf74:	4a2d      	ldr	r2, [pc, #180]	; (800c02c <Update_Service+0x180>)
 800bf76:	011b      	lsls	r3, r3, #4
 800bf78:	4413      	add	r3, r2
 800bf7a:	330c      	adds	r3, #12
 800bf7c:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 800bf7e:	79fb      	ldrb	r3, [r7, #7]
 800bf80:	4a2a      	ldr	r2, [pc, #168]	; (800c02c <Update_Service+0x180>)
 800bf82:	011b      	lsls	r3, r3, #4
 800bf84:	4413      	add	r3, r2
 800bf86:	330c      	adds	r3, #12
 800bf88:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800bf8a:	3302      	adds	r3, #2
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f7fc fce3 	bl	800895a <aci_gatt_disc_all_char_desc>
        break;
 800bf94:	e037      	b.n	800c006 <Update_Service+0x15a>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        APP_DBG_MSG("* GATT : Enable Server Notification\n");
 800bf96:	482a      	ldr	r0, [pc, #168]	; (800c040 <Update_Service+0x194>)
 800bf98:	f000 fe4e 	bl	800cc38 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800bf9c:	79fb      	ldrb	r3, [r7, #7]
 800bf9e:	4a23      	ldr	r2, [pc, #140]	; (800c02c <Update_Service+0x180>)
 800bfa0:	011b      	lsls	r3, r3, #4
 800bfa2:	4413      	add	r3, r2
 800bfa4:	3302      	adds	r3, #2
 800bfa6:	8818      	ldrh	r0, [r3, #0]
 800bfa8:	79fb      	ldrb	r3, [r7, #7]
 800bfaa:	4a20      	ldr	r2, [pc, #128]	; (800c02c <Update_Service+0x180>)
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	4413      	add	r3, r2
 800bfb0:	330e      	adds	r3, #14
 800bfb2:	8819      	ldrh	r1, [r3, #0]
 800bfb4:	1d3b      	adds	r3, r7, #4
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	f7fc fd50 	bl	8008a5c <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800bfbc:	79fb      	ldrb	r3, [r7, #7]
 800bfbe:	4a1b      	ldr	r2, [pc, #108]	; (800c02c <Update_Service+0x180>)
 800bfc0:	011b      	lsls	r3, r3, #4
 800bfc2:	4413      	add	r3, r2
 800bfc4:	2206      	movs	r2, #6
 800bfc6:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_RED); //TODO maybe get rid of this
 800bfc8:	2002      	movs	r0, #2
 800bfca:	f7f6 fd73 	bl	8002ab4 <BSP_LED_Off>
        break;
 800bfce:	e01a      	b.n	800c006 <Update_Service+0x15a>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        APP_DBG_MSG("* GATT : Disable Server Notification\n");
 800bfd0:	481c      	ldr	r0, [pc, #112]	; (800c044 <Update_Service+0x198>)
 800bfd2:	f000 fe31 	bl	800cc38 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800bfd6:	79fb      	ldrb	r3, [r7, #7]
 800bfd8:	4a14      	ldr	r2, [pc, #80]	; (800c02c <Update_Service+0x180>)
 800bfda:	011b      	lsls	r3, r3, #4
 800bfdc:	4413      	add	r3, r2
 800bfde:	3302      	adds	r3, #2
 800bfe0:	8818      	ldrh	r0, [r3, #0]
 800bfe2:	79fb      	ldrb	r3, [r7, #7]
 800bfe4:	4a11      	ldr	r2, [pc, #68]	; (800c02c <Update_Service+0x180>)
 800bfe6:	011b      	lsls	r3, r3, #4
 800bfe8:	4413      	add	r3, r2
 800bfea:	330e      	adds	r3, #14
 800bfec:	8819      	ldrh	r1, [r3, #0]
 800bfee:	1cbb      	adds	r3, r7, #2
 800bff0:	2202      	movs	r2, #2
 800bff2:	f7fc fd33 	bl	8008a5c <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&disable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	4a0c      	ldr	r2, [pc, #48]	; (800c02c <Update_Service+0x180>)
 800bffa:	011b      	lsls	r3, r3, #4
 800bffc:	4413      	add	r3, r2
 800bffe:	2206      	movs	r2, #6
 800c000:	701a      	strb	r2, [r3, #0]
        break;
 800c002:	e000      	b.n	800c006 <Update_Service+0x15a>
      default:
        break;
 800c004:	bf00      	nop
    }
    index++;
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	3301      	adds	r3, #1
 800c00a:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c00c:	79fb      	ldrb	r3, [r7, #7]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d108      	bne.n	800c024 <Update_Service+0x178>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 800c012:	79fb      	ldrb	r3, [r7, #7]
 800c014:	4a05      	ldr	r2, [pc, #20]	; (800c02c <Update_Service+0x180>)
 800c016:	011b      	lsls	r3, r3, #4
 800c018:	4413      	add	r3, r2
 800c01a:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f47f af4f 	bne.w	800bec0 <Update_Service+0x14>
  }
  return;
 800c022:	bf00      	nop
 800c024:	bf00      	nop
}
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	20001640 	.word	0x20001640
 800c030:	0800e9ec 	.word	0x0800e9ec
 800c034:	0800ea04 	.word	0x0800ea04
 800c038:	0800ea2c 	.word	0x0800ea2c
 800c03c:	0800ea68 	.word	0x0800ea68
 800c040:	0800eaac 	.word	0x0800eaac
 800c044:	0800ead0 	.word	0x0800ead0

0800c048 <LL_PWR_EnableBootC2>:
{
 800c048:	b480      	push	{r7}
 800c04a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c04c:	4b05      	ldr	r3, [pc, #20]	; (800c064 <LL_PWR_EnableBootC2+0x1c>)
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	4a04      	ldr	r2, [pc, #16]	; (800c064 <LL_PWR_EnableBootC2+0x1c>)
 800c052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c056:	60d3      	str	r3, [r2, #12]
}
 800c058:	bf00      	nop
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	58000400 	.word	0x58000400

0800c068 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c070:	4b06      	ldr	r3, [pc, #24]	; (800c08c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c072:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c076:	4905      	ldr	r1, [pc, #20]	; (800c08c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	58000800 	.word	0x58000800

0800c090 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c098:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c09a:	6a1a      	ldr	r2, [r3, #32]
 800c09c:	4904      	ldr	r1, [pc, #16]	; (800c0b0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	620b      	str	r3, [r1, #32]
}
 800c0a4:	bf00      	nop
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr
 800c0b0:	58000800 	.word	0x58000800

0800c0b4 <LL_AHB3_GRP1_EnableClock>:
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c0bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c0cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
}
 800c0da:	bf00      	nop
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b085      	sub	sp, #20
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c0ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c0f2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c0f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c106:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4013      	ands	r3, r2
 800c10e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c110:	68fb      	ldr	r3, [r7, #12]
}
 800c112:	bf00      	nop
 800c114:	3714      	adds	r7, #20
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr

0800c11e <LL_C1_IPCC_EnableIT_TXF>:
{
 800c11e:	b480      	push	{r7}
 800c120:	b083      	sub	sp, #12
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	601a      	str	r2, [r3, #0]
}
 800c132:	bf00      	nop
 800c134:	370c      	adds	r7, #12
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <LL_C1_IPCC_EnableIT_RXO>:
{
 800c13e:	b480      	push	{r7}
 800c140:	b083      	sub	sp, #12
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f043 0201 	orr.w	r2, r3, #1
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	601a      	str	r2, [r3, #0]
}
 800c152:	bf00      	nop
 800c154:	370c      	adds	r7, #12
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800c15e:	b480      	push	{r7}
 800c160:	b083      	sub	sp, #12
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	041b      	lsls	r3, r3, #16
 800c170:	43db      	mvns	r3, r3
 800c172:	401a      	ands	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	605a      	str	r2, [r3, #4]
}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	685a      	ldr	r2, [r3, #4]
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	041b      	lsls	r3, r3, #16
 800c196:	431a      	orrs	r2, r3
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	605a      	str	r2, [r3, #4]
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685a      	ldr	r2, [r3, #4]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	43db      	mvns	r3, r3
 800c1ba:	401a      	ands	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	605a      	str	r2, [r3, #4]
}
 800c1c0:	bf00      	nop
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <LL_C1_IPCC_ClearFlag_CHx>:
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	683a      	ldr	r2, [r7, #0]
 800c1da:	609a      	str	r2, [r3, #8]
}
 800c1dc:	bf00      	nop
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <LL_C1_IPCC_SetFlag_CHx>:
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	041a      	lsls	r2, r3, #16
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	609a      	str	r2, [r3, #8]
}
 800c1fa:	bf00      	nop
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
 800c20e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	68da      	ldr	r2, [r3, #12]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	4013      	ands	r3, r2
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d101      	bne.n	800c222 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c21e:	2301      	movs	r3, #1
 800c220:	e000      	b.n	800c224 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	69da      	ldr	r2, [r3, #28]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	4013      	ands	r3, r2
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	429a      	cmp	r2, r3
 800c246:	d101      	bne.n	800c24c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c248:	2301      	movs	r3, #1
 800c24a:	e000      	b.n	800c24e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
	...

0800c25c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c260:	2102      	movs	r1, #2
 800c262:	4818      	ldr	r0, [pc, #96]	; (800c2c4 <HW_IPCC_Rx_Handler+0x68>)
 800c264:	f7ff ffe4 	bl	800c230 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d008      	beq.n	800c280 <HW_IPCC_Rx_Handler+0x24>
 800c26e:	4b15      	ldr	r3, [pc, #84]	; (800c2c4 <HW_IPCC_Rx_Handler+0x68>)
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	f003 0302 	and.w	r3, r3, #2
 800c276:	2b00      	cmp	r3, #0
 800c278:	d102      	bne.n	800c280 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800c27a:	f000 f8d5 	bl	800c428 <HW_IPCC_SYS_EvtHandler>
 800c27e:	e01e      	b.n	800c2be <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c280:	2101      	movs	r1, #1
 800c282:	4810      	ldr	r0, [pc, #64]	; (800c2c4 <HW_IPCC_Rx_Handler+0x68>)
 800c284:	f7ff ffd4 	bl	800c230 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d008      	beq.n	800c2a0 <HW_IPCC_Rx_Handler+0x44>
 800c28e:	4b0d      	ldr	r3, [pc, #52]	; (800c2c4 <HW_IPCC_Rx_Handler+0x68>)
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d102      	bne.n	800c2a0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800c29a:	f000 f889 	bl	800c3b0 <HW_IPCC_BLE_EvtHandler>
 800c29e:	e00e      	b.n	800c2be <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c2a0:	2108      	movs	r1, #8
 800c2a2:	4808      	ldr	r0, [pc, #32]	; (800c2c4 <HW_IPCC_Rx_Handler+0x68>)
 800c2a4:	f7ff ffc4 	bl	800c230 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d008      	beq.n	800c2c0 <HW_IPCC_Rx_Handler+0x64>
 800c2ae:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <HW_IPCC_Rx_Handler+0x68>)
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	f003 0308 	and.w	r3, r3, #8
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d102      	bne.n	800c2c0 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c2ba:	f000 f901 	bl	800c4c0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c2be:	bf00      	nop
 800c2c0:	bf00      	nop
}
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	58000c00 	.word	0x58000c00

0800c2c8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c2cc:	2102      	movs	r1, #2
 800c2ce:	4818      	ldr	r0, [pc, #96]	; (800c330 <HW_IPCC_Tx_Handler+0x68>)
 800c2d0:	f7ff ff99 	bl	800c206 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d108      	bne.n	800c2ec <HW_IPCC_Tx_Handler+0x24>
 800c2da:	4b15      	ldr	r3, [pc, #84]	; (800c330 <HW_IPCC_Tx_Handler+0x68>)
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d102      	bne.n	800c2ec <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c2e6:	f000 f893 	bl	800c410 <HW_IPCC_SYS_CmdEvtHandler>
 800c2ea:	e01e      	b.n	800c32a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c2ec:	2108      	movs	r1, #8
 800c2ee:	4810      	ldr	r0, [pc, #64]	; (800c330 <HW_IPCC_Tx_Handler+0x68>)
 800c2f0:	f7ff ff89 	bl	800c206 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d108      	bne.n	800c30c <HW_IPCC_Tx_Handler+0x44>
 800c2fa:	4b0d      	ldr	r3, [pc, #52]	; (800c330 <HW_IPCC_Tx_Handler+0x68>)
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c302:	2b00      	cmp	r3, #0
 800c304:	d102      	bne.n	800c30c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c306:	f000 f8bd 	bl	800c484 <HW_IPCC_MM_FreeBufHandler>
 800c30a:	e00e      	b.n	800c32a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c30c:	2120      	movs	r1, #32
 800c30e:	4808      	ldr	r0, [pc, #32]	; (800c330 <HW_IPCC_Tx_Handler+0x68>)
 800c310:	f7ff ff79 	bl	800c206 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d108      	bne.n	800c32c <HW_IPCC_Tx_Handler+0x64>
 800c31a:	4b05      	ldr	r3, [pc, #20]	; (800c330 <HW_IPCC_Tx_Handler+0x68>)
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c322:	2b00      	cmp	r3, #0
 800c324:	d102      	bne.n	800c32c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c326:	f000 f84f 	bl	800c3c8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c32a:	bf00      	nop
 800c32c:	bf00      	nop
}
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	58000c00 	.word	0x58000c00

0800c334 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c338:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c33c:	f7ff fed3 	bl	800c0e6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c340:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c344:	f7ff fea4 	bl	800c090 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c348:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c34c:	f7ff fe8c 	bl	800c068 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c350:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c352:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c354:	f7ff fe78 	bl	800c048 <LL_PWR_EnableBootC2>

  return;
 800c358:	bf00      	nop
}
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c360:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c364:	f7ff fea6 	bl	800c0b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c368:	4806      	ldr	r0, [pc, #24]	; (800c384 <HW_IPCC_Init+0x28>)
 800c36a:	f7ff fee8 	bl	800c13e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c36e:	4805      	ldr	r0, [pc, #20]	; (800c384 <HW_IPCC_Init+0x28>)
 800c370:	f7ff fed5 	bl	800c11e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c374:	202c      	movs	r0, #44	; 0x2c
 800c376:	f7f6 feca 	bl	800310e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c37a:	202d      	movs	r0, #45	; 0x2d
 800c37c:	f7f6 fec7 	bl	800310e <HAL_NVIC_EnableIRQ>

  return;
 800c380:	bf00      	nop
}
 800c382:	bd80      	pop	{r7, pc}
 800c384:	58000c00 	.word	0x58000c00

0800c388 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c38c:	2101      	movs	r1, #1
 800c38e:	4802      	ldr	r0, [pc, #8]	; (800c398 <HW_IPCC_BLE_Init+0x10>)
 800c390:	f7ff ff0a 	bl	800c1a8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c394:	bf00      	nop
}
 800c396:	bd80      	pop	{r7, pc}
 800c398:	58000c00 	.word	0x58000c00

0800c39c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c3a0:	2101      	movs	r1, #1
 800c3a2:	4802      	ldr	r0, [pc, #8]	; (800c3ac <HW_IPCC_BLE_SendCmd+0x10>)
 800c3a4:	f7ff ff20 	bl	800c1e8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c3a8:	bf00      	nop
}
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	58000c00 	.word	0x58000c00

0800c3b0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c3b4:	f7fd fc6c 	bl	8009c90 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c3b8:	2101      	movs	r1, #1
 800c3ba:	4802      	ldr	r0, [pc, #8]	; (800c3c4 <HW_IPCC_BLE_EvtHandler+0x14>)
 800c3bc:	f7ff ff06 	bl	800c1cc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c3c0:	bf00      	nop
}
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	58000c00 	.word	0x58000c00

0800c3c8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c3cc:	2120      	movs	r1, #32
 800c3ce:	4803      	ldr	r0, [pc, #12]	; (800c3dc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c3d0:	f7ff fed8 	bl	800c184 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c3d4:	f7fd fc8c 	bl	8009cf0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c3d8:	bf00      	nop
}
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	58000c00 	.word	0x58000c00

0800c3e0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c3e4:	2102      	movs	r1, #2
 800c3e6:	4802      	ldr	r0, [pc, #8]	; (800c3f0 <HW_IPCC_SYS_Init+0x10>)
 800c3e8:	f7ff fede 	bl	800c1a8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c3ec:	bf00      	nop
}
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	58000c00 	.word	0x58000c00

0800c3f4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c3f8:	2102      	movs	r1, #2
 800c3fa:	4804      	ldr	r0, [pc, #16]	; (800c40c <HW_IPCC_SYS_SendCmd+0x18>)
 800c3fc:	f7ff fef4 	bl	800c1e8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c400:	2102      	movs	r1, #2
 800c402:	4802      	ldr	r0, [pc, #8]	; (800c40c <HW_IPCC_SYS_SendCmd+0x18>)
 800c404:	f7ff feab 	bl	800c15e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c408:	bf00      	nop
}
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	58000c00 	.word	0x58000c00

0800c410 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c414:	2102      	movs	r1, #2
 800c416:	4803      	ldr	r0, [pc, #12]	; (800c424 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c418:	f7ff feb4 	bl	800c184 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c41c:	f7fd fcb8 	bl	8009d90 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c420:	bf00      	nop
}
 800c422:	bd80      	pop	{r7, pc}
 800c424:	58000c00 	.word	0x58000c00

0800c428 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c42c:	f7fd fcc6 	bl	8009dbc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c430:	2102      	movs	r1, #2
 800c432:	4802      	ldr	r0, [pc, #8]	; (800c43c <HW_IPCC_SYS_EvtHandler+0x14>)
 800c434:	f7ff feca 	bl	800c1cc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c438:	bf00      	nop
}
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	58000c00 	.word	0x58000c00

0800c440 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c448:	2108      	movs	r1, #8
 800c44a:	480c      	ldr	r0, [pc, #48]	; (800c47c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c44c:	f7ff fedb 	bl	800c206 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d007      	beq.n	800c466 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c456:	4a0a      	ldr	r2, [pc, #40]	; (800c480 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c45c:	2108      	movs	r1, #8
 800c45e:	4807      	ldr	r0, [pc, #28]	; (800c47c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c460:	f7ff fe7d 	bl	800c15e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c464:	e006      	b.n	800c474 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c46a:	2108      	movs	r1, #8
 800c46c:	4803      	ldr	r0, [pc, #12]	; (800c47c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c46e:	f7ff febb 	bl	800c1e8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c472:	bf00      	nop
}
 800c474:	3708      	adds	r7, #8
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	58000c00 	.word	0x58000c00
 800c480:	20001658 	.word	0x20001658

0800c484 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c488:	2108      	movs	r1, #8
 800c48a:	4806      	ldr	r0, [pc, #24]	; (800c4a4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c48c:	f7ff fe7a 	bl	800c184 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c490:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c496:	2108      	movs	r1, #8
 800c498:	4802      	ldr	r0, [pc, #8]	; (800c4a4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c49a:	f7ff fea5 	bl	800c1e8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c49e:	bf00      	nop
}
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	58000c00 	.word	0x58000c00
 800c4a8:	20001658 	.word	0x20001658

0800c4ac <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c4b0:	2108      	movs	r1, #8
 800c4b2:	4802      	ldr	r0, [pc, #8]	; (800c4bc <HW_IPCC_TRACES_Init+0x10>)
 800c4b4:	f7ff fe78 	bl	800c1a8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c4b8:	bf00      	nop
}
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	58000c00 	.word	0x58000c00

0800c4c0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c4c4:	f7fd fd22 	bl	8009f0c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c4c8:	2108      	movs	r1, #8
 800c4ca:	4802      	ldr	r0, [pc, #8]	; (800c4d4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c4cc:	f7ff fe7e 	bl	800c1cc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c4d0:	bf00      	nop
}
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	58000c00 	.word	0x58000c00

0800c4d8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c4d8:	b480      	push	{r7}
 800c4da:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c4dc:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <UTIL_LPM_Init+0x1c>)
 800c4de:	2200      	movs	r2, #0
 800c4e0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c4e2:	4b05      	ldr	r3, [pc, #20]	; (800c4f8 <UTIL_LPM_Init+0x20>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c4e8:	bf00      	nop
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	2000165c 	.word	0x2000165c
 800c4f8:	20001660 	.word	0x20001660

0800c4fc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b087      	sub	sp, #28
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	460b      	mov	r3, r1
 800c506:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c508:	f3ef 8310 	mrs	r3, PRIMASK
 800c50c:	613b      	str	r3, [r7, #16]
  return(result);
 800c50e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c510:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c512:	b672      	cpsid	i
}
 800c514:	bf00      	nop
  
  switch(state)
 800c516:	78fb      	ldrb	r3, [r7, #3]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d008      	beq.n	800c52e <UTIL_LPM_SetOffMode+0x32>
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d10e      	bne.n	800c53e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c520:	4b0d      	ldr	r3, [pc, #52]	; (800c558 <UTIL_LPM_SetOffMode+0x5c>)
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4313      	orrs	r3, r2
 800c528:	4a0b      	ldr	r2, [pc, #44]	; (800c558 <UTIL_LPM_SetOffMode+0x5c>)
 800c52a:	6013      	str	r3, [r2, #0]
      break;
 800c52c:	e008      	b.n	800c540 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	43da      	mvns	r2, r3
 800c532:	4b09      	ldr	r3, [pc, #36]	; (800c558 <UTIL_LPM_SetOffMode+0x5c>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4013      	ands	r3, r2
 800c538:	4a07      	ldr	r2, [pc, #28]	; (800c558 <UTIL_LPM_SetOffMode+0x5c>)
 800c53a:	6013      	str	r3, [r2, #0]
      break;
 800c53c:	e000      	b.n	800c540 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c53e:	bf00      	nop
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f383 8810 	msr	PRIMASK, r3
}
 800c54a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c54c:	bf00      	nop
 800c54e:	371c      	adds	r7, #28
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr
 800c558:	20001660 	.word	0x20001660

0800c55c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b090      	sub	sp, #64	; 0x40
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c564:	4b73      	ldr	r3, [pc, #460]	; (800c734 <UTIL_SEQ_Run+0x1d8>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c56a:	4b72      	ldr	r3, [pc, #456]	; (800c734 <UTIL_SEQ_Run+0x1d8>)
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4013      	ands	r3, r2
 800c572:	4a70      	ldr	r2, [pc, #448]	; (800c734 <UTIL_SEQ_Run+0x1d8>)
 800c574:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c576:	4b70      	ldr	r3, [pc, #448]	; (800c738 <UTIL_SEQ_Run+0x1dc>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c57c:	4b6f      	ldr	r3, [pc, #444]	; (800c73c <UTIL_SEQ_Run+0x1e0>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c582:	4b6f      	ldr	r3, [pc, #444]	; (800c740 <UTIL_SEQ_Run+0x1e4>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c588:	4b6e      	ldr	r3, [pc, #440]	; (800c744 <UTIL_SEQ_Run+0x1e8>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c58e:	e08d      	b.n	800c6ac <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c590:	2300      	movs	r3, #0
 800c592:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c594:	e002      	b.n	800c59c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c598:	3301      	adds	r3, #1
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c59c:	4a6a      	ldr	r2, [pc, #424]	; (800c748 <UTIL_SEQ_Run+0x1ec>)
 800c59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a6:	401a      	ands	r2, r3
 800c5a8:	4b62      	ldr	r3, [pc, #392]	; (800c734 <UTIL_SEQ_Run+0x1d8>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4013      	ands	r3, r2
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d0f1      	beq.n	800c596 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c5b2:	4a65      	ldr	r2, [pc, #404]	; (800c748 <UTIL_SEQ_Run+0x1ec>)
 800c5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5bc:	401a      	ands	r2, r3
 800c5be:	4b5d      	ldr	r3, [pc, #372]	; (800c734 <UTIL_SEQ_Run+0x1d8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c5c6:	4a60      	ldr	r2, [pc, #384]	; (800c748 <UTIL_SEQ_Run+0x1ec>)
 800c5c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ca:	00db      	lsls	r3, r3, #3
 800c5cc:	4413      	add	r3, r2
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d2:	4013      	ands	r3, r2
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d106      	bne.n	800c5e6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c5d8:	4a5b      	ldr	r2, [pc, #364]	; (800c748 <UTIL_SEQ_Run+0x1ec>)
 800c5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5dc:	00db      	lsls	r3, r3, #3
 800c5de:	4413      	add	r3, r2
 800c5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c5e6:	4a58      	ldr	r2, [pc, #352]	; (800c748 <UTIL_SEQ_Run+0x1ec>)
 800c5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ea:	00db      	lsls	r3, r3, #3
 800c5ec:	4413      	add	r3, r2
 800c5ee:	685a      	ldr	r2, [r3, #4]
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f000 f9b3 	bl	800c960 <SEQ_BitPosition>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	4b53      	ldr	r3, [pc, #332]	; (800c74c <UTIL_SEQ_Run+0x1f0>)
 800c600:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c602:	4a51      	ldr	r2, [pc, #324]	; (800c748 <UTIL_SEQ_Run+0x1ec>)
 800c604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c606:	00db      	lsls	r3, r3, #3
 800c608:	4413      	add	r3, r2
 800c60a:	685a      	ldr	r2, [r3, #4]
 800c60c:	4b4f      	ldr	r3, [pc, #316]	; (800c74c <UTIL_SEQ_Run+0x1f0>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2101      	movs	r1, #1
 800c612:	fa01 f303 	lsl.w	r3, r1, r3
 800c616:	43db      	mvns	r3, r3
 800c618:	401a      	ands	r2, r3
 800c61a:	494b      	ldr	r1, [pc, #300]	; (800c748 <UTIL_SEQ_Run+0x1ec>)
 800c61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c61e:	00db      	lsls	r3, r3, #3
 800c620:	440b      	add	r3, r1
 800c622:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c624:	f3ef 8310 	mrs	r3, PRIMASK
 800c628:	61bb      	str	r3, [r7, #24]
  return(result);
 800c62a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c62c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c62e:	b672      	cpsid	i
}
 800c630:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c632:	4b46      	ldr	r3, [pc, #280]	; (800c74c <UTIL_SEQ_Run+0x1f0>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2201      	movs	r2, #1
 800c638:	fa02 f303 	lsl.w	r3, r2, r3
 800c63c:	43da      	mvns	r2, r3
 800c63e:	4b3e      	ldr	r3, [pc, #248]	; (800c738 <UTIL_SEQ_Run+0x1dc>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4013      	ands	r3, r2
 800c644:	4a3c      	ldr	r2, [pc, #240]	; (800c738 <UTIL_SEQ_Run+0x1dc>)
 800c646:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c648:	2302      	movs	r3, #2
 800c64a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c64c:	e013      	b.n	800c676 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c650:	3b01      	subs	r3, #1
 800c652:	4a3d      	ldr	r2, [pc, #244]	; (800c748 <UTIL_SEQ_Run+0x1ec>)
 800c654:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c658:	4b3c      	ldr	r3, [pc, #240]	; (800c74c <UTIL_SEQ_Run+0x1f0>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2201      	movs	r2, #1
 800c65e:	fa02 f303 	lsl.w	r3, r2, r3
 800c662:	43da      	mvns	r2, r3
 800c664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c666:	3b01      	subs	r3, #1
 800c668:	400a      	ands	r2, r1
 800c66a:	4937      	ldr	r1, [pc, #220]	; (800c748 <UTIL_SEQ_Run+0x1ec>)
 800c66c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c672:	3b01      	subs	r3, #1
 800c674:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1e8      	bne.n	800c64e <UTIL_SEQ_Run+0xf2>
 800c67c:	6a3b      	ldr	r3, [r7, #32]
 800c67e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	f383 8810 	msr	PRIMASK, r3
}
 800c686:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c688:	4b30      	ldr	r3, [pc, #192]	; (800c74c <UTIL_SEQ_Run+0x1f0>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a30      	ldr	r2, [pc, #192]	; (800c750 <UTIL_SEQ_Run+0x1f4>)
 800c68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c692:	4798      	blx	r3

    local_taskset = TaskSet;
 800c694:	4b28      	ldr	r3, [pc, #160]	; (800c738 <UTIL_SEQ_Run+0x1dc>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c69a:	4b28      	ldr	r3, [pc, #160]	; (800c73c <UTIL_SEQ_Run+0x1e0>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c6a0:	4b27      	ldr	r3, [pc, #156]	; (800c740 <UTIL_SEQ_Run+0x1e4>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c6a6:	4b27      	ldr	r3, [pc, #156]	; (800c744 <UTIL_SEQ_Run+0x1e8>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c6ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b0:	401a      	ands	r2, r3
 800c6b2:	4b20      	ldr	r3, [pc, #128]	; (800c734 <UTIL_SEQ_Run+0x1d8>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d005      	beq.n	800c6c8 <UTIL_SEQ_Run+0x16c>
 800c6bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f43f af64 	beq.w	800c590 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c6c8:	4b20      	ldr	r3, [pc, #128]	; (800c74c <UTIL_SEQ_Run+0x1f0>)
 800c6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ce:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c6d0:	f000 f938 	bl	800c944 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c6d8:	613b      	str	r3, [r7, #16]
  return(result);
 800c6da:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c6dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6de:	b672      	cpsid	i
}
 800c6e0:	bf00      	nop
  local_taskset = TaskSet;
 800c6e2:	4b15      	ldr	r3, [pc, #84]	; (800c738 <UTIL_SEQ_Run+0x1dc>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c6e8:	4b14      	ldr	r3, [pc, #80]	; (800c73c <UTIL_SEQ_Run+0x1e0>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c6ee:	4b14      	ldr	r3, [pc, #80]	; (800c740 <UTIL_SEQ_Run+0x1e4>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c6f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	401a      	ands	r2, r3
 800c6fa:	4b0e      	ldr	r3, [pc, #56]	; (800c734 <UTIL_SEQ_Run+0x1d8>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4013      	ands	r3, r2
 800c700:	2b00      	cmp	r3, #0
 800c702:	d107      	bne.n	800c714 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c704:	4b0f      	ldr	r3, [pc, #60]	; (800c744 <UTIL_SEQ_Run+0x1e8>)
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70a:	4013      	ands	r3, r2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d101      	bne.n	800c714 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c710:	f7f4 fc27 	bl	8000f62 <UTIL_SEQ_Idle>
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f383 8810 	msr	PRIMASK, r3
}
 800c71e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c720:	f000 f917 	bl	800c952 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c724:	4a03      	ldr	r2, [pc, #12]	; (800c734 <UTIL_SEQ_Run+0x1d8>)
 800c726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c728:	6013      	str	r3, [r2, #0]

  return;
 800c72a:	bf00      	nop
}
 800c72c:	3740      	adds	r7, #64	; 0x40
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	20000030 	.word	0x20000030
 800c738:	20001664 	.word	0x20001664
 800c73c:	20001668 	.word	0x20001668
 800c740:	2000002c 	.word	0x2000002c
 800c744:	2000166c 	.word	0x2000166c
 800c748:	200016f4 	.word	0x200016f4
 800c74c:	20001670 	.word	0x20001670
 800c750:	20001674 	.word	0x20001674

0800c754 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b088      	sub	sp, #32
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c760:	f3ef 8310 	mrs	r3, PRIMASK
 800c764:	617b      	str	r3, [r7, #20]
  return(result);
 800c766:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c768:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c76a:	b672      	cpsid	i
}
 800c76c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 f8f6 	bl	800c960 <SEQ_BitPosition>
 800c774:	4603      	mov	r3, r0
 800c776:	4619      	mov	r1, r3
 800c778:	4a06      	ldr	r2, [pc, #24]	; (800c794 <UTIL_SEQ_RegTask+0x40>)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	f383 8810 	msr	PRIMASK, r3
}
 800c78a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c78c:	bf00      	nop
}
 800c78e:	3720      	adds	r7, #32
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	20001674 	.word	0x20001674

0800c798 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c798:	b480      	push	{r7}
 800c79a:	b087      	sub	sp, #28
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7a2:	f3ef 8310 	mrs	r3, PRIMASK
 800c7a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c7aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c7ac:	b672      	cpsid	i
}
 800c7ae:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c7b0:	4b0d      	ldr	r3, [pc, #52]	; (800c7e8 <UTIL_SEQ_SetTask+0x50>)
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	4a0b      	ldr	r2, [pc, #44]	; (800c7e8 <UTIL_SEQ_SetTask+0x50>)
 800c7ba:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c7bc:	4a0b      	ldr	r2, [pc, #44]	; (800c7ec <UTIL_SEQ_SetTask+0x54>)
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	431a      	orrs	r2, r3
 800c7c8:	4908      	ldr	r1, [pc, #32]	; (800c7ec <UTIL_SEQ_SetTask+0x54>)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	f383 8810 	msr	PRIMASK, r3
}
 800c7da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c7dc:	bf00      	nop
}
 800c7de:	371c      	adds	r7, #28
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	20001664 	.word	0x20001664
 800c7ec:	200016f4 	.word	0x200016f4

0800c7f0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7f8:	f3ef 8310 	mrs	r3, PRIMASK
 800c7fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c800:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c802:	b672      	cpsid	i
}
 800c804:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	43da      	mvns	r2, r3
 800c80a:	4b08      	ldr	r3, [pc, #32]	; (800c82c <UTIL_SEQ_PauseTask+0x3c>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4013      	ands	r3, r2
 800c810:	4a06      	ldr	r2, [pc, #24]	; (800c82c <UTIL_SEQ_PauseTask+0x3c>)
 800c812:	6013      	str	r3, [r2, #0]
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	f383 8810 	msr	PRIMASK, r3
}
 800c81e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c820:	bf00      	nop
}
 800c822:	371c      	adds	r7, #28
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	2000002c 	.word	0x2000002c

0800c830 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c830:	b480      	push	{r7}
 800c832:	b087      	sub	sp, #28
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c838:	f3ef 8310 	mrs	r3, PRIMASK
 800c83c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c83e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c840:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c842:	b672      	cpsid	i
}
 800c844:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c846:	4b09      	ldr	r3, [pc, #36]	; (800c86c <UTIL_SEQ_ResumeTask+0x3c>)
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4313      	orrs	r3, r2
 800c84e:	4a07      	ldr	r2, [pc, #28]	; (800c86c <UTIL_SEQ_ResumeTask+0x3c>)
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	f383 8810 	msr	PRIMASK, r3
}
 800c85c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c85e:	bf00      	nop
}
 800c860:	371c      	adds	r7, #28
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
 800c86a:	bf00      	nop
 800c86c:	2000002c 	.word	0x2000002c

0800c870 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c870:	b480      	push	{r7}
 800c872:	b087      	sub	sp, #28
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c878:	f3ef 8310 	mrs	r3, PRIMASK
 800c87c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c87e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c880:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c882:	b672      	cpsid	i
}
 800c884:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c886:	4b09      	ldr	r3, [pc, #36]	; (800c8ac <UTIL_SEQ_SetEvt+0x3c>)
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	4a07      	ldr	r2, [pc, #28]	; (800c8ac <UTIL_SEQ_SetEvt+0x3c>)
 800c890:	6013      	str	r3, [r2, #0]
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	f383 8810 	msr	PRIMASK, r3
}
 800c89c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c89e:	bf00      	nop
}
 800c8a0:	371c      	adds	r7, #28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	20001668 	.word	0x20001668

0800c8b0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b088      	sub	sp, #32
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c8b8:	4b1f      	ldr	r3, [pc, #124]	; (800c938 <UTIL_SEQ_WaitEvt+0x88>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c8be:	4b1e      	ldr	r3, [pc, #120]	; (800c938 <UTIL_SEQ_WaitEvt+0x88>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c6:	d102      	bne.n	800c8ce <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	61fb      	str	r3, [r7, #28]
 800c8cc:	e005      	b.n	800c8da <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c8ce:	4b1a      	ldr	r3, [pc, #104]	; (800c938 <UTIL_SEQ_WaitEvt+0x88>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8d8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c8da:	4b18      	ldr	r3, [pc, #96]	; (800c93c <UTIL_SEQ_WaitEvt+0x8c>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c8e0:	4a16      	ldr	r2, [pc, #88]	; (800c93c <UTIL_SEQ_WaitEvt+0x8c>)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c8e6:	e003      	b.n	800c8f0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c8e8:	6879      	ldr	r1, [r7, #4]
 800c8ea:	69f8      	ldr	r0, [r7, #28]
 800c8ec:	f7f4 fb40 	bl	8000f70 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c8f0:	4b13      	ldr	r3, [pc, #76]	; (800c940 <UTIL_SEQ_WaitEvt+0x90>)
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d0f5      	beq.n	800c8e8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c8fc:	4a0e      	ldr	r2, [pc, #56]	; (800c938 <UTIL_SEQ_WaitEvt+0x88>)
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c902:	f3ef 8310 	mrs	r3, PRIMASK
 800c906:	60bb      	str	r3, [r7, #8]
  return(result);
 800c908:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c90a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c90c:	b672      	cpsid	i
}
 800c90e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	43da      	mvns	r2, r3
 800c914:	4b0a      	ldr	r3, [pc, #40]	; (800c940 <UTIL_SEQ_WaitEvt+0x90>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4013      	ands	r3, r2
 800c91a:	4a09      	ldr	r2, [pc, #36]	; (800c940 <UTIL_SEQ_WaitEvt+0x90>)
 800c91c:	6013      	str	r3, [r2, #0]
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f383 8810 	msr	PRIMASK, r3
}
 800c928:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c92a:	4a04      	ldr	r2, [pc, #16]	; (800c93c <UTIL_SEQ_WaitEvt+0x8c>)
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	6013      	str	r3, [r2, #0]
  return;
 800c930:	bf00      	nop
}
 800c932:	3720      	adds	r7, #32
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	20001670 	.word	0x20001670
 800c93c:	2000166c 	.word	0x2000166c
 800c940:	20001668 	.word	0x20001668

0800c944 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c944:	b480      	push	{r7}
 800c946:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c948:	bf00      	nop
}
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c952:	b480      	push	{r7}
 800c954:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c956:	bf00      	nop
}
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c968:	2300      	movs	r3, #0
 800c96a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	0c1b      	lsrs	r3, r3, #16
 800c974:	041b      	lsls	r3, r3, #16
 800c976:	2b00      	cmp	r3, #0
 800c978:	d104      	bne.n	800c984 <SEQ_BitPosition+0x24>
 800c97a:	2310      	movs	r3, #16
 800c97c:	73fb      	strb	r3, [r7, #15]
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	041b      	lsls	r3, r3, #16
 800c982:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d105      	bne.n	800c99a <SEQ_BitPosition+0x3a>
 800c98e:	7bfb      	ldrb	r3, [r7, #15]
 800c990:	3308      	adds	r3, #8
 800c992:	73fb      	strb	r3, [r7, #15]
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	021b      	lsls	r3, r3, #8
 800c998:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d105      	bne.n	800c9b0 <SEQ_BitPosition+0x50>
 800c9a4:	7bfb      	ldrb	r3, [r7, #15]
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	73fb      	strb	r3, [r7, #15]
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	011b      	lsls	r3, r3, #4
 800c9ae:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	0f1b      	lsrs	r3, r3, #28
 800c9b4:	4a07      	ldr	r2, [pc, #28]	; (800c9d4 <SEQ_BitPosition+0x74>)
 800c9b6:	5cd2      	ldrb	r2, [r2, r3]
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c9be:	7bfb      	ldrb	r3, [r7, #15]
 800c9c0:	f1c3 031f 	rsb	r3, r3, #31
 800c9c4:	b2db      	uxtb	r3, r3
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr
 800c9d2:	bf00      	nop
 800c9d4:	0800ed2c 	.word	0x0800ed2c

0800c9d8 <std>:
 800c9d8:	2300      	movs	r3, #0
 800c9da:	b510      	push	{r4, lr}
 800c9dc:	4604      	mov	r4, r0
 800c9de:	e9c0 3300 	strd	r3, r3, [r0]
 800c9e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9e6:	6083      	str	r3, [r0, #8]
 800c9e8:	8181      	strh	r1, [r0, #12]
 800c9ea:	6643      	str	r3, [r0, #100]	; 0x64
 800c9ec:	81c2      	strh	r2, [r0, #14]
 800c9ee:	6183      	str	r3, [r0, #24]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	2208      	movs	r2, #8
 800c9f4:	305c      	adds	r0, #92	; 0x5c
 800c9f6:	f000 f9ff 	bl	800cdf8 <memset>
 800c9fa:	4b0d      	ldr	r3, [pc, #52]	; (800ca30 <std+0x58>)
 800c9fc:	6263      	str	r3, [r4, #36]	; 0x24
 800c9fe:	4b0d      	ldr	r3, [pc, #52]	; (800ca34 <std+0x5c>)
 800ca00:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca02:	4b0d      	ldr	r3, [pc, #52]	; (800ca38 <std+0x60>)
 800ca04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca06:	4b0d      	ldr	r3, [pc, #52]	; (800ca3c <std+0x64>)
 800ca08:	6323      	str	r3, [r4, #48]	; 0x30
 800ca0a:	4b0d      	ldr	r3, [pc, #52]	; (800ca40 <std+0x68>)
 800ca0c:	6224      	str	r4, [r4, #32]
 800ca0e:	429c      	cmp	r4, r3
 800ca10:	d006      	beq.n	800ca20 <std+0x48>
 800ca12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ca16:	4294      	cmp	r4, r2
 800ca18:	d002      	beq.n	800ca20 <std+0x48>
 800ca1a:	33d0      	adds	r3, #208	; 0xd0
 800ca1c:	429c      	cmp	r4, r3
 800ca1e:	d105      	bne.n	800ca2c <std+0x54>
 800ca20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca28:	f000 ba58 	b.w	800cedc <__retarget_lock_init_recursive>
 800ca2c:	bd10      	pop	{r4, pc}
 800ca2e:	bf00      	nop
 800ca30:	0800cc49 	.word	0x0800cc49
 800ca34:	0800cc6b 	.word	0x0800cc6b
 800ca38:	0800cca3 	.word	0x0800cca3
 800ca3c:	0800ccc7 	.word	0x0800ccc7
 800ca40:	20001704 	.word	0x20001704

0800ca44 <stdio_exit_handler>:
 800ca44:	4a02      	ldr	r2, [pc, #8]	; (800ca50 <stdio_exit_handler+0xc>)
 800ca46:	4903      	ldr	r1, [pc, #12]	; (800ca54 <stdio_exit_handler+0x10>)
 800ca48:	4803      	ldr	r0, [pc, #12]	; (800ca58 <stdio_exit_handler+0x14>)
 800ca4a:	f000 b869 	b.w	800cb20 <_fwalk_sglue>
 800ca4e:	bf00      	nop
 800ca50:	20000034 	.word	0x20000034
 800ca54:	0800d7a5 	.word	0x0800d7a5
 800ca58:	20000040 	.word	0x20000040

0800ca5c <cleanup_stdio>:
 800ca5c:	6841      	ldr	r1, [r0, #4]
 800ca5e:	4b0c      	ldr	r3, [pc, #48]	; (800ca90 <cleanup_stdio+0x34>)
 800ca60:	4299      	cmp	r1, r3
 800ca62:	b510      	push	{r4, lr}
 800ca64:	4604      	mov	r4, r0
 800ca66:	d001      	beq.n	800ca6c <cleanup_stdio+0x10>
 800ca68:	f000 fe9c 	bl	800d7a4 <_fflush_r>
 800ca6c:	68a1      	ldr	r1, [r4, #8]
 800ca6e:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <cleanup_stdio+0x38>)
 800ca70:	4299      	cmp	r1, r3
 800ca72:	d002      	beq.n	800ca7a <cleanup_stdio+0x1e>
 800ca74:	4620      	mov	r0, r4
 800ca76:	f000 fe95 	bl	800d7a4 <_fflush_r>
 800ca7a:	68e1      	ldr	r1, [r4, #12]
 800ca7c:	4b06      	ldr	r3, [pc, #24]	; (800ca98 <cleanup_stdio+0x3c>)
 800ca7e:	4299      	cmp	r1, r3
 800ca80:	d004      	beq.n	800ca8c <cleanup_stdio+0x30>
 800ca82:	4620      	mov	r0, r4
 800ca84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca88:	f000 be8c 	b.w	800d7a4 <_fflush_r>
 800ca8c:	bd10      	pop	{r4, pc}
 800ca8e:	bf00      	nop
 800ca90:	20001704 	.word	0x20001704
 800ca94:	2000176c 	.word	0x2000176c
 800ca98:	200017d4 	.word	0x200017d4

0800ca9c <global_stdio_init.part.0>:
 800ca9c:	b510      	push	{r4, lr}
 800ca9e:	4b0b      	ldr	r3, [pc, #44]	; (800cacc <global_stdio_init.part.0+0x30>)
 800caa0:	4c0b      	ldr	r4, [pc, #44]	; (800cad0 <global_stdio_init.part.0+0x34>)
 800caa2:	4a0c      	ldr	r2, [pc, #48]	; (800cad4 <global_stdio_init.part.0+0x38>)
 800caa4:	601a      	str	r2, [r3, #0]
 800caa6:	4620      	mov	r0, r4
 800caa8:	2200      	movs	r2, #0
 800caaa:	2104      	movs	r1, #4
 800caac:	f7ff ff94 	bl	800c9d8 <std>
 800cab0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cab4:	2201      	movs	r2, #1
 800cab6:	2109      	movs	r1, #9
 800cab8:	f7ff ff8e 	bl	800c9d8 <std>
 800cabc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cac0:	2202      	movs	r2, #2
 800cac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac6:	2112      	movs	r1, #18
 800cac8:	f7ff bf86 	b.w	800c9d8 <std>
 800cacc:	2000183c 	.word	0x2000183c
 800cad0:	20001704 	.word	0x20001704
 800cad4:	0800ca45 	.word	0x0800ca45

0800cad8 <__sfp_lock_acquire>:
 800cad8:	4801      	ldr	r0, [pc, #4]	; (800cae0 <__sfp_lock_acquire+0x8>)
 800cada:	f000 ba00 	b.w	800cede <__retarget_lock_acquire_recursive>
 800cade:	bf00      	nop
 800cae0:	20001845 	.word	0x20001845

0800cae4 <__sfp_lock_release>:
 800cae4:	4801      	ldr	r0, [pc, #4]	; (800caec <__sfp_lock_release+0x8>)
 800cae6:	f000 b9fb 	b.w	800cee0 <__retarget_lock_release_recursive>
 800caea:	bf00      	nop
 800caec:	20001845 	.word	0x20001845

0800caf0 <__sinit>:
 800caf0:	b510      	push	{r4, lr}
 800caf2:	4604      	mov	r4, r0
 800caf4:	f7ff fff0 	bl	800cad8 <__sfp_lock_acquire>
 800caf8:	6a23      	ldr	r3, [r4, #32]
 800cafa:	b11b      	cbz	r3, 800cb04 <__sinit+0x14>
 800cafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb00:	f7ff bff0 	b.w	800cae4 <__sfp_lock_release>
 800cb04:	4b04      	ldr	r3, [pc, #16]	; (800cb18 <__sinit+0x28>)
 800cb06:	6223      	str	r3, [r4, #32]
 800cb08:	4b04      	ldr	r3, [pc, #16]	; (800cb1c <__sinit+0x2c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d1f5      	bne.n	800cafc <__sinit+0xc>
 800cb10:	f7ff ffc4 	bl	800ca9c <global_stdio_init.part.0>
 800cb14:	e7f2      	b.n	800cafc <__sinit+0xc>
 800cb16:	bf00      	nop
 800cb18:	0800ca5d 	.word	0x0800ca5d
 800cb1c:	2000183c 	.word	0x2000183c

0800cb20 <_fwalk_sglue>:
 800cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb24:	4607      	mov	r7, r0
 800cb26:	4688      	mov	r8, r1
 800cb28:	4614      	mov	r4, r2
 800cb2a:	2600      	movs	r6, #0
 800cb2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb30:	f1b9 0901 	subs.w	r9, r9, #1
 800cb34:	d505      	bpl.n	800cb42 <_fwalk_sglue+0x22>
 800cb36:	6824      	ldr	r4, [r4, #0]
 800cb38:	2c00      	cmp	r4, #0
 800cb3a:	d1f7      	bne.n	800cb2c <_fwalk_sglue+0xc>
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb42:	89ab      	ldrh	r3, [r5, #12]
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d907      	bls.n	800cb58 <_fwalk_sglue+0x38>
 800cb48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	d003      	beq.n	800cb58 <_fwalk_sglue+0x38>
 800cb50:	4629      	mov	r1, r5
 800cb52:	4638      	mov	r0, r7
 800cb54:	47c0      	blx	r8
 800cb56:	4306      	orrs	r6, r0
 800cb58:	3568      	adds	r5, #104	; 0x68
 800cb5a:	e7e9      	b.n	800cb30 <_fwalk_sglue+0x10>

0800cb5c <iprintf>:
 800cb5c:	b40f      	push	{r0, r1, r2, r3}
 800cb5e:	b507      	push	{r0, r1, r2, lr}
 800cb60:	4906      	ldr	r1, [pc, #24]	; (800cb7c <iprintf+0x20>)
 800cb62:	ab04      	add	r3, sp, #16
 800cb64:	6808      	ldr	r0, [r1, #0]
 800cb66:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb6a:	6881      	ldr	r1, [r0, #8]
 800cb6c:	9301      	str	r3, [sp, #4]
 800cb6e:	f000 fae9 	bl	800d144 <_vfiprintf_r>
 800cb72:	b003      	add	sp, #12
 800cb74:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb78:	b004      	add	sp, #16
 800cb7a:	4770      	bx	lr
 800cb7c:	2000008c 	.word	0x2000008c

0800cb80 <putchar>:
 800cb80:	4b02      	ldr	r3, [pc, #8]	; (800cb8c <putchar+0xc>)
 800cb82:	4601      	mov	r1, r0
 800cb84:	6818      	ldr	r0, [r3, #0]
 800cb86:	6882      	ldr	r2, [r0, #8]
 800cb88:	f000 be96 	b.w	800d8b8 <_putc_r>
 800cb8c:	2000008c 	.word	0x2000008c

0800cb90 <_puts_r>:
 800cb90:	6a03      	ldr	r3, [r0, #32]
 800cb92:	b570      	push	{r4, r5, r6, lr}
 800cb94:	6884      	ldr	r4, [r0, #8]
 800cb96:	4605      	mov	r5, r0
 800cb98:	460e      	mov	r6, r1
 800cb9a:	b90b      	cbnz	r3, 800cba0 <_puts_r+0x10>
 800cb9c:	f7ff ffa8 	bl	800caf0 <__sinit>
 800cba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cba2:	07db      	lsls	r3, r3, #31
 800cba4:	d405      	bmi.n	800cbb2 <_puts_r+0x22>
 800cba6:	89a3      	ldrh	r3, [r4, #12]
 800cba8:	0598      	lsls	r0, r3, #22
 800cbaa:	d402      	bmi.n	800cbb2 <_puts_r+0x22>
 800cbac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbae:	f000 f996 	bl	800cede <__retarget_lock_acquire_recursive>
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	0719      	lsls	r1, r3, #28
 800cbb6:	d513      	bpl.n	800cbe0 <_puts_r+0x50>
 800cbb8:	6923      	ldr	r3, [r4, #16]
 800cbba:	b18b      	cbz	r3, 800cbe0 <_puts_r+0x50>
 800cbbc:	3e01      	subs	r6, #1
 800cbbe:	68a3      	ldr	r3, [r4, #8]
 800cbc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	60a3      	str	r3, [r4, #8]
 800cbc8:	b9e9      	cbnz	r1, 800cc06 <_puts_r+0x76>
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	da2e      	bge.n	800cc2c <_puts_r+0x9c>
 800cbce:	4622      	mov	r2, r4
 800cbd0:	210a      	movs	r1, #10
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	f000 f87b 	bl	800ccce <__swbuf_r>
 800cbd8:	3001      	adds	r0, #1
 800cbda:	d007      	beq.n	800cbec <_puts_r+0x5c>
 800cbdc:	250a      	movs	r5, #10
 800cbde:	e007      	b.n	800cbf0 <_puts_r+0x60>
 800cbe0:	4621      	mov	r1, r4
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f000 f8b0 	bl	800cd48 <__swsetup_r>
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	d0e7      	beq.n	800cbbc <_puts_r+0x2c>
 800cbec:	f04f 35ff 	mov.w	r5, #4294967295
 800cbf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbf2:	07da      	lsls	r2, r3, #31
 800cbf4:	d405      	bmi.n	800cc02 <_puts_r+0x72>
 800cbf6:	89a3      	ldrh	r3, [r4, #12]
 800cbf8:	059b      	lsls	r3, r3, #22
 800cbfa:	d402      	bmi.n	800cc02 <_puts_r+0x72>
 800cbfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbfe:	f000 f96f 	bl	800cee0 <__retarget_lock_release_recursive>
 800cc02:	4628      	mov	r0, r5
 800cc04:	bd70      	pop	{r4, r5, r6, pc}
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	da04      	bge.n	800cc14 <_puts_r+0x84>
 800cc0a:	69a2      	ldr	r2, [r4, #24]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	dc06      	bgt.n	800cc1e <_puts_r+0x8e>
 800cc10:	290a      	cmp	r1, #10
 800cc12:	d004      	beq.n	800cc1e <_puts_r+0x8e>
 800cc14:	6823      	ldr	r3, [r4, #0]
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	6022      	str	r2, [r4, #0]
 800cc1a:	7019      	strb	r1, [r3, #0]
 800cc1c:	e7cf      	b.n	800cbbe <_puts_r+0x2e>
 800cc1e:	4622      	mov	r2, r4
 800cc20:	4628      	mov	r0, r5
 800cc22:	f000 f854 	bl	800ccce <__swbuf_r>
 800cc26:	3001      	adds	r0, #1
 800cc28:	d1c9      	bne.n	800cbbe <_puts_r+0x2e>
 800cc2a:	e7df      	b.n	800cbec <_puts_r+0x5c>
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	250a      	movs	r5, #10
 800cc30:	1c5a      	adds	r2, r3, #1
 800cc32:	6022      	str	r2, [r4, #0]
 800cc34:	701d      	strb	r5, [r3, #0]
 800cc36:	e7db      	b.n	800cbf0 <_puts_r+0x60>

0800cc38 <puts>:
 800cc38:	4b02      	ldr	r3, [pc, #8]	; (800cc44 <puts+0xc>)
 800cc3a:	4601      	mov	r1, r0
 800cc3c:	6818      	ldr	r0, [r3, #0]
 800cc3e:	f7ff bfa7 	b.w	800cb90 <_puts_r>
 800cc42:	bf00      	nop
 800cc44:	2000008c 	.word	0x2000008c

0800cc48 <__sread>:
 800cc48:	b510      	push	{r4, lr}
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc50:	f000 f8fc 	bl	800ce4c <_read_r>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	bfab      	itete	ge
 800cc58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc5a:	89a3      	ldrhlt	r3, [r4, #12]
 800cc5c:	181b      	addge	r3, r3, r0
 800cc5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc62:	bfac      	ite	ge
 800cc64:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc66:	81a3      	strhlt	r3, [r4, #12]
 800cc68:	bd10      	pop	{r4, pc}

0800cc6a <__swrite>:
 800cc6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc6e:	461f      	mov	r7, r3
 800cc70:	898b      	ldrh	r3, [r1, #12]
 800cc72:	05db      	lsls	r3, r3, #23
 800cc74:	4605      	mov	r5, r0
 800cc76:	460c      	mov	r4, r1
 800cc78:	4616      	mov	r6, r2
 800cc7a:	d505      	bpl.n	800cc88 <__swrite+0x1e>
 800cc7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc80:	2302      	movs	r3, #2
 800cc82:	2200      	movs	r2, #0
 800cc84:	f000 f8d0 	bl	800ce28 <_lseek_r>
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc92:	81a3      	strh	r3, [r4, #12]
 800cc94:	4632      	mov	r2, r6
 800cc96:	463b      	mov	r3, r7
 800cc98:	4628      	mov	r0, r5
 800cc9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc9e:	f000 b8e7 	b.w	800ce70 <_write_r>

0800cca2 <__sseek>:
 800cca2:	b510      	push	{r4, lr}
 800cca4:	460c      	mov	r4, r1
 800cca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccaa:	f000 f8bd 	bl	800ce28 <_lseek_r>
 800ccae:	1c43      	adds	r3, r0, #1
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	bf15      	itete	ne
 800ccb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ccb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ccba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ccbe:	81a3      	strheq	r3, [r4, #12]
 800ccc0:	bf18      	it	ne
 800ccc2:	81a3      	strhne	r3, [r4, #12]
 800ccc4:	bd10      	pop	{r4, pc}

0800ccc6 <__sclose>:
 800ccc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccca:	f000 b89d 	b.w	800ce08 <_close_r>

0800ccce <__swbuf_r>:
 800ccce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd0:	460e      	mov	r6, r1
 800ccd2:	4614      	mov	r4, r2
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	b118      	cbz	r0, 800cce0 <__swbuf_r+0x12>
 800ccd8:	6a03      	ldr	r3, [r0, #32]
 800ccda:	b90b      	cbnz	r3, 800cce0 <__swbuf_r+0x12>
 800ccdc:	f7ff ff08 	bl	800caf0 <__sinit>
 800cce0:	69a3      	ldr	r3, [r4, #24]
 800cce2:	60a3      	str	r3, [r4, #8]
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	071a      	lsls	r2, r3, #28
 800cce8:	d525      	bpl.n	800cd36 <__swbuf_r+0x68>
 800ccea:	6923      	ldr	r3, [r4, #16]
 800ccec:	b31b      	cbz	r3, 800cd36 <__swbuf_r+0x68>
 800ccee:	6823      	ldr	r3, [r4, #0]
 800ccf0:	6922      	ldr	r2, [r4, #16]
 800ccf2:	1a98      	subs	r0, r3, r2
 800ccf4:	6963      	ldr	r3, [r4, #20]
 800ccf6:	b2f6      	uxtb	r6, r6
 800ccf8:	4283      	cmp	r3, r0
 800ccfa:	4637      	mov	r7, r6
 800ccfc:	dc04      	bgt.n	800cd08 <__swbuf_r+0x3a>
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4628      	mov	r0, r5
 800cd02:	f000 fd4f 	bl	800d7a4 <_fflush_r>
 800cd06:	b9e0      	cbnz	r0, 800cd42 <__swbuf_r+0x74>
 800cd08:	68a3      	ldr	r3, [r4, #8]
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	60a3      	str	r3, [r4, #8]
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	1c5a      	adds	r2, r3, #1
 800cd12:	6022      	str	r2, [r4, #0]
 800cd14:	701e      	strb	r6, [r3, #0]
 800cd16:	6962      	ldr	r2, [r4, #20]
 800cd18:	1c43      	adds	r3, r0, #1
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d004      	beq.n	800cd28 <__swbuf_r+0x5a>
 800cd1e:	89a3      	ldrh	r3, [r4, #12]
 800cd20:	07db      	lsls	r3, r3, #31
 800cd22:	d506      	bpl.n	800cd32 <__swbuf_r+0x64>
 800cd24:	2e0a      	cmp	r6, #10
 800cd26:	d104      	bne.n	800cd32 <__swbuf_r+0x64>
 800cd28:	4621      	mov	r1, r4
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f000 fd3a 	bl	800d7a4 <_fflush_r>
 800cd30:	b938      	cbnz	r0, 800cd42 <__swbuf_r+0x74>
 800cd32:	4638      	mov	r0, r7
 800cd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd36:	4621      	mov	r1, r4
 800cd38:	4628      	mov	r0, r5
 800cd3a:	f000 f805 	bl	800cd48 <__swsetup_r>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d0d5      	beq.n	800ccee <__swbuf_r+0x20>
 800cd42:	f04f 37ff 	mov.w	r7, #4294967295
 800cd46:	e7f4      	b.n	800cd32 <__swbuf_r+0x64>

0800cd48 <__swsetup_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4b2a      	ldr	r3, [pc, #168]	; (800cdf4 <__swsetup_r+0xac>)
 800cd4c:	4605      	mov	r5, r0
 800cd4e:	6818      	ldr	r0, [r3, #0]
 800cd50:	460c      	mov	r4, r1
 800cd52:	b118      	cbz	r0, 800cd5c <__swsetup_r+0x14>
 800cd54:	6a03      	ldr	r3, [r0, #32]
 800cd56:	b90b      	cbnz	r3, 800cd5c <__swsetup_r+0x14>
 800cd58:	f7ff feca 	bl	800caf0 <__sinit>
 800cd5c:	89a3      	ldrh	r3, [r4, #12]
 800cd5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd62:	0718      	lsls	r0, r3, #28
 800cd64:	d422      	bmi.n	800cdac <__swsetup_r+0x64>
 800cd66:	06d9      	lsls	r1, r3, #27
 800cd68:	d407      	bmi.n	800cd7a <__swsetup_r+0x32>
 800cd6a:	2309      	movs	r3, #9
 800cd6c:	602b      	str	r3, [r5, #0]
 800cd6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd72:	81a3      	strh	r3, [r4, #12]
 800cd74:	f04f 30ff 	mov.w	r0, #4294967295
 800cd78:	e034      	b.n	800cde4 <__swsetup_r+0x9c>
 800cd7a:	0758      	lsls	r0, r3, #29
 800cd7c:	d512      	bpl.n	800cda4 <__swsetup_r+0x5c>
 800cd7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd80:	b141      	cbz	r1, 800cd94 <__swsetup_r+0x4c>
 800cd82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd86:	4299      	cmp	r1, r3
 800cd88:	d002      	beq.n	800cd90 <__swsetup_r+0x48>
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	f000 f8b8 	bl	800cf00 <_free_r>
 800cd90:	2300      	movs	r3, #0
 800cd92:	6363      	str	r3, [r4, #52]	; 0x34
 800cd94:	89a3      	ldrh	r3, [r4, #12]
 800cd96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	6063      	str	r3, [r4, #4]
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	6023      	str	r3, [r4, #0]
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	f043 0308 	orr.w	r3, r3, #8
 800cdaa:	81a3      	strh	r3, [r4, #12]
 800cdac:	6923      	ldr	r3, [r4, #16]
 800cdae:	b94b      	cbnz	r3, 800cdc4 <__swsetup_r+0x7c>
 800cdb0:	89a3      	ldrh	r3, [r4, #12]
 800cdb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cdb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdba:	d003      	beq.n	800cdc4 <__swsetup_r+0x7c>
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	f000 fd3e 	bl	800d840 <__smakebuf_r>
 800cdc4:	89a0      	ldrh	r0, [r4, #12]
 800cdc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cdca:	f010 0301 	ands.w	r3, r0, #1
 800cdce:	d00a      	beq.n	800cde6 <__swsetup_r+0x9e>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	60a3      	str	r3, [r4, #8]
 800cdd4:	6963      	ldr	r3, [r4, #20]
 800cdd6:	425b      	negs	r3, r3
 800cdd8:	61a3      	str	r3, [r4, #24]
 800cdda:	6923      	ldr	r3, [r4, #16]
 800cddc:	b943      	cbnz	r3, 800cdf0 <__swsetup_r+0xa8>
 800cdde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cde2:	d1c4      	bne.n	800cd6e <__swsetup_r+0x26>
 800cde4:	bd38      	pop	{r3, r4, r5, pc}
 800cde6:	0781      	lsls	r1, r0, #30
 800cde8:	bf58      	it	pl
 800cdea:	6963      	ldrpl	r3, [r4, #20]
 800cdec:	60a3      	str	r3, [r4, #8]
 800cdee:	e7f4      	b.n	800cdda <__swsetup_r+0x92>
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	e7f7      	b.n	800cde4 <__swsetup_r+0x9c>
 800cdf4:	2000008c 	.word	0x2000008c

0800cdf8 <memset>:
 800cdf8:	4402      	add	r2, r0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d100      	bne.n	800ce02 <memset+0xa>
 800ce00:	4770      	bx	lr
 800ce02:	f803 1b01 	strb.w	r1, [r3], #1
 800ce06:	e7f9      	b.n	800cdfc <memset+0x4>

0800ce08 <_close_r>:
 800ce08:	b538      	push	{r3, r4, r5, lr}
 800ce0a:	4d06      	ldr	r5, [pc, #24]	; (800ce24 <_close_r+0x1c>)
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	4604      	mov	r4, r0
 800ce10:	4608      	mov	r0, r1
 800ce12:	602b      	str	r3, [r5, #0]
 800ce14:	f000 fdb6 	bl	800d984 <_close>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d102      	bne.n	800ce22 <_close_r+0x1a>
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	b103      	cbz	r3, 800ce22 <_close_r+0x1a>
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	20001840 	.word	0x20001840

0800ce28 <_lseek_r>:
 800ce28:	b538      	push	{r3, r4, r5, lr}
 800ce2a:	4d07      	ldr	r5, [pc, #28]	; (800ce48 <_lseek_r+0x20>)
 800ce2c:	4604      	mov	r4, r0
 800ce2e:	4608      	mov	r0, r1
 800ce30:	4611      	mov	r1, r2
 800ce32:	2200      	movs	r2, #0
 800ce34:	602a      	str	r2, [r5, #0]
 800ce36:	461a      	mov	r2, r3
 800ce38:	f000 fdbc 	bl	800d9b4 <_lseek>
 800ce3c:	1c43      	adds	r3, r0, #1
 800ce3e:	d102      	bne.n	800ce46 <_lseek_r+0x1e>
 800ce40:	682b      	ldr	r3, [r5, #0]
 800ce42:	b103      	cbz	r3, 800ce46 <_lseek_r+0x1e>
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	bd38      	pop	{r3, r4, r5, pc}
 800ce48:	20001840 	.word	0x20001840

0800ce4c <_read_r>:
 800ce4c:	b538      	push	{r3, r4, r5, lr}
 800ce4e:	4d07      	ldr	r5, [pc, #28]	; (800ce6c <_read_r+0x20>)
 800ce50:	4604      	mov	r4, r0
 800ce52:	4608      	mov	r0, r1
 800ce54:	4611      	mov	r1, r2
 800ce56:	2200      	movs	r2, #0
 800ce58:	602a      	str	r2, [r5, #0]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	f000 fdb2 	bl	800d9c4 <_read>
 800ce60:	1c43      	adds	r3, r0, #1
 800ce62:	d102      	bne.n	800ce6a <_read_r+0x1e>
 800ce64:	682b      	ldr	r3, [r5, #0]
 800ce66:	b103      	cbz	r3, 800ce6a <_read_r+0x1e>
 800ce68:	6023      	str	r3, [r4, #0]
 800ce6a:	bd38      	pop	{r3, r4, r5, pc}
 800ce6c:	20001840 	.word	0x20001840

0800ce70 <_write_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	4d07      	ldr	r5, [pc, #28]	; (800ce90 <_write_r+0x20>)
 800ce74:	4604      	mov	r4, r0
 800ce76:	4608      	mov	r0, r1
 800ce78:	4611      	mov	r1, r2
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	602a      	str	r2, [r5, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	f7fd f90c 	bl	800a09c <_write>
 800ce84:	1c43      	adds	r3, r0, #1
 800ce86:	d102      	bne.n	800ce8e <_write_r+0x1e>
 800ce88:	682b      	ldr	r3, [r5, #0]
 800ce8a:	b103      	cbz	r3, 800ce8e <_write_r+0x1e>
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	bd38      	pop	{r3, r4, r5, pc}
 800ce90:	20001840 	.word	0x20001840

0800ce94 <__libc_init_array>:
 800ce94:	b570      	push	{r4, r5, r6, lr}
 800ce96:	4d0d      	ldr	r5, [pc, #52]	; (800cecc <__libc_init_array+0x38>)
 800ce98:	4c0d      	ldr	r4, [pc, #52]	; (800ced0 <__libc_init_array+0x3c>)
 800ce9a:	1b64      	subs	r4, r4, r5
 800ce9c:	10a4      	asrs	r4, r4, #2
 800ce9e:	2600      	movs	r6, #0
 800cea0:	42a6      	cmp	r6, r4
 800cea2:	d109      	bne.n	800ceb8 <__libc_init_array+0x24>
 800cea4:	4d0b      	ldr	r5, [pc, #44]	; (800ced4 <__libc_init_array+0x40>)
 800cea6:	4c0c      	ldr	r4, [pc, #48]	; (800ced8 <__libc_init_array+0x44>)
 800cea8:	f000 fda2 	bl	800d9f0 <_init>
 800ceac:	1b64      	subs	r4, r4, r5
 800ceae:	10a4      	asrs	r4, r4, #2
 800ceb0:	2600      	movs	r6, #0
 800ceb2:	42a6      	cmp	r6, r4
 800ceb4:	d105      	bne.n	800cec2 <__libc_init_array+0x2e>
 800ceb6:	bd70      	pop	{r4, r5, r6, pc}
 800ceb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cebc:	4798      	blx	r3
 800cebe:	3601      	adds	r6, #1
 800cec0:	e7ee      	b.n	800cea0 <__libc_init_array+0xc>
 800cec2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cec6:	4798      	blx	r3
 800cec8:	3601      	adds	r6, #1
 800ceca:	e7f2      	b.n	800ceb2 <__libc_init_array+0x1e>
 800cecc:	0800ed78 	.word	0x0800ed78
 800ced0:	0800ed78 	.word	0x0800ed78
 800ced4:	0800ed78 	.word	0x0800ed78
 800ced8:	0800ed7c 	.word	0x0800ed7c

0800cedc <__retarget_lock_init_recursive>:
 800cedc:	4770      	bx	lr

0800cede <__retarget_lock_acquire_recursive>:
 800cede:	4770      	bx	lr

0800cee0 <__retarget_lock_release_recursive>:
 800cee0:	4770      	bx	lr

0800cee2 <memcpy>:
 800cee2:	440a      	add	r2, r1
 800cee4:	4291      	cmp	r1, r2
 800cee6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ceea:	d100      	bne.n	800ceee <memcpy+0xc>
 800ceec:	4770      	bx	lr
 800ceee:	b510      	push	{r4, lr}
 800cef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cef8:	4291      	cmp	r1, r2
 800cefa:	d1f9      	bne.n	800cef0 <memcpy+0xe>
 800cefc:	bd10      	pop	{r4, pc}
	...

0800cf00 <_free_r>:
 800cf00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf02:	2900      	cmp	r1, #0
 800cf04:	d044      	beq.n	800cf90 <_free_r+0x90>
 800cf06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf0a:	9001      	str	r0, [sp, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f1a1 0404 	sub.w	r4, r1, #4
 800cf12:	bfb8      	it	lt
 800cf14:	18e4      	addlt	r4, r4, r3
 800cf16:	f000 f8df 	bl	800d0d8 <__malloc_lock>
 800cf1a:	4a1e      	ldr	r2, [pc, #120]	; (800cf94 <_free_r+0x94>)
 800cf1c:	9801      	ldr	r0, [sp, #4]
 800cf1e:	6813      	ldr	r3, [r2, #0]
 800cf20:	b933      	cbnz	r3, 800cf30 <_free_r+0x30>
 800cf22:	6063      	str	r3, [r4, #4]
 800cf24:	6014      	str	r4, [r2, #0]
 800cf26:	b003      	add	sp, #12
 800cf28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf2c:	f000 b8da 	b.w	800d0e4 <__malloc_unlock>
 800cf30:	42a3      	cmp	r3, r4
 800cf32:	d908      	bls.n	800cf46 <_free_r+0x46>
 800cf34:	6825      	ldr	r5, [r4, #0]
 800cf36:	1961      	adds	r1, r4, r5
 800cf38:	428b      	cmp	r3, r1
 800cf3a:	bf01      	itttt	eq
 800cf3c:	6819      	ldreq	r1, [r3, #0]
 800cf3e:	685b      	ldreq	r3, [r3, #4]
 800cf40:	1949      	addeq	r1, r1, r5
 800cf42:	6021      	streq	r1, [r4, #0]
 800cf44:	e7ed      	b.n	800cf22 <_free_r+0x22>
 800cf46:	461a      	mov	r2, r3
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	b10b      	cbz	r3, 800cf50 <_free_r+0x50>
 800cf4c:	42a3      	cmp	r3, r4
 800cf4e:	d9fa      	bls.n	800cf46 <_free_r+0x46>
 800cf50:	6811      	ldr	r1, [r2, #0]
 800cf52:	1855      	adds	r5, r2, r1
 800cf54:	42a5      	cmp	r5, r4
 800cf56:	d10b      	bne.n	800cf70 <_free_r+0x70>
 800cf58:	6824      	ldr	r4, [r4, #0]
 800cf5a:	4421      	add	r1, r4
 800cf5c:	1854      	adds	r4, r2, r1
 800cf5e:	42a3      	cmp	r3, r4
 800cf60:	6011      	str	r1, [r2, #0]
 800cf62:	d1e0      	bne.n	800cf26 <_free_r+0x26>
 800cf64:	681c      	ldr	r4, [r3, #0]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	6053      	str	r3, [r2, #4]
 800cf6a:	440c      	add	r4, r1
 800cf6c:	6014      	str	r4, [r2, #0]
 800cf6e:	e7da      	b.n	800cf26 <_free_r+0x26>
 800cf70:	d902      	bls.n	800cf78 <_free_r+0x78>
 800cf72:	230c      	movs	r3, #12
 800cf74:	6003      	str	r3, [r0, #0]
 800cf76:	e7d6      	b.n	800cf26 <_free_r+0x26>
 800cf78:	6825      	ldr	r5, [r4, #0]
 800cf7a:	1961      	adds	r1, r4, r5
 800cf7c:	428b      	cmp	r3, r1
 800cf7e:	bf04      	itt	eq
 800cf80:	6819      	ldreq	r1, [r3, #0]
 800cf82:	685b      	ldreq	r3, [r3, #4]
 800cf84:	6063      	str	r3, [r4, #4]
 800cf86:	bf04      	itt	eq
 800cf88:	1949      	addeq	r1, r1, r5
 800cf8a:	6021      	streq	r1, [r4, #0]
 800cf8c:	6054      	str	r4, [r2, #4]
 800cf8e:	e7ca      	b.n	800cf26 <_free_r+0x26>
 800cf90:	b003      	add	sp, #12
 800cf92:	bd30      	pop	{r4, r5, pc}
 800cf94:	20001848 	.word	0x20001848

0800cf98 <sbrk_aligned>:
 800cf98:	b570      	push	{r4, r5, r6, lr}
 800cf9a:	4e0e      	ldr	r6, [pc, #56]	; (800cfd4 <sbrk_aligned+0x3c>)
 800cf9c:	460c      	mov	r4, r1
 800cf9e:	6831      	ldr	r1, [r6, #0]
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	b911      	cbnz	r1, 800cfaa <sbrk_aligned+0x12>
 800cfa4:	f000 fcde 	bl	800d964 <_sbrk_r>
 800cfa8:	6030      	str	r0, [r6, #0]
 800cfaa:	4621      	mov	r1, r4
 800cfac:	4628      	mov	r0, r5
 800cfae:	f000 fcd9 	bl	800d964 <_sbrk_r>
 800cfb2:	1c43      	adds	r3, r0, #1
 800cfb4:	d00a      	beq.n	800cfcc <sbrk_aligned+0x34>
 800cfb6:	1cc4      	adds	r4, r0, #3
 800cfb8:	f024 0403 	bic.w	r4, r4, #3
 800cfbc:	42a0      	cmp	r0, r4
 800cfbe:	d007      	beq.n	800cfd0 <sbrk_aligned+0x38>
 800cfc0:	1a21      	subs	r1, r4, r0
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	f000 fcce 	bl	800d964 <_sbrk_r>
 800cfc8:	3001      	adds	r0, #1
 800cfca:	d101      	bne.n	800cfd0 <sbrk_aligned+0x38>
 800cfcc:	f04f 34ff 	mov.w	r4, #4294967295
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	bd70      	pop	{r4, r5, r6, pc}
 800cfd4:	2000184c 	.word	0x2000184c

0800cfd8 <_malloc_r>:
 800cfd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfdc:	1ccd      	adds	r5, r1, #3
 800cfde:	f025 0503 	bic.w	r5, r5, #3
 800cfe2:	3508      	adds	r5, #8
 800cfe4:	2d0c      	cmp	r5, #12
 800cfe6:	bf38      	it	cc
 800cfe8:	250c      	movcc	r5, #12
 800cfea:	2d00      	cmp	r5, #0
 800cfec:	4607      	mov	r7, r0
 800cfee:	db01      	blt.n	800cff4 <_malloc_r+0x1c>
 800cff0:	42a9      	cmp	r1, r5
 800cff2:	d905      	bls.n	800d000 <_malloc_r+0x28>
 800cff4:	230c      	movs	r3, #12
 800cff6:	603b      	str	r3, [r7, #0]
 800cff8:	2600      	movs	r6, #0
 800cffa:	4630      	mov	r0, r6
 800cffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d000:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d0d4 <_malloc_r+0xfc>
 800d004:	f000 f868 	bl	800d0d8 <__malloc_lock>
 800d008:	f8d8 3000 	ldr.w	r3, [r8]
 800d00c:	461c      	mov	r4, r3
 800d00e:	bb5c      	cbnz	r4, 800d068 <_malloc_r+0x90>
 800d010:	4629      	mov	r1, r5
 800d012:	4638      	mov	r0, r7
 800d014:	f7ff ffc0 	bl	800cf98 <sbrk_aligned>
 800d018:	1c43      	adds	r3, r0, #1
 800d01a:	4604      	mov	r4, r0
 800d01c:	d155      	bne.n	800d0ca <_malloc_r+0xf2>
 800d01e:	f8d8 4000 	ldr.w	r4, [r8]
 800d022:	4626      	mov	r6, r4
 800d024:	2e00      	cmp	r6, #0
 800d026:	d145      	bne.n	800d0b4 <_malloc_r+0xdc>
 800d028:	2c00      	cmp	r4, #0
 800d02a:	d048      	beq.n	800d0be <_malloc_r+0xe6>
 800d02c:	6823      	ldr	r3, [r4, #0]
 800d02e:	4631      	mov	r1, r6
 800d030:	4638      	mov	r0, r7
 800d032:	eb04 0903 	add.w	r9, r4, r3
 800d036:	f000 fc95 	bl	800d964 <_sbrk_r>
 800d03a:	4581      	cmp	r9, r0
 800d03c:	d13f      	bne.n	800d0be <_malloc_r+0xe6>
 800d03e:	6821      	ldr	r1, [r4, #0]
 800d040:	1a6d      	subs	r5, r5, r1
 800d042:	4629      	mov	r1, r5
 800d044:	4638      	mov	r0, r7
 800d046:	f7ff ffa7 	bl	800cf98 <sbrk_aligned>
 800d04a:	3001      	adds	r0, #1
 800d04c:	d037      	beq.n	800d0be <_malloc_r+0xe6>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	442b      	add	r3, r5
 800d052:	6023      	str	r3, [r4, #0]
 800d054:	f8d8 3000 	ldr.w	r3, [r8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d038      	beq.n	800d0ce <_malloc_r+0xf6>
 800d05c:	685a      	ldr	r2, [r3, #4]
 800d05e:	42a2      	cmp	r2, r4
 800d060:	d12b      	bne.n	800d0ba <_malloc_r+0xe2>
 800d062:	2200      	movs	r2, #0
 800d064:	605a      	str	r2, [r3, #4]
 800d066:	e00f      	b.n	800d088 <_malloc_r+0xb0>
 800d068:	6822      	ldr	r2, [r4, #0]
 800d06a:	1b52      	subs	r2, r2, r5
 800d06c:	d41f      	bmi.n	800d0ae <_malloc_r+0xd6>
 800d06e:	2a0b      	cmp	r2, #11
 800d070:	d917      	bls.n	800d0a2 <_malloc_r+0xca>
 800d072:	1961      	adds	r1, r4, r5
 800d074:	42a3      	cmp	r3, r4
 800d076:	6025      	str	r5, [r4, #0]
 800d078:	bf18      	it	ne
 800d07a:	6059      	strne	r1, [r3, #4]
 800d07c:	6863      	ldr	r3, [r4, #4]
 800d07e:	bf08      	it	eq
 800d080:	f8c8 1000 	streq.w	r1, [r8]
 800d084:	5162      	str	r2, [r4, r5]
 800d086:	604b      	str	r3, [r1, #4]
 800d088:	4638      	mov	r0, r7
 800d08a:	f104 060b 	add.w	r6, r4, #11
 800d08e:	f000 f829 	bl	800d0e4 <__malloc_unlock>
 800d092:	f026 0607 	bic.w	r6, r6, #7
 800d096:	1d23      	adds	r3, r4, #4
 800d098:	1af2      	subs	r2, r6, r3
 800d09a:	d0ae      	beq.n	800cffa <_malloc_r+0x22>
 800d09c:	1b9b      	subs	r3, r3, r6
 800d09e:	50a3      	str	r3, [r4, r2]
 800d0a0:	e7ab      	b.n	800cffa <_malloc_r+0x22>
 800d0a2:	42a3      	cmp	r3, r4
 800d0a4:	6862      	ldr	r2, [r4, #4]
 800d0a6:	d1dd      	bne.n	800d064 <_malloc_r+0x8c>
 800d0a8:	f8c8 2000 	str.w	r2, [r8]
 800d0ac:	e7ec      	b.n	800d088 <_malloc_r+0xb0>
 800d0ae:	4623      	mov	r3, r4
 800d0b0:	6864      	ldr	r4, [r4, #4]
 800d0b2:	e7ac      	b.n	800d00e <_malloc_r+0x36>
 800d0b4:	4634      	mov	r4, r6
 800d0b6:	6876      	ldr	r6, [r6, #4]
 800d0b8:	e7b4      	b.n	800d024 <_malloc_r+0x4c>
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	e7cc      	b.n	800d058 <_malloc_r+0x80>
 800d0be:	230c      	movs	r3, #12
 800d0c0:	603b      	str	r3, [r7, #0]
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	f000 f80e 	bl	800d0e4 <__malloc_unlock>
 800d0c8:	e797      	b.n	800cffa <_malloc_r+0x22>
 800d0ca:	6025      	str	r5, [r4, #0]
 800d0cc:	e7dc      	b.n	800d088 <_malloc_r+0xb0>
 800d0ce:	605b      	str	r3, [r3, #4]
 800d0d0:	deff      	udf	#255	; 0xff
 800d0d2:	bf00      	nop
 800d0d4:	20001848 	.word	0x20001848

0800d0d8 <__malloc_lock>:
 800d0d8:	4801      	ldr	r0, [pc, #4]	; (800d0e0 <__malloc_lock+0x8>)
 800d0da:	f7ff bf00 	b.w	800cede <__retarget_lock_acquire_recursive>
 800d0de:	bf00      	nop
 800d0e0:	20001844 	.word	0x20001844

0800d0e4 <__malloc_unlock>:
 800d0e4:	4801      	ldr	r0, [pc, #4]	; (800d0ec <__malloc_unlock+0x8>)
 800d0e6:	f7ff befb 	b.w	800cee0 <__retarget_lock_release_recursive>
 800d0ea:	bf00      	nop
 800d0ec:	20001844 	.word	0x20001844

0800d0f0 <__sfputc_r>:
 800d0f0:	6893      	ldr	r3, [r2, #8]
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	b410      	push	{r4}
 800d0f8:	6093      	str	r3, [r2, #8]
 800d0fa:	da08      	bge.n	800d10e <__sfputc_r+0x1e>
 800d0fc:	6994      	ldr	r4, [r2, #24]
 800d0fe:	42a3      	cmp	r3, r4
 800d100:	db01      	blt.n	800d106 <__sfputc_r+0x16>
 800d102:	290a      	cmp	r1, #10
 800d104:	d103      	bne.n	800d10e <__sfputc_r+0x1e>
 800d106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d10a:	f7ff bde0 	b.w	800ccce <__swbuf_r>
 800d10e:	6813      	ldr	r3, [r2, #0]
 800d110:	1c58      	adds	r0, r3, #1
 800d112:	6010      	str	r0, [r2, #0]
 800d114:	7019      	strb	r1, [r3, #0]
 800d116:	4608      	mov	r0, r1
 800d118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d11c:	4770      	bx	lr

0800d11e <__sfputs_r>:
 800d11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d120:	4606      	mov	r6, r0
 800d122:	460f      	mov	r7, r1
 800d124:	4614      	mov	r4, r2
 800d126:	18d5      	adds	r5, r2, r3
 800d128:	42ac      	cmp	r4, r5
 800d12a:	d101      	bne.n	800d130 <__sfputs_r+0x12>
 800d12c:	2000      	movs	r0, #0
 800d12e:	e007      	b.n	800d140 <__sfputs_r+0x22>
 800d130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d134:	463a      	mov	r2, r7
 800d136:	4630      	mov	r0, r6
 800d138:	f7ff ffda 	bl	800d0f0 <__sfputc_r>
 800d13c:	1c43      	adds	r3, r0, #1
 800d13e:	d1f3      	bne.n	800d128 <__sfputs_r+0xa>
 800d140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d144 <_vfiprintf_r>:
 800d144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d148:	460d      	mov	r5, r1
 800d14a:	b09d      	sub	sp, #116	; 0x74
 800d14c:	4614      	mov	r4, r2
 800d14e:	4698      	mov	r8, r3
 800d150:	4606      	mov	r6, r0
 800d152:	b118      	cbz	r0, 800d15c <_vfiprintf_r+0x18>
 800d154:	6a03      	ldr	r3, [r0, #32]
 800d156:	b90b      	cbnz	r3, 800d15c <_vfiprintf_r+0x18>
 800d158:	f7ff fcca 	bl	800caf0 <__sinit>
 800d15c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d15e:	07d9      	lsls	r1, r3, #31
 800d160:	d405      	bmi.n	800d16e <_vfiprintf_r+0x2a>
 800d162:	89ab      	ldrh	r3, [r5, #12]
 800d164:	059a      	lsls	r2, r3, #22
 800d166:	d402      	bmi.n	800d16e <_vfiprintf_r+0x2a>
 800d168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d16a:	f7ff feb8 	bl	800cede <__retarget_lock_acquire_recursive>
 800d16e:	89ab      	ldrh	r3, [r5, #12]
 800d170:	071b      	lsls	r3, r3, #28
 800d172:	d501      	bpl.n	800d178 <_vfiprintf_r+0x34>
 800d174:	692b      	ldr	r3, [r5, #16]
 800d176:	b99b      	cbnz	r3, 800d1a0 <_vfiprintf_r+0x5c>
 800d178:	4629      	mov	r1, r5
 800d17a:	4630      	mov	r0, r6
 800d17c:	f7ff fde4 	bl	800cd48 <__swsetup_r>
 800d180:	b170      	cbz	r0, 800d1a0 <_vfiprintf_r+0x5c>
 800d182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d184:	07dc      	lsls	r4, r3, #31
 800d186:	d504      	bpl.n	800d192 <_vfiprintf_r+0x4e>
 800d188:	f04f 30ff 	mov.w	r0, #4294967295
 800d18c:	b01d      	add	sp, #116	; 0x74
 800d18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d192:	89ab      	ldrh	r3, [r5, #12]
 800d194:	0598      	lsls	r0, r3, #22
 800d196:	d4f7      	bmi.n	800d188 <_vfiprintf_r+0x44>
 800d198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d19a:	f7ff fea1 	bl	800cee0 <__retarget_lock_release_recursive>
 800d19e:	e7f3      	b.n	800d188 <_vfiprintf_r+0x44>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a4:	2320      	movs	r3, #32
 800d1a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1ae:	2330      	movs	r3, #48	; 0x30
 800d1b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d364 <_vfiprintf_r+0x220>
 800d1b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1b8:	f04f 0901 	mov.w	r9, #1
 800d1bc:	4623      	mov	r3, r4
 800d1be:	469a      	mov	sl, r3
 800d1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1c4:	b10a      	cbz	r2, 800d1ca <_vfiprintf_r+0x86>
 800d1c6:	2a25      	cmp	r2, #37	; 0x25
 800d1c8:	d1f9      	bne.n	800d1be <_vfiprintf_r+0x7a>
 800d1ca:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ce:	d00b      	beq.n	800d1e8 <_vfiprintf_r+0xa4>
 800d1d0:	465b      	mov	r3, fp
 800d1d2:	4622      	mov	r2, r4
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f7ff ffa1 	bl	800d11e <__sfputs_r>
 800d1dc:	3001      	adds	r0, #1
 800d1de:	f000 80a9 	beq.w	800d334 <_vfiprintf_r+0x1f0>
 800d1e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1e4:	445a      	add	r2, fp
 800d1e6:	9209      	str	r2, [sp, #36]	; 0x24
 800d1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f000 80a1 	beq.w	800d334 <_vfiprintf_r+0x1f0>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1fc:	f10a 0a01 	add.w	sl, sl, #1
 800d200:	9304      	str	r3, [sp, #16]
 800d202:	9307      	str	r3, [sp, #28]
 800d204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d208:	931a      	str	r3, [sp, #104]	; 0x68
 800d20a:	4654      	mov	r4, sl
 800d20c:	2205      	movs	r2, #5
 800d20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d212:	4854      	ldr	r0, [pc, #336]	; (800d364 <_vfiprintf_r+0x220>)
 800d214:	f7f2 ffcc 	bl	80001b0 <memchr>
 800d218:	9a04      	ldr	r2, [sp, #16]
 800d21a:	b9d8      	cbnz	r0, 800d254 <_vfiprintf_r+0x110>
 800d21c:	06d1      	lsls	r1, r2, #27
 800d21e:	bf44      	itt	mi
 800d220:	2320      	movmi	r3, #32
 800d222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d226:	0713      	lsls	r3, r2, #28
 800d228:	bf44      	itt	mi
 800d22a:	232b      	movmi	r3, #43	; 0x2b
 800d22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d230:	f89a 3000 	ldrb.w	r3, [sl]
 800d234:	2b2a      	cmp	r3, #42	; 0x2a
 800d236:	d015      	beq.n	800d264 <_vfiprintf_r+0x120>
 800d238:	9a07      	ldr	r2, [sp, #28]
 800d23a:	4654      	mov	r4, sl
 800d23c:	2000      	movs	r0, #0
 800d23e:	f04f 0c0a 	mov.w	ip, #10
 800d242:	4621      	mov	r1, r4
 800d244:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d248:	3b30      	subs	r3, #48	; 0x30
 800d24a:	2b09      	cmp	r3, #9
 800d24c:	d94d      	bls.n	800d2ea <_vfiprintf_r+0x1a6>
 800d24e:	b1b0      	cbz	r0, 800d27e <_vfiprintf_r+0x13a>
 800d250:	9207      	str	r2, [sp, #28]
 800d252:	e014      	b.n	800d27e <_vfiprintf_r+0x13a>
 800d254:	eba0 0308 	sub.w	r3, r0, r8
 800d258:	fa09 f303 	lsl.w	r3, r9, r3
 800d25c:	4313      	orrs	r3, r2
 800d25e:	9304      	str	r3, [sp, #16]
 800d260:	46a2      	mov	sl, r4
 800d262:	e7d2      	b.n	800d20a <_vfiprintf_r+0xc6>
 800d264:	9b03      	ldr	r3, [sp, #12]
 800d266:	1d19      	adds	r1, r3, #4
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	9103      	str	r1, [sp, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	bfbb      	ittet	lt
 800d270:	425b      	neglt	r3, r3
 800d272:	f042 0202 	orrlt.w	r2, r2, #2
 800d276:	9307      	strge	r3, [sp, #28]
 800d278:	9307      	strlt	r3, [sp, #28]
 800d27a:	bfb8      	it	lt
 800d27c:	9204      	strlt	r2, [sp, #16]
 800d27e:	7823      	ldrb	r3, [r4, #0]
 800d280:	2b2e      	cmp	r3, #46	; 0x2e
 800d282:	d10c      	bne.n	800d29e <_vfiprintf_r+0x15a>
 800d284:	7863      	ldrb	r3, [r4, #1]
 800d286:	2b2a      	cmp	r3, #42	; 0x2a
 800d288:	d134      	bne.n	800d2f4 <_vfiprintf_r+0x1b0>
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	1d1a      	adds	r2, r3, #4
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	9203      	str	r2, [sp, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	bfb8      	it	lt
 800d296:	f04f 33ff 	movlt.w	r3, #4294967295
 800d29a:	3402      	adds	r4, #2
 800d29c:	9305      	str	r3, [sp, #20]
 800d29e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d374 <_vfiprintf_r+0x230>
 800d2a2:	7821      	ldrb	r1, [r4, #0]
 800d2a4:	2203      	movs	r2, #3
 800d2a6:	4650      	mov	r0, sl
 800d2a8:	f7f2 ff82 	bl	80001b0 <memchr>
 800d2ac:	b138      	cbz	r0, 800d2be <_vfiprintf_r+0x17a>
 800d2ae:	9b04      	ldr	r3, [sp, #16]
 800d2b0:	eba0 000a 	sub.w	r0, r0, sl
 800d2b4:	2240      	movs	r2, #64	; 0x40
 800d2b6:	4082      	lsls	r2, r0
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	3401      	adds	r4, #1
 800d2bc:	9304      	str	r3, [sp, #16]
 800d2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c2:	4829      	ldr	r0, [pc, #164]	; (800d368 <_vfiprintf_r+0x224>)
 800d2c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2c8:	2206      	movs	r2, #6
 800d2ca:	f7f2 ff71 	bl	80001b0 <memchr>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	d03f      	beq.n	800d352 <_vfiprintf_r+0x20e>
 800d2d2:	4b26      	ldr	r3, [pc, #152]	; (800d36c <_vfiprintf_r+0x228>)
 800d2d4:	bb1b      	cbnz	r3, 800d31e <_vfiprintf_r+0x1da>
 800d2d6:	9b03      	ldr	r3, [sp, #12]
 800d2d8:	3307      	adds	r3, #7
 800d2da:	f023 0307 	bic.w	r3, r3, #7
 800d2de:	3308      	adds	r3, #8
 800d2e0:	9303      	str	r3, [sp, #12]
 800d2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e4:	443b      	add	r3, r7
 800d2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d2e8:	e768      	b.n	800d1bc <_vfiprintf_r+0x78>
 800d2ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2ee:	460c      	mov	r4, r1
 800d2f0:	2001      	movs	r0, #1
 800d2f2:	e7a6      	b.n	800d242 <_vfiprintf_r+0xfe>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	3401      	adds	r4, #1
 800d2f8:	9305      	str	r3, [sp, #20]
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	f04f 0c0a 	mov.w	ip, #10
 800d300:	4620      	mov	r0, r4
 800d302:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d306:	3a30      	subs	r2, #48	; 0x30
 800d308:	2a09      	cmp	r2, #9
 800d30a:	d903      	bls.n	800d314 <_vfiprintf_r+0x1d0>
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d0c6      	beq.n	800d29e <_vfiprintf_r+0x15a>
 800d310:	9105      	str	r1, [sp, #20]
 800d312:	e7c4      	b.n	800d29e <_vfiprintf_r+0x15a>
 800d314:	fb0c 2101 	mla	r1, ip, r1, r2
 800d318:	4604      	mov	r4, r0
 800d31a:	2301      	movs	r3, #1
 800d31c:	e7f0      	b.n	800d300 <_vfiprintf_r+0x1bc>
 800d31e:	ab03      	add	r3, sp, #12
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	462a      	mov	r2, r5
 800d324:	4b12      	ldr	r3, [pc, #72]	; (800d370 <_vfiprintf_r+0x22c>)
 800d326:	a904      	add	r1, sp, #16
 800d328:	4630      	mov	r0, r6
 800d32a:	f3af 8000 	nop.w
 800d32e:	4607      	mov	r7, r0
 800d330:	1c78      	adds	r0, r7, #1
 800d332:	d1d6      	bne.n	800d2e2 <_vfiprintf_r+0x19e>
 800d334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d336:	07d9      	lsls	r1, r3, #31
 800d338:	d405      	bmi.n	800d346 <_vfiprintf_r+0x202>
 800d33a:	89ab      	ldrh	r3, [r5, #12]
 800d33c:	059a      	lsls	r2, r3, #22
 800d33e:	d402      	bmi.n	800d346 <_vfiprintf_r+0x202>
 800d340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d342:	f7ff fdcd 	bl	800cee0 <__retarget_lock_release_recursive>
 800d346:	89ab      	ldrh	r3, [r5, #12]
 800d348:	065b      	lsls	r3, r3, #25
 800d34a:	f53f af1d 	bmi.w	800d188 <_vfiprintf_r+0x44>
 800d34e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d350:	e71c      	b.n	800d18c <_vfiprintf_r+0x48>
 800d352:	ab03      	add	r3, sp, #12
 800d354:	9300      	str	r3, [sp, #0]
 800d356:	462a      	mov	r2, r5
 800d358:	4b05      	ldr	r3, [pc, #20]	; (800d370 <_vfiprintf_r+0x22c>)
 800d35a:	a904      	add	r1, sp, #16
 800d35c:	4630      	mov	r0, r6
 800d35e:	f000 f879 	bl	800d454 <_printf_i>
 800d362:	e7e4      	b.n	800d32e <_vfiprintf_r+0x1ea>
 800d364:	0800ed3c 	.word	0x0800ed3c
 800d368:	0800ed46 	.word	0x0800ed46
 800d36c:	00000000 	.word	0x00000000
 800d370:	0800d11f 	.word	0x0800d11f
 800d374:	0800ed42 	.word	0x0800ed42

0800d378 <_printf_common>:
 800d378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d37c:	4616      	mov	r6, r2
 800d37e:	4699      	mov	r9, r3
 800d380:	688a      	ldr	r2, [r1, #8]
 800d382:	690b      	ldr	r3, [r1, #16]
 800d384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d388:	4293      	cmp	r3, r2
 800d38a:	bfb8      	it	lt
 800d38c:	4613      	movlt	r3, r2
 800d38e:	6033      	str	r3, [r6, #0]
 800d390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d394:	4607      	mov	r7, r0
 800d396:	460c      	mov	r4, r1
 800d398:	b10a      	cbz	r2, 800d39e <_printf_common+0x26>
 800d39a:	3301      	adds	r3, #1
 800d39c:	6033      	str	r3, [r6, #0]
 800d39e:	6823      	ldr	r3, [r4, #0]
 800d3a0:	0699      	lsls	r1, r3, #26
 800d3a2:	bf42      	ittt	mi
 800d3a4:	6833      	ldrmi	r3, [r6, #0]
 800d3a6:	3302      	addmi	r3, #2
 800d3a8:	6033      	strmi	r3, [r6, #0]
 800d3aa:	6825      	ldr	r5, [r4, #0]
 800d3ac:	f015 0506 	ands.w	r5, r5, #6
 800d3b0:	d106      	bne.n	800d3c0 <_printf_common+0x48>
 800d3b2:	f104 0a19 	add.w	sl, r4, #25
 800d3b6:	68e3      	ldr	r3, [r4, #12]
 800d3b8:	6832      	ldr	r2, [r6, #0]
 800d3ba:	1a9b      	subs	r3, r3, r2
 800d3bc:	42ab      	cmp	r3, r5
 800d3be:	dc26      	bgt.n	800d40e <_printf_common+0x96>
 800d3c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3c4:	1e13      	subs	r3, r2, #0
 800d3c6:	6822      	ldr	r2, [r4, #0]
 800d3c8:	bf18      	it	ne
 800d3ca:	2301      	movne	r3, #1
 800d3cc:	0692      	lsls	r2, r2, #26
 800d3ce:	d42b      	bmi.n	800d428 <_printf_common+0xb0>
 800d3d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d3d4:	4649      	mov	r1, r9
 800d3d6:	4638      	mov	r0, r7
 800d3d8:	47c0      	blx	r8
 800d3da:	3001      	adds	r0, #1
 800d3dc:	d01e      	beq.n	800d41c <_printf_common+0xa4>
 800d3de:	6823      	ldr	r3, [r4, #0]
 800d3e0:	6922      	ldr	r2, [r4, #16]
 800d3e2:	f003 0306 	and.w	r3, r3, #6
 800d3e6:	2b04      	cmp	r3, #4
 800d3e8:	bf02      	ittt	eq
 800d3ea:	68e5      	ldreq	r5, [r4, #12]
 800d3ec:	6833      	ldreq	r3, [r6, #0]
 800d3ee:	1aed      	subeq	r5, r5, r3
 800d3f0:	68a3      	ldr	r3, [r4, #8]
 800d3f2:	bf0c      	ite	eq
 800d3f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3f8:	2500      	movne	r5, #0
 800d3fa:	4293      	cmp	r3, r2
 800d3fc:	bfc4      	itt	gt
 800d3fe:	1a9b      	subgt	r3, r3, r2
 800d400:	18ed      	addgt	r5, r5, r3
 800d402:	2600      	movs	r6, #0
 800d404:	341a      	adds	r4, #26
 800d406:	42b5      	cmp	r5, r6
 800d408:	d11a      	bne.n	800d440 <_printf_common+0xc8>
 800d40a:	2000      	movs	r0, #0
 800d40c:	e008      	b.n	800d420 <_printf_common+0xa8>
 800d40e:	2301      	movs	r3, #1
 800d410:	4652      	mov	r2, sl
 800d412:	4649      	mov	r1, r9
 800d414:	4638      	mov	r0, r7
 800d416:	47c0      	blx	r8
 800d418:	3001      	adds	r0, #1
 800d41a:	d103      	bne.n	800d424 <_printf_common+0xac>
 800d41c:	f04f 30ff 	mov.w	r0, #4294967295
 800d420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d424:	3501      	adds	r5, #1
 800d426:	e7c6      	b.n	800d3b6 <_printf_common+0x3e>
 800d428:	18e1      	adds	r1, r4, r3
 800d42a:	1c5a      	adds	r2, r3, #1
 800d42c:	2030      	movs	r0, #48	; 0x30
 800d42e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d432:	4422      	add	r2, r4
 800d434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d43c:	3302      	adds	r3, #2
 800d43e:	e7c7      	b.n	800d3d0 <_printf_common+0x58>
 800d440:	2301      	movs	r3, #1
 800d442:	4622      	mov	r2, r4
 800d444:	4649      	mov	r1, r9
 800d446:	4638      	mov	r0, r7
 800d448:	47c0      	blx	r8
 800d44a:	3001      	adds	r0, #1
 800d44c:	d0e6      	beq.n	800d41c <_printf_common+0xa4>
 800d44e:	3601      	adds	r6, #1
 800d450:	e7d9      	b.n	800d406 <_printf_common+0x8e>
	...

0800d454 <_printf_i>:
 800d454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d458:	7e0f      	ldrb	r7, [r1, #24]
 800d45a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d45c:	2f78      	cmp	r7, #120	; 0x78
 800d45e:	4691      	mov	r9, r2
 800d460:	4680      	mov	r8, r0
 800d462:	460c      	mov	r4, r1
 800d464:	469a      	mov	sl, r3
 800d466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d46a:	d807      	bhi.n	800d47c <_printf_i+0x28>
 800d46c:	2f62      	cmp	r7, #98	; 0x62
 800d46e:	d80a      	bhi.n	800d486 <_printf_i+0x32>
 800d470:	2f00      	cmp	r7, #0
 800d472:	f000 80d4 	beq.w	800d61e <_printf_i+0x1ca>
 800d476:	2f58      	cmp	r7, #88	; 0x58
 800d478:	f000 80c0 	beq.w	800d5fc <_printf_i+0x1a8>
 800d47c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d484:	e03a      	b.n	800d4fc <_printf_i+0xa8>
 800d486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d48a:	2b15      	cmp	r3, #21
 800d48c:	d8f6      	bhi.n	800d47c <_printf_i+0x28>
 800d48e:	a101      	add	r1, pc, #4	; (adr r1, 800d494 <_printf_i+0x40>)
 800d490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d494:	0800d4ed 	.word	0x0800d4ed
 800d498:	0800d501 	.word	0x0800d501
 800d49c:	0800d47d 	.word	0x0800d47d
 800d4a0:	0800d47d 	.word	0x0800d47d
 800d4a4:	0800d47d 	.word	0x0800d47d
 800d4a8:	0800d47d 	.word	0x0800d47d
 800d4ac:	0800d501 	.word	0x0800d501
 800d4b0:	0800d47d 	.word	0x0800d47d
 800d4b4:	0800d47d 	.word	0x0800d47d
 800d4b8:	0800d47d 	.word	0x0800d47d
 800d4bc:	0800d47d 	.word	0x0800d47d
 800d4c0:	0800d605 	.word	0x0800d605
 800d4c4:	0800d52d 	.word	0x0800d52d
 800d4c8:	0800d5bf 	.word	0x0800d5bf
 800d4cc:	0800d47d 	.word	0x0800d47d
 800d4d0:	0800d47d 	.word	0x0800d47d
 800d4d4:	0800d627 	.word	0x0800d627
 800d4d8:	0800d47d 	.word	0x0800d47d
 800d4dc:	0800d52d 	.word	0x0800d52d
 800d4e0:	0800d47d 	.word	0x0800d47d
 800d4e4:	0800d47d 	.word	0x0800d47d
 800d4e8:	0800d5c7 	.word	0x0800d5c7
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	1d1a      	adds	r2, r3, #4
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	602a      	str	r2, [r5, #0]
 800d4f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e09f      	b.n	800d640 <_printf_i+0x1ec>
 800d500:	6820      	ldr	r0, [r4, #0]
 800d502:	682b      	ldr	r3, [r5, #0]
 800d504:	0607      	lsls	r7, r0, #24
 800d506:	f103 0104 	add.w	r1, r3, #4
 800d50a:	6029      	str	r1, [r5, #0]
 800d50c:	d501      	bpl.n	800d512 <_printf_i+0xbe>
 800d50e:	681e      	ldr	r6, [r3, #0]
 800d510:	e003      	b.n	800d51a <_printf_i+0xc6>
 800d512:	0646      	lsls	r6, r0, #25
 800d514:	d5fb      	bpl.n	800d50e <_printf_i+0xba>
 800d516:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d51a:	2e00      	cmp	r6, #0
 800d51c:	da03      	bge.n	800d526 <_printf_i+0xd2>
 800d51e:	232d      	movs	r3, #45	; 0x2d
 800d520:	4276      	negs	r6, r6
 800d522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d526:	485a      	ldr	r0, [pc, #360]	; (800d690 <_printf_i+0x23c>)
 800d528:	230a      	movs	r3, #10
 800d52a:	e012      	b.n	800d552 <_printf_i+0xfe>
 800d52c:	682b      	ldr	r3, [r5, #0]
 800d52e:	6820      	ldr	r0, [r4, #0]
 800d530:	1d19      	adds	r1, r3, #4
 800d532:	6029      	str	r1, [r5, #0]
 800d534:	0605      	lsls	r5, r0, #24
 800d536:	d501      	bpl.n	800d53c <_printf_i+0xe8>
 800d538:	681e      	ldr	r6, [r3, #0]
 800d53a:	e002      	b.n	800d542 <_printf_i+0xee>
 800d53c:	0641      	lsls	r1, r0, #25
 800d53e:	d5fb      	bpl.n	800d538 <_printf_i+0xe4>
 800d540:	881e      	ldrh	r6, [r3, #0]
 800d542:	4853      	ldr	r0, [pc, #332]	; (800d690 <_printf_i+0x23c>)
 800d544:	2f6f      	cmp	r7, #111	; 0x6f
 800d546:	bf0c      	ite	eq
 800d548:	2308      	moveq	r3, #8
 800d54a:	230a      	movne	r3, #10
 800d54c:	2100      	movs	r1, #0
 800d54e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d552:	6865      	ldr	r5, [r4, #4]
 800d554:	60a5      	str	r5, [r4, #8]
 800d556:	2d00      	cmp	r5, #0
 800d558:	bfa2      	ittt	ge
 800d55a:	6821      	ldrge	r1, [r4, #0]
 800d55c:	f021 0104 	bicge.w	r1, r1, #4
 800d560:	6021      	strge	r1, [r4, #0]
 800d562:	b90e      	cbnz	r6, 800d568 <_printf_i+0x114>
 800d564:	2d00      	cmp	r5, #0
 800d566:	d04b      	beq.n	800d600 <_printf_i+0x1ac>
 800d568:	4615      	mov	r5, r2
 800d56a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d56e:	fb03 6711 	mls	r7, r3, r1, r6
 800d572:	5dc7      	ldrb	r7, [r0, r7]
 800d574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d578:	4637      	mov	r7, r6
 800d57a:	42bb      	cmp	r3, r7
 800d57c:	460e      	mov	r6, r1
 800d57e:	d9f4      	bls.n	800d56a <_printf_i+0x116>
 800d580:	2b08      	cmp	r3, #8
 800d582:	d10b      	bne.n	800d59c <_printf_i+0x148>
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	07de      	lsls	r6, r3, #31
 800d588:	d508      	bpl.n	800d59c <_printf_i+0x148>
 800d58a:	6923      	ldr	r3, [r4, #16]
 800d58c:	6861      	ldr	r1, [r4, #4]
 800d58e:	4299      	cmp	r1, r3
 800d590:	bfde      	ittt	le
 800d592:	2330      	movle	r3, #48	; 0x30
 800d594:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d59c:	1b52      	subs	r2, r2, r5
 800d59e:	6122      	str	r2, [r4, #16]
 800d5a0:	f8cd a000 	str.w	sl, [sp]
 800d5a4:	464b      	mov	r3, r9
 800d5a6:	aa03      	add	r2, sp, #12
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	4640      	mov	r0, r8
 800d5ac:	f7ff fee4 	bl	800d378 <_printf_common>
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	d14a      	bne.n	800d64a <_printf_i+0x1f6>
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	b004      	add	sp, #16
 800d5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5be:	6823      	ldr	r3, [r4, #0]
 800d5c0:	f043 0320 	orr.w	r3, r3, #32
 800d5c4:	6023      	str	r3, [r4, #0]
 800d5c6:	4833      	ldr	r0, [pc, #204]	; (800d694 <_printf_i+0x240>)
 800d5c8:	2778      	movs	r7, #120	; 0x78
 800d5ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d5ce:	6823      	ldr	r3, [r4, #0]
 800d5d0:	6829      	ldr	r1, [r5, #0]
 800d5d2:	061f      	lsls	r7, r3, #24
 800d5d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d5d8:	d402      	bmi.n	800d5e0 <_printf_i+0x18c>
 800d5da:	065f      	lsls	r7, r3, #25
 800d5dc:	bf48      	it	mi
 800d5de:	b2b6      	uxthmi	r6, r6
 800d5e0:	07df      	lsls	r7, r3, #31
 800d5e2:	bf48      	it	mi
 800d5e4:	f043 0320 	orrmi.w	r3, r3, #32
 800d5e8:	6029      	str	r1, [r5, #0]
 800d5ea:	bf48      	it	mi
 800d5ec:	6023      	strmi	r3, [r4, #0]
 800d5ee:	b91e      	cbnz	r6, 800d5f8 <_printf_i+0x1a4>
 800d5f0:	6823      	ldr	r3, [r4, #0]
 800d5f2:	f023 0320 	bic.w	r3, r3, #32
 800d5f6:	6023      	str	r3, [r4, #0]
 800d5f8:	2310      	movs	r3, #16
 800d5fa:	e7a7      	b.n	800d54c <_printf_i+0xf8>
 800d5fc:	4824      	ldr	r0, [pc, #144]	; (800d690 <_printf_i+0x23c>)
 800d5fe:	e7e4      	b.n	800d5ca <_printf_i+0x176>
 800d600:	4615      	mov	r5, r2
 800d602:	e7bd      	b.n	800d580 <_printf_i+0x12c>
 800d604:	682b      	ldr	r3, [r5, #0]
 800d606:	6826      	ldr	r6, [r4, #0]
 800d608:	6961      	ldr	r1, [r4, #20]
 800d60a:	1d18      	adds	r0, r3, #4
 800d60c:	6028      	str	r0, [r5, #0]
 800d60e:	0635      	lsls	r5, r6, #24
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	d501      	bpl.n	800d618 <_printf_i+0x1c4>
 800d614:	6019      	str	r1, [r3, #0]
 800d616:	e002      	b.n	800d61e <_printf_i+0x1ca>
 800d618:	0670      	lsls	r0, r6, #25
 800d61a:	d5fb      	bpl.n	800d614 <_printf_i+0x1c0>
 800d61c:	8019      	strh	r1, [r3, #0]
 800d61e:	2300      	movs	r3, #0
 800d620:	6123      	str	r3, [r4, #16]
 800d622:	4615      	mov	r5, r2
 800d624:	e7bc      	b.n	800d5a0 <_printf_i+0x14c>
 800d626:	682b      	ldr	r3, [r5, #0]
 800d628:	1d1a      	adds	r2, r3, #4
 800d62a:	602a      	str	r2, [r5, #0]
 800d62c:	681d      	ldr	r5, [r3, #0]
 800d62e:	6862      	ldr	r2, [r4, #4]
 800d630:	2100      	movs	r1, #0
 800d632:	4628      	mov	r0, r5
 800d634:	f7f2 fdbc 	bl	80001b0 <memchr>
 800d638:	b108      	cbz	r0, 800d63e <_printf_i+0x1ea>
 800d63a:	1b40      	subs	r0, r0, r5
 800d63c:	6060      	str	r0, [r4, #4]
 800d63e:	6863      	ldr	r3, [r4, #4]
 800d640:	6123      	str	r3, [r4, #16]
 800d642:	2300      	movs	r3, #0
 800d644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d648:	e7aa      	b.n	800d5a0 <_printf_i+0x14c>
 800d64a:	6923      	ldr	r3, [r4, #16]
 800d64c:	462a      	mov	r2, r5
 800d64e:	4649      	mov	r1, r9
 800d650:	4640      	mov	r0, r8
 800d652:	47d0      	blx	sl
 800d654:	3001      	adds	r0, #1
 800d656:	d0ad      	beq.n	800d5b4 <_printf_i+0x160>
 800d658:	6823      	ldr	r3, [r4, #0]
 800d65a:	079b      	lsls	r3, r3, #30
 800d65c:	d413      	bmi.n	800d686 <_printf_i+0x232>
 800d65e:	68e0      	ldr	r0, [r4, #12]
 800d660:	9b03      	ldr	r3, [sp, #12]
 800d662:	4298      	cmp	r0, r3
 800d664:	bfb8      	it	lt
 800d666:	4618      	movlt	r0, r3
 800d668:	e7a6      	b.n	800d5b8 <_printf_i+0x164>
 800d66a:	2301      	movs	r3, #1
 800d66c:	4632      	mov	r2, r6
 800d66e:	4649      	mov	r1, r9
 800d670:	4640      	mov	r0, r8
 800d672:	47d0      	blx	sl
 800d674:	3001      	adds	r0, #1
 800d676:	d09d      	beq.n	800d5b4 <_printf_i+0x160>
 800d678:	3501      	adds	r5, #1
 800d67a:	68e3      	ldr	r3, [r4, #12]
 800d67c:	9903      	ldr	r1, [sp, #12]
 800d67e:	1a5b      	subs	r3, r3, r1
 800d680:	42ab      	cmp	r3, r5
 800d682:	dcf2      	bgt.n	800d66a <_printf_i+0x216>
 800d684:	e7eb      	b.n	800d65e <_printf_i+0x20a>
 800d686:	2500      	movs	r5, #0
 800d688:	f104 0619 	add.w	r6, r4, #25
 800d68c:	e7f5      	b.n	800d67a <_printf_i+0x226>
 800d68e:	bf00      	nop
 800d690:	0800ed4d 	.word	0x0800ed4d
 800d694:	0800ed5e 	.word	0x0800ed5e

0800d698 <__sflush_r>:
 800d698:	898a      	ldrh	r2, [r1, #12]
 800d69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d69e:	4605      	mov	r5, r0
 800d6a0:	0710      	lsls	r0, r2, #28
 800d6a2:	460c      	mov	r4, r1
 800d6a4:	d458      	bmi.n	800d758 <__sflush_r+0xc0>
 800d6a6:	684b      	ldr	r3, [r1, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	dc05      	bgt.n	800d6b8 <__sflush_r+0x20>
 800d6ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	dc02      	bgt.n	800d6b8 <__sflush_r+0x20>
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6ba:	2e00      	cmp	r6, #0
 800d6bc:	d0f9      	beq.n	800d6b2 <__sflush_r+0x1a>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6c4:	682f      	ldr	r7, [r5, #0]
 800d6c6:	6a21      	ldr	r1, [r4, #32]
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	d032      	beq.n	800d732 <__sflush_r+0x9a>
 800d6cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6ce:	89a3      	ldrh	r3, [r4, #12]
 800d6d0:	075a      	lsls	r2, r3, #29
 800d6d2:	d505      	bpl.n	800d6e0 <__sflush_r+0x48>
 800d6d4:	6863      	ldr	r3, [r4, #4]
 800d6d6:	1ac0      	subs	r0, r0, r3
 800d6d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6da:	b10b      	cbz	r3, 800d6e0 <__sflush_r+0x48>
 800d6dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6de:	1ac0      	subs	r0, r0, r3
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6e6:	6a21      	ldr	r1, [r4, #32]
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	47b0      	blx	r6
 800d6ec:	1c43      	adds	r3, r0, #1
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	d106      	bne.n	800d700 <__sflush_r+0x68>
 800d6f2:	6829      	ldr	r1, [r5, #0]
 800d6f4:	291d      	cmp	r1, #29
 800d6f6:	d82b      	bhi.n	800d750 <__sflush_r+0xb8>
 800d6f8:	4a29      	ldr	r2, [pc, #164]	; (800d7a0 <__sflush_r+0x108>)
 800d6fa:	410a      	asrs	r2, r1
 800d6fc:	07d6      	lsls	r6, r2, #31
 800d6fe:	d427      	bmi.n	800d750 <__sflush_r+0xb8>
 800d700:	2200      	movs	r2, #0
 800d702:	6062      	str	r2, [r4, #4]
 800d704:	04d9      	lsls	r1, r3, #19
 800d706:	6922      	ldr	r2, [r4, #16]
 800d708:	6022      	str	r2, [r4, #0]
 800d70a:	d504      	bpl.n	800d716 <__sflush_r+0x7e>
 800d70c:	1c42      	adds	r2, r0, #1
 800d70e:	d101      	bne.n	800d714 <__sflush_r+0x7c>
 800d710:	682b      	ldr	r3, [r5, #0]
 800d712:	b903      	cbnz	r3, 800d716 <__sflush_r+0x7e>
 800d714:	6560      	str	r0, [r4, #84]	; 0x54
 800d716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d718:	602f      	str	r7, [r5, #0]
 800d71a:	2900      	cmp	r1, #0
 800d71c:	d0c9      	beq.n	800d6b2 <__sflush_r+0x1a>
 800d71e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d722:	4299      	cmp	r1, r3
 800d724:	d002      	beq.n	800d72c <__sflush_r+0x94>
 800d726:	4628      	mov	r0, r5
 800d728:	f7ff fbea 	bl	800cf00 <_free_r>
 800d72c:	2000      	movs	r0, #0
 800d72e:	6360      	str	r0, [r4, #52]	; 0x34
 800d730:	e7c0      	b.n	800d6b4 <__sflush_r+0x1c>
 800d732:	2301      	movs	r3, #1
 800d734:	4628      	mov	r0, r5
 800d736:	47b0      	blx	r6
 800d738:	1c41      	adds	r1, r0, #1
 800d73a:	d1c8      	bne.n	800d6ce <__sflush_r+0x36>
 800d73c:	682b      	ldr	r3, [r5, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d0c5      	beq.n	800d6ce <__sflush_r+0x36>
 800d742:	2b1d      	cmp	r3, #29
 800d744:	d001      	beq.n	800d74a <__sflush_r+0xb2>
 800d746:	2b16      	cmp	r3, #22
 800d748:	d101      	bne.n	800d74e <__sflush_r+0xb6>
 800d74a:	602f      	str	r7, [r5, #0]
 800d74c:	e7b1      	b.n	800d6b2 <__sflush_r+0x1a>
 800d74e:	89a3      	ldrh	r3, [r4, #12]
 800d750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d754:	81a3      	strh	r3, [r4, #12]
 800d756:	e7ad      	b.n	800d6b4 <__sflush_r+0x1c>
 800d758:	690f      	ldr	r7, [r1, #16]
 800d75a:	2f00      	cmp	r7, #0
 800d75c:	d0a9      	beq.n	800d6b2 <__sflush_r+0x1a>
 800d75e:	0793      	lsls	r3, r2, #30
 800d760:	680e      	ldr	r6, [r1, #0]
 800d762:	bf08      	it	eq
 800d764:	694b      	ldreq	r3, [r1, #20]
 800d766:	600f      	str	r7, [r1, #0]
 800d768:	bf18      	it	ne
 800d76a:	2300      	movne	r3, #0
 800d76c:	eba6 0807 	sub.w	r8, r6, r7
 800d770:	608b      	str	r3, [r1, #8]
 800d772:	f1b8 0f00 	cmp.w	r8, #0
 800d776:	dd9c      	ble.n	800d6b2 <__sflush_r+0x1a>
 800d778:	6a21      	ldr	r1, [r4, #32]
 800d77a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d77c:	4643      	mov	r3, r8
 800d77e:	463a      	mov	r2, r7
 800d780:	4628      	mov	r0, r5
 800d782:	47b0      	blx	r6
 800d784:	2800      	cmp	r0, #0
 800d786:	dc06      	bgt.n	800d796 <__sflush_r+0xfe>
 800d788:	89a3      	ldrh	r3, [r4, #12]
 800d78a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d78e:	81a3      	strh	r3, [r4, #12]
 800d790:	f04f 30ff 	mov.w	r0, #4294967295
 800d794:	e78e      	b.n	800d6b4 <__sflush_r+0x1c>
 800d796:	4407      	add	r7, r0
 800d798:	eba8 0800 	sub.w	r8, r8, r0
 800d79c:	e7e9      	b.n	800d772 <__sflush_r+0xda>
 800d79e:	bf00      	nop
 800d7a0:	dfbffffe 	.word	0xdfbffffe

0800d7a4 <_fflush_r>:
 800d7a4:	b538      	push	{r3, r4, r5, lr}
 800d7a6:	690b      	ldr	r3, [r1, #16]
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	b913      	cbnz	r3, 800d7b4 <_fflush_r+0x10>
 800d7ae:	2500      	movs	r5, #0
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	b118      	cbz	r0, 800d7be <_fflush_r+0x1a>
 800d7b6:	6a03      	ldr	r3, [r0, #32]
 800d7b8:	b90b      	cbnz	r3, 800d7be <_fflush_r+0x1a>
 800d7ba:	f7ff f999 	bl	800caf0 <__sinit>
 800d7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d0f3      	beq.n	800d7ae <_fflush_r+0xa>
 800d7c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7c8:	07d0      	lsls	r0, r2, #31
 800d7ca:	d404      	bmi.n	800d7d6 <_fflush_r+0x32>
 800d7cc:	0599      	lsls	r1, r3, #22
 800d7ce:	d402      	bmi.n	800d7d6 <_fflush_r+0x32>
 800d7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7d2:	f7ff fb84 	bl	800cede <__retarget_lock_acquire_recursive>
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	4621      	mov	r1, r4
 800d7da:	f7ff ff5d 	bl	800d698 <__sflush_r>
 800d7de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7e0:	07da      	lsls	r2, r3, #31
 800d7e2:	4605      	mov	r5, r0
 800d7e4:	d4e4      	bmi.n	800d7b0 <_fflush_r+0xc>
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	059b      	lsls	r3, r3, #22
 800d7ea:	d4e1      	bmi.n	800d7b0 <_fflush_r+0xc>
 800d7ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ee:	f7ff fb77 	bl	800cee0 <__retarget_lock_release_recursive>
 800d7f2:	e7dd      	b.n	800d7b0 <_fflush_r+0xc>

0800d7f4 <__swhatbuf_r>:
 800d7f4:	b570      	push	{r4, r5, r6, lr}
 800d7f6:	460c      	mov	r4, r1
 800d7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7fc:	2900      	cmp	r1, #0
 800d7fe:	b096      	sub	sp, #88	; 0x58
 800d800:	4615      	mov	r5, r2
 800d802:	461e      	mov	r6, r3
 800d804:	da0d      	bge.n	800d822 <__swhatbuf_r+0x2e>
 800d806:	89a3      	ldrh	r3, [r4, #12]
 800d808:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d80c:	f04f 0100 	mov.w	r1, #0
 800d810:	bf0c      	ite	eq
 800d812:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d816:	2340      	movne	r3, #64	; 0x40
 800d818:	2000      	movs	r0, #0
 800d81a:	6031      	str	r1, [r6, #0]
 800d81c:	602b      	str	r3, [r5, #0]
 800d81e:	b016      	add	sp, #88	; 0x58
 800d820:	bd70      	pop	{r4, r5, r6, pc}
 800d822:	466a      	mov	r2, sp
 800d824:	f000 f87c 	bl	800d920 <_fstat_r>
 800d828:	2800      	cmp	r0, #0
 800d82a:	dbec      	blt.n	800d806 <__swhatbuf_r+0x12>
 800d82c:	9901      	ldr	r1, [sp, #4]
 800d82e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d832:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d836:	4259      	negs	r1, r3
 800d838:	4159      	adcs	r1, r3
 800d83a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d83e:	e7eb      	b.n	800d818 <__swhatbuf_r+0x24>

0800d840 <__smakebuf_r>:
 800d840:	898b      	ldrh	r3, [r1, #12]
 800d842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d844:	079d      	lsls	r5, r3, #30
 800d846:	4606      	mov	r6, r0
 800d848:	460c      	mov	r4, r1
 800d84a:	d507      	bpl.n	800d85c <__smakebuf_r+0x1c>
 800d84c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d850:	6023      	str	r3, [r4, #0]
 800d852:	6123      	str	r3, [r4, #16]
 800d854:	2301      	movs	r3, #1
 800d856:	6163      	str	r3, [r4, #20]
 800d858:	b002      	add	sp, #8
 800d85a:	bd70      	pop	{r4, r5, r6, pc}
 800d85c:	ab01      	add	r3, sp, #4
 800d85e:	466a      	mov	r2, sp
 800d860:	f7ff ffc8 	bl	800d7f4 <__swhatbuf_r>
 800d864:	9900      	ldr	r1, [sp, #0]
 800d866:	4605      	mov	r5, r0
 800d868:	4630      	mov	r0, r6
 800d86a:	f7ff fbb5 	bl	800cfd8 <_malloc_r>
 800d86e:	b948      	cbnz	r0, 800d884 <__smakebuf_r+0x44>
 800d870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d874:	059a      	lsls	r2, r3, #22
 800d876:	d4ef      	bmi.n	800d858 <__smakebuf_r+0x18>
 800d878:	f023 0303 	bic.w	r3, r3, #3
 800d87c:	f043 0302 	orr.w	r3, r3, #2
 800d880:	81a3      	strh	r3, [r4, #12]
 800d882:	e7e3      	b.n	800d84c <__smakebuf_r+0xc>
 800d884:	89a3      	ldrh	r3, [r4, #12]
 800d886:	6020      	str	r0, [r4, #0]
 800d888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d88c:	81a3      	strh	r3, [r4, #12]
 800d88e:	9b00      	ldr	r3, [sp, #0]
 800d890:	6163      	str	r3, [r4, #20]
 800d892:	9b01      	ldr	r3, [sp, #4]
 800d894:	6120      	str	r0, [r4, #16]
 800d896:	b15b      	cbz	r3, 800d8b0 <__smakebuf_r+0x70>
 800d898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d89c:	4630      	mov	r0, r6
 800d89e:	f000 f851 	bl	800d944 <_isatty_r>
 800d8a2:	b128      	cbz	r0, 800d8b0 <__smakebuf_r+0x70>
 800d8a4:	89a3      	ldrh	r3, [r4, #12]
 800d8a6:	f023 0303 	bic.w	r3, r3, #3
 800d8aa:	f043 0301 	orr.w	r3, r3, #1
 800d8ae:	81a3      	strh	r3, [r4, #12]
 800d8b0:	89a3      	ldrh	r3, [r4, #12]
 800d8b2:	431d      	orrs	r5, r3
 800d8b4:	81a5      	strh	r5, [r4, #12]
 800d8b6:	e7cf      	b.n	800d858 <__smakebuf_r+0x18>

0800d8b8 <_putc_r>:
 800d8b8:	b570      	push	{r4, r5, r6, lr}
 800d8ba:	460d      	mov	r5, r1
 800d8bc:	4614      	mov	r4, r2
 800d8be:	4606      	mov	r6, r0
 800d8c0:	b118      	cbz	r0, 800d8ca <_putc_r+0x12>
 800d8c2:	6a03      	ldr	r3, [r0, #32]
 800d8c4:	b90b      	cbnz	r3, 800d8ca <_putc_r+0x12>
 800d8c6:	f7ff f913 	bl	800caf0 <__sinit>
 800d8ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8cc:	07d8      	lsls	r0, r3, #31
 800d8ce:	d405      	bmi.n	800d8dc <_putc_r+0x24>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	0599      	lsls	r1, r3, #22
 800d8d4:	d402      	bmi.n	800d8dc <_putc_r+0x24>
 800d8d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8d8:	f7ff fb01 	bl	800cede <__retarget_lock_acquire_recursive>
 800d8dc:	68a3      	ldr	r3, [r4, #8]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	60a3      	str	r3, [r4, #8]
 800d8e4:	da05      	bge.n	800d8f2 <_putc_r+0x3a>
 800d8e6:	69a2      	ldr	r2, [r4, #24]
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	db12      	blt.n	800d912 <_putc_r+0x5a>
 800d8ec:	b2eb      	uxtb	r3, r5
 800d8ee:	2b0a      	cmp	r3, #10
 800d8f0:	d00f      	beq.n	800d912 <_putc_r+0x5a>
 800d8f2:	6823      	ldr	r3, [r4, #0]
 800d8f4:	1c5a      	adds	r2, r3, #1
 800d8f6:	6022      	str	r2, [r4, #0]
 800d8f8:	701d      	strb	r5, [r3, #0]
 800d8fa:	b2ed      	uxtb	r5, r5
 800d8fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8fe:	07da      	lsls	r2, r3, #31
 800d900:	d405      	bmi.n	800d90e <_putc_r+0x56>
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	059b      	lsls	r3, r3, #22
 800d906:	d402      	bmi.n	800d90e <_putc_r+0x56>
 800d908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d90a:	f7ff fae9 	bl	800cee0 <__retarget_lock_release_recursive>
 800d90e:	4628      	mov	r0, r5
 800d910:	bd70      	pop	{r4, r5, r6, pc}
 800d912:	4629      	mov	r1, r5
 800d914:	4622      	mov	r2, r4
 800d916:	4630      	mov	r0, r6
 800d918:	f7ff f9d9 	bl	800ccce <__swbuf_r>
 800d91c:	4605      	mov	r5, r0
 800d91e:	e7ed      	b.n	800d8fc <_putc_r+0x44>

0800d920 <_fstat_r>:
 800d920:	b538      	push	{r3, r4, r5, lr}
 800d922:	4d07      	ldr	r5, [pc, #28]	; (800d940 <_fstat_r+0x20>)
 800d924:	2300      	movs	r3, #0
 800d926:	4604      	mov	r4, r0
 800d928:	4608      	mov	r0, r1
 800d92a:	4611      	mov	r1, r2
 800d92c:	602b      	str	r3, [r5, #0]
 800d92e:	f000 f831 	bl	800d994 <_fstat>
 800d932:	1c43      	adds	r3, r0, #1
 800d934:	d102      	bne.n	800d93c <_fstat_r+0x1c>
 800d936:	682b      	ldr	r3, [r5, #0]
 800d938:	b103      	cbz	r3, 800d93c <_fstat_r+0x1c>
 800d93a:	6023      	str	r3, [r4, #0]
 800d93c:	bd38      	pop	{r3, r4, r5, pc}
 800d93e:	bf00      	nop
 800d940:	20001840 	.word	0x20001840

0800d944 <_isatty_r>:
 800d944:	b538      	push	{r3, r4, r5, lr}
 800d946:	4d06      	ldr	r5, [pc, #24]	; (800d960 <_isatty_r+0x1c>)
 800d948:	2300      	movs	r3, #0
 800d94a:	4604      	mov	r4, r0
 800d94c:	4608      	mov	r0, r1
 800d94e:	602b      	str	r3, [r5, #0]
 800d950:	f000 f828 	bl	800d9a4 <_isatty>
 800d954:	1c43      	adds	r3, r0, #1
 800d956:	d102      	bne.n	800d95e <_isatty_r+0x1a>
 800d958:	682b      	ldr	r3, [r5, #0]
 800d95a:	b103      	cbz	r3, 800d95e <_isatty_r+0x1a>
 800d95c:	6023      	str	r3, [r4, #0]
 800d95e:	bd38      	pop	{r3, r4, r5, pc}
 800d960:	20001840 	.word	0x20001840

0800d964 <_sbrk_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	4d06      	ldr	r5, [pc, #24]	; (800d980 <_sbrk_r+0x1c>)
 800d968:	2300      	movs	r3, #0
 800d96a:	4604      	mov	r4, r0
 800d96c:	4608      	mov	r0, r1
 800d96e:	602b      	str	r3, [r5, #0]
 800d970:	f000 f830 	bl	800d9d4 <_sbrk>
 800d974:	1c43      	adds	r3, r0, #1
 800d976:	d102      	bne.n	800d97e <_sbrk_r+0x1a>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	b103      	cbz	r3, 800d97e <_sbrk_r+0x1a>
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	20001840 	.word	0x20001840

0800d984 <_close>:
 800d984:	4b02      	ldr	r3, [pc, #8]	; (800d990 <_close+0xc>)
 800d986:	2258      	movs	r2, #88	; 0x58
 800d988:	601a      	str	r2, [r3, #0]
 800d98a:	f04f 30ff 	mov.w	r0, #4294967295
 800d98e:	4770      	bx	lr
 800d990:	20001840 	.word	0x20001840

0800d994 <_fstat>:
 800d994:	4b02      	ldr	r3, [pc, #8]	; (800d9a0 <_fstat+0xc>)
 800d996:	2258      	movs	r2, #88	; 0x58
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	f04f 30ff 	mov.w	r0, #4294967295
 800d99e:	4770      	bx	lr
 800d9a0:	20001840 	.word	0x20001840

0800d9a4 <_isatty>:
 800d9a4:	4b02      	ldr	r3, [pc, #8]	; (800d9b0 <_isatty+0xc>)
 800d9a6:	2258      	movs	r2, #88	; 0x58
 800d9a8:	601a      	str	r2, [r3, #0]
 800d9aa:	2000      	movs	r0, #0
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	20001840 	.word	0x20001840

0800d9b4 <_lseek>:
 800d9b4:	4b02      	ldr	r3, [pc, #8]	; (800d9c0 <_lseek+0xc>)
 800d9b6:	2258      	movs	r2, #88	; 0x58
 800d9b8:	601a      	str	r2, [r3, #0]
 800d9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d9be:	4770      	bx	lr
 800d9c0:	20001840 	.word	0x20001840

0800d9c4 <_read>:
 800d9c4:	4b02      	ldr	r3, [pc, #8]	; (800d9d0 <_read+0xc>)
 800d9c6:	2258      	movs	r2, #88	; 0x58
 800d9c8:	601a      	str	r2, [r3, #0]
 800d9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ce:	4770      	bx	lr
 800d9d0:	20001840 	.word	0x20001840

0800d9d4 <_sbrk>:
 800d9d4:	4a04      	ldr	r2, [pc, #16]	; (800d9e8 <_sbrk+0x14>)
 800d9d6:	6811      	ldr	r1, [r2, #0]
 800d9d8:	4603      	mov	r3, r0
 800d9da:	b909      	cbnz	r1, 800d9e0 <_sbrk+0xc>
 800d9dc:	4903      	ldr	r1, [pc, #12]	; (800d9ec <_sbrk+0x18>)
 800d9de:	6011      	str	r1, [r2, #0]
 800d9e0:	6810      	ldr	r0, [r2, #0]
 800d9e2:	4403      	add	r3, r0
 800d9e4:	6013      	str	r3, [r2, #0]
 800d9e6:	4770      	bx	lr
 800d9e8:	20001850 	.word	0x20001850
 800d9ec:	20001858 	.word	0x20001858

0800d9f0 <_init>:
 800d9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f2:	bf00      	nop
 800d9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9f6:	bc08      	pop	{r3}
 800d9f8:	469e      	mov	lr, r3
 800d9fa:	4770      	bx	lr

0800d9fc <_fini>:
 800d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9fe:	bf00      	nop
 800da00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da02:	bc08      	pop	{r3}
 800da04:	469e      	mov	lr, r3
 800da06:	4770      	bx	lr
